
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		ВвестиКодОдноразовойСкидкиЗавершение(Штрихкод, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(ТекКод) Тогда
		ВвестиКодОдноразовойСкидкиЗавершение(ТекКод, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиКодОдноразовойСкидкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Если СписокОдноразовыхКодов.НайтиПоЗначению(Результат) = Неопределено Тогда
			РезультатПоиска = НайтиСкидку(Результат);
			Если ЗначениеЗаполнено(РезультатПоиска.ТекстСообщения) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПоиска.ТекстСообщения);
			Иначе
				СписокОдноразовыхКодов.Добавить(Результат);
				ТекстОповещения = НСтр("ru = 'Код успешно активирован'");
				ПоказатьОповещениеПользователя(ТекстОповещения, , Результат);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Код %1 уже был введен'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Результат);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПримененныеСкидки = ПолучитьИзВременногоХранилища(Параметры.АдресВоВременномХранилище);
	УдалитьИзВременногоХранилища(Параметры.АдресВоВременномХранилище);
	
	Если ПримененныеСкидки.Свойство("СведенияДокумента") Тогда
		ОтобразитьНадписьСегментаИсключения(ПримененныеСкидки.СведенияДокумента);
	КонецЕсли;
	
	СформироватьИнформациюОРасчетеСкидокПоДокументу(ПримененныеСкидки.ДеревоСкидок);
	
	Если Параметры.Свойство("СписокОдноразовыхКодов") Тогда
		СписокОдноразовыхКодов.ЗагрузитьЗначения(Параметры.СписокОдноразовыхКодов);
		Для Каждого КодСкидки Из СписокОдноразовыхКодов Цикл
			РезультатПоиска = НайтиСкидку(КодСкидки.Значение);
			Если ЗначениеЗаполнено(РезультатПоиска.ТекстСообщения) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПоиска.ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Параметры.Свойство("Магазин", Магазин);
	
	Элементы.НадписьОдноразовыеКоды.Видимость = ЕстьОдноразовыеКоды;
	Элементы.ФормаВвестиКодОдноразовойСкидки.Видимость = ЕстьОдноразовыеКоды;
	
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода,СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	РазвернутьДеревоДоУсловийРекурсивно(ИнформацияОРасчетеСкидокПоДокументуВЦелом, Элементы.ИнформацияОРасчетеСкидокПоДокументуВЦелом);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Рассчитать(Команда)
	
	ИтоговыйСписок = СтруктураОтвета();
	Закрыть(ИтоговыйСписок);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура РассчитатьИнформациюОРасчетеСкидокПоДокументу(ДеревоСкидок)
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			РассчитатьИнформациюОРасчетеСкидокПоДокументу(СтрокаДерева);
			
			СтрокаДерева.ИндексКартинки = СкидкиНаценкиСервер.ПолучитьИндексКартинкиДляГруппы(СтрокаДерева);
			СтрокаДерева.Значение       = СтрокаДерева.СкидкаНаценка;
			СтрокаДерева.Разворачивать  = Истина;
			
			Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
				Если ПодчиненнаяСтрока.Действует Тогда
					СтрокаДерева.Действует        = Истина;
					СтрокаДерева.УсловияВыполнены = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			ВсеУсловияВыполнены = Истина;
			СтрокаДерева.ИндексКартинки = СкидкиНаценкиСервер.ПолучитьИндексКартинкиДляСкидки(СтрокаДерева);
			СтрокаДерева.Значение = СтрокаДерева.СкидкаНаценка;
			Если НЕ СтрокаДерева.Безусловная Тогда
				Для Каждого СтрокаУсловие Из СтрокаДерева.СтруктураДополнительныхДанных.СтрокаУсловий.Строки Цикл
					Если СтрокаУсловие.ТипУсловия = Перечисления.УсловияПредоставленияСкидокНаценок.ОдноразовыйКод Тогда
						ЕстьОдноразовыеКоды = Истина;
					КонецЕсли;
					Если НЕ СтрокаУсловие.Выполнено Тогда
						ВсеУсловияВыполнены = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ВсеУсловияВыполнены Тогда
				СтрокаДерева.Действует = Истина;
				СтрокаДерева.УсловияВыполнены = Истина;
			Иначе
				СтрокаДерева.Действует = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьИнформациюОРасчетеСкидокПоДокументу(ВходящееДеревоСкидок)
	
	ДеревоСкидок = ВходящееДеревоСкидок.Скопировать();
	ДеревоСкидок.Колонки.Добавить("ИндексКартинки",   Новый ОписаниеТипов("Число"));
	ДеревоСкидок.Колонки.Добавить("Действует",        Новый ОписаниеТипов("Булево"));
	ДеревоСкидок.Колонки.Добавить("УсловияВыполнены", Новый ОписаниеТипов("Булево"));
	ДеревоСкидок.Колонки.Добавить("Разворачивать",  Новый ОписаниеТипов("Булево"));
	ДеревоСкидок.Колонки.Добавить("ЭтоУсловие",     Новый ОписаниеТипов("Булево"));
	ДеревоСкидок.Колонки.Добавить("Значение",       Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки, СправочникСсылка.УсловияПредоставленияСкидокНаценок"));
	
	РассчитатьИнформациюОРасчетеСкидокПоДокументу(ДеревоСкидок);
	
	ЗаполнитьСтрокиДерева(ИнформацияОРасчетеСкидокПоДокументуВЦелом, ДеревоСкидок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиДерева(СтрокаПриемник, СтрокаИсточник)
	
	ЭлементыДерева = СтрокаПриемник.ПолучитьЭлементы();
	Для Каждого ПодчиненнаяСтрока Из СтрокаИсточник.Строки Цикл
		Если ЗначениеЗаполнено(ПодчиненнаяСтрока.СкидкаНаценка)
			ИЛИ ПодчиненнаяСтрока.Родитель = Неопределено Тогда
			Если ПодчиненнаяСтрока.Строки.Количество() > 0 Тогда
 				НоваяПодчиненнаяСтрока = ЭлементыДерева.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяПодчиненнаяСтрока, ПодчиненнаяСтрока);
				ЗаполнитьСтрокиДерева(НоваяПодчиненнаяСтрока, ПодчиненнаяСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СтруктураОтвета()
	
	Результат = Новый Структура;
	Результат.Вставить("СписокОдноразовыхКодов", СписокОдноразовыхКодов);
	УправляемыеСкидки = Новый СписокЗначений;
	
	ДеревоСкидок = РеквизитФормыВЗначение("ИнформацияОРасчетеСкидокПоДокументуВЦелом");
	НайденныеСтроки = ДеревоСкидок.Строки.НайтиСтроки(Новый Структура("НазначенаПользователем", Истина), Истина);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		УправляемыеСкидки.Добавить(НайденнаяСтрока.Значение);
	КонецЦикла;
	Результат.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура РазвернутьДеревоДоУсловийРекурсивно(СтрокаДерева, ЭлементФормы)
	
	КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
	Для Каждого Элемент Из КоллекцияЭлементов Цикл
	
		Если Элемент.Разворачивать Тогда
			ЭлементФормы.Развернуть(Элемент.ПолучитьИдентификатор());
			РазвернутьДеревоДоУсловийРекурсивно(Элемент, ЭлементФормы);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьНадписьСегментаИсключения(СведенияДокумента)
	
	ТоварыДокумента = СведенияДокумента.Товары.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	втТовары КАК Товары
	|ГДЕ
	|	Товары.Номенклатура.ТипНоменклатуры = &ПодарочныйСертификат
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос.УстановитьПараметр("ПодарочныйСертификат", Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
	Запрос.УстановитьПараметр("Товары", ТоварыДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоСтрокВсего = 0;
	Если Выборка.Количество() > 0 Тогда
		Элементы.ТекстОбИсключениях.Видимость = Истина;
		СтрокиСИсключениями = "";
		КоличествоСтрок = 0;
		Пока Выборка.Следующий() Цикл
			КоличествоСтрок = КоличествоСтрок + 1;
			КоличествоСтрокВсего = КоличествоСтрокВсего + 1;
			Если КоличествоСтрок > 1 Тогда
				СтрокиСИсключениями = СтрокиСИсключениями + ", ";
			КонецЕсли;
			СтрокиСИсключениями = СтрокиСИсключениями + Формат(Выборка.НомерСтроки, "ЧН=0; ЧГ=0");
		КонецЦикла;
		Если КоличествоСтрок = 1 Тогда
			ТекстЗаголовка = НСтр("ru = 'В строке %1 содержится номенклатура, являющаяся подарочным сертификатом.'");
		Иначе
			ТекстЗаголовка = НСтр("ru = 'В строках %1 содержится номенклатура, являющаяся подарочным сертификатом.'");
		КонецЕсли;
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, СтрокиСИсключениями);
		Элементы.ТекстОбИсключениях.Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	втТовары КАК Товары
	|ГДЕ
	|	Товары.Номенклатура.ТипНоменклатуры = &Услуга
	|	И Товары.Номенклатура.ДоговорПлатежногоАгента <> &ПустойДоговор
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос.УстановитьПараметр("Услуга", Перечисления.ТипыНоменклатуры.Услуга);
	Запрос.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыПлатежныхАгентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("Товары", ТоварыДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Элементы.ТекстОбИсключениях.Видимость = Истина;
		СтрокиСИсключениями = "";
		КоличествоСтрок = 0;
		Пока Выборка.Следующий() Цикл
			КоличествоСтрок = КоличествоСтрок + 1;
			КоличествоСтрокВсего = КоличествоСтрокВсего + 1;
			Если КоличествоСтрок > 1 Тогда
				СтрокиСИсключениями = СтрокиСИсключениями + ", ";
			КонецЕсли;
			СтрокиСИсключениями = СтрокиСИсключениями + Формат(Выборка.НомерСтроки, "ЧН=0; ЧГ=0");
		КонецЦикла;
		Если КоличествоСтрок = 1 Тогда
			ТекстЗаголовка = НСтр("ru = 'В строке %1 содержится номенклатура, являющаяся агентским платежом.'");
		Иначе
			ТекстЗаголовка = НСтр("ru = 'В строках %1 содержится номенклатура, являющаяся агентским платежом.'");
		КонецЕсли;
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, СтрокиСИсключениями);
		Элементы.ТекстОбИсключениях.Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияДокумента.СегментИсключаемойНоменклатуры) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ втТовары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	втТовары КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|		ПО НоменклатураСегмента.Номенклатура = Товары.Номенклатура
		|			И НоменклатураСегмента.Характеристика = Товары.Характеристика
		|ГДЕ
		|	НоменклатураСегмента.Сегмент = &Сегмент
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		Запрос.УстановитьПараметр("Сегмент", СведенияДокумента.СегментИсключаемойНоменклатуры);
		Запрос.УстановитьПараметр("Товары", СведенияДокумента.Товары.Выгрузить());
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() > 0 Тогда
			Элементы.ТекстОбИсключениях.Видимость = Истина;
			СтрокиСИсключениями = "";
			КоличествоСтрок = 0;
			Пока Выборка.Следующий() Цикл
				КоличествоСтрок = КоличествоСтрок + 1;
				КоличествоСтрокВсего = КоличествоСтрокВсего + 1;
				Если КоличествоСтрок > 1 Тогда
					СтрокиСИсключениями = СтрокиСИсключениями + ", ";
				КонецЕсли;
				СтрокиСИсключениями = СтрокиСИсключениями + Формат(Выборка.НомерСтроки, "ЧН=0; ЧГ=0");
			КонецЦикла;
			Если КоличествоСтрок = 1 Тогда
				ТекстЗаголовка = НСтр("ru = 'В строке %1 содержится номенклатура, входящая в состав сегмента-исключения скидок.'");
			Иначе
				ТекстЗаголовка = НСтр("ru = 'В строках %1 содержится номенклатура, входящая в состав сегмента-исключения скидок.'");
			КонецЕсли;
			ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, СтрокиСИсключениями);
			Элементы.ТекстОбИсключениях.Заголовок = Элементы.ТекстОбИсключениях.Заголовок + Символы.ПС + ТекстЗаголовка;
		КонецЕсли;
	КонецЕсли;
	Если КоличествоСтрокВсего = 1 Тогда
		Элементы.ТекстОбИсключениях.Заголовок = Элементы.ТекстОбИсключениях.Заголовок
			+ Символы.ПС + НСтр("ru = 'В этой строке автоматические и управляемые скидки (кроме подарков и внешних обработок) рассчитываться не будут.'");
	Иначе
		Элементы.ТекстОбИсключениях.Заголовок = Элементы.ТекстОбИсключениях.Заголовок
			+ Символы.ПС + НСтр("ru = 'В этих строках автоматические и управляемые скидки (кроме подарков и внешних обработок) рассчитываться не будут.'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиКодОдноразовойСкидки(Команда)
	
	ОповещениеВводаКода = Новый ОписаниеОповещения("ВвестиКодОдноразовойСкидкиЗавершение", ЭтотОбъект);
	ЗаголовокВвода = НСтр("ru = 'Введите одноразовый код скидки'");
	ПоказатьВводСтроки(ОповещениеВводаКода, , ЗаголовокВвода);
	
КонецПроцедуры

&НаСервере
Функция НайтиСкидку(КодСкидки)
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("ТекстСообщения", "");
	ОднократнаяСкидка = Неопределено;
	ТаблицаСкидок = СкидкиНаценкиСерверПереопределяемый.СкидкиДляКупона(КодСкидки);
	Если ТаблицаСкидок.Количество() = 0 Тогда
		СтруктураРезультат.ТекстСообщения = НСтр("ru = 'Не найдено действующей скидки для кода %1'");
		СтруктураРезультат.ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтруктураРезультат.ТекстСообщения, КодСкидки);
	Иначе
		Для Каждого СтрокаСкидки Из ТаблицаСкидок Цикл
			Если ЗначениеЗаполнено(СтрокаСкидки.Скидка) Тогда
				СкидкаВДеревеНайдена = Ложь;
				ОбновитьСкидкуВДереве(ИнформацияОРасчетеСкидокПоДокументуВЦелом, СтрокаСкидки.Скидка, СкидкаВДеревеНайдена);
				Если НЕ СкидкаВДеревеНайдена Тогда
					СтруктураРезультат.ТекстСообщения = НСтр("ru = 'Не найдено действующей скидки для кода %1'");
					СтруктураРезультат.ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтруктураРезультат.ТекстСообщения, КодСкидки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбновитьСкидкуВДереве(Дерево, Скидка, СкидкаВДеревеНайдена)
	
	ЭлементыДерева = Дерево.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		Если СтрокаДерева.Значение = Скидка Тогда
			СтрокаДерева.УсловияВыполнены = Истина;
			СтрокаДерева.НазначенаПользователем = Истина;
			СкидкаВДеревеНайдена = Истина;
			Элементы.ИнформацияОРасчетеСкидокПоДокументуВЦелом.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
			Возврат;
		Иначе
			ОбновитьСкидкуВДереве(СтрокаДерева, Скидка, СкидкаВДеревеНайдена);
		КонецЕсли;
		Если СкидкаВДеревеНайдена Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
