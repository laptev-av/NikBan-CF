
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Характеристика.Видимость = Параметры.ОтображатьИнформациюОСкидкахПоСтроке;
	Элементы.Номенклатура.Видимость   = Параметры.ОтображатьИнформациюОСкидкахПоСтроке;
	
	Элементы.СуммаРучнойСкидки.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	
	Валюта = "RUB";
	
	Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	Если Параметры.ОтображатьИнформациюОСкидкахПоСтроке Тогда
		
		Номенклатура   = Параметры.ТекущиеДанные.Номенклатура;
		Характеристика = Параметры.ТекущиеДанные.Характеристика;
		
		// Общая сумма скидки включает в себя сумму автоматической и ручной скидки.
		СуммаСкидки       = 0;
		СуммаРучнойСкидки = Параметры.ТекущиеДанные.СуммаРучнойСкидки;
		СуммаСкидки       = СуммаСкидки + СуммаРучнойСкидки;
		
		Отбор = Новый Структура("КлючСвязи", Параметры.ТекущиеДанные.КлючСвязи);
		Для Каждого СтрокаТЗСкидкиНаценки Из Параметры.Объект.СкидкиНаценки.НайтиСтроки(Отбор) Цикл
			
			СуммаСкидки = СуммаСкидки + СтрокаТЗСкидкиНаценки.Сумма;
			
		КонецЦикла;
		
	Иначе
		
		СуммаСкидки       = 0;
		СуммаРучнойСкидки = Параметры.Объект.Товары.Итог("СуммаРучнойСкидки");
		СуммаСкидки       = СуммаСкидки + СуммаРучнойСкидки + Параметры.Объект.Товары.Итог("СуммаАвтоматическойСкидки");
		
	КонецЕсли;
	
	Параметры.Свойство("МинимальнаяЦена", МинимальнаяЦена);
	
	Если ЗначениеЗаполнено(Параметры.АдресПримененныхСкидокВоВременномХранилище) Тогда
		
		ПримененныеСкидки = ПолучитьИзВременногоХранилища(Параметры.АдресПримененныхСкидокВоВременномХранилище);
		
		Если Параметры.ОтображатьСегментИсключение Тогда
			ОтобразитьНадписьСегментаИсключения();
		КонецЕсли;
	
		Если Параметры.ОтображатьИнформациюОРасчетеСкидокПоСтроке Тогда 
			СформироватьИнформациюОРасчетеСкидокПоСтроке(ПримененныеСкидки, Параметры.ТекущиеДанные.КлючСвязи, АвтоматическиеСкидки.Выгрузить());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьДеревоДоУсловийРекурсивно(ИнформацияОРасчетеСкидокПоСтроке, Элементы.ИнформацияОРасчетеСкидокПоСтроке);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнформацияОРасчетеСкидокПоСтроке

&НаКлиенте
Процедура ИнформацияОРасчетеСкидокПоСтрокеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОРасчетеСкидокПоСтрокеЗначениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РазвернутьДеревоДоУсловийРекурсивно(СтрокаДерева, ЭлементФормы)
	
	КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
	Для каждого Элемент Из КоллекцияЭлементов Цикл
	
		Если Элемент.Разворачивать Тогда
			ЭлементФормы.Развернуть(Элемент.ПолучитьИдентификатор());
			РазвернутьДеревоДоУсловийРекурсивно(Элемент, ЭлементФормы);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьИнформациюОРасчетеСкидокПоСтроке(ПримененныеСкидки, КлючСвязи, ТаблицаАвтоматическиеСкидки)
	
	ТаблицаСкидок = ПримененныеСкидки.СкидкиНаценки.СкопироватьКолонки();
	Для Каждого СтрокаСкидки Из ПримененныеСкидки.СкидкиНаценки Цикл
		Если СтрокаСкидки.КлючСвязи = КлючСвязи 
			ИЛИ СтрокаСкидки.КлючСвязи = 0 Тогда
			НоваяСтрока = ТаблицаСкидок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСкидки);
		КонецЕсли;
	КонецЦикла;
	
	Если ПримененныеСкидки.Свойство("Подарки") Тогда
		Для Каждого СтрокаСкидки Из ПримененныеСкидки.Подарки Цикл
			Если СтрокаСкидки.КлючСвязи = КлючСвязи 
				ИЛИ СтрокаСкидки.КлючСвязи = 0 Тогда
				НоваяСтрока = ТаблицаСкидок.Добавить();
				НоваяСтрока.СкидкаНаценка = СтрокаСкидки.СкидкаНаценка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаСкидки Из ПримененныеСкидки.БонусныеБаллыКНачислению Цикл
		Если СтрокаСкидки.КлючСвязи = КлючСвязи 
			ИЛИ СтрокаСкидки.КлючСвязи = 0 Тогда
			НоваяСтрока = ТаблицаСкидок.Добавить();
			НоваяСтрока.СкидкаНаценка = СтрокаСкидки.СкидкаНаценка;
		КонецЕсли;
	КонецЦикла;
	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСкидок.КлючСвязи КАК КлючСвязи,
	|	ТаблицаСкидок.СкидкаНаценка КАК СкидкаНаценка,
	|	ТаблицаСкидок.Сумма КАК Сумма,
	|	ТаблицаСкидок.ОграниченаМинимальнойЦеной КАК ОграниченаМинимальнойЦеной
	|ПОМЕСТИТЬ ТаблицаСкидок
	|ИЗ
	|	&ТаблицаСкидок КАК ТаблицаСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействиеСкидок.СкидкаНаценка,
	|	МАКСИМУМ(ДействиеСкидок.Сумма) КАК Сумма,
	|	МАКСИМУМ(ДействиеСкидок.ОграниченаМинимальнойЦеной) КАК ОграниченаМинимальнойЦеной,
	|	МАКСИМУМ(ДействиеСкидок.КлючСвязи) КАК КлючСвязи
	|ПОМЕСТИТЬ ДействиеСкидок
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДействиеСкидок.СкидкаНаценка КАК СкидкаНаценка,
	|		NULL КАК Сумма,
	|		NULL КАК ОграниченаМинимальнойЦеной,
	|		NULL КАК КлючСвязи
	|	ИЗ
	|		РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	|				&ТекущаяДата,
	|				(КОНЕЦПЕРИОДА(ДатаОкончания, ДЕНЬ) >= &ТекущаяДата
	|					ИЛИ ДатаОкончания = &ПустаяДата)
	|					И СкидкаНаценка.СпособПредоставления <> ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ЗапретРозничнойПродажи)
	|					И СкидкаНаценка.СтатусДействия = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|					И (Магазин = &Магазин
	|						ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))) КАК ДействиеСкидок
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаСкидок.СкидкаНаценка,
	|		ТаблицаСкидок.Сумма,
	|		ТаблицаСкидок.ОграниченаМинимальнойЦеной,
	|		ТаблицаСкидок.КлючСвязи
	|	ИЗ
	|		ТаблицаСкидок КАК ТаблицаСкидок) КАК ДействиеСкидок
	|
	|СГРУППИРОВАТЬ ПО
	|	ДействиеСкидок.СкидкаНаценка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДействиеСкидок.СкидкаНаценка КАК СкидкаНаценка,
	|	ВЫБОР
	|		КОГДА ДействиеСкидок.СкидкаНаценка.ЭтоГруппа
	|			ТОГДА ВЫБОР
	|					КОГДА ДействиеСкидок.СкидкаНаценка.ВариантСовместногоПрименения = ЗНАЧЕНИЕ(Перечисление.ВариантыСовместногоПримененияСкидокНаценок.Максимум)
	|						ТОГДА 8
	|					КОГДА ДействиеСкидок.СкидкаНаценка.ВариантСовместногоПрименения = ЗНАЧЕНИЕ(Перечисление.ВариантыСовместногоПримененияСкидокНаценок.Минимум)
	|						ТОГДА 16
	|					КОГДА ДействиеСкидок.СкидкаНаценка.ВариантСовместногоПрименения = ЗНАЧЕНИЕ(Перечисление.ВариантыСовместногоПримененияСкидокНаценок.Сложение)
	|						ТОГДА 0
	|					КОГДА ДействиеСкидок.СкидкаНаценка.ВариантСовместногоПрименения = ЗНАЧЕНИЕ(Перечисление.ВариантыСовместногоПримененияСкидокНаценок.ПоследовательноеПрименение)
	|						ТОГДА 4
	|					КОГДА ДействиеСкидок.СкидкаНаценка.ВариантСовместногоПрименения = ЗНАЧЕНИЕ(Перечисление.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение)
	|						ТОГДА 12
	|				КОНЕЦ + ВЫБОР
	|					КОГДА ДействиеСкидок.СкидкаНаценка.ПометкаУдаления
	|						ТОГДА 3
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДействиеСкидок.СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Процент)
	|					ТОГДА ВЫБОР
	|							КОГДА ДействиеСкидок.СкидкаНаценка.ЗначениеСкидкиНаценки < 0
	|								ТОГДА 32
	|							ИНАЧЕ 28
	|						КОНЕЦ
	|				КОГДА ДействиеСкидок.СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыПредыдущейПокупки)
	|					ТОГДА ВЫБОР
	|							КОГДА ДействиеСкидок.СкидкаНаценка.ЗначениеСкидкиНаценки < 0
	|								ТОГДА 32
	|							ИНАЧЕ 28
	|						КОНЕЦ
	|				КОГДА ДействиеСкидок.СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сумма)
	|					ТОГДА ВЫБОР
	|							КОГДА ДействиеСкидок.СкидкаНаценка.ЗначениеСкидкиНаценки < 0
	|								ТОГДА 40
	|							ИНАЧЕ 44
	|						КОНЕЦ
	|				КОГДА ДействиеСкидок.СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыВВидеБонусныхБаллов)
	|					ТОГДА 60
	|				КОГДА ДействиеСкидок.СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.КоличествоБонусныхБаллов)
	|					ТОГДА 64
	|				КОГДА ДействиеСкидок.СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ВидЦены)
	|					ТОГДА 48
	|				КОГДА ДействиеСкидок.СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сообщение)
	|					ТОГДА 52
	|				КОГДА ДействиеСкидок.СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ЗапретРозничнойПродажи)
	|					ТОГДА 56
	|				КОГДА ДействиеСкидок.СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Подарок)
	|					ТОГДА 36
	|				КОГДА ДействиеСкидок.СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ВнешняяОбработка)
	|					ТОГДА 68
	|			КОНЕЦ + ВЫБОР
	|				КОГДА ДействиеСкидок.СкидкаНаценка.ПометкаУдаления
	|					ТОГДА 3
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ИндексКартинки,
	|	ДействиеСкидок.СкидкаНаценка.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	ДействиеСкидок.СкидкаНаценка.Управляемая,
	|	ДействиеСкидок.СкидкаНаценка.ПометкаУдаления,
	|	ДействиеСкидок.СкидкаНаценка.СтатусДействия,
	|	ЕСТЬNULL(ДействиеСкидок.Сумма, 0) КАК Сумма,
	|	ЕСТЬNULL(ДействиеСкидок.ОграниченаМинимальнойЦеной, ЛОЖЬ) КАК ОграниченаМинимальнойЦеной,
	|	ВЫБОР
	|		КОГДА ДействиеСкидок.КлючСвязи ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УсловияВыполнены
	|ИЗ
	|	ДействиеСкидок КАК ДействиеСкидок
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания,
	|	СкидкаНаценка
	|ИТОГИ
	|	СУММА(Сумма),
	|	МАКСИМУМ(ОграниченаМинимальнойЦеной),
	|	ИСТИНА КАК УсловияВыполнены
	|ПО
	|	СкидкаНаценка ТОЛЬКО ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("ТаблицаСкидок", ТаблицаСкидок);
	
	Запрос.УстановитьПараметр("ТекущаяДата", ?(ЗначениеЗаполнено(Параметры.Объект.Дата), Параметры.Объект.Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1, 0, 0, 0));
	Запрос.УстановитьПараметр("Магазин", Параметры.Объект.Магазин);
	
	ДеревоСкидок = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗаполнитьСтрокиДерева(ИнформацияОРасчетеСкидокПоСтроке, ДеревоСкидок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиДерева(СтрокаПриемник, СтрокаИсточник)
	
	ЭлементыДерева = СтрокаПриемник.ПолучитьЭлементы();
	Для Каждого ПодчиненнаяСтрока Из СтрокаИсточник.Строки Цикл
		Если ЗначениеЗаполнено(ПодчиненнаяСтрока.СкидкаНаценка)
			ИЛИ ПодчиненнаяСтрока.Родитель = Неопределено Тогда
 			НоваяПодчиненнаяСтрока = ЭлементыДерева.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяПодчиненнаяСтрока, ПодчиненнаяСтрока);
			ЗаполнитьСтрокиДерева(НоваяПодчиненнаяСтрока, ПодчиненнаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьНадписьСегментаИсключения()
	
	СписокРеквизитов = Новый Структура;
	СписокРеквизитов.Вставить("ТипНоменклатуры", "ТипНоменклатуры");
	СписокРеквизитов.Вставить("ДоговорПлатежногоАгента", "ДоговорПлатежногоАгента");
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.ТекущиеДанные.Номенклатура, СписокРеквизитов);
	ТипНоменклатуры = РеквизитыНоменклатуры.ТипНоменклатуры;
	ДоговорПлатежногоАгента = РеквизитыНоменклатуры.ДоговорПлатежногоАгента;
	
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		Элементы.ТекстОбИсключениях.Видимость = Истина;
		ВходитВСегментИсключение = Истина;
		ТекстЗаголовка = НСтр("ru = 'Номенклатура %1 является подарочным сертификатом.'");
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка,
																						Параметры.ТекущиеДанные.Номенклатура);
		ТекстЗаголовка = ТекстЗаголовка	+ Символы.ПС + НСтр("ru = 'Автоматические и управляемые скидки (за исключением подарков и внешних обработок) в данной строке не рассчитываются.'");
		Элементы.ТекстОбИсключениях.Заголовок = ТекстЗаголовка;
		Возврат;
	ИначеЕсли ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
		И ЗначениеЗаполнено(ДоговорПлатежногоАгента) Тогда
		Элементы.ТекстОбИсключениях.Видимость = Истина;
		ВходитВСегментИсключение = Истина;
		ТекстЗаголовка = НСтр("ru = 'Номенклатура %1 является агентским платежом.'");
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка,
																						Параметры.ТекущиеДанные.Номенклатура);
		ТекстЗаголовка = ТекстЗаголовка	+ Символы.ПС + НСтр("ru = 'Автоматические и управляемые скидки (за исключением подарков и внешних обработок) в данной строке не рассчитываются.'");
		Элементы.ТекстОбИсключениях.Заголовок = ТекстЗаголовка;
		Возврат;
	КонецЕсли;
	
	СегментИсключаемойНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Объект.Магазин, "СегментИсключаемойНоменклатуры");
	Если ЗначениеЗаполнено(СегментИсключаемойНоменклатуры) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	НоменклатураСегмента.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|ГДЕ
		|	НоменклатураСегмента.Сегмент = &Сегмент
		|	И НоменклатураСегмента.Номенклатура = &Номенклатура
		|	И НоменклатураСегмента.Характеристика = &Характеристика
		|";
		Запрос.УстановитьПараметр("Сегмент", СегментИсключаемойНоменклатуры);
		Запрос.УстановитьПараметр("Номенклатура", Параметры.ТекущиеДанные.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Параметры.ТекущиеДанные.Характеристика);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Элементы.ТекстОбИсключениях.Видимость = Истина;
			ВходитВСегментИсключение = Истина;
			Если ЗначениеЗаполнено(Параметры.ТекущиеДанные.Характеристика) Тогда
				ТекстЗаголовка = НСтр("ru = 'Номенклатура %1 с характеристикой %2 входит в состав сегмента-исключения скидок.'");
				ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка,
																							Параметры.ТекущиеДанные.Номенклатура,
																							Параметры.ТекущиеДанные.Характеристика);
			Иначе
				ТекстЗаголовка = НСтр("ru = 'Номенклатура %1 входит в состав сегмента-исключения скидок.'");
				ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка,
																							Параметры.ТекущиеДанные.Номенклатура);
			КонецЕсли;
			ТекстЗаголовка = ТекстЗаголовка	+ Символы.ПС + НСтр("ru = 'Автоматические и управляемые скидки (за исключением подарков и внешних обработок) в данной строке не рассчитываются.'");
			Элементы.ТекстОбИсключениях.Заголовок = ТекстЗаголовка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОРасчетеСкидокПоСтрокеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанные.СкидкаНаценка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
