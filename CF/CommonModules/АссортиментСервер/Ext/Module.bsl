////////////////////////////////////////////////////////////////////////////////
// АссортиментСервер: содержит процедуры и функции для
// проверки корректности документов изменения ассортимента и установки квот ассортимента,
// обработки регистрации ассортимента в регистрах,
// обработки введенных пользователем данных,
// а также ряд вспомогательных функций и процедур.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция проверяет, соответствует ли реквизит "ЦенаВключаетНДС"
// у всех видов цен в табличной части "Товары" документа "ИзменениеАссортимента"
// и у вида цен, указанного в правиле ценообразования объекта планирования этого документа.
// В случае выявления расхождений выводит информационное сообщение.
// Вызывается ПЕРЕД записью соответствующего документа-объекта.
// Параметры: 
// 		ДокументОбъект - ДокументОбъект.ИзменениеАссортимента
// Возвращаемое значение: 
// 		ВсеВерно - Булево - если реквизит "ЦенаВключаетНДС" все виды цен совпадает, возвращается Истина, иначе Ложь.
Функция ВидыЦенИзмененияАссортиментаСоответствуютПравилам(ДокументОбъект) Экспорт
	ВсеВерно = Истина;
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	               |ВЫБРАТЬ
	               |	ТаблицаТовары.НомерСтроки,
	               |	ТаблицаТовары.ВидЦен
				   |ПОМЕСТИТЬ ТаблицаТовары
	               |ИЗ
	               |	&ТаблицаТовары КАК ТаблицаТовары
				   |;
	               |ВЫБРАТЬ
	               |	ТаблицаТовары.НомерСтроки,
	               |	ТаблицаТовары.ВидЦен
	               |ИЗ
	               |	ТаблицаТовары КАК ТаблицаТовары
	               |ГДЕ
	               |	ТаблицаТовары.ВидЦен.ЦенаВключаетНДС <> &ЦенаВключаетНДС
	               |	ИЛИ (НЕ ТаблицаТовары.ВидЦен.ИспользоватьПриПродаже)";
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТовары", ДокументОбъект.Товары.Выгрузить());
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЦенаВключаетНДС", "ПравилоЦенообразования.ЦенаВключаетНДС");
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.ОбъектПланирования, СтруктураРеквизитов);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", РеквизитыОбъекта.ЦенаВключаетНДС);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ВсеВерно = Ложь;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = НСтр("ru = 'В строке %1 выбран некорректный вид цен %2: метод учета НДС отличается от указанного в правиле ценообразования формата магазинов'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НомерСтроки, Выборка.ВидЦен);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ДокументОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "ВидЦен"),
				"Объект");
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВсеВерно;
	
КонецФункции

// Процедура формирует движения по РС "Квоты ассортимента".
// Параметры: 
// 		ДополнительныеСвойства - Структура
// 		Движения - Коллекция движений.
// 		Отказ - Булево
Процедура ОтразитьКвотыАссортимента(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаКвотыАссортимента;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияКвотыАссортимента            = Движения.КвотыАссортимента;
	ДвиженияКвотыАссортимента.Записывать = Истина;
	
	ДвиженияКвотыАссортимента.Загрузить(Таблица);
	
КонецПроцедуры // ОтразитьЦеныНоменклатуры()

// Процедура формирует движения по РС "Ассортимент магазинов".
// Параметры: 
// 		ДополнительныеСвойства - Структура
//   	Движения - Коллекция движений.
//   	Отказ - Булево
Процедура ОтразитьАссортимент(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаАссортимент;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияАссортимент = Движения.Ассортимент;
	ДвиженияАссортимент.Записывать = Истина;
	//
	ДвиженияАссортимент.Загрузить(Таблица);
	//
	Движения.Записать();
	
КонецПроцедуры // ОтразитьЦеныНоменклатуры()

// Процедура проверяет стадию документа "ИзменениеАссортимента".
// Вызывается при обработке заполнения документа "Установка цен" на основании "ИзменениеАссортимента"
// если документ переводит товары в стадию "ЗапрещеныЗакупкиИПродажи"
// то принудительно вызывается исключение и формируется соответствующий текст ошибки.
// 
// Параметры: 
// 		ДокументОснование - ДокументСсылка.ИзменениеАссортимента
Процедура ПроверитьНеобходимостьУстановкиЦенНаОсновании(ДокументОснование) Экспорт
	
	Если ДокументОснование.Стадия = Перечисления.СтадииАссортимента.ЗапрещеныЗакупкиИПродажи Тогда
		
		ТекстОшибки = НСтр("ru = 'Документ %1 запрещает и закупки, и продажи.'")
						+ Символы.ПС
						+ НСтр("ru = 'Установка цен на основании такого документа невозможна.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументОснование);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция получает таблицу товаров, содержащихся в табличной части документа "ИзменениеАссортимента"
// и числящихся на остатках на складе.
// Для каждого товара получается цена из регистра "ЦеныНоменклатуры" или "ДействующиеЦены"
// в соответствии с опцией ИспользоватьПрименениеЦен и аналогичным параметром магазина.
// Вызывается при вводе на основании изменения ассортимента документов 
// списания товаров, перемещения товаров, ордера на отражение излишков.
// Параметры: 
// 		ДокументОснование - ДокументСсылка.ИзменениеАссортимента
// 		Магазин - СправочникСсылка.Магазины
// 		Склад - СправочникСсылка.Склады
// Возвращаемое значение: 
// 		ТаблицаОстаткиСЦенами - ТаблицаЗначений - выгрузка результатов запроса.
Функция ТаблицаОстатковСЦенамиПоВыводуИзАссортимента(ДокументОснование, Магазин, Склад) Экспорт
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	ИзменениеАссортиментаТовары.Номенклатура КАК Номенклатура,
	                    |	ИзменениеАссортиментаТовары.ВидЦен КАК ВидЦен
	                    |ПОМЕСТИТЬ втТовары
	                    |ИЗ
	                    |	Документ.ИзменениеАссортимента.Товары КАК ИзменениеАссортиментаТовары
	                    |ГДЕ
	                    |	ИзменениеАссортиментаТовары.Ссылка = &ДокументОснование
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	                    |	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	                    |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
	                    |ПОМЕСТИТЬ втОстатки
	                    |ИЗ
	                    |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	                    |			&Дата,
	                    |			Номенклатура В
	                    |					(ВЫБРАТЬ
	                    |						втТовары.Номенклатура
	                    |					ИЗ
	                    |						втТовары)
	                    |				И Склад = &Склад) КАК ТоварыНаСкладахОстатки
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	втОстатки.Номенклатура,
	                    |	втОстатки.Характеристика,
	                    |	втОстатки.Количество,
	                    |	втТовары.ВидЦен КАК ВидЦен
	                    |ПОМЕСТИТЬ втОстаткиСВидомЦен
	                    |ИЗ
	                    |	втОстатки КАК втОстатки
	                    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТовары КАК втТовары
	                    |		ПО (втТовары.Номенклатура = втОстатки.Номенклатура)
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	Остатки.Номенклатура КАК Номенклатура,
	                    |	Остатки.Характеристика КАК Характеристика,
	                    |	ЕСТЬNULL(Цены.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КАК Упаковка,
	                    |	ЕСТЬNULL(Цены.Цена, 0) КАК Цена
	                    |ПОМЕСТИТЬ РозничныеЦены
	                    |ИЗ
	                    |	втОстаткиСВидомЦен КАК Остатки
	                    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	                    |				&Дата,
	                    |				ВидЦены В
	                    |						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |							втОстаткиСВидомЦен.ВидЦен
	                    |						ИЗ
	                    |							втОстаткиСВидомЦен КАК втОстаткиСВидомЦен)
	                    |					И (Номенклатура, Характеристика) В
	                    |						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |							Т.Номенклатура,
	                    |							Т.Характеристика
	                    |						ИЗ
	                    |							втОстаткиСВидомЦен КАК Т)) КАК Цены
	                    |		ПО (Цены.Номенклатура = Остатки.Номенклатура)
	                    |			И (Цены.Характеристика = Остатки.Характеристика)
	                    |			И (Цены.ВидЦены = Остатки.ВидЦен)
	                    |ГДЕ
	                    |	НЕ &ИспользоватьПрименениеЦен
	                    |
	                    |ОБЪЕДИНИТЬ ВСЕ
	                    |
	                    |ВЫБРАТЬ
	                    |	ДействующиеЦены.Номенклатура,
	                    |	ДействующиеЦены.Характеристика,
	                    |	ДействующиеЦены.Упаковка,
	                    |	ДействующиеЦены.Цена
	                    |ИЗ
	                    |	РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
	                    |			&Дата,
	                    |			ОбъектЦенообразования = &Магазин
	                    |				И (Номенклатура, Характеристика) В
	                    |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |						Т.Номенклатура,
	                    |						Т.Характеристика
	                    |					ИЗ
	                    |						втОстатки КАК Т)) КАК ДействующиеЦены
	                    |ГДЕ
	                    |	&ИспользоватьПрименениеЦен
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	втОстатки.Номенклатура КАК Номенклатура,
	                    |	втОстатки.Характеристика КАК Характеристика,
	                    |	втОстатки.Количество КАК Количество,
	                    |	ВЫБОР
	                    |		КОГДА ЕСТЬNULL(РозничныеЦены.Упаковка.Коэффициент, 0) = 0
	                    |			ТОГДА втОстатки.Количество
	                    |		ИНАЧЕ втОстатки.Количество / ЕСТЬNULL(РозничныеЦены.Упаковка.Коэффициент, 0)
	                    |	КОНЕЦ КАК КоличествоУпаковок,
	                    |	РозничныеЦены.Упаковка КАК Упаковка,
	                    |	ВЫБОР
	                    |		КОГДА ЕСТЬNULL(РозничныеЦены.Упаковка.Коэффициент, 0) = 0
	                    |			ТОГДА 1
	                    |		ИНАЧЕ ЕСТЬNULL(РозничныеЦены.Упаковка.Коэффициент, 0)
	                    |	КОНЕЦ КАК КоэффициентУпаковки,
	                    |	ЕСТЬNULL(РозничныеЦены.Цена, 0) КАК Цена,
	                    |	ВЫБОР
	                    |		КОГДА ЕСТЬNULL(РозничныеЦены.Упаковка.Коэффициент, 0) = 0
	                    |			ТОГДА втОстатки.Количество * ЕСТЬNULL(РозничныеЦены.Цена, 0)
	                    |		ИНАЧЕ втОстатки.Количество * ЕСТЬNULL(РозничныеЦены.Цена, 0) / ЕСТЬNULL(РозничныеЦены.Упаковка.Коэффициент, 0)
	                    |	КОНЕЦ КАК Сумма
	                    |ИЗ
	                    |	втОстатки КАК втОстатки
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РозничныеЦены КАК РозничныеЦены
	                    |		ПО втОстатки.Номенклатура = РозничныеЦены.Номенклатура
	                    |			И втОстатки.Характеристика = РозничныеЦены.Характеристика");
	Запрос.УстановитьПараметр("ДокументОснование",ДокументОснование);
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ИспользоватьПрименениеЦен", ПолучитьФункциональнуюОпцию("ИспользоватьПрименениеЦен") И Магазин.ИспользоватьПрименениеЦен);
	РезультатЗапроса=Запрос.Выполнить();
	ТаблицаОстаткиСЦенами=РезультатЗапроса.Выгрузить();
	Возврат ТаблицаОстаткиСЦенами;
КонецФункции

// Функция получает таблицы товаров и видов цен, содержащихся в табличной части документа "ИзменениеАссортимента"
// вызывается при вводе на основании изменения ассортимента документа установки цен.
// Параметры: 
// 		ДокументОснование - ДокументСсылка.ИзменениеАссортимента
// Возвращаемое значение: 
// 		РезультатПакета - Массив - результат выполнения пакета запросов.
Функция РезультатПакетаВидыЦенИТоварыДляУстановкиПоАссортименту(ДокументОснование, Объект) Экспорт
	
	Запрос=Новый Запрос("
						|ВЫБРАТЬ 
						|	ТоварыОбъекта.Номенклатура КАК Номенклатура,
						|	ТоварыОбъекта.Характеристика КАК Характеристика,
						|	ТоварыОбъекта.Упаковка КАК Упаковка,
						|	ТоварыОбъекта.ВидЦены КАК ВидЦены,
						|	ТоварыОбъекта.Цена КАК Цена
						|ПОМЕСТИТЬ ТоварыОбъекта
						|ИЗ &ТоварыОбъекта КАК ТоварыОбъекта
						|;
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
	                    |	ИзменениеАссортиментаТовары.НомерСтроки КАК НомерСтрокиОснования,
	                    |	ИзменениеАссортиментаТовары.Номенклатура КАК Номенклатура,
						|	ЕСТЬNULL(ТоварыОбъекта.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
						|	ЕСТЬNULL(ТоварыОбъекта.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КАК Упаковка,
	                    |	ИзменениеАссортиментаТовары.ВидЦен КАК ВидЦены,
						|	ЕСТЬNULL(ТоварыОбъекта.Цена, 0) КАК Цена
	                    |ИЗ
	                    |	Документ.ИзменениеАссортимента.Товары КАК ИзменениеАссортиментаТовары
						|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыОбъекта КАК ТоварыОбъекта
						|		ПО ИзменениеАссортиментаТовары.Номенклатура = ТоварыОбъекта.Номенклатура
						|			И ИзменениеАссортиментаТовары.ВидЦен = ТоварыОбъекта.ВидЦены
	                    |ГДЕ
	                    |	ИзменениеАссортиментаТовары.Ссылка = &ДокументОснование
						|УПОРЯДОЧИТЬ ПО
						|	НомерСтрокиОснования
	                    |;
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	ИзменениеАссортиментаТовары.ВидЦен КАК ВидЦены
	                    |ИЗ
	                    |	Документ.ИзменениеАссортимента.Товары КАК ИзменениеАссортиментаТовары
	                    |ГДЕ
	                    |	ИзменениеАссортиментаТовары.Ссылка = &ДокументОснование
						|");
	Запрос.УстановитьПараметр("ДокументОснование",ДокументОснование);
	Запрос.УстановитьПараметр("ФорматМагазина", ДокументОснование.ОбъектПланирования);
	Запрос.УстановитьПараметр("ТоварыОбъекта", Объект.Товары.Выгрузить());
	РезультатПакета=Запрос.ВыполнитьПакет();
	Возврат РезультатПакета;
КонецФункции

// Функция формирует текст запрос для динамического списка номенклатуры в обработке "Подбор товаров"
// если включена функциональная опция использования ассортимента
// и подбор открыт с учетом отбора по ассортименту.
// Параметры: 
// 		УсловиеАссортимента - Строка - добавляется к тексту запроса.
// Возвращаемое значение: 
// 		ТекстЗапроса - Строка - итоговый текст запроса.
Функция ТекстЗапросаДинамическогоСпискаДляПодбора(УсловиеАссортимента, РежимПодбораСУчетомЗапрещенныхКПродаже) Экспорт
	
	Если РежимПодбораСУчетомЗапрещенныхКПродаже Тогда
		// Добавляется еще и скидка - запрет продаж.
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		             |	СправочникНоменклатура.Ссылка КАК Номенклатура,
		             |	СправочникНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		             |	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		             |	СправочникНоменклатура.ТоварнаяКатегория КАК ТоварнаяКатегория,
		             |	СправочникНоменклатура.Марка КАК Марка,
		             |	СправочникНоменклатура.Родитель КАК Родитель,
		             |	СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
		             |	СправочникНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
		             |	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		             |	ВЫБОР
		             |		КОГДА СправочникНоменклатура.ЭтоГруппа
		             |			ТОГДА ВЫБОР
		             |					КОГДА СправочникНоменклатура.ПометкаУдаления
		             |						ТОГДА 7
		             |					ИНАЧЕ 6
		             |				КОНЕЦ
		             |		ИНАЧЕ ВЫБОР
		             |				КОГДА СправочникНоменклатура.ПометкаУдаления
		             |					ТОГДА 1
		             |				ИНАЧЕ 0
		             |			КОНЕЦ + ВЫБОР
		             |				КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать)
		             |					ТОГДА 0
		             |				ИНАЧЕ 2
		             |			КОНЕЦ
		             |	КОНЕЦ КАК ИндексКартинки,
		             |	Ассортимент.РольАссортимента КАК РольАссортимента,
		             |	ДействиеСкидок.СкидкаНаценка КАК СкидкаНаценка,
		             |	СправочникНоменклатура.ДоговорПлатежногоАгента
		             |ИЗ
		             |	Справочник.Номенклатура КАК СправочникНоменклатура
		             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент.СрезПоследних(КОНЕЦПЕРИОДА(&НаДату, ДЕНЬ), ОбъектПланирования = &ОбъектПланирования) КАК Ассортимент
		             |		ПО СправочникНоменклатура.Ссылка = Ассортимент.Номенклатура
		             |			%Ассортимент.УсловиеОтбора%
		             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
		             |				&НаДату,
		             |				(КОНЕЦПЕРИОДА(ДатаОкончания, ДЕНЬ) >= &НаДату
		             |					ИЛИ ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		             |					И СкидкаНаценка.СтатусДействия = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
		             |					И СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ЗапретРозничнойПродажи)
		             |					И (Магазин = &Магазин
		             |						ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))) КАК ДействиеСкидок
		             |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		             |			ПО ДействиеСкидок.СкидкаНаценка.СегментНоменклатурыПредоставления = НоменклатураСегмента.Сегмент
		             |   		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК ТЧУсловия
		             |   			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок.ВремяДействия КАК ТЧВремяДействия
		             |   			ПО (ТЧВремяДействия.Ссылка = ТЧУсловия.УсловиеПредоставления)
		             |   				И (ВЫБОР
		             |   					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
		             |   						ТОГДА 1
		             |   					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
		             |   						ТОГДА 2
		             |   					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
		             |   						ТОГДА 3
		             |   					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Четверг)
		             |   						ТОГДА 4
		             |   					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
		             |   						ТОГДА 5
		             |   					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
		             |   						ТОГДА 6
		             |   					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
		             |   						ТОГДА 7
		             |   					ИНАЧЕ ДЕНЬНЕДЕЛИ(&НаДату)
		             |   				КОНЕЦ = ДЕНЬНЕДЕЛИ(&НаДату))
		             |   				И (ЧАС(&НаДату) > ЧАС(ТЧВремяДействия.ВремяНачала)
		             |   						И ЧАС(&НаДату) < ЧАС(ТЧВремяДействия.ВремяОкончания)
		             |   					ИЛИ ЧАС(&НаДату) = ЧАС(ТЧВремяДействия.ВремяНачала)
		             |   						И МИНУТА(&НаДату) > МИНУТА(ТЧВремяДействия.ВремяНачала)
		             |   					ИЛИ ЧАС(&НаДату) = ЧАС(ТЧВремяДействия.ВремяОкончания)
		             |   						И МИНУТА(&НаДату) < МИНУТА(ТЧВремяДействия.ВремяОкончания)
		             |   					ИЛИ ЧАС(&НаДату) = ЧАС(ТЧВремяДействия.ВремяНачала)
		             |   						И МИНУТА(&НаДату) = МИНУТА(ТЧВремяДействия.ВремяНачала)
		             |   						И СЕКУНДА(&НаДату) >= СЕКУНДА(ТЧВремяДействия.ВремяНачала)
		             |   					ИЛИ ЧАС(&НаДату) = ЧАС(ТЧВремяДействия.ВремяОкончания)
		             |   						И МИНУТА(&НаДату) = МИНУТА(ТЧВремяДействия.ВремяОкончания)
		             |   						И СЕКУНДА(&НаДату) < СЕКУНДА(ТЧВремяДействия.ВремяОкончания))
		             |   		ПО (ТЧУсловия.Ссылка = ДействиеСкидок.СкидкаНаценка)
		             |		ПО (НоменклатураСегмента.Номенклатура = СправочникНоменклатура.Ссылка
		             |				ИЛИ НоменклатураСегмента.Номенклатура ЕСТЬ NULL 
		             |					И ДействиеСкидок.СкидкаНаценка.СегментНоменклатурыПредоставления = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка))
		             |ГДЕ
		             |	ТЧУсловия.УсловиеПредоставления ЕСТЬ NULL 
		             |{ГДЕ
		             |	(СправочникНоменклатура.Ссылка В
		             |			(ВЫБРАТЬ
		             |				Сегменты.Номенклатура
		             |			ИЗ
		             |				РегистрСведений.НоменклатураСегмента КАК Сегменты
		             |			ГДЕ
		             |				Сегменты.Сегмент = &СегментНоменклатуры))}";		
	Иначе
		//
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		             |	СправочникНоменклатура.Ссылка КАК Номенклатура,
		             |	СправочникНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		             |	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		             |	СправочникНоменклатура.ТоварнаяКатегория КАК ТоварнаяКатегория,
		             |	СправочникНоменклатура.Марка КАК Марка,
		             |	СправочникНоменклатура.Родитель КАК Родитель,
		             |	СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
		             |	СправочникНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
		             |	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		             |	ВЫБОР
		             |		КОГДА СправочникНоменклатура.ЭтоГруппа
		             |			ТОГДА ВЫБОР
		             |					КОГДА СправочникНоменклатура.ПометкаУдаления
		             |						ТОГДА 7
		             |					ИНАЧЕ 6
		             |				КОНЕЦ
		             |		ИНАЧЕ ВЫБОР
		             |				КОГДА СправочникНоменклатура.ПометкаУдаления
		             |					ТОГДА 1
		             |				ИНАЧЕ 0
		             |			КОНЕЦ + ВЫБОР
		             |				КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать)
		             |					ТОГДА 0
		             |				ИНАЧЕ 2
		             |			КОНЕЦ
		             |	КОНЕЦ КАК ИндексКартинки,
		             |	Ассортимент.РольАссортимента КАК РольАссортимента,
		             |	СправочникНоменклатура.ДоговорПлатежногоАгента
		             |ИЗ
		             |	Справочник.Номенклатура КАК СправочникНоменклатура
		             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент.СрезПоследних(КОНЕЦПЕРИОДА(&НаДату, ДЕНЬ), ОбъектПланирования = &ОбъектПланирования) КАК Ассортимент
		             |		ПО СправочникНоменклатура.Ссылка = Ассортимент.Номенклатура
		             |			%Ассортимент.УсловиеОтбора%
		             |{ГДЕ
		             |	(СправочникНоменклатура.Ссылка В
		             |			(ВЫБРАТЬ
		             |				Сегменты.Номенклатура
		             |			ИЗ
		             |				РегистрСведений.НоменклатураСегмента КАК Сегменты
		             |			ГДЕ
		             |				Сегменты.Сегмент = &СегментНоменклатуры))}";
	КонецЕсли;
	Если ЗначениеЗаполнено(УсловиеАссортимента) Тогда
		Если Найти(ТекстЗапроса, "%Ассортимент.УсловиеОтбора%") = 0 Тогда
			ТекстИсключения = НСтр("ru='В тексте запроса по ассортименту отсутствует дополнительная секция для условия отбора'");
			ВызватьИсключение ТекстИсключения;
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Ассортимент.УсловиеОтбора%", "И Ассортимент." + УсловиеАссортимента);
		КонецЕсли;
	КонецЕсли;
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура отключает штатный обработчик формирования отчета
// если включена функциональная опция "ИспользоватьАссортимент"
// вызывается из процедуры ПриКомпоновкеРезультата.
// Параметры: 
// 		ОтчетОбъект - Отчет, построение которого перехватывается.
//		ДокументРезультат - табличный документ, в который выводится результат отчета.
//		ДанныеРасшифровки - данные расшифровки макета компоновки.
//		СтандартнаяОбработка - признак стандартной обработки.
//
Процедура ПроверитьНеобходимостьПереопределенияИВывестиОтчет(
			ОтчетОбъект,
			ДокументРезультат,
			ДанныеРасшифровки,
			СтандартнаяОбработка,
			Магазин = Неопределено) Экспорт
			
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("УстанавливатьВидыЦенВАссортименте");
	Если ИспользоватьАссортимент И ЗначениеЗаполнено(Магазин) Тогда
		ИспользоватьАссортимент = ПолучитьФункциональнуюОпциюКонтроляАссортимента(Магазин);
	КонецЕсли;
	
	Если ИспользоватьАссортимент Тогда
		
		СтандартнаяОбработка = Ложь;
		ОтчетОбъект.СхемаКомпоновкиДанных = ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанныхАссортимент");
		// Подготовка компоновщика макета компоновки данных.
		Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
		Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ОтчетОбъект.СхемаКомпоновкиДанных));
		Компоновщик.ЗагрузитьНастройки(ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки());
		
		// Компоновка макета компоновки данных.
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		//
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(ОтчетОбъект.СхемаКомпоновкиДанных, Компоновщик.Настройки, ДанныеРасшифровки, , );
		
		// Вывод.
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , ДанныеРасшифровки,);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент();
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
		
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура проверяет вхождения товаров табличной части в ассортимент магазина на указанную дату
// не входящие в ассортимент товары удаляются из табличной части.
// Параметры: 
// 		Объект - документ, для которого выполняется проверка.
//		ИмяТаблицыТоваров - строка - имя табличной части документа, в который содержатся проверяемые товары.
//		Дата - Дата - дата проверки.
//
Процедура ПроверитьАссортиментТаблицыТоваровДокументаПродажи(
	Объект,
	Отказ,
	ВыводитьСообщения,
	ИтоговоеСообщение = "",
	ДатаРасчета = Неопределено,
	ИмяФункциональнойОпции = "КонтролироватьАссортимент") Экспорт
	
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин, ИмяФункциональнойОпции);
	Если ИспользоватьАссортимент Тогда
		Запрос=Новый Запрос("ВЫБРАТЬ
		                    |	Т.Номенклатура КАК Номенклатура,
		                    |	Т.НомерСтроки КАК НомерСтроки
		                    |ПОМЕСТИТЬ Товары
		                    |ИЗ
		                    |	&Товары КАК Т
		                    |;
		                    |
		                    |////////////////////////////////////////////////////////////////////////////////
		                    |ВЫБРАТЬ
		                    |	Товары.НомерСтроки КАК НомерСтрокиДокумента,
		                    |	Товары.Номенклатура КАК Номенклатура,
		                    |	Товары.Номенклатура.Наименование КАК Наименование,
		                    |	ЕСТЬNULL(Ассортимент.РазрешеныПродажи, ЛОЖЬ) КАК РазрешеныПродажи
		                    |ИЗ
		                    |	Товары КАК Товары
				            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент.СрезПоследних(КОНЕЦПЕРИОДА(&Период, ДЕНЬ), ОбъектПланирования = &ОбъектПланирования) КАК Ассортимент
		                    |		ПО Товары.Номенклатура = Ассортимент.Номенклатура
		                    |			И (Ассортимент.РазрешеныПродажи)
		                    |
		                    |ГДЕ
		                    |	НЕ ЕСТЬNULL(Ассортимент.РазрешеныПродажи, ЛОЖЬ)
		                    |
		                    |УПОРЯДОЧИТЬ ПО
		                    |	НомерСтрокиДокумента");
		Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
		Если ДатаРасчета = Неопределено Тогда
			Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
		Иначе
			Запрос.УстановитьПараметр("Период", ДатаРасчета);
		КонецЕсли;
		ФорматМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "ФорматМагазина");
		Запрос.УстановитьПараметр("ОбъектПланирования", ФорматМагазина);
		Результат=Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Отказ = Истина;
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекстСообщения = НСтр("ru = 'В строке %1 номенклатура ""%2"" не включена в ассортимент или запрещена к продаже.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НомерСтрокиДокумента, Выборка.Наименование);
				Если ВыводитьСообщения Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						Объект,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтрокиДокумента, "Номенклатура"));
				Иначе
					ИтоговоеСообщение = ИтоговоеСообщение + ТекстСообщения + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет вхождения товаров табличной части в ассортимент магазина на указанную дату.
// Параметры: 
// 		Магазин - Магазин, ассортимент которого проверяется.
//		ТаблицаТоваров - ТабличнаяЧасть - табличная часть документа, в который содержатся проверяемые товары.
//		Дата - Дата - дата проверки.
//
Процедура ПроверитьАссортиментТаблицыТоваровДокументаЗакупки(Магазин, ТаблицаТоваров, Дата) Экспорт
	
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпциюКонтроляАссортимента(Магазин);
	Если ИспользоватьАссортимент Тогда
		Запрос=Новый Запрос("ВЫБРАТЬ
		                    |	Т.Номенклатура КАК Номенклатура,
		                    |	Т.НомерСтроки КАК НомерСтроки
		                    |ПОМЕСТИТЬ Товары
		                    |ИЗ
		                    |	&Товары КАК Т
		                    |;
		                    |
		                    |////////////////////////////////////////////////////////////////////////////////
		                    |ВЫБРАТЬ
		                    |	Товары.НомерСтроки КАК НомерСтроки,
		                    |	Товары.Номенклатура КАК Номенклатура,
							|	Товары.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
		                    |	ЕСТЬNULL(Ассортимент.РазрешеныЗакупки, ЛОЖЬ) КАК РазрешеныЗакупки
		                    |ИЗ
		                    |	Товары КАК Товары
				            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент.СрезПоследних(КОНЕЦПЕРИОДА(&Период, ДЕНЬ), ОбъектПланирования = &ОбъектПланирования) КАК Ассортимент
		                    |		ПО Товары.Номенклатура = Ассортимент.Номенклатура
		                    |			И (Ассортимент.РазрешеныЗакупки)
		                    |ГДЕ
		                    |	НЕ ЕСТЬNULL(Ассортимент.РазрешеныЗакупки, ЛОЖЬ)
		                    |
		                    |УПОРЯДОЧИТЬ ПО
		                    |	НомерСтроки");
		Запрос.УстановитьПараметр("Товары", ТаблицаТоваров.Выгрузить());
		Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
		ФорматМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "ФорматМагазина");
		Запрос.УстановитьПараметр("ОбъектПланирования", ФорматМагазина);
		Результат=Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если НЕ Выборка.РазрешеныЗакупки Тогда
					ТекстСообщения = НСтр("ru = 'В строке %1 номенклатура ""%2"" не включена в ассортимент или запрещена к закупке.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НомерСтроки, Выборка.НаименованиеНоменклатуры);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", Выборка.НомерСтроки, "Номенклатура"));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет вхождение в ассортимент магазина на указанную дату товаров в подборе, не входящих в заказ
// поставщику.
// Параметры: 
// 		Магазин - Магазин, ассортимент которого проверяется.
//		ТаблицаТоваров - ТабличнаяЧасть - табличная часть документа, в который содержатся проверяемые товары.
//		ЗаказПоставщику - ДокументСсылка.ЗаказПоставщику, если вызывается из поступления товаров,
//							Составной тип из поля ДокументОснование, если вызывается из приходного ордера.
//		Дата - Дата - дата проверки.
//
Процедура ПроверитьАссортиментТаблицыПодобранныхТоваров(Магазин, ТаблицаТоваров, ЗаказПоставщику, Дата, ИмяТаблицы) Экспорт
	
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпциюКонтроляАссортимента(Магазин);
	Если ИспользоватьАссортимент
		И ТипЗнч(ТаблицаТоваров) = Тип("ТаблицаЗначений") Тогда
		Запрос=Новый Запрос("ВЫБРАТЬ
		                    |	ЗаказТовары.Номенклатура КАК Номенклатура
		                    |ПОМЕСТИТЬ НоменклатураЗаказа
		                    |ИЗ
		                    |	Документ.ЗаказПоставщику.Товары КАК ЗаказТовары
		                    |ГДЕ
		                    |	ЗаказТовары.Ссылка = &ЗаказПоставщику
		                    |;
		                    |
		                    |////////////////////////////////////////////////////////////////////////////////
		                    |ВЫБРАТЬ
		                    |	Товары.Номенклатура КАК Номенклатура,
		                    |	Товары.НомерСтроки КАК НомерСтроки
		                    |ПОМЕСТИТЬ Товары
		                    |ИЗ
		                    |	&Товары КАК Товары
		                    |;
		                    |
		                    |////////////////////////////////////////////////////////////////////////////////
		                    |ВЫБРАТЬ
		                    |	Товары.НомерСтроки КАК НомерСтроки,
		                    |	Товары.Номенклатура КАК Номенклатура,
		                    |	Товары.Номенклатура.Наименование КАК НаименованиеНоменклатуры
		                    |ИЗ
		                    |	Товары КАК Товары
				            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент.СрезПоследних(КОНЕЦПЕРИОДА(&Период, ДЕНЬ), ОбъектПланирования = &ОбъектПланирования) КАК Ассортимент
		                    |		ПО Товары.Номенклатура = Ассортимент.Номенклатура
		                    |			И (Ассортимент.РазрешеныЗакупки)
		                    |ГДЕ
		                    |	(НЕ ЕСТЬNULL(Ассортимент.РазрешеныЗакупки, ЛОЖЬ))
		                    |	И (НЕ Товары.Номенклатура В
		                    |				(ВЫБРАТЬ
		                    |					НЗ.Номенклатура
		                    |				ИЗ
		                    |					НоменклатураЗаказа КАК НЗ))
		                    |
		                    |УПОРЯДОЧИТЬ ПО
		                    |	НомерСтроки");
		Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
		Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
		Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
		ФорматМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "ФорматМагазина");
		Запрос.УстановитьПараметр("ОбъектПланирования", ФорматМагазина);
		Результат=Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекстСообщения = НСтр("ru = 'В строке %1 номенклатура ""%2"" не включена в ассортимент или запрещена к закупке.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НомерСтроки, Выборка.НаименованиеНоменклатуры);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТаблицы, Выборка.НомерСтроки, "Номенклатура"),
					"Объект");
			КонецЦикла;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Функция получает актуальные значения ресурсов регистра сведений "Ассортимент" на указанную дату 
// для товара и формата магазина.
// Параметры: 
// 		Номенклатура - СправочникСсылка.Номенклатура
// 		ОбъектПланирования - СправочникСсылка.ФорматыМагазинов ИЛИ СправочникСсылка.Магазины
// 		НаДату - Дата (дата и время).
// Возвращаемое значение: 
// 		СтруктураСостоянияАссортимента - Структура - аналогична выборке всех ресурсов из регистра.
Функция СтруктураСостоянияАссортиментаТовараВФормате(Номенклатура, ОбъектПланирования, НаДату) Экспорт
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ассортимент.РольАссортимента,
	|	Ассортимент.РазрешеныЗакупки,
	|	Ассортимент.РазрешеныПродажи,
	|	Ассортимент.ВидЦен
	|ИЗ
	|	РегистрСведений.Ассортимент.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&НаДату, ДЕНЬ),
	|			ОбъектПланирования = &ОбъектПланирования
	|				И Номенклатура = &Номенклатура) КАК Ассортимент");
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Если ТипЗнч(ОбъектПланирования) = Тип("СправочникСсылка.Магазины") Тогда
		ФорматМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектПланирования, "ФорматМагазина");
		Запрос.УстановитьПараметр("ОбъектПланирования", ФорматМагазина);
	Иначе
		Запрос.УстановитьПараметр("ОбъектПланирования", ОбъектПланирования);
	КонецЕсли;
	Запрос.УстановитьПараметр("НаДату", ?(ЗначениеЗаполнено(НаДату), НаДату, ТекущаяДатаСеанса()));
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	СтруктураСостоянияАссортимента = Новый Структура;
	
	Если Выборка.Следующий() Тогда
		СтруктураСостоянияАссортимента.Вставить("РольАссортимента", Выборка.РольАссортимента);
		СтруктураСостоянияАссортимента.Вставить("РазрешеныЗакупки", Выборка.РазрешеныЗакупки);
		СтруктураСостоянияАссортимента.Вставить("РазрешеныПродажи", Выборка.РазрешеныПродажи);
		СтруктураСостоянияАссортимента.Вставить("ВидЦен", 			Выборка.ВидЦен);
	Иначе
		СтруктураСостоянияАссортимента.Вставить("РольАссортимента", Перечисления.РолиАссортимента.ПустаяСсылка());
		СтруктураСостоянияАссортимента.Вставить("РазрешеныЗакупки", Ложь);
		СтруктураСостоянияАссортимента.Вставить("РазрешеныПродажи", Ложь);
		СтруктураСостоянияАссортимента.Вставить("ВидЦен", 			Справочники.ВидыЦен.ПустаяСсылка());
	КонецЕсли;
	
	Возврат СтруктураСостоянияАссортимента;
КонецФункции

// Функция получает актуальные значения ресурсов регистра сведений "Квоты ассортимента" на указанную дату 
// для категории, марки и формата магазина.
// Параметры: 
// 		ФорматМагазина - СправочникСсылка.ФорматыМагазинов
// 		ТоварнаяКатегория - СправочникСсылка.ТоварныеКатегории
// 		Марка - СправочникСсылка.Марки
// 		НаДату - Дата (дата и время).
// Возвращаемое значение: 
// 		СтруктураКвоты - Структура - аналогична выборке всех ресурсов из регистра.
Функция СтруктураКвотыПоКатегории(ФорматМагазина, ТоварнаяКатегория, Марка, НаДату) Экспорт
	СтруктураКвоты=Новый Структура;
	Запрос=Новый Запрос("ВЫБРАТЬ
	|	Квоты.Квота КАК Квота,
	|	Квоты.ПроцентОтклонения КАК ПроцентОтклонения
	|ИЗ
	|	РегистрСведений.КвотыАссортимента.СрезПоследних(
	|			&НаДату,
	|			ОбъектПланирования = &ОбъектПланирования
	|				И ТоварнаяКатегория = &ТоварнаяКатегория
	|				И Марка = &Марка) КАК Квоты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФорматыМагазинов КАК Форматы
	|		ПО Квоты.ОбъектПланирования = Форматы.Ссылка
	|			И (Квоты.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(К.Период)
	|				ИЗ
	|					РегистрСведений.КвотыАссортимента КАК К
	|				ГДЕ
	|					К.Период <= &НаДату
	|					И К.ОбъектПланирования = &ОбъектПланирования
	|					И К.ТоварнаяКатегория = &ТоварнаяКатегория
	|					И К.Марка = &Марка))
	|");
	Запрос.УстановитьПараметр("ТоварнаяКатегория",ТоварнаяКатегория);
	Запрос.УстановитьПараметр("ОбъектПланирования",ФорматМагазина);
	Запрос.УстановитьПараметр("Марка",Марка);
	Запрос.УстановитьПараметр("НаДату",НаДату);
	РезультатЗапроса=Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СтруктураКвоты.Вставить("Квота", 0);
		СтруктураКвоты.Вставить("ПроцентОтклонения", 0);
	Иначе
		Выборка=РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СтруктураКвоты.Вставить("Квота", Выборка.Квота);
		СтруктураКвоты.Вставить("ПроцентОтклонения", Выборка.ПроцентОтклонения);
	КонецЕсли;
	Возврат СтруктураКвоты;
КонецФункции

// Функция получает значение функциональной опции "КонтролироватьАссортимент".
// Параметры: 
//		Магазин - СправочникСсылка.Магазины - магазин, для которого определяется контроль ассортимента.
// Возвращаемое значение: 
// 		Результат - Булево - значение функицональной опции "КонтролироватьАссортимент".
Функция ПолучитьФункциональнуюОпциюКонтроляАссортимента(Магазин, ИмяФункциональнойОпции = "КонтролироватьАссортимент") Экспорт
	
	Результат = Ложь;
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент");
	Если ИспользоватьАссортимент Тогда
		Результат = ПолучитьФункциональнуюОпцию(ИмяФункциональнойОпции, Новый Структура("Магазин", Магазин));
		Если Результат <> Истина Тогда
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура обрабатывает входящий запрос,
// добавляя в него параметры
// и формируя текст условий
Процедура СформироватьТекстУсловия(Запрос, ЭлементыОтбора, ДополнительныеПараметры) Экспорт
	
	ТекстУсловия			 = ДополнительныеПараметры.ТекстУсловия;
	СчетчикУсловий			 = ДополнительныеПараметры.СчетчикУсловий;
	СчетчикПараметров		 = ДополнительныеПараметры.СчетчикПараметров;
	ТекстНачальногоУсловия	 = ДополнительныеПараметры.ТекстНачальногоУсловия;
	УсловиеГруппы			 = ДополнительныеПараметры.УсловиеГруппы;
	СоответствиеПолейУсловия = ДополнительныеПараметры.СоответствиеПолейУсловия;
	
	СчетчикВнутренний = 0;
	Если ПустаяСтрока(УсловиеГруппы) Тогда
		УсловиеГруппы = "И";
		СчетчикВнутренний = 1;
	КонецЕсли;
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			Если ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
				УсловиеГруппы2 = "И";
				НачалоГруппы = "(";
			ИначеЕсли ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
				УсловиеГруппы2 = "И";
				НачалоГруппы = "НЕ (";
			ИначеЕсли ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
				УсловиеГруппы2 = "ИЛИ";
				НачалоГруппы = "(";
			КонецЕсли;
			ТекстУсловияВложенный = "";
			СчетчикУсловийДоВложенного = СчетчикУсловий;
			
			ДополнительныеВложенныеПараметры = АссортиментКлиентСервер.ПараметрыДляУсловия();
			ДополнительныеВложенныеПараметры.СчетчикУсловий				 = СчетчикУсловий;
			ДополнительныеВложенныеПараметры.СчетчикПараметров			 = СчетчикПараметров;
			ДополнительныеВложенныеПараметры.ТекстУсловия				 = ТекстУсловияВложенный;
			ДополнительныеВложенныеПараметры.ТекстНачальногоУсловия		 = "";
			ДополнительныеВложенныеПараметры.УсловиеГруппы				 = УсловиеГруппы2;
			ДополнительныеВложенныеПараметры.СоответствиеПолейУсловия	 = СоответствиеПолейУсловия;
			
			АссортиментСервер.СформироватьТекстУсловия(Запрос, ЭлементОтбора.Элементы, ДополнительныеВложенныеПараметры);
			ТекстУсловияВложенный = ДополнительныеВложенныеПараметры.ТекстУсловия;
			СчетчикПараметров = ДополнительныеВложенныеПараметры.СчетчикПараметров;
			СчетчикУсловий = ДополнительныеВложенныеПараметры.СчетчикУсловий;
			
			Если НЕ ПустаяСтрока(ТекстУсловияВложенный) Тогда
				Если СчетчикУсловийДоВложенного = 0 Тогда
					ТекстУсловия = ТекстУсловия + ТекстНачальногоУсловия + НачалоГруппы;
				Иначе
					ТекстУсловия = ТекстУсловия + УсловиеГруппы+ " " + НачалоГруппы;
				КонецЕсли;
				ТекстУсловия = ТекстУсловия + ТекстУсловияВложенный + ")" + Символы.ПС;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПутьКДанным = СокрЛП(ЭлементОтбора.ЛевоеЗначение);
			//
			ПоложениеПервойТочки = Найти(ПутьКДанным,".");
			Если ПоложениеПервойТочки = 0 Тогда
				ПутьДляПоиска = ПутьКДанным;
				ОкончаниеПути = "";
				НовоеНачалоПути = СоответствиеПолейУсловия.Получить(ПутьДляПоиска);
			Иначе
				ПутьДляПоиска = Лев(ПутьКДанным, ПоложениеПервойТочки);
				НовоеНачалоПути = СоответствиеПолейУсловия.Получить(ПутьДляПоиска);
				Если НовоеНачалоПути = Неопределено Тогда
					ПутьДляПоиска = Лев(ПутьКДанным, ПоложениеПервойТочки-1);
					НовоеНачалоПути = СоответствиеПолейУсловия.Получить(ПутьДляПоиска);
					ДлинаПути = СтрДлина(ПутьКДанным);
					ОкончаниеПути = Прав(ПутьКДанным, ДлинаПути-ПоложениеПервойТочки+1);
				Иначе
					ДлинаПути = СтрДлина(ПутьКДанным);
					ОкончаниеПути = Прав(ПутьКДанным, ДлинаПути-ПоложениеПервойТочки);
				КонецЕсли;
			КонецЕсли;
			Если НовоеНачалоПути = Неопределено Тогда
				Продолжить;
			Иначе
				ПутьКДанным = НовоеНачалоПути + ОкончаниеПути;
			КонецЕсли;
			ИмяПараметра = СтрЗаменить(ПутьКДанным, ".", "")+Формат(СчетчикПараметров, "ЧН=0; ЧГ=0");
			ТекстУсловияВнутренний = "";
			УсловиеПодобно = Ложь;
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				ТекстУсловияВнутренний = ""+ПутьКДанным+" = &"+ИмяПараметра;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
				ТекстУсловияВнутренний = ""+ПутьКДанным+" <> &"+ИмяПараметра;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
				ТекстУсловияВнутренний = ""+ПутьКДанным+" > &"+ИмяПараметра;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
				ТекстУсловияВнутренний = ""+ПутьКДанным+" >= &"+ИмяПараметра;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
				ТекстУсловияВнутренний = ""+ПутьКДанным+" < &"+ИмяПараметра;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
				ТекстУсловияВнутренний = ""+ПутьКДанным+" <= &"+ИмяПараметра;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
				ТекстУсловияВнутренний = ""+ПутьКДанным+" ПОДОБНО &"+ИмяПараметра;
				УсловиеПодобно = Истина;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				ТекстУсловияВнутренний = ""+ПутьКДанным+" В (&"+ИмяПараметра+")";
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
				ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
				ТекстУсловияВнутренний = ""+ПутьКДанным+" В ИЕРАРХИИ(&"+ИмяПараметра+")";
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
				ТекстУсловияВнутренний = "НЕ "+ПутьКДанным+" В (&"+ИмяПараметра+")";
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии
				ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
				ТекстУсловияВнутренний = "НЕ "+ПутьКДанным+" В ИЕРАРХИИ(&"+ИмяПараметра+")";
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
				ТекстУсловияВнутренний = "НЕ "+ПутьКДанным+" ПОДОБНО &"+ИмяПараметра;
				УсловиеПодобно = Истина;
			КонецЕсли;
			Если УсловиеПодобно Тогда
				Запрос.УстановитьПараметр(ИмяПараметра, "%"+ЭлементОтбора.ПравоеЗначение+"%");
			Иначе
				Запрос.УстановитьПараметр(ИмяПараметра, ЭлементОтбора.ПравоеЗначение);
			КонецЕсли;
			//
			Если СчетчикВнутренний = 0 Тогда
				// Группа условий
				ТекстУсловия = ТекстУсловия + "" + ТекстНачальногоУсловия + "	(" + ТекстУсловияВнутренний + ")"  + Символы.ПС;
			Иначе
				Если СчетчикУсловий = 0 Тогда
					ТекстУсловия = ТекстУсловия + "" + ТекстНачальногоУсловия + "	(" + ТекстУсловияВнутренний + ")"  + Символы.ПС;
				Иначе
					ТекстУсловия = ТекстУсловия + "	"+УсловиеГруппы+" (" + ТекстУсловияВнутренний + ")" + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
			СчетчикУсловий = СчетчикУсловий + 1;
			СчетчикПараметров = СчетчикПараметров + 1;
			СчетчикВнутренний = СчетчикВнутренний + 1;
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеПараметры.ТекстУсловия			 = ТекстУсловия;
	ДополнительныеПараметры.СчетчикУсловий			 = СчетчикУсловий;
	ДополнительныеПараметры.СчетчикПараметров		 = СчетчикПараметров;
	ДополнительныеПараметры.ТекстНачальногоУсловия	 = ТекстНачальногоУсловия;
	ДополнительныеПараметры.УсловиеГруппы			 = УсловиеГруппы;
	ДополнительныеПараметры.СоответствиеПолейУсловия = СоответствиеПолейУсловия;	
	
КонецПроцедуры

#КонецОбласти
