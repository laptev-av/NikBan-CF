#Область ПрограммныйИнтерфейс

#Область ОбщиеЗначения

// Получение предопределенного значения.
//
Функция ПолучитьПредопределенныеЗначения(СтруктураЗапроса) Экспорт
	
	ВозвращаемаяСтруктура = Новый Структура;
	
	Для каждого КлючИЗначение Из СтруктураЗапроса Цикл
		
		Если КлючИЗначение.Ключ = "Перечисления" Тогда
			
			ВозвращаемаяСтруктура.Вставить("Перечисления", Новый Структура);
			
			Для каждого КлючИЗначениеПеречисления Из СтруктураЗапроса.Перечисления Цикл
				
				ПеречислениеМенеджер = Перечисления[КлючИЗначениеПеречисления.Ключ];
				
				ВозвращаемаяСтруктура2Уровень = Новый Структура;
				
				ВозвращаемаяСтруктура.Перечисления.Вставить(КлючИЗначениеПеречисления.Ключ, ВозвращаемаяСтруктура2Уровень);
				
				Для каждого КлючИЗначениеЗначенияПеречисления Из СтруктураЗапроса.Перечисления[КлючИЗначениеПеречисления.Ключ] Цикл
					
					Если КлючИЗначениеЗначенияПеречисления.Ключ = "ПустаяСсылка" Тогда
						ЗначениеПеречисления = ПеречислениеМенеджер.ПустаяСсылка();
						ВозвращаемаяСтруктура2Уровень.Вставить(КлючИЗначениеЗначенияПеречисления.Ключ, ЗначениеПеречисления);
					Иначе
						ЗначениеПеречисления = ПеречислениеМенеджер[КлючИЗначениеЗначенияПеречисления.Ключ];
						ВозвращаемаяСтруктура2Уровень.Вставить(КлючИЗначениеЗначенияПеречисления.Ключ, ЗначениеПеречисления);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		ИначеЕсли КлючИЗначение.Ключ = "ФункциональныеОпции" Тогда
			
			ВозвращаемаяСтруктура.Вставить("ФункциональныеОпции", Новый Структура);
			
			Для каждого КлючИЗначениеФО Из СтруктураЗапроса.ФункциональныеОпции Цикл
				
				ЗначениеФО = ПолучитьФункциональнуюОпцию(КлючИЗначениеФО.Ключ);
				
				ВозвращаемаяСтруктура.ФункциональныеОпции.Вставить(КлючИЗначениеФО.Ключ, ЗначениеФО);
				
			КонецЦикла;
			
		ИначеЕсли КлючИЗначение.Ключ = "ПустыеСсылкиНаСправочники" Тогда
			
			ВозвращаемаяСтруктура.Вставить("ПустыеСсылкиНаСправочники", Новый Структура);
			
			Для каждого КлючИЗначениеПС Из СтруктураЗапроса.ПустыеСсылкиНаСправочники Цикл
				
				ПустаяСсылка = Справочники[КлючИЗначениеПС.Ключ].ПустаяСсылка();
				
				ВозвращаемаяСтруктура.ПустыеСсылкиНаСправочники.Вставить(КлючИЗначениеПС.Ключ, ПустаяСсылка);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

// Получение значения константы.
//
Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт

	Возврат Константы[ИмяКонстанты].Получить();

КонецФункции

#КонецОбласти

#Область ПолучениеНастроек

// Получает организацию, указанную в настройках пользователя.
//
Функция ПолучитьОрганизациюПользователяПоУмолчанию(Пользователь) Экспорт
	Возврат ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнаяОрганизация");
КонецФункции

// Получает склад поступления, указанный в настройках пользователя.
//
Функция ПолучитьСкладПоступленияПользователяПоУмолчанию(Пользователь) Экспорт
	Возврат ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойСкладПоступления");
КонецФункции 

// Получает склад продажи, указанный в настройках пользователя.
//
Функция ПолучитьСкладПродажиПользователяПоУмолчанию(Пользователь) Экспорт
	Возврат ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойСкладПродажи");
КонецФункции 

// Получает поставщика, указанного в настройках пользователя.
//
Функция ПолучитьПоставщикаПользователяПоУмолчанию(Пользователь) Экспорт
	Возврат ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойПоставщик");
КонецФункции 

// Получает покупателя, указанного в настройках пользователя.
//
Функция ПолучитьПокупателяПользователяПоУмолчанию(Пользователь) Экспорт
	Возврат ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойПокупатель");
КонецФункции 

// Получает продавца, указанного в настройках пользователя.
//
Функция ПолучитьПродавцаПользователяПоУмолчанию(Пользователь) Экспорт
	Возврат ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойПродавец");
КонецФункции 

// Получает кассу, указанного в настройках пользователя.
//
Функция ПолучитьКассуПользователяПоУмолчанию(Пользователь) Экспорт
	Возврат ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнаяКасса");
КонецФункции

// Получает кассу ККМ, указанную в настройках пользователя.
//
Функция ПолучитьКассуККМПользователяПоУмолчанию(Пользователь) Экспорт
	Возврат ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнаяКассаККМ");
КонецФункции 

// Получает Ставку НДС, указанную в настройках пользователя.
//
Функция ПолучитьСтавкуНДСНовыхНоменклатурныхПозицийПользователяПоУмолчанию(Пользователь) Экспорт
	Возврат ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнаяСтавкаНДСНовыхНоменклатурныхПозиций");
КонецФункции 

#КонецОбласти

#Область ПолучениеЗначенийПоУмолчанию

// Общая служебная функция получения значения настроек пользователя.
//
// Параметры: 
// Пользователь - СправочникСсылка.Пользователи
// Настройка - Строка
// СписокПолей - СписокЗначений
Функция ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, Настройка, СписокПолей = Неопределено) Экспорт
	
	НастройкаТипЗнч = ПланыВидовХарактеристик.НастройкиПользователей[Настройка].ТипЗначения;
	НастройкаТипЗнчСправочник = Справочники.ТипВсеСсылки().СодержитТип(НастройкаТипЗнч.Типы()[0]);
	Если НастройкаТипЗнчСправочник Тогда
		МетаданныеТипаНастройки = Метаданные.НайтиПоТипу(НастройкаТипЗнч.Типы()[0]);
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Магазин", ПараметрыСеанса.ТекущийМагазин);
	Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.НастройкиПользователей[Настройка]);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Значение КАК Значение";
	Если СписокПолей <> Неопределено И НастройкаТипЗнчСправочник Тогда
		СправочникИмя = МетаданныеТипаНастройки.Имя;
		Для каждого Элемент Из СписокПолей Цикл
			ИмяРеквизита = Элемент.Значение;
			Представление = Элемент.Представление;
			Если ПустаяСтрока(Представление) Тогда
				Представление = ИмяРеквизита;
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + ",
			|ВЫРАЗИТЬ(Значение КАК Справочник." + СправочникИмя + ")." + ИмяРеквизита + "  КАК " + Представление;
		КонецЦикла;
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК РегистрЗначениеПрав
	|
	|ГДЕ
	|	Пользователь = &Пользователь
	|	И Магазин    = &Магазин
	|	И Настройка  = &Настройка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Если СписокПолей = Неопределено Тогда
		ПустоеЗначение = НастройкаТипЗнч.ПривестиЗначение();
	Иначе
		ПустоеЗначение = Новый Структура("Значение", НастройкаТипЗнч.ПривестиЗначение());
		Для каждого ЭлементСписка Из СписокПолей Цикл
			ПустоеЗначение.Вставить(?(ПустаяСтрока(ЭлементСписка.Представление), ЭлементСписка.Значение, ЭлементСписка.Представление));
		КонецЦикла;
	КонецЕсли;
	Если Выборка.Следующий() Тогда
		Если Не ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		КонецЕсли;
		Если НастройкаТипЗнчСправочник И ПараметрыДоступа("Чтение", МетаданныеТипаНастройки, "Ссылка").ОграничениеУсловием Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 1 ИЗ Справочник." + МетаданныеТипаНастройки.Имя + " ГДЕ Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка", Выборка.Значение);
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				Возврат ПустоеЗначение;
			КонецЕсли;
		КонецЕсли;
		Если СписокПолей = Неопределено Тогда
			Возврат Выборка.Значение;
		Иначе
			ЗаполнитьЗначенияСвойств(ПустоеЗначение, Выборка);
			Возврат ПустоеЗначение;
		КонецЕсли;
	Иначе
		Возврат ПустоеЗначение;
	КонецЕсли;
	
КонецФункции // ПолучитьЗначениеПоУмолчаниюПользователя()

// Возвращает кассу организации, если она одна в ИБ.
// Если переданная в качестве параметра касса уже заполнена - возвращает ее.
// Если касса не передана в качестве параметра или передана пустая,
// возвращает единственную в информационной базе кассу. Если касса
// в базе не одна - возвращает пустую ссылку на кассу.
// Возвращает кассу, только если переданная форма оплаты наличная или Неопределено.
//
// Параметры:
// Организация    - СправочникСсылка.Организации - Организация, для которой необходимо получить счет.
// ФормаОплаты    - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость
// получения кассы.
// Касса - СправочникСсылка.Кассы - Касса, которую нужно заполнить.
// Пользователь - СправочникСсылка.Пользователи
//
// Возвращаемое значение:
// СправочникСсылка.Кассы
//
Функция ПолучитьКассуОрганизацииПоУмолчанию(
	Знач Организация = Неопределено,
	Знач ФормаОплаты = Неопределено,
	Знач Касса = Неопределено,
	Знач Магазин = Неопределено,
	Пользователь = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Касса) 
		И (ФормаОплаты = Неопределено Или ФормаОплаты = Перечисления.ФормыОплаты.Наличная) Тогда
		
		Если ЗначениеЗаполнено(Пользователь) Тогда
			Касса = ПолучитьКассуПользователяПоУмолчанию(Пользователь);
			Если ЗначениеЗаполнено(Касса)
				И Справочники.Кассы.РеквизитыКассы(Касса).Организация <> Организация
				Тогда
					Касса = Справочники.Кассы.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Касса) Тогда
			Касса = Справочники.Кассы.КассаПоУмолчанию(Организация, Магазин);
		КонецЕсли;
		Возврат Касса;
	Иначе
		Возврат Касса;
	КонецЕсли;
	
КонецФункции // ПолучитьКассуОрганизацииПоУмолчанию()

// Получает организацию, если она одна в ИБ.
// Если переданная в качестве параметра организация уже заполнена - возвращает ее.
// Если организация не передана в качестве параметра или передана пустая,
// возвращает единственную в информационной базе организацию. Если организация
// в базе не одна - возвращает пустую ссылку на организацию.
//
// Параметры:
// Организация - СправочникСсылка.Организации - Организация, которую нужно заполнить.
//
// Возвращаемое значение:
// СправочникСсылка.Организации
//
Функция ПолучитьОрганизациюПоУмолчанию(Знач Организация = Неопределено, Пользователь = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Возврат Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
		Иначе
			ОрганизацияНастроек = ПолучитьОрганизациюПользователяПоУмолчанию(Пользователь);
			Если ЗначениеЗаполнено(ОрганизацияНастроек) Тогда
				Возврат ОрганизацияНастроек;
			Иначе
				Возврат Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат Организация;
	КонецЕсли;
	
КонецФункции // ПолучитьОрганизациюПоУмолчанию()

// Возвращает склад поступления по умолчанию.
// Параметры:
// Склад - СправочникСсылка.Склады - Склад, который нужно заполнить.
// Магазин - СправочникСсылка.Магазины - Магазин, по которому определяется склад.
// Пользователь - СправочникСсылка.Пользователи
// Возвращаемое значение:
// СправочникСсылка.Склады
// 
Функция ПолучитьСкладПоступленияПоУмолчанию(Знач Магазин, ТипСклада = Неопределено, Знач Склад = Неопределено, Пользователь = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда		
			Если ЗначениеЗаполнено(Магазин) Тогда
				Возврат Справочники.Склады.ПолучитьСкладПоступленияПоУмолчанию(Магазин, ТипСклада);
			Иначе
				Возврат Справочники.Склады.ПустаяСсылка();
			КонецЕсли;			
		Иначе
			СкладНастроек = ПолучитьСкладПоступленияПользователяПоУмолчанию(Пользователь);
			Если ЗначениеЗаполнено(Магазин)
				И ЗначениеЗаполнено(СкладНастроек)
				И СкладНастроек.Магазин <> Магазин Тогда
				СкладНастроек = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;			
			Если ЗначениеЗаполнено(СкладНастроек) Тогда
				Возврат СкладНастроек;
			Иначе
				Если ЗначениеЗаполнено(Магазин) Тогда
					Возврат Справочники.Склады.ПолучитьСкладПоступленияПоУмолчанию(Магазин, ТипСклада);
				Иначе
					Возврат Справочники.Склады.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Возврат Склад;
	КонецЕсли;

КонецФункции 

// Возвращает склад продажи по умолчанию.
// Параметры:
// Склад - СправочникСсылка.Склады - Склад, который нужно заполнить.
// Магазин - СправочникСсылка.Магазины - Магазин, по которому определяется склад.
// Пользователь - СправочникСсылка.Пользователи
// Возвращаемое значение:
// СправочникСсылка.Склады
//
Функция ПолучитьСкладПродажиПоУмолчанию(Знач Магазин, ТипСклада = Неопределено, Знач Склад = Неопределено, Пользователь = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда		
			Если ЗначениеЗаполнено(Магазин) Тогда
				Возврат Справочники.Склады.ПолучитьСкладПродажиПоУмолчанию(Магазин, ТипСклада);
			Иначе
				Возврат Справочники.Склады.ПустаяСсылка();
			КонецЕсли;			
		Иначе
			СкладНастроек = ПолучитьСкладПродажиПользователяПоУмолчанию(Пользователь);
			Если ЗначениеЗаполнено(Магазин)
				И ЗначениеЗаполнено(СкладНастроек)
				И СкладНастроек.Магазин <> Магазин Тогда
				СкладНастроек = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;	
			Если ЗначениеЗаполнено(СкладНастроек) Тогда
				Возврат СкладНастроек;
			Иначе
				Если ЗначениеЗаполнено(Магазин) Тогда
					Возврат Справочники.Склады.ПолучитьСкладПродажиПоУмолчанию(Магазин, ТипСклада);
				Иначе
					Возврат Справочники.Склады.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Возврат Склад;
	КонецЕсли;

КонецФункции 

// Возвращает магазин по умолчанию.
//
// Параметры:
// Магазин - СправочникСсылка.Магазины - Магазин, который нужно заполнить.
// Возвращаемое значение:
// СправочникСсылка.Магазины
//
Функция ПолучитьМагазинПоУмолчанию(Знач Магазин = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Магазин) Тогда
		МагазинСеанса = ПараметрыСеанса.ТекущийМагазин;
		Если ЗначениеЗаполнено(МагазинСеанса) Тогда
			Возврат МагазинСеанса;	
		Иначе		
			Возврат Справочники.Магазины.ПолучитьМагазинПоУмолчанию();
		КонецЕсли;
	Иначе
		Возврат Магазин;
	КонецЕсли;
	
КонецФункции // ПолучитьМагазинПоУмолчанию()

// Возвращает формат магазина по умолчанию.
//
// Параметры:
// ФорматМагазина - СправочникСсылка.ФорматыМагазинов - формат магазина, который нужно заполнить.
// Возвращаемое значение:
// СправочникСсылка.Магазины
//
Функция ПолучитьФорматМагазинаПоУмолчанию(Знач ФорматМагазина = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(ФорматМагазина) Тогда
		Возврат Справочники.ФорматыМагазинов.ПолучитьФорматМагазинаПоУмолчанию();
	Иначе
		Возврат ФорматМагазина;
	КонецЕсли;
	
КонецФункции // ПолучитьМагазинПоУмолчанию()

// Возвращает поставщика по умолчанию.
//
// Параметры:
// Поставщик - СправочникСсылка.Контрагенты
// Пользователь - СправочникСсылка.Пользователи
// Возвращаемое значение:
// СправочникСсылка.Контрагенты
//
Функция ПолучитьПоставщикаПоУмолчанию(Пользователь, Знач Поставщик = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Поставщик) Тогда
		ПоставщикНастроек = ПолучитьПоставщикаПользователяПоУмолчанию(Пользователь);
		Если ЗначениеЗаполнено(ПоставщикНастроек) Тогда
			Возврат ПоставщикНастроек;
		Иначе
			Возврат Справочники.Контрагенты.ПустаяСсылка();				
		КонецЕсли;	      
	Иначе
		Возврат Поставщик;
	КонецЕсли;
		
КонецФункции 

// Возвращает покупателя по умолчанию.
//
// Параметры:
// Поставщик - СправочникСсылка.Контрагенты
// Пользователь - СправочникСсылка.Пользователи
// Возвращаемое значение:
// СправочникСсылка.Контрагенты
//
Функция ПолучитьПокупателяПоУмолчанию(Пользователь, Знач Покупатель = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Покупатель) Тогда
		ПокупательНастроек = ПолучитьПокупателяПользователяПоУмолчанию(Пользователь);
		Если ЗначениеЗаполнено(ПокупательНастроек) Тогда
			Возврат ПокупательНастроек;
		Иначе
			Возврат Справочники.Контрагенты.ПустаяСсылка();				
		КонецЕсли;	      
	Иначе
		Возврат Покупатель;
	КонецЕсли;
		
КонецФункции 

// Возвращает продавца по умолчанию.
//
// Параметры:
// Продавец - СправочникСсылка.ФизическиеЛица
// Пользователь - СправочникСсылка.Пользователи
// Возвращаемое значение:
// СправочникСсылка.ФизическиеЛица
//
Функция ПолучитьПродавцаПоУмолчанию(Пользователь, Знач Продавец = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Продавец) Тогда
		ПродавецНастроек = ПолучитьПродавцаПользователяПоУмолчанию(Пользователь);
		Если ЗначениеЗаполнено(ПродавецНастроек) Тогда
			Возврат ПродавецНастроек;
		Иначе
			Возврат Справочники.ФизическиеЛица.ПустаяСсылка();				
		КонецЕсли;	      
	Иначе
		Возврат Продавец;
	КонецЕсли;
		
КонецФункции 

// Возвращает кассу ККМ по умолчанию.
// Параметры:
// Организация    - СправочникСсылка.Организации - Организация, для которой необходимо получить счет.
// КассаККМ       - СправочникСсылка.КассыККМ - Касса ККМ, которую нужно заполнить.
// Магазин        - СправочникСсылка.Магазины
// Пользователь   - СправочникСсылка.Пользователи
// Возвращаемое значение:
// СправочникСсылка.КассыККМ
//
Функция ПолучитьКассуККМПоУмолчанию(Знач Организация, Знач Магазин, Знач КассаККМ = Неопределено, Пользователь = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		Если ЗначениеЗаполнено(Пользователь) Тогда
			КассаККМНастроек = ПолучитьКассуККМПользователяПоУмолчанию(Пользователь);
			Если ЗначениеЗаполнено(КассаККМНастроек) Тогда
				Возврат КассаККМНастроек;
			Иначе
				Возврат Справочники.КассыККМ.КассаПоУмолчанию(Организация, Магазин);
			КонецЕсли;
		Иначе
			Возврат Справочники.КассыККМ.КассаПоУмолчанию(Организация, Магазин);
		КонецЕсли;
	Иначе
		Возврат КассаККМ;
	КонецЕсли;
	
КонецФункции

// Возвращает ставку НДС для новых номенклатурных позиций по умолчанию.
//
// Параметры:
// СтавкаНДС - Перечисления.СтавкиНДС
// Пользователь - СправочникСсылка.Пользователи
// Возвращаемое значение:
// Перечисления.СтавкиНДС
//
Функция ПолучитьСтавкуНДСНовыхНоменклатурныхПозицийПоУмолчанию(Пользователь, Знач СтавкаНДС = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
		СтавкаНДСНастроек = ПолучитьСтавкуНДСНовыхНоменклатурныхПозицийПользователяПоУмолчанию(Пользователь);
		Если ЗначениеЗаполнено(СтавкаНДСНастроек) Тогда
			Возврат СтавкаНДСНастроек;
		Иначе
			Возврат Перечисления.СтавкиНДС.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Возврат СтавкаНДС;
	КонецЕсли;
	
КонецФункции

// Возвращает вид номенклатуры для новых номенклатурных позиций по умолчанию.
//
Функция ПолучитьВидНоменклатурыПоУмолчанию(Пользователь, ВидНоменклатуры = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		ВидНоменклатурыПользователя = ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойВидНоменклатуры");
		Если ЗначениеЗаполнено(ВидНоменклатурыПользователя) Тогда
			Возврат ВидНоменклатурыПользователя;
		Иначе
			Возврат Справочники.ВидыНоменклатуры.ПолучитьВидНоменклатурыПоУмолчанию();
		КонецЕсли;
	Иначе
		Возврат ВидНоменклатуры;
	КонецЕсли;
	
КонецФункции

// Возвращает банковский счет организации, если он один в ИБ.
// Если переданный в качестве параметра банковский счет уже заполнен - возвращает его.
// Если банковский счет не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе банковский счет. Если банковский счет
// в базе не один - возвращает пустую ссылку на банковский счет.
// Возвращает банковский счет, только если переданная форма оплаты безналичная или Неопределено.
//
// Параметры:
// Организация    - СправочникСсылка.Организации - Организация, для которой необходимо получить счет.
// ФормаОплаты    - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость
// получения банковского счета.
// БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций - Банковский счет, который нужно заполнить.
//
// Возвращаемое значение:
// СправочникСсылка.БанковскиеСчетаОрганизаций
//
Функция ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Знач Организация = Неопределено, Знач ФормаОплаты = Неопределено, Знач БанковскийСчет = Неопределено) Экспорт
	
	Если (ФормаОплаты = Неопределено Или ФормаОплаты = Перечисления.ФормыОплаты.Безналичная)
		И Не ЗначениеЗаполнено(БанковскийСчет) И (ЗначениеЗаполнено(Организация) Или Организация = Неопределено) Тогда
		
		Возврат Справочники.БанковскиеСчетаОрганизаций.БанковскийСчетОрганизацииПоУмолчанию(Организация);
		
	Иначе
		Возврат БанковскийСчет;
	КонецЕсли;
	
КонецФункции // ПолучитьБанковскийСчетОрганизацииПоУмолчанию()

// Возвращает хозяйственную операцию по коду хозяйственной операции.
//
// Параметры:
//  ХозяйственнаяОперация    - Хозяйственная операция.
//  ХозяйственнаяОперация - Код хозяйственной операции.
//  
// Возвращаемое значение:
//   Справочник.АналитикаХозяйственныхОпераций
//
Функция ПолучитьАналитикуХозяйственнойОперацииПоУмолчанию(Знач АналитикаХозяйственнойОперации, Знач ХозяйственнаяОперация) Экспорт

	Если Не ЗначениеЗаполнено(АналитикаХозяйственнойОперации) Тогда
		Возврат Справочники.АналитикаХозяйственныхОпераций.ПолучитьОперациюПоУмолчанию(ХозяйственнаяОперация);
	Иначе
		Возврат АналитикаХозяйственнойОперации;
	КонецЕсли;

КонецФункции // ПолучитьАналитикуХозяйственнойОперацииПоУмолчанию()

// Получает статью движения денежных средств для выбранной хозяйственной операции.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
//
// Возвращаемое значение:
// 	СправочникСсылка.СтатьиДвиженияДенежныхСредств - Предопределенная статья ДДС.
//
Функция ПолучитьСтатьюДвиженияДенежныхСредств(ХозяйственнаяОперация) Экспорт
	
	Возврат Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ХозяйственнаяОперация);
	
КонецФункции // ПолучитьСтатьюДвиженияДенежныхСредств()

// Возвращает банковский счет контрагента, если он один в ИБ.
// Если переданный в качестве параметра банковский счет уже заполнен - возвращает его.
// Если банковский счет не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе банковский счет. Если банковский счет
// в базе не один - возвращает пустую ссылку на банковский счет.
// Возвращает банковский счет, только если переданная форма оплаты безналичная или Неопределено.
//
// Параметры:
// Контрагент     - СправочникСсылка.Контрагенты - Контрагент, для которой необходимо получить счет.
// БанковскийСчет - СправочникСсылка.БанковскиеСчетаКонтрагентов - Банковский счет, который нужно заполнить.
//
// Возвращаемое значение:
// СправочникСсылка.БанковскиеСчетаКонтрагентов
//
Функция ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Знач Контрагент, Знач БанковскийСчет = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(БанковскийСчет) И (ЗначениеЗаполнено(Контрагент)) Тогда
		
		Возврат Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Контрагент);
		
	Иначе
		Возврат БанковскийСчет;
	КонецЕсли;
	
КонецФункции // ПолучитьБанковскийСчетКонтрагентаПоУмолчанию()

// Получает предопределенную статью движения денежных средств для выбранной хозяйственной операции.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
//
// Возвращаемое значение:
// 	СправочникСсылка.СтатьиДвиженияДенежныхСредств - Предопределенная статья ДДС.
//
Функция ПредопределеннаяСтатьяДвиженияДенежныхСредств(ХозяйственнаяОперация) Экспорт
	
	Возврат Справочники.СтатьиДвиженияДенежныхСредств.ПредопределеннаяСтатьяДДСПоХозяйственнойОперации(ХозяйственнаяОперация);
	
КонецФункции // ПредопределеннаяСтатьяДвиженияДенежныхСредств()

#КонецОбласти

#Область Прочие

// Возвращает структуру с параметрами учетной политики по сериям.
// Параметры:
//		ВидНоменклатуры - вид номенклатуры для которого нужно получить параметры учетной политики по сериям.
Функция ПараметрыСерийНоменклатуры(ВидНоменклатуры) Экспорт
	Возврат Справочники.ВидыНоменклатуры.ПараметрыСерийНоменклатуры(ВидНоменклатуры);
КонецФункции

// Функция возвращает структуру с параметрами политики учета серий.
//	Параметры:
//			 ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - политика, параметры которой нужно получить.
//			 Склад - склад, для которого нужно получить параметры учетной политики по сериям.
//	Возвращаемое значение
//		Структура:
// 			ПолитикаУчетаСерий
// 			ВидНоменклатуры
//			УказыватьПриПоступлении
//			УказыватьПриОтгрузке
//			УказыватьПриПланированииОтгрузки
//			УчетСерийПоFEFO
//			УказыватьПоФактуОтбора
//			УчитыватьОстаткиСерий
//			ИспользоватьНомер
//			ИспользоватьСрокГодности
//			УказыватьСрокГодностиСТочностьюДоЧасов
//			ФорматнаяСтрокаСрокаГодности
//			МаскаВводаСрокаГодности.
Функция ПараметрыПолитикиУчетаСерийПоВидуНоменклатуры(ВидНоменклатуры, Магазин)Экспорт
	Возврат Справочники.ПолитикиУчетаСерий.ПараметрыПолитикиУчетаСерийПоВидуНоменклатуры(ВидНоменклатуры, Магазин);
КонецФункции

// Функция определяет, есть ли у текущего пользователя право изменять номенклатуру.
//	Параметры:
//			ГруппаДоступа - СправочникСсылка.ГруппыДоступаНоменклатуры
Функция ЕстьПравоИзмененияНоменклатуры() Экспорт
	
	Если Пользователи.РолиДоступны("ПолныеПрава") Тогда
		Возврат Истина;
	Иначе
		Возврат ПравоДоступа("Изменение",Метаданные.Справочники.Номенклатура);
	КонецЕсли;
	
КонецФункции

// Функция возвращает вид оплаты по типу, если вид по выбранному типу один
// в противном случае возвращается Неопределенно.
Функция ПолучитьВидОплатыПоТипу(ТипОплаты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ВидыОплатЧекаККМ.Ссылка
	|ИЗ
	|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
	|ГДЕ
	|	НЕ ВидыОплатЧекаККМ.ПометкаУдаления
	|	И ВидыОплатЧекаККМ.ТипОплаты = &ТипОплаты";
	
	Запрос.УстановитьПараметр("ТипОплаты", ТипОплаты);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Фукнция возращает стуктуру с параметрами шаблона серий номенклатуры
//	Параметры:
//			ВидНоменклатуры    - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры, параметры серий которого которой нужно получить
//			СкладПодразделение - СправочникСсылка.Склады, СправочникСсылка.СтруктураПредприятия - склад или производственное подразделение
//									для которого нужно получить настройки серий. Если значение не задано - возвращаются настройки, которые
//									от склада не зависят
//	Возвращаемое значение
//		Структура - см. Справочники.ВидыНоменклатуры.НастройкиИспользованияСерий 
//
Функция НастройкиИспользованияСерий(ВидНоменклатуры, СкладПодразделение = Неопределено) Экспорт
	Возврат Справочники.ВидыНоменклатуры.НастройкиИспользованияСерий(ВидНоменклатуры, СкладПодразделение);
КонецФункции

#КонецОбласти

#КонецОбласти