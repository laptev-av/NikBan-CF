#Область ПрограммныйИнтерфейс

#Область ПроцедурыФормированияДвиженийПоПродажам

// Процедура записи движений в регистр Продажи.
//
Процедура ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.Продажи.Записывать = Истина;
	Движения.Продажи.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура записи движений в регистр ПродажиПоДисконтнымКартам.
//
Процедура ОтразитьПопыткиПродаж(ТаблицаПопыткиПродажПревышающихОстаток, ДатаПродажи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПопыткиПродажПревышающихОстаток.ДатаПродажи КАК ДатаПродажи,
	|	ПопыткиПродажПревышающихОстаток.Склад,
	|	ПопыткиПродажПревышающихОстаток.Номенклатура,
	|	ПопыткиПродажПревышающихОстаток.Характеристика
	|ПОМЕСТИТЬ ТаблицаЗаписей
	|ИЗ
	|	РегистрСведений.ПопыткиПродажПревышающихОстаток КАК ПопыткиПродажПревышающихОстаток
	|ГДЕ
	|	ПопыткиПродажПревышающихОстаток.ДатаПродажи = &ДатаПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНовыхЗаписей.ДатаПродажи КАК ДатаПродажи,
	|	ТаблицаНовыхЗаписей.Склад,
	|	ТаблицаНовыхЗаписей.Номенклатура,
	|	ТаблицаНовыхЗаписей.Характеристика
	|ПОМЕСТИТЬ ТаблицаНовыхЗаписей
	|ИЗ
	|	&ТаблицаНовыхЗаписей КАК ТаблицаНовыхЗаписей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаписей.ДатаПродажи КАК ДатаПродажи,
	|	ТаблицаЗаписей.Склад,
	|	ТаблицаЗаписей.Номенклатура,
	|	ТаблицаЗаписей.Характеристика
	|ПОМЕСТИТЬ ВсеЗаписи
	|ИЗ
	|	ТаблицаЗаписей КАК ТаблицаЗаписей
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаНовыхЗаписей.ДатаПродажи,
	|	ТаблицаНовыхЗаписей.Склад,
	|	ТаблицаНовыхЗаписей.Номенклатура,
	|	ТаблицаНовыхЗаписей.Характеристика
	|ИЗ
	|	ТаблицаНовыхЗаписей КАК ТаблицаНовыхЗаписей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеЗаписи.ДатаПродажи,
	|	ВсеЗаписи.Склад,
	|	ВсеЗаписи.Номенклатура,
	|	ВсеЗаписи.Характеристика
	|ИЗ
	|	ВсеЗаписи КАК ВсеЗаписи";
	
	Запрос.УстановитьПараметр("ДатаПродажи"        , НачалоДня(ДатаПродажи));
	Запрос.УстановитьПараметр("ТаблицаНовыхЗаписей", ТаблицаПопыткиПродажПревышающихОстаток);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	НаборЗаписей = РегистрыСведений.ПопыткиПродажПревышающихОстаток.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДатаПродажи.Установить(НачалоДня(ДатаПродажи));
	
	НаборЗаписей.Загрузить(ТаблицаЗапроса);
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Процедура записи движений в регистр ЗаказыПокупателей.
//
Процедура ОтразитьЗаказыПокупателей(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыПокупателей;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.ЗаказыПокупателей.Записывать = Истина;
	Движения.ЗаказыПокупателей.Загрузить(Таблица);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияДвиженийПоПродажамПоДисконтнымКартам

// Процедура записи движений в регистр ПродажиПоДисконтнымКартам.
//
Процедура ОтразитьПродажиПоДисконтнымКартам(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажиПоДисконтнымКартам;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.ПродажиПоДисконтнымКартам.Записывать = Истина;
	Движения.ПродажиПоДисконтнымКартам.Загрузить(Таблица);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияДвиженийПоПродажамПоПлатежнымКартам

// Процедура записи движений в регистр ПродажиПоПлатежнымКартам.
//
Процедура ОтразитьПродажиПоПлатежнымКартам(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажиПоПлатежнымКартам;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.ПродажиПоПлатежнымКартам.Записывать = Истина;
	Движения.ПродажиПоПлатежнымКартам.Загрузить(Таблица);
	
КонецПроцедуры

#КонецОбласти

#Область РМК

// Получение текущей настройки РМК по имени компьютера.
//
Функция ТекущаяНастройкаРМКСервер(ИмяКомпьютера) Экспорт
	
	Если ЗначениеЗаполнено(ИмяКомпьютера) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РегистрСведенийНастройкаРМК.НастройкаРМК КАК НастройкаРМК
		|ИЗ
		|	РегистрСведений.НастройкаРМКНаКомпьютере КАК РегистрСведенийНастройкаРМК
		|ГДЕ
		|	РегистрСведенийНастройкаРМК.Компьютер = &Компьютер";
		
		Запрос.УстановитьПараметр("Компьютер", ИмяКомпьютера);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Возврат Выборка.НастройкаРМК;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Справочники.НастройкиРМК.ПустаяСсылка();
	
КонецФункции

// Проверка возможности оплаты по выбранному типу.
//
Функция ЕстьВозможностьОплатыПоТипуОплаты(ТипОплаты) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыОплатЧекаККМ.Ссылка КАК ВидОплаты
	|ИЗ
	|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
	|ГДЕ
	|	НЕ ВидыОплатЧекаККМ.ЭтоГруппа
	|	И НЕ ВидыОплатЧекаККМ.ПометкаУдаления
	|	И ВидыОплатЧекаККМ.ТипОплаты = &ТипОплаты";
	
	Запрос.УстановитьПараметр("ТипОплаты", ТипОплаты);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции // ЕстьВозможностьОплатыПоТипуОплаты()

// Параметры:
//  МассивКассККМ - 
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьВозможностьОплатыПлатежнойКартой(МассивКассККМ) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование();
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭквайринговыеТерминалы.Ссылка КАК ЭквайринговыйТерминал
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|ГДЕ
		|	ЭквайринговыеТерминалы.Касса В(&МассивКассККМ)
		|	И НЕ ЭквайринговыеТерминалы.ПометкаУдаления
		|	И НЕ ЭквайринговыеТерминалы.НеДействителен";
		
		Запрос.УстановитьПараметр("МассивКассККМ", МассивКассККМ);
		
		Результат = Запрос.Выполнить();
		
		Возврат НЕ Результат.Пустой();
	Иначе
		Возврат ЕстьВозможностьОплатыПоТипуОплаты(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	КонецЕсли;
	
КонецФункции // ЕстьВозможностьОплатыПлатежнойКартой()

// Параметры:
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьВозможностьОплатыБанковскимКредитом() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОплатуБанковскимиКредитами") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЕстьВозможностьОплатыПоТипуОплаты(Перечисления.ТипыОплатЧекаККМ.БанковскийКредит)
	
КонецФункции // ЕстьВозможностьОплатыПлатежнойКартой()

// Параметры:
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьВозможностьОплатыВРассрочку() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыСКлиентами") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЕстьВозможностьОплатыПоТипуОплаты(Перечисления.ТипыОплатЧекаККМ.ВРассрочку)
	
КонецФункции // ЕстьВозможностьОплатыПлатежнойКартой()

// Параметры:
//  ВидОперации - Перечисления.ВидыОперацийЧекККМ
//  ЧекККМПродажа - Документ.ЧекККМ
//  
// Возвращаемое значение:
//  Булево
//

Функция ВозвращаютсяТоварыВРассрочку(ВидОперации, ЧекККМПродажа) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыСКлиентами")
		И НЕ ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекККМОплата.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &Ссылка
	|	И ЧекККМОплата.ВидОплаты.ТипОплаты = &ТипОплаты";
	
	Запрос.УстановитьПараметр("Ссылка"   , ЧекККМПродажа);
	Запрос.УстановитьПараметр("ТипОплаты", Перечисления.ТипыОплатЧекаККМ.ВРассрочку);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции // ЕстьВозможностьОплатыПлатежнойКартой()

// Параметры:
//
// Возвращаемое значение:
//  Число
//
Функция МаксимальноеКоличествоКнопокВКонфигураторе() Экспорт
	
	Возврат 12;
	
КонецФункции

#КонецОбласти

#Область ЗаказыПокупателей

// Уточняет состояние заказа
//
Процедура ОбновитьСостояниеЗаказа(ЗаказПокупателя, СостояниеЗаказа) Экспорт
	
	СостояниеЗаказа = Перечисления.СостоянияЗаказовПокупателей.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументЗаказПокупателя.Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ ДокументЗаказПокупателя.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ПустаяСсылка)
	|		КОГДА ДокументЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.НеСогласован)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ОжидаетсяСогласование)
	|		КОГДА ДокументЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.Закрыт)
	|		КОГДА ДокументЗаказПокупателя.Отменено
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ГотовКЗакрытию)
	|		КОГДА НЕ ТаблицаКПродаже.ЗаказПродажа ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА &ИспользоватьРезервированиеПоЗаказамПокупателей
	|							И ДокументЗаказПокупателя.НаличиеНезарезервированныхСтрок
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ОжидаетсяРезервирование)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ОжидаетсяПродажа)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ГотовКЗакрытию)
	|	КОНЕЦ КАК Состояние
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ДокументЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ЗаказыПокупателейОстатки.Заказ КАК ЗаказПродажа
	|		ИЗ
	|			РегистрНакопления.ЗаказыПокупателей.Остатки(, Заказ = &Ссылка) КАК ЗаказыПокупателейОстатки
	|		ГДЕ
	|			ЗаказыПокупателейОстатки.ЗаказаноОстаток > 0) КАК ТаблицаКПродаже
	|		ПО ДокументЗаказПокупателя.Ссылка = ТаблицаКПродаже.ЗаказПродажа
	|ГДЕ
	|	ДокументЗаказПокупателя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЗаказПокупателя);
	Запрос.УстановитьПараметр("ИспользоватьРезервированиеПоЗаказамПокупателей", ПолучитьФункциональнуюОпцию("ИспользоватьРезервированиеПоЗаказамПокупателей"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СостояниеЗаказа = Выборка.Состояние
		
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область СчетФактура

// Возвращает структуру параметров представления счета-фактуры в документе.
//
// Параметры:
//  Основание - ДокументСсылка - Документ, на основании которого вводится счет-фактура;
//  Организация - СправочникСсылка.Организации - Организация, на имя которой оформляется счет-фактура;
//	НеТребуется - Булево - Истина - для документа не требуется вводить счет-фактуру.
//
// Возвращаемое значение:
//  Структура
//		ТекстСчетФактура - Строка - Представление счета-фактуры;
//		ТекстСписок - Строка - Представление команды открытия списка счетов-фактур;
//		ГиперссылкаСчетФактура - Булево - Признак гиперссылки представления счета-фактуры;
//		РазрешеныИсправления - Булево - Истина - Доступен ввод исправлений счета-фактуры.
//
Функция ПараметрыПредставленияСчетаФактуры(Основание, Организация, НеТребуется = Ложь) Экспорт
	
	Перем РеквизитыСчетаФактуры;
	
	СчетаФактуры = Документы.СчетФактураВыданный.СчетаФактурыПоОснованию(Основание, Организация, РеквизитыСчетаФактуры);
	Если СчетаФактуры.Количество() > 0 Тогда
		ТекстСчетФактура = ПредставлениеСчетаФактуры(РеквизитыСчетаФактуры.Номер, РеквизитыСчетаФактуры.Дата);
		Если СчетаФактуры.Количество() > 1 Тогда
			ТекстСписок = НСтр("ru='Открыть список'") + " (" + Строка(СчетаФактуры.Количество()) + ")";
		Иначе
			ТекстСписок = "";
		КонецЕсли;
		ГиперссылкаСчетФактура = Истина;
		РазрешеныИсправления = ПравоДоступа("Добавление", Метаданные.Документы.СчетФактураВыданный);
		
	ИначеЕсли НеТребуется Тогда
		ТекстСчетФактура = НСтр("ru='Не требуется'");
		ТекстСписок = "";
		ГиперссылкаСчетФактура = Ложь;
		РазрешеныИсправления = Ложь;
		
	ИначеЕсли Не ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.СчетФактураВыданный) Тогда
		ТекстСчетФактура = НСтр("ru='Не введен'");
		ТекстСписок = "";
		ГиперссылкаСчетФактура = Ложь;
		РазрешеныИсправления = Ложь;
		
	Иначе
		ТекстСчетФактура = НСтр("ru='Создать счет-фактуру'");
		ТекстСписок = "";
		ГиперссылкаСчетФактура = Истина;
		РазрешеныИсправления = Ложь;
		
	КонецЕсли;
	
	Возврат Новый Структура("ТекстСчетФактура, ТекстСписок, ГиперссылкаСчетФактура, РазрешеныИсправления",
		ТекстСчетФактура, ТекстСписок, ГиперссылкаСчетФактура, РазрешеныИсправления);
	
КонецФункции

// Функция формирует представление счет-фактуры.
//
// Параметры:
//  Номер - Строка - Номер счета-фактуры;
//  Дата - Дата - Дата счета-фактуры;
//
// Возвращаемое значение:
//	Строка - Представление счета-фактуры.
//
Функция ПредставлениеСчетаФактуры(Номер, Дата) Экспорт
	
	Возврат "№ " + СокрЛП(Номер) + " от " + Формат(Дата, "ДФ=dd.MM.yyyy") + " г.";
	
КонецФункции


// Формирует временную таблицу, содержащую данные счетов-фактур по таблице данных документов-оснований.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц, содержащий таблицу
//	                                                    ТаблицаДанныхДокументов с полями:
//		Ссылка,
//		Организация,
//		Подразделение,
//		Склад.
//
Процедура ПоместитьВременнуюТаблицуСчетовФактур(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	СчетаФактуры.ДокументОснование КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА СчетаФактуры.Исправление
	|			ТОГДА ЕСТЬNULL(СчетаФактуры.СчетФактураОснование.Дата, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ СчетаФактуры.Дата
	|	КОНЕЦ КАК Дата,
	|	МАКСИМУМ(СчетаФактуры.НомерИсправления) КАК НомерИсправления
	|ПОМЕСТИТЬ НомераИсправлений
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетаФактуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	|		ПО СчетаФактуры.ДокументОснование = ДанныеДокументов.Ссылка
	|ГДЕ
	|	НЕ СчетаФактуры.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаФактуры.ДокументОснование,
	|	ВЫБОР
	|		КОГДА СчетаФактуры.Исправление
	|			ТОГДА ЕСТЬNULL(СчетаФактуры.СчетФактураОснование.Дата, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ СчетаФактуры.Дата
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаФактуры.ДокументОснование КАК ДокументОснование,
	|	СчетаФактуры.Исправление КАК Исправление,
	|	СчетаФактуры.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА СчетаФактуры.Исправление
	|			ТОГДА ЕСТЬNULL(СчетаФактуры.СчетФактураОснование.Дата, ДАТАВРЕМЯ(1, 1, 1))
	|		ИНАЧЕ СчетаФактуры.Дата
	|	КОНЕЦ КАК Дата,
	|	ВЫБОР
	|		КОГДА СчетаФактуры.Исправление
	|			ТОГДА СчетаФактуры.НомерИсправления
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НомерИсправления,
	|	ВЫБОР
	|		КОГДА СчетаФактуры.Исправление
	|			ТОГДА СчетаФактуры.Дата
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДатаИсправления,
	|	СчетаФактуры.Организация КАК Организация,
	|	СчетаФактуры.Валюта КАК Валюта,
	|	СчетаФактуры.СтрокаПлатежноРасчетныеДокументы КАК СтрокаПлатежноРасчетныеДокументы,
	|	СчетаФактуры.Организация КАК Грузоотправитель
	|ПОМЕСТИТЬ ТаблицаСчетовФактур
	|ИЗ
	|	НомераИсправлений КАК НомераИсправлений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетаФактуры
	|		ПО НомераИсправлений.ДокументОснование = СчетаФактуры.ДокументОснование
	|			И (НомераИсправлений.Дата = ВЫБОР
	|				КОГДА СчетаФактуры.Исправление
	|					ТОГДА ЕСТЬNULL(СчетаФактуры.СчетФактураОснование.Дата, НЕОПРЕДЕЛЕНО)
	|				ИНАЧЕ СчетаФактуры.Дата
	|			КОНЕЦ)
	|			И НомераИсправлений.НомерИсправления = СчетаФактуры.НомерИсправления
	|			И (НЕ СчетаФактуры.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НомераИсправлений";
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область ЕГАИС

//
Функция ПодготовкаДанныхДляПередачиДанныеВЕГАИС(ДокументОбъект, ДанныеЕГАИСДостаточны, ОсобыйВыводСообщения = Ложь, ТекстПолногоСообщения = "") Экспорт
	
	ПродажаСПроверкойЕГАИС = ПродажаСПроверкойЕГАИС(ДокументОбъект.Организация, ДокументОбъект.Магазин, ДокументОбъект.Дата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Количество,
	|	Товары.Цена,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.Упаковка,
	|	Товары.КоличествоУпаковок,
	|	Товары.КлючСвязи,
	|	Товары.СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки,
	|	Товары.Штрихкод
	|ПОМЕСТИТЬ ТаблицаТоварыЧека
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Количество,
	|	Товары.Цена,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.Упаковка,
	|	Товары.КоличествоУпаковок,
	|	Товары.КлючСвязи,
	|	Товары.СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки,
	|	Товары.Штрихкод,
	|	ЕСТЬNULL(Товары.Номенклатура.ОбъемДАЛ, 0) КАК ОбъемДАЛ,
	|	ЕСТЬNULL(Товары.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Маркируемый, ЛОЖЬ) КАК Маркируемый,
	|	ЕСТЬNULL(Товары.Номенклатура.ВидНоменклатуры.ПродаетсяВРозлив, ЛОЖЬ) КАК ПродаетсяВРозлив,
	|	ЕСТЬNULL(Товары.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Код, """") КАК КодВидаПродукции,
	|	ЕСТЬNULL(Товары.Номенклатура.АлкогольнаяПродукция, ЛОЖЬ) КАК АлкогольнаяПродукция,
	|	ЕСТЬNULL(Товары.Номенклатура.Крепость, 0) КАК Крепость
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ТаблицаТоварыЧека КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМарки.НомерСтроки,
	|	АкцизныеМарки.КлючСвязи,
	|	АкцизныеМарки.КодАкцизнойМарки
	|ПОМЕСТИТЬ ТаблицаАкцизныхМарок
	|ИЗ
	|	&АкцизныеМарки КАК АкцизныеМарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС,
	|	ТаблицаТовары.Упаковка,
	|	ТаблицаТовары.КоличествоУпаковок,
	|	ТаблицаТовары.КлючСвязи,
	|	ТаблицаТовары.СуммаАвтоматическойСкидки,
	|	ТаблицаТовары.СуммаРучнойСкидки,
	|	ТаблицаТовары.Штрихкод,
	|	ВЫБОР
	|		КОГДА &ПродажаСПроверкойЕГАИС
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаТовары.Маркируемый
	|							И НЕ ТаблицаАкцизныхМарок.КодАкцизнойМарки ЕСТЬ NULL 
	|						ТОГДА ТаблицаАкцизныхМарок.КодАкцизнойМарки
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КодАкцизнойМарки,
	|	ВЫБОР
	|		КОГДА &ПродажаСПроверкойЕГАИС
	|			ТОГДА ТаблицаТовары.Маркируемый
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Маркируемый,
	|	ВЫБОР
	|		КОГДА &ПродажаСПроверкойЕГАИС
	|			ТОГДА ТаблицаТовары.КодВидаПродукции
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КодВидаПродукции,
	|	ВЫБОР
	|		КОГДА &ПродажаСПроверкойЕГАИС
	|				И ТаблицаТовары.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТовары.ОбъемДАЛ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОбъемДАЛ,
	|	ВЫБОР
	|		КОГДА &ПродажаСПроверкойЕГАИС
	|				И ТаблицаТовары.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТовары.Крепость
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Крепость,
	|	ВЫБОР
	|		КОГДА &ПродажаСПроверкойЕГАИС
	|			ТОГДА ТаблицаТовары.АлкогольнаяПродукция
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК АлкогольнаяПродукция
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаАкцизныхМарок КАК ТаблицаАкцизныхМарок
	|		ПО ТаблицаТовары.КлючСвязи = ТаблицаАкцизныхМарок.КлючСвязи
	|ГДЕ
	|	&ПродажаСПроверкойЕГАИС
	|	И ТаблицаТовары.АлкогольнаяПродукция
	|	И ТаблицаТовары.Маркируемый
	|	И НЕ ТаблицаТовары.ПродаетсяВРозлив
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.КоличествоУпаковок,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныхМарок.КодАкцизнойМарки) КАК КоличествоАкцизныхМарок
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаАкцизныхМарок КАК ТаблицаАкцизныхМарок
	|		ПО ТаблицаТовары.КлючСвязи = ТаблицаАкцизныхМарок.КлючСвязи
	|ГДЕ
	|	&ПродажаСПроверкойЕГАИС
	|	И ТаблицаТовары.АлкогольнаяПродукция
	|	И ТаблицаТовары.Маркируемый
	|	И НЕ ТаблицаТовары.ПродаетсяВРозлив
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.КоличествоУпаковок
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныхМарок.КодАкцизнойМарки) <> ТаблицаТовары.Количество
	|	И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныхМарок.КодАкцизнойМарки) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС,
	|	ТаблицаТовары.Упаковка,
	|	ТаблицаТовары.КоличествоУпаковок,
	|	ТаблицаТовары.КлючСвязи,
	|	ТаблицаТовары.СуммаАвтоматическойСкидки,
	|	ТаблицаТовары.СуммаРучнойСкидки,
	|	ТаблицаТовары.Штрихкод,
	|	ТаблицаТовары.ОбъемДАЛ КАК ОбъемДАЛ,
	|	ТаблицаТовары.Маркируемый КАК Маркируемый,
	|	ТаблицаТовары.КодВидаПродукции КАК КодВидаПродукции,
	|	ТаблицаТовары.АлкогольнаяПродукция И НЕ ТаблицаТовары.ПродаетсяВРозлив КАК АлкогольнаяПродукция,
	|	ТаблицаТовары.Крепость КАК Крепость,
	|	ТаблицаТовары.ПродаетсяВРозлив КАК ПродаетсяВРозлив,
	|	"""" КАК КодАкцизнойМарки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|";
	
	Запрос.УстановитьПараметр("Товары", ДокументОбъект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("АкцизныеМарки", ДокументОбъект.АкцизныеМарки.Выгрузить());
	Запрос.УстановитьПараметр("ПродажаСПроверкойЕГАИС", ПродажаСПроверкойЕГАИС);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваровЕГАИС = Результат[3].Выгрузить();
	ТаблицаНедостающихМарокЕГАИС = Результат[4].Выгрузить();
	ТаблицаТоваровЧека = Результат[5].Выгрузить();
	
	Если ПродажаСПроверкойЕГАИС Тогда
		ИнтеграцияЕГАИСРТ.ПроверитьДанныеЕГАИС(ТаблицаТоваровЕГАИС, ТаблицаНедостающихМарокЕГАИС, ДанныеЕГАИСДостаточны, ДокументОбъект, ОсобыйВыводСообщения, ТекстПолногоСообщения);
	Иначе
		ДанныеЕГАИСДостаточны = Истина;
	КонецЕсли;
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ТаблицаТоваровЧека", ТаблицаТоваровЧека);
	СтруктураТаблиц.Вставить("ТаблицаТоваровЕГАИС", ТаблицаТоваровЕГАИС);
	
	Возврат СтруктураТаблиц;
	
КонецФункции

//
Функция ПодготовкаДанныхДляПробитияЧекаККМ(ДокументОбъект, ДанныеЕГАИСДостаточны, ОсобыйВыводСообщения = Ложь, ТекстПолногоСообщения = "", ЕстьАлкогольнаяПродукцияЕГАИС = Ложь) Экспорт
	
	ЕстьАлкогольнаяПродукцияЕГАИС = ИнтеграцияЕГАИСРТ.ЕстьАлкогольнаяПродукцияЕГАИС(ДокументОбъект.Товары);
	
	ИспользоватьКомиссионнуюТорговлю = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
	ИспользоватьУчетИмпортныхТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьУчетИмпортныхТоваров");
	
	Если ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(ДокументОбъект.Организация, ДокументОбъект.Магазин, ДокументОбъект.Дата);
		ПродажаСПроверкойЕГАИС = ИспользуетсяРегистрацияРозничныхПродажВЕГАИС;
	Иначе
		ПродажаСПроверкойЕГАИС = Ложь;
	КонецЕсли;
	
	Если ИспользоватьКомиссионнуюТорговлю
		ИЛИ ИспользоватьУчетИмпортныхТоваров Тогда
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	Товары.Количество КАК Количество,
		|	Товары.Цена КАК Цена,
		|	Товары.Сумма КАК Сумма,
		|	Товары.СтавкаНДС КАК СтавкаНДС,
		|	Товары.СуммаНДС КАК СуммаНДС,
		|	Товары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	Товары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
		|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	Товары.КлючСвязи КАК КлючСвязи,
		|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|	Товары.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
		|	Товары.Штрихкод КАК Штрихкод
		|ПОМЕСТИТЬ ТоварыПредварительные
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыОрганизаций.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
		|	ТоварыОрганизаций.НомерГТД КАК НомерГТД,
		|	ТоварыОрганизаций.Договор КАК Договор,
		|	ТоварыОрганизаций.Поставщик КАК Поставщик,
		|	СУММА(ТоварыОрганизаций.Количество) КАК Количество
		|ПОМЕСТИТЬ ТаблицаДвижений
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
		|ГДЕ
		|	ТоварыОрганизаций.Регистратор = &Ссылка
		|	И НЕ ЕСТЬNULL(ТоварыОрганизаций.Номенклатура.ТабачнаяПродукция, ЛОЖЬ)
		|	И НЕ ЕСТЬNULL(ТоварыОрганизаций.Номенклатура.ОбувнаяПродукция, ЛОЖЬ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыОрганизаций.НомерСтрокиДокумента,
		|	ТоварыОрганизаций.Регистратор,
		|	ТоварыОрганизаций.НомерГТД,
		|	ТоварыОрганизаций.Договор,
		|	ТоварыОрганизаций.Поставщик
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыОрганизаций.НомерСтрокиДокумента,
		|	МАКСИМУМ(ТоварыОрганизаций.НомерГТД),
		|	МАКСИМУМ(ТоварыОрганизаций.Договор),
		|	МАКСИМУМ(ТоварыОрганизаций.Поставщик),
		|	0
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
		|ГДЕ
		|	ТоварыОрганизаций.Регистратор = &Ссылка
		|	И (ЕСТЬNULL(ТоварыОрганизаций.Номенклатура.ТабачнаяПродукция, ЛОЖЬ)
		|	ИЛИ ЕСТЬNULL(ТоварыОрганизаций.Номенклатура.ОбувнаяПродукция, ЛОЖЬ))
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыОрганизаций.НомерСтрокиДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ЕСТЬNULL(ТаблицаДвижений.Поставщик, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Поставщик,
		|	ЕСТЬNULL(ТаблицаДвижений.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыПлатежныхАгентов.ПустаяСсылка)) КАК Договор,
		|	ЕСТЬNULL(ТаблицаДвижений.НомерГТД, ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)) КАК НомерГТД,
		|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
		|			ТОГДА ТаблицаТоваров.КоличествоУпаковок
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, 0)
		|	КОНЕЦ КАК КоличествоУпаковок,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
		|	ТаблицаТоваров.Цена КАК Цена,
		|	ТаблицаТоваров.Сумма * ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, 0) / ТаблицаТоваров.Количество
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТоваров.СуммаНДС * ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, 0) / ТаблицаТоваров.Количество
		|	КОНЕЦ КАК СуммаНДС,
		|	ТаблицаТоваров.СуммаАвтоматическойСкидки * ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, 0) / ТаблицаТоваров.Количество
		|	КОНЕЦ КАК СуммаАвтоматическойСкидки,
		|	ТаблицаТоваров.СуммаРучнойСкидки * ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, 0) / ТаблицаТоваров.Количество
		|	КОНЕЦ КАК СуммаРучнойСкидки,
		|	ТаблицаТоваров.СуммаСкидкиОплатыБонусом * ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаДвижений.Количество, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаДвижений.Количество, 0) / ТаблицаТоваров.Количество
		|	КОНЕЦ КАК СуммаСкидкиОплатыБонусом,
		|	ЕСТЬNULL(ТаблицаДвижений.Количество, ТаблицаТоваров.КоличествоУпаковок) КАК Количество,
		|	ТаблицаТоваров.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	ТаблицаТоваров.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	ТаблицаТоваров.КлючСвязи КАК КлючСвязи,
		|	ТаблицаТоваров.Штрихкод КАК Штрихкод
		|ПОМЕСТИТЬ ТаблицаТоварыЧека
		|ИЗ
		|	ТоварыПредварительные КАК ТаблицаТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДвижений КАК ТаблицаДвижений
		|		ПО ТаблицаТоваров.НомерСтроки = ТаблицаДвижений.НомерСтрокиДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	Иначе
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Товары.НомерСтроки                                         КАК НомерСтроки,
		|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура)  КАК Номенклатура,
		|	Товары.Характеристика                                      КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)              КАК Поставщик,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыПлатежныхАгентов.ПустаяСсылка) КАК Договор,
		|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)                КАК НомерГТД,
		|	Товары.Количество КАК Количество,
		|	Товары.Цена КАК Цена,
		|	Товары.Сумма КАК Сумма,
		|	Товары.СтавкаНДС КАК СтавкаНДС,
		|	Товары.СуммаНДС КАК СуммаНДС,
		|	Товары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	Товары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
		|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	Товары.КлючСвязи КАК КлючСвязи,
		|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|	Товары.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
		|	Товары.Штрихкод КАК Штрихкод
		|ПОМЕСТИТЬ ТаблицаТоварыЧека
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Поставщик КАК Поставщик,
	|	Товары.Договор КАК Договор,
	|	Товары.НомерГТД КАК НомерГТД,
	|	Товары.Количество КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	Товары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Упаковка.Наименование КАК ЕдиницаИзмеренияПредметаРасчета,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.КлючСвязи КАК КлючСвязи,
	|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	Товары.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
	|	Товары.Штрихкод КАК Штрихкод,
	|	Товары.Номенклатура.ОбъемДАЛ КАК ОбъемДАЛ,
	|	ЕСТЬNULL(Товары.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Маркируемый, ЛОЖЬ) КАК Маркируемый,
	|	ЕСТЬNULL(Товары.Номенклатура.ВидНоменклатуры.ПродаетсяВРозлив, ЛОЖЬ) КАК ПродаетсяВРозлив,
	|	ЕСТЬNULL(Товары.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Код, """") КАК КодВидаПродукции,
	|	ЕСТЬNULL(Товары.Номенклатура.ВидНоменклатуры.ПризнакПредметаРасчета.ТипПризнакаПредметаРасчета, """") КАК ПризнакПредметаРасчета,
	|	ЕСТЬNULL(Товары.Номенклатура.АлкогольнаяПродукция, ЛОЖЬ) КАК АлкогольнаяПродукция,
	|	ЕСТЬNULL(Товары.Номенклатура.ТабачнаяПродукция, ЛОЖЬ) КАК ТабачнаяПродукция,
	|	ЕСТЬNULL(Товары.Номенклатура.ОбувнаяПродукция, ЛОЖЬ) КАК ОбувнаяПродукция,
	|	ЕСТЬNULL(Товары.Номенклатура.Наименование, """") КАК НаименованиеТовара,
	|	ЕСТЬNULL(Товары.Номенклатура.Крепость, 0) КАК Крепость,
	|	ЕСТЬNULL(Товары.Номенклатура.ТипНоменклатуры, """") = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат) КАК ЭтоПодарочныйСертификат
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ТаблицаТоварыЧека КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМарки.НомерСтроки КАК НомерСтроки,
	|	АкцизныеМарки.КлючСвязи КАК КлючСвязи,
	|	АкцизныеМарки.КодАкцизнойМарки КАК КодАкцизнойМарки
	|ПОМЕСТИТЬ ТаблицаАкцизныхМарок
	|ИЗ
	|	&АкцизныеМарки КАК АкцизныеМарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыМаркировки.КлючСвязи КАК КлючСвязи,
	|	КодыМаркировки.КодМаркировки КАК КодМаркировки,
	|	КодыМаркировки.ТипКода КАК ТипКода
	|ПОМЕСТИТЬ КодыМаркировки
	|ИЗ
	|	&КодыМаркировки КАК КодыМаркировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыМаркировки.КлючСвязи КАК КлючСвязи,
	|	МАКСИМУМ(КодыМаркировки.КодМаркировки) КАК КодМаркировки
	|ПОМЕСТИТЬ ТаблицаКодыМаркировки
	|ИЗ
	|	КодыМаркировки КАК КодыМаркировки
	|ГДЕ
	|	КодыМаркировки.ТипКода = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|	ИЛИ КодыМаркировки.ТипКода = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
	|
	|СГРУППИРОВАТЬ ПО
	|	КодыМаркировки.КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Поставщик КАК Поставщик,
	|	ТаблицаТовары.Договор КАК Договор,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТаблицаТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.КлючСвязи КАК КлючСвязи,
	|	ТаблицаТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ТаблицаТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ТаблицаТовары.Штрихкод КАК Штрихкод,
	|	ТаблицаТовары.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
	|	ВЫБОР
	|		КОГДА &ПродажаСПроверкойЕГАИС
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаТовары.Маркируемый И НЕ ТаблицаТовары.ПродаетсяВРозлив
	|							И НЕ ТаблицаАкцизныхМарок.КодАкцизнойМарки ЕСТЬ NULL
	|						ТОГДА ТаблицаАкцизныхМарок.КодАкцизнойМарки
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КодАкцизнойМарки,
	|	ВЫБОР
	|		КОГДА &ПродажаСПроверкойЕГАИС
	|			ТОГДА ТаблицаТовары.Маркируемый И НЕ ТаблицаТовары.ПродаетсяВРозлив
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Маркируемый,
	|	ВЫБОР
	|		КОГДА &ПродажаСПроверкойЕГАИС
	|			ТОГДА ТаблицаТовары.КодВидаПродукции
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КодВидаПродукции,
	|	ВЫБОР
	|		КОГДА &ПродажаСПроверкойЕГАИС
	|				И ТаблицаТовары.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТовары.ОбъемДАЛ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОбъемДАЛ,
	|	ВЫБОР
	|		КОГДА &ПродажаСПроверкойЕГАИС
	|				И ТаблицаТовары.АлкогольнаяПродукция
	|			ТОГДА ТаблицаТовары.Крепость
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Крепость,
	|	ВЫБОР
	|		КОГДА &ПродажаСПроверкойЕГАИС
	|			ТОГДА ТаблицаТовары.АлкогольнаяПродукция
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК АлкогольнаяПродукция,
	|	ВЫБОР
	|		КОГДА &ЕстьТабачнаяМаркировка
	|			ТОГДА ТаблицаТовары.ТабачнаяПродукция
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТабачнаяПродукция,
	|	ВЫБОР
	|		КОГДА &ЕстьОбувнаяМаркировка
	|			ТОГДА ТаблицаТовары.ОбувнаяПродукция
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбувнаяПродукция
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаАкцизныхМарок КАК ТаблицаАкцизныхМарок
	|		ПО ТаблицаТовары.КлючСвязи = ТаблицаАкцизныхМарок.КлючСвязи
	|ГДЕ
	|	&ПродажаСПроверкойЕГАИС
	|	И ТаблицаТовары.АлкогольнаяПродукция
	|	И ТаблицаТовары.Маркируемый
	|	И НЕ ТаблицаТовары.ПродаетсяВРозлив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Поставщик КАК Поставщик,
	|	ТаблицаТовары.Договор КАК Договор,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныхМарок.КодАкцизнойМарки) КАК КоличествоАкцизныхМарок
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаАкцизныхМарок КАК ТаблицаАкцизныхМарок
	|		ПО ТаблицаТовары.КлючСвязи = ТаблицаАкцизныхМарок.КлючСвязи
	|ГДЕ
	|	&ПродажаСПроверкойЕГАИС
	|	И ТаблицаТовары.АлкогольнаяПродукция
	|	И ТаблицаТовары.Маркируемый
	|	И НЕ ТаблицаТовары.ПродаетсяВРозлив
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Поставщик,
	|	ТаблицаТовары.Договор,
	|	ТаблицаТовары.НомерГТД,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.КоличествоУпаковок
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныхМарок.КодАкцизнойМарки) <> ТаблицаТовары.Количество И
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныхМарок.КодАкцизнойМарки) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Поставщик КАК Поставщик,
	|	ТаблицаТовары.Договор КАК Договор,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТаблицаТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	ТаблицаТовары.ЕдиницаИзмеренияПредметаРасчета КАК ЕдиницаИзмеренияПредметаРасчета,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.КлючСвязи КАК КлючСвязи,
	|	ТаблицаТовары.НаименованиеТовара КАК НаименованиеТовара,
	|	ТаблицаТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ТаблицаТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ТаблицаТовары.СуммаСкидкиОплатыБонусом КАК СуммаСкидкиОплатыБонусом,
	|	ТаблицаТовары.Штрихкод КАК Штрихкод,
	|	ТаблицаТовары.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета,
	|	ТаблицаТовары.ОбъемДАЛ КАК ОбъемДАЛ,
	|	ТаблицаТовары.Маркируемый КАК Маркируемый,
	|	ТаблицаТовары.КодВидаПродукции КАК КодВидаПродукции,
	|	ТаблицаТовары.АлкогольнаяПродукция
	|		И НЕ ТаблицаТовары.ПродаетсяВРозлив КАК АлкогольнаяПродукция,
	|	ТаблицаТовары.ТабачнаяПродукция КАК ТабачнаяПродукция,
	|	ТаблицаТовары.ОбувнаяПродукция КАК ОбувнаяПродукция,
	|	ТаблицаТовары.Крепость КАК Крепость,
	|	ТаблицаТовары.ПродаетсяВРозлив КАК ПродаетсяВРозлив,
	|	"""" КАК КодАкцизнойМарки,
	|	ТаблицаТовары.ЭтоПодарочныйСертификат КАК ЭтоПодарочныйСертификат,
	|	ЕСТЬNULL(ТаблицаКодыМаркировки.КодМаркировки, """") КАК КодМаркировки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКодыМаркировки КАК ТаблицаКодыМаркировки
	|	ПО ТаблицаТовары.КлючСвязи = ТаблицаКодыМаркировки.КлючСвязи
	|";
		
	Запрос.УстановитьПараметр("Товары", ДокументОбъект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("АкцизныеМарки", ДокументОбъект.АкцизныеМарки.Выгрузить());
	Запрос.УстановитьПараметр("КодыМаркировки", ДокументОбъект.КодыМаркировки.Выгрузить());
	Запрос.УстановитьПараметр("ПродажаСПроверкойЕГАИС", ПродажаСПроверкойЕГАИС);
	ЕстьТабачнаяМаркировка = (НЕ ДокументОбъект.ОперацияСДенежнымиСредствами) 
								И ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиТабачнойПродукции");
	Запрос.УстановитьПараметр("ЕстьТабачнаяМаркировка", ЕстьТабачнаяМаркировка);
	ЕстьОбувнаяМаркировка = (НЕ ДокументОбъект.ОперацияСДенежнымиСредствами) 
								И ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиОбувнойПродукции");
	Запрос.УстановитьПараметр("ЕстьОбувнаяМаркировка", ЕстьОбувнаяМаркировка);
	
	Результат = Запрос.ВыполнитьПакет();
	СдвигИндекса = ?(ИспользоватьКомиссионнуюТорговлю ИЛИ ИспользоватьУчетИмпортныхТоваров, 2, 0);
	
	ТаблицаТоваровЕГАИС = Результат[5 + СдвигИндекса].Выгрузить();
	ТаблицаНедостающихМарокЕГАИС = Результат[6 + СдвигИндекса].Выгрузить();
	ТаблицаТоваровЧека = Результат[7 + СдвигИндекса].Выгрузить();
	
	Если ПродажаСПроверкойЕГАИС Тогда
		ИнтеграцияЕГАИСРТ.ПроверитьДанныеЕГАИС(ТаблицаТоваровЕГАИС, ТаблицаНедостающихМарокЕГАИС, ДанныеЕГАИСДостаточны, ДокументОбъект, ОсобыйВыводСообщения, ТекстПолногоСообщения);
	Иначе
		ДанныеЕГАИСДостаточны = Истина;
	КонецЕсли;
	
	Если ЕстьТабачнаяМаркировка Или ЕстьОбувнаяМаркировка Тогда
		ТекстПолногоСообщения = "" ;
		Отступ = Символы.ПС + " ";
		Если ПустаяСтрока(ТекстПолногоСообщения) Тогда
			ДополнительныйСимвол = "";
		Иначе
			ДополнительныйСимвол = Символы.ПС;
		КонецЕсли;
	
		Для Каждого СтрокаТовара Из ТаблицаТоваровЧека Цикл
			Если СтрокаТовара.ТабачнаяПродукция Или СтрокаТовара.ОбувнаяПродукция Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаТовара.КодМаркировки) Тогда
					ТекстТекущейОшибки = НСтр("ru = 'В строке %1 не заполнен код маркировки'");
					ДанныеЕГАИСДостаточны = Ложь;
					ТекстТекущейОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстТекущейОшибки, СтрокаТовара.НомерСтроки);
					Если НЕ ОсобыйВыводСообщения Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстТекущейОшибки,
							ДокументОбъект,
							"Товары[" + (СтрокаТовара.НомерСтроки - 1) + "]." + "СтатусУказанияАкцизныхМарок",
							"Объект");
					КонецЕсли;
					
					ТекстПолногоСообщения = ТекстПолногоСообщения + ДополнительныйСимвол + ТекстТекущейОшибки;
					ДополнительныйСимвол = Символы.ПС;
				КонецЕсли;
				
				Если СтрокаТовара.КоличествоУпаковок <> 1 И СтрокаТовара.КоличествоУпаковок <> 0 Тогда
					ТекстТекущейОшибки = НСтр("ru = 'В строке %1 указано некорректное количество упаковок. Допустимое количество 1'");
					ДанныеЕГАИСДостаточны = Ложь;
					ТекстТекущейОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстТекущейОшибки, СтрокаТовара.НомерСтроки);
					Если НЕ ОсобыйВыводСообщения Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстТекущейОшибки,
							ДокументОбъект,
							"Товары[" + (СтрокаТовара.НомерСтроки - 1) + "]." + "КоличествоУпаковок",
							"Объект");
					КонецЕсли;
					
					ТекстПолногоСообщения = ТекстПолногоСообщения + ДополнительныйСимвол + ТекстТекущейОшибки;
					ДополнительныйСимвол = Символы.ПС;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ТаблицаТоваровЧека", ТаблицаТоваровЧека);
	СтруктураТаблиц.Вставить("ТаблицаТоваровЕГАИС", ТаблицаТоваровЕГАИС);
	
	Возврат СтруктураТаблиц;
	
КонецФункции

//
Функция ПодготовкаДанныхДляВскрытияТары(ДокументОбъект, ДанныеЕГАИСДостаточны, ОсобыйВыводСообщения = Ложь, ТекстПолногоСообщения = "") Экспорт
	
	ДанныеЕГАИСДостаточны = Ложь;
	ТекстПолногоСообщения = НСтр("ru = 'Документ оставлен для обратной совместимости. Передача в ЕГАИС невозможна'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПолногоСообщения);
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ТаблицаТоваровЕГАИС", Неопределено);
	
	Возврат СтруктураТаблиц;
	
КонецФункции

#КонецОбласти

#Область РасчетыСКлиентами

// Функция возвращает сумму остатка оплаты по заказу покупателя
//
//  ЗаказПокупателя - ДокументСсылка.ЗаказПокупателя
// Возвращаяемое значение:
//  Число - Оставшаяся сумма долга клиента
Функция НеОплаченнаяСуммаПоЗаказуПокупателя(ЗаказПокупателя) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыСКлиентамиОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	|			,
	|			ЗаказПокупателя = &ЗаказПокупателя
	|				И Магазин = &Магазин
	|				И Контрагент = &Контрагент
	|				И Организация = &Организация) КАК РасчетыСКлиентамиОстатки
	|ГДЕ
	|	РасчетыСКлиентамиОстатки.СуммаОстаток > 0";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	Запрос.УстановитьПараметр("Магазин"        , ЗаказПокупателя.Магазин);
	Запрос.УстановитьПараметр("Контрагент"     , ЗаказПокупателя.Контрагент);
	Запрос.УстановитьПараметр("Организация"    , ЗаказПокупателя.Организация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сумма;
	Иначе
		Возврат ЗаказПокупателя.СуммаДокумента;
	КонецЕсли;

КонецФункции // НеОплаченнаяСуммаПоЗаказуПокупателя()

// Функция возвращает сумму остатка оплаты по Документу расчета и Хозяйственную операцию
//
//  ДокументРасчета - ДокументСсылка.РеализацияТоваров, ДокументСсылка.ВозвратТоваровОтПокупателя
// Возвращаяемое значение:
//  Структура
Функция ДанныеПоДокументуРасчета(ДокументРасчета) Экспорт
	
	ВозвращаемаяСтруктура = Новый Структура;
	
	Если ТипЗнч(ДокументРасчета) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		ЭтоПриемДС = Истина;
		ВозвращаемаяСтруктура.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	Иначе
		ЭтоПриемДС = Ложь;
		ВозвращаемаяСтруктура.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ЭтоПриемДС
	|			ТОГДА -РасчетыСКлиентамиОстатки.СуммаОстаток
	|		ИНАЧЕ РасчетыСКлиентамиОстатки.СуммаОстаток
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	|			,
	|			ДокументРасчета = &ДокументРасчета
	|				И Магазин = &Магазин
	|				И Контрагент = &Контрагент
	|				И Организация = &Организация) КАК РасчетыСКлиентамиОстатки
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ЭтоПриемДС
	|				ТОГДА РасчетыСКлиентамиОстатки.СуммаОстаток < 0
	|			ИНАЧЕ РасчетыСКлиентамиОстатки.СуммаОстаток > 0
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ДокументРасчета", ДокументРасчета);
	Запрос.УстановитьПараметр("Магазин"        , ДокументРасчета.Магазин);
	Запрос.УстановитьПараметр("Контрагент"     , ДокументРасчета.Контрагент);
	Запрос.УстановитьПараметр("Организация"    , ДокументРасчета.Организация);
	Запрос.УстановитьПараметр("ЭтоПриемДС"     , ЭтоПриемДС);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВозвращаемаяСтруктура.Вставить("Сумма", Выборка.Сумма);
		Возврат ВозвращаемаяСтруктура;
	Иначе
		ВозвращаемаяСтруктура.Вставить("Сумма", 0);
		Возврат ВозвращаемаяСтруктура;
	КонецЕсли;

КонецФункции // НеОплаченнаяСуммаПоЗаказуПокупателя()

// Функция заполняет контрагента по дисконтной карте
//
// Параметры:
// Объект - Документ.ЧекККМОбъект, Обработка.РМКУправляемыйРежимОбъект
// ДисконтнаяКарта - Справочник.ИнформационныеКартыСсылка
// 
Процедура ЗаполнитьКонтрагентаПоДисконтнойКарте(Объект, ДисконтнаяКарта) Экспорт
	
	Если ЗначениеЗаполнено(ДисконтнаяКарта)  Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ЗаказПокупателя)
			И НЕ ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
			Контрагент = ДисконтнаяКарта.ВладелецКарты;
			Если ЗначениеЗаполнено(Контрагент)
				И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Объект.Контрагент = Контрагент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область Прочие

// Проверяет правильность заполнения строк табличной части "Оплата".
//
// Параметры:
//  ДокументОбъект - Документ
//  Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплата(
	ДокументОбъект,
	Отказ
	) Экспорт

	Перем  СуммаНаличнойОплаты, СуммаБезналичнойОплаты;
	
	ПолучитьСуммыПоВидуОплат(ДокументОбъект, СуммаНаличнойОплаты, СуммаБезналичнойОплаты);

	СуммаВсего = ?(ДокументОбъект.ЦенаВключаетНДС, ДокументОбъект.Товары.Итог("Сумма"), ДокументОбъект.Товары.Итог("Сумма") + ДокументОбъект.Товары.Итог("СуммаНДС"));
	ОплаченоВсего = ДокументОбъект.Оплата.Итог("Сумма");
	
	ОперацияСДенежнымиСредствами = ДокументОбъект.ОперацияСДенежнымиСредствами;
	
	Если ОплаченоВсего < СуммаВсего
		И (НЕ ОперацияСДенежнымиСредствами
		ИЛИ ДокументОбъект.Товары.Количество() <> 0) Тогда
		// Проверка идет для случаев, кроме аванса (вносимая сумма без указания товаров)
		Текст = НСтр("ru = 'Сумма всех типов оплат меньше суммы документа!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"Оплата" ,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ОплаченоВсего = 0 Тогда
		Текст = НСтр("ru = 'Не задана оплата!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"Оплата" ,
			,
			Отказ
		);
		
	КонецЕсли;
	
	ЭтоАванс = ДокументОбъект.ОперацияСДенежнымиСредствами И ДокументОбъект.Товары.Количество() = 0;
	
	Если НЕ ЭтоАванс Тогда
		Если СуммаБезналичнойОплаты > СуммаВсего Тогда
		
			Текст = НСтр("ru = 'Сумма безналичной оплаты не может быть больше суммы документа!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"Оплата" ,
				,
				Отказ
			);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументОбъект.ОперацияСДенежнымиСредствами Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Оплата.ВидОплаты КАК Справочник.ВидыОплатЧекаККМ) КАК ВидОплаты
		|ПОМЕСТИТЬ ТаблицаОплат
		|ИЗ
		|	&Оплата КАК Оплата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаОплат.ВидОплаты.ТипОплаты
		|ИЗ
		|	ТаблицаОплат КАК ТаблицаОплат
		|ГДЕ
		|	НЕ ТаблицаОплат.ВидОплаты.ТипОплаты В (&ТипыОплаты)";
		
		Запрос.УстановитьПараметр("Оплата", ДокументОбъект.Оплата.Выгрузить());
		МассивТиповОплат = Новый Массив;
		МассивТиповОплат.Добавить(Перечисления.ТипыОплатЧекаККМ.Наличные);
		МассивТиповОплат.Добавить(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта);
		МассивТиповОплат.Добавить(Перечисления.ТипыОплатЧекаККМ.ВРассрочку);
		МассивТиповОплат.Добавить(Перечисления.ТипыОплатЧекаККМ.ЗачетАванса);
		
		Запрос.УстановитьПараметр("ТипыОплаты", МассивТиповОплат);
		
		ЕстьЛишнииВидыРасчетов = НЕ Запрос.Выполнить().Пустой();
		
		Если ЕстьЛишнииВидыРасчетов Тогда
			Текст = НСтр("ru = 'В документе может быть только наличная оплата или оплата платежной картой!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"Оплата" ,
				,
				Отказ
			);
		КонецЕсли; 
		
	КонецЕсли;
	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОплата()

// Проверяет, что в табличной части нет услуг.
//
// Параметры:
//  ДокументОбъект - объект проводимого документа документа.
//  ИмяТабличнойЧасти - Имя табличной части Товары.
//  Отказ - Переменная отвечающая за прерывание проведения.
//
Процедура ПроверитьЗаполнениеСклада(
	ДокументОбъект, 
	ИмяТабличнойЧасти, 
	Отказ
	) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.Склад КАК Склад,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТабТоварыВСЕ
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабТовары.Номенклатура.Наименование КАК Наименование,
	|	ТабТовары.Склад КАК Склад,
	|	ТабТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТабТоварыВСЕ КАК ТабТовары
	|ГДЕ
	|	ТабТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И ТабТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Товары", ДокументОбъект[ИмяТабличнойЧасти].Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В строке №%1 табличной части ""%2"" не заполнен склад'"),
			Выборка.НомерСтроки,
			ИмяТабличнойЧасти
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			ИмяТабличнойЧасти+"[" + (Выборка.НомерСтроки - 1) + "].Склад" ,
			,
			Отказ
		);
	КонецЦикла;
	

КонецПроцедуры // ПроверитьЧтоНетПодарочныхСертификатов()

// Получает развернутые строки расхождения по товарам при возврате.
//
// Параметры:
//  ДокументОбъект - Документ
//  РазрезАналитики - или склад, или продавец.
//
Функция ПолучитьСтрокиРасхожденияПоТоварамСЧекомПродажи(ДокументОбъект , РазрезАналитики = "Склад") Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Характеристика,
	|	ЧекККМТовары.Количество,
	|	ЧекККМТовары.Склад,
	|	ЧекККМТовары.ЗаказПокупателя,
	|	ЧекККМТовары.КодСтроки
	|ПОМЕСТИТЬ ТаблицаОбъекта
	|ИЗ
	|	&Товары КАК ЧекККМТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОбъекта.Номенклатура,
	|	ТаблицаОбъекта.Характеристика,
	|	ТаблицаОбъекта.Склад,
	|	ТаблицаОбъекта.ЗаказПокупателя,
	|	ТаблицаОбъекта.КодСтроки,
	|	ТаблицаОбъекта.Количество КАК КоличествоВозвратаТекущего,
	|	0 КАК КоличествоВозвратаПрошлого,
	|	0 КАК КоличествоПродажи
	|ПОМЕСТИТЬ ТаблицаОбщиеДанные
	|ИЗ
	|	ТаблицаОбъекта КАК ТаблицаОбъекта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Характеристика,
	|	ЧекККМТовары.Склад,
	|	ЧекККМТовары.ЗаказПокупателя,
	|	ЧекККМТовары.КодСтроки,
	|	0,
	|	ЧекККМТовары.Количество,
	|	0
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Ссылка.ЧекККМПродажа = &ЧекККМПродажа
	|	И ЧекККМТовары.Ссылка <> &Ссылка
	|	И ЧекККМТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Характеристика,
	|	ЧекККМТовары.Склад,
	|	ЧекККМТовары.ЗаказПокупателя,
	|	ЧекККМТовары.КодСтроки,
	|	0,
	|	0,
	|	ЧекККМТовары.Количество
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Ссылка = &ЧекККМПродажа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбщиеДанные.Номенклатура,
	|	ТаблицаОбщиеДанные.Характеристика,
	|	ТаблицаОбщиеДанные.Склад,
	|	ТаблицаОбщиеДанные.ЗаказПокупателя,
	|	ТаблицаОбщиеДанные.КодСтроки,
	|	СУММА(ТаблицаОбщиеДанные.КоличествоПродажи) КАК КоличествоПродажи,
	|	СУММА(ТаблицаОбщиеДанные.КоличествоВозвратаТекущего) КАК КоличествоВозвратаТекущего,
	|	СУММА(ТаблицаОбщиеДанные.КоличествоВозвратаПрошлого) КАК КоличествоВозвратаПрошлого
	|ПОМЕСТИТЬ ТаблицаСгруппированная
	|ИЗ
	|	ТаблицаОбщиеДанные КАК ТаблицаОбщиеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбщиеДанные.Склад,
	|	ТаблицаОбщиеДанные.Номенклатура,
	|	ТаблицаОбщиеДанные.Характеристика,
	|	ТаблицаОбщиеДанные.ЗаказПокупателя,
	|	ТаблицаОбщиеДанные.КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Характеристика) КАК Характеристика,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Склад) КАК Склад,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.ЗаказПокупателя) КАК ЗаказПокупателя,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.КодСтроки) КАК КодСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаСгруппированная.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПродажаПоЗаказу,
	|	ТаблицаСгруппированная.КоличествоПродажи,
	|	ТаблицаСгруппированная.КоличествоВозвратаТекущего,
	|	ТаблицаСгруппированная.КоличествоВозвратаПрошлого
	|ИЗ
	|	ТаблицаСгруппированная КАК ТаблицаСгруппированная
	|ГДЕ
	|	ТаблицаСгруппированная.КоличествоВозвратаТекущего > 0
	|	И ТаблицаСгруппированная.КоличествоВозвратаТекущего + ТаблицаСгруппированная.КоличествоВозвратаПрошлого > ТаблицаСгруппированная.КоличествоПродажи";
	
	Запрос.УстановитьПараметр("ЧекККМПродажа", ДокументОбъект.ЧекККМПродажа);
	Запрос.УстановитьПараметр("Ссылка"       , ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Товары"       , ДокументОбъект.Товары.Выгрузить());
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Склад", РазрезАналитики);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	

КонецФункции // ПолучитьСтрокиРасхожденияПоТоварамСЧекомПродажи()

// Получает строки расхождения по акцизным маркам при возврате.
//
// Параметры:
//  ДокументОбъект - Документ
//
Функция ПолучитьСтрокиРасхожденияПоАкцизнымМаркамСЧекомПродажи(ДокументОбъект) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМАкцизныеМарки.КодАкцизнойМарки КАК КодАкцизнойМарки,
	|	ЧекККМАкцизныеМарки.КлючСвязи КАК КлючСвязи
	|ПОМЕСТИТЬ ТаблицаОбъекта
	|ИЗ
	|	&АкцизныеМарки КАК ЧекККМАкцизныеМарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоварыОбъекта.Номенклатура,
	|	ТаблицаТоварыОбъекта.Характеристика,
	|	ТаблицаТоварыОбъекта.Склад,
	|	ТаблицаТоварыОбъекта.КлючСвязи
	|ПОМЕСТИТЬ ТаблицаТоварыОбъекта
	|ИЗ
	|	&Товары КАК ТаблицаТоварыОбъекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОбъекта.КодАкцизнойМарки,
	|	ТаблицаОбъекта.КлючСвязи,
	|	1 КАК КоличествоВозвратаТекущего,
	|	0 КАК КоличествоВозвратаПрошлого,
	|	0 КАК КоличествоПродажи
	|ПОМЕСТИТЬ ТаблицаОбщиеДанные
	|ИЗ
	|	ТаблицаОбъекта КАК ТаблицаОбъекта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМАкцизныеМарки.КодАкцизнойМарки,
	|	0,
	|	0,
	|	1,
	|	0
	|ИЗ
	|	Документ.ЧекККМ.АкцизныеМарки КАК ЧекККМАкцизныеМарки
	|ГДЕ
	|	ЧекККМАкцизныеМарки.Ссылка.ЧекККМПродажа = &ЧекККМПродажа
	|	И ЧекККМАкцизныеМарки.Ссылка <> &Ссылка
	|	И ЧекККМАкцизныеМарки.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМАкцизныеМарки.КодАкцизнойМарки,
	|	0,
	|	0,
	|	0,
	|	1
	|ИЗ
	|	Документ.ЧекККМ.АкцизныеМарки КАК ЧекККМАкцизныеМарки
	|ГДЕ
	|	ЧекККМАкцизныеМарки.Ссылка = &ЧекККМПродажа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбщиеДанные.КодАкцизнойМарки,
	|	МАКСИМУМ(ТаблицаОбщиеДанные.КлючСвязи) КАК КлючСвязи,
	|	СУММА(ТаблицаОбщиеДанные.КоличествоПродажи) КАК КоличествоПродажи,
	|	СУММА(ТаблицаОбщиеДанные.КоличествоВозвратаТекущего) КАК КоличествоВозвратаТекущего,
	|	СУММА(ТаблицаОбщиеДанные.КоличествоВозвратаПрошлого) КАК КоличествоВозвратаПрошлого
	|ПОМЕСТИТЬ ТаблицаСгруппированная
	|ИЗ
	|	ТаблицаОбщиеДанные КАК ТаблицаОбщиеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбщиеДанные.КодАкцизнойМарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоварыОбъекта.Номенклатура КАК Номенклатура,
	|	ТаблицаТоварыОбъекта.Характеристика КАК Характеристика,
	|	ТаблицаТоварыОбъекта.Склад КАК Склад,
	|	ТаблицаСгруппированная.КодАкцизнойМарки КАК КодАкцизнойМарки,
	|	ТаблицаСгруппированная.КоличествоПродажи,
	|	ТаблицаСгруппированная.КоличествоВозвратаТекущего,
	|	ТаблицаСгруппированная.КоличествоВозвратаПрошлого
	|ИЗ
	|	ТаблицаСгруппированная КАК ТаблицаСгруппированная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоварыОбъекта КАК ТаблицаТоварыОбъекта
	|		ПО ТаблицаСгруппированная.КлючСвязи = ТаблицаТоварыОбъекта.КлючСвязи
	|ГДЕ
	|	ТаблицаСгруппированная.КоличествоВозвратаТекущего > 0
	|	И ТаблицаСгруппированная.КоличествоВозвратаТекущего + ТаблицаСгруппированная.КоличествоВозвратаПрошлого > ТаблицаСгруппированная.КоличествоПродажи";
	
	Запрос.УстановитьПараметр("ЧекККМПродажа", ДокументОбъект.ЧекККМПродажа);
	Запрос.УстановитьПараметр("Ссылка"       , ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("АкцизныеМарки", ДокументОбъект.АкцизныеМарки.Выгрузить());
	Запрос.УстановитьПараметр("Товары"       , ДокументОбъект.Товары.Выгрузить());
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	

КонецФункции // ПолучитьСтрокиРасхожденияПоАкцизнымМаркамСЧекомПродажи()

// Получает развернутые строки расхождения по оплате при возврате.
//
// Параметры:
//  ДокументОбъект - Документ
//
Функция ПолучитьСтрокиРасхожденияПоБезналичнойОплатеСЧекомПродажи(ДокументОбъект, ДополнительнаяПроверкаБезналичнойОплаты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ЧекККМОплата.ВидОплаты КАК Справочник.ВидыОплатЧекаККМ) КАК ВидОплаты,
	|	ЧекККМОплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ ТабОплатаВсе
	|ИЗ
	|	&Оплата КАК ЧекККМОплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабОплатаВсе.ВидОплаты КАК ВидОплаты
	|ПОМЕСТИТЬ ТаблицаБезналичныхОплатВЧеке
	|ИЗ
	|	ТабОплатаВсе КАК ТабОплатаВсе
	|ГДЕ
	|	НЕ ТабОплатаВсе.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|	И НЕ ТабОплатаВсе.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом)
	|	И НЕ ТабОплатаВсе.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.БанковскийКредит)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМОплата.ВидОплаты КАК ВидОплаты,
	|	ЧекККМОплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ ТаблицаБезналичныхОплатВДругихЧеках
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка.ЧекККМПродажа = &ЧекККМПродажа
	|	И НЕ ЧекККМОплата.Ссылка = &Ссылка
	|	И ЧекККМОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|	И ЧекККМОплата.Ссылка.Проведен
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|	И НЕ ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом)
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.БанковскийКредит)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМОплата.ВидОплаты КАК ВидОплаты,
	|	ЧекККМОплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ ТаблицаБезналичныхОплатПродажи
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &ЧекККМПродажа
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|	И НЕ ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом)
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.БанковскийКредит)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабОплатаВсе.ВидОплаты КАК ВидОплаты,
	|	ТабОплатаВсе.Сумма КАК СуммаВозврата,
	|	0 КАК СуммаПродажи
	|ПОМЕСТИТЬ ТаблицаОбщая
	|ИЗ
	|	ТабОплатаВсе КАК ТабОплатаВсе
	|ГДЕ
	|	НЕ ТабОплатаВсе.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|	И НЕ ТабОплатаВсе.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом)
	|	И НЕ ТабОплатаВсе.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.БанковскийКредит)
	|	И ТабОплатаВсе.ВидОплаты В
	|			(ВЫБРАТЬ
	|				ТаблицаБезналичныхОплатВЧеке.ВидОплаты КАК ВидОплаты
	|			ИЗ
	|				ТаблицаБезналичныхОплатВЧеке КАК ТаблицаБезналичныхОплатВЧеке)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМОплата.ВидОплаты,
	|	0,
	|	ЧекККМОплата.Сумма
	|ИЗ
	|	ТаблицаБезналичныхОплатПродажи КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.ВидОплаты В
	|			(ВЫБРАТЬ
	|				ТаблицаБезналичныхОплатВЧеке.ВидОплаты КАК ВидОплаты
	|			ИЗ
	|				ТаблицаБезналичныхОплатВЧеке КАК ТаблицаБезналичныхОплатВЧеке)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМОплата.ВидОплаты,
	|	ЧекККМОплата.Сумма,
	|	0
	|ИЗ
	|	ТаблицаБезналичныхОплатВДругихЧеках КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.ВидОплаты В
	|			(ВЫБРАТЬ
	|				ТаблицаБезналичныхОплатВЧеке.ВидОплаты КАК ВидОплаты
	|			ИЗ
	|				ТаблицаБезналичныхОплатВЧеке КАК ТаблицаБезналичныхОплатВЧеке)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбщая.ВидОплаты КАК ВидОплаты,
	|	СУММА(ТаблицаОбщая.СуммаВозврата) КАК СуммаВозврата,
	|	СУММА(ТаблицаОбщая.СуммаПродажи) КАК СуммаПродажи
	|ПОМЕСТИТЬ ТаблицаСгруппированная
	|ИЗ
	|	ТаблицаОбщая КАК ТаблицаОбщая
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбщая.ВидОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСгруппированная.ВидОплаты КАК ВидОплаты,
	|	ТаблицаСгруппированная.СуммаВозврата КАК СуммаВозврата,
	|	ТаблицаСгруппированная.СуммаПродажи КАК СуммаПродажи,
	|	ТаблицаСгруппированная.ВидОплаты.ТипОплаты КАК ТипОплаты
	|ИЗ
	|	ТаблицаСгруппированная КАК ТаблицаСгруппированная
	|ГДЕ
	|	НЕ ТаблицаСгруппированная.СуммаВозврата = ТаблицаСгруппированная.СуммаПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаБезналичныхОплатВЧеке.ВидОплаты КАК ВидОплаты
	|ИЗ
	|	ТаблицаБезналичныхОплатВЧеке КАК ТаблицаБезналичныхОплатВЧеке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаБезналичныхОплатПродажи.ВидОплаты КАК ВидОплаты
	|ИЗ
	|	ТаблицаБезналичныхОплатПродажи КАК ТаблицаБезналичныхОплатПродажи";
	 
	Запрос.УстановитьПараметр("ЧекККМПродажа", ДокументОбъект.ЧекККМПродажа);
	Запрос.УстановитьПараметр("Ссылка"       , ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Оплата"       , ДокументОбъект.Оплата.Выгрузить());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ДополнительнаяПроверкаБезналичнойОплаты = Результат[7].Пустой() И НЕ Результат[8].Пустой();
	
	Возврат Результат[6].Выгрузить();
	
КонецФункции // ПолучитьСтрокиРасхожденияПоБезналичнойОплатеСЧекомПродажи()

// Проверяется возможность последующих возвратов безналичными
//
// Комментарии. Предполагается что до этого была проверка на условия
//    1. В текущем возвращаемом чеке нет безналичных оплат
//    2. В чеке продажи есть безналичные оплаты
Функция ПроверитьВозможностьИзОстаткаВернутьБезналичнымиВидамиОплат(ДокументОбъект)
	
	ЧекККМПродажа          = ДокументОбъект.ЧекККМПродажа;
	СуммаДокументаПродажи  = ЧекККМПродажа.СуммаДокумента;
	СуммаДокументаВозврата = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЧекККМ.СуммаДокумента) КАК СуммаДокумента
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.ЧекККМПродажа = &ЧекККМПродажа
	|	И НЕ ЧекККМ.Ссылка = &Ссылка
	|	И ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|	И ЧекККМ.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЧекККМОплата.Сумма) КАК Сумма,
	|	ЧекККМОплата.ВидОплаты
	|ПОМЕСТИТЬ ТаблицаБезналичныхОплатВозвратов
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка.ЧекККМПродажа = &ЧекККМПродажа
	|	И НЕ ЧекККМОплата.Ссылка = &Ссылка
	|	И ЧекККМОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|	И ЧекККМОплата.Ссылка.Проведен
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ЗачетАванса)
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ВРассрочку)
	|	И НЕ ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМОплата.ВидОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЧекККМОплата.Сумма) КАК Сумма
	|ИЗ
	|	ТаблицаБезналичныхОплатВозвратов КАК ЧекККМОплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЧекККМОплата.Сумма) КАК Сумма,
	|	ЧекККМОплата.ВидОплаты
	|ПОМЕСТИТЬ ТаблицаБезналичныхОплатПродаж
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &ЧекККМПродажа
	|	И ЧекККМОплата.Ссылка.Проведен
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ЗачетАванса)
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ВРассрочку)
	|	И НЕ ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМОплата.ВидОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЧекККМОплата.Сумма) КАК Сумма
	|ИЗ
	|	ТаблицаБезналичныхОплатПродаж КАК ЧекККМОплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ВидОплаты,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		-ТаблицаБезналичныхОплатВозвратов.Сумма КАК Сумма,
	|		ТаблицаБезналичныхОплатВозвратов.ВидОплаты КАК ВидОплаты
	|	ИЗ
	|		ТаблицаБезналичныхОплатВозвратов КАК ТаблицаБезналичныхОплатВозвратов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаБезналичныхОплатПродаж.Сумма,
	|		ТаблицаБезналичныхОплатПродаж.ВидОплаты
	|	ИЗ
	|		ТаблицаБезналичныхОплатПродаж КАК ТаблицаБезналичныхОплатПродаж) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ВидОплаты
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(ВложенныйЗапрос.Сумма) = 0";
	
	Запрос.УстановитьПараметр("ЧекККМПродажа", ЧекККМПродажа);
	Запрос.УстановитьПараметр("Ссылка"       , ДокументОбъект.Ссылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	
	СуммаПредыдущихВозвратов = 0;
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.СуммаДокумента) Тогда
			СуммаПредыдущихВозвратов = Выборка.СуммаДокумента;
		КонецЕсли;
	КонецЕсли;
	
	СуммаОстаткаВозможногоВозврата = СуммаДокументаПродажи - СуммаДокументаВозврата - СуммаПредыдущихВозвратов;
	
	Выборка = Результат[2].Выбрать();
	
	СуммаВозвращенныхБезналичныхОплат = 0;
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Сумма) Тогда
			СуммаВозвращенныхБезналичныхОплат = Выборка.Сумма;
		КонецЕсли;
	КонецЕсли;
	
	Выборка = Результат[4].Выбрать();
	
	СуммаБезналичныхОплат = 0;
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Сумма) Тогда
			СуммаБезналичныхОплат = Выборка.Сумма;
		КонецЕсли;
	КонецЕсли;
	
	СуммаВозможныхБезналичныхОплат = СуммаБезналичныхОплат - СуммаВозвращенныхБезналичныхОплат;
	
	ТаблицаВозможныхБезналичныхОплат = Результат[5].Выгрузить();
	Если СуммаВозможныхБезналичныхОплат <= СуммаОстаткаВозможногоВозврата Тогда
		ТаблицаВозможныхБезналичныхОплат.Очистить()
	КонецЕсли;
	
	Возврат ТаблицаВозможныхБезналичныхОплат;
	
КонецФункции

// Проверяет возможность возврата по чеку ККМ.
//
// Параметры:
//  ДокументОбъект - Документ
//  Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьВозможностьВозвратаПоЧекуККМ(
	ДокументОбъект,
	Отказ,
	ТекстОшибки = "",
	ОсобыйВыводСообщения = Ложь,
	ОтдельноПроверитьВозможностьОплатыТолькоНаличными = Ложь,
	ОтдельноПроверитьВозможностьОплатыБанковскойКартой = Ложь,
	ПроверитьАкцизныеМарки = Ложь
	) Экспорт


	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ЧекККМПродажа) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРасхождений = ПолучитьСтрокиРасхожденияПоТоварамСЧекомПродажи(ДокументОбъект, "Склад");
	
	Для Каждого СтрокаРасхождения Из ТаблицаРасхождений Цикл
		Если СтрокаРасхождения.ПродажаПоЗаказу Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1%2 попытка вернуть на склад ""%3"": %4 %5, продано по чеку (По заказу: %7 строка %8): %6 %5, возвращено ранее %9 %5'"),
				СтрокаРасхождения.Номенклатура,
				СтрокаРасхождения.Характеристика,
				СтрокаРасхождения.Склад,
				Строка(СтрокаРасхождения.КоличествоВозвратаТекущего),
				СтрокаРасхождения.ЕдиницаИзмерения,
				Строка(СтрокаРасхождения.КоличествоПродажи),
				СтрокаРасхождения.ЗаказПокупателя,
				СтрокаРасхождения.КодСтроки,
				Строка(СтрокаРасхождения.КоличествоВозвратаПрошлого) // %9
			);
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1%2 попытка вернуть на склад ""%3"": %4 %5, продано по чеку: %6 %5, возвращено ранее %7 %5'"),
				СтрокаРасхождения.Номенклатура,
				СтрокаРасхождения.Характеристика,
				СтрокаРасхождения.Склад,
				Строка(СтрокаРасхождения.КоличествоВозвратаТекущего),
				СтрокаРасхождения.ЕдиницаИзмерения,
				Строка(СтрокаРасхождения.КоличествоПродажи),
				Строка(СтрокаРасхождения.КоличествоВозвратаПрошлого) // %7
			);
		КонецЕсли;
		
		Если НЕ ОсобыйВыводСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"Товары",
			,
			Отказ
			);
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
		ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
	КонецЦикла;

	Если ВозможностьРасхожденияТоваровПоПродавцу(ДокументОбъект) Тогда
		ТаблицаРасхождений = ПолучитьСтрокиРасхожденияПоТоварамСЧекомПродажи(ДокументОбъект, "Продавец");
		
		Для Каждого СтрокаРасхождения Из ТаблицаРасхождений Цикл
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1%2 попытка оформить возврат на продавца ""%3"": %4 %5, продано по чеку: %6 %5, возвращено ранее %7 %5'"),
				СтрокаРасхождения.Номенклатура,
				СтрокаРасхождения.Характеристика,
				СтрокаРасхождения.Продавец,
				Строка(СтрокаРасхождения.КоличествоВозвратаТекущего),
				СтрокаРасхождения.ЕдиницаИзмерения,
				Строка(СтрокаРасхождения.КоличествоПродажи),
				Строка(СтрокаРасхождения.КоличествоВозвратаПрошлого) // %7
			);
			
			Если Не ОсобыйВыводСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"Товары",
				,
				Отказ
				);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
			ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Отказ И ОтдельноПроверитьВозможностьОплатыТолькоНаличными Тогда
		
		ВозможнаяСуммаОплаты = ВозможнаяСуммаОплатыНаличнымиЧекаВозврата(ДокументОбъект);
		ПолнаяСуммаОплаты    = ДокументОбъект.Товары.Итог("СуммаВсего");
		
		Если ПолнаяСуммаОплаты > ВозможнаяСуммаОплаты ИЛИ ВозможнаяСуммаОплаты = 0 Тогда
			
			Если ВозможнаяСуммаОплаты <= 0 Тогда
				Текст = НСтр("ru = 'По чеку нет возможности вернуть наличными'");
			Иначе
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По чеку продажи наличными можно вернуть только %1'"),
					ФормированиеПечатныхФормСервер.ФорматСумм(ВозможнаяСуммаОплаты)
				);
			КонецЕсли;
			
			Текст = Текст + Символы.ПС + НСтр("ru = 'Используйте форму сложной оплаты'"); 
			
			Если НЕ ОсобыйВыводСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"Оплата",
				,
				Отказ
				);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
			ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ И ОтдельноПроверитьВозможностьОплатыБанковскойКартой Тогда
		
		НеобходимаяСуммаВозврата = НеобходимаяСуммаВозвратаПриОплатеБанковскойКартой(ДокументОбъект);
		ПолнаяСуммаОплаты        = ДокументОбъект.Товары.Итог("СуммаВсего");
		
		ЭтоВозвратАванса = ПолнаяСуммаОплаты = 0 И ДокументОбъект.ОперацияСДенежнымиСредствами;
		
		Если НЕ ЭтоВозвратАванса И ПолнаяСуммаОплаты < НеобходимаяСуммаВозврата  Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По чеку сумма возврата не может быть меньше %1 (оплачено банковской картой)'"),
				ФормированиеПечатныхФормСервер.ФорматСумм(НеобходимаяСуммаВозврата)
			);
			
			Если НЕ ОсобыйВыводСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"Оплата",
				,
				Отказ
				);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
			ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
			
		КонецЕсли;
		
		Если НеобходимаяСуммаВозврата = 0 Тогда
			
			Текст = НСтр("ru = 'По чеку нет возможности вернуть денежные средства на платёжную карту'");
			
			Если НЕ ОсобыйВыводСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"Оплата",
				,
				Отказ
				);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
			ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ И ПроверитьАкцизныеМарки Тогда
		
		ТаблицаРасхождений = ПолучитьСтрокиРасхожденияПоАкцизнымМаркамСЧекомПродажи(ДокументОбъект);
		
		Для Каждого СтрокаРасхождения Из ТаблицаРасхождений Цикл
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1%2 попытка вернуть на склад ""%3"": Акцизная марка %4, продана по чеку: %5, возвращено ранее %6'"),
					СтрокаРасхождения.Номенклатура,
					СтрокаРасхождения.Характеристика,
					СтрокаРасхождения.Склад,
					СтрокаРасхождения.КодАкцизнойМарки,
					Строка(СтрокаРасхождения.КоличествоПродажи),
					Строка(СтрокаРасхождения.КоличествоВозвратаПрошлого));
			
			Если НЕ ОсобыйВыводСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"Товары",
				,
				Отказ
				);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
			ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // ПроверитьВозможностьВозвратаПоЧекуККМ()

// Проверяет возможность возврата по чеку ККМ.
//
// Параметры:
//  ДокументОбъект - Документ
//  Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьВозможностьПровестиОплатуПоВозвратуЧекККМ(
	ДокументОбъект,
	Отказ,
	ТекстОшибки = "",
	ОсобыйВыводСообщения = Ложь
	) Экспорт


	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ЧекККМПродажа) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительнаяПроверкаБезналичнойОплаты = Ложь;
	ТаблицаРасхождений = ПолучитьСтрокиРасхожденияПоБезналичнойОплатеСЧекомПродажи(ДокументОбъект, ДополнительнаяПроверкаБезналичнойОплаты);
	
	Для Каждого СтрокаРасхождения Из ТаблицаРасхождений Цикл
		Если ДокументОбъект.ОперацияСДенежнымиСредствами Тогда
			Если СтрокаРасхождения.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ВРассрочку 
				ИЛИ СтрокаРасхождения.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ЗачетАванса Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 попытка вернуть: %2, оплачено по чеку: %3'"),
			СтрокаРасхождения.ВидОплаты,
			ФормированиеПечатныхФормСервер.ФорматСумм(СтрокаРасхождения.СуммаВозврата),
			ФормированиеПечатныхФормСервер.ФорматСумм(СтрокаРасхождения.СуммаПродажи)
		);
		
		Если НЕ ОсобыйВыводСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"Оплата",
			,
			Отказ
			);
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
		ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
	КонецЦикла;
	
	Если НЕ Отказ И ДополнительнаяПроверкаБезналичнойОплаты Тогда
		
		ТаблицаВозможныхБезналичныхОплат = ПроверитьВозможностьИзОстаткаВернутьБезналичнымиВидамиОплат(ДокументОбъект);
		Если ТаблицаВозможныхБезналичныхОплат.Количество() = 0 Тогда
			Возврат
		КонецЕсли; 
		Текст = НСтр("ru = 'Необходимо выбрать безналичную оплату:'"); 
		
		Если НЕ ОсобыйВыводСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"Оплата",
			,
			Отказ
			);
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
		ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
		
		Для каждого СтрокаТаблицы Из ТаблицаВозможныхБезналичныхОплат Цикл
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '   %1 - сумма %2 '"),
				СтрокаТаблицы.ВидОплаты,
				ФормированиеПечатныхФормСервер.ФорматСумм(СтрокаТаблицы.Сумма),
			);
			
			Если НЕ ОсобыйВыводСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"Оплата",
				,
				Отказ
				);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
			ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьВозможностьПровестиОплатуПоВозвратуЧекККМ()


// Проверяет корректность заполнения чека для пробития ККТ: отсутствие в документе складов с различными системами налогообложения.
//
// Параметры:
//  ДокументОбъект - Документ
//  Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьОтсутствиеРазличныхРежимовНалогообложения(
	ДокументОбъект,
	Отказ,
	ТекстОшибки = "",
	ОсобыйВыводСообщения = Ложь
	) Экспорт
	
	РазличныеСклады = ДокументОбъект.Товары.Выгрузить(, "Склад");
	РазличныеСклады.Свернуть("Склад");
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ВидыОсобыхНалоговОрганизацийСрезПоследних.ВидНалога, ЗНАЧЕНИЕ(перечисление.видыНалогов.пустаяссылка)) КАК ВидНалога,
	|	МАКСИМУМ(ВидыОсобыхНалоговОрганизацийСрезПоследних.Склад) КАК Склад,
	|	КОЛИЧЕСТВО(1) КАК Количество
	|ИЗ
	|	Справочник.Склады КАК ВсеСклады
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидыОсобыхНалоговОрганизаций.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И Склад В (&СкладыДокумента)) КАК ВидыОсобыхНалоговОрганизацийСрезПоследних
	|		ПО ВсеСклады.Ссылка = ВидыОсобыхНалоговОрганизацийСрезПоследних.Склад
	|ГДЕ
	|	ВсеСклады.Ссылка В(&СкладыДокумента)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ВидыОсобыхНалоговОрганизацийСрезПоследних.ВидНалога, ЗНАЧЕНИЕ(перечисление.видыНалогов.пустаяссылка))";
	Запрос.УстановитьПараметр("Дата", ДокументОбъект.Дата);
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("СкладыДокумента", РазличныеСклады);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Количество() > 1 Тогда
		
		Отказ = Истина;
		
		ТекстОшибки = НСтр("ru = 'В документе %1 использованы склады с различными режимами налогообложения:'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументОбъект);
		Пока Результат.Следующий() Цикл
			Если Результат.Количество = 1 Тогда
				СтрокаОшибки = НСтр("ru = 'Склад %1 - %2'");
			Иначе
				СтрокаОшибки = НСтр("ru = 'Склад %1 (и еще %3) - %2'");
			КонецЕсли;
			Если Результат.ВидНалога.Пустая() Тогда
				СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОшибки, Результат.Склад, "общий", Результат.Количество - 1);
			Иначе
				СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОшибки, Результат.Склад, Результат.ВидНалога, Результат.Количество - 1);
			КонецЕсли;
			ТекстОшибки = ТекстОшибки + Символы.ПС + СтрокаОшибки;
		КонецЦикла;
		
		Если НЕ ОсобыйВыводСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, "Товары",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьОтсутствиеРазличныхРежимовНалогообложения()

// Проверяет корректность заполнения чека для пробития ККТ: отсутствие в документе номенклатуры с различными договорами платежных агентов.
//
// Параметры:
//  ДокументОбъект - Документ
//  Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьОтсутствиеРазличныхДоговоровПлатежныхАгентов(
	ДокументОбъект,
	Отказ,
	ТекстОшибки = "",
	ОсобыйВыводСообщения = Ложь
	) Экспорт
	
	РазличныеСклады = ДокументОбъект.Товары.Выгрузить(, "Склад");
	РазличныеСклады.Свернуть("Склад");
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура
	|ПОМЕСТИТЬ втТоварыДокумента
	|ИЗ
	|	&ТоварыДокумента КАК ТоварыДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникНоменклатура.ДоговорПлатежногоАгента,
	|	МАКСИМУМ(ТоварыДокумента.Номенклатура) КАК Номенклатура,
	|	КОЛИЧЕСТВО(1) КАК Количество
	|ИЗ
	|	втТоварыДокумента КАК ТоварыДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТоварыДокумента.Номенклатура = СправочникНоменклатура.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СправочникНоменклатура.ДоговорПлатежногоАгента";
	Запрос.УстановитьПараметр("ТоварыДокумента", ДокументОбъект.Товары.Выгрузить(, "Номенклатура"));
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Количество() > 1 Тогда
		
		Отказ = Истина;
		
		ТекстОшибки = НСтр("ru = 'В документе %1 использована номенклатура с различными договорами платежных агентов:'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументОбъект);
		Пока Результат.Следующий() Цикл
			Если Результат.Количество = 1 Тогда
				СтрокаОшибки = НСтр("ru = 'Номенклатура %1 - %2'");
			Иначе
				СтрокаОшибки = НСтр("ru = 'Номенклатура %1 (и еще %3) - %2'");
			КонецЕсли;
			Если Результат.ДоговорПлатежногоАгента.Пустая() Тогда
				СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОшибки, Результат.Номенклатура, "без договора", Результат.Количество - 1);
			Иначе
				СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОшибки, Результат.Номенклатура, Результат.ДоговорПлатежногоАгента, Результат.Количество - 1);
			КонецЕсли;
			ТекстОшибки = ТекстОшибки + Символы.ПС + СтрокаОшибки;
		КонецЦикла;
		
		Если НЕ ОсобыйВыводСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, "Товары",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьОтсутствиеРазличныхДоговоровПлатежныхАгентов()

// Получает развернутые строки расхождения по товарам при возврате.
//
// Параметры:
//  ДокументОбъект - Документ
//
Функция ПолучитьСтрокиРасхожденияПоТоварамСЧекамиККМ(ДокументОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Характеристика,
	|	ВозвратТоваровОтПокупателяТовары.Количество,
	|	ВозвратТоваровОтПокупателяТовары.Продавец,
	|	ВозвратТоваровОтПокупателяТовары.ЧекККМ
	|ПОМЕСТИТЬ ТаблицаВозвратаВсе
	|ИЗ
	|	&ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателяТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаВозвратаВсе.Номенклатура,
	|	ТаблицаВозвратаВсе.Характеристика,
	|	ТаблицаВозвратаВсе.Количество,
	|	ТаблицаВозвратаВсе.Продавец,
	|	ТаблицаВозвратаВсе.ЧекККМ
	|ПОМЕСТИТЬ ТаблицаВозвратаПоЧекамККМ
	|ИЗ
	|	ТаблицаВозвратаВсе КАК ТаблицаВозвратаВсе
	|ГДЕ
	|	НЕ ТаблицаВозвратаВсе.ЧекККМ = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВозвратаПоЧекамККМ.ЧекККМ
	|ПОМЕСТИТЬ ТаблицаЧековККМ
	|ИЗ
	|	ТаблицаВозвратаПоЧекамККМ КАК ТаблицаВозвратаПоЧекамККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК ЧекККМ
	|ПОМЕСТИТЬ ТаблицаЧековККМВозврат
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.ЧекККМПродажа В
	|			(ВЫБРАТЬ
	|				ТаблицаЧековККМ.ЧекККМ
	|			ИЗ
	|				ТаблицаЧековККМ КАК ТаблицаЧековККМ)
	|	И ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМТоварыПродажи.Номенклатура,
	|	ЧекККМТоварыПродажи.Ссылка КАК ЧекККМ,
	|	ЧекККМТоварыПродажи.Характеристика,
	|	ЧекККМТоварыПродажи.Количество КАК КоличествоПродажи,
	|	ЧекККМТоварыПродажи.Продавец,
	|	0 КАК КоличествоВозвратаТекущего,
	|	0 КАК КоличествоВозвратаПрошлого
	|ПОМЕСТИТЬ ТаблицаОбщая
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТоварыПродажи
	|ГДЕ
	|	ЧекККМТоварыПродажи.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаЧековККМ.ЧекККМ
	|			ИЗ
	|				ТаблицаЧековККМ КАК ТаблицаЧековККМ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМТоварыПрошлого.Номенклатура,
	|	ЧекККМТоварыПрошлого.Ссылка,
	|	ЧекККМТоварыПрошлого.Характеристика,
	|	0,
	|	ЧекККМТоварыПрошлого.Продавец,
	|	0,
	|	ЧекККМТоварыПрошлого.Количество
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТоварыПрошлого
	|ГДЕ
	|	ЧекККМТоварыПрошлого.Ссылка.ЧекККМПродажа В
	|			(ВЫБРАТЬ
	|				ТаблицаЧековККМВозврат.ЧекККМ
	|			ИЗ
	|				ТаблицаЧековККМВозврат КАК ТаблицаЧековККМВозврат)
	|	И ЧекККМТоварыПрошлого.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТоварыПрошлого.Номенклатура,
	|	ВозвратТоваровОтПокупателяТоварыПрошлого.ЧекККМ,
	|	ВозвратТоваровОтПокупателяТоварыПрошлого.Характеристика,
	|	0,
	|	ВозвратТоваровОтПокупателяТоварыПрошлого.Продавец,
	|	0,
	|	ВозвратТоваровОтПокупателяТоварыПрошлого.Количество
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТоварыПрошлого
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТоварыПрошлого.Ссылка.Проведен
	|	И ВозвратТоваровОтПокупателяТоварыПрошлого.ЧекККМ В
	|			(ВЫБРАТЬ
	|				ТаблицаЧековККМ.ЧекККМ
	|			ИЗ
	|				ТаблицаЧековККМ КАК ТаблицаЧековККМ)
	|	И ВозвратТоваровОтПокупателяТоварыПрошлого.Ссылка <> &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаВозвратаПоЧекамККМ.Номенклатура,
	|	ТаблицаВозвратаПоЧекамККМ.ЧекККМ,
	|	ТаблицаВозвратаПоЧекамККМ.Характеристика,
	|	0,
	|	ТаблицаВозвратаПоЧекамККМ.Продавец,
	|	ТаблицаВозвратаПоЧекамККМ.Количество,
	|	0
	|ИЗ
	|	ТаблицаВозвратаПоЧекамККМ КАК ТаблицаВозвратаПоЧекамККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОбщая.Номенклатура,
	|	ТаблицаОбщая.ЧекККМ,
	|	ТаблицаОбщая.Характеристика,
	|	СУММА(ТаблицаОбщая.КоличествоПродажи) КАК КоличествоПродажи,
	|	ТаблицаОбщая.Продавец,
	|	СУММА(ТаблицаОбщая.КоличествоВозвратаТекущего) КАК КоличествоВозвратаТекущего,
	|	СУММА(ТаблицаОбщая.КоличествоВозвратаПрошлого) КАК КоличествоВозвратаПрошлого
	|ПОМЕСТИТЬ ТаблицаСгруппированная
	|ИЗ
	|	ТаблицаОбщая КАК ТаблицаОбщая
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбщая.Номенклатура,
	|	ТаблицаОбщая.ЧекККМ,
	|	ТаблицаОбщая.Характеристика,
	|	ТаблицаОбщая.Продавец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.ЧекККМ) КАК ЧекККМ,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Характеристика) КАК Характеристика,
	|	ТаблицаСгруппированная.КоличествоПродажи,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Продавец) КАК Продавец,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ТаблицаСгруппированная.КоличествоВозвратаТекущего,
	|	ТаблицаСгруппированная.КоличествоВозвратаПрошлого
	|ИЗ
	|	ТаблицаСгруппированная КАК ТаблицаСгруппированная
	|ГДЕ
	|	ТаблицаСгруппированная.КоличествоВозвратаТекущего > 0
	|	И ТаблицаСгруппированная.КоличествоВозвратаТекущего + ТаблицаСгруппированная.КоличествоВозвратаПрошлого > ТаблицаСгруппированная.КоличествоПродажи";
	
	Запрос.УстановитьПараметр("ВозвратТоваровОтПокупателя", ДокументОбъект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
	
КонецФункции // ПолучитьСтрокиРасхожденияПоТоварамСЧекамиККМ()

// Получает развернутые строки расхождения по товарам при возврате по документам продажи.
//
// Параметры:
//  ДокументОбъект - Документ
//
Функция ПолучитьСтрокиРасхожденияПоТоварамПоДокументамПродажи(ДокументОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Характеристика,
	|	ВозвратТоваровОтПокупателяТовары.Количество,
	|	ВозвратТоваровОтПокупателяТовары.Продавец,
	|	ВозвратТоваровОтПокупателяТовары.ДокументПродажи
	|ПОМЕСТИТЬ ТаблицаВозвратаВсе
	|ИЗ
	|	&ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателяТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Характеристика,
	|	ВозвратТоваровОтПокупателяТовары.Количество,
	|	ВозвратТоваровОтПокупателяТовары.Продавец,
	|	ВозвратТоваровОтПокупателяТовары.ДокументПродажи
	|ПОМЕСТИТЬ ТаблицаВозврата
	|ИЗ
	|	ТаблицаВозвратаВсе КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ
	|	(НЕ ВозвратТоваровОтПокупателяТовары.ДокументПродажи В (&МассивПустыхДокументовПродажи))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВозврата.ДокументПродажи
	|ПОМЕСТИТЬ ТаблицаДокументовПродажи
	|ИЗ
	|	ТаблицаВозврата КАК ТаблицаВозврата
	|ГДЕ
	|	(НЕ ТаблицаВозврата.ДокументПродажи В (&МассивПустыхДокументовПродажи))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровТовары.Ссылка КАК ДокументПродажи,
	|	РеализацияТоваровТовары.Номенклатура,
	|	РеализацияТоваровТовары.Характеристика,
	|	РеализацияТоваровТовары.Продавец КАК Продавец,
	|	РеализацияТоваровТовары.Количество КАК КоличествоПродажи,
	|	0 КАК КоличествоВозвратаТекущего,
	|	0 КАК КоличествоВозвратаПрошлого
	|ПОМЕСТИТЬ ТаблицаОбщая
	|ИЗ
	|	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
	|ГДЕ
	|	РеализацияТоваровТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаДокументовПродажи.ДокументПродажи
	|			ИЗ
	|				ТаблицаДокументовПродажи КАК ТаблицаДокументовПродажи)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахТовары.Ссылка,
	|	ОтчетОРозничныхПродажахТовары.Номенклатура,
	|	ОтчетОРозничныхПродажахТовары.Характеристика,
	|	ОтчетОРозничныхПродажахТовары.Продавец,
	|	ОтчетОРозничныхПродажахТовары.Количество,
	|	0,
	|	0
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
	|ГДЕ
	|	ОтчетОРозничныхПродажахТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаДокументовПродажи.ДокументПродажи
	|			ИЗ
	|				ТаблицаДокументовПродажи КАК ТаблицаДокументовПродажи)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаВозврата.ДокументПродажи,
	|	ТаблицаВозврата.Номенклатура,
	|	ТаблицаВозврата.Характеристика,
	|	ТаблицаВозврата.Продавец,
	|	0,
	|	ТаблицаВозврата.Количество,
	|	0
	|ИЗ
	|	ТаблицаВозврата КАК ТаблицаВозврата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТовары.ДокументПродажи,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Характеристика,
	|	ВозвратТоваровОтПокупателяТовары.Продавец,
	|	0,
	|	0,
	|	ВозвратТоваровОтПокупателяТовары.Количество
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка.Проведен
	|	И ВозвратТоваровОтПокупателяТовары.ДокументПродажи В
	|			(ВЫБРАТЬ
	|				ТаблицаДокументовПродажи.ДокументПродажи
	|			ИЗ
	|				ТаблицаДокументовПродажи КАК ТаблицаДокументовПродажи)
	|	И ВозвратТоваровОтПокупателяТовары.Ссылка <> &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбщая.ДокументПродажи,
	|	ТаблицаОбщая.Номенклатура,
	|	ТаблицаОбщая.Характеристика,
	|	ТаблицаОбщая.Продавец,
	|	СУММА(ТаблицаОбщая.КоличествоПродажи) КАК КоличествоПродажи,
	|	СУММА(ТаблицаОбщая.КоличествоВозвратаТекущего) КАК КоличествоВозвратаТекущего,
	|	СУММА(ТаблицаОбщая.КоличествоВозвратаПрошлого) КАК КоличествоВозвратаПрошлого
	|ПОМЕСТИТЬ ТаблицаСгруппированная
	|ИЗ
	|	ТаблицаОбщая КАК ТаблицаОбщая
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбщая.ДокументПродажи,
	|	ТаблицаОбщая.Продавец,
	|	ТаблицаОбщая.Номенклатура,
	|	ТаблицаОбщая.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.ДокументПродажи) КАК ДокументПродажи,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Характеристика) КАК Характеристика,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Продавец) КАК Продавец,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ТаблицаСгруппированная.КоличествоПродажи,
	|	ТаблицаСгруппированная.КоличествоВозвратаТекущего,
	|	ТаблицаСгруппированная.КоличествоВозвратаПрошлого
	|ИЗ
	|	ТаблицаСгруппированная КАК ТаблицаСгруппированная
	|ГДЕ
	|	ТаблицаСгруппированная.КоличествоВозвратаТекущего > 0
	|	И ТаблицаСгруппированная.КоличествоВозвратаТекущего + ТаблицаСгруппированная.КоличествоВозвратаПрошлого > ТаблицаСгруппированная.КоличествоПродажи";
	
	
	Запрос.УстановитьПараметр("ВозвратТоваровОтПокупателя", ДокументОбъект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	
	МассивПустыхДокументовПродажи = Новый Массив;
	МассивПустыхДокументовПродажи.Добавить(Документы.ОтчетОРозничныхПродажах.ПустаяСсылка());
	МассивПустыхДокументовПродажи.Добавить(Документы.РеализацияТоваров.ПустаяСсылка());
	МассивПустыхДокументовПродажи.Добавить(Неопределено);
	
	Запрос.УстановитьПараметр("МассивПустыхДокументовПродажи", МассивПустыхДокументовПродажи);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции  // ПолучитьСтрокиРасхожденияПоТоварамПоДокументамПродажи

// Проверяет возможность возврата по чеку ККМ.
//
// Параметры:
//  ДокументОбъект - Документ
//  Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьВозможностьВозвратаОтПокупателя( ДокументОбъект, Отказ, ОбработкаОбъект = Неопределено) Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		КлючДанныхВыводаСообщений = ДокументОбъект;
		ПолеВыводаСообщений = "Товары";
	Иначе
		КлючДанныхВыводаСообщений = ОбработкаОбъект;
		ПолеВыводаСообщений = "Объект.Товары";
	КонецЕсли;
	
	ТаблицаРасхождений = ПолучитьСтрокиРасхожденияПоТоварамСЧекамиККМ(ДокументОбъект); 
	
	Для Каждого СтрокаРасхождения Из ТаблицаРасхождений Цикл
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1%2 попытка оформить возврат на продавца ""%3"" по чеку (%4): %6 %5, продано по чеку: %7 %5, возвращено ранее  %8 %5'"),
			СтрокаРасхождения.Номенклатура, // %1
			СтрокаРасхождения.Характеристика, // %2
			СтрокаРасхождения.Продавец, // %3
			СтрокаРасхождения.ЧекККМ,// %4
			СтрокаРасхождения.ЕдиницаИзмерения,// %5
			Строка(СтрокаРасхождения.КоличествоВозвратаТекущего), // %6
			Строка(СтрокаРасхождения.КоличествоПродажи), // %7
			Строка(СтрокаРасхождения.КоличествоВозвратаПрошлого),// %8
		);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		Текст,
		КлючДанныхВыводаСообщений,
		ПолеВыводаСообщений,
		,
		Отказ
		);
		
	КонецЦикла;
	
	ТаблицаРасхождений = ПолучитьСтрокиРасхожденияПоТоварамПоДокументамПродажи(ДокументОбъект); 
	
	Для Каждого СтрокаРасхождения Из ТаблицаРасхождений Цикл
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1%2 попытка оформить возврат на продавца ""%3"" по документу (%4): %6 %5, продано по документу: %7 %5, возвращено ранее  %8 %5'"),
			СтрокаРасхождения.Номенклатура, // %1
			СтрокаРасхождения.Характеристика, // %2
			СтрокаРасхождения.Продавец, // %3
			СтрокаРасхождения.ДокументПродажи,// %4
			СтрокаРасхождения.ЕдиницаИзмерения,// %5
			Строка(СтрокаРасхождения.КоличествоВозвратаТекущего), // %6
			Строка(СтрокаРасхождения.КоличествоПродажи), // %7
			Строка(СтрокаРасхождения.КоличествоВозвратаПрошлого),// %8
		);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		Текст,
		КлючДанныхВыводаСообщений,
		ПолеВыводаСообщений,
		,
		Отказ
		);
		
	КонецЦикла;
	
	ТаблицаРасхождений = СкидкиНаценкиСерверПереопределяемый.РасхожденияДисконтныхКартВозвратаИПродаж(ДокументОбъект);
	СтрокаСообщения = НСтр("ru = 'В строке ""%1"" выбрана дисконтная карта ""%2"", не совпадающая с дисконтной картой покупателя'");
	Для Каждого СтрокаРасхождения Из ТаблицаРасхождений Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаРасхождения.НомерСтрокиОснования, СтрокаРасхождения.ДисконтнаяКарта);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		Текст,
		КлючДанныхВыводаСообщений,
		ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПолеВыводаСообщений, СтрокаРасхождения.НомерСтрокиОснования, СтрокаРасхождения.Основание),
		,
		Отказ
		);
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьВозможностьВозвратаОтПокупателя()

// Возвращает структуру значений кассовой дисциплины выемки при закрытии смены.
// Параметры:
//   КассаККМ - справочник "КассаККМ".
// Возвращаемое значение:
//   Структура
Функция КассоваяДисциплинаВыемкиПриЗакрытииСмены(КассаККМ) Экспорт
	
	СтруктураКассовойДисциплины = Новый Структура("ТипВыемкиПриЗакрытииСмены, МаксимальнаяСуммаРазмена, ЗапрашиватьСуммуВыемки",
												  Перечисления.ТипыВыемкиПриЗакрытииСмены.ПроизводитьПолнуюВыемку,
												  0,
												  Ложь);
	
	Пользователь = ОбщегоНазначенияРТКлиентСервер.ПользовательСУчетомИзмененныхПрав();
	
	РазрешитьНеполнуюВыемкуПриЗакрытииСмены = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНеполнуюВыемкуПриЗакрытииСмены, 
							Ложь, 
							Пользователь);
		
	Если РазрешитьНеполнуюВыемкуПриЗакрытииСмены = Истина Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КассоваяДисциплинаВыемкиПриЗакрытииСмены.ТипВыемкиПриЗакрытииСмены,
		|	КассоваяДисциплинаВыемкиПриЗакрытииСмены.МаксимальнаяСуммаРазмена,
		|	ВЫБОР
		|		КОГДА КассоваяДисциплинаВыемкиПриЗакрытииСмены.ТипВыемкиПриЗакрытииСмены = ЗНАЧЕНИЕ(Перечисление.ТипыВыемкиПриЗакрытииСмены.ОставитьСуммуРазменаВКассеККМ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЗапрашиватьСуммуВыемки
		|ИЗ
		|	РегистрСведений.КассоваяДисциплинаВыемкиПриЗакрытииСмены КАК КассоваяДисциплинаВыемкиПриЗакрытииСмены
		|ГДЕ
		|	КассоваяДисциплинаВыемкиПриЗакрытииСмены.Организация = &Организация
		|	И КассоваяДисциплинаВыемкиПриЗакрытииСмены.Магазин = &Магазин";
		
		Запрос.УстановитьПараметр("Организация", КассаККМ.Владелец);
		Запрос.УстановитьПараметр("Магазин"    , КассаККМ.Магазин);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураКассовойДисциплины, Выборка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураКассовойДисциплины;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВозможностьРасхожденияТоваровПоПродавцу(ДокументОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Характеристика,
	|	ЧекККМТовары.Количество,
	|	ЧекККМТовары.Продавец
	|ПОМЕСТИТЬ ТаблицаПродажи
	|ИЗ
	|	&Товары КАК ЧекККМТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика,
	|	ТаблицаПродажи.Количество КАК КоличествоВозврата,
	|	ТаблицаПродажи.Продавец
	|ИЗ
	|	ТаблицаПродажи КАК ТаблицаПродажи
	|ГДЕ
	|	НЕ ТаблицаПродажи.Продавец = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Характеристика,
	|	ЧекККМТовары.Количество,
	|	ЧекККМТовары.Продавец
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Ссылка.ЧекККМПродажа = &ЧекККМПродажа
	|	И НЕ ЧекККМТовары.Продавец = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	И ЧекККМТовары.Ссылка <> &Ссылка
	|	И ЧекККМТовары.Ссылка.Проведен";
	
	Запрос.УстановитьПараметр("ЧекККМПродажа", ДокументОбъект.ЧекККМПродажа);
	Запрос.УстановитьПараметр("Ссылка"       , ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Товары"       , ДокументОбъект.Товары.Выгрузить());
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
	
КонецФункции // ВозможностьРасхожденияТоваровПоПродавцу()

Функция ВозможнаяСуммаОплатыНаличнымиЧекаВозврата(ДокументОбъект)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМОплата.ВидОплаты КАК ВидОплаты,
	|	ЧекККМОплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ ТаблицаОбщая
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &ЧекККМПродажа
	|	И (ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|			ИЛИ ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМОплата.ВидОплаты,
	|	-ЧекККМОплата.Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка.ЧекККМПродажа = &ЧекККМПродажа
	|	И НЕ ЧекККМОплата.Ссылка = &Ссылка
	|	И ЧекККМОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|	И ЧекККМОплата.Ссылка.Проведен
	|	И (ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|			ИЛИ ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбщая.ВидОплаты КАК ВидОплаты,
	|	ТаблицаОбщая.Сумма КАК Сумма
	|ИЗ
	|	ТаблицаОбщая КАК ТаблицаОбщая";
	
	Запрос.УстановитьПараметр("ЧекККМПродажа", ДокументОбъект.ЧекККМПродажа);
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Возврат ТаблицаЗапроса.Итог("Сумма");

КонецФункции // ВозможнаяСуммаОплатыНаличнымиЧекаВозврата()

Функция НеобходимаяСуммаВозвратаПриОплатеБанковскойКартой(ДокументОбъект)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМОплата.ВидОплаты,
	|	ЧекККМОплата.Сумма
	|ПОМЕСТИТЬ ТаблицаОбщая
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &ЧекККМПродажа
	|	И ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМОплата.ВидОплаты,
	|	-ЧекККМОплата.Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка.ЧекККМПродажа = &ЧекККМПродажа
	|	И НЕ ЧекККМОплата.Ссылка = &Ссылка
	|	И ЧекККМОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|	И ЧекККМОплата.Ссылка.Проведен
	|	И ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбщая.ВидОплаты,
	|	ТаблицаОбщая.Сумма КАК Сумма
	|ИЗ
	|	ТаблицаОбщая КАК ТаблицаОбщая";
	
	Запрос.УстановитьПараметр("ЧекККМПродажа", ДокументОбъект.ЧекККМПродажа);
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Возврат ТаблицаЗапроса.Итог("Сумма");

КонецФункции // НеобходимаяСуммаВозвратаПриОплатеБанковскойКартой()

// Получение суммы наличной и безналичной оплаты.
//
// Параметры:
//  ДокументОбъект - Документ
//  СуммаНаличнойОплаты - сумма наличной оплаты.
//  СуммаБезналичнойОплаты - сумма безналичной оплаты.
//
Процедура ПолучитьСуммыПоВидуОплат(ДокументОбъект, СуммаНаличнойОплаты, СуммаБезналичнойОплаты)

	СуммаНаличнойОплаты = 0;
	СуммаБезналичнойОплаты = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Оплата.ВидОплаты,
	|	Оплата.Сумма
	|ПОМЕСТИТЬ ТаблицаОплат
	|ИЗ
	|	&Оплата КАК Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОплат.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ТаблицаОплат.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|						ТОГДА ТаблицаОплат.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК СуммаНаличнойОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОплат.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА (НЕ ТаблицаОплат.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные))
	|						ТОГДА ТаблицаОплат.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК СуммаБезналичнойОплаты
	|ИЗ
	|	ТаблицаОплат КАК ТаблицаОплат";
	
	Запрос.УстановитьПараметр("Оплата", ДокументОбъект.Оплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Если ЗначениеЗаполнено(Выборка.СуммаНаличнойОплаты) Тогда
			СуммаНаличнойОплаты = Выборка.СуммаНаличнойОплаты;
		КонецЕсли; 
	
		Если ЗначениеЗаполнено(Выборка.СуммаБезналичнойОплаты) Тогда
			СуммаБезналичнойОплаты = Выборка.СуммаБезналичнойОплаты;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСуммыПоВидуОплат()

Функция ПродажаСПроверкойЕГАИС(Организация, Магазин, ДатаДокумента)
	
	Если ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(Организация, Магазин, ДатаДокумента) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуЗаполненияПоПоставщикам(ЭтоЧекККМ, ТекущаяСтрокаТоваров, ЭтоРасшифровка = Ложь) Экспорт
	
	ТипЧисло = Новый Массив;
	ТипЧисло.Добавить(Тип("Число"));
	
	ТипСтрока = Новый Массив;
	ТипСтрока.Добавить(Тип("Строка"));
	
	ТипБулево = Новый Массив;
	ТипБулево.Добавить(Тип("Булево"));
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Типы.Добавить(Тип("СправочникСсылка.УпаковкиНоменклатуры"));
	Типы.Добавить(Тип("СправочникСсылка.Номенклатура"));
	Типы.Добавить(Тип("СправочникСсылка.Склады"));
	Типы.Добавить(Тип("СправочникСсылка.Организации"));
	Типы.Добавить(Тип("СправочникСсылка.НомераГТД"));
	Типы.Добавить(Тип("ПеречислениеСсылка.СтавкиНДС"));
	
	Если ЭтоРасшифровка Тогда 
		Типы.Добавить(Тип("СправочникСсылка.Контрагенты"));
		Типы.Добавить(Тип("СправочникСсылка.ДоговорыПлатежныхАгентов"));
	КонецЕсли;  
	
	ТипыТаблицыТоваров = Новый ОписаниеТипов(Типы);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",       ТипыТаблицыТоваров);
	ТаблицаТоваров.Колонки.Добавить("Характеристика",     ТипыТаблицыТоваров);
	ТаблицаТоваров.Колонки.Добавить("Упаковка",           ТипыТаблицыТоваров);
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС",          ТипыТаблицыТоваров);
	ТаблицаТоваров.Колонки.Добавить("Организация",        ТипыТаблицыТоваров);
	ТаблицаТоваров.Колонки.Добавить("НомерГТД",           ТипыТаблицыТоваров);
	
	Если ЭтоРасшифровка Тогда
		ТаблицаТоваров.Колонки.Добавить("Контрагент",     ТипыТаблицыТоваров);
		ТаблицаТоваров.Колонки.Добавить("Договор",        ТипыТаблицыТоваров);
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("КлючСвязи",          Новый ОписаниеТипов(ТипЧисло,,,Новый КвалификаторыЧисла(5,0)));      
	ТаблицаТоваров.Колонки.Добавить("Количество",         Новый ОписаниеТипов(ТипЧисло,,,Новый КвалификаторыЧисла(15,3)));
	ТаблицаТоваров.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов(ТипЧисло,,,Новый КвалификаторыЧисла(15,3)));
	ТаблицаТоваров.Колонки.Добавить("Цена",               Новый ОписаниеТипов(ТипЧисло,,,Новый КвалификаторыЧисла(15,2))); 
	ТаблицаТоваров.Колонки.Добавить("СуммаВсего",         Новый ОписаниеТипов(ТипЧисло,,,Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("Сумма",              Новый ОписаниеТипов(ТипЧисло,,,Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод",           Новый ОписаниеТипов(ТипСтрока,,,,Новый КвалификаторыСтроки()));
	ТаблицаТоваров.Колонки.Добавить("ПродажаПодарка",     Новый ОписаниеТипов(ТипБулево,,,,,,));      
	ТаблицаТоваров.Колонки.Добавить("ПроцентАвтоматическойСкидки", Новый ОписаниеТипов(ТипЧисло,,,Новый КвалификаторыЧисла(5,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАвтоматическойСкидки",   Новый ОписаниеТипов(ТипЧисло,,,Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроцентРучнойСкидки",         Новый ОписаниеТипов(ТипЧисло,,,Новый КвалификаторыЧисла(5,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаРучнойСкидки",           Новый ОписаниеТипов(ТипЧисло,,,Новый КвалификаторыЧисла(15,2)));
	
	Если  ЭтоЧекККМ Тогда
		ТаблицаТоваров.Колонки.Добавить("Склад",      ТипыТаблицыТоваров);
	КонецЕсли;
	
	НоваяСтрокаТоваров = ТаблицаТоваров.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, ТекущаяСтрокаТоваров);
	
	Если ТекущаяСтрокаТоваров.Свойство("Оприходование") Тогда
		НоваяСтрокаТоваров.Цена = ТекущаяСтрокаТоваров.ЦенаОприходования;
	КонецЕсли;
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляРасшифровкиПоПоставщикам(Объект, ЭтоЧекККМ) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Товары.КлючСвязи КАК КлючСвязи,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Упаковка КАК Упаковка,
	|	&Склад КАК Склад,
	|	&Организация КАК Организация,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	Товары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	Товары.Штрихкод КАК Штрихкод,
	|	Товары.Цена КАК Цена
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	&ТаблицаТоваров КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.КлючСвязи КАК КлючСвязи,
	|	ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	ДанныеДокумента.Характеристика КАК Характеристика,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ТоварыОрганизацийОстаткиИОбороты.Поставщик КАК Поставщик,
	|	ДанныеДокумента.Склад КАК Склад,
	|	ТоварыОрганизацийОстаткиИОбороты.Договор КАК Договор,
	|	ТоварыОрганизацийОстаткиИОбороты.НомерГТД КАК НомерГТД,
	|	ДанныеДокумента.Упаковка КАК Упаковка,
	|	СУММА(ТоварыОрганизацийОстаткиИОбороты.КоличествоКонечныйОстаток) КАК КоличествоОстаток,
	|	МАКСИМУМ(ТоварыОрганизацийОстаткиИОбороты.ПериодДень) КАК ПериодДень
	|ПОМЕСТИТЬ ОстаткиПоГТД
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.ОстаткиИОбороты(, , Авто, , ) КАК ТоварыОрганизацийОстаткиИОбороты
	|		ПО ДанныеДокумента.Номенклатура = ТоварыОрганизацийОстаткиИОбороты.Номенклатура
	|			И ДанныеДокумента.Характеристика = ТоварыОрганизацийОстаткиИОбороты.Характеристика
	|			И ДанныеДокумента.Склад = ТоварыОрганизацийОстаткиИОбороты.Склад
	|			И ДанныеДокумента.Организация = ТоварыОрганизацийОстаткиИОбороты.Организация
	|ГДЕ
	|	ТоварыОрганизацийОстаткиИОбороты.КоличествоКонечныйОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Номенклатура,
	|	ТоварыОрганизацийОстаткиИОбороты.Поставщик,
	|	ДанныеДокумента.Характеристика,
	|	ДанныеДокумента.Упаковка,
	|	ТоварыОрганизацийОстаткиИОбороты.НомерГТД,
	|	ДанныеДокумента.Склад,
	|	ТоварыОрганизацийОстаткиИОбороты.Договор,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КлючСвязи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Организация,
	|	Склад,
	|	Поставщик,
	|	Договор,
	|	НомерГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОрганизацийОстатки.Номенклатура      КАК Номенклатура,
	|	ТоварыОрганизацийОстатки.Характеристика    КАК Характеристика,
	|	ТоварыОрганизацийОстатки.Склад             КАК Склад,
	|	ТоварыОрганизацийОстатки.Организация       КАК Организация,
	|	ТоварыОрганизацийОстатки.Поставщик         КАК Поставщик,
	|	ТоварыОрганизацийОстатки.Договор           КАК Договор,
	|	ТоварыОрганизацийОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ВЫБОР
	|		КОГДА &ПриоритетПоСобственномуТовару
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыОрганизацийОстатки.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТоварыОрганизацийОстатки.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ                              КАК Приоритет,
	|	ДанныеДокумента.КлючСвязи          КАК КлючСвязи,
	|	ДанныеДокумента.Количество         КАК Количество,
	|	ДанныеДокумента.Упаковка           КАК Упаковка,
	|	ДанныеДокумента.СтавкаНДС          КАК СтавкаНДС,
	|	ДанныеДокумента.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ДанныеДокумента.Цена               КАК Цена,
	|	ДанныеДокумента.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ДанныеДокумента.ПроцентРучнойСкидки         КАК ПроцентРучнойСкидки,
	|	ДанныеДокумента.Штрихкод                    КАК Штрихкод,
	|	ТоварыОрганизацийОстатки.НомерГТД           КАК НомерГТД
	|ПОМЕСТИТЬ ОстаткиПоПриоритетам
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Остатки(&НаДату, ) КАК ТоварыОрганизацийОстатки
	|		ПО ДанныеДокумента.Номенклатура = ТоварыОрганизацийОстатки.Номенклатура
	|			И ДанныеДокумента.Характеристика = ТоварыОрганизацийОстатки.Характеристика
	|			И ДанныеДокумента.Организация = ТоварыОрганизацийОстатки.Организация
	|			И ДанныеДокумента.Склад = ТоварыОрганизацийОстатки.Склад
	|ГДЕ
	|	ТоварыОрганизацийОстатки.КоличествоОстаток > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Организация,
	|	Склад,
	|	Поставщик,
	|	Договор,
	|	НомерГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоПриоритетам.Организация    КАК Организация,
	|	ОстаткиПоПриоритетам.Склад          КАК Склад,
	|	ОстаткиПоПриоритетам.Поставщик      КАК Поставщик,
	|	ОстаткиПоПриоритетам.Договор        КАК Договор,
	|	ВЫБОР
	|		КОГДА ОстаткиПоПриоритетам.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ОстаткиПоПриоритетам.СтавкаНДС
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ОстаткиПоПриоритетам.Поставщик.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая)
	|					ТОГДА ОстаткиПоПриоритетам.Номенклатура.СтавкаНДС
	|				ИНАЧЕ ОстаткиПоПриоритетам.СтавкаНДС
	|			КОНЕЦ
	|	КОНЕЦ КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ОстаткиПоПриоритетам.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(&ЦенаВключаетНДС, ИСТИНА)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                КАК ЦенаВключаетНДС,
	|	ОстаткиПоПриоритетам.КлючСвязи       КАК КлючСвязи,
	|	ОстаткиПоПриоритетам.Номенклатура    КАК Номенклатура,
	|	ОстаткиПоПриоритетам.Характеристика  КАК Характеристика,
	|	ОстаткиПоПриоритетам.Упаковка        КАК Упаковка,
	|	ЕСТЬNULL(ОстаткиПоПриоритетам.Количество, 0)         КАК Количество,
	|	ЕСТЬNULL(ОстаткиПоПриоритетам.КоличествоУпаковок, 0) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(ОстаткиПоПриоритетам.КоличествоОстаток, 0)  КАК Остаток,
	|	ЕСТЬNULL(ОстаткиПоПриоритетам.Цена, 0)               КАК Цена,
	|	ОстаткиПоПриоритетам.Приоритет                       КАК Приоритет,
	|	ЕСТЬNULL(ОстаткиПоПриоритетам.ПроцентАвтоматическойСкидки, 0) КАК ПроцентАвтоматическойСкидки,
	|	ЕСТЬNULL(ОстаткиПоПриоритетам.ПроцентРучнойСкидки, 0)         КАК ПроцентРучнойСкидки,
	|	ОстаткиПоПриоритетам.Штрихкод                                 КАК Штрихкод,
	|	ОстаткиПоГТД.НомерГТД                                         КАК НомерГТД,
	|	ОстаткиПоГТД.ПериодДень                                       КАК ПериодДень
	|ИЗ
	|	ОстаткиПоГТД КАК ОстаткиПоГТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоПриоритетам КАК ОстаткиПоПриоритетам
	|		ПО (ОстаткиПоПриоритетам.Номенклатура = ОстаткиПоГТД.Номенклатура)
	|			И (ОстаткиПоПриоритетам.Характеристика = ОстаткиПоГТД.Характеристика)
	|			И (ОстаткиПоПриоритетам.Организация = ОстаткиПоГТД.Организация)
	|			И (ОстаткиПоПриоритетам.Склад = ОстаткиПоГТД.Склад)
	|			И (ОстаткиПоПриоритетам.Поставщик = ОстаткиПоГТД.Поставщик)
	|			И (ОстаткиПоПриоритетам.Договор = ОстаткиПоГТД.Договор)
	|			И (ОстаткиПоПриоритетам.НомерГТД = ОстаткиПоГТД.НомерГТД)
	|ГДЕ
	|	ОстаткиПоПриоритетам.Количество > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Приоритет,
	|	ПериодДень
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика";
	
	Если ЭтоЧекККМ Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Склад", "Товары.Склад");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура проверяет наличие акцизных марок в табличных частях 
// "Акцизные марки" других документов.
//
Процедура ПроверитьАкцизныеМаркиПередЗаписьюЧека(СтруктураДляПроверки) Экспорт
	
	Объект 				= СтруктураДляПроверки.Объект;
	ИмяТаблицыТоваров 	= СтруктураДляПроверки.ИмяТаблицыТоваров;
	Отказ 				= СтруктураДляПроверки.Отказ;
	ИтоговоеСообщение 	= СтруктураДляПроверки.ИтоговоеСообщение;
	ДатаРасчета 		= СтруктураДляПроверки.ДатаРасчета;
	Сообщать 			= СтруктураДляПроверки.Сообщать;
	ОрганизацияЕГАИС 	= СтруктураДляПроверки.ОрганизацияЕГАИС;
	
	ТаблицаАкцизныеМарки = Объект[ИмяТаблицыТоваров];
	
	УсловиеЧек = "";
	УсловиеЧекВозврат = "";
	УсловиеРеализация = "";
	ДокументСсылка = Объект.Ссылка;
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		УсловиеЧек = "И ЧекККМАкцизныеМарки.Ссылка <> &ДокументСсылка";
		УсловиеЧекВозврат = "И ЧекККМВозвратАкцизныеМарки.Ссылка <> &ДокументСсылка";
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		УсловиеРеализация = "И РеализацияТоваровАкцизныеМарки.Ссылка <> &ДокументСсылка";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМАкцизныеМарки.Ссылка КАК Ссылка,
	|	ЧекККМАкцизныеМарки.Ссылка.Дата КАК Дата,
	|	ЧекККМАкцизныеМарки.Ссылка.Номер КАК Номер,
	|	&Продажа КАК ПоследняяОперация
	|ИЗ
	|	Документ.ЧекККМ.АкцизныеМарки КАК ЧекККМАкцизныеМарки
	|ГДЕ
	|	ЧекККМАкцизныеМарки.КодАкцизнойМарки В (&КодыАкцизныхМарок)
	|	И ЧекККМАкцизныеМарки.Ссылка.Проведен
	|	И ЧекККМАкцизныеМарки.Ссылка.ВидОперации = &Продажа
	|	И &УсловиеЧек
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозвратАкцизныеМарки.Ссылка,
	|	ЧекККМВозвратАкцизныеМарки.Ссылка.Дата,
	|	ЧекККМВозвратАкцизныеМарки.Ссылка.Номер,
	|	&Возврат
	|ИЗ
	|	Документ.ЧекККМ.АкцизныеМарки КАК ЧекККМВозвратАкцизныеМарки
	|ГДЕ
	|	ЧекККМВозвратАкцизныеМарки.КодАкцизнойМарки В (&КодыАкцизныхМарок)
	|	И ЧекККМВозвратАкцизныеМарки.Ссылка.Проведен
	|	И ЧекККМВозвратАкцизныеМарки.Ссылка.ВидОперации = &Возврат
	|	И &УсловиеЧекВозврат
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекЕГАИСАкцизныеМарки.Ссылка,
	|	ЧекЕГАИСАкцизныеМарки.Ссылка.Дата,
	|	ЧекЕГАИСАкцизныеМарки.Ссылка.Номер,
	|	&Продажа
	|ИЗ
	|	Документ.ЧекЕГАИС.АкцизныеМарки КАК ЧекЕГАИСАкцизныеМарки
	|ГДЕ
	|	(ЧекЕГАИСАкцизныеМарки.КодАкцизнойМарки В (&КодыАкцизныхМарок)
	|			ИЛИ ЧекЕГАИСАкцизныеМарки.АкцизнаяМарка.ЗначениеШтрихкода В (&КодыАкцизныхМарок))
	|	И ЧекЕГАИСАкцизныеМарки.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровАкцизныеМарки.Ссылка,
	|	РеализацияТоваровАкцизныеМарки.Ссылка.Дата,
	|	РеализацияТоваровАкцизныеМарки.Ссылка.Номер,
	|	&Продажа
	|ИЗ
	|	Документ.РеализацияТоваров.АкцизныеМарки КАК РеализацияТоваровАкцизныеМарки
	|ГДЕ
	|	(РеализацияТоваровАкцизныеМарки.КодАкцизнойМарки В (&КодыАкцизныхМарок)
	|			ИЛИ РеализацияТоваровАкцизныеМарки.АкцизнаяМарка.ЗначениеШтрихкода В (&КодыАкцизныхМарок))
	|	И РеализацияТоваровАкцизныеМарки.Ссылка.Проведен
	|	И РеализацияТоваровАкцизныеМарки.Ссылка.ПробитЧек
	|	И &УсловиеРеализация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекЕГАИСВозвратАкцизныеМарки.Ссылка,
	|	ЧекЕГАИСВозвратАкцизныеМарки.Ссылка.Дата,
	|	ЧекЕГАИСВозвратАкцизныеМарки.Ссылка.Номер,
	|	&Возврат
	|ИЗ
	|	Документ.ЧекЕГАИСВозврат.АкцизныеМарки КАК ЧекЕГАИСВозвратАкцизныеМарки
	|ГДЕ
	|	(ЧекЕГАИСВозвратАкцизныеМарки.КодАкцизнойМарки В (&КодыАкцизныхМарок)
	|			ИЛИ ЧекЕГАИСВозвратАкцизныеМарки.АкцизнаяМарка.ЗначениеШтрихкода В (&КодыАкцизныхМарок))
	|	И ЧекЕГАИСВозвратАкцизныеМарки.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяАкцизныеМарки.Ссылка,
	|	ВозвратТоваровОтПокупателяАкцизныеМарки.Ссылка.Дата,
	|	ВозвратТоваровОтПокупателяАкцизныеМарки.Ссылка.Номер,
	|	&Возврат
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.АкцизныеМарки КАК ВозвратТоваровОтПокупателяАкцизныеМарки
	|ГДЕ
	|	(ВозвратТоваровОтПокупателяАкцизныеМарки.КодАкцизнойМарки В (&КодыАкцизныхМарок)
	|			ИЛИ ВозвратТоваровОтПокупателяАкцизныеМарки.АкцизнаяМарка.ЗначениеШтрихкода В (&КодыАкцизныхМарок))
	|	И ВозвратТоваровОтПокупателяАкцизныеМарки.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктСписанияЕГАИСАкцизныеМарки.Ссылка,
	|	АктСписанияЕГАИСАкцизныеМарки.Ссылка.Дата,
	|	АктСписанияЕГАИСАкцизныеМарки.Ссылка.Номер,
	|	&Продажа
	|ИЗ
	|	Документ.АктСписанияЕГАИС.АкцизныеМарки КАК АктСписанияЕГАИСАкцизныеМарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО АктСписанияЕГАИСАкцизныеМарки.Ссылка = СтатусыДокументовЕГАИС.Документ
	|			И (НЕ СтатусыДокументовЕГАИС.Статус В (&НевыгруженныеСтатусы))
	|ГДЕ
	|	(АктСписанияЕГАИСАкцизныеМарки.КодАкцизнойМарки В (&КодыАкцизныхМарок)
	|			ИЛИ АктСписанияЕГАИСАкцизныеМарки.АкцизнаяМарка.ЗначениеШтрихкода В (&КодыАкцизныхМарок))
	|	И АктСписанияЕГАИСАкцизныеМарки.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АкцизныеМаркиЕГАИС.Основание КАК Ссылка,
	|	АкцизныеМаркиЕГАИС.Основание.Дата КАК Дата,
	|	АкцизныеМаркиЕГАИС.Основание.Номер КАК Номер,
	|	&Продажа КАК ПоследняяОперация
	|ИЗ
	|	РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|ГДЕ
	|	АкцизныеМаркиЕГАИС.АкцизнаяМарка В(&АкцизныеМарки)
	|	И АкцизныеМаркиЕГАИС.Основание <> &ДокументСсылка
	|	И АкцизныеМаркиЕГАИС.Статус = &Реализована
	|	И АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	Ссылка УБЫВ";
	
	МассивАкцизныхМарок = Новый Массив;
	ТаблицаАкцизныхМарок = ТаблицаАкцизныеМарки.Выгрузить();
	Для Каждого Строка Из ТаблицаАкцизныхМарок Цикл 
		КодАкцизнойМарки = Строка.КодАкцизнойМарки;
		АкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьАкцизнуюМаркуПоКоду(КодАкцизнойМарки);
		МассивАкцизныхМарок.Добавить(АкцизнаяМарка);
	КонецЦикла;
	Запрос.УстановитьПараметр("АкцизныеМарки", МассивАкцизныхМарок);
	
	Если ОрганизацияЕГАИС = Неопределено Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС", "");
	Иначе
		Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	КонецЕсли;
	
	НевыгруженныеСтатусы = Новый Массив;
	НевыгруженныеСтатусы.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ОшибкаПередачи);
	НевыгруженныеСтатусы.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ОшибкаПроведенияЕГАИС);
	НевыгруженныеСтатусы.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.Отменен);
	Запрос.УстановитьПараметр("НевыгруженныеСтатусы", НевыгруженныеСтатусы);
	Запрос.УстановитьПараметр("КодыАкцизныхМарок", ТаблицаАкцизныхМарок.ВыгрузитьКолонку("КодАкцизнойМарки"));
	Запрос.УстановитьПараметр("Возврат", Перечисления.ВидыОперацийЧекККМ.Возврат);
	Запрос.УстановитьПараметр("Продажа", Перечисления.ВидыОперацийЧекККМ.Продажа);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Реализована", Перечисления.СтатусыАкцизныхМарок.Реализована);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеРеализация", УсловиеРеализация);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеЧекВозврат", УсловиеЧекВозврат);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеЧек", УсловиеЧек);
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		
		ЕстьОшибка = Ложь;
		Если Выборка.ПоследняяОперация = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда 
			ЕстьОшибка = Истина;
		КонецЕсли;
		
		Если ЕстьОшибка Тогда
			
			СтруктураДляПроверки.Отказ = Истина;

			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(НСтр("ru = 'Присутствуют акцизные марки, которые '"));
			МассивСтрок.Добавить(НСтр("ru = 'ранее были учтены в документах:'"));
			МассивСтрок.Добавить(Символы.ПС);
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			ОбщегоНазначенияРТ.ПолучитьПредставлениеДокумента(Выборка.Ссылка, Выборка.Номер, Выборка.Дата),,,,
				ПолучитьНавигационнуюСсылку(Выборка.Ссылка)));
			
			ТекстСообщения = Новый ФорматированнаяСтрока(МассивСтрок);
			
			Если Сообщать Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Иначе
				СтруктураДляПроверки.ИтоговоеСообщение = ИтоговоеСообщение + ТекстСообщения + Символы.ПС;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Создает структуру со свойствами, необходимыми для вызова процедуры
// ПродажиСервер.ПроверитьАкцизныеМаркиПередЗаписьюЧека
//
Функция СтруктураДляПроверкиАкцизныхМарок() Экспорт 
	
	СтруктураПроверкиМарок = Новый Структура;
	СтруктураПроверкиМарок.Вставить("Объект");
	СтруктураПроверкиМарок.Вставить("ИмяТаблицыТоваров");
	СтруктураПроверкиМарок.Вставить("Отказ");
	СтруктураПроверкиМарок.Вставить("ИтоговоеСообщение", "");
	СтруктураПроверкиМарок.Вставить("ДатаРасчета", Неопределено);
	СтруктураПроверкиМарок.Вставить("Сообщать", Истина);
	СтруктураПроверкиМарок.Вставить("ОрганизацияЕГАИС", Неопределено);
	
	Возврат СтруктураПроверкиМарок;
	
КонецФункции

#КонецОбласти