
#Область ПрограммныйИнтерфейс

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//   Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПодготовитьСтруктуруДанныхЦенниковИЭтикеток(МассивДокументов, МассивНепроведенныхДокументов, ПараметрыПечатиЦенниковИЭтикеток) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	СУММА(Товары.Количество) КАК Количество
	|ИЗ
	|	Документ.%ИмяДокумента%.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&МассивДокументов)
	|	И НЕ Товары.Ссылка В (&МассивНепроведенныхДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Шапка.Организация КАК Организация,
	|	Шапка.Склад КАК Склад,
	|	Шапка.Магазин.ПравилоЦенообразования КАК ПравилоЦенообразования,
	|	Шапка.Магазин КАК Магазин
	|ИЗ
	|	Документ.%ИмяДокумента% КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка В(&МассивДокументов)
	|	И НЕ Шапка.Ссылка В (&МассивНепроведенныхДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка
	|ИЗ
	|	Документ.%ИмяДокумента% КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|	И НЕ ТаблицаДокументов.Ссылка В (&МассивНепроведенныхДокументов)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяДокумента%", ПараметрыПечатиЦенниковИЭтикеток.ИмяДокумента);
	
	Запрос.УстановитьПараметр("МассивНепроведенныхДокументов", МассивНепроведенныхДокументов);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	МассивПроведенныхДокументов = МассивРезультатов[2].Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивСкладов     = Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Склад").ВыгрузитьКолонку(0);
	МассивПравилЦенообразования  = Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПравилоЦенообразования").ВыгрузитьКолонку(0);
	МассивМагазинов = Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Магазин").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток.
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьМагазин", ?(МассивМагазинов.Количество() = 1,МассивМагазинов[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад", ?(МассивСкладов.Количество() = 1,МассивСкладов[0], МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьПравилоЦенообразования", ?(МассивПравилЦенообразования.Количество() = 1,МассивПравилЦенообразования[0], Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", ПараметрыПечатиЦенниковИЭтикеток.УстановитьРежим);
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	СтруктураРезультат.Вставить("МассивДокументов", МассивПроведенныхДокументов);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции // ПодготовитьСтруктуруДанныхЦенниковИЭтикеток()

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//   Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПодготовитьСтруктуруДанныхЦенниковИЭтикетокДляУстановкиЦен(МассивДокументов, МассивНепроведенныхДокументов, ПараметрыПечатиЦенниковИЭтикеток) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УстановкаЦенНоменклатурыТовары.Номенклатура КАК Номенклатура,
	|	УстановкаЦенНоменклатурыТовары.Характеристика КАК Характеристика,
	|	УстановкаЦенНоменклатурыТовары.Упаковка КАК Упаковка,
	|	УстановкаЦенНоменклатурыТовары.НомерСтроки,
	|	СУММА(1) КАК Количество
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатурыТовары
	|ГДЕ
	|	УстановкаЦенНоменклатурыТовары.Ссылка В(&МассивДокументов)
	|	И НЕ УстановкаЦенНоменклатурыТовары.Ссылка В (&МассивНепроведенныхДокументов)
	|	И НЕ(УстановкаЦенНоменклатурыТовары.Номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики
	|				И УстановкаЦенНоменклатурыТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	УстановкаЦенНоменклатурыТовары.Номенклатура,
	|	УстановкаЦенНоменклатурыТовары.Характеристика,
	|	УстановкаЦенНоменклатурыТовары.Упаковка,
	|	УстановкаЦенНоменклатурыТовары.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	УстановкаЦенНоменклатурыТовары.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УстановкаЦенНоменклатуры.ВидЦены КАК ВидЦены
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.ВидыЦен КАК УстановкаЦенНоменклатуры
	|ГДЕ
	|	УстановкаЦенНоменклатуры.Ссылка В(&МассивДокументов)
	|	И НЕ УстановкаЦенНоменклатуры.Ссылка В (&МассивНепроведенныхДокументов)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УстановкаЦенНоменклатуры.Ссылка
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
	|ГДЕ
	|	УстановкаЦенНоменклатуры.Ссылка В(&МассивДокументов)
	|	И НЕ УстановкаЦенНоменклатуры.Ссылка В (&МассивНепроведенныхДокументов)";
	
	Запрос.УстановитьПараметр("МассивНепроведенныхДокументов", МассивНепроведенныхДокументов);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	МассивПроведенныхДокументов = МассивРезультатов[2].Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивВидовЦен = ТаблицаРеквизитыДокументов.ВыгрузитьКолонку(0);
	
	
	// Подготовка структуры действий для обработки печати ценников и этикеток.
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСклад", Неопределено);
	СтруктураДействий.Вставить("ЗаполнитьВидЦены", ?(МассивВидовЦен.Количество() > 0, МассивВидовЦен[0], Неопределено));
	СтруктураДействий.Вставить("УстановитьСпособПолученияЦен", 1);
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Ложь);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", ПараметрыПечатиЦенниковИЭтикеток.УстановитьРежим);
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоОстаткамНаСкладе");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("СкрыватьКомандуЗаполненияПоДокументу");
	
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	СтруктураРезультат.Вставить("МассивДокументов", МассивПроведенныхДокументов);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции // ПодготовитьСтруктуруДанныхЦенниковИЭтикеток()

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//   Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПодготовитьСтруктуруДанныхЦенниковИЭтикетокДляПримененияЦен(МассивДокументов, МассивНепроведенныхДокументов, ПараметрыПечатиЦенниковИЭтикеток) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрименениеЦенТовары.Номенклатура КАК Номенклатура,
	|	ПрименениеЦенТовары.Характеристика КАК Характеристика,
	|	ПрименениеЦенТовары.Упаковка КАК Упаковка,
	|	СУММА(1) КАК Количество
	|ИЗ
	|	Документ.ПрименениеЦенНоменклатуры.Товары КАК ПрименениеЦенТовары
	|ГДЕ
	|	ПрименениеЦенТовары.Ссылка В(&МассивДокументов)
	|	И (НЕ ПрименениеЦенТовары.Ссылка В (&МассивНепроведенныхДокументов))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрименениеЦенТовары.Номенклатура,
	|	ПрименениеЦенТовары.Характеристика,
	|	ПрименениеЦенТовары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрименениеЦенНоменклатуры.ОбъектЦенообразования КАК Магазин
	|ИЗ
	|	Документ.ПрименениеЦенНоменклатуры КАК ПрименениеЦенНоменклатуры
	|ГДЕ
	|	ПрименениеЦенНоменклатуры.Ссылка В(&МассивДокументов)
	|	И (НЕ ПрименениеЦенНоменклатуры.Ссылка В (&МассивНепроведенныхДокументов))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрименениеЦенНоменклатуры.Ссылка
	|ИЗ
	|	Документ.ПрименениеЦенНоменклатуры КАК ПрименениеЦенНоменклатуры
	|ГДЕ
	|	ПрименениеЦенНоменклатуры.Ссылка В(&МассивДокументов)
	|	И НЕ ПрименениеЦенНоменклатуры.Ссылка В (&МассивНепроведенныхДокументов)";
	
	Запрос.УстановитьПараметр("МассивНепроведенныхДокументов", МассивНепроведенныхДокументов);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	МассивПроведенныхДокументов = МассивРезультатов[2].Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивМагазинов = ТаблицаРеквизитыДокументов.ВыгрузитьКолонку(0);
	
	
	// Подготовка структуры действий для обработки печати ценников и этикеток.
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСклад", Неопределено);
	СтруктураДействий.Вставить("ЗаполнитьМагазин", ?(МассивМагазинов.Количество() = 1, МассивМагазинов[0], Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Ложь);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", ПараметрыПечатиЦенниковИЭтикеток.УстановитьРежим);
	СтруктураДействий.Вставить("УстановитьСпособПолученияЦен", Ложь);
	СтруктураДействий.Вставить("УстановитьСостояниеЦен", Истина);
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоОстаткамНаСкладе");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	СтруктураДействий.Вставить("СкрыватьКомандуЗаполненияПоДокументу");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	СтруктураРезультат.Вставить("МассивДокументов", МассивПроведенныхДокументов);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции // ПодготовитьСтруктуруДанныхЦенниковИЭтикеток()

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//   Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПодготовитьСтруктуруДанныхЦенниковИЭтикетокДляПеремещенияТоваров(МассивДокументов, МассивНепроведенныхДокументов, ПараметрыПечатиЦенниковИЭтикеток) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	СУММА(Товары.Количество) КАК Количество
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&МассивДокументов)
	|	И (НЕ Товары.Ссылка В (&МассивНепроведенныхДокументов))
	|	И НЕ Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Шапка.СкладПолучатель КАК Склад,
	|	Шапка.МагазинПолучатель.ПравилоЦенообразования КАК ПравилоЦенообразования,
	|	Шапка.МагазинПолучатель КАК Магазин
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка В(&МассивДокументов)
	|	И (НЕ Шапка.Ссылка В (&МассивНепроведенныхДокументов))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&МассивДокументов)
	|	И НЕ ПеремещениеТоваров.Ссылка В (&МассивНепроведенныхДокументов)";
	
	Запрос.УстановитьПараметр("МассивНепроведенныхДокументов", МассивНепроведенныхДокументов);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	МассивПроведенныхДокументов = МассивРезультатов[2].Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивСкладов     = Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Склад").ВыгрузитьКолонку(0);
	МассивПравилЦенообразования  = Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ПравилоЦенообразования").ВыгрузитьКолонку(0);
	МассивМагазинов = Обработки.ПечатьЭтикетокИЦенников.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Магазин").ВыгрузитьКолонку(0);
	
	// Подготовка структуры действий для обработки печати ценников и этикеток.
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьМагазин", ?(МассивМагазинов.Количество() = 1,МассивМагазинов[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад", ?(МассивСкладов.Количество() = 1,МассивСкладов[0], МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьПравилоЦенообразования", ?(МассивПравилЦенообразования.Количество() = 1,МассивПравилЦенообразования[0], Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", ПараметрыПечатиЦенниковИЭтикеток.УстановитьРежим);
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	СтруктураРезультат.Вставить("МассивДокументов", МассивПроведенныхДокументов);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//   Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПодготовитьСтруктуруДанныхЭтикетокСправокБЕГАИСДляПеремещенияТоваров(МассивДокументов, МассивНепроведенныхДокументов, ПараметрыПечатиЦенниковИЭтикеток) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Документы.МагазинПолучатель КАК МагазинПолучатель
	               |ИЗ
	               |	Документ.ПеремещениеТоваров КАК Документы
	               |ГДЕ
	               |	Документы.Ссылка В(&МассивДокументов)
	               |	И НЕ Документы.Ссылка В (&МассивНепроведенныхДокументов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Товары.Справка2 КАК Справка2,
				   |	ШК.Штрихкод как Штрихкод,
	               |	СУММА(Товары.Количество) КАК КоличествоЭтикеток,
	               |	Товары.Ссылка.СкладПолучатель.Организация КАК Организация
	               |ИЗ
	               |	Документ.ПеремещениеТоваров.Товары КАК Товары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК ШК
	               |		ПО Товары.Справка2 = ШК.Владелец
	               |ГДЕ
	               |	Товары.Ссылка В(&МассивДокументов)
	               |	И НЕ Товары.Ссылка В (&МассивНепроведенныхДокументов)
	               |	И НЕ Товары.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Товары.Справка2,
				   |	ШК.Штрихкод,
	               |	Товары.Ссылка.СкладПолучатель.Организация";
	
	Запрос.УстановитьПараметр("МассивНепроведенныхДокументов", МассивНепроведенныхДокументов);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Запрос.ВыполнитьПакет();
	Магазины = Результат[0].Выгрузить();
	
	// Подготовка структуры действий для обработки печати ценников и этикеток.
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьМагазин", ?(Магазины.Количество() = 1, Магазины[0].МагазинПолучатель, Неопределено));
	СтруктураДействий.Вставить("УстановитьРежим", ПараметрыПечатиЦенниковИЭтикеток.УстановитьРежим);
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Справки2ЕГАИС", Результат[1].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//   Адрес   - адрес структуры данных во временном хранилище.
//
Функция ПодготовитьСтруктуруДанныхЭтикетокСправокБЕГАИСДляТТНВходящаяЕГАИС(МассивДокументов, МассивНепроведенныхДокументов, ПараметрыПечатиЦенниковИЭтикеток) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Документы.ТорговыйОбъект КАК Магазин
	               |ИЗ
	               |	Документ.ТТНВходящаяЕГАИС КАК Документы
	               |ГДЕ
	               |	Документы.Ссылка В(&МассивДокументов)
	               |	И НЕ Документы.Ссылка В (&МассивНепроведенныхДокументов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Товары.Справка2 КАК Справка2,
	               |	СУММА(Товары.Количество) КАК Количество,
	               |	Товары.Ссылка.Организация КАК Организация
	               |ИЗ
	               |	Документ.ТТНВходящаяЕГАИС.Товары КАК Товары
	               |ГДЕ
	               |	Товары.Ссылка В(&МассивДокументов)
	               |	И НЕ Товары.Ссылка В (&МассивНепроведенныхДокументов)
	               |	И НЕ Товары.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Товары.Справка2,
	               |	Товары.Ссылка.Организация";
	
	Запрос.УстановитьПараметр("МассивНепроведенныхДокументов", МассивНепроведенныхДокументов);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Запрос.ВыполнитьПакет();
	Магазины = Результат[0].Выгрузить();
	Справки2 = Результат[1].Выгрузить();
	
	Если Справки2.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Нет данных для печати этикеток справок 2'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	// Подготовка структуры действий для обработки печати ценников и этикеток.
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьМагазин", ?(Магазины.Количество() = 1, Магазины[0].Магазин, Неопределено));
	СтруктураДействий.Вставить("УстановитьРежим", ПараметрыПечатиЦенниковИЭтикеток.УстановитьРежим);
	СтруктураДействий.Вставить("ИспользоватьСправкиБ", Истина);
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров", Истина);
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу", Истина);
	
	// Подготовка данных для заполнения табличной части обработки печати ценников и этикеток.
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Справки2ЕГАИС", Справки2);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	СтруктураРезультат.Вставить("МассивДокументов", МассивДокументов);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

// Функция подготавливает структуру
// параметров печати этикеток или ценников,
// используемую в командах печати этикеток или ценников,
// заполненную по умолчанию
// Возвращаемое значение
//	СтруктураПараметров - Структура - набор параметров.
Функция СтруктураПараметровПечатиЦенниковИЭтикеток() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяПроцедурыПодготовкиСтруктурыДанных", "УправлениеПечатьюРТВызовСервера.ПодготовитьСтруктуруДанныхЦенниковИЭтикеток");
	СтруктураПараметров.Вставить("УстановитьРежим", "");
	СтруктураПараметров.Вставить("ИмяДокумента", "");
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Функция помещает таблицу во временное хранилище 
// и возвращает адрес этой таблицы.
//
Функция АдресТаблицыВоВременномХранилище(Знач ТаблицаДляРазмещения) Экспорт
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаДляРазмещения.Выгрузить());
	
КонецФункции // АдресТаблицыВоВременномХранилище()

// Функция возвращает массив чеков ККМ-возвратов из переданного массива чеков ККМ.
Функция МассивВозвратовЧекККМ(МассивДокументов) Экспорт

	Если МассивДокументов.Количество() > 0 Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Документ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЧекККМ КАК Документ
		|ГДЕ
		|	Документ.Ссылка В(&МассивДокументов)
		|	И Документ.ВидОперации = Значение(Перечисление.ВидыОперацийЧекККМ.Возврат)");
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	Иначе

		Результат = Новый Массив;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция возвращает структуру: идентификатор ФР и ширину ленты.
//
Функция СтруктураПараметровПечатиТоварногоЧекаДляФР(МассивДокументов, РабочееМесто) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЧекККМ.КассаККМ КАК КассаККМ
	|ПОМЕСТИТЬ ТаблицаКасс
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КассаККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.ПодключаемоеОборудование КАК ИдентификаторУстройства,
	|	КассыККМ.ШиринаЛенты КАК ШиринаЛенты,
	|	ВЫБОР
	|		КОГДА КассыККМ.Ссылка В
	|				(ВЫБРАТЬ
	|					ТаблицаКасс.КассаККМ
	|				ИЗ
	|					ТаблицаКасс КАК ТаблицаКасс)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КассаИзДокументов
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.РабочееМесто = &РабочееМесто
	|	И КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
	|	И НЕ КассыККМ.ПометкаУдаления
	|	И НЕ КассыККМ.ШиринаЛенты = 0
	|	И НЕ КассыККМ.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассаИзДокументов,
	|	КассаККМ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Параметры.Вставить("МассивДокументов", МассивДокументов);
	Запрос.Параметры.Вставить("РабочееМесто"    , РабочееМесто);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("ИдентификаторУстройства", Выборка.ИдентификаторУстройства);
		СтруктураОтвета.Вставить("ШиринаЛенты"            , Выборка.ШиринаЛенты);
		
		Возврат СтруктураОтвета;
		
	КонецЕсли;
	
КонецФункции // СтруктураПараметровПечатиТоварногоЧекаДляФР()

// Возвращает строку для печати на ФР разбитую по ширине ленты.
//
Функция СтрокаПечатиНаФР(МассивДокументов, ШиринаЛенты) Экспорт
	
	Возврат Документы.ЧекККМ.ТекстПечатиЧекаНаФР(МассивДокументов, ШиринаЛенты);
	
КонецФункции // СтрокаПечатиНаФР()

// Возвращает соответствие физ лицо в именительном падеже к документам Возврат Товаров.
//
Функция СоответствиеФизЛицВИменительномПадежеВозвратовТоваров(МассивДокументов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Ссылка,
	|	ВозвратТоваровОтПокупателя.ФизЛицо
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	СоответствиеФизЛицИДокументов = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ФизЛицо) Тогда
			Если Не ТипЗнч(Выборка.ФизЛицо) = Тип("Строка")Тогда
				ФизЛицоФИО = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(, Новый Структура("ФизЛицо", Выборка.ФизЛицо)); 
				ФИОФизЛицаИП = ФизЛицоФИО.Фамилия + " " + ФизЛицоФИО.Имя + " " + ФизЛицоФИО.Отчество;

				Если СокрЛП(ФИОФизЛицаИП) = "" Тогда
					ФИОФизЛицаИП = Выборка.ФизЛицо.Наименование;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Выборка.ФизЛицо) = Тип("Строка") Тогда
				ФИОФизЛицаИП = Выборка.ФизЛицо;
			Иначе
				ФИОФизЛицаИП = ""
			КонецЕсли;
			СоответствиеФизЛицИДокументов.Вставить(Выборка.Ссылка, ФИОФизЛицаИП)
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеФизЛицИДокументов;
	
КонецФункции

// Возвращает соответствие физ лицо в именительном падеже к документам РКО.
//
Функция СоответствиеФизЛицВИменительномПадежеРКО(МассивДокументов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	СоответствиеФизЛицИДокументов = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ФизЛицо) Тогда
			Если Не ТипЗнч(Выборка.ФизЛицо) = Тип("Строка")Тогда
				ФизЛицоФИО = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(, Новый Структура("ФизЛицо", Выборка.ФизЛицо)); 
				ФИОФизЛицаИП = ФизЛицоФИО.Фамилия + " " + ФизЛицоФИО.Имя + " " + ФизЛицоФИО.Отчество;

				Если СокрЛП(ФИОФизЛицаИП) = "" Тогда
					ФИОФизЛицаИП = Выборка.ФизЛицо.Наименование;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Выборка.ФизЛицо) = Тип("Строка") Тогда
				ФИОФизЛицаИП = Выборка.ФизЛицо;
			Иначе
				ФИОФизЛицаИП = ""
			КонецЕсли;
			СоответствиеФизЛицИДокументов.Вставить(Выборка.Ссылка, ФИОФизЛицаИП)
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеФизЛицИДокументов;
	
КонецФункции

#Область РаботаСЖурналомУчетаСчетовФактур

// Формирует отчет «Журнал учета счетов-фактур»
Процедура ПодготовитьПараметрыЖурналаУчетаСчетовФактур (ПараметрыОтчета, АдресХранилища) Экспорт
	
	Отчеты.ЖурналУчетаСчетовФактур.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
	
КонецПроцедуры

// Возвращает версию постановления Правительства РФ от 26.12.2011 г. № 1137
//
// Параметры
// 	Период  - 	тип дата, в данном параметре передается
//            	дата на которую необходимо определить версию постановления
// Возвращаемое значение:
//  Число   - 	версия постановления, 
//				1 - исходная версия постановления Правительства РФ от 26.12.2011 г. № 1137
//              2 - постановление Правительства РФ от 26.12.2011 г. № 1137 в редакции постановления № 952
//              3 - постановление Правительства РФ от 26.12.2011 г. № 1137 в редакции постановления № 735
//
Функция ВерсияПостановленияНДС1137(Период) Экспорт
	
	Если Период >= '20141001' Тогда 		// Постановление № 735 вступает в силу с 1 октября 2014 года.
		Возврат 3;
	ИначеЕсли Период >= '20131106' Тогда 	// Постановление № 952 вступает в силу с 6 ноября 2013 года.
		Возврат 2;
	Иначе
		Возврат 1;                          // Исходная версия Постановления Правительства РФ от 26.12.2011 г. № 1137.
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// <Описание процедуры>
//
// Параметры:
//  ТабличныйДокумент  - Табличный документ, в который выводится опись номенклатуры
//  СтруктураПечати - Структура. Содержит реквизиты для заполнения табличного документа
//                  обязательные ключи "Документ", "КоличествоРеквизитов"
//  ПервыйДокумент - Булево;
//
Процедура ПечатьОписиНоменклатуры(ТабличныйДокумент, ОбъектыПечати, СтруктураПечати, ПервыйДокумент, ПараметрыПечати = Неопределено) Экспорт
	
	Если НЕ ПервыйДокумент Тогда
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ИспользоватьУпаковки = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ИспользоватьСерии    = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	ПервыйДокумент = Ложь;
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ОписьНоменклатуры");
	Если не ПараметрыПечати = Неопределено и ПараметрыПечати.Свойство("ПечатьПоДокументу") Тогда
		ПечатьПоДокументу = ПараметрыПечати.ПечатьПоДокументу;
	Иначе
		Документ = СтруктураПечати.Документ;
		ПечатьПоДокументу = Истина;
	КонецЕсли;
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.ТекстЗаголовка = НСтр("ru = 'Опись номенклатуры'");
	Если ПечатьПоДокументу Тогда
		ОбластьЗаголовок.Параметры.Документ = НСтр("ru = 'По документу: '") + Документ;
	Иначе
		ОбластьЗаголовок.Параметры.Документ = ПараметрыПечати.Основание;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	ЗначениеПоКлючу = Неопределено;
	
	Для Индекс = 1 По СтруктураПечати.КоличествоРеквизитов Цикл
		
		ОкончаниеСекцииТаблицы = Формат(Индекс, "ЧДЦ=; ЧГ=0");
		
		Если СтруктураПечати.Свойство("ИмяРеквизита" + ОкончаниеСекцииТаблицы, ЗначениеПоКлючу) Тогда
			ОбластьШапка.Параметры.ИмяРеквизита = ЗначениеПоКлючу;
		КонецЕсли;
		
		Если СтруктураПечати.Свойство("Реквизит" + ОкончаниеСекцииТаблицы, ЗначениеПоКлючу) Тогда
			ОбластьШапка.Параметры.Реквизит = ЗначениеПоКлючу;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
	КонецЦикла;
	
	ОбластьРазделительШапки = Макет.ПолучитьОбласть("РазделительШапки");
	ТабличныйДокумент.Вывести(ОбластьРазделительШапки);
	
	ОбластьКолонкаТоваров = Макет.Область("КолонкаТоваров");
	
	Основание = "";
	
	Если СтруктураПечати.Свойство("Основание", Основание) Тогда
		Если ЗначениеЗаполнено(Основание) Тогда
			ОбластьОснование = Макет.ПолучитьОбласть("Основание");
			ОбластьОснование.Параметры.Основание = Основание;
			ТабличныйДокумент.Вывести(ОбластьОснование);
			ТабличныйДокумент.Вывести(ОбластьРазделительШапки);
		КонецЕсли;
	КонецЕсли;
	
	ВыводитьКоды = Ложь;
	КолонкаКодов = "";
	
	Если СтруктураПечати.Свойство("ВыводитьКоды", ЗначениеПоКлючу) Тогда
		ВыводитьКоды = ЗначениеПоКлючу;
	КонецЕсли;
	
	Если НЕ ВыводитьКоды Тогда
		ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки
		                                    + Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	
	Если ПечатьПоДокументу Тогда
		ВыводСерий = ИспользоватьСерии И Документ.Серии.Количество() > 0;
	Иначе
		ВыводСерий = ИспользоватьСерии И ПараметрыПечати.Свойство("Серии");
	КонецЕсли;
	
	ОбластьШапкаНомера            = Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
	ОбластьШапкаКодов             = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьШапкаКолонкаТоваров    = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
	ОбластьШапкаКолонкиКоличества = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкиКоличества");
	
	ТабличныйДокумент.Вывести(ОбластьШапкаНомера);
	Если ВыводитьКоды Тогда
		Если СтруктураПечати.Свойство("КолонкаКодов", КолонкаКодов) Тогда
			ОбластьШапкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ТабличныйДокумент.Присоединить(ОбластьШапкаКодов);
		КонецЕсли;
	КонецЕсли;
	
	ТабличныйДокумент.Присоединить(ОбластьШапкаКолонкаТоваров);
	
	ТабличныйДокумент.Присоединить(ОбластьШапкаКолонкиКоличества);
	
	ОбластьСтрокаНомера            = Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
	ОбластьСтрокаКодов             = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
	ОбластьСтрокаКолонкаТоваров    = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
	ОбластьСтрокаКолонкиКоличества = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкиКоличества");
	
	Если ВыводСерий Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Количество
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	&Товары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ УникальныеТовары
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСерий.Номенклатура,
		|	ТаблицаСерий.Характеристика,
		|	ТаблицаСерий.Серия,
		|	ТаблицаСерий.Количество
		|ПОМЕСТИТЬ ТаблицаСерий
		|ИЗ
		|	&Серии КАК ТаблицаСерий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УникальныеТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕ(УникальныеТовары.Характеристика) КАК ХарактеристикаПредставление,
		|	" + ?(ВыводитьКоды, "УникальныеТовары.Номенклатура." + КолонкаКодов +" КАК КолонкаКодов,", "") + "
		|	ЕСТЬNULL(ТаблицаСерий.Серия, """") КАК Серия,
		|	ЕСТЬNULL(ТаблицаСерий.Количество, УникальныеТовары.Количество) КАК Количество,
		|	ПРЕДСТАВЛЕНИЕ(УникальныеТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения
		|ИЗ
		|	УникальныеТовары КАК УникальныеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСерий КАК ТаблицаСерий
		|		ПО УникальныеТовары.Номенклатура = ТаблицаСерий.Номенклатура
		|			И УникальныеТовары.Характеристика = ТаблицаСерий.Характеристика";
		
		Если ПечатьПоДокументу Тогда
			Запрос.УстановитьПараметр("Товары", Документ.Товары.Выгрузить());
			Запрос.УстановитьПараметр("Серии" , Документ.Серии.Выгрузить());
		Иначе
			Запрос.УстановитьПараметр("Товары", ПараметрыПечати.Товары.Получить());
			Запрос.УстановитьПараметр("Серии" , ПараметрыПечати.Серии.Получить());
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		НомерСтроки = 0;
		Пока Выборка.Следующий() Цикл
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтрокаНомера.Параметры.НомерСтроки = НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьСтрокаНомера);
			
			НаименованиеТовар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.НоменклатураПредставление,Выборка.ХарактеристикаПредставление,,Выборка.Серия);
			
			Если ВыводитьКоды Тогда
				ОбластьСтрокаКодов.Параметры.ЗначениеКода = Выборка["КолонкаКодов"];
				ТабличныйДокумент.Присоединить(ОбластьСтрокаКодов);
			КонецЕсли;
			
			ОбластьСтрокаКолонкаТоваров.Параметры.Товар = НаименованиеТовар;
			ТабличныйДокумент.Присоединить(ОбластьСтрокаКолонкаТоваров);
			
			ОбластьСтрокаКолонкиКоличества.Параметры.Количество = Выборка.Количество;
			ОбластьСтрокаКолонкиКоличества.Параметры.ПредставлениеБазовойЕдиницыИзмерения = Выборка.ПредставлениеБазовойЕдиницыИзмерения;
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаКолонкиКоличества);
			
		КонецЦикла;
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Количество,
		|	ТаблицаТовары.Упаковка,
		|	ТаблицаТовары.КоличествоУпаковок
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	&Товары КАК ТаблицаТовары
		|	//////////////////////////////////////////////////////////////////////
		|	
		|	;
		|	ВЫБРАТЬ
		|	ДокументТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ДокументТовары.Характеристика) КАК ХарактеристикаПредставление,
		|	" + ?(ВыводитьКоды, "ДокументТовары.Номенклатура." + КолонкаКодов +" КАК КолонкаКодов,", "") + "
		|	ДокументТовары.Количество,
		|	ДокументТовары.Упаковка,
		|	ДокументТовары.КоличествоУпаковок,
		|	ДокументТовары.НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕ(ДокументТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
		|	ВЫБОР
		|		КОГДА ДокументТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(ДокументТовары.Упаковка.ЕдиницаИзмерения)
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ДокументТовары.Номенклатура.ЕдиницаИзмерения)
		|	КОНЕЦ КАК ЕдиницаИзмерения
		|ИЗ
		|	ТаблицаТовары КАК ДокументТовары
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументТовары.НомерСтроки";
		
		Если ПечатьПоДокументу Тогда
			Запрос.УстановитьПараметр("Товары", Документ.Товары.Выгрузить());
		Иначе
			Запрос.УстановитьПараметр("Товары", ПараметрыПечати.Товары.Получить());
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		НомерСтроки = 0;
		Пока Выборка.Следующий() Цикл
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтрокаНомера.Параметры.НомерСтроки = НомерСтроки;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаНомера);
			НаименованиеТовар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.НоменклатураПредставление,Выборка.ХарактеристикаПредставление);
			
			Если ВыводитьКоды Тогда
				ОбластьСтрокаКодов.Параметры.ЗначениеКода = Выборка["КолонкаКодов"];
				ТабличныйДокумент.Присоединить(ОбластьСтрокаКодов);
			КонецЕсли;
			
			ОбластьСтрокаКолонкаТоваров.Параметры.Товар = НаименованиеТовар;
			ТабличныйДокумент.Присоединить(ОбластьСтрокаКолонкаТоваров);
			
			ОбластьСтрокаКолонкиКоличества.Параметры.Количество = Выборка.Количество;
			ОбластьСтрокаКолонкиКоличества.Параметры.ПредставлениеБазовойЕдиницыИзмерения = Выборка.ПредставлениеБазовойЕдиницыИзмерения;
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаКолонкиКоличества);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбластьПодвалТаблицыНомера            = Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
	ОбластьПодвалТаблицыКодов             = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
	ОбластьПодвалТаблицыКолонкаТоваров    = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
	ОбластьПодвалТаблицыКолонкиКоличества = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкиКоличества");
	
	ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНомера);
	Если ВыводитьКоды Тогда
		Если СтруктураПечати.Свойство("КолонкаКодов", КолонкаКодов) Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКодов);
		КонецЕсли;
	КонецЕсли;
	
	ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
	ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкиКоличества);
	
	ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
	ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%'");
	ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", НомерСтроки);
	ОбластьПодписи.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
	ТабличныйДокумент.Вывести(ОбластьПодписи);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СтруктураПечати.Документ);
	
КонецПроцедуры

//Печать ценников с помощью внешней компоненты
Функция ПечатьЦенников(СтруктураДокументов, Устройство) Экспорт
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("Режим", "ПечатьЦенников");
	ПараметрыПечати.Вставить("РежимПечати", "Ценники");
	КомпонентаПодключена = ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПечатиНаСервере", "ServerPrint", ТипВнешнейКомпоненты.Native);
	Компонента = Новый("AddIn.ServerPrint.ServerPrinting");
	ПринтерПечати = Устройство.ПринтерПечати;
	
	ШаблонПринтера = Устройство.ШаблонЦенника.Шаблон.Получить();
	
	ТаблицаЦенников = Новый ТаблицаЗначений;
	ТаблицаЦенников.Колонки.Добавить("Номенклатура");
	ТаблицаЦенников.Колонки.Добавить("Характеристика");
	ТаблицаЦенников.Колонки.Добавить("Упаковка");
	ТаблицаЦенников.Колонки.Добавить("Штрихкод");
	ТаблицаЦенников.Колонки.Добавить("ШтрихАвтопроверки");
	ТаблицаЦенников.Колонки.Добавить("КоличествоЦенников");
	ТаблицаЦенников.Колонки.Добавить("ШаблонЦенника");
	
	Для Каждого Строка Из СтруктураДокументов Цикл
		
		КоличествоЦенников = Строка.КоличествоЦенников;
		
		Если Не ЗначениеЗаполнено(Строка.ШаблонЦенника) Тогда
			Шаблон = Устройство.ШаблонЦенника;
		Иначе
			Шаблон = Строка.ШаблонЦенника;
		КонецЕсли;
		ЦенникиНаСтранице = Шаблон.КоличествоПоВертикали * Шаблон.КоличествоПоГоризонтали;
		
		Пока КоличествоЦенников <> 0 Цикл
			
			Если ЦенникиНаСтранице < Строка.КоличествоЦенников Тогда
				Строка.КоличествоЦенников = ЦенникиНаСтранице;
				КоличествоЦенников = КоличествоЦенников - ЦенникиНаСтранице;
			Иначе
				Строка.КоличествоЦенников = КоличествоЦенников;
				КоличествоЦенников = 0;
			КонецЕсли;
			
			Товар = ТаблицаЦенников.Добавить();
			ЗаполнитьЗначенияСвойств(Товар, Строка,, "ШаблонЦенника");
			Товар.ШаблонЦенника = Шаблон;
			
		КонецЦикла;
		
	КонецЦикла;
	
	КоллекцияПечатныхФорм = СформироватьПечатныеФормы("Ценники", ПараметрыПечати, ТаблицаЦенников, Устройство);
	ТабличныеДокументы = СоздатьРеквизитыИЭлементыФормыДляПечатныхФорм(КоллекцияПечатныхФорм);
	
	Для Каждого Документ Из ТабличныеДокументы Цикл
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
		Документ.Значение.Записать(ИмяВременногоФайла, "pdf");
		ДвоичныеДанныеPDF = Новый ДвоичныеДанные(ИмяВременногоФайла);
		ФайлДляУдаления = ИмяВременногоФайла;
		УдалитьФайлы(ИмяВременногоФайла);
		СтрокаBase64 = Base64Строка(ДвоичныеДанныеPDF);
		РаспечататьЦенники = Компонента.PrintTabDoc(СтрокаBase64, ПринтерПечати);
		
	КонецЦикла;
	
	Результат = Истина;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьПечатныеФормы(ИмяМакета, ПараметрыПечати, СтруктураДокументов, Устройство)
	
	Результат = Неопределено;
	// Формирование табличных документов.
	ТипыОбъектовПечати = Новый Массив;
	ПараметрыПечати.Свойство("ТипыОбъектовПечати", ТипыОбъектовПечати);
	ПечатныеФормы = ЗаполнитьПечатныеФормы(ИмяМакета, ПараметрыПечати, СтруктураДокументов, Устройство);
	
	ОбъектыПечати = ПечатныеФормы.ОбъектыПечати;
	ПараметрыВывода = ПечатныеФормы.ПараметрыВывода;
	Результат = ПечатныеФормы.КоллекцияПечатныхФорм;
	
	Если Результат.Количество() = 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьПечатныеФормы(ИмяМакета, ПараметрыПечати, СтруктураДокументов, Устройство)
	
	КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(Новый Массив);
	ОбъектыПечати = Новый СписокЗначений;
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ДоступнаПечатьПоКомплектно", Ложь); // не используется
	
	СтруктураПараметровПисьма = Новый Структура("Получатель,Тема,Текст", Неопределено, "", "");
	ПараметрыВывода.Вставить("ПараметрыОтправки", СтруктураПараметровПисьма);
	
	Если ТипЗнч(ИмяМакета) = Тип("Строка") Тогда
		ИмяМакета = СтрРазделить(ИмяМакета, ",");
	Иначе // Тип("Массив")
		ИмяМакета = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИмяМакета);
	КонецЕсли;
	
	ВременнаяКоллекцияДляОднойПечатнойФормы = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(ИмяМакета);
	
	ЗаполнитьТабличныеДокументыПечатнойФормы(ПараметрыПечати, СтруктураДокументов, ВременнаяКоллекцияДляОднойПечатнойФормы, ПараметрыВывода, Устройство);
	
	// Проверка корректности заполнения коллекции печатных форм, полученной из менеджера печати.
	Для Каждого ОписаниеПечатнойФормы Из ВременнаяКоллекцияДляОднойПечатнойФормы Цикл
		ОбщегоНазначенияКлиентСервер.Проверить(
			ТипЗнч(ОписаниеПечатнойФормы.Экземпляров) = Тип("Число") И ОписаниеПечатнойФормы.Экземпляров > 0,
			СтрШаблон(НСтр("ru = 'Не задано количество экземпляров для печатной формы ""%1"".'"),
			?(ПустаяСтрока(ОписаниеПечатнойФормы.СинонимМакета), ОписаниеПечатнойФормы.ИмяМакета, ОписаниеПечатнойФормы.СинонимМакета)));
	КонецЦикла;
	
	Отказ = Ложь;
	// обновление коллекции
	// Предполагается одна печатная форма, но для обратной совместимости принимается вся коллекция.
	Для Каждого ВременнаяПечатнаяФорма Из ВременнаяКоллекцияДляОднойПечатнойФормы Цикл 
		Если ВременнаяПечатнаяФорма.ТабличныйДокумент <> Неопределено Тогда
			ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
			ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ВременнаяПечатнаяФорма);
			Если ВременнаяКоллекцияДляОднойПечатнойФормы.Количество() = 1 Тогда
				ПечатнаяФорма.ИмяМакета = ВременнаяКоллекцияДляОднойПечатнойФормы[0].ИмяМакета;
				ПечатнаяФорма.ИмяВРЕГ = ВременнаяКоллекцияДляОднойПечатнойФормы[0].ИмяВРЕГ;
			КонецЕсли;
		Иначе
			// Возникла ошибка при формировании печатной формы.
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
		
		// Вызов исключения при возникновении ошибки.
	Если Отказ Тогда
		ТекстСообщенияОбОшибке = СтрШаблон(НСтр(
			"ru = 'При формировании печатной формы ""%1"" возникла ошибка. Обратитесь к администратору.'"), ИмяМакета);
		ВызватьИсключение ТекстСообщенияОбОшибке;
	КонецЕсли;
		
	// Установка количества экземпляров табличным документам.
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		Если ПечатнаяФорма.ТабличныйДокумент <> Неопределено Тогда
			ПечатнаяФорма.ТабличныйДокумент.КоличествоЭкземпляров = ПечатнаяФорма.Экземпляров;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("КоллекцияПечатныхФорм", КоллекцияПечатныхФорм);
	Результат.Вставить("ОбъектыПечати", ОбъектыПечати);
	Результат.Вставить("ПараметрыВывода", ПараметрыВывода);
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТабличныеДокументыПечатнойФормы(ПараметрыПечати, СтруктураДокументов, КоллекцияПечатныхФорм, ПараметрыВывода, Устройство)
	
	РежимПечати = "";
	Если ПараметрыПечати.Свойство("РежимПечати") Тогда
		РежимПечати = ПараметрыПечати.РежимПечати;
	КонецЕсли;
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИсходныеДанные"     , Неопределено); // Таблица с произвольными данными.
	СтруктураНастроек.Вставить("ОбязательныеПоля"   , Новый Массив); //
	СтруктураНастроек.Вставить("СоответствиеШаблоновИСтруктурыШаблонов" , Новый Соответствие); //
	СтруктураНастроек.Вставить("ПараметрыДанных"    , Новый Структура);
	СтруктураНастроек.Вставить("КомпоновщикНастроек", Неопределено); // Отбор
	СтруктураНастроек.Вставить("ИмяМакетаСхемыКомпоновкиДанных" , Неопределено);
	СоответствиеШаблонов = Новый Соответствие;
	
	СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоЦенниковДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоЭтикетокДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЦенникаДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЭтикеткиДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ШтрихАвтопроверки");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Упаковка");
	КонецЕсли;
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблона";
	// Собираем используемые поля из шаблонов.
	ТаблицаШаблонов = СтруктураДокументов.ВыгрузитьКолонку("ШаблонЦенника");
	
	ПечататьЭтикетки = Истина;
	ПечататьЦенники = Истина;
	Если КоллекцияПечатныхФорм.Количество() > 0 Тогда
		ПечататьЦенники = КоллекцияПечатныхФорм[0].ИмяМакета = "Ценники";
		ПечататьЭтикетки = КоллекцияПечатныхФорм[0].ИмяМакета = "Этикетки";
	КонецЕсли;
		
	Для Каждого СтрокаТЧ Из ТаблицаШаблонов Цикл
		
		Если ПечататьЦенники И СтрокаТЧ.ТипШаблона <> Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
			СоответствиеШаблонов.Вставить(СтрокаТЧ.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
		
		// Заполняем коллекцию обязательных полей и формируем соответствие шаблонов.
	Для Каждого КлючИЗначение Из СоответствиеШаблонов Цикл
		СтруктураШаблона = КлючИЗначение.Ключ.Шаблон.Получить();
			
			// Структура шаблонов.
		СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Вставить(КлючИЗначение.Ключ, СтруктураШаблона);
			
			// Добавляем в массив обязательных полей поля, присутствующие в печатной форме ценника.
		Если СтруктураШаблона <> Неопределено
			И ТипЗнч(СтруктураШаблона) = Тип("Структура")
			И СтруктураШаблона.Свойство("ПараметрыШаблона") Тогда
			Для Каждого Элемент Из СтруктураШаблона.ПараметрыШаблона Цикл
				СтруктураНастроек.ОбязательныеПоля.Добавить(Элемент.Ключ);
			КонецЦикла;
		КонецЕсли;
			
	КонецЦикла;
		
	// Подготовка исходных данных.
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ИсходныеДанные.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ИсходныеДанные.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ИсходныеДанные.Колонки.Добавить("КоличествоЦенников", Новый ОписаниеТипов("Число"));
	ИсходныеДанные.Колонки.Добавить("ШаблонЦенника", Новый ОписаниеТипов("СправочникСсылка.ХранилищеШаблонов"));
	ИсходныеДанные.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ИсходныеДанные.Колонки.Добавить("ШтрихАвтопроверки", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
		
		
	Для Каждого Строка Из СтруктураДокументов Цикл
		
		ИсходныеДанныеСтрока = ИсходныеДанные.Добавить();
		ИсходныеДанныеСтрока.Номенклатура = Строка.Номенклатура;
		ИсходныеДанныеСтрока.Характеристика = Строка.Характеристика;
		ИсходныеДанныеСтрока.Упаковка = Строка.Упаковка;
		ИсходныеДанныеСтрока.КоличествоЦенников = Строка.КоличествоЦенников;
		ИсходныеДанныеСтрока.ШаблонЦенника = Строка.ШаблонЦенника;
		ИсходныеДанныеСтрока.Организация = Устройство.ПравилоОбмена.Склад.Организация;
		ИсходныеДанныеСтрока.ШтрихАвтопроверки = Строка.ШтрихАвтопроверки;
		
	КонецЦикла;
		
	Для Каждого СтрокаТЧ Из ИсходныеДанные Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ШаблонЦенника) Тогда
			СтрокаТЧ.КоличествоЦенников = 0;
		КонецЕсли;
	КонецЦикла;
		
	СтруктураНастроек.ПараметрыДанных.Вставить("ВидЦены",     Устройство.ПравилоОбмена.Склад.Магазин.ПравилоЦенообразования.ВидЦен);
	СтруктураНастроек.ПараметрыДанных.Вставить("Магазин", Устройство.ПравилоОбмена.Склад.Магазин);
	СтруктураНастроек.ПараметрыДанных.Вставить("ПравилоЦенообразования", Устройство.ПравилоОбмена.Склад.Магазин.ПравилоЦенообразования);
	СтруктураНастроек.ПараметрыДанных.Вставить("МагазинДляЦен", Устройство.ПравилоОбмена.Склад.Магазин);
	СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныПоВидуЦены", Ложь);
	СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныНаДату", ТекущаяДата());
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПрименениеЦен") Тогда
		СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныНазначенныеДействующие", Истина);
	КонецЕсли;
	СтруктураНастроек.ПараметрыДанных.Вставить("ВидМинимальныхЦенПродажи", Устройство.ПравилоОбмена.Склад.Магазин.ВидМинимальныхЦенПродажи);
	СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныМинимальные", Истина);
	СтруктураНастроек.ИсходныеДанные = ИсходныеДанные;
	
	// Вывод табличных документов в коллекцию.
	КоллекцияПечатныхФормВнутренняя = СформироватьПечатныеФормыЭтикетокИЦенников(СтруктураНастроек, ПечататьЭтикетки, ПечататьЦенники);
	КоллекцияПечатныхФорм.Очистить();
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФормВнутренняя Цикл
		
		НоваяФорма = КоллекцияПечатныхФорм.Добавить();
		НоваяФорма.ИмяМакета         = ПечатнаяФорма.ИмяМакета;
		НоваяФорма.СинонимМакета     = ПечатнаяФорма.ИмяМакета;
		НоваяФорма.ИмяВРЕГ           = ВРег(ПечатнаяФорма.ИмяМакета);
		НоваяФорма.ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
		НоваяФорма.Экземпляров       = 1;
		
	КонецЦикла;
		
КонецПроцедуры

Функция СформироватьПечатныеФормыЭтикетокИЦенников(СтруктураНастроек, ПечататьЭтикетки, ПечататьЦенники)
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	// Подготовка коллекции печатных форм.
	КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("ТабличныйДокумент");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяКолонкиКоличество");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяКолонкиШаблон");
	КоллекцияПечатныхФорм.Колонки.Добавить("Шаблон");
	
	Для Каждого КлючИЗначение Из СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов Цикл
		Если ПечататьЦенники Тогда
			ПечатнаяФорма = КоллекцияПечатныхФорм.Добавить();
			ПечатнаяФорма.ИмяМакета            = "Ценник: " + КлючИЗначение.Ключ;
			ПечатнаяФорма.ИмяКолонкиКоличество = "КоличествоЦенниковДляПечати";
			ПечатнаяФорма.ИмяКолонкиШаблон     = "ШаблонЦенникаДляПечати";
			ПечатнаяФорма.Шаблон = КлючИЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		
		НомерКолонки = 0;
		НомерРяда = 0;
		СтруктураШаблона = Новый Структура;
		СтруктураШаблона.Вставить("Шаблон", ПечатнаяФорма.Шаблон);
		СтруктураШаблона.Вставить("ИмяКолонкиШаблон", ПечатнаяФорма.ИмяКолонкиШаблон);
		СтруктураРезультата = ПодготовитьСтруктуруДанных(СтруктураНастроек, СтруктураШаблона);
		
		ВременныйТабличныйДокумент = Новый ТабличныйДокумент;
		
		Для Каждого СтрокаТовары Из СтруктураРезультата.ТаблицаТоваров Цикл
			
			Если СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество] > 0
				И СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон] = ПечатнаяФорма.Шаблон Тогда
				
				СтруктураШаблона = СтруктураНастроек.СоответствиеШаблоновИСтруктурыШаблонов.Получить(СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон]);
				
				Если ПечатнаяФорма.ТабличныйДокумент = Неопределено Тогда
					
					Если СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон].ТипШаблона <> Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
						ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
					Иначе
						ПечатнаяФорма.ТабличныйДокумент = Новый Структура;
						ПечатнаяФорма.ТабличныйДокумент.Вставить("XML", СтруктураШаблона.XMLОписаниеМакета);
						ПечатнаяФорма.ТабличныйДокумент.Вставить("Этикетки", Новый Массив);
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтруктураШаблона <> Неопределено 
					И ТипЗнч(СтруктураШаблона) = Тип("Структура")
					И СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон].ТипШаблона <> Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
					
					Область = СтруктураШаблона.МакетЭтикетки.ПолучитьОбласть(СтруктураШаблона.ИмяОбластиПечати);
					
					ПроверятьВывод = Ложь;
					
					Для ИндексСтроки = 1 По Область.ВысотаТаблицы Цикл
						
						Если Область.Область("R" + Формат(ИндексСтроки, "ЧН=0; ЧГ=0")).АвтоВысотаСтроки Тогда
							ПроверятьВывод = Истина;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					// Применение настроек табличного документа.
					ЗаполнитьЗначенияСвойств(ПечатнаяФорма.ТабличныйДокумент, СтруктураШаблона.МакетЭтикетки, , "ОбластьПечати");
					
					Для каждого ПараметрШаблона Из СтруктураШаблона.ПараметрыШаблона Цикл
						Если ЕстьРеквизитОбъекта(Область.Параметры, ПараметрШаблона.Значение) Тогда
							НаименованиеКолонки = СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(Справочники.ХранилищеШаблонов.ИмяПоляВШаблоне(ПараметрШаблона.Ключ));
							Если НаименованиеКолонки <> Неопределено Тогда
								// служебные поля
								Область.Параметры[ПараметрШаблона.Значение] = СтрокаТовары[НаименованиеКолонки];
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Для каждого Рисунок Из Область.Рисунки Цикл
						Если Лев(Рисунок.Имя,8) = ПолучитьИмяПараметраШтрихкод() ИЛИ Лев(Рисунок.Имя,13) = ПолучитьИмяПараметраШтрихкодСправкиБ()
							ИЛИ Лев(Рисунок.Имя,17) = ПолучитьИмяПараметраШтрихАвтопроверки() Тогда
							
							Если Лев(Рисунок.Имя,8) = ПолучитьИмяПараметраШтрихкод() Тогда
								ЗначениеШтрихкода = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(ПолучитьИмяПараметраШтрихкод())];
							ИначеЕсли Лев(Рисунок.Имя,13) = ПолучитьИмяПараметраШтрихкодСправкиБ() Тогда
								ЗначениеШтрихкода = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(ПолучитьИмяПараметраШтрихкодСправкиБ())];
							ИначеЕсли Лев(Рисунок.Имя,17) = ПолучитьИмяПараметраШтрихАвтопроверки() Тогда
								ЗначениеШтрихкода = СтрокаТовары[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить(ПолучитьИмяПараметраШтрихАвтопроверки())];
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
								
								ПараметрыШтрихкода = Новый Структура;
								ПараметрыШтрихкода.Вставить("Ширина",	Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
								ПараметрыШтрихкода.Вставить("Высота",	Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
								
								Если СтруктураШаблона.ТипКода = 16 Тогда
									МинСторона = Мин(ПараметрыШтрихкода.Ширина, ПараметрыШтрихкода.Высота);
									ПараметрыШтрихкода.Ширина = МинСторона;
									ПараметрыШтрихкода.Высота = МинСторона;
								КонецЕсли;
								
								Если СтруктураШаблона.Свойство("УровеньКоррекцииQR") Тогда
									ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", СтруктураШаблона.УровеньКоррекцииQR);
								Иначе
									ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0);
								КонецЕсли;
								
								ПараметрыШтрихкода.Вставить("Штрихкод",				ЗначениеШтрихкода);
								ПараметрыШтрихкода.Вставить("ТипКода",				СтруктураШаблона.ТипКода);
								ПараметрыШтрихкода.Вставить("ОтображатьТекст",		СтруктураШаблона.ОтображатьТекст);
								ПараметрыШтрихкода.Вставить("РазмерШрифта",			СтруктураШаблона.РазмерШрифта);
								
								Если СтруктураШаблона.Свойство("УголПоворота") Тогда
									ПараметрыШтрихкода.Вставить("УголПоворота", СтруктураШаблона.УголПоворота);
								КонецЕсли;
								
								Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
								
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					
					Для Инд = 1 По СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество] Цикл // Цикл по количеству экземпляров.
						
						МассивОбластей = Новый Массив;
						МассивОбластей.Добавить(Область);
						
						Если ПроверятьВывод И НЕ ВременныйТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда
							ПечатнаяФорма.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
							НомерРяда    = 0;
							НомерКолонки = 0;
							ВременныйТабличныйДокумент.Очистить();
						КонецЕсли;
						
						НомерКолонки = НомерКолонки + 1;
						
						Если НомерКолонки = 1 Тогда
							
							НомерРяда = НомерРяда + 1;
							
							ПечатнаяФорма.ТабличныйДокумент.Вывести(Область);
							ВременныйТабличныйДокумент.Вывести(Область);
							
						Иначе
							
							ПечатнаяФорма.ТабличныйДокумент.Присоединить(Область);
							ВременныйТабличныйДокумент.Присоединить(Область);
							
						КонецЕсли;
						
						Если НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали И НомерРяда = СтруктураШаблона.КоличествоПоВертикали Тогда
							
							НомерРяда    = 0;
							НомерКолонки = 0;
							
							ПечатнаяФорма.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
							ВременныйТабличныйДокумент.Очистить();
							
						ИначеЕсли НомерКолонки = СтруктураШаблона.КоличествоПоГоризонтали Тогда
							
							НомерКолонки = 0;
							
						КонецЕсли;
						
					КонецЦикла; // Цикл по количеству экземпляров.
					
				КонецЕсли;
				
				Если СтруктураШаблона <> Неопределено 
					И ТипЗнч(СтруктураШаблона) = Тип("Структура")
					И СтрокаТовары[ПечатнаяФорма.ИмяКолонкиШаблон].ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
					Поля = Новый Массив;
					Для Каждого ТекПоле Из СтруктураШаблона.ПоляМакета Цикл			
						Если ТекПоле.ТипЗаполнения = "Parameter" Тогда							
							НовоеПоле = Новый Структура;
							НовоеПоле.Вставить("ИмяПоля", ТекПоле.Наименование);							
							Попытка
								Значение = Вычислить("СтрокаТовары." + ТекПоле.Значение);
							Исключение
								Значение = "";
							КонецПопытки;							
							Если ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда								
								Значение = Значение.Получить();								
								Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
									Значение = Base64Строка(Значение);
								Иначе
									Значение = Строка(Значение);
								КонецЕсли;								
							ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.НоменклатураПрисоединенныеФайлы") Тогда
								
								Если Значение.ТипХраненияФайла = ПредопределенноеЗначение("Перечисление.ТипыХраненияФайлов.ВИнформационнойБазе") Тогда
									АдресХранилища = РаботаСФайлами.ДанныеФайла(Значение, , Истина).СсылкаНаДвоичныеДанныеФайла;
									Значение = ПолучитьИзВременногоХранилища(АдресХранилища);
								КонецЕсли;
								
								Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
									Значение = Base64Строка(Значение);
								Иначе
									Значение = Строка(Значение);
								КонецЕсли;
								
							КонецЕсли;							
							Если ЗначениеЗаполнено(Значение) Тогда
								НовоеПоле.Вставить("Значение", Значение);
							Иначе								
								Если ЗначениеЗаполнено(ТекПоле.ЗначениеПоУмолчанию) Тогда						
									НовоеПоле.Вставить("Значение", ТекПоле.ЗначениеПоУмолчанию);
								Иначе
									НовоеПоле.Вставить("Значение", "");
								КонецЕсли;								
							КонецЕсли;
							
							Поля.Добавить(НовоеПоле);
														
						КонецЕсли;
						
					КонецЦикла;
					НоваяЭтикетка = Новый Структура;
					НоваяЭтикетка.Вставить("Количество", СтрокаТовары[ПечатнаяФорма.ИмяКолонкиКоличество]);
					НоваяЭтикетка.Вставить("ЗначенияПолей", Поля);
					ПечатнаяФорма.ТабличныйДокумент.Этикетки.Добавить(НоваяЭтикетка);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по строкам таблицы товаров.
		
	КонецЦикла;
	
	МассивСтрокДляУдаления = Новый Массив;
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		Если ПечатнаяФорма.ТабличныйДокумент = Неопределено Тогда
			МассивСтрокДляУдаления.Добавить(ПечатнаяФорма);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ПечатнаяФорма Из МассивСтрокДляУдаления Цикл
		КоллекцияПечатныхФорм.Удалить(ПечатнаяФорма);
	КонецЦикла;
	
	Возврат КоллекцияПечатныхФорм;
	
КонецФункции

Функция ПолучитьИмяПараметраШтрихкод()
	
	Возврат "Штрихкод";
	
КонецФункции

Функция ПолучитьИмяПараметраШтрихкодСправкиБ()
	
	Возврат "ШтрихСправкиБ";
	
КонецФункции

Функция ПолучитьИмяПараметраШтрихАвтопроверки()
	
	Возврат "ШтрихАвтопроверки";
	
КонецФункции

// Функция определяет существует ли реквизит у формы.
//
Функция ЕстьРеквизитОбъекта(Объект, ИмяРеквизита)
	
	КлючУникальности   = Новый УникальныйИдентификатор;

	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);

	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

// Функция подготавливает структуру данных, необходимую для печати ценников и этикеток.
//
// Возвращаемое значение:
//  Структура - данные, необходимые для печати этикеток и ценников.
//
Функция ПодготовитьСтруктуруДанных(СтруктураНастроек, СтруктураШаблона = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = Неопределено;
	
	Если СтруктураШаблона = Неопределено Тогда
		ТаблицаИсходныеДанные = СтруктураНастроек.ИсходныеДанные;
	Иначе
		СтруктураОтбора = Новый Структура;
		ИмяКолонки = СтрЗаменить(СтруктураШаблона.ИмяКолонкиШаблон, "ДляПечати", "");
		СтруктураОтбора.Вставить(ИмяКолонки, СтруктураШаблона.Шаблон);
		ТаблицаИсходныеДанные = СтруктураНастроек.ИсходныеДанные.Скопировать(СтруктураОтбора);
		ХранилищеСКД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураШаблона.Шаблон, "СхемаКомпоновкиДанных");
		СхемаКомпоновкиДанных = ХранилищеСКД.Получить();
	КонецЕсли;
	
	СтруктураРезультата = ПолучитьПустуюСтруктуруРезультата();
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет(СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных);
	КонецЕсли;
	
	// Подготовка компоновщика макета компоновки данных.
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
	
	// Отбор компоновщика настроек.
	Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
		// Удаление некорректных отборов.
		Количество = СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество();
		Для Индекс = 1 По Количество Цикл
			ЭлементОтбора = СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы[Количество - Индекс];
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
				Если СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
					СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
		ОбщегоНазначенияРТКлиентСервер.СкопироватьЭлементы(Компоновщик.Настройки.Отбор, СтруктураНастроек.КомпоновщикНастроек.Настройки.Отбор);
		
	КонецЕсли;
	
	// Выбранные поля компоновщика настроек.
	Для Каждого ОбязательноеПоле Из СтруктураНастроек.ОбязательныеПоля Цикл
		ПолеСКД = КомпоновкаДанныхСервер.НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, ОбязательноеПоле);
		Если ПолеСКД <> Неопределено Тогда
			ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ПолеСКД.Поле;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение параметров.
	Для Каждого ПараметрДанных Из СтруктураНастроек.ПараметрыДанных Цикл
		Если ПараметрДанных.Ключ = "Склад" Тогда // Если склад не заполнен - не используем параметр.
			УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение, Ложь);
		Иначе
			УстановитьЗначениеПараметраСКД(Компоновщик, ПараметрДанных.Ключ, ПараметрДанных.Значение);
		КонецЕсли;
	КонецЦикла;
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущееВремя", ТекущаяДатаСеанса());
	УстановитьЗначениеПараметраСКД(Компоновщик, "ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	// Компоновка макета компоновки данных.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	
	Для каждого Поле Из МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Поля Цикл
		СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Вставить(Справочники.ХранилищеШаблонов.ИмяПоляВШаблоне(Поле.ПутьКДанным), Поле.Имя);
	КонецЦикла;
	
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	
	// Подмена запроса для расчета цен...
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда

		ЗаменяемыйТекст = "ЦеныНоменклатурыСрезПоследних.Цена";
		ТекстЗамены = " ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент, 1) * ЕСТЬNULL(ИсходныеДанныеПоследнийЗапрос.Упаковка.Коэффициент, 1) КАК Число(15,2))";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, ТекстЗамены);
		
	КонецЕсли;
	
	// Подмена запроса при печати этикеток...
	Если СтруктураНастроек.ИсходныеДанные = Неопределено Тогда
		Если СтруктураНастроек.Свойство("ТекстЗаменяемойТаблицы")
			И СтруктураНастроек.Свойство("ТекстТаблицыДляЗамены") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
										СтруктураНастроек.ТекстЗаменяемойТаблицы,
										СтруктураНастроек.ТекстТаблицыДляЗамены);
		КонецЕсли;
	Иначе
		
		Если СтруктураНастроек.Свойство("ТекстВременнойТаблицы") Тогда
			ТекстВременнойТаблицы = СтруктураНастроек.ТекстВременнойТаблицы;
		Иначе
			ТекстВременнойТаблицыСовместимостьССохраненнымиЭтикетками =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
			|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
			|		0 КАК Количество,
			|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация)";
			ТекстВременнойТаблицы =
			"	(ВЫБРАТЬ
			|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
			|		ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка) КАК Справка2,
			|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
			|		0 КАК Количество,
			|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация)";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицыСовместимостьССохраненнымиЭтикетками, "&Таблица");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстВременнойТаблицы, "&Таблица");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """КоличествоЦенников""", "ИсходныеДанные.КоличествоЦенников");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШаблонЦенника""", "ИсходныеДанные.ШаблонЦенника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """Организация""", "ИсходныеДанные.Организация");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """Штрихкод""", "ИсходныеДанные.Штрихкод");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ШтрихАвтопроверки""", "ИсходныеДанные.ШтрихАвтопроверки");
		
		Если ТаблицаИсходныеДанные.Колонки.Найти("Справка2") = Неопределено Тогда
			ТаблицаИсходныеДанные.Колонки.Добавить("Справка2", Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Таблица", ТаблицаИсходныеДанные);
		
	КонецЕсли;
	
	СтруктураРезультата.ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Возврат СтруктураРезультата;
	
КонецФункции

Функция УстановитьЗначениеПараметраСКД(КомпоновщикНастроек, ИмяПараметра, ЗначениеПараметра, ИспользоватьНеЗаполненный = Истина)
	
	ПараметрУстановлен = Ложь;
	
	ПараметрВидЦены = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЗначениеПараметраВидЦены = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрВидЦены);
	Если ЗначениеПараметраВидЦены <> Неопределено Тогда
		
		ЗначениеПараметраВидЦены.Значение = ЗначениеПараметра;
		ЗначениеПараметраВидЦены.Использование = ?(ИспользоватьНеЗаполненный, Истина, ЗначениеЗаполнено(ЗначениеПараметраВидЦены.Значение));
		
		ПараметрУстановлен = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрУстановлен;
	
КонецФункции

Функция СоздатьРеквизитыИЭлементыФормыДляПечатныхФорм(КоллекцияПечатныхФорм)
	
	// Создание реквизитов для табличных документов.
	НовыеРеквизитыФормы = Новый Массив;
	Для НомерПечатнойФормы = 1 По КоллекцияПечатныхФорм.Количество() Цикл
		ИмяРеквизита = "ПечатнаяФорма" + Формат(НомерПечатнойФормы,"ЧГ=0");
		РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("ТабличныйДокумент"),,КоллекцияПечатныхФорм[НомерПечатнойФормы - 1].СинонимМакета);
		НовыеРеквизитыФормы.Добавить(РеквизитФормы);
	КонецЦикла;
	//ИзменитьРеквизиты(НовыеРеквизитыФормы);
	
	// Создание страниц с табличными документами на форме.
	НомерПечатнойФормы = 0;
	ДобавленныеНастройкиПечатныхФорм = Новый Соответствие;
	НастройкиПечатныхФорм = Новый ТаблицаЗначений;
	НастройкиПечатныхФорм.Колонки.Добавить("Представление");
	НастройкиПечатныхФорм.Колонки.Добавить("Печатать");
	НастройкиПечатныхФорм.Колонки.Добавить("Количество");
	НастройкиПечатныхФорм.Колонки.Добавить("ИмяМакета");
	НастройкиПечатныхФорм.Колонки.Добавить("ПозицияПоУмолчанию");
	НастройкиПечатныхФорм.Колонки.Добавить("Название");
	НастройкиПечатныхФорм.Колонки.Добавить("ПутьКМакету");
	НастройкиПечатныхФорм.Колонки.Добавить("ИмяФайлаПечатнойФормы");
	НастройкиПечатныхФорм.Колонки.Добавить("ИмяРеквизита");
	НастройкиПечатныхФорм.Колонки.Добавить("ТабличныйДокумент");
	
	Для Каждого РеквизитФормы Из НовыеРеквизитыФормы Цикл
		ОписаниеПечатнойФормы = КоллекцияПечатныхФорм[НомерПечатнойФормы];
		
		// Таблица настроек печатных форм (начало).
		НоваяНастройкаПечатнойФормы = НастройкиПечатныхФорм.Добавить();
		НоваяНастройкаПечатнойФормы.Представление = ОписаниеПечатнойФормы.СинонимМакета;
		НоваяНастройкаПечатнойФормы.Печатать = ОписаниеПечатнойФормы.Экземпляров > 0;
		НоваяНастройкаПечатнойФормы.Количество = ОписаниеПечатнойФормы.Экземпляров;
		НоваяНастройкаПечатнойФормы.ИмяМакета = ОписаниеПечатнойФормы.ИмяМакета;
		НоваяНастройкаПечатнойФормы.ПозицияПоУмолчанию = НомерПечатнойФормы;
		НоваяНастройкаПечатнойФормы.Название = ОписаниеПечатнойФормы.СинонимМакета;
		НоваяНастройкаПечатнойФормы.ПутьКМакету = ОписаниеПечатнойФормы.ПолныйПутьКМакету;
		НоваяНастройкаПечатнойФормы.ИмяФайлаПечатнойФормы = ОбщегоНазначения.ЗначениеВСтрокуXML(ОписаниеПечатнойФормы.ИмяФайлаПечатнойФормы);
		НоваяНастройкаПечатнойФормы.ИмяРеквизита = РеквизитФормы.Имя;
		НоваяНастройкаПечатнойФормы.ТабличныйДокумент = ОписаниеПечатнойФормы.ТабличныйДокумент;
		//РанееДобавленнаяНастройкаПечатнойФормы = ДобавленныеНастройкиПечатныхФорм[ОписаниеПечатнойФормы.ИмяМакета];
		
		НомерПечатнойФормы = НомерПечатнойФормы + 1;
	КонецЦикла;
	
	ТабличныеДокументы = Новый СписокЗначений;
	
	Для Каждого НастройкаПечатнойФормы Из НастройкиПечатныхФорм Цикл
		ПечатнаяФорма = НастройкаПечатнойФормы.ТабличныйДокумент;
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.Вывести(ПечатнаяФорма);
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ПечатнаяФорма, "АвтоМасштаб,Вывод,ВысотаСтраницы,ДвусторонняяПечать,Защита,ИмяПринтера,КодЯзыкаМакета,КоличествоЭкземпляров,МасштабПечати,ОриентацияСтраницы,ПолеСверху,ПолеСлева,ПолеСнизу,ПолеСправа,РазборПоКопиям,РазмерКолонтитулаСверху,РазмерКолонтитулаСнизу,РазмерСтраницы,ТочностьПечати,ЧерноБелаяПечать,ШиринаСтраницы,ЭкземпляровНаСтранице");
		ТабличныйДокумент.КоличествоЭкземпляров = НастройкаПечатнойФормы.Количество;
		ТабличныеДокументы.Добавить(ТабличныйДокумент, НастройкаПечатнойФормы.Представление);
	КонецЦикла;
	
	Возврат ТабличныеДокументы;
	
КонецФункции

Функция ПолучитьПустуюСтруктуруРезультата() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("ТаблицаТоваров" , Неопределено);
	Структура.Вставить("СоответствиеПолейСКДКолонкамТаблицыТоваров", Новый Соответствие);
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти
