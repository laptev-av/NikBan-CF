
#Область ПрограммныйИнтерфейс

// Получает историю замен дисконтной карты, включаю даты и документы замены.
//
// Параметры:
//  ДатаРасчета - дата расчета;
//  ДисконтнаяКарта - карта для которой находим историю.
//  ТолькоПредкиКарты - Булево.
//
// Возвращаемое значение:
//  Таблицу, включающую историю.
//
Функция ПолучитьРасширеннуюИсториюДисконтнойКарты(ДатаРасчета, ДисконтнаяКарта, ТолькоПредкиКарты) Экспорт

	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("ДатаЗамены");
	ТаблицаРезультата.Колонки.Добавить("Карта");
	ТаблицаРезультата.Колонки.Добавить("ДокументЗамены");

	СтрокаТаблицы = ТаблицаРезультата.Добавить();
	СтрокаТаблицы.ДатаЗамены = ДисконтнаяКарта.ДатаОткрытия;
	СтрокаТаблицы.Карта = ДисконтнаяКарта;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	РегистрацияЗаменыКартПокупателейСрезПоследних.КартаИсточник,
	|	РегистрацияЗаменыКартПокупателейСрезПоследних.КартаПриемник
	|ИЗ
	|	РегистрСведений.РегистрацияЗаменыКартПокупателей.СрезПоследних(
	|			&ДатаРасчета,
	|			КартаПриемник = &ДисконтнаяКарта
	|				ИЛИ (НЕ &ТолькоПредкиКарты)
	|					И КартаИсточник = &ДисконтнаяКарта) КАК РегистрацияЗаменыКартПокупателейСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаРасчета"      , ДатаРасчета);
	Запрос.УстановитьПараметр("ДисконтнаяКарта"  , ДисконтнаяКарта);
	Запрос.УстановитьПараметр("ТолькоПредкиКарты", ТолькоПредкиКарты);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ТаблицаРезультата;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	РегистрацияЗаменыКартПокупателейСрезПоследних.КартаИсточник,
	|	РегистрацияЗаменыКартПокупателейСрезПоследних.КартаПриемник,
	|	РегистрацияЗаменыКартПокупателейСрезПоследних.Период КАК ДатаЗамены,
	|	РегистрацияЗаменыКартПокупателейСрезПоследних.Регистратор КАК ДокументЗамены,
	|	РегистрацияЗаменыКартПокупателейСрезПоследних.КартаИсточник.ДатаОткрытия КАК ДатаОткрытияИсточник,
	|	РегистрацияЗаменыКартПокупателейСрезПоследних.КартаПриемник.ДатаОткрытия КАК ДатаОткрытияПриемник
	|ИЗ
	|	РегистрСведений.РегистрацияЗаменыКартПокупателей.СрезПоследних(&ДатаРасчета, ) КАК РегистрацияЗаменыКартПокупателейСрезПоследних";
	
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	НашлиЭлемент         = Истина;
	СтрокаТаблицЗапроса  = Неопределено;
	ТекущийЭлементПоиска = ДисконтнаяКарта;
	
	Пока НашлиЭлемент Цикл
		
		СтрокаТаблицЗапроса = ТаблицаЗапроса.Найти(ТекущийЭлементПоиска, "КартаПриемник");
		
		Если СтрокаТаблицЗапроса = Неопределено
		 ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицЗапроса.КартаИсточник) Тогда
			Прервать; // Цепочка прервалась
		ИначеЕсли НЕ ТаблицаРезультата.Найти(СтрокаТаблицЗапроса.КартаИсточник, "Карта") = Неопределено Тогда
			Прервать; // Дополнительная проверка на глухие циклы.
		Иначе
			СтрокаТаблицы.ДатаЗамены     = СтрокаТаблицЗапроса.ДатаЗамены;
			СтрокаТаблицы.ДокументЗамены = СтрокаТаблицЗапроса.ДокументЗамены;
			
			СтрокаТаблицы = ТаблицаРезультата.Вставить(0);
			СтрокаТаблицы.ДатаЗамены = СтрокаТаблицЗапроса.ДатаОткрытияИсточник;
			СтрокаТаблицы.Карта      = СтрокаТаблицЗапроса.КартаИсточник;
			
			ТекущийЭлементПоиска = СтрокаТаблицЗапроса.КартаИсточник;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТолькоПредкиКарты Тогда
		Возврат ТаблицаРезультата;
	КонецЕсли;
	
	ТекущийЭлементПоиска = ДисконтнаяКарта;
	
	Пока НашлиЭлемент Цикл
		
		СтрокаТаблицЗапроса = ТаблицаЗапроса.Найти(ТекущийЭлементПоиска, "КартаИсточник");
		
		Если СтрокаТаблицЗапроса = Неопределено
		 ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицЗапроса.КартаПриемник) Тогда
			Прервать; // Цепочка прервалась
		ИначеЕсли НЕ ТаблицаРезультата.Найти(СтрокаТаблицЗапроса.КартаПриемник, "Карта")= Неопределено Тогда
			Прервать; // Дополнительная проверка на глухие циклы.
		Иначе
			СтрокаТаблицы = ТаблицаРезультата.Добавить();
			СтрокаТаблицы.ДатаЗамены     = СтрокаТаблицЗапроса.ДатаЗамены;
			СтрокаТаблицы.ДокументЗамены = СтрокаТаблицЗапроса.ДокументЗамены;
			СтрокаТаблицы.Карта          = СтрокаТаблицЗапроса.КартаПриемник;
			
			ТекущийЭлементПоиска = СтрокаТаблицЗапроса.КартаПриемник;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРезультата;
	
	
	
КонецФункции // ПолучитьРасширеннуюИсториюДисконтнойКарты()

// Получает историю замен дисконтной карты.
//
// Параметры:
//  ДатаРасчета - дата расчета;
//  ДисконтнаяКарта - карта для которой находим историю.
//  ТолькоПредкиКарты - Булево.
//
// Возвращаемое значение:
//   Массив карт, включающий саму карту.
//
Функция ПолучитьИсториюДисконтнойКарты(ДатаРасчета, ДисконтнаяКарта, ТолькоПредкиКарты) Экспорт

	МассивКарт = Новый Массив;
	Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		МассивКарт.Добавить(ДисконтнаяКарта);
	КонецЕсли;
	
	// Быстрая проверка на наличие истории.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	РегистрацияЗаменыКартПокупателейСрезПоследних.КартаИсточник,
	|	РегистрацияЗаменыКартПокупателейСрезПоследних.КартаПриемник
	|ИЗ
	|	РегистрСведений.РегистрацияЗаменыКартПокупателей.СрезПоследних(
	|			&ДатаРасчета,
	|			КартаПриемник = &ДисконтнаяКарта
	|				ИЛИ (НЕ &ТолькоПредкиКарты)
	|					И КартаИсточник = &ДисконтнаяКарта) КАК РегистрацияЗаменыКартПокупателейСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаРасчета"      , ДатаРасчета);
	Запрос.УстановитьПараметр("ДисконтнаяКарта"  , ДисконтнаяКарта);
	Запрос.УстановитьПараметр("ТолькоПредкиКарты", ТолькоПредкиКарты);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат МассивКарт;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	РегистрацияЗаменыКартПокупателейСрезПоследних.КартаИсточник,
	|	РегистрацияЗаменыКартПокупателейСрезПоследних.КартаПриемник
	|ИЗ
	|	РегистрСведений.РегистрацияЗаменыКартПокупателей.СрезПоследних(&ДатаРасчета, ) КАК РегистрацияЗаменыКартПокупателейСрезПоследних";
	
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	НашлиЭлемент         = Истина;
	СтрокаТаблицЗапроса  = Неопределено;
	ТекущийЭлементПоиска = ДисконтнаяКарта;
	
	Пока НашлиЭлемент Цикл
		
		СтрокаТаблицЗапроса = ТаблицаЗапроса.Найти(ТекущийЭлементПоиска, "КартаПриемник");
		
		Если СтрокаТаблицЗапроса = Неопределено
		 ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицЗапроса.КартаИсточник) Тогда
			Прервать; // Цепочка прервалась
		ИначеЕсли НЕ МассивКарт.Найти(СтрокаТаблицЗапроса.КартаИсточник) = Неопределено Тогда
			Прервать; // Дополнительная проверка на глухие циклы.
		Иначе
			Если ЗначениеЗаполнено(СтрокаТаблицЗапроса.КартаИсточник) Тогда
				МассивКарт.Добавить(СтрокаТаблицЗапроса.КартаИсточник);
				ТекущийЭлементПоиска = СтрокаТаблицЗапроса.КартаИсточник;
			Иначе
				Прервать; // Заменили из пустого значения... бывает и не такое, но не должно обрабатываться.
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТолькоПредкиКарты Тогда
		Возврат МассивКарт;
	КонецЕсли;
	
	ТекущийЭлементПоиска = ДисконтнаяКарта;
	
	Пока НашлиЭлемент Цикл
		
		СтрокаТаблицЗапроса = ТаблицаЗапроса.Найти(ТекущийЭлементПоиска, "КартаИсточник");
		
		Если СтрокаТаблицЗапроса = Неопределено
		 ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицЗапроса.КартаПриемник) Тогда
			Прервать; // Цепочка прервалась
		ИначеЕсли НЕ МассивКарт.Найти(СтрокаТаблицЗапроса.КартаПриемник) = Неопределено Тогда
			Прервать; // Дополнительная проверка на глухие циклы.
		Иначе
			Если ЗначениеЗаполнено(СтрокаТаблицЗапроса.КартаПриемник) Тогда
				МассивКарт.Добавить(СтрокаТаблицЗапроса.КартаПриемник);
				ТекущийЭлементПоиска = СтрокаТаблицЗапроса.КартаПриемник;
			Иначе
				Прервать; // Заменили на пустое значение... бывает и не такое, но не должно обрабатываться.
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивКарт;
	
КонецФункции // ПолучитьИсториюДисконтнойКарты()

// Получает ближайший день рождения.
//
Функция ПолучитьБлижайшийДеньРождения(ДатаРасчета, Получатель) Экспорт
	
	Перем ДатаРождения;
	
	ДатаРождения = Дата('00010101000000');
	
	Если ЗначениеЗаполнено(ДатаРасчета) Тогда
		мТекущаяДата = ДатаРасчета;
	Иначе
		мТекущаяДата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ТипЗнч(Получатель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Если ЗначениеЗаполнено(Получатель.ДатаРождения) Тогда
			
			// Сначала проверяется 29 февраля.
			ДатаРождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Получатель, "ДатаРождения");
			МесяцРождения = Месяц(ДатаРождения);
			ДеньРождения = День(ДатаРождения);
			ТекущийГод = Год(мТекущаяДата);
			Если МесяцРождения = 2 И ДеньРождения = 29 Тогда
				ПервоеМарта = Дата(ТекущийГод, 3, 1);
				Если ДеньГода(ПервоеМарта) = 60 Тогда
					// В текущем году 29 февраля нет. Следовательно, день рождения переносится на 28.
					ДеньРождения = ДеньРождения - 1;
				КонецЕсли;
			КонецЕсли;
			
			ДатаТекущегоГода = Дата(ТекущийГод, МесяцРождения, ДеньРождения);
			
			ДатаПредыдущегоГода = ДобавитьМесяц(ДатаТекущегоГода, -12);
			ДатаСледующегоГода  = ДобавитьМесяц(ДатаТекущегоГода, 12);
			
			Если мТекущаяДата < ДатаТекущегоГода Тогда
				Разность = ДатаТекущегоГода - мТекущаяДата;
			Иначе
				Разность = мТекущаяДата - ДатаТекущегоГода;
			КонецЕсли;
			
			Если Разность > (мТекущаяДата - ДатаПредыдущегоГода) Тогда
				ДатаРождения = ДатаПредыдущегоГода;
			ИначеЕсли Разность > (ДатаСледующегоГода - мТекущаяДата) Тогда
				ДатаРождения = ДатаСледующегоГода;
			Иначе
				ДатаРождения = ДатаТекущегоГода;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДатаРождения;
КонецФункции // ПолучитьБлижайшийДеньРождения()

// Заполняем приемник поданным подарочного сертификата.
//
// Параметры:
//  СерийныйНомер - серийный номер.
//
// Возвращаемое значение
//  Структура
//
Функция ПолучитьДанныеПодарочногоСертификата(СерийныйНомер) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СерийныеНомера.Владелец КАК ПодарочныйСертификат,
	|	СерийныеНомера.Ссылка КАК СерийныйНомер,
	|	СерийныеНомера.Владелец.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
	|	СерийныеНомера.Владелец.ТипСерийногоНомера КАК ТипСерийногоНомера,
	|	СерийныеНомера.Владелец.Номинал КАК Номинал
	|ИЗ
	|	Справочник.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	СерийныеНомера.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СерийныйНомер);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Возврат ОбщегоНазначенияРТ.СоздатьСтруктуруПоСтрокеВыборки(Результат, Выборка);
	
	КонецЕсли;
	
	Возврат Новый Структура;

КонецФункции // ЗаполнитьПоДаннымПодарочногоСертификата()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОВЕРКИ ЗАПОЛНЕНИЯ

// Проверяет условие, что в табличной части Погашение подарочных сертификатов, должны быть только подарочные
// сертификаты.
//
// Параметры:
//	ДокументОбъект - Документ
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьТабличнуюЧастьПогашения(
	ДокументОбъект,
	Отказ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ПогашениеПодарочныхСертификатов.ПодарочныйСертификат,
	|	ПогашениеПодарочныхСертификатов.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	&ПогашениеПодарочныхСертификатов КАК ПогашениеПодарочныхСертификатов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ТаблицаВЗапросе.ПодарочныйСертификат,
	|	ТаблицаВЗапросе.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|ГДЕ
	|	ВЫРАЗИТЬ(ТаблицаВЗапросе.ПодарочныйСертификат КАК Справочник.Номенклатура).ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ПогашениеПодарочныхСертификатов", ДокументОбъект.ПогашениеПодарочныхСертификатов.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В строке N%1 табличной части ""Погашение подарочных сертификатов"" выбранная номенклатура не является подарочным сертификатом'"),
			Выборка.НомерСтроки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"ПогашениеПодарочныхСертификатов[" + (Выборка.НомерСтроки - 1) + "].ПодарочныйСертификат" ,
			,
			Отказ);
		
	КонецЦикла;
	

КонецПроцедуры // ПроверитьТабличнуюЧастьПогашения()

// Общая процедура проверки реализации и погашения серийных номеров.
//
// Параметры:
//  ДокументОбъект - объект проводимого документа документа.
//  ИмяТабличнойЧасти - Имя табличной части Товары.
//  Отказ - Переменная отвечающая за прерывание проведения.
//
Процедура ПроверитьЦеныСертификатов(
	ДокументОбъект, 
	ИмяТабличнойЧасти, 
	Отказ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Цена
	|ПОМЕСТИТЬ ТабТоварыВСЕ
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабТовары.Номенклатура.Наименование КАК Наименование,
	|	ТабТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТабТоварыВСЕ КАК ТабТовары
	|ГДЕ
	|	ТабТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И ТабТовары.Цена = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Товары", ДокументОбъект[ИмяТабличнойЧасти].Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В строке №%1 Номенклатура: %2 - Подарочный сертификат по нулевой цене'"),
			Выборка.НомерСтроки,
			Выборка.Наименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			ИмяТабличнойЧасти+"[" + (Выборка.НомерСтроки - 1) + "].Номенклатура" ,
			,
			Отказ);
	КонецЦикла;
	

КонецПроцедуры // ПроверитьЦеныСертификатов()

// Проверяет, что в табличной части нет подарочных сертификатов.
//
// Параметры:
//  ДокументОбъект - объект проводимого документа документа.
//  ИмяТабличнойЧасти - Имя табличной части Товары.
//  Отказ - Переменная отвечающая за прерывание проведения.
//
Процедура ПроверитьЧтоНетПодарочныхСертификатов(
	ДокументОбъект, 
	ИмяТабличнойЧасти, 
	Отказ,
	ТекстОшибки = "",
	ОсобыйВыводСообщения = Ложь) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТабТоварыВСЕ
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабТовары.Номенклатура.Наименование КАК Наименование,
	|	ТабТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТабТоварыВСЕ КАК ТабТовары
	|ГДЕ
	|	ТабТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Товары", ДокументОбъект[ИмяТабличнойЧасти].Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В строке №%1 табличной части ""%2"" находится подарочный сертификат'"),
			Выборка.НомерСтроки,
			ИмяТабличнойЧасти);
		
		Если Не ОсобыйВыводСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				ИмяТабличнойЧасти+"[" + (Выборка.НомерСтроки - 1) + "].Номенклатура" ,
				,
				Отказ);
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
		ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
	КонецЦикла;
	

КонецПроцедуры // ПроверитьЧтоНетПодарочныхСертификатов()

// Проверяет, что в табличной части нет оплаты подарочным сертификатом.
//
// Параметры:
//  ДокументОбъект - объект проводимого документа документа.
//  ИмяТабличнойЧасти - Имя табличной части Товары.
//  Отказ - Переменная отвечающая за прерывание проведения.
//
Процедура ПроверитьЧтоНетОплатыПодарочнымСертификатом(
	ДокументОбъект, 
	ИмяТабличнойЧасти, 
	Отказ,
	ТекстОшибки = "",
	ОсобыйВыводСообщения = Ложь) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Оплата.ВидОплаты КАК ВидОплаты,
	|	Оплата.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТабОплатаВСЕ
	|ИЗ
	|	&Оплата КАК Оплата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабОплата.ВидОплаты КАК ВидОплаты,
	|	ТабОплата.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТабОплатаВСЕ КАК ТабОплата
	|ГДЕ
	|	ТабОплата.ВидОплаты = Значение(Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Оплата", ДокументОбъект[ИмяТабличнойЧасти].Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В строке №%1 табличной части ""%2"" находится оплата подарочным сертификатом'"),
			Выборка.НомерСтроки,
			ИмяТабличнойЧасти);
		
		Если НЕ ОсобыйВыводСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				ИмяТабличнойЧасти+"[" + (Выборка.НомерСтроки - 1) + "].ВидОплаты" ,
				,
				Отказ);
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
		ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
	КонецЦикла;
	

КонецПроцедуры // ПроверитьЧтоНетОплатыПодарочнымСертификатом()

// Проверяет правильность заполнения документа Маркетинговая акция.
//
// Параметры:
//  ДокументОбъект - объект документа Маркетинговая акция.
//  Отказ - Переменная отвечающая за прерывание проведения.
//
Процедура ПроверитьЗаполнениеДокументаМаркетинговаяАкция(
	ДокументОбъект, 
	Отказ) Экспорт

	Если ДокументОбъект.ДатаНачалаДействия > ДокументОбъект.ДатаОкончанияДействия И ЗначениеЗаполнено(ДокументОбъект.ДатаОкончанияДействия) Тогда
		Текст = НСтр("ru = 'Дата начала действия акции не может быть больше даты окончания действия акции'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"ДатаОкончанияДействия" ,
			,
			Отказ);
	КонецЕсли;
	
	
	
	Для каждого СтрокаТаблицыПоСкидкамНаценкам Из ДокументОбъект.СкидкиНаценки  Цикл
	
		Если СтрокаТаблицыПоСкидкамНаценкам.ДатаНачала > СтрокаТаблицыПоСкидкамНаценкам.ДатаОкончания И ЗначениеЗаполнено(СтрокаТаблицыПоСкидкамНаценкам.ДатаОкончания) Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицыПоСкидкамНаценкам.Магазин) Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По магазину %1: Дата начала действия скидки ""%2"" не может быть больше даты окончания действия скидки'"),
					СтрокаТаблицыПоСкидкамНаценкам.Магазин,
					СтрокаТаблицыПоСкидкамНаценкам.СкидкаНаценка);
			Иначе
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Дата начала действия скидки ""%1"" не может быть больше даты окончания действия скидки'"),
					СтрокаТаблицыПоСкидкамНаценкам.СкидкаНаценка);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"СкидкиНаценки[" + (СтрокаТаблицыПоСкидкамНаценкам.НомерСтроки - 1) + "].ДатаОкончания" ,
				,
				Отказ);
			
		ИначеЕсли СтрокаТаблицыПоСкидкамНаценкам.ДатаНачала < ДокументОбъект.ДатаНачалаДействия 
				  ИЛИ (СтрокаТаблицыПоСкидкамНаценкам.ДатаОкончания > ДокументОбъект.ДатаОкончанияДействия И ЗначениеЗаполнено(ДокументОбъект.ДатаОкончанияДействия))
				  ИЛИ (НЕ ЗначениеЗаполнено(СтрокаТаблицыПоСкидкамНаценкам.ДатаОкончания) И ЗначениеЗаполнено(ДокументОбъект.ДатаОкончанияДействия)) Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицыПоСкидкамНаценкам.Магазин) Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По магазину %1: Период действия скидки ""%2"" не совпадает с периодом действия акции'"),
					СтрокаТаблицыПоСкидкамНаценкам.Магазин,
					СтрокаТаблицыПоСкидкамНаценкам.СкидкаНаценка);
			Иначе
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Период действия скидки ""%1"" не совпадает с периодом действия акции'"),
					СтрокаТаблицыПоСкидкамНаценкам.СкидкаНаценка);
			КонецЕсли;
			Если  СтрокаТаблицыПоСкидкамНаценкам.ДатаНачала < ДокументОбъект.ДатаНачалаДействия Тогда
			
				ЭлементПозиционирования = "ДатаНачала";
			Иначе
				ЭлементПозиционирования = "ДатаОкончания";
			КонецЕсли; 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"СкидкиНаценки[" + (СтрокаТаблицыПоСкидкамНаценкам.НомерСтроки - 1) + "]." + ЭлементПозиционирования ,
				,
				Отказ);
		КонецЕсли;
	
	КонецЦикла;

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Таблица.СкидкаНаценка,
	|	Таблица.Магазин,
	|	Таблица.ДатаНачала,
	|	Таблица.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ТаблицаВЗапросе.СкидкаНаценка,
	|	ТаблицаВЗапросе.Магазин,
	|	ТаблицаВЗапросе.ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаВЗапросе.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВЗапросе.Магазин,
	|	ТаблицаВЗапросе.ДатаНачала,
	|	ТаблицаВЗапросе.СкидкаНаценка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаВЗапросе.НомерСтроки) > 1";
	
	Запрос.УстановитьПараметр("Таблица", ДокументОбъект.СкидкиНаценки.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Магазин) Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По магазину %1 ЕСТЬ ДУБЛИРОВАНИЕ для сочетания: Скидка %2, Дата начала %3'"),
				Выборка.Магазин,
				Выборка.СкидкаНаценка,
				Формат(Выборка.ДатаНачала,"ДЛФ=D"));
			ЭлементПозиционирования = "Магазины";
		Иначе
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'ЕСТЬ ДУБЛИРОВАНИЕ для сочетания: Скидка %1, Дата начала %2'"),
				Выборка.СкидкаНаценка,
				Формат(Выборка.ДатаНачала,"ДЛФ=D"));
			ЭлементПозиционирования = "СкидкиНаценки";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			ЭлементПозиционирования ,
			,
			Отказ);
	КонецЦикла;
	
	

КонецПроцедуры // ПроверитьЧтоНетОплатыПодарочнымСертификатом()

// Проверяет использование вводимого кода карты.
//
// Параметры:
//  СправочникОбъект - объект справочника Информационные карты.
//  Отказ - Переменная отвечающая за прерывание проведения.
//
Процедура ПроверитьИспользованиеКодаКарты(
			СправочникОбъект,
			Отказ) Экспорт

	ИспользоватьНеуникальныеКодыИнформационныхКарт = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИспользоватьНеуникальныеКодыИнформационныхКарт");
	Если НЕ ИспользоватьНеуникальныеКодыИнформационныхКарт Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИнформационныеКарты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|ГДЕ
		|	ИнформационныеКарты.Ссылка <> &Ссылка
		|	И ИнформационныеКарты.КодКарты = &КодКарты";
		
		Запрос.УстановитьПараметр("Ссылка"  , СправочникОбъект.Ссылка);
		Запрос.УстановитьПараметр("КодКарты", СправочникОбъект.КодКарты);
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
		
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Информационная карта с кодом карты %1 уже существует!'"),
				СправочникОбъект.КодКарты);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				СправочникОбъект,
				"КодКарты" ,
				,
				Отказ);
		
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьИспользованиеКодаКарты()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОВЕРКИ ПОДАРОЧНЫХ СЕРТИФИКАТОВ

// Получает параметры объекта - Документа.
// 
// Параметры:
// ДокументОбъект - Или документ, или обработка РМК управляемый.
// ДокументОбъект_Параметризованный - Возвращаемый параметр, документ или Неопределено,
// ЭтоДокумент - Булево или Неопределено,
// ЭтоНовый - Булево или Неопределено.
// Дата - Дата
//
Процедура ПолучитьПараметрыОбъекта(ДокументОбъект, ДокументОбъект_Параметризованный, ЭтоДокумент, ЭтоНовый, Дата)

	МетаданныеОбъекта = ДокументОбъект.Метаданные();
	ЭтоДокумент = Метаданные.Документы.Содержит(МетаданныеОбъекта);
	Если ЭтоДокумент Тогда 
		ЭтоНовый = ДокументОбъект.ЭтоНовый();
		Если ЭтоНовый Тогда
			Дата = КонецДня(ДокументОбъект.Дата);
		Иначе
			Дата = ДокументОбъект.Дата
		КонецЕсли;
		ДокументОбъект_Параметризованный = ДокументОбъект;
	Иначе
		ДокументОбъект_Параметризованный = Неопределено;
		ЭтоНовый = Неопределено;
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;

КонецПроцедуры

// Общая процедура проверки реализации и погашения серийных номеров.
//
// Параметры:
//  ДокументОбъект - объект проводимого документа документа.
//  ИмяТабличнойЧасти - Имя табличной части Товары.
//  ИмяТабличнойЧастиСерийныеНомера - Имя табличной части Серийные номера.
//  РежимПроведения - режим проведения документа.
//  Отказ - Переменная отвечающая за прерывание проведения.
//  Заголовок - Заголовок при ошибке.
//  Дата - дата проверки
//  Результат - при необходимости возвращает единую строку ошибки.
//
Процедура ПроверитьДвиженияСерийныхНомеров(
	ДокументОбъект,
	ИмяТабличнойЧасти,
	ИмяТабличнойЧастиСерийныеНомера,
	Отказ,
	ТекстОшибки = "",
	Дата = Неопределено) Экспорт
	
	Перем ДокументОбъект_Параметризованный, ЭтоДокумент, ЭтоНовый;
	
	ПолучитьПараметрыОбъекта(ДокументОбъект, ДокументОбъект_Параметризованный, ЭтоДокумент, ЭтоНовый, Дата);
	
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("ДокументОбъект", ДокументОбъект_Параметризованный);
	СтруктураДокумента.Вставить("ЭтоДокумент", ЭтоДокумент);
	СтруктураДокумента.Вставить("ЭтоНовый", ЭтоНовый);
	СтруктураДокумента.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	СтруктураДокумента.Вставить("ТаблицаЗначений_Товары", ДокументОбъект[ИмяТабличнойЧасти].Выгрузить());
	СтруктураДокумента.Вставить("ТаблицаЗначений_СерийныеНомера", ДокументОбъект[ИмяТабличнойЧастиСерийныеНомера].Выгрузить());
	
	МаркетинговыеАкцииСерверПривилегированный.ПроверитьДвиженияСерийныхНомеров(
		СтруктураДокумента,
		Отказ,
		ТекстОшибки,
		Дата);

КонецПроцедуры // ПроверитьДвиженияСерийныхНомеров()

// Общая процедура проверки реализации и погашения серийных номеров.
//
// Параметры:
//  ДокументОбъект - объект проводимого документа документа.
//  РежимПроведения - режим проведения документа.
//  Отказ - Переменная отвечающая за прерывание проведения.
//  Заголовок - Заголовок при ошибке.
//
Процедура ПроверитьДвиженияСерийныхНомеровДляПогашения(
			ДокументОбъект,
			ИмяТабличнойЧасти,
			Отказ,
			ТекстОшибки = "") Экспорт
	
	Перем ДокументОбъект_Параметризованный, ЭтоДокумент, ЭтоНовый, Дата;
	
	ПолучитьПараметрыОбъекта(ДокументОбъект, ДокументОбъект_Параметризованный, ЭтоДокумент, ЭтоНовый, Дата);
	
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("ДокументОбъект", ДокументОбъект_Параметризованный);
	СтруктураДокумента.Вставить("ЭтоДокумент", ЭтоДокумент);
	СтруктураДокумента.Вставить("ЭтоНовый", ЭтоНовый);
	СтруктураДокумента.Вставить("ТабличнаяЧасть", ДокументОбъект[ИмяТабличнойЧасти].Выгрузить());
	СтруктураДокумента.Вставить("ТабличнаяЧасть_ПогашениеПодарочныхСертификатов", ДокументОбъект.ПогашениеПодарочныхСертификатов.Выгрузить());
	
	МаркетинговыеАкцииСерверПривилегированный.ПроверитьДвиженияСерийныхНомеровДляПогашения(
		СтруктураДокумента,
		Отказ,
		ТекстОшибки,
		Дата);
		
КонецПроцедуры // ПроверитьДвиженияСерийныхНомеров()

// Общая процедура проверки заполненности табличной части серийные номера.
//
// Параметры:
//  ДокументОбъект - объект проводимого документа документа.
//  ИмяТабличнойЧасти - Имя табличной части Товары.
//  ИмяТабличнойЧастиСерийныеНомера - Имя табличной части Серийные номера.
//  Отказ - Переменная отвечающая за прерывание проведения.
//  Заголовок - Заголовок при ошибке.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСерийныеНомера(
	ДокументОбъект,
	ИмяТабличнойЧасти,
	ИмяТабличнойЧастиСерийныеНомера,
	Отказ,
	ТекстОшибки = "",
	ОсобыйВыводСообщения = Ложь) Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|	Товары.НомерСтроки,
	|	Товары.Количество
	|ПОМЕСТИТЬ ТабТоварыВСЕ
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязиСерийныхНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабТовары.Номенклатура,
	|	ТабТовары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|	ТабТовары.НомерСтроки,
	|	ТабТовары.Количество
	|ПОМЕСТИТЬ ТабТовары
	|ИЗ
	|	ТабТоварыВСЕ КАК ТабТовары
	|ГДЕ
	|	ТабТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И ТабТовары.Номенклатура.ИспользоватьСерийныеНомера
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязиСерийныхНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СерийныеНомера.СерийныйНомер КАК Справочник.СерийныеНомера) КАК СерийныйНомер,
	|	СерийныеНомера.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров
	|ПОМЕСТИТЬ ТабСерийныеНомера
	|ИЗ
	|	&СерийныеНомера КАК СерийныеНомера
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязиСерийныхНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабТовары.Номенклатура.Наименование КАК Наименование,
	|	ТабТовары.НомерСтроки
	|ИЗ
	|	ТабТовары КАК ТабТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабСерийныеНомера КАК ТабСерийныеНомера
	|		ПО ТабТовары.КлючСвязиСерийныхНомеров = ТабСерийныеНомера.КлючСвязиСерийныхНомеров
	|ГДЕ
	|	(НЕ ТабСерийныеНомера.КлючСвязиСерийныхНомеров ЕСТЬ NULL )
	|	И ТабСерийныеНомера.СерийныйНомер = ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Товары", ДокументОбъект[ИмяТабличнойЧасти].Выгрузить());
	Запрос.УстановитьПараметр("СерийныеНомера", ДокументОбъект[ИмяТабличнойЧастиСерийныеНомера].Выгрузить());
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В номерах подарочных сертификатов номенклатуры %1 (строка №%2) есть пустые номера'"),
			Выборка.Наименование,
			Выборка.НомерСтроки);
		
		Если НЕ ОсобыйВыводСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				ИмяТабличнойЧасти+"[" + (Выборка.НомерСтроки - 1) + "].Номенклатура" ,
				,
				Отказ);
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
		ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
		
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.КлючСвязиСерийныхНомеров
	|ПОМЕСТИТЬ КоличествоСерийныхНомеров
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабСерийныеНомера.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТабСерийныеНомера.СерийныйНомер) КАК Количество
	|	ИЗ
	|		ТабСерийныеНомера КАК ТабСерийныеНомера
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТабСерийныеНомера.КлючСвязиСерийныхНомеров) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабТовары.Номенклатура.Наименование КАК Наименование,
	|	ТабТовары.НомерСтроки,
	|	ТабТовары.Количество,
	|	ЕСТЬNULL(КоличествоСерийныхНомеров.Количество, 0) КАК КоличествоСерийныхНомеров
	|ИЗ
	|	ТабТовары КАК ТабТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоСерийныхНомеров КАК КоличествоСерийныхНомеров
	|		ПО ТабТовары.КлючСвязиСерийныхНомеров = КоличествоСерийныхНомеров.КлючСвязиСерийныхНомеров
	|ГДЕ
	|	(НЕ ТабТовары.Количество = ЕСТЬNULL(КоличествоСерийныхНомеров.Количество, 0))";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Номенклатура: %1 (строка №%2). Не совпадает количество номенклатуры - %3 и количество номеров подарочных сертификатов - %4'"),
			Выборка.Наименование,
			Выборка.НомерСтроки,
			Выборка.Количество,
			Выборка.КоличествоСерийныхНомеров);
		
		Если НЕ ОсобыйВыводСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				ИмяТабличнойЧасти+"[" + (Выборка.НомерСтроки - 1) + "].Номенклатура" ,
				,
				Отказ);
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
		ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
		
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабСерийныеНомера.СерийныйНомер,
	|	1 КАК Количество
	|ПОМЕСТИТЬ ТабСерийныеНомераКоличество
	|ИЗ
	|	ТабСерийныеНомера КАК ТабСерийныеНомера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабСерийныеНомераКоличество.СерийныйНомер,
	|	СУММА(ТабСерийныеНомераКоличество.Количество) КАК Количество
	|ПОМЕСТИТЬ ТабПовторяющиесяСерийныеНомера
	|ИЗ
	|	ТабСерийныеНомераКоличество КАК ТабСерийныеНомераКоличество
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабСерийныеНомераКоличество.СерийныйНомер
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТабСерийныеНомераКоличество.Количество) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабПовторяющиесяСерийныеНомера.СерийныйНомер,
	|	ТабСерийныеНомера.КлючСвязиСерийныхНомеров
	|ПОМЕСТИТЬ ТабПовторяющиесяСерийныеНомераСКлючами
	|ИЗ
	|	ТабПовторяющиесяСерийныеНомера КАК ТабПовторяющиесяСерийныеНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабСерийныеНомера КАК ТабСерийныеНомера
	|		ПО ТабПовторяющиесяСерийныеНомера.СерийныйНомер = ТабСерийныеНомера.СерийныйНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабТовары.НомерСтроки,
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабПовторяющиесяСерийныеНомераСКлючами.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	ТабПовторяющиесяСерийныеНомераСКлючами КАК ТабПовторяющиесяСерийныеНомераСКлючами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабТовары КАК ТабТовары
	|		ПО ТабПовторяющиесяСерийныеНомераСКлючами.КлючСвязиСерийныхНомеров = ТабТовары.КлючСвязиСерийныхНомеров
	|ИТОГИ ПО
	|	Номенклатура,
	|	СерийныйНомер";
	
	Результат = Запрос.Выполнить();
	ВыборкаНоменклатура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		ВыборкаСерийныйНомер = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСерийныйНомер.Следующий() Цикл
			ВыборкаНомерСтроки = ВыборкаСерийныйНомер.Выбрать();
			НомерСтроки = 0;
			ОднаСтрока = Истина;
			НомераСтрок = "";
			Пока ВыборкаНомерСтроки.Следующий() Цикл
				Если НомерСтроки = 0 Тогда
					НомерСтроки = ВыборкаНомерСтроки.НомерСтроки;
					НомераСтрок = Формат(ВыборкаНомерСтроки.НомерСтроки, "ЧГ=0")
				Иначе
					ОднаСтрока = Ложь;
					НомераСтрок = НомераСтрок + "," + Формат(ВыборкаНомерСтроки.НомерСтроки, "ЧГ=0")
				КонецЕсли;
			КонецЦикла;
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Повторяется подарочный сертификат %1 по номенклатуре %2 в %3 %4'"),
				ВыборкаСерийныйНомер.СерийныйНомер,
				ВыборкаСерийныйНомер.Номенклатура,
				?(ОднаСтрока, НСтр("ru = 'в строке №'"), НСтр("ru = 'в строках №№'")),
				НомераСтрок);
			
			Если НЕ ОсобыйВыводСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					ИмяТабличнойЧасти+"[" + (НомерСтроки - 1) + "].Номенклатура" ,
					,
					Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
			ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСерийныеНомера()

// Общая процедура проверки заполненности табличной части серийные номера.
//
// Параметры:
//  ДокументОбъект - объект проводимого документа документа.
//  ИмяТабличнойЧасти - Имя табличной части Товары.
//  ИмяТабличнойЧастиСерийныеНомера - Имя табличной части Серийные номера.
//  Отказ - Переменная отвечающая за прерывание проведения.
//  Заголовок - Заголовок при ошибке.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПогашениеПодарочныхСертификатов(
	ДокументОбъект,
	ИмяТабличнойЧастиСерийныеНомера,
	Отказ,
	ТекстОшибки = "") Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ЧекККМПогашениеПодарочныхСертификатов.НомерСтроки,
	|	ЧекККМПогашениеПодарочныхСертификатов.ПодарочныйСертификат,
	|	ЧекККМПогашениеПодарочныхСертификатов.СерийныйНомер
	|ПОМЕСТИТЬ ТаблицаПогашение
	|ИЗ
	|	&ПогашениеПодарочныхСертификатов КАК ЧекККМПогашениеПодарочныхСертификатов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ТаблицаПогашение.НомерСтроки,
	|	ТаблицаПогашение.ПодарочныйСертификат,
	|	ТаблицаПогашение.ПодарочныйСертификат.Наименование КАК Наименование,
	|	ТаблицаПогашение.СерийныйНомер
	|ИЗ
	|	ТаблицаПогашение КАК ТаблицаПогашение
	|ГДЕ
	|	ТаблицаПогашение.СерийныйНомер = ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)
	|	И ТаблицаПогашение.ПодарочныйСертификат.ИспользоватьСерийныеНомера";
	
	Запрос.УстановитьПараметр("ПогашениеПодарочныхСертификатов", ДокументОбъект[ИмяТабличнойЧастиСерийныеНомера].Выгрузить());
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В номерах подарочных сертификатов погашения подарочных сертификатов %1 (строка №%2) есть пустые номера'"),
			Выборка.Наименование,
			Выборка.НомерСтроки);
		
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			ИмяТабличнойЧастиСерийныеНомера+"[" + (Выборка.НомерСтроки - 1) + "]" ,
			,
			Отказ);
		ТекстОшибки = ТекстОшибки + Символы.ПС + Текст;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСерийныеНомера()

// Общая процедура проверки реализации и погашения серийных номеров.
//
// Параметры:
//  ДокументОбъект - объект проводимого документа документа.
//  ИмяТабличнойЧасти - Имя табличной части Товары.
//  ИмяТабличнойЧастиСерийныеНомера - Имя табличной части Серийные номера.
//  РежимПроведения - режим проведения документа.
//  Отказ - Переменная отвечающая за прерывание проведения.
//  Заголовок - Заголовок при ошибке.
//  Дата - дата проверки
//  Результат - при необходимости возвращает единую строку ошибки.
//
Процедура ПроверитьОкончаниеАбсолютныхСроковДействияСертификатов(
			ДокументОбъект,
			ИмяТабличнойЧасти,
			Отказ,
			ТекстОшибки = "",
			Дата = Неопределено) Экспорт
	
	Перем ДокументОбъект_Параметризованный, ЭтоДокумент, ЭтоНовый;
	
	ПолучитьПараметрыОбъекта(ДокументОбъект, ДокументОбъект_Параметризованный, ЭтоДокумент, ЭтоНовый, Дата);
	
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("ДокументОбъект", ДокументОбъект_Параметризованный);
	СтруктураДокумента.Вставить("ЭтоДокумент", ЭтоДокумент);
	СтруктураДокумента.Вставить("ЭтоНовый", ЭтоНовый);
	СтруктураДокумента.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	СтруктураДокумента.Вставить("ТаблицаЗначений_Товары", ДокументОбъект[ИмяТабличнойЧасти].Выгрузить());
	
	МаркетинговыеАкцииСерверПривилегированный.ПроверитьОкончаниеАбсолютныхСроковДействияСертификатов(
		СтруктураДокумента,
		Отказ,
		ТекстОшибки,
		Дата);
	
КонецПроцедуры // ПроверитьОкончаниеАбсолютныхСроковДействияСертификатов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОВЕДЕНИЯ

// Процедура добавляет в движения документа данные для регистра ДействиеСкидокНаценок.
//
Процедура ОтразитьДействиеСкидокНаценок(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДействиеСкидокНаценок;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ДействиеСкидокНаценок.Записывать = Истина;
	Движения.ДействиеСкидокНаценок.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура добавляет в движения документа данные для регистра РегистрацияЗаменыКартПокупателей.
// 
Процедура ОтразитьРегистрацияЗаменыКартПокупателей(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРегистрацияЗаменыКартПокупателей;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.РегистрацияЗаменыКартПокупателей.Записывать = Истина;
	Движения.РегистрацияЗаменыКартПокупателей.Загрузить(Таблица);
	
КонецПроцедуры // 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОТЧЕТЫ ПО МАРКЕТИНГОВЫМ ОПЕРАЦИЯМ

// Возвращает количество недель в интервале.
//
// Параметры:
//  ДатаНачалаИнтервала - Дата начала интервала.
//  ДатаКонцаИнтервала - Дата конца интервала.
//
// Возвращаемое значение:
//  Число - количество Недель
//
Функция КоличествоНедель(ДатаНачалаИнтервала, ДатаКонцаИнтервала) Экспорт
	Если ДатаНачалаИнтервала>=ДатаКонцаИнтервала Тогда
		Возврат 0;
	КонецЕсли;
	
	КоличествоСекундВДне = 60*60*24;

	КоличествоПериодов = Макс(Цел((ДатаКонцаИнтервала-ДатаНачалаИнтервала +1)/КоличествоСекундВДне),0)/7;
	Возврат КоличествоПериодов;
КонецФункции // КоличествоНедель()

// Возвращает количество месяцев.
//
// Параметры:
//  ДатаНачалаИнтервала - Дата начала интервала.
//  ДатаКонцаИнтервала - Дата конца интервала.
//
// Возвращаемое значение:
//  Число - количество месяцев.
//
Функция КоличествоМесяцев(ДатаНачалаИнтервала, ДатаКонцаИнтервала)Экспорт
	Если ДатаНачалаИнтервала>=ДатаКонцаИнтервала Тогда
		Возврат 0;
	КонецЕсли;
	
	КоличествоСекундВДне = 60*60*24;

	КоличествоПолныхМесяцев = 0;
	мДатаНачалаИнтервала = ДобавитьМесяц(ДатаНачалаИнтервала,1);
	Пока мДатаНачалаИнтервала < ДатаКонцаИнтервала Цикл
		КоличествоПолныхМесяцев = КоличествоПолныхМесяцев + 1;
		мДатаНачалаИнтервала = ДобавитьМесяц(ДатаНачалаИнтервала,КоличествоПолныхМесяцев+1)
	КонецЦикла;
	
	Если мДатаНачалаИнтервала = ДатаКонцаИнтервала +1 Тогда
		Возврат КоличествоПолныхМесяцев +1;
	КонецЕсли;
	
	
	мДатаНачалаИнтервала = ДобавитьМесяц(ДатаНачалаИнтервала,КоличествоПолныхМесяцев);
	Если НачалоМесяца(мДатаНачалаИнтервала) = НачалоМесяца(ДатаКонцаИнтервала) Тогда
		КоличествоДней       = Макс(Цел((ДатаКонцаИнтервала-мДатаНачалаИнтервала +1)/КоличествоСекундВДне),0);
		КоличествоДнейМесяца = Макс(Цел((КонецМесяца(мДатаНачалаИнтервала)-НачалоМесяца(мДатаНачалаИнтервала) +1)/КоличествоСекундВДне),0);
		Возврат КоличествоПолныхМесяцев+КоличествоДней/КоличествоДнейМесяца;
	Иначе
		КоличествоДней       = Макс(Цел((КонецМесяца(мДатаНачалаИнтервала)-мДатаНачалаИнтервала +1)/КоличествоСекундВДне),0);
		КоличествоДнейМесяца = Макс(Цел((КонецМесяца(мДатаНачалаИнтервала)-НачалоМесяца(мДатаНачалаИнтервала) +1)/КоличествоСекундВДне),0);
		
		КоличествоМесяцев    = КоличествоПолныхМесяцев+КоличествоДней/КоличествоДнейМесяца;
		
		КоличествоДней       = Макс(Цел((ДатаКонцаИнтервала-НачалоМесяца(ДатаКонцаИнтервала) +1)/КоличествоСекундВДне),0);
		КоличествоДнейМесяца = Макс(Цел((КонецМесяца(ДатаКонцаИнтервала)-НачалоМесяца(ДатаКонцаИнтервала) +1)/КоличествоСекундВДне),0);
		
		Возврат КоличествоМесяцев+КоличествоДней/КоличествоДнейМесяца
	КонецЕсли;
КонецФункции // КоличествоМесяцев()

// Возвращает количество Кварталов.
//
// Параметры:
//  ДатаНачалаИнтервала - Дата начала интервала.
//  ДатаКонцаИнтервала - Дата конца интервала.
//
// Возвращаемое значение:
//  Число - количество кварталов.
//
Функция КоличествоКварталов(ДатаНачалаИнтервала, ДатаКонцаИнтервала) Экспорт
	Если ДатаНачалаИнтервала>=ДатаКонцаИнтервала Тогда
		Возврат 0;
	КонецЕсли;
	
	КоличествоСекундВДне = 60*60*24;

	мДатаНачалаИнтервала = ДатаНачалаИнтервала;
	
	Если НачалоКвартала(мДатаНачалаИнтервала) = НачалоКвартала(ДатаКонцаИнтервала)Тогда
		КоличествоДней       = Макс(Цел((ДатаКонцаИнтервала-мДатаНачалаИнтервала +1)/КоличествоСекундВДне),0);
		КоличествоДнейКвартала = Макс(Цел((КонецКвартала(мДатаНачалаИнтервала)-НачалоКвартала(мДатаНачалаИнтервала) +1)/КоличествоСекундВДне),0);
		
		Возврат КоличествоДней/КоличествоДнейКвартала;
	КонецЕсли;
	
	Если мДатаНачалаИнтервала = НачалоКвартала(мДатаНачалаИнтервала) Тогда
		ОстатокОтНачальногоКвартала = 0;
	Иначе
		КоличествоДней       = Макс(Цел((КонецКвартала(мДатаНачалаИнтервала)-мДатаНачалаИнтервала +1)/КоличествоСекундВДне),0);
		КоличествоДнейКвартала = Макс(Цел((КонецКвартала(мДатаНачалаИнтервала)-НачалоКвартала(мДатаНачалаИнтервала) +1)/КоличествоСекундВДне),0);
		
		ОстатокОтНачальногоКвартала = КоличествоДней/КоличествоДнейКвартала;
		
		мДатаНачалаИнтервала = КонецКвартала(мДатаНачалаИнтервала)+1
	КонецЕсли;
	
	КоличествоПолныхКварталов = 0;
	Пока (КонецКвартала(мДатаНачалаИнтервала)+1)<ДатаКонцаИнтервала Цикл
		КоличествоПолныхКварталов = КоличествоПолныхКварталов + 1;
		мДатаНачалаИнтервала  = КонецКвартала(мДатаНачалаИнтервала)+1;
	КонецЦикла;
	
	КоличествоДней       = Макс(Цел((ДатаКонцаИнтервала-мДатаНачалаИнтервала +1)/КоличествоСекундВДне),0);
	КоличествоДнейКвартала = Макс(Цел((КонецКвартала(мДатаНачалаИнтервала)-НачалоКвартала(мДатаНачалаИнтервала) +1)/КоличествоСекундВДне),0);
	
	Возврат  КоличествоПолныхКварталов + ОстатокОтНачальногоКвартала + КоличествоДней / КоличествоДнейКвартала;
КонецФункции // КоличествоМесяцев()

// Возвращает количество Лет
//
//
// Параметры:
//  ДатаНачалаИнтервала - Дата начала интервала.
//  ДатаКонцаИнтервала - Дата конца интервала.
//
// Возвращаемое значение:
//  Число - количество Лет
//
Функция КоличествоЛет(ДатаНачалаИнтервала, ДатаКонцаИнтервала)Экспорт
	Если ДатаНачалаИнтервала>=ДатаКонцаИнтервала Тогда
		Возврат 0;
	КонецЕсли;
	
	КоличествоСекундВДне = 60*60*24;

	мДатаНачалаИнтервала = ДатаНачалаИнтервала;
	
	Если НачалоГода(мДатаНачалаИнтервала) = НачалоГода(ДатаКонцаИнтервала)Тогда
		КоличествоДней       = Макс(Цел((ДатаКонцаИнтервала-мДатаНачалаИнтервала +1)/КоличествоСекундВДне),0);
		КоличествоДнейГода = Макс(Цел((КонецГода(мДатаНачалаИнтервала)-НачалоГода(мДатаНачалаИнтервала) +1)/КоличествоСекундВДне),0);
		
		Возврат КоличествоДней/КоличествоДнейГода;
	КонецЕсли;
	
	Если мДатаНачалаИнтервала = НачалоГода(мДатаНачалаИнтервала) Тогда
		ОстатокОтНачальногоГода = 0;
	Иначе
		КоличествоДней       = Макс(Цел((КонецГода(мДатаНачалаИнтервала)-мДатаНачалаИнтервала +1)/КоличествоСекундВДне),0);
		КоличествоДнейГода = Макс(Цел((КонецГода(мДатаНачалаИнтервала)-НачалоГода(мДатаНачалаИнтервала) +1)/КоличествоСекундВДне),0);
		
		ОстатокОтНачальногоГода = КоличествоДней/КоличествоДнейГода;
		
		мДатаНачалаИнтервала = КонецГода(мДатаНачалаИнтервала)+1
	КонецЕсли;
	
	КоличествоПолныхЛет = 0;
	Пока (КонецГода(мДатаНачалаИнтервала)+1)<ДатаКонцаИнтервала Цикл
		КоличествоПолныхЛет = КоличествоПолныхЛет + 1;
		мДатаНачалаИнтервала  = КонецГода(мДатаНачалаИнтервала)+1;
	КонецЦикла;
	
	КоличествоДней       = Макс(Цел((ДатаКонцаИнтервала-мДатаНачалаИнтервала +1)/КоличествоСекундВДне),0);
	КоличествоДнейГода = Макс(Цел((КонецГода(мДатаНачалаИнтервала)-НачалоГода(мДатаНачалаИнтервала) +1)/КоличествоСекундВДне),0);
	
	Возврат  КоличествоПолныхЛет + ОстатокОтНачальногоГода + КоличествоДней / КоличествоДнейГода;
КонецФункции // КоличествоМесяцев()


// Возвращает конец декады
//
// Параметры:
//  мДата - Исследуемая Дата 
//
// Возвращаемое значение:
//  Дата - конец декады
//
Функция КонецДекады(мДата)Экспорт
	
	КоличествоСекундВДне = 60*60*24;

	мДень = День(мДата);
	Если мДень <= 10 Тогда
		Возврат НачалоМесяца(мДата)+КоличествоСекундВДне*10-1;
	ИначеЕсли мДень <= 20 Тогда
		Возврат НачалоМесяца(мДата)+КоличествоСекундВДне*20-1;
	Иначе
		Возврат КонецМесяца(мДата);
	КонецЕсли;
КонецФункции // КонецДекады()

// Возвращает начало декады
// Параметры:
//  мДата - Исследуемая Дата 
//
// Возвращаемое значение:
//  Дата - начало декады
//
Функция НачалоДекады(мДата)Экспорт
	
	КоличествоСекундВДне = 60*60*24;
	мДень = День(мДата);
	Если мДень <= 10 Тогда
		Возврат НачалоМесяца(мДата);
	ИначеЕсли мДень <= 20 Тогда
		Возврат НачалоМесяца(мДата)+КоличествоСекундВДне*10;
	Иначе
		Возврат НачалоМесяца(мДата)+КоличествоСекундВДне*20;
	КонецЕсли;
КонецФункции // КонецДекады()

// Возвращает количество декад в периоде.
//
// Параметры:
//  ДатаНачалаИнтервала - Дата начала интервала.
//  ДатаКонцаИнтервала - Дата конца интервала.
//
// Возвращаемое значение:
//  Число - количество декад
//
Функция КоличествоДекад(ДатаНачалаИнтервала, ДатаКонцаИнтервала)Экспорт
	Если ДатаНачалаИнтервала>=ДатаКонцаИнтервала Тогда
		Возврат 0;
	КонецЕсли;
	
	КоличествоСекундВДне = 60*60*24;

	КоличествоПолныхМесяцев = Цел(КоличествоМесяцев(ДатаНачалаИнтервала, ДатаКонцаИнтервала));
	мДатаНачалаИнтервала = ДобавитьМесяц(ДатаНачалаИнтервала,КоличествоПолныхМесяцев);
	
	Если НачалоДекады(мДатаНачалаИнтервала) = НачалоДекады(ДатаКонцаИнтервала)Тогда
		КоличествоДней       = Макс(Цел((ДатаКонцаИнтервала-мДатаНачалаИнтервала +1)/КоличествоСекундВДне),0);
		КоличествоДнейДекады = Макс(Цел((КонецДекады(мДатаНачалаИнтервала)-НачалоДекады(мДатаНачалаИнтервала) +1)/КоличествоСекундВДне),0);
		
		Возврат КоличествоПолныхМесяцев*3+КоличествоДней/КоличествоДнейДекады;
	КонецЕсли;
	
	Если мДатаНачалаИнтервала = НачалоДекады(мДатаНачалаИнтервала) Тогда
		ОстатокОтНачальнойДекады = 0;
	Иначе
		КоличествоДней       = Макс(Цел((КонецДекады(мДатаНачалаИнтервала)-мДатаНачалаИнтервала +1)/КоличествоСекундВДне),0);
		КоличествоДнейДекады = Макс(Цел((КонецДекады(мДатаНачалаИнтервала)-НачалоДекады(мДатаНачалаИнтервала) +1)/КоличествоСекундВДне),0);
		
		ОстатокОтНачальнойДекады = КоличествоДней/КоличествоДнейДекады;
		
		мДатаНачалаИнтервала = КонецДекады(мДатаНачалаИнтервала)+1
	КонецЕсли;
	
	КоличествоПолныхДекад = 0;
	Пока (КонецДекады(мДатаНачалаИнтервала)+1)<ДатаКонцаИнтервала Цикл
		КоличествоПолныхДекад = КоличествоПолныхДекад + 1;
		мДатаНачалаИнтервала  = КонецДекады(мДатаНачалаИнтервала)+1;
	КонецЦикла;
	
	КоличествоДней       = Макс(Цел((ДатаКонцаИнтервала-мДатаНачалаИнтервала +1)/КоличествоСекундВДне),0);
	КоличествоДнейДекады = Макс(Цел((КонецДекады(мДатаНачалаИнтервала)-НачалоДекады(мДатаНачалаИнтервала) +1)/КоличествоСекундВДне),0);
	
	Возврат КоличествоПолныхМесяцев * 3 + КоличествоПолныхДекад + ОстатокОтНачальнойДекады + КоличествоДней / КоличествоДнейДекады;
	
КонецФункции // КоличествоДекад()

// Исправляет группировку периода отчета - диаграммы.
//
// Параметры:
//  СхемаКомпоновкиДанных - Схема компоновки данных отчета.
//  Интервал - Перечисления.Периодичность
//
Процедура ПроставитьПериодВОтчетПоДиаграмме(СхемаКомпоновкиДанных, Интервал) Экспорт
	
	Если Не ЗначениеЗаполнено(Интервал)  Тогда
		СтрокаЗамены = "НАЧАЛОПЕРИОДА(ВложенныйЗапрос.ПериодПродажи, ДЕНЬ)"
	Иначе
		СтрокаЗамены = "НАЧАЛОПЕРИОДА(ВложенныйЗапрос.ПериодПродажи, "+ВРЕГ(Строка(Интервал))+")";
	КонецЕсли;
	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.Запрос.Запрос;
	
	Для каждого ЗначениеПеречисления Из Перечисления.Периодичность Цикл
		СтрокаИскомая =  "НАЧАЛОПЕРИОДА(ВложенныйЗапрос.ПериодПродажи, "+ВРЕГ(Строка(ЗначениеПеречисления))+")";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрокаИскомая, СтрокаЗамены);
	КонецЦикла; 
	
	СхемаКомпоновкиДанных.НаборыДанных.Запрос.Запрос = ТекстЗапроса;
	
КонецПроцедуры // ПроставитьПериодВОтчетПоДиаграмме()

// Возвращает описание интервала. Используется в отчетах при выводе диаграмм.
//
// Параметры:
//  Интервал - Перечисления.Периодичность
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьОписаниеИнтервалаДиаграммы(Интервал) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Интервал) ИЛИ Интервал = Перечисления.Периодичность.День Тогда
		Возврат НСтр("ru = 'по дням'");
	ИначеЕсли Интервал = Перечисления.Периодичность.Неделя Тогда
		Возврат НСтр("ru = 'по неделям'");
	ИначеЕсли Интервал = Перечисления.Периодичность.Декада Тогда
		Возврат НСтр("ru = 'по декадам'");
	ИначеЕсли Интервал = Перечисления.Периодичность.Месяц Тогда
		Возврат НСтр("ru = 'по месяцам'");
	ИначеЕсли Интервал = Перечисления.Периодичность.Квартал Тогда
		Возврат НСтр("ru = 'по кварталам'");
	ИначеЕсли Интервал = Перечисления.Периодичность.Полугодие Тогда
		Возврат НСтр("ru = 'по полугодиям'");
	ИначеЕсли Интервал = Перечисления.Периодичность.Год Тогда
		Возврат НСтр("ru = 'по годам'");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПолучитьОписаниеИнтервалаДиаграммы()

// Рассчитывает количество периодов.
//
// Параметры:
//	ВходящиеПараметры - структура, содержит даты:
//  	НачалоПериода   - Начало отчета.
//  	КонецПериода    - Окончание отчета.
//  	ДатаНачалаАкции - Начало акции.
//  	ДатаКонцаАкции  - Окончание акции.
//  Интервал - Перечисления.Периодичность
//  КоличествоПериодовДоАкции    - определяемое количество периодов до акции.
//  КоличествоПериодовАкции      - определяемое количество периодов акции.
//  КоличествоПериодовПослеАкции - определяемое количество периодов после акции.
//  ОписаниеПериодаПриведения    - Описание периода усреднения.
//
Процедура РасчетКоличестваПериодов(ВходящиеПараметры,
								   КоличествоПериодовДоАкции,
								   КоличествоПериодовАкции,
								   КоличествоПериодовПослеАкции,
								   ОписаниеПериодаПриведения) Экспорт
	НачалоПериода = ВходящиеПараметры.НачалоПериода;
	КонецПериода = ВходящиеПараметры.КонецПериода;
	ДатаНачалаАкции = ВходящиеПараметры.ДатаНачалаАкции;
	ДатаКонцаАкции = ВходящиеПараметры.ДатаКонцаАкции;
	Интервал = ВходящиеПараметры.Интервал;
	
	НачалоПериодаДоАкции = НачалоДня(НачалоПериода);
	КонецПериодаДоАкции  = НачалоДня(ДатаНачалаАкции)-1;
	
	НачалоПериодаАкции = НачалоДня(ДатаНачалаАкции);
	КонецПериодаАкции  = КонецДня(ДатаКонцаАкции);
	
	НачалоПериодаПослеАкции = КонецДня(ДатаКонцаАкции)+1;
	КонецПериодаПослеАкции  = КонецДня(КонецПериода);
	
	КоличествоПериодовДоАкции    = 1;
	КоличествоПериодовАкции      = 1;
	КоличествоПериодовПослеАкции = 1;
	
	КоличествоСекундВДне = 60*60*24;
	
	ОписаниеПериодаПриведения = "";
	Если ЗначениеЗаполнено(Интервал) Тогда
		ОписаниеПериодаПриведения = НСтр("ru = '(интервал %1)'");
		ОписаниеПериодаПриведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеПериодаПриведения, Интервал);
	КонецЕсли;
	Если Интервал = Перечисления.Периодичность.День Тогда
		КоличествоПериодовДоАкции	 = Макс(Цел((КонецПериодаДоАкции - НачалоПериодаДоАкции + 1) / КоличествоСекундВДне), 0);
		КоличествоПериодовАкции		 = Макс(Цел((КонецПериодаАкции - НачалоПериодаАкции + 1) / КоличествоСекундВДне), 0);
		КоличествоПериодовПослеАкции = Макс(Цел((КонецПериодаПослеАкции - НачалоПериодаПослеАкции + 1) / КоличествоСекундВДне), 0);
	ИначеЕсли Интервал = Перечисления.Периодичность.Неделя Тогда
		КоличествоПериодовДоАкции    = КоличествоНедель(НачалоПериодаДоАкции, КонецПериодаДоАкции);
		КоличествоПериодовАкции      = КоличествоНедель(НачалоПериодаАкции, КонецПериодаАкции);
		КоличествоПериодовПослеАкции = КоличествоНедель(НачалоПериодаПослеАкции, КонецПериодаПослеАкции);
	ИначеЕсли Интервал = Перечисления.Периодичность.Декада Тогда
		КоличествоПериодовДоАкции    = КоличествоДекад(НачалоПериодаДоАкции, КонецПериодаДоАкции);
		КоличествоПериодовАкции      = КоличествоДекад(НачалоПериодаАкции, КонецПериодаАкции);
		КоличествоПериодовПослеАкции = КоличествоДекад(НачалоПериодаПослеАкции, КонецПериодаПослеАкции);
	ИначеЕсли Интервал = Перечисления.Периодичность.Месяц Тогда
		КоличествоПериодовДоАкции    = КоличествоМесяцев(НачалоПериодаДоАкции, КонецПериодаДоАкции);
		КоличествоПериодовАкции      = КоличествоМесяцев(НачалоПериодаАкции, КонецПериодаАкции);
		КоличествоПериодовПослеАкции = КоличествоМесяцев(НачалоПериодаПослеАкции, КонецПериодаПослеАкции);
	ИначеЕсли Интервал = Перечисления.Периодичность.Квартал Тогда
		КоличествоПериодовДоАкции    = КоличествоКварталов(НачалоПериодаДоАкции, КонецПериодаДоАкции);
		КоличествоПериодовАкции      = КоличествоКварталов(НачалоПериодаАкции, КонецПериодаАкции);
		КоличествоПериодовПослеАкции = КоличествоКварталов(НачалоПериодаПослеАкции, КонецПериодаПослеАкции);
	ИначеЕсли Интервал = Перечисления.Периодичность.Полугодие Тогда
	ИначеЕсли Интервал = Перечисления.Периодичность.Год Тогда
		КоличествоПериодовДоАкции    = КоличествоЛет(НачалоПериодаДоАкции, КонецПериодаДоАкции);
		КоличествоПериодовАкции      = КоличествоЛет(НачалоПериодаАкции, КонецПериодаАкции);
		КоличествоПериодовПослеАкции = КоличествоЛет(НачалоПериодаПослеАкции, КонецПериодаПослеАкции);
	КонецЕсли;
	
КонецПроцедуры

// Определяет список сегментов акции, 
// Если в акции есть хоть одна скидка действующая по всему документу, то возвращается пустой список.
//
// Параметры:
//  МаркетинговаяАкция - Документ маркетинговая акция.
//
// Возвращаемое значение:
//   Список сегментов
//
Функция ОпределитьСписокСегментовАкции(МаркетинговаяАкция) Экспорт

	СписокСегментов = Новый СписокЗначений;
	
	Если НЕ ЗначениеЗаполнено(МаркетинговаяАкция) Тогда
		Возврат СписокСегментов;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДействиеСкидокНаценок.СкидкаНаценка.СегментНоменклатурыПредоставления КАК Сегмент
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
	|ГДЕ
	|	ДействиеСкидокНаценок.СкидкаНаценка.СегментНоменклатурыПредоставления = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)
	|	И ДействиеСкидокНаценок.Регистратор = &Регистратор";
	
	
	Запрос.УстановитьПараметр("Регистратор", МаркетинговаяАкция);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат СписокСегментов;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ДействиеСкидокНаценок.СкидкаНаценка.СегментНоменклатурыПредоставления КАК Сегмент
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
	|ГДЕ
	|	(НЕ ДействиеСкидокНаценок.СкидкаНаценка.СегментНоменклатурыПредоставления = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка))
	|	И ДействиеСкидокНаценок.Регистратор = &Регистратор";
	
	Запрос.УстановитьПараметр("Регистратор", МаркетинговаяАкция);
	
	Результат = Запрос.Выполнить();
	
	СписокСегментов.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Сегмент"));
	
	Возврат СписокСегментов;

КонецФункции // ОпределитьСписокСегментовАкции()

// Определяет список магазинов акции, 
// Если в акции есть хоть одна скидка действующая по всему документу, то возвращается пустой список.
//
// Параметры:
//  МаркетинговаяАкция - Документ маркетинговая акция.
//
// Возвращаемое значение:
//   Список сегментов
//
Функция ОпределитьСписокМагазиновАкции(МаркетинговаяАкция) Экспорт

	СписокСегментов = Новый СписокЗначений;
	
	Если НЕ ЗначениеЗаполнено(МаркетинговаяАкция) Тогда
		Возврат СписокСегментов;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДействиеСкидокНаценок.Магазин
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
	|ГДЕ
	|	ДействиеСкидокНаценок.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|	И ДействиеСкидокНаценок.Регистратор = &Регистратор";
	
	
	Запрос.УстановитьПараметр("Регистратор", МаркетинговаяАкция);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат СписокСегментов;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДействиеСкидокНаценок.Магазин
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
	|ГДЕ
	|	(НЕ ДействиеСкидокНаценок.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	|	И ДействиеСкидокНаценок.Регистратор = &Регистратор";
	
	Запрос.УстановитьПараметр("Регистратор", МаркетинговаяАкция);
	
	Результат = Запрос.Выполнить();
	
	СписокСегментов.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Магазин"));
	
	Возврат СписокСегментов;

КонецФункции // ОпределитьСписокСегментовАкции()

// функция находит параметр компоновки данных по имени.
//
Функция НастройкаПараметра(КомпоновщикНастроек, ИмяПараметра) Экспорт

	ПараметрДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	Если ПараметрДанных <> Неопределено Тогда
		ПараметрПользовательскойНастройки =
			КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
				ПараметрДанных.ИдентификаторПользовательскойНастройки);
		Если ПараметрПользовательскойНастройки <> Неопределено Тогда
			Возврат ПараметрПользовательскойНастройки;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Устанавливает отбор по списку значений и указанному полю.
//
// Параметры:
//  КомпоновщикНастроек   - Компоновщик Настроек отчета.
//  ИмяПоля - строка с именем поля.
//  СписокЗначенийОтбора - Список значений устанавливаемых в отбор.
//  ОтключатьОтборПриПустомСписке - Булево. Если список пустой по отбор отключается, иначе будет отбор по пустому
//                                  правому значению.
//
Процедура УстановитьОтборВКомпоновщикеПоСписку(КомпоновщикНастроек, ИмяПоля, СписокЗначенийОтбора, ОтключатьОтборПриПустомСписке = Истина) Экспорт

	НайденЭлементОтбора = Ложь;
	КоллекцияЭлементовОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	ДоступноеПолеКомпоновки = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы.Найти(ИмяПоля);
	
	Если ДоступноеПолеКомпоновки = Неопределено Тогда
		Возврат;
	Иначе
		ПолеКомпоновки = ДоступноеПолеКомпоновки.Поле;
	КонецЕсли;
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементовОтбора Цикл
		Если ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			НайденЭлементОтбора = Истина;
			ЭлементОтбораПоля   = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СписокЗначенийОтбора.Количество() = 0 Тогда
		Если ОтключатьОтборПриПустомСписке Тогда
			Если НайденЭлементОтбора Тогда
				ЭлементОтбораПоля.Использование = Ложь;
			КонецЕсли; 
		Иначе
			Если Не НайденЭлементОтбора Тогда
				ЭлементОтбораПоля = КоллекцияЭлементовОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбораПоля.ЛевоеЗначение = ПолеКомпоновки;
				НайденЭлементОтбора = Истина;
			КонецЕсли;
			
			ЭлементОтбораПоля.ПравоеЗначение = СписокЗначенийОтбора;
			ЭлементОтбораПоля.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбораПоля.Использование = Истина;
		КонецЕсли;
	Иначе
		Если Не НайденЭлементОтбора Тогда
			ЭлементОтбораПоля = КоллекцияЭлементовОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораПоля.ЛевоеЗначение = ПолеКомпоновки;
			НайденЭлементОтбора = Истина;
		КонецЕсли;
		
		Если СписокЗначенийОтбора.Количество() = 1 Тогда
			ЭлементОтбораПоля.ПравоеЗначение = СписокЗначенийОтбора[0].Значение;
			ЭлементОтбораПоля.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		Иначе
			ЭлементОтбораПоля.ПравоеЗначение = СписокЗначенийОтбора;
			ЭлементОтбораПоля.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		КонецЕсли;
		ЭлементОтбораПоля.Использование = Истина;
		
	КонецЕсли;
	
	Если НайденЭлементОтбора Тогда
	
		ЭлементПользовательскогоОтбораПоля = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбораПоля.ИдентификаторПользовательскойНастройки);
		
		Если НЕ ЭлементПользовательскогоОтбораПоля = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭлементПользовательскогоОтбораПоля, ЭлементОтбораПоля)
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры // УстановитьОтборВСписке()

// Устанавливает отбор по сегментам номенклатуры, участвующих в маркетинговой акции.
//
// Параметры:
//  КомпоновщикНастроек   - Компоновщик Настроек отчета.
//  МаркетинговаяАкция - Документ маркетинговая акция.
//  Периоды - структура
//
Процедура УстановитьОтборСегментовПоМаркетинговойАкции(КомпоновщикНастроек, МаркетинговаяАкция, Периоды) Экспорт
	Перем НачалоПериода, КонецПериода;
	
	ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ЗначениеПараметраКонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	
	ЗначениеПараметраНачалоПериодаАкция = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодНачалаАкции"));
	ЗначениеПараметраКонецПериодаАкция  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОкончанияАкции"));
	
	ЗначенияПользовательскогоПараметраПериод      = НастройкаПараметра(КомпоновщикНастроек, "Период");
	ЗначенияПользовательскогоПараметраПериодАкция = НастройкаПараметра(КомпоновщикНастроек, "ПериодАкции");
	
	ЗначениеПараметраПериод      = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	ЗначениеПараметраПериодАкции = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодАкции"));
	
	Если ЗначениеЗаполнено(МаркетинговаяАкция) Тогда
		ДатаНачалаАкции = МаркетинговаяАкция.ДатаНачалаДействия;
		ДатаКонцаАкции = МаркетинговаяАкция.ДатаОкончанияДействия;
		Если Не ЗначениеЗаполнено(ДатаКонцаАкции)  Тогда
			ДатаКонцаАкции = КонецДня(ТекущаяДатаСеанса());
		КонецЕсли;
		
		Если ЗначениеПараметраНачалоПериодаАкция <> Неопределено Тогда
			ЗначениеПараметраНачалоПериодаАкция.Значение = ДатаНачалаАкции;
			ЗначениеПараметраНачалоПериодаАкция.Использование = Истина;
		КонецЕсли;
		
		Если ЗначениеПараметраКонецПериодаАкция <> Неопределено Тогда
			ЗначениеПараметраКонецПериодаАкция.Значение = ДатаКонцаАкции;
			ЗначениеПараметраКонецПериодаАкция.Использование = Истина;
		КонецЕсли;
		
		Если ЗначенияПользовательскогоПараметраПериодАкция <> Неопределено Тогда
			ЗначенияПользовательскогоПараметраПериодАкция.Значение.ДатаНачала    = ДатаНачалаАкции;
			ЗначенияПользовательскогоПараметраПериодАкция.Значение.ДатаОкончания = ДатаКонцаАкции;
			ЗначенияПользовательскогоПараметраПериодАкция.Использование = Истина;
		КонецЕсли;
		
		Если ЗначениеПараметраПериодАкции <> Неопределено Тогда
			ЗначениеПараметраПериодАкции.Значение.ДатаНачала    = ДатаНачалаАкции;
			ЗначениеПараметраПериодАкции.Значение.ДатаОкончания = ДатаКонцаАкции;
			ЗначениеПараметраПериодАкции.Использование = Истина;
		КонецЕсли;
	Иначе
		ДатаНачалаАкции = Дата('00010101');
		ДатаКонцаАкции  = Дата('00010101');
		
		Если ЗначенияПользовательскогоПараметраПериодАкция <> Неопределено Тогда
			ДатаНачалаАкции = ЗначенияПользовательскогоПараметраПериодАкция.Значение.ДатаНачала;
			ДатаКонцаАкции  = ЗначенияПользовательскогоПараметраПериодАкция.Значение.ДатаОкончания;
		КонецЕсли;
	КонецЕсли;
	
	КонецПериода  = Периоды.КонецПериода;
	НачалоПериода = Периоды.НачалоПериода;
	
	Если ЗначениеПараметраНачалоПериода <> Неопределено Тогда
		ЗначениеПараметраНачалоПериода.Значение = НачалоПериода;
		ЗначениеПараметраНачалоПериода.Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеПараметраКонецПериода <> Неопределено Тогда
		ЗначениеПараметраКонецПериода.Значение = КонецПериода;
		ЗначениеПараметраКонецПериода.Использование = Истина;
	КонецЕсли;
	
	Если ЗначенияПользовательскогоПараметраПериод <> Неопределено Тогда
		ЗначенияПользовательскогоПараметраПериод.Значение.ДатаНачала    = НачалоПериода;
		ЗначенияПользовательскогоПараметраПериод.Значение.ДатаОкончания = КонецПериода;
	КонецЕсли;
	
	Если ЗначениеПараметраПериод <> Неопределено Тогда
		ЗначениеПараметраПериод.Значение.ДатаНачала    = НачалоПериода;
		ЗначениеПараметраПериод.Значение.ДатаОкончания = КонецПериода;
	КонецЕсли;
	
	// Отбор по сегментам
	СписокСегментов = ОпределитьСписокСегментовАкции(МаркетинговаяАкция);
	УстановитьОтборВКомпоновщикеПоСписку(КомпоновщикНастроек, "Сегмент", СписокСегментов);
	
	СписокМагазинов = ОпределитьСписокМагазиновАкции(МаркетинговаяАкция);
	УстановитьОтборВКомпоновщикеПоСписку(КомпоновщикНастроек, "Магазин", СписокМагазинов);

КонецПроцедуры // УстановитьОтборСегментовПоМаркетинговойАкции()

// Устанавливает значения отбора по другому отбору-источнику.
//
// Параметры:
//  КомпоновщикНастроек   - Компоновщик Настроек отчета.
//  ОтборИсточник - отбор источник заполнения.
//
Процедура ЗаполнитьОтборПоОтбору(КомпоновщикНастроек, ОтборИсточник) Экспорт

	// Сбросить все используемые настройки.
	
	Для каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		ЭлементОтбора.Использование = Ложь;
		
		ИдентификаторПользовательскойНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
		
		Если ЗначениеЗаполнено(ИдентификаторПользовательскойНастройки) Тогда
			
			ЭлементПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПользовательскойНастройки);
			
			Если НЕ ЭлементПользовательскойНастройки = Неопределено Тогда
				ЭлементПользовательскойНастройки.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Заполняем по отбору
	Для каждого ЭлементОтбораИсточника Из ОтборИсточник.Элементы Цикл
		
		Для каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если ЭлементОтбора.ЛевоеЗначение = ЭлементОтбораИсточника.ЛевоеЗначение Тогда
				
				ЗаполнитьЗначенияСвойств(ЭлементОтбора, ЭлементОтбораИсточника, "ВидСравнения, Использование, ПравоеЗначение, Применение");
				
				ИдентификаторПользовательскойНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
				
				Если ЗначениеЗаполнено(ИдентификаторПользовательскойНастройки) Тогда
					
					ЭлементПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПользовательскойНастройки);
					
					Если НЕ ЭлементПользовательскойНастройки = Неопределено Тогда
						ЗаполнитьЗначенияСвойств(ЭлементПользовательскойНастройки, ЭлементОтбораИсточника, "ВидСравнения, Использование, ПравоеЗначение, Применение");
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает значения параметры данных.
//
// Параметры:
//  КомпоновщикНастроек   - Компоновщик Настроек отчета.
//  ПараметрыДанныхИсточника - параметры данных.
//
Процедура ЗаполнитьПараметрыКомпоновщика(КомпоновщикНастроек, ПараметрыДанныхИсточника) Экспорт
	
	Для каждого ЭлементПараметраДанныхИсточника Из ПараметрыДанныхИсточника.Элементы Цикл
		
		ЭлементПараметраДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ЭлементПараметраДанныхИсточника.Параметр);
		
		Если НЕ ЭлементПараметраДанных = Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(ЭлементПараметраДанных, ЭлементПараметраДанныхИсточника, , "ИдентификаторПользовательскойНастройки, ПредставлениеПользовательскойНастройки");
			
			ИдентификаторПользовательскойНастройки = ЭлементПараметраДанных.ИдентификаторПользовательскойНастройки;
			
			Если ЗначениеЗаполнено(ИдентификаторПользовательскойНастройки) Тогда
				
				ЭлементПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПользовательскойНастройки);
				
				Если НЕ ЭлементПользовательскойНастройки = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ЭлементПользовательскойНастройки, ЭлементПараметраДанных, , "ИдентификаторПользовательскойНастройки, ПредставлениеПользовательскойНастройки");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура находит серийный номер по введенному тексту.
//
// Параметры:
//  Текст   - введенный текст
//  ТекстАвтоПодбора - текст авто подбора.
//  МассивИспользуемыхСерийныхНомеров - Уже выбранные серийные номера.
//  Номенклатура - номенклатура поиска.
//  ТипСерийногоНомера - тип серийного номера номенклатуры.
//
// ВозвращаемоеЗначение
//  Массив
//
Функция ПодобратьСерийныеНомераПоТексту(Текст, МассивИспользуемыхСерийныхНомеров, Номенклатура = Неопределено, ТипСерийногоНомера = Неопределено) Экспорт

	
	Запрос = Новый Запрос;
	
	Если НЕ ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СерийныеНомера.КодСерийногоНомера КАК ПолныйТекст,
		|	СерийныеНомера.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СерийныеНомера КАК СерийныеНомера
		|ГДЕ
		|	СерийныеНомера.КодСерийногоНомера ПОДОБНО &ТекстВвода
		|	И (НЕ СерийныеНомера.Ссылка В (&МассивИспользуемыхСерийныхНомеров))";
		Если НЕ Номенклатура = Неопределено Тогда
		
			Запрос.Текст = Запрос.Текст + "
			|	И СерийныеНомера.Владелец = &Номенклатура";
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Магнитный Тогда
	
		Если НЕ ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой Тогда
			Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
		КонецЕсли;
		
		
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
		|	Штрихкоды.Штрихкод КАК ПолныйТекст,
		|	Штрихкоды.Владелец КАК Ссылка
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод ПОДОБНО &ТекстВвода
		|	И (НЕ Штрихкоды.Владелец В (&МассивИспользуемыхСерийныхНомеров))";
		
		Если НЕ Номенклатура = Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И Штрихкоды.Владелец.Владелец = &Номенклатура";
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивИспользуемыхСерийныхНомеров", МассивИспользуемыхСерийныхНомеров);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	ТекстВвода = "%" + Текст + "%";
	Запрос.УстановитьПараметр("ТекстВвода", ТекстВвода);
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Возврат ТаблицаЗапроса.ВыгрузитьКолонку("Ссылка");
КонецФункции // ПодобратьСерийныеНомераПоТексту()

// Находит серийные номера и открывает выборку номера.
//
// Параметры:
//  СтруктураПараметров - Структура параметров.
//  Текст   - введенный текст
//  СтандартнаяОбработка - Флаг стандартной обработки выбора. Здесь сбрасывается.
//
Функция ОбработатьВведенныйТекстСерийногоНомера(СтруктураПараметров, Текст, СтандартнаяОбработка) Экспорт
	Перем ВыдаватьСообщения, УникальныйИдентификатор;
	Перем СерийныеНомера, КлючСтроки;
	
	Если Не ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров.Свойство("ВыдаватьСообщения"                , ВыдаватьСообщения);
	СтруктураПараметров.Свойство("УникальныйИдентификатор"          , УникальныйИдентификатор);
	СтруктураПараметров.Свойство("СерийныеНомера"                   , СерийныеНомера);
	СтруктураПараметров.Свойство("КлючСтроки"                       , КлючСтроки);
	
	МассивСерийныхНомеров = МаркетинговыеАкцииСерверПривилегированный.ПодобратьМассивСерийныхНомеров(СтруктураПараметров, Текст);
	
	Если МассивСерийныхНомеров.Количество() = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли МассивСерийныхНомеров.Количество() = 1 Тогда
		Возврат ПолучитьДанныеПодарочногоСертификата(МассивСерийныхНомеров[0]);
	ИначеЕсли МассивСерийныхНомеров.Количество() <= 51 Тогда
		Возврат МассивСерийныхНомеров
	КонецЕсли;
	
	Возврат Неопределено;
	

КонецФункции

// Процедура находит серийный номер по введенному тексту.
//
// Параметры:
//  Текст   - введенный текст
//  ТекстАвтоПодбора - текст авто подбора.
//  МассивИспользуемыхСерийныхНомеров - Уже выбранные серийные номера.
//  Номенклатура - номенклатура поиска.
//  ТипСерийногоНомера - тип серийного номера номенклатуры.
//
// ВозвращаемоеЗначение
//  Массив
//
Функция ПодобратьСерийныеНомераПоТексту_РМК(Текст, ТекстАвтоПодбора, МассивИспользуемыхСерийныхНомеров, Номенклатура = Неопределено, ТипСерийногоНомера = Неопределено) Экспорт

	
	Запрос = Новый Запрос;
	
	Если НЕ ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СерийныеНомера.КодСерийногоНомера КАК ПолныйТекст,
		|	СерийныеНомера.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СерийныеНомера КАК СерийныеНомера
		|ГДЕ
		|	СерийныеНомера.КодСерийногоНомера ПОДОБНО &ТекстВвода
		|	И (НЕ СерийныеНомера.Ссылка В (&МассивИспользуемыхСерийныхНомеров))";
		Если НЕ Номенклатура = Неопределено Тогда
		
			Запрос.Текст = Запрос.Текст + "
			|	И СерийныеНомера.Владелец = &Номенклатура";
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Магнитный Тогда
	
		Если НЕ ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой Тогда
			Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
		КонецЕсли;
		
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	Штрихкоды.Штрихкод КАК ПолныйТекст,
		|	Штрихкоды.Владелец КАК Ссылка
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод ПОДОБНО &ТекстВвода
		|	И (НЕ Штрихкоды.Владелец В (&МассивИспользуемыхСерийныхНомеров))";
		
		Если НЕ Номенклатура = Неопределено Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И Штрихкоды.Владелец.Владелец = &Номенклатура";
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивИспользуемыхСерийныхНомеров", МассивИспользуемыхСерийныхНомеров);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	ТекстВвода = "%" + Текст + "%";
	Запрос.УстановитьПараметр("ТекстВвода", ТекстВвода);
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	
	Возврат ТаблицаЗапроса.ВыгрузитьКолонку("Ссылка");
КонецФункции // АвтоподборТекстаСерийныйНомер()

#КонецОбласти
