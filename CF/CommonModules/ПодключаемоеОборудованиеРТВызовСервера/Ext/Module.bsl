
#Область ПрограммныйИнтерфейс

/////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОИСКА И ОПРЕДЕЛЕНИЯ ТИПОВ ШТРИХКОДОВ

// Функция обрабатывает получение штрихкода от сканера штрихкодов.
//
Функция ПолученШтрихкодИзСШК(Штрихкод, Форма) Экспорт
	
	СтруктураРезультат = ДанныеПоискаПоШтрихкоду(Штрихкод, Форма);
	
	НайденоОбъектов = СтруктураРезультат.ЗначенияПоиска.Количество();
	Если НайденоОбъектов = 1 Тогда
		Если НЕ СтруктураРезультат.Свойство("ПовторАкцизнойМарки") Тогда
			Форма.ОбработатьДанныеПоКодуСервер(СтруктураРезультат);
		КонецЕсли;
	ИначеЕсли НайденоОбъектов > 1 Тогда
		ПодключаемоеОборудованиеРТВызовСервера.ПодготовитьДанныеДляВыбора(СтруктураРезультат);
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Обработка полученного штрихкода.
// Штрихкод - Строка
// Форма - Форма, в которой определен обработчик действия "ПолученыШтрихкоды"
// СтруктураДействий, ключи: ПроверкаВесовыхТоваров, 
//                           ПроверкаТоваров,
//                           ПроверкаСерийныхНомеров,
//                           ПроверкаКарт [РегистрацияНовойКарты, Пользователь].
//
Функция ДанныеПоискаПоШтрихкоду(Штрихкод, Форма) Экспорт
	
	Если Форма.ПараметрыСобытийПО = Неопределено Тогда
		СтруктураДействий = Новый Структура;
	Иначе
		СтруктураДействий = Форма.ПараметрыСобытийПО;
	КонецЕсли;
	
	ТипШтрихкодаРТ = ОпределитьТипШтрихкода(Штрихкод);
	НеизвестныеДанныеПО = Истина;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	НайденоОбъектов = 0;
	СтруктураПараметров = СтруктураДанныхПоиска();
	
	// Весовые товары и штучные на весах.
	Если ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13 Тогда
		
		ПрефиксВнутреннегоШтрихкодаВесовогоТовара = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ПрефиксВнутреннегоШтрихкодаВесовогоТовара");
		ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара");
		ДлинаКодаВесовогоТовара = СтрДлина(Формат(ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВерхняяГраницаДиапазонаSKUВесовогоТовара"), "ЧГ = 0"));
		
		ПрефиксКода = Лев(Штрихкод, 2);
		ПрефиксВесовой = "2" + ПрефиксВнутреннегоШтрихкодаВесовогоТовара;
		ПрефиксШтучный = "2" + ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара;
		ЭтоВесовой = ПрефиксКода = ПрефиксВесовой;
		ЭтоШтучный = ПрефиксКода = ПрефиксШтучный;
		
		Если ДлинаКодаВесовогоТовара < 5 Тогда
			ДлинаКодаВесовогоТовара = 5;
		КонецЕсли;
		
		Если ЭтоВесовой ИЛИ ЭтоШтучный Тогда
			
			КодТовара        = Число(Сред(Штрихкод, 3,  ДлинаКодаВесовогоТовара));
			КоличествоТовара = Число(Сред(Штрихкод, 3 + ДлинаКодаВесовогоТовара, 10 - ДлинаКодаВесовогоТовара));
			Если ЭтоВесовой Тогда // В количестве указан вес.
				КоличествоТовара = КоличествоТовара / 1000;
			КонецЕсли;
			 
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	0 КАК НомерСтроки,
			|	КодыТоваровSKU.Номенклатура КАК Владелец,
			|	КодыТоваровSKU.Характеристика КАК Характеристика,
			|	КодыТоваровSKU.Упаковка КАК Упаковка,
			|	&ТипШтрихкода КАК ТипШтрихкода,
			|	&КоличествоТовара КАК Количество,
			|	&ПустойШтрихКодУпаковки КАК ШтрихкодУпаковкиЕГАИС,
			|	&ПустойТипУпаковки КАК ТипУпаковки
			|ИЗ
			|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
			|ГДЕ
			|	КодыТоваровSKU.SKU = &Код
			|
			|ОБЪЕДИНИТЬ ВСЕ 
			|
			|ВЫБРАТЬ
			|	0,
			|	Штрихкоды.Владелец КАК Владелец,
			|	Штрихкоды.Характеристика КАК Характеристика,
			|	Штрихкоды.Упаковка КАК Упаковка,
			|	Штрихкоды.ТипШтрихкода КАК ТипШтрихкода,
			|	1 КАК Количество,
			|	&ПустойШтрихКодУпаковки,
			|	&ПустойТипУпаковки
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Штрихкод = &Штрихкод
			|";
			
			Запрос.УстановитьПараметр("Код", КодТовара);
			Запрос.УстановитьПараметр("КоличествоТовара", КоличествоТовара);
			
		КонецЕсли;
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		Если АкцизныеМаркиВызовСервера.ЭтоШтрихкодАкцизнойМарки(Штрихкод) Тогда
			Если СтруктураДействий.Свойство("ПоискАкцизнойМарки") Тогда
				НайтиПоАкцизнойМарке(Форма, СтруктураПараметров, Штрихкод, ТипШтрихкодаРТ, НеизвестныеДанныеПО, НайденоОбъектов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеМаркировки = Неопределено;
	
	Если НайденоОбъектов = 0 Тогда
		ДанныеМаркировки = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьКодМаркировки(Штрихкод);
		
		Если ДанныеМаркировки.Разобран Тогда
			
			// С хрю-видом пока БПО работать не умеет.
			//Если ЗначениеЗаполнено(ДанныеМаркировки.ПредставлениеШтрихкода) Тогда
			//	Штрихкод = ДанныеМаркировки.ПредставлениеШтрихкода;
			//КонецЕсли;
			
			Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента"
				ИЛИ Форма.ИмяФормы = "Обработка.РМКУправляемыйРежим.Форма.Форма" Тогда
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("КодМаркировки", Штрихкод);
				СтрокиМарок = Форма.Объект.КодыМаркировки.НайтиСтроки(СтруктураПоиска);
				Если СтрокиМарок.Количество() > 0 Тогда
					НайденнаяСтрока = СтрокиМарок[0];
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("КлючСвязи", НайденнаяСтрока.КлючСвязи);
					СтрокиНоменклатуры = Форма.Объект.Товары.НайтиСтроки(СтруктураПоиска);
					Если СтрокиНоменклатуры.Количество() > 0 Тогда
						НайденнаяСтрока = СтрокиНоменклатуры[0];
						ИдентификаторСтроки = НайденнаяСтрока.ПолучитьИдентификатор();
						НеизвестныеДанныеПО = Ложь;
						
						СтруктураШтрихкода = Новый Структура;
						Если ЗначениеЗаполнено(СтруктураПараметров.ДанныеПО) Тогда
							СтруктураШтрихкода.Вставить("ДанныеПО", СтруктураПараметров.ДанныеПО);
						ИначеЕсли ЗначениеЗаполнено(Штрихкод) Тогда
							СтруктураШтрихкода.Вставить("ДанныеПО", Штрихкод);
						КонецЕсли;
						СтруктураШтрихкода.Вставить("Штрихкод", Штрихкод);
						СтруктураШтрихкода.Вставить("МагнитныйКод", "");
						СтруктураШтрихкода.Вставить("Количество", 1);
						
						СтруктураПараметров.ЗначенияПоиска.Добавить(СтруктураШтрихкода);
						СтруктураПараметров.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
						СтруктураПараметров.Вставить("ПовторАкцизнойМарки", Истина);
						СтруктураПараметров.Вставить("ТекстПредупреждения", НСтр("ru = 'Код маркировки уже присутствует в чеке'"));
						НайденоОбъектов = 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ТекстЗапроса = "ВЫБРАТЬ
			|	0 КАК НомерСтроки,
			|	Штрихкоды.Владелец КАК Владелец,
			|	Штрихкоды.Характеристика КАК Характеристика,
			|	Штрихкоды.Упаковка КАК Упаковка,
			|	Штрихкоды.ТипШтрихкода КАК ТипШтрихкода,
			|	1 КАК Количество,
			|	&ПустойШтрихКодУпаковки КАК ШтрихкодУпаковкиЕГАИС,
			|	&ПустойТипУпаковки КАК ТипУпаковки
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Штрихкод = &EAN
			|";
			Запрос.УстановитьПараметр("EAN", ДанныеМаркировки.EAN);
		Иначе
		
			Если ПустаяСтрока(ТекстЗапроса) Тогда
				ТекстЗапроса = "ВЫБРАТЬ
				|	0 КАК НомерСтроки,
				|	Штрихкоды.Владелец КАК Владелец,
				|	Штрихкоды.Характеристика КАК Характеристика,
				|	Штрихкоды.Упаковка КАК Упаковка,
				|	Штрихкоды.ТипШтрихкода КАК ТипШтрихкода,
				|	1 КАК Количество,
				|	&ПустойШтрихКодУпаковки КАК ШтрихкодУпаковкиЕГАИС,
				|	&ПустойТипУпаковки КАК ТипУпаковки
				|ИЗ
				|	РегистрСведений.Штрихкоды КАК Штрихкоды
				|ГДЕ
				|	Штрихкоды.Штрихкод = &Штрихкод
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	0,
				|	Штрихкоды.Номенклатура,
				|	Штрихкоды.Характеристика,
				|	ВЫБОР
				|		КОГДА Штрихкоды.Упаковка ССЫЛКА Справочник.УпаковкиНоменклатуры
				|			ТОГДА Штрихкоды.Упаковка
				|		ИНАЧЕ &ПустаяУпаковка
				|	КОНЕЦ,
				|	&ТипШтрихкода,
				|	ВЫБОР
				|		КОГДА Штрихкоды.Количество = 0
				|			ТОГДА 1
				|		ИНАЧЕ Штрихкоды.Количество
				|	КОНЕЦ,
				|	Штрихкоды.Ссылка,
				|	Штрихкоды.ТипУпаковки
				|ИЗ
				|	Справочник.ШтрихкодыУпаковокТоваров КАК Штрихкоды
				|ГДЕ
				|	Штрихкоды.ЗначениеШтрихкода = &Штрихкод";
					
			КонецЕсли;
		КонецЕсли;
		
		Если НайденоОбъектов = 0 Тогда
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
			Запрос.УстановитьПараметр("ТипШтрихкода", ТипШтрихкодаРТ);
			Запрос.УстановитьПараметр("ПустаяУпаковка", Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПустойШтрихКодУпаковки", Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
			Запрос.УстановитьПараметр("ПустойТипУпаковки", Перечисления.ТипыУпаковок.ПустаяСсылка());
			Запрос.УстановитьПараметр("ТипУпаковки", Перечисления.ТипыУпаковок.МаркированныйТовар);
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			НайденоОбъектов = Выборка.Количество();
			ДополнитьСтруктуруРезультатамиПоиска(СтруктураПараметров, Выборка, Штрихкод, "", НеизвестныеДанныеПО, ДанныеМаркировки);
		КонецЕсли;
	КонецЕсли;
	
	Если НайденоОбъектов = 0 Тогда
		ДополнитьСтруктуруДляРегистрацииНовогоОбъекта(
			СтруктураПараметров,
			Штрихкод,
			СтруктураДействий,
			НеизвестныеДанныеПО,
			ТипШтрихкодаРТ,
			Истина);
		
	КонецЕсли;
	
	СтруктураПараметров.НеизвестныеДанныеПО = НеизвестныеДанныеПО;
	СтруктураПараметров.ДанныеПО = Штрихкод;
	СтруктураПараметров.ТипДанныхПО = "Штрихкод";
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Подготовка данных для выбора.
//
Процедура ПодготовитьДанныеДляВыбора(СтруктураРезультат) Экспорт
	
	ТаблицаВыбора = Новый ТаблицаЗначений;
	ТаблицаВыбора.Колонки.Добавить("ШтрихКод");
	ТаблицаВыбора.Колонки.Добавить("ТипШтрихКода");
	ТаблицаВыбора.Колонки.Добавить("Номенклатура");
	ТаблицаВыбора.Колонки.Добавить("Характеристика");
	ТаблицаВыбора.Колонки.Добавить("Упаковка");
	ТаблицаВыбора.Колонки.Добавить("Количество");
	ТаблицаВыбора.Колонки.Добавить("СерийныйНомер");
	ТаблицаВыбора.Колонки.Добавить("Карта");
	ТаблицаВыбора.Колонки.Добавить("ВладелецКарты");
	ТаблицаВыбора.Колонки.Добавить("ТипКарты");
	ТаблицаВыбора.Колонки.Добавить("ШтрихкодУпаковкиЕГАИС");
	ТаблицаВыбора.Колонки.Добавить("ТипУпаковки");
	
	Для Каждого СтрокаТовара Из СтруктураРезультат.ЗначенияПоиска Цикл
		НоваяСтрока = ТаблицаВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
	КонецЦикла;
	
	СтруктураВыбора = Новый Структура;
	СтруктураВыбора.Вставить("ТаблицаВыбора", ТаблицаВыбора);
	Если СтруктураРезультат.ТипДанныхПО = "Штрихкод" Тогда
		СтруктураВыбора.Вставить("Штрихкод", СтруктураРезультат.ДанныеПО);
	ИначеЕсли СтруктураРезультат.ТипДанныхПО = "МагнитныйКод" Тогда
		СтруктураВыбора.Вставить("МагнитныйКод", СтруктураРезультат.ДанныеПО);
	КонецЕсли;
	СтруктураРезультат.Вставить("ВыборДанныхПоиска", ПоместитьВоВременноеХранилище(СтруктураВыбора));

КонецПроцедуры

// Функция возвращает результат проверки строки на предмет соответствия
// штрихкоду формата EAN8.
//
// Параметры:
//  Штрихкод - Строка - Проверяемый штрихкод.
//
// Возвращаемое значение:
//  Булево - Результат проверки.
//
Функция ТипШтрихкодаEAN8(Штрихкод) Экспорт
	
	Результат   = Ложь;
	Сумма       = 0;
	Коэффициент = 3;
	
	Если СтрДлина(Штрихкод) = 8 Тогда
		
		Для Индекс = 1 По 7 Цикл
			ВремКодСимвола = КодСимвола(Штрихкод, Индекс);
			Если ВремКодСимвола < 48 Или ВремКодСимвола > 57 Тогда
				Возврат Результат;
			КонецЕсли;
			Сумма       = Сумма + Коэффициент * (ВремКодСимвола - 48);
			Коэффициент = 4 - Коэффициент;
		КонецЦикла;
		Сумма     = (10 - Сумма % 10) % 10;
		Результат = (КодСимвола(Штрихкод, 8) = Сумма + 48);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Функция возвращает результат проверки строки на предмет соответствия
// штрихкоду формата EAN13.
//
// Параметры:
//  Штрихкод - Строка - Проверяемый штрихкод.
//
// Возвращаемое значение:
//  Булево - Результат проверки.
//
Функция ТипШтрихкодаEAN13(Штрихкод) Экспорт
	
	Результат = (СтрДлина(Штрихкод) = 13
	И КонтрольныйСимволEAN13(Штрихкод) = Прав(Штрихкод, 1));
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает контрольный символ штрихкода EAN13.
//
// Параметры:
//  Штрихкод - Строка
//           - Неполный штрихкод (12 символов), для которого вычисляется
//             контрольный 13-й символ.
//
// Возвращаемое значение:
//  Строка - Контрольный символ EAN13.
//
Функция КонтрольныйСимволEAN13(Штрихкод) Экспорт
	
	Результат   = "";
	Сумма       = 0;
	Коэффициент = 1;
	
	Для Индекс = 1 По 12 Цикл
		ВремКодСимвола = КодСимвола(Штрихкод, Индекс);
		Сумма       = Сумма + Коэффициент * (ВремКодСимвола - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма     = (10 - Сумма % 10) % 10;
	Результат = Символ(Сумма + 48);
	
	Возврат Результат;
	
КонецФункции 

// Функция вычисляет контрольный символ кода EAN.
//
// Параметры:
//  Штрихкод     - штрихкод (без контрольной цифры).
//  Тип          - тип штрихкода: 13 - EAN13, 8 - EAN8.
//
// Возвращаемое значение:
//  Контрольный символ штрихкода.
//
Функция КонтрольныйСимволEAN(Штрихкод, Тип) Экспорт

	Четные   = 0;
	Нечетные = 0;

	КоличествоИтераций = ?(Тип = 13, 6, 4);

	Для Индекс = 1 По КоличествоИтераций Цикл
		Если (Тип = 8) И (Индекс = КоличествоИтераций) Тогда
		Иначе
			Четные   = Четные   + Сред(ШтрихКод, 2 * Индекс, 1);
		КонецЕсли;
		Нечетные = Нечетные + Сред(ШтрихКод, 2 * Индекс - 1, 1);
	КонецЦикла;

	Если Тип = 13 Тогда
		Четные = Четные * 3;
	Иначе
		Нечетные = Нечетные * 3;
	КонецЕсли;

	КонтрольнаяЦифра = 10 - (Четные + Нечетные) % 10;

	Возврат ?(КонтрольнаяЦифра = 10, "0", Строка(КонтрольнаяЦифра));

КонецФункции 

// Определить тип штрихкода по значению.
//
Функция ОпределитьТипШтрихкода(Штрихкод) Экспорт
	
	ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.ПустаяСсылка();
	ТипШтрихкодаВрем = МенеджерОборудованияВызовСервера.ОпределитьТипШтрихкода(Штрихкод);
	
	Если ТипШтрихкодаВрем = "EAN8" Тогда
		ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8;
	ИначеЕсли ТипШтрихкодаВрем = "EAN13" Тогда
		ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
	ИначеЕсли ТипШтрихкодаВрем = "EAN128" Тогда
		ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128;
	ИначеЕсли ТипШтрихкодаВрем = "CODE39" Тогда
		ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.CODE39;
	ИначеЕсли ТипШтрихкодаВрем = "CODE128" Тогда
		ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.CODE128;
	ИначеЕсли ТипШтрихкодаВрем = "ITF14" Тогда
		ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.ITF14;
	КонецЕсли;
	
	Возврат ТипШтрихкодаРТ;
	
КонецФункции	


/////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ШТРИХКОДОВ В СПРАВОЧНИКАХ И ДОКУМЕНТАХ

// Получить штрихкод для товара.
//
Функция ПолучитьШтрихкод(Владелец, Характеристика = Неопределено, Упаковка = Неопределено) Экспорт

	СтруктураШтрихкода = Неопределено;
	Если Упаковка = Неопределено Тогда
		Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если Характеристика = Неопределено Тогда
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
		
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	Штрихкоды.ТипШтрихкода,
	|	Штрихкоды.Штрихкод
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Владелец = &Владелец
	|	И Штрихкоды.Упаковка = &Упаковка
	|	И Штрихкоды.Характеристика = &Характеристика");

	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Упаковка", Упаковка);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураШтрихкода = ОбщегоНазначенияРТ.СоздатьСтруктуруПоСтрокеВыборки(РезультатЗапроса, Выборка);
	КонецЕсли;	
	
	Возврат СтруктураШтрихкода;

КонецФункции 

// Сформировать новый штрихкод.
//
Функция СформироватьШтрихкод(Знач ПрефиксВнутреннегоШтрихкодаШтучногоТовара = Неопределено, Знач ПрефиксШтрихкодаУзлаРИБ = Неопределено) Экспорт
	
	Если ПрефиксВнутреннегоШтрихкодаШтучногоТовара = Неопределено Тогда
		ПрефиксВнутреннегоШтрихкодаШтучногоТовара = СокрЛП(Константы.ПрефиксВнутреннегоШтрихкодаШтучногоТовара.Получить());
	КонецЕсли;

	Если ПрефиксШтрихкодаУзлаРИБ = Неопределено Тогда
		ПрефиксШтрихкодаУзлаРИБ = Константы.ПрефиксШтрихкодаУзлаРИБ.Получить();
	КонецЕсли;

	ПрефиксВнутреннегоШтрихкодаШтучногоТовара = ?(ПустаяСтрока(ПрефиксВнутреннегоШтрихкодаШтучногоТовара), "0", ПрефиксВнутреннегоШтрихкодаШтучногоТовара);
	ПрефиксШтрихкодаУзлаРИБ = Формат(ПрефиксШтрихкодаУзлаРИБ, "ЧЦ=2; ЧН=; ЧВН=");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МАКСИМУМ(ПОДСТРОКА(Штрихкоды.Штрихкод, 5, 8)) КАК Код
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.ТипШтрихкода = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыШтрихкодов.EAN13)
	|	И Штрихкоды.Штрихкод ПОДОБНО ""2" + ПрефиксВнутреннегоШтрихкодаШтучногоТовара + ПрефиксШтрихкодаУзлаРИБ + "_________""");

	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ТекущийКод = ?(Выборка.Код = NULL, 1, Мин(Число(Выборка.Код) + 1, 99999999));

	Штрихкод = "2" + ПрефиксВнутреннегоШтрихкодаШтучногоТовара + ПрефиксШтрихкодаУзлаРИБ + Формат(ТекущийКод, "ЧЦ=8; ЧВН=; ЧГ=");
	Штрихкод = Штрихкод + КонтрольныйСимволEAN(ШтрихКод, 13);

	Возврат Штрихкод;

КонецФункции // СформироватьШтрихКод()

// Устанавливает новый штрихкод для товара.
// 
Функция УстановитьШтрихкод(Штрихкод, Владелец, Характеристика, Упаковка, ОписаниеОшибки) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ТипШтрихкодаРТ  = ОпределитьТипШтрихкода(Штрихкод);
		
		НовыйШтрихкод = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		НовыйШтрихкод.Владелец = Владелец; 
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
			НовыйШтрихкод.Характеристика = Характеристика;
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			НовыйШтрихкод.Упаковка       = Упаковка;
		КонецЕсли;
		
		НовыйШтрихкод.ТипШтрихкода = ТипШтрихкодаРТ;
		НовыйШтрихкод.Штрихкод = Штрихкод;
		НовыйШтрихкод.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = НСтр("ru = 'При записи штрихкодов произошла ошибка.
		                      |Запись штрихкодов не выполнена.
		                      |Дополнительное описание:
		                      |%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ РАСПРЕДЕЛЕНИЯ ВЫРУЧКИ ПО СЕКЦИЯМ ФР

// Получает распределение выручки по секциям фискального регистратора.
//
Функция ПолучитьРаспределениеВыручкиПоСекциям(НастройкаРаспределения) Экспорт
	
	Результат = Новый Структура;   
	
	СоответствиеВидовНоменклатурыСекциям = Новый Соответствие();
	СоответствиеДоговоровСекциям = Новый Соответствие();
	Результат.Вставить("НомерСекцииДляПриходныхКассовыхОрдеров"  , 2);
	Результат.Вставить("НомерСекцииДляРасходныхКассовыхОрдеров"  , 2);
	Результат.Вставить("НомерСекцииДляОплатыКартой"              , 2);
	Результат.Вставить("НомерСекцииДляВозвратаОплатыНаКарту"     , 2);
	Результат.Вставить("НомерСекцииПоУмолчаниюДляФискальныхЧеков", 1);
	Результат.Вставить("СоответствиеВидовНоменклатурыСекциям", СоответствиеВидовНоменклатурыСекциям);
	Результат.Вставить("СоответствиеДоговоровСекциям", СоответствиеДоговоровСекциям);
	
	Распределение = НастройкаРаспределения;
	
	Если (Распределение = Неопределено) Или (Распределение = Справочники.НастройкиРаспределенияВыручкиПоСекциямФР.ПустаяСсылка()) Тогда
		// Получаем распределение по умолчанию.
		Распределение = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.НастройкиРаспределенияВыручкиПоСекциямФР.РаспределениеПоУмолчанию");
		
		Если НЕ ЗначениеЗаполнено(Распределение) Тогда 
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.НомерСекцииДляПриходныхКассовыхОрдеров   = Распределение.НомерСекцииДляПриходныхКассовыхОрдеров; 
	Результат.НомерСекцииДляРасходныхКассовыхОрдеров   = Распределение.НомерСекцииДляРасходныхКассовыхОрдеров;
	Результат.НомерСекцииДляОплатыКартой               = Распределение.НомерСекцииДляОплатыКартой;
	Результат.НомерСекцииДляВозвратаОплатыНаКарту      = Распределение.НомерСекцииДляВозвратаОплатыНаКарту;
	Результат.НомерСекцииПоУмолчаниюДляФискальныхЧеков = Распределение.НомерСекцииПоУмолчаниюДляФискальныхЧеков;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаспределениеВыручкиПоСекциямФР.НомерСекции КАК НомерСекции,
	|	РаспределениеВыручкиПоСекциямФР.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	Справочник.НастройкиРаспределенияВыручкиПоСекциямФР.СоответствиеВидовНоменклатурыСекциям КАК РаспределениеВыручкиПоСекциямФР
	|ГДЕ РаспределениеВыручкиПоСекциямФР.Ссылка = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Распределение.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.СоответствиеВидовНоменклатурыСекциям.Вставить(ВыборкаДетальныеЗаписи.ВидНоменклатуры, ВыборкаДетальныеЗаписи.НомерСекции);
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаспределениеВыручкиПоСекциямФР.НомерСекции КАК НомерСекции,
	|	РаспределениеВыручкиПоСекциямФР.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента
	|ИЗ
	|	Справочник.НастройкиРаспределенияВыручкиПоСекциямФР.СоответствиеДоговоровПлатежныхАгентовСекциям КАК РаспределениеВыручкиПоСекциямФР
	|ГДЕ РаспределениеВыручкиПоСекциямФР.Ссылка = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Распределение.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.СоответствиеДоговоровСекциям.Вставить(Выборка.ДоговорПлатежногоАгента, Выборка.НомерСекции);
	КонецЦикла;
	Возврат Результат;

КонецФункции

// Заполнить соответствие секций фискального регистратора для табличной части по кассе ККМ.
// 
Процедура ЗаполнитьСоответствиеСекцийДляТабличнойЧастиПоКассеККМ(КассаККМ, Знач Товары, ТаблицаТоваровСоответствииСекциям) Экспорт
	     
	Распределение = ПолучитьРаспределениеВыручкиПоСекциям(КассаККМ.НастройкаРаспределенияВыручкиПоСекциям);
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ВидНоменклатуры", "ВидНоменклатуры");
	СтруктураРеквизитов.Вставить("ТипНоменклатуры", "ВидНоменклатуры.ТипНоменклатуры");
	СтруктураРеквизитов.Вставить("ДоговорПлатежногоАгента", "ДоговорПлатежногоАгента");
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.Номенклатура, СтруктураРеквизитов);
		Если ДанныеНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
			И ЗначениеЗаполнено(ДанныеНоменклатуры.ДоговорПлатежногоАгента) Тогда
			Секция = Распределение.СоответствиеДоговоровСекциям.Получить(ДанныеНоменклатуры.ДоговорПлатежногоАгента);
		Иначе
			Секция = Распределение.СоответствиеВидовНоменклатурыСекциям.Получить(ДанныеНоменклатуры.ВидНоменклатуры);
		КонецЕсли;
		Если Секция = Неопределено Тогда
			ТаблицаТоваровСоответствииСекциям.Вставить(СтрокаТЧ.НомерСтроки, Распределение.НомерСекцииПоУмолчаниюДляФискальныхЧеков);
		Иначе
			ТаблицаТоваровСоответствииСекциям.Вставить(СтрокаТЧ.НомерСтроки, Секция);
		КонецЕсли
		
	КонецЦикла;
	
КонецПроцедуры

// Получает распределение выручки по секциям фискального регистратора по кассе.
//
Функция ПолучитьРаспределениеВыручкиПоСекциямПоКассе(Касса) Экспорт
	
	Возврат ПолучитьРаспределениеВыручкиПоСекциям(Касса.НастройкаРаспределенияВыручкиПоСекциям);
	
КонецФункции

// Функция записывает признак пробития чека в документ
//
Функция ПровестиПробитыйДокумент(ДокументНаККМ, НомерЧекаККМ) Экспорт
	
	Попытка
		ДокументНаККМОбъект = ДокументНаККМ.ПолучитьОбъект();
		
		ДокументНаККМОбъект.НомерЧекаККМ  = НомерЧекаККМ;
		ДокументНаККМОбъект.ПробитЧек     = Истина;
		ДокументНаККМОбъект.Записать(РежимЗаписиДокумента.Запись);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Функция подготавливает данные для печати чека на ФР
//
Функция ВходящиеДанныеДляФР(ДокументНаККМ, РаспределениеВыручкиПоСекциям, НомерЧека) Экспорт

	// Получить модуль менеджера
	
	МенеджерОбъектаПоСсылке = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументНаККМ);
	
	Возврат МенеджерОбъектаПоСсылке.ПодготовитьДанныеДляПробитияЧека(ДокументНаККМ, РаспределениеВыручкиПоСекциям, НомерЧека);
	
КонецФункции

// Функция возвращает значение реквизита документа "СуммаДокумента".
//
Функция СуммаДокумента(ДокументНаККМ) Экспорт
	
	Возврат ДокументНаККМ.СуммаДокумента;
	
КонецФункции

/////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОИСКА И ОПРЕДЕЛЕНИЯ ПО МАГНИТНОМУ КОДУ

// Параметры: 
// МагнитныйКод - Строка
// Форма - Форма, в которой определен обработчик действия "ПолученыШтрихкоды"
// СтруктураДействий, ключи: ПроверкаВесовыхТоваров, 
//                          ПроверкаТоваров,
//                          ПроверкаСерийныхНомеров,
//                          ПроверкаКарт [РегистрацияНовойКарты, Пользователь].
// Возвращаемое значение - Структура.
//
Функция ПолученМагнитныйКод(МагнитныйКод, Форма) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ДанныеПоискаПоМагнитномуКоду(МагнитныйКод, Форма);
	
	НайденоОбъектов = СтруктураРезультат.ЗначенияПоиска.Количество();
	Если НайденоОбъектов = 1 Тогда
		Форма.ОбработатьДанныеПоКодуСервер(СтруктураРезультат);
	ИначеЕсли НайденоОбъектов > 1 Тогда
		ПодключаемоеОборудованиеРТВызовСервера.ПодготовитьДанныеДляВыбора(СтруктураРезультат);
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Параметры: 
// МагнитныйКод - Строка
// Форма - Форма, в которой определен обработчик действия "ПолученыШтрихкоды"
// СтруктураДействий, ключи: ПроверкаВесовыхТоваров, 
//                          ПроверкаТоваров,
//                          ПроверкаСерийныхНомеров,
//                          ПроверкаКарт [РегистрацияНовойКарты, Пользователь].
// Возвращаемое значение - Структура.
//
Функция ДанныеПоискаПоМагнитномуКоду(МагнитныйКод, Форма) Экспорт
	
	Если Форма.ПараметрыСобытийПО = Неопределено Тогда
		СтруктураДействий = Новый Структура;
	Иначе
		СтруктураДействий = Форма.ПараметрыСобытийПО;
	КонецЕсли;
	
	НеизвестныеДанныеПО = Истина;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	0 КАК НомерСтроки,
	|	СерийныеНомера.Ссылка КАК Владелец,
	|	СерийныеНомера.Владелец КАК Номенклатура,
	|	NULL КАК ВладелецКарты,
	|	NULL КАК ТипКарты,
	|	1 КАК Количество
	|ИЗ
	|	Справочник.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	СерийныеНомера.КодСерийногоНомера = &МагнитныйКод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ИнформационныеКарты.Ссылка,
	|	NULL,
	|	ИнформационныеКарты.ВладелецКарты,
	|	ИнформационныеКарты.ТипКарты,
	|	1 КАК Количество
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|ГДЕ
	|	ИнформационныеКарты.КодКарты = &МагнитныйКод";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МагнитныйКод", МагнитныйКод);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	НайденоОбъектов = Выборка.Количество();
	СтруктураПараметров = СтруктураДанныхПоиска();
	
	ДополнитьСтруктуруРезультатамиПоиска(СтруктураПараметров, Выборка, "", МагнитныйКод, НеизвестныеДанныеПО);
	
	ДополнитьСтруктуруДляРегистрацииНовогоОбъекта(
		СтруктураПараметров,
		МагнитныйКод,
		СтруктураДействий,
		НеизвестныеДанныеПО);
		
	СтруктураПараметров.НеизвестныеДанныеПО = НеизвестныеДанныеПО;
	СтруктураПараметров.ДанныеПО = МагнитныйКод;
	СтруктураПараметров.ТипДанныхПО = "МагнитныйКод";
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Функция возвращает список кодов карты, полученный из данных
// карты с применением форматов записи кодов магнитных карт.
Функция ПолучитьКодыКарты(ДанныеКарты) Экспорт
	
	ТаблицаКодовКарты = Новый ТаблицаЗначений;
	ТаблицаКодовКарты.Колонки.Добавить("Значение");
	
	Выборка = РегистрыСведений.ФорматыЗаписиКодовМагнитныхКарт.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СписокКодовКартыПоФормату = ПрименитьФорматДляДанныхКарты(ДанныеКарты, Выборка.НомерДорожки, Выборка.Префикс, Выборка.Суффикс, Выборка.КоличествоЗнаков);
		
		Для Каждого ТекСписокКодовКартыПоФормату Из СписокКодовКартыПоФормату Цикл
			НовСтрока          = ТаблицаКодовКарты.Добавить();
			НовСтрока.Значение = ТекСписокКодовКартыПоФормату.Значение;
		КонецЦикла;
		
	КонецЦикла;

	ТаблицаКодовКарты.Свернуть("Значение");
	
	СписокКодовКарты  = Новый СписокЗначений;
	СписокКодовКарты.ЗагрузитьЗначения(ТаблицаКодовКарты.ВыгрузитьКолонку("Значение"));
	
	Возврат СписокКодовКарты;

КонецФункции

// Функция применяет переданные значения формата записи кода магнитных карт
// к данным магнитной карты.
Функция ПрименитьФорматДляДанныхКарты(ДанныеКарты, НомерДорожки, ПрефиксКода, СуффиксКода, КоличествоЗнаков)Экспорт

	СписокКодовКарты = Новый СписокЗначений;

	ДанныеРазбитыНаДорожки = (СтрЧислоСтрок(ДанныеКарты) > 1);

	Если Не ДанныеРазбитыНаДорожки  Тогда
		СтрокаКода = ДанныеКарты;
	Иначе
		СтрокаКода = СтрПолучитьСтроку(ДанныеКарты, НомерДорожки);
	КонецЕсли;
	
	Префикс       = СокрЛП(ПрефиксКода);
	Суффикс       = СокрЛП(СуффиксКода);
	ДлинаПрефикса = СтрДлина(Префикс);
	ДлинаСуффикса = СтрДлина(Суффикс);

	Отказ = Ложь;
	Пока Не Отказ Цикл
		
		ПозицияНачалаПрефикса = Найти(СтрокаКода, Префикс);
		
		Если ПозицияНачалаПрефикса = 0 Тогда
			// Входит, когда указан префикс, но не найден в строке.
			Отказ = Истина;
			Продолжить;
		Иначе
			// Входит, когда префикс не указан, или указан и найден в строке.
			ПозицияНачалаКода = ПозицияНачалаПрефикса + ДлинаПрефикса;
		КонецЕсли;
		
		ПрефиксСодержитСуффикс = ?(Найти(Префикс, Суффикс) = 0, Ложь, Истина);
		
		Если ДлинаСуффикса = 0 Тогда
			
			ПозицияНачалаСуффикса = СтрДлина(СтрокаКода) + 1;
			
		ИначеЕсли ДлинаСуффикса <> 0 И Не ПрефиксСодержитСуффикс Тогда
			
			ПозицияНачалаСуффикса = Найти(СтрокаКода, Суффикс);
			// Если суффикс найден раньше префикса или это на том же месте,
			// то отрезаем строку до префикса и пытаемся найти префикс еще раз.
			Если ПозицияНачалаПрефикса > ПозицияНачалаСуффикса И ПозицияНачалаСуффикса <> 0 Тогда
				СтрокаКода = Сред(СтрокаКода, ПозицияНачалаСуффикса + 1);
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ДлинаСуффикса <> 0 И ПрефиксСодержитСуффикс Тогда
			
			СлужебнаяСтрока  = Сред(СтрокаКода, ПозицияНачалаКода);
			СлужебнаяПозиция = Найти(СлужебнаяСтрока, Суффикс);
			Если СлужебнаяПозиция = 0 Тогда
				Отказ = Истина;
				Продолжить
			КонецЕсли;
			ПозицияНачалаСуффикса = ПозицияНачалаКода + СлужебнаяПозиция - 1;
		КонецЕсли;
		
		Если ПозицияНачалаСуффикса <= 1 Тогда
			Отказ = Истина;
			Продолжить
		КонецЕсли;

		Если КоличествоЗнаков = 0 Тогда
			ДлинаКода = ПозицияНачалаСуффикса - ПозицияНачалаКода;
		Иначе
			ДлинаКода = КоличествоЗнаков;
		КонецЕсли;
		
		СтрокаКодаПоСуффиксу = Ложь;
		Если ДлинаПрефикса = 0 И ДлинаСуффикса <> 0 И КоличествоЗнаков <> 0 Тогда
			ПозицияНачалаКода = ПозицияНачалаСуффикса - КоличествоЗнаков;
			СтрокаКодаПоСуффиксу = Истина;
		КонецЕсли;

		КодКарты = Сред(СтрокаКода, ПозицияНачалаКода, ДлинаКода);
		
		Если ДлинаСуффикса <> 0 Тогда
			ПредполагаемыйСуффикс = Сред(СтрокаКода, ПозицияНачалаКода + ДлинаКода, ДлинаСуффикса);
			Если ПредполагаемыйСуффикс <> Суффикс Тогда
				КодКарты = "";
			КонецЕсли;
		КонецЕсли;
		
		Если Не СтрокаКодаПоСуффиксу
		 И (ПозицияНачалаПрефикса > 1
		 Или ((ПозицияНачалаПрефикса = 1) И (ПозицияНачалаКода > 1))) Тогда
			СтрокаКода = Сред(СтрокаКода, ПозицияНачалаПрефикса + 1);
		Иначе
			СтрокаКода = Сред(СтрокаКода, ПозицияНачалаСуффикса + 1);
		КонецЕсли;

		Если КодКарты <> "" Тогда
			СписокКодовКарты.Добавить(КодКарты);
		КонецЕсли;

	КонецЦикла;

	Возврат СписокКодовКарты;

КонецФункции

 /////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ РАБОТЫ С ПОДКЛЮЧАЕМЫМ ОБОРУДОВАНИЕМ

// Получает доступное подключаемое оборудование.
//
Процедура ПолучитьДоступноеПодключаемоеОборудование(ИспользоватьПодключаемоеОборудование, ЕстьТСД, ЕстьВесы) Экспорт
	
	ТипыПодключенногоОборудования = МенеджерОборудованияСерверПовтИсп.ТипыПодключенногоОборудования();
	
	ИспользоватьПодключаемоеОборудование = ОбщегоНазначенияРТ.ИспользоватьПодключаемоеОборудование(ТипыПодключенногоОборудования);
	
	ЕстьТСД = ИспользоватьПодключаемоеОборудование 
		И ТипыПодключенногоОборудования <> Неопределено
		И ТипыПодключенногоОборудования.Найти(Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных) <> Неопределено;
		
	ЕстьВесы = ИспользоватьПодключаемоеОборудование 
		И ТипыПодключенногоОборудования <> Неопределено
		И ТипыПодключенногоОборудования.Найти(Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы) <> Неопределено;
	
КонецПроцедуры

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
Процедура НастроитьПодключаемоеОборудование(Форма, МассивКомандПО = Неопределено) Экспорт
	
	ЕстьТСД = Ложь;
	ЕстьВесы = Ложь;
	
	ПолучитьДоступноеПодключаемоеОборудование(Форма.ИспользоватьПодключаемоеОборудование, ЕстьТСД, ЕстьВесы);
	
	Если МассивКомандПО = Неопределено Тогда
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ТоварыЗагрузитьДанныеИзТСД",
			"Видимость",
			ЕстьТСД);
		
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ТоварыВыгрузитьДанныеВТСД",
			"Видимость",
			ЕстьТСД);
		
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ТоварыПолучитьВес",
			"Видимость",
			ЕстьВесы);
	Иначе
		Для Каждого КомандаПО Из МассивКомандПО Цикл
			Если Найти(КомандаПО, "ЗагрузитьДанныеИзТСД") > 0
				ИЛИ Найти(КомандаПО, "ВыгрузитьДанныеВТСД") > 0 Тогда
				Форма.Элементы[КомандаПО].Видимость = ЕстьТСД;
			ИначеЕсли Найти(КомандаПО, "ПолучитьВес") > 0 Тогда
				Форма.Элементы[КомандаПО].Видимость = ЕстьВесы;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

 /////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ И ПРОЦЕДУРЫ ОБРАБОТКИ СОБЫТИЙ ПОИСКА ПО ШК, МК И РАБОТЫ С ТСД

// Сформировать массив товаров по массиву штрихкодов.
// 
Функция СформироватьМассивТоваров(ДанныеШтрихкодов, ОбновитьКоличество) Экспорт
	
	ОпознанныеШтрихкоды = СтруктураДанныхПоиска();
	ПовторяющиесяШтрихкоды = СтруктураДанныхПоиска();
	НеопознанныеШтрихкоды = Новый Массив;
	
	КС = Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивТипов, , КС);
	
	КЧ_15_3 = Новый КвалификаторыЧисла(15, 3);
	КЧ_10_0 = Новый КвалификаторыЧисла(10, 0);
	КЧ_1_0 = Новый КвалификаторыЧисла(1, 0);
	МассивТипов.Очистить();
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло_15_3 = Новый ОписаниеТипов(МассивТипов, , , КЧ_15_3);
	ОписаниеТиповЧисло_10_0 = Новый ОписаниеТипов(МассивТипов, , , КЧ_10_0);
	ОписаниеТиповЧисло_1_0 = Новый ОписаниеТипов(МассивТипов, , , КЧ_1_0);

	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("НомерСтроки", ОписаниеТиповЧисло_10_0);
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихКод", ОписаниеТиповСтрока);
	ТаблицаШтрихкодов.Колонки.Добавить("КодСКУ", ОписаниеТиповЧисло_10_0);
	ТаблицаШтрихкодов.Колонки.Добавить("Количество", ОписаниеТиповЧисло_15_3);
	
	ТаблицаSKU = ТаблицаШтрихкодов.Скопировать();
	
	ПрефиксВнутреннегоШтрихкодаВесовогоТовара            = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ПрефиксВнутреннегоШтрихкодаВесовогоТовара");
	ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара");
	ДлинаКодаВесовогоТовара  = СтрДлина(Формат(ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВерхняяГраницаДиапазонаSKUВесовогоТовара"),"ЧГ=0"));
	Если ДлинаКодаВесовогоТовара < 5 Тогда
		ДлинаКодаВесовогоТовара = 5;
	КонецЕсли;
	
	СчетчикСтрок = 0;
	Для Каждого СтрокаМассива Из ДанныеШтрихкодов Цикл
		
		СчетчикСтрок = СчетчикСтрок + 1;
		
		ТипШтрихкодаРТ = ОпределитьТипШтрихкода(СтрокаМассива.ШтрихКод);
		
		Если ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13
			И (ПрефиксВнутреннегоШтрихкодаВесовогоТовара > 0)
			И (ДлинаКодаВесовогоТовара > 0)
			И (Лев(СтрокаМассива.ШтрихКод, 2) = "2" + ПрефиксВнутреннегоШтрихкодаВесовогоТовара
				ИЛИ Лев(СтрокаМассива.ШтрихКод, 2) = "2" + ПрефиксВнутреннегоШтрихкодаШтучногоФасованногоТовара) Тогда
			
			КодТовара        = Сред(СтрокаМассива.ШтрихКод, 3,  ДлинаКодаВесовогоТовара);
			КоличествоТовара = Число(Сред(СтрокаМассива.ШтрихКод, 3 + ДлинаКодаВесовогоТовара, 10 - ДлинаКодаВесовогоТовара)) * СтрокаМассива.Количество;
			
			НоваяСтрока = ТаблицаSKU.Добавить();
			НоваяСтрока.НомерСтроки = СчетчикСтрок;
			НоваяСтрока.ШтрихКод = СтрокаМассива.ШтрихКод;
			НоваяСтрока.КодСКУ = Число(КодТовара);
			Если Лев(СтрокаМассива.ШтрихКод, 2) = ("2" + ПрефиксВнутреннегоШтрихкодаВесовогоТовара) Тогда  
				// Весовой товар, расфасованный на весах.
				НоваяСтрока.Количество = КоличествоТовара / 1000;
			Иначе
				// Штучный товар, расфасованный на весах.
				НоваяСтрока.Количество = КоличествоТовара;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаШтрихкодов.Добавить();
		НоваяСтрока.НомерСтроки = СчетчикСтрок;
		НоваяСтрока.ШтрихКод = СтрокаМассива.ШтрихКод;
		НоваяСтрока.КодСКУ = 0;
		НоваяСтрока.Количество = СтрокаМассива.Количество;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеШтрихкодов.НомерСтроки КАК НомерСтроки,
	|	ДанныеШтрихкодов.Штрихкод КАК Штрихкод,
	|	ДанныеШтрихкодов.КодСКУ КАК КодСКУ,
	|	ДанныеШтрихкодов.Количество КАК Количество
	|ПОМЕСТИТЬ ДанныеШтрихкодов
	|ИЗ
	|	&ТаблицаШтрихкодов КАК ДанныеШтрихкодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаSKU.НомерСтроки КАК НомерСтроки,
	|	ТаблицаSKU.Штрихкод КАК Штрихкод,
	|	ТаблицаSKU.КодСКУ КАК КодСКУ,
	|	ТаблицаSKU.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаSKU
	|ИЗ
	|	&ТаблицаSKU КАК ТаблицаSKU
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеШтрихкодов.Штрихкод КАК Штрихкод,
	|	СУММА(ДанныеШтрихкодов.Количество) КАК Количество,
	|	Штрихкоды.Владелец КАК Владелец,
	|	Штрихкоды.Характеристика КАК Характеристика,
	|	Штрихкоды.Упаковка КАК Упаковка,
	|	&ПустойШтрихКодУпаковки КАК ШтрихкодУпаковкиЕГАИС,
	|	&ПустойТипУпаковки КАК ТипУпаковки,
	|	МИНИМУМ(ДанныеШтрихкодов.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ НайденныеШтрихкоды
	|ИЗ
	|	ДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО ДанныеШтрихкодов.Штрихкод = Штрихкоды.Штрихкод
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодов.Штрихкод,
	|	Штрихкоды.Владелец,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Упаковка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеШтрихкодов.Штрихкод,
	|	СУММА(ДанныеШтрихкодов.Количество),
	|	КодыТоваровSKU.Номенклатура,
	|	КодыТоваровSKU.Характеристика,
	|	КодыТоваровSKU.Упаковка,
	|	&ПустойШтрихКодУпаковки,
	|	&ПустойТипУпаковки,
	|	МИНИМУМ(ДанныеШтрихкодов.НомерСтроки)
	|ИЗ
	|	ТаблицаSKU КАК ДанныеШтрихкодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ПО ДанныеШтрихкодов.КодСКУ = КодыТоваровSKU.SKU
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодов.Штрихкод,
	|	КодыТоваровSKU.Номенклатура,
	|	КодыТоваровSKU.Характеристика,
	|	КодыТоваровSKU.Упаковка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеШтрихкодов.Штрихкод,
	|	СУММА(ДанныеШтрихкодов.Количество),
	|	ШтрихкодыУпаковокТоваров.Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика,
	|	ШтрихкодыУпаковокТоваров.Упаковка,
	|	ШтрихкодыУпаковокТоваров.Ссылка,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки,
	|	МИНИМУМ(ДанныеШтрихкодов.НомерСтроки)
	|ИЗ
	|	ДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ДанныеШтрихкодов.Штрихкод = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодов.Штрихкод,
	|	ШтрихкодыУпаковокТоваров.Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика,
	|	ШтрихкодыУпаковокТоваров.Упаковка,
	|	ШтрихкодыУпаковокТоваров.Ссылка,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НайденныеШтрихкоды.Штрихкод КАК Штрихкод,
	|	НайденныеШтрихкоды.Количество КАК Количество,
	|	ИСТИНА КАК ШтрихКодНайден,
	|	НайденныеШтрихкоды.Владелец КАК Владелец,
	|	НайденныеШтрихкоды.Владелец.Наименование КАК НаименованиеВладельца,
	|	НайденныеШтрихкоды.Характеристика КАК Характеристика,
	|	НайденныеШтрихкоды.Упаковка КАК Упаковка,
	|	НайденныеШтрихкоды.НомерСтроки КАК НомерСтроки,
	|	НайденныеШтрихкоды.ШтрихкодУпаковкиЕГАИС КАК ШтрихкодУпаковкиЕГАИС,
	|	НайденныеШтрихкоды.ТипУпаковки КАК ТипУпаковки,
	|	&ТипШтрихкода КАК ТипШтрихкода
	|ИЗ
	|	НайденныеШтрихкоды КАК НайденныеШтрихкоды
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеШтрихкодов.Штрихкод,
	|	ДанныеШтрихкодов.Количество,
	|	ЛОЖЬ,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ДанныеШтрихкодов.НомерСтроки,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ДанныеШтрихкодов КАК ДанныеШтрихкодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ НайденныеШтрихкоды КАК НайденныеШтрихкоды
	|		ПО (НайденныеШтрихкоды.Штрихкод = ДанныеШтрихкодов.Штрихкод)
	|ГДЕ
	|	НайденныеШтрихкоды.НомерСтроки ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Штрихкод,
	|	НаименованиеВладельца,
	|	Владелец
	|ИТОГИ
	|	МАКСИМУМ(ШтрихКодНайден),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Владелец),
	|	МИНИМУМ(НомерСтроки)
	|ПО
	|	Штрихкод";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТаблицаШтрихкодов", ТаблицаШтрихкодов);
	Запрос.УстановитьПараметр("ТаблицаSKU", ТаблицаSKU);
	Запрос.УстановитьПараметр("ТипШтрихкода", ПланыВидовХарактеристик.ТипыШтрихкодов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойШтрихКодУпаковки", Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойТипУпаковки", Перечисления.ТипыУпаковок.ПустаяСсылка());
	Результат = Запрос.Выполнить();
	ВыборкаИтоги = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоги.Следующий() Цикл
		Если ВыборкаИтоги.Владелец > 1 Тогда
			Выборка = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ДополнитьСтруктуруРезультатамиПоиска(ПовторяющиесяШтрихкоды, Выборка, Выборка.Штрихкод, "", Ложь);
		Иначе
			Выборка = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если ВыборкаИтоги.ШтрихКодНайден Тогда
				ДополнитьСтруктуруРезультатамиПоиска(ОпознанныеШтрихкоды, Выборка, Выборка.Штрихкод, "", Ложь);
			Иначе
				Пока Выборка.Следующий() Цикл
					СтруктураНеТовара = Новый Структура;
					СтруктураНеТовара.Вставить("НомерСтрокиЗагрузки", Выборка.НомерСтроки);
					СтруктураНеТовара.Вставить("Штрихкод", Выборка.Штрихкод);
					СтруктураНеТовара.Вставить("Количество", Выборка.Количество);
					НеопознанныеШтрихкоды.Добавить(СтруктураНеТовара);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("ОпознанныеШтрихкоды", ОпознанныеШтрихкоды);
	СтруктураРезультат.Вставить("НеопознанныеШтрихкоды", НеопознанныеШтрихкоды);
	СтруктураРезультат.Вставить("ПовторяющиесяШтрихкоды", ПовторяющиесяШтрихкоды);
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Если не находит серийный номер в ТЧ,
// то добавляет строку номенклатуры
// и добавляет к ней серийный номер.
Функция ДобавитьНайденныеСерийныеНомера(Форма, СтруктураНомера) Экспорт 
	
	ИдентификаторСтроки = Неопределено;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("СерийныйНомер", СтруктураНомера.СерийныйНомер);
	СтрокиСертификата = Форма.Объект.СерийныеНомера.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиСертификата.Количество() > 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Номер подарочного сертификата ""%1"" уже присутствует в документе.'")
							  + Символы.ПС + НСтр("ru = 'Повторный ввод данных не требуется.'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ТекстПредупреждения,
								СтруктураНомера.СерийныйНомер);
		СтруктураНомера.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		
		СтруктураПоискаТовара = Новый Структура;
		СтруктураПоискаТовара.Вставить("КлючСвязиСерийныхНомеров", СтрокиСертификата[0].КлючСвязиСерийныхНомеров);
		СтрокиТоваров = Форма.Объект.Товары.НайтиСтроки(СтруктураПоискаТовара);
		
		Если СтрокиТоваров.Количество() > 0 Тогда
			ИдентификаторСтроки = СтрокиТоваров[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	Иначе
		
		Если СтруктураНомера.Свойство("Количество") Тогда
			СтруктураНомера.Количество = 1;
		КонецЕсли;
		ИдентификаторСтроки = ДобавитьНоменклатуруПоСерийномуНомеру(Форма, СтруктураНомера);
		Если ИдентификаторСтроки <> Неопределено Тогда
			
			ТекущаяСтрока = Форма.Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
			
			Если ТекущаяСтрока.КлючСвязиСерийныхНомеров = 0 Тогда
				ДобавляемыеНомера = Новый Массив;
				ДобавляемыеНомера.Добавить(СтруктураНомера.СерийныйНомер);
				ТекущаяСтрока.КлючСвязиСерийныхНомеров = ОбработкаТабличнойЧастиТоварыСервер.ДобавитьСерийныеНомераВТабличнуюЧасть(Форма.Объект.СерийныеНомера, ДобавляемыеНомера, 0);
			Иначе
				НоваяСтрока = Форма.Объект.СерийныеНомера.Добавить();
				НоваяСтрока.СерийныйНомер = СтруктураНомера.СерийныйНомер;
				НоваяСтрока.КлючСвязиСерийныхНомеров = ТекущаяСтрока.КлючСвязиСерийныхНомеров;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

Функция ДобавитьНоменклатуруПоСерийномуНомеру(Форма, СтруктураНомера) Экспорт 
	
	СтруктураНоменклатуры = Новый Структура;
	СтруктураНоменклатуры.Вставить("ДанныеПО", СтруктураНомера.ДанныеПО);
	СтруктураНоменклатуры.Вставить("Штрихкод", СтруктураНомера.Штрихкод);
	СтруктураНоменклатуры.Вставить("МагнитныйКод", СтруктураНомера.МагнитныйКод);
	СтруктураНоменклатуры.Вставить("Номенклатура", СтруктураНомера.Номенклатура);
	СтруктураНоменклатуры.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	СтруктураНоменклатуры.Вставить("Упаковка", Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	СтруктураНоменклатуры.Вставить("ТипШтрихкода", ПланыВидовХарактеристик.ТипыШтрихкодов.ПустаяСсылка());
	СтруктураНоменклатуры.Вставить("ШтрихкодУпаковкиЕГАИС", Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
	
	Количество = 1;
	Если СтруктураНомера.Свойство("Количество") Тогда
		Количество = СтруктураНомера.Количество;
	КонецЕсли;
	СтруктураНоменклатуры.Вставить("Количество", Количество);
	СтруктураНоменклатуры.Вставить("ДобавитьКоличество", Количество);
	
	Если СтруктураНомера.Свойство("ОбновитьКоличество") Тогда
		СтруктураНоменклатуры.Вставить("ОбновитьКоличество");
	КонецЕсли;
	ИдентификаторСтроки = Форма.ДобавитьНайденныеПозицииТоваров(СтруктураНоменклатуры);
	Если СтруктураНоменклатуры.Свойство("ТекстПредупреждения") Тогда
		СтруктураНомера.Вставить("ТекстПредупреждения", СтруктураНоменклатуры.ТекстПредупреждения);
	КонецЕсли;
	
	Если СтруктураНоменклатуры.Свойство("ВывестиИнформациюРМКУправляемый") Тогда
		СтруктураНомера.Вставить("ВывестиИнформациюРМКУправляемый", СтруктураНоменклатуры.ВывестиИнформациюРМКУправляемый);
	КонецЕсли;
	
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

Функция ДобавитьВложенныеМарки(Форма, СтруктураПараметров, МассивМонотоварных = Неопределено) Экспорт
	
	Если МассивМонотоварных = Неопределено Тогда
		МассивМонотоварных = Новый Массив;
		МассивМонотоварных.Добавить(СтруктураПараметров.ШтрихкодУпаковкиЕГАИС);
	КонецЕсли;
	ИдентификаторСтроки = Неопределено;
	ЗапросВложения = Новый Запрос;
	ЗапросВложения.Текст = "
	|ВЫБРАТЬ
	|	0 КАК НомерСтроки,
	|	Штрихкоды.Штрихкод.Номенклатура КАК Владелец,
	|	Штрихкоды.Штрихкод.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Штрихкод.Упаковка ССЫЛКА Справочник.УпаковкиНоменклатуры
	|			ТОГДА Штрихкоды.Штрихкод.Упаковка
	|		ИНАЧЕ &ПустаяУпаковка
	|	КОНЕЦ КАК Упаковка,
	|	&ТипШтрихкода КАК ТипШтрихкода,
	|	ВЫБОР
	|		КОГДА Штрихкоды.Штрихкод.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ Штрихкоды.Штрихкод.Количество
	|	КОНЕЦ КАК Количество,
	|	Штрихкоды.Штрихкод КАК ШтрихкодУпаковкиЕГАИС,
	|	Штрихкоды.Штрихкод.ТипУпаковки КАК ТипУпаковки,
	|	Штрихкоды.Штрихкод.ЗначениеШтрихкода КАК ЗначениеШтрихкода
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Ссылка = &ШтрихкодУпаковкиЕГАИС
	|";
	ЗапросВложения.УстановитьПараметр("ШтрихкодУпаковкиЕГАИС", СтруктураПараметров.ШтрихкодУпаковкиЕГАИС);
	ЗапросВложения.УстановитьПараметр("ТипШтрихкода", СтруктураПараметров.ТипШтрихкода);
	ЗапросВложения.УстановитьПараметр("ПустаяУпаковка", Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	Выборка = ЗапросВложения.Выполнить().Выбрать();
	НеизвестныеДанныеПО = Ложь;
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ШтрихкодУпаковкиЕГАИС)
			И ЗначениеЗаполнено(Выборка.ЗначениеШтрихкода)
			И ЗначениеЗаполнено(Выборка.Владелец) Тогда
			
			СтруктураВложенная = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
			СтруктураВложенная.ДанныеПО = Выборка.ЗначениеШтрихкода;
			СтруктураВложенная.Штрихкод = Выборка.ЗначениеШтрихкода;
			СтруктураВложенная.ШтрихкодУпаковкиЕГАИС = Выборка.ШтрихкодУпаковкиЕГАИС;
			
			СтруктураШтрихкода = НачатьСтруктуруРезультатовПоиска(СтруктураВложенная, Выборка, Выборка.ЗначениеШтрихкода, "");
			
			СтруктураШтрихкода.Вставить("Номенклатура", Выборка.Владелец);
			СтруктураШтрихкода.Вставить("Характеристика", Выборка.Характеристика);
			СтруктураШтрихкода.Вставить("Упаковка", Выборка.Упаковка);
			СтруктураШтрихкода.Вставить("ТипШтрихкода", Выборка.ТипШтрихкода);
			СтруктураШтрихкода.Вставить("ШтрихкодУпаковкиЕГАИС", Выборка.ШтрихкодУпаковкиЕГАИС);
			СтруктураШтрихкода.Вставить("ТипУпаковки", Выборка.ТипУпаковки);
			
			Если Выборка.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				ИдентификаторСтроки = Форма.ДобавитьНайденныеПозицииТоваров(СтруктураШтрихкода);
				
			ИначеЕсли Выборка.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
				Если МассивМонотоварных.Найти(Выборка.ШтрихкодУпаковкиЕГАИС) = Неопределено Тогда
					МассивМонотоварных.Добавить(Выборка.ШтрихкодУпаковкиЕГАИС);
					ДобавитьВложенныеМарки(Форма, СтруктураВложенная, МассивМонотоварных);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

// Находит или добавляет новую строку
// в табличную часть документа.
Функция ИнициализацияСтрокиТоваров(
	Форма,
	СтруктураПараметров,
	ДобавленаСтрока,
	ИмяТабличнойЧасти = "Товары") Экспорт
	
	КоличествоУпаковок = 1;
	Если СтруктураПараметров.Свойство("Количество") Тогда
		КоличествоУпаковок = СтруктураПараметров.Количество;
	КонецЕсли;
	
	ОбновитьКоличество = Ложь;
	Если СтруктураПараметров.Свойство("ОбновитьКоличество") Тогда
		ОбновитьКоличество = Истина;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("УчетУпаковок") Тогда
		УчетУпаковок = СтруктураПараметров.УчетУпаковок;
	Иначе
		УчетУпаковок = Истина;
	КонецЕсли; 
	
	Если СтруктураПараметров.Свойство("СворачиватьПоСтрокеПоиска") Тогда
		СворачиватьПоСтрокеПоиска = СтруктураПараметров.СворачиватьПоСтрокеПоиска;
	Иначе
		СворачиватьПоСтрокеПоиска = Истина;
	КонецЕсли; 
	
	СтруктураПоиска = Новый Структура;
	
	Если НЕ СворачиватьПоСтрокеПоиска Тогда
		МассивСтрок = Новый Массив;
		
	ИначеЕсли Форма.Объект[ИмяТабличнойЧасти].Количество() > 0 Тогда
		СтруктураПоиска.Вставить("Номенклатура", СтруктураПараметров.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтруктураПараметров.Характеристика);
		Если УчетУпаковок Тогда
			СтруктураПоиска.Вставить("Упаковка", СтруктураПараметров.Упаковка);
		КонецЕсли;
		Если СтруктураПараметров.Свойство("Справка2") и Форма.Объект[ИмяТабличнойЧасти][0].Свойство("Справка2") Тогда
			СтруктураПоиска.Вставить("Справка2", СтруктураПараметров.Справка2);
		КонецЕсли;
		МассивСтрок = Форма.Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
		
	Иначе
		МассивСтрок = Новый Массив;
		
	КонецЕсли;
	
	Если МассивСтрок.Количество() > 0 Тогда 
		
		ДобавленаСтрока = Ложь;
		ТекущаяСтрока = МассивСтрок[0];
		
		Если СтруктураПараметров.Свойство("СтруктураОтбораРедактируемыхСтрок") Тогда
			РедактируемыеСтроки = Форма.Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПараметров.СтруктураОтбораРедактируемыхСтрок);
			Если РедактируемыеСтроки.Найти(ТекущаяСтрока) = Неопределено Тогда
				Возврат ТекущаяСтрока;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("ИспользоватьСерийныеНомера") Тогда
			УстановитьКоличество = ОбновитьКоличество И НЕ ТекущаяСтрока.ИспользоватьСерийныеНомера;
		Иначе
			УстановитьКоличество = ОбновитьКоличество;
		КонецЕсли;
		Если УстановитьКоличество Тогда
			Если УчетУпаковок Тогда
				ТекущаяСтрока.КоличествоУпаковок = КоличествоУпаковок;
			Иначе
				ТекущаяСтрока.Количество = КоличествоУпаковок;
			КонецЕсли;
		ИначеЕсли УчетУпаковок Тогда
			Если СтруктураПараметров.Упаковка = ТекущаяСтрока.Упаковка Тогда
				КоэффициентПересчета = 1;
			Иначе
				КоэффициентУпаковкиПоиска = 1;
				Если ЗначениеЗаполнено(СтруктураПараметров.Упаковка) Тогда
					КоэффициентУпаковкиПоиска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Упаковка, "Коэффициент");
					Если КоэффициентУпаковкиПоиска <= 0 Тогда
						КоэффициентУпаковкиПоиска = 1;
					КонецЕсли;
				КонецЕсли;
				
				КоэффициентУпаковкиСтроки = 1;
				Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
					КоэффициентУпаковкиПоиска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Упаковка, "Коэффициент");
					Если КоэффициентУпаковкиСтроки <= 0 Тогда
						КоэффициентУпаковкиСтроки = 1;
					КонецЕсли;
				КонецЕсли;
			
				КоэффициентПересчета = КоэффициентУпаковкиПоиска / КоэффициентУпаковкиСтроки;
			КонецЕсли;
			
			ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + КоличествоУпаковок * КоэффициентПересчета;
		Иначе
			ТекущаяСтрока.Количество = ТекущаяСтрока.Количество + КоличествоУпаковок;
		КонецЕсли;
		
	Иначе
		
		ДобавленаСтрока = Истина;
		ТекущаяСтрока = Форма.Объект[ИмяТабличнойЧасти].Добавить();
		ТекущаяСтрока.Номенклатура = СтруктураПараметров.Номенклатура;
		ТекущаяСтрока.Характеристика = СтруктураПараметров.Характеристика;
		Если УчетУпаковок Тогда
			ТекущаяСтрока.Упаковка = СтруктураПараметров.Упаковка;
		КонецЕсли;
		Если ТекущаяСтрока.Свойство("ИспользоватьСерийныеНомера") Тогда
			ТекущаяСтрока.ИспользоватьСерийныеНомера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ИспользоватьСерийныеНомера");
		КонецЕсли;
		Если ТекущаяСтрока.Свойство("Штрихкод")
			И СтруктураПараметров.Свойство("Штрихкод") Тогда
			Если СтруктураПараметров.Свойство("ШтрихкодУпаковкиЕГАИС") Тогда
				Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ШтрихкодУпаковкиЕГАИС) Тогда
					ТекущаяСтрока.Штрихкод = СтруктураПараметров.Штрихкод;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.Штрихкод = СтруктураПараметров.Штрихкод;
			КонецЕсли;
		КонецЕсли;
		Если УчетУпаковок Тогда
			ТекущаяСтрока.КоличествоУпаковок = КоличествоУпаковок;
		Иначе
			ТекущаяСтрока.Количество = КоличествоУпаковок
		КонецЕсли; 
		Если ТекущаяСтрока.Свойство("Справка2") И СтруктураПараметров.Свойство("Справка2") Тогда
			ТекущаяСтрока.Справка2 = СтруктураПараметров.Справка2;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущаяСтрока.Свойство("ИспользоватьСерийныеНомера")
		И ТекущаяСтрока.ИспользоватьСерийныеНомера
		И НЕ СтруктураПараметров.Свойство("ДобавитьКоличество") Тогда
		МассивСерийныхНомеров = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(
									ТекущаяСтрока.КлючСвязиСерийныхНомеров,
									Форма.Объект.СерийныеНомера);
		Если УчетУпаковок Тогда
			ТекущаяСтрока.КоличествоУпаковок = МассивСерийныхНомеров.Количество();
		Иначе
			ТекущаяСтрока.Количество = МассивСерийныхНомеров.Количество();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущаяСтрока;
	
КонецФункции

// Завершает обработку строки в табличной части документа.
// Или удаляет ее, если номенклатура не заполнена.
Функция ЗавершениеОбработкиСтрокиТоваров(
	Форма,
	ТекущаяСтрока,
	СтруктураДействий,
	ИмяТабличнойЧасти = "Товары",
	ПараметрыУказанияСерий = Неопределено) Экспорт
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Если ТекущаяСтрока.Свойство("Характеристика") Тогда
			ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Форма.Объект[ИмяТабличнойЧасти], , ТекущаяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("СтатусУказанияСерий") Тогда
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(ТекущаяСтрока);
			Если ПараметрыУказанияСерий = Неопределено Тогда
				ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Форма.Объект, Форма.ПараметрыУказанияСерий, МассивСтрок);
			Иначе
				ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Форма.Объект, ПараметрыУказанияСерий, МассивСтрок);
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("СтатусыСерийИПодарочныхСертификатов") Тогда
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатовВСтроке(ТекущаяСтрока);
		КонецЕсли;
		
		ИдентификаторСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
		
	Иначе
		
		Форма.Объект[ИмяТабличнойЧасти].Удалить(ТекущаяСтрока.НомерСтроки - 1);
		ИдентификаторСтроки = Неопределено;
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

Функция ОбработатьДанныеПоНоменклатуреИзТСДСервер(Форма, СтруктураПараметров) Экспорт
	
	МассивПослеСвертки = СвернутьДанныеПоНоменклатуреИзТСДСервер(СтруктураПараметров);
	ОбновитьКоличество = СтруктураПараметров.ОбновитьКоличество;
	
	Для Каждого СтрокаМассива Из МассивПослеСвертки Цикл
	
		СтрокаМассива.Вставить("ЗагрузкаИзТСД", Истина);
		Если ОбновитьКоличество Тогда
			СтрокаМассива.Вставить("ОбновитьКоличество", Истина);
		КонецЕсли;
		
		Если СтрокаМассива.Свойство("СерийныйНомер") Тогда
			
			ИдентификаторСтроки = Форма.ДобавитьНайденныеСерийныеНомера(СтрокаМассива);
			
		ИначеЕсли СтрокаМассива.Свойство("Карта") Тогда
			
			ТипКарты = ?(СтрокаМассива.ЭтоРегистрационнаяКарта,  НСтр("ru = 'регистрационная'"), НСтр("ru = 'дисконтная'"));
			ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена %2 карта. Обработка карт в данной форме при загрузке из ТСД не предусмотрена'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтрокаМассива.Штрихкод, ТипКарты);
			СтрокаМассива.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			
		Иначе
			
			ИдентификаторСтроки = Форма.ДобавитьНайденныеПозицииТоваров(СтрокаМассива);
			
		КонецЕсли;
		Если СтрокаМассива.Свойство("ТекстПредупреждения") Тогда
			Если СтруктураПараметров.Свойство("ТекстПредупреждения") Тогда
				СтруктураПараметров.ТекстПредупреждения.Добавить(СтрокаМассива.ТекстПредупреждения);
			Иначе
				МассивПредупреждений = Новый Массив;
				МассивПредупреждений.Добавить(СтрокаМассива.ТекстПредупреждения);
				СтруктураПараметров.Вставить("ТекстПредупреждения", МассивПредупреждений);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция СвернутьДанныеПоНоменклатуреИзТСДСервер(СтруктураПараметров) Экспорт
	
	МассивДанных = СтруктураПараметров.ЗначенияПоиска;
	УчитыватьСерийныеНомера = СтруктураПараметров.УчитыватьСерийныеНомераПриСвертке;
	СворачиватьУпаковки = СтруктураПараметров.Свойство("СворачиватьУпаковки");
	
	МассивПослеСвертки = Новый Массив;	// Результат сворачивания.
	
	ТЗ_СворачиваемыеСтроки = Новый ТаблицаЗначений;	// Таблица значений для сворачивания строк.
	ТЗ_СворачиваемыеСтроки.Колонки.Добавить("НомерСтрокиЗагрузки", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	ТЗ_СворачиваемыеСтроки.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ_СворачиваемыеСтроки.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТЗ_СворачиваемыеСтроки.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТЗ_СворачиваемыеСтроки.Колонки.Добавить("СерийныйНомер", Новый ОписаниеТипов("СправочникСсылка.СерийныеНомера"));
	ТЗ_СворачиваемыеСтроки.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТЗ_СворачиваемыеСтроки.Колонки.Добавить("Штрихкод", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТЗ_СворачиваемыеСтроки.Колонки.Добавить("МагнитныйКод", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТЗ_СворачиваемыеСтроки.Колонки.Добавить("ДанныеПО",  ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТЗ_СворачиваемыеСтроки.Колонки.Добавить("ТипШтрихкода", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ТипыШтрихкодов"));
	
	// Перебираем строки массива "МассивДанных".
	Для Каждого ТекСтрока Из МассивДанных Цикл
		
		// Если текущая строка содержит дисконтную карту.
		Если ТекСтрока.Свойство("Карта") ИЛИ НЕ ТекСтрока.Свойство("Количество") Тогда
			МассивПослеСвертки.Добавить(ТекСтрока);
			Продолжить;
		КонецЕсли;
		
		Если СворачиватьУпаковки Тогда
			Если ТекСтрока.Свойство("Упаковка")
				И ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
				КоэффициентУпаковкиПоиска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.Упаковка, "Коэффициент");
				Если КоэффициентУпаковкиПоиска <= 0 Тогда
					КоэффициентУпаковкиПоиска = 1;
				КонецЕсли;
				ТекСтрока.Количество = ТекСтрока.Количество * КоэффициентУпаковкиПоиска;
				ТекСтрока.Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		НоваяСворачиваемаяСтрока = ТЗ_СворачиваемыеСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСворачиваемаяСтрока, ТекСтрока);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсходнаяТаблица.НомерСтрокиЗагрузки КАК НомерСтрокиЗагрузки,
	|	ИсходнаяТаблица.Номенклатура КАК Номенклатура,
	|	ИсходнаяТаблица.Упаковка КАК Упаковка,
	|	ИсходнаяТаблица.Характеристика КАК Характеристика,
	|	ИсходнаяТаблица.СерийныйНомер КАК СерийныйНомер,
	|	ИсходнаяТаблица.Количество КАК Количество,
	|	ИсходнаяТаблица.Штрихкод КАК Штрихкод,
	|	ИсходнаяТаблица.МагнитныйКод КАК МагнитныйКод,
	|	ИсходнаяТаблица.ДанныеПО КАК ДанныеПО,
	|	ИсходнаяТаблица.ТипШтрихкода КАК ТипШтрихкода
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ИсходнаяТаблица.НомерСтрокиЗагрузки) КАК НомерСтрокиЗагрузки,
	|	ИсходнаяТаблица.Номенклатура КАК Номенклатура,
	|	ИсходнаяТаблица.Упаковка КАК Упаковка,
	|	ИсходнаяТаблица.Характеристика КАК Характеристика,
	|	ИсходнаяТаблица.СерийныйНомер КАК СерийныйНомер,
	|	МАКСИМУМ(ИсходнаяТаблица.Штрихкод) КАК Штрихкод,
	|	МАКСИМУМ(ИсходнаяТаблица.МагнитныйКод) КАК МагнитныйКод,
	|	МАКСИМУМ(ИсходнаяТаблица.ДанныеПО) КАК ДанныеПО,
	|	МАКСИМУМ(ИсходнаяТаблица.ТипШтрихкода) КАК ТипШтрихкода,
	|	СУММА(ИсходнаяТаблица.Количество) КАК Количество
	|ИЗ
	|	ИсходнаяТаблица КАК ИсходнаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсходнаяТаблица.Номенклатура,
	|	ИсходнаяТаблица.Упаковка,
	|	ИсходнаяТаблица.Характеристика,
	|	ИсходнаяТаблица.СерийныйНомер
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиЗагрузки
	|";
	Запрос.УстановитьПараметр("ИсходнаяТаблица", ТЗ_СворачиваемыеСтроки);
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Добавляем сгруппированные строки в массив "МассивПослеСвертки".
	Пока Выборка.Следующий() Цикл
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("НомерСтрокиЗагрузки", Выборка.НомерСтрокиЗагрузки);
		СтруктураСтроки.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураСтроки.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураСтроки.Вставить("Упаковка", Выборка.Упаковка);
		СтруктураСтроки.Вставить("Штрихкод", Выборка.Штрихкод);
		СтруктураСтроки.Вставить("МагнитныйКод", Выборка.МагнитныйКод);
		СтруктураСтроки.Вставить("ДанныеПО", Выборка.ДанныеПО);
		СтруктураСтроки.Вставить("ТипШтрихкода", Выборка.ТипШтрихкода);
		Если УчитыватьСерийныеНомера
			И ЗначениеЗаполнено(Выборка.СерийныйНомер) Тогда
			СтруктураСтроки.Вставить("СерийныйНомер", Выборка.СерийныйНомер);
		КонецЕсли;
		СтруктураСтроки.Вставить("Количество", Выборка.Количество);
		
		МассивПослеСвертки.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Возврат МассивПослеСвертки;
	
КонецФункции

Функция ОбработатьДанныеПоСертификатамИзТСДСервер(Форма, СтруктураПараметров) Экспорт
	
	МассивДанных = СтруктураПараметров.ЗначенияПоиска;
	ОбновитьКоличество = СтруктураПараметров.ОбновитьКоличество;
	
	Для Каждого СтрокаМассива Из МассивДанных Цикл
		
		Если ОбновитьКоличество Тогда
			СтрокаМассива.Вставить("ОбновитьКоличество", Истина);
		КонецЕсли;
		
		Если СтрокаМассива.Свойство("СерийныйНомер") Тогда
			
			ИдентификаторСтроки = Форма.ДобавитьНайденныеСерийныеНомера(СтрокаМассива);
			
		ИначеЕсли СтрокаМассива.Свойство("Карта") Тогда
			
			ТипКарты = ?(СтрокаМассива.ЭтоРегистрационнаяКарта,  НСтр("ru = 'регистрационная'"), НСтр("ru = 'дисконтная'"));
			ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена %2 карта. Обработка карт в данной форме при загрузке из ТСД не предусмотрена'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтрокаМассива.Штрихкод, ТипКарты);
			СтрокаМассива.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			
		Иначе
			
			ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена номенклатура. Обработка номенклатуры в данной форме при загрузке из ТСД не предусмотрена'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтрокаМассива.Штрихкод, ТипКарты);
			СтрокаМассива.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			
		КонецЕсли;
		Если СтрокаМассива.Свойство("ТекстПредупреждения") Тогда
			Если СтруктураПараметров.Свойство("ТекстПредупреждения") Тогда
				СтруктураПараметров.ТекстПредупреждения.Добавить(СтрокаМассива.ТекстПредупреждения);
			Иначе
				МассивПредупреждений = Новый Массив;
				МассивПредупреждений.Добавить(СтрокаМассива.ТекстПредупреждения);
				СтруктураПараметров.Вставить("ТекстПредупреждения", МассивПредупреждений);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ОбработатьДанныеПоДисконтнымКартамИзТСДСервер(Форма, СтруктураПараметров) Экспорт
	
	МассивДанных = СтруктураПараметров.ЗначенияПоиска;
	ОбновитьКоличество = СтруктураПараметров.ОбновитьКоличество;
	
	Для Каждого СтрокаМассива Из МассивДанных Цикл
		
		Если ОбновитьКоличество Тогда
			СтрокаМассива.Вставить("ОбновитьКоличество", Истина);
		КонецЕсли;
		
		Если СтрокаМассива.Свойство("СерийныйНомер") Тогда
			
			ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найден номер подарочного сертификата. Обработка сертификатов в данной форме при загрузке из ТСД не предусмотрена'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтрокаМассива.Штрихкод);
			СтрокаМассива.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			
		ИначеЕсли СтрокаМассива.Свойство("Карта") Тогда
			
			Если СтрокаМассива.ЭтоРегистрационнаяКарта Тогда
				ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена регистрационная карта. Обработка регистрационных карт в данной форме при загрузке из ТСД не предусмотрена'");
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтрокаМассива.Штрихкод);
				СтрокаМассива.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			Иначе
				ИдентификаторСтроки = Форма.ДобавитьНайденнуюКарту(СтрокаМассива);
			КонецЕсли;
			
		Иначе
			
			ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена номенклатура. Обработка номенклатуры в данной форме при загрузке из ТСД не предусмотрена'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтрокаМассива.Штрихкод);
			СтрокаМассива.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			
		КонецЕсли;
		Если СтрокаМассива.Свойство("ТекстПредупреждения") Тогда
			Если СтруктураПараметров.Свойство("ТекстПредупреждения") Тогда
				СтруктураПараметров.ТекстПредупреждения.Добавить(СтрокаМассива.ТекстПредупреждения);
			Иначе
				МассивПредупреждений = Новый Массив;
				МассивПредупреждений.Добавить(СтрокаМассива.ТекстПредупреждения);
				СтруктураПараметров.Вставить("ТекстПредупреждения", МассивПредупреждений);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Функция формирует предопределенную структуру,
// Которая используется при поиске по ШК, магнитному коду и загрузке из ТСД,
// В том числе, и при ручном вводе позиций.
Функция СтруктураДанныхПоиска() Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ЗначенияПоиска", Новый Массив);
	СтруктураПараметров.Вставить("НеизвестныеДанныеПО", Истина);
	СтруктураПараметров.Вставить("ДанныеПО", "");
	СтруктураПараметров.Вставить("ТипДанныхПО", "Штрихкод");
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата) Экспорт
	
	ТипКарты = ?(СтрокаРезультата.ЭтоРегистрационнаяКарта,  НСтр("ru = 'регистрационная'"), НСтр("ru = 'дисконтная'"));
	ТиповКарт = ?(СтрокаРезультата.ЭтоРегистрационнаяКарта,  НСтр("ru = 'регистрационных'"), НСтр("ru = 'дисконтных'"));
	ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена %2 карта. Обработка %3 карт в данной форме не предусмотрена'");
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураРезультат.ДанныеПО, ТипКарты, ТиповКарт);
	СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	
КонецПроцедуры

Процедура ВставитьПредупреждениеОНевозможностиОбработкиНоменклатуры(СтруктураРезультат, СтрокаРезультата) Экспорт
	
	ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена номенклатура. Обработка номенклатуры в данной форме не предусмотрена'");
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураРезультат.ДанныеПО);
	СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	
КонецПроцедуры

Процедура ВставитьПредупреждениеОНевозможностиОбработкиСертификатов(СтруктураРезультат, СтрокаРезультата) Экспорт
	
	ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найден подарочный сертификат. Обработка сертификатов в данной форме не предусмотрена'");
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураРезультат.ДанныеПО);
	СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	
КонецПроцедуры

Процедура ВставитьПредупреждениеОНевозможностиОбработкиАкцизныхМарок(СтруктураРезультат, СтрокаРезультата) Экспорт
	
	Если СтрокаРезультата.Свойство("ТипУпаковки") Тогда
		Если СтрокаРезультата.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена акцизная марка. Обработка акцизных марок в данной форме не предусмотрена'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена упаковка ЕГАИС. Обработка упаковок ЕГАИС в данной форме не предусмотрена'");
		КонецЕсли;
	Иначе
		ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена упаковка ЕГАИС. Обработка упаковок ЕГАИС в данной форме не предусмотрена'");
	КонецЕсли;
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураРезультат.ДанныеПО);
	СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	
КонецПроцедуры

Процедура УстановитьКонтрагентаПоДисконтнойКарте(Форма, СтруктураРезультат, СтрокаРезультата) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаРезультата.ВладелецКарты)
		И ТипЗнч(СтрокаРезультата.ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") Тогда
		Форма.Объект.Контрагент = СтрокаРезультата.ВладелецКарты;
		Форма.Модифицированность = Истина;
	Иначе
		ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена дисконтная карта, не связанная с контрагентом.'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураРезультат.ДанныеПО);
		СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиКонтрагентаВДинамическомСпискеПоДисконтнойКарте(Форма, СтруктураРезультат, СтрокаРезультата, ИмяТаблицы = "Список") Экспорт
	
	Если ЗначениеЗаполнено(СтрокаРезультата.ВладелецКарты)
		И ТипЗнч(СтрокаРезультата.ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если Форма.Элементы[ИмяТаблицы].ТекущаяСтрока <> СтрокаРезультата.ВладелецКарты Тогда
			Форма.ТекущийЭлемент = Форма.Элементы[ИмяТаблицы];
			Форма.Элементы[ИмяТаблицы].ТекущаяСтрока = СтрокаРезультата.ВладелецКарты;
		КонецЕсли;
	Иначе
		ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена дисконтная карта, не связанная с контрагентом.'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураРезультат.ДанныеПО);
		СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиФизическоеЛицоВДинамическомСпискеПоКарте(Форма, СтруктураРезультат, СтрокаРезультата, ИмяТаблицы = "Список") Экспорт
	
	Если ЗначениеЗаполнено(СтрокаРезультата.ВладелецКарты)
		И ТипЗнч(СтрокаРезультата.ВладелецКарты) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Если Форма.Элементы[ИмяТаблицы].ТекущаяСтрока <> СтрокаРезультата.ВладелецКарты Тогда
			Форма.ТекущийЭлемент = Форма.Элементы[ИмяТаблицы];
			Форма.Элементы[ИмяТаблицы].ТекущаяСтрока = СтрокаРезультата.ВладелецКарты;
		КонецЕсли;
	Иначе
		ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена дисконтная карта, не связанная с физическим лицом.'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураРезультат.ДанныеПО);
		СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьСтруктуруРезультатамиПоиска(
	СтруктураПараметров,
	Выборка,
	Штрихкод = "",
	МагнитныйКод = "",
	НеизвестныеДанныеПО = Ложь,
	ДанныеМаркировки = Неопределено)
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Владелец) Тогда
			НеизвестныеДанныеПО = Ложь;
			
			СтруктураШтрихкода = НачатьСтруктуруРезультатовПоиска(СтруктураПараметров, Выборка, Штрихкод, МагнитныйКод);
			
			ТипВладельца = ТипЗнч(Выборка.Владелец);
			Если ТипВладельца = Тип("СправочникСсылка.Номенклатура") Тогда
				СтруктураШтрихкода.Вставить("Номенклатура", Выборка.Владелец);
				СтруктураШтрихкода.Вставить("Характеристика", Выборка.Характеристика);
				СтруктураШтрихкода.Вставить("Упаковка", Выборка.Упаковка);
				СтруктураШтрихкода.Вставить("ТипШтрихкода", Выборка.ТипШтрихкода);
				СтруктураШтрихкода.Вставить("ШтрихкодУпаковкиЕГАИС", Выборка.ШтрихкодУпаковкиЕГАИС);
				СтруктураШтрихкода.Вставить("ТипУпаковки", Выборка.ТипУпаковки);
				Если ДанныеМаркировки <> Неопределено Тогда
					СтруктураШтрихкода.Вставить("ДанныеМаркировки", ДанныеМаркировки);
				КонецЕсли;
			ИначеЕсли ТипВладельца = Тип("СправочникСсылка.СерийныеНомера") Тогда
				Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Владелец, "Владелец");
				СтруктураШтрихкода.Вставить("СерийныйНомер", Выборка.Владелец);
				СтруктураШтрихкода.Вставить("Номенклатура", Номенклатура);
			ИначеЕсли ТипВладельца = Тип("СправочникСсылка.ИнформационныеКарты") Тогда
				РеквизитыКарты = Новый Структура;
				РеквизитыКарты.Вставить("ТипКарты");
				РеквизитыКарты.Вставить("ВладелецКарты");
				ЗначенияРеквизитовКарты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.Владелец, РеквизитыКарты);
				СтруктураШтрихкода.Вставить("Карта", Выборка.Владелец);
				СтруктураШтрихкода.Вставить("ТипКарты", ЗначенияРеквизитовКарты.ТипКарты);
				СтруктураШтрихкода.Вставить("ВладелецКарты", ЗначенияРеквизитовКарты.ВладелецКарты);
				СтруктураШтрихкода.Вставить("ЭтоРегистрационнаяКарта", ЗначенияРеквизитовКарты.ТипКарты = Перечисления.ТипыИнформационныхКарт.Регистрационная);
			ИначеЕсли ТипВладельца = Тип("СправочникСсылка.Справки2ЕГАИС") Тогда
				ДанныеНоменклатуры = ИнтеграцияЕГАИСРТ.ДанныеНоменклатурыПоСправке2(Выборка.Владелец);
				СтруктураШтрихкода.Вставить("Номенклатура", ДанныеНоменклатуры.Номенклатура);
				Если ДанныеНоменклатуры.Уникальность Тогда // не заполняем характеристику, если не можем однозначно ее идентифицировать
					СтруктураШтрихкода.Вставить("Характеристика", ДанныеНоменклатуры.Характеристика);
				Иначе
					СтруктураШтрихкода.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				КонецЕсли;
				СтруктураШтрихкода.Вставить("Упаковка", ДанныеНоменклатуры.Упаковка);
				СтруктураШтрихкода.Вставить("ТипШтрихкода", Выборка.ТипШтрихкода);
				СтруктураШтрихкода.Вставить("Справка2", Выборка.Владелец);
			КонецЕсли;
			СтруктураПараметров.ЗначенияПоиска.Добавить(СтруктураШтрихкода);
		//Иначе
		//	Если ЗначениеЗаполнено(Выборка.ШтрихкодУпаковкиЕГАИС) Тогда
		//		ШтрихкодМарки = "";
		//		Если ЗначениеЗаполнено(СтруктураПараметров.ДанныеПО) Тогда
		//			ШтрихкодМарки = СтруктураПараметров.ДанныеПО;
		//		ИначеЕсли ЗначениеЗаполнено(Штрихкод) Тогда
		//			ШтрихкодМарки = Штрихкод;
		//		КонецЕсли;
		//		Если ЗначениеЗаполнено(ШтрихкодМарки) Тогда
		//			КодПродукции = АкцизныеМаркиВызовСервера.КодКлассификатораНоменклатурыЕГАИС(ШтрихкодМарки);
		//			
		//		КонецЕсли;
		//	КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НачатьСтруктуруРезультатовПоиска(
	СтруктураПараметров,
	Выборка,
	Штрихкод,
	МагнитныйКод)
	
	СтруктураШтрихкода = Новый Структура;
	Если ЗначениеЗаполнено(СтруктураПараметров.ДанныеПО) Тогда
		СтруктураШтрихкода.Вставить("ДанныеПО", СтруктураПараметров.ДанныеПО);
	ИначеЕсли ЗначениеЗаполнено(Штрихкод) Тогда
		СтруктураШтрихкода.Вставить("ДанныеПО", Штрихкод);
	Иначе
		СтруктураШтрихкода.Вставить("ДанныеПО", МагнитныйКод);
	КонецЕсли;
	СтруктураШтрихкода.Вставить("НомерСтрокиЗагрузки", Выборка.НомерСтроки);
	СтруктураШтрихкода.Вставить("Штрихкод", Штрихкод);
	СтруктураШтрихкода.Вставить("МагнитныйКод", МагнитныйКод);
	СтруктураШтрихкода.Вставить("Количество", Выборка.Количество);
	
	Возврат СтруктураШтрихкода;
	
КонецФункции

Процедура НайтиПоАкцизнойМарке(
	Форма,
	СтруктураПараметров,
	Штрихкод,
	ТипШтрихкодаРТ,
	НеизвестныеДанныеПО,
	НайденоОбъектов)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КодАкцизнойМарки", Штрихкод);
	СтрокиМарок = Форма.Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
	Если СтрокиМарок.Количество() > 0 Тогда
		НайденнаяСтрока = СтрокиМарок[0];
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязи", НайденнаяСтрока.КлючСвязи);
		СтрокиНоменклатуры = Форма.Объект.Товары.НайтиСтроки(СтруктураПоиска);
		Если СтрокиНоменклатуры.Количество() > 0 Тогда
			НайденнаяСтрока = СтрокиНоменклатуры[0];
			ИдентификаторСтроки = НайденнаяСтрока.ПолучитьИдентификатор();
			НеизвестныеДанныеПО = Ложь;
			
			СтруктураШтрихкода = Новый Структура;
			Если ЗначениеЗаполнено(СтруктураПараметров.ДанныеПО) Тогда
				СтруктураШтрихкода.Вставить("ДанныеПО", СтруктураПараметров.ДанныеПО);
			ИначеЕсли ЗначениеЗаполнено(Штрихкод) Тогда
				СтруктураШтрихкода.Вставить("ДанныеПО", Штрихкод);
			КонецЕсли;
			СтруктураШтрихкода.Вставить("Штрихкод", Штрихкод);
			СтруктураШтрихкода.Вставить("МагнитныйКод", "");
			СтруктураШтрихкода.Вставить("Количество", 1);
			
			СтруктураПараметров.ЗначенияПоиска.Добавить(СтруктураШтрихкода);
			СтруктураПараметров.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
			СтруктураПараметров.Вставить("ПовторАкцизнойМарки", Истина);
			СтруктураПараметров.Вставить("ТекстПредупреждения", НСтр("ru = 'Акцизная марка уже считана в этом документе'"));
			НайденоОбъектов = 1;
		КонецЕсли;
	Иначе
		ТекстОшибки = "";
		Операция = "";
		ОрганизацияЕГАИС = Неопределено;
		Если Форма.ИмяФормы = "Обработка.РМКУправляемыйРежим.Форма.Форма"
			ИЛИ Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента" Тогда
			Если Форма.Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
				Операция = "Возврат";
			Иначе
				Операция = "Продажа";
			КонецЕсли;
		ИначеЕсли Форма.ИмяФормы = "Документ.ВозвратТоваровОтПокупателя.Форма.ФормаДокумента"
			ИЛИ Форма.ИмяФормы = "Обработка.ВозвратТоваровОтРозничногоПокупателя.Форма.Форма" Тогда
			Операция = "Возврат";
		ИначеЕсли Форма.ИмяФормы = "Документ.РеализацияТоваров.Форма.ФормаДокумента" Тогда
			Операция = "Продажа";
		КонецЕсли;
		
		Если Форма.ИмяФормы = "Обработка.РМКУправляемыйРежим.Форма.Форма" Тогда 
			ОрганизацияЕГАИС = Форма.ОрганизацияЕГАИС;
		Иначе 
			ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
								Форма.Объект.Организация,
								Форма.Объект.Магазин);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Операция) Тогда
			Если ИнтеграцияЕГАИСРТВызовСервера.ПроверитьУникальностьАкцизнойМарки(Операция, Штрихкод, ТекстОшибки, ОрганизацияЕГАИС) Тогда
				ЗапросМарка = Новый Запрос;
				ЗапросМарка.Текст = "
				|ВЫБРАТЬ
				|	0 КАК НомерСтроки,
				|	Штрихкоды.Номенклатура КАК Владелец,
				|	Штрихкоды.Характеристика КАК Характеристика,
				|	ВЫБОР
				|		КОГДА Штрихкоды.Упаковка ССЫЛКА Справочник.УпаковкиНоменклатуры
				|			ТОГДА Штрихкоды.Упаковка
				|		ИНАЧЕ &ПустаяУпаковка
				|	КОНЕЦ КАК Упаковка,
				|	&ТипШтрихкода КАК ТипШтрихкода,
				|	ВЫБОР
				|		КОГДА Штрихкоды.Количество = 0
				|			ТОГДА 1
				|		ИНАЧЕ Штрихкоды.Количество
				|	КОНЕЦ КАК Количество,
				|	Штрихкоды.Ссылка КАК ШтрихкодУпаковкиЕГАИС,
				|	Штрихкоды.ТипУпаковки КАК ТипУпаковки
				|ИЗ
				|	Справочник.ШтрихкодыУпаковокТоваров КАК Штрихкоды
				|ГДЕ
				|	Штрихкоды.ЗначениеШтрихкода = &Штрихкод";
				
				
				ЗапросМарка.УстановитьПараметр("Штрихкод", Штрихкод);
				ЗапросМарка.УстановитьПараметр("ТипШтрихкода", ТипШтрихкодаРТ);
				ЗапросМарка.УстановитьПараметр("ПустаяУпаковка", Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
				ЗапросМарка.УстановитьПараметр("ПустойШтрихКодУпаковки", Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
				ЗапросМарка.УстановитьПараметр("ПустойТипУпаковки", Перечисления.ТипыУпаковок.ПустаяСсылка());
				ЗапросМарка.УстановитьПараметр("ТипУпаковки", Перечисления.ТипыУпаковок.МаркированныйТовар);
				РезультатЗапроса = ЗапросМарка.Выполнить();
				Выборка = РезультатЗапроса.Выбрать();
				НайденоОбъектов = Выборка.Количество();
				Если НайденоОбъектов > 0 Тогда
					ДополнитьСтруктуруРезультатамиПоиска(СтруктураПараметров, Выборка, Штрихкод, "", НеизвестныеДанныеПО);
				Иначе
					Если СтрДлина(Штрихкод) < 150 Тогда
						// Старый формат.
						КодАлкогольнойПродукции = АкцизныеМаркиВызовСервера.КодКлассификатораНоменклатурыЕГАИС(Штрихкод);
						Если ЗначениеЗаполнено(КодАлкогольнойПродукции) Тогда
							ЗапросМарка.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
							|	0 КАК НомерСтроки,
							|	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Владелец,
							|	СоответствиеНоменклатурыЕГАИС.Характеристика КАК Характеристика,
							|	&ПустаяУпаковка КАК Упаковка,
							|	&ТипШтрихкода КАК ТипШтрихкода,
							|	1 КАК Количество,
							|	NULL КАК ШтрихкодУпаковкиЕГАИС,
							|	&ТипУпаковки КАК ТипУпаковки
							|ИЗ
							|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
							|ГДЕ
							|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция.Код = &КодАлкогольнойПродукции";
							ЗапросМарка.УстановитьПараметр("КодАлкогольнойПродукции", КодАлкогольнойПродукции);
							РезультатЗапроса = ЗапросМарка.Выполнить();
							Выборка = РезультатЗапроса.Выбрать();
							НайденоОбъектов = Выборка.Количество();
							Если НайденоОбъектов > 0 Тогда
								ДополнитьСтруктуруРезультатамиПоиска(СтруктураПараметров, Выборка, Штрихкод, "", НеизвестныеДанныеПО);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтруктураПараметров.Вставить("ТекстПредупреждения", Строка(ТекстОшибки));
				НайденоОбъектов = 1;
				НеизвестныеДанныеПО = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСтруктуруДляРегистрацииНовогоОбъекта(
	СтруктураПараметров,
	ДанныеПО,
	СтруктураДействий,
	НеизвестныеДанныеПО,
	ТипШтрихкодаРТ = Неопределено,
	ВозможнаРегистрацияНовойНоменклатуры = Ложь)
	
	РегистрироватьНовыйОбъект = Истина;
	
	Если СтруктураДействий.Свойство("РегистрацияНовойКарты") Тогда
		Пользователь = Неопределено;
		Если НЕ СтруктураДействий.Свойство("Пользователь", Пользователь) Тогда
			Пользователь = Пользователи.ТекущийПользователь();
		КонецЕсли;
		              
		Если УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
				ПланыВидовХарактеристик.ПраваПользователей.РазрешитьРегистрациюДисконтнойКартыПриСчитыванииНовогоКода,
				Ложь,
				Пользователь) Тогда
				
			Если ТипШтрихкодаРТ = Неопределено Тогда
				ТипКарты = Перечисления.ВидыИнформационныхКарт.Магнитная;
			Иначе
				ТипКарты = Перечисления.ВидыИнформационныхКарт.Штриховая;
			КонецЕсли;
			МассивШаблонов = Новый Массив;
			Если РегистрыСведений.ШаблоныРегистрацииНовыхКарт.РезультатПроверкиСоответствияШаблонам(
					ДанныеПО,
					ТипКарты,
					ТипШтрихкодаРТ,
					МассивШаблонов) Тогда
				
				РегистрироватьНовыйОбъект = Ложь;
				НеизвестныеДанныеПО = Ложь;
				
				ПредставлениеКарты = ДанныеПО;
				Если МассивШаблонов.Количество() = 1 Тогда
					
					СтруктураНовойКарты = МассивШаблонов[0];
					СтруктураНовойКарты.Вставить("ТипШтрихкода", ТипШтрихкодаРТ);
					СтруктураНовойКарты.Вставить("КодКарты", ДанныеПО);
					
					СтруктураПараметров.Вставить("РегистрацияНовойКарты", СтруктураНовойКарты);
					
					Если СтруктураНовойКарты.Свойство("НаименованиеШаблона")
						И ЗначениеЗаполнено(СтруктураНовойКарты.НаименованиеШаблона) Тогда
							ПредставлениеКарты = ПредставлениеКарты + " (" + СтруктураНовойКарты.НаименованиеШаблона+")";
					КонецЕсли;
					
				Иначе
					
					СтруктураПараметров.Вставить("РегистрацияНовойКартыВыборШаблона", ПоместитьВоВременноеХранилище(МассивШаблонов, Новый УникальныйИдентификатор()));

				КонецЕсли;
				
				ТекстВопроса = НСтр("ru = 'Создать новую информационную карту? Карта %1.'");
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ПредставлениеКарты);
				
				СтруктураПараметров.Вставить("ТекстВопросаНовойКарты", ТекстВопроса);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РегистрироватьНовыйОбъект
		И ВозможнаРегистрацияНовойНоменклатуры
		И СтруктураДействий.Свойство("РегистрацияНовойНоменклатуры") Тогда
		
		РегистрироватьНовыйОбъект = Ложь;
		НеизвестныеДанныеПО = Ложь;
		
		ТекстВопроса = НСтр("ru = 'Создать новую позицию товара с штрихкодом %1?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДанныеПО);
		
		СтруктураПараметров.Вставить("ДанныеПО", ДанныеПО);
		СтруктураПараметров.Вставить("Штрихкод", ДанныеПО);
		СтруктураПараметров.Вставить("ТипШтрихкода", ТипШтрихкодаРТ);
		СтруктураПараметров.Вставить("ТекстВопроса", ТекстВопроса);
		СтруктураПараметров.Вставить("РегистрацияНовойНоменклатуры", Истина);
		
		Если СтруктураДействий.Свойство("ИспользоватьКоличество") Тогда
			СтруктураПараметров.Вставить("ИспользоватьКоличество", СтруктураДействий.ИспользоватьКоличество);
			Если СтруктураДействий.Свойство("ОбновитьКоличество") Тогда
				СтруктураПараметров.Вставить("ОбновитьКоличество", СтруктураДействий.ИспользоватьКоличество);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти