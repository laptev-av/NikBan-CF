#Область ПрограммныйИнтерфейс

#Область РаботаСДанными

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

// Функция возвращает структуру значений реквизитов объекта.
//
Функция ПолучитьЗначенияРеквизитовОбъекта(Ссылка, СтруктураПолей) Экспорт
	
	Возврат ОбщегоНазначенияРТ.ПолучитьЗначенияРеквизитовОбъекта(Ссылка, СтруктураПолей);
	
КонецФункции

// Получает настройку права пользователя "ОткрыватьРМКПриЗапускеПрограммы".
//
Функция ОткрыватьРМКПриЗапускеПрограммы() Экспорт
	
	ПравоДоступаРМКУправляемыйРежим = ПравоДоступа("Использование", Метаданные.Обработки.РМКУправляемыйРежим);
	
	Если ПравоДоступаРМКУправляемыйРежим Тогда
		
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
		
		ОткрыватьРМКПриЗапускеПрограммы = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
											ПланыВидовХарактеристик.ПраваПользователей.ОткрыватьРМКПриЗапускеПрограммы, 
											Ложь, 
											Пользователь);
											
		Возврат ОткрыватьРМКПриЗапускеПрограммы;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Процедура установки значения экспортных переменных модуля приложения.
//
Процедура УстановитьЗначениеПеременной(ИмяПараметра, Кэш, ЗначениеПараметра, ОбновлятьВоВсехКэшах = Ложь) Экспорт
	
	ОбщегоНазначенияРТ.УстановитьЗначениеПеременной(ИмяПараметра, Кэш, ЗначениеПараметра, ОбновлятьВоВсехКэшах);
	
КонецПроцедуры

// Возвращает склонение в выбранном падеже.
Функция ПолучитьСклонениеФИО(ФИО, Падеж, Пол = Неопределено) Экспорт
	
	// Функция не обрабатывает пустые строки.
	Если ПустаяСтрока(ФИО) Тогда
		Возврат ФИО;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		СклонениеФИО = ФИО;
	Иначе
		СклонениеФИО = СклонениеПредставленийОбъектов.ПросклонятьФИО(ФИО, Падеж, Неопределено, Пол);
	КонецЕсли;
	
	Возврат СклонениеФИО;
	
КонецФункции

// Функция возвращает Истина, если сервер запущен на Linux.
Функция ЭтоLinuxСервер() Экспорт
	Возврат ОбщегоНазначенияРТКлиентСерверПовтИсп.ЭтоLinuxСервер();
КонецФункции

// Возвращает именительный падеж по переданному реквизиту;
//
Функция ИменительныйПадежПоРеквизиту(ФизЛицо) Экспорт
	
	ФИОФизЛицаИП = "";
	Если Не ТипЗнч(ФизЛицо) = Тип("Строка")Тогда
		ФизЛицоФИО = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(, Новый Структура("ФизЛицо", ФизЛицо)); 
		ФИОФизЛицаИП = ФизЛицоФИО.Фамилия + " " + ФизЛицоФИО.Имя + " " + ФизЛицоФИО.Отчество;

		Если СокрЛП(ФИОФизЛицаИП) = "" Тогда
			ФИОФизЛицаИП = ФизЛицо.Наименование;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ФизЛицо) = Тип("Строка") Тогда
		ФИОФизЛицаИП = ФизЛицо;
	КонецЕсли;
	
	Возврат ФИОФизЛицаИП
	
КонецФункции

// Изменение текущего магазина после записи пользователя
Функция ИзменениеТекущегоПользователя(Пользователь) Экспорт
	
	Возврат ОбщегоНазначенияРТ.ИзменениеТекущегоПользователя(Пользователь);
	
КонецФункции

// Получает последний порядковый номер документа (чека) для КассыККМ
//
Функция ПолучитьПоследнийНомерДокументаКассыККМ(Ссылка) Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(МАКСИМУМ(ОплатаОтПокупателяПлатежнойКартой.НомерЧекаККМ), 0) КАК НомерЧекаККМ
	|ПОМЕСТИТЬ ТаблицаПоследнихДокументов
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаОтПокупателяПлатежнойКартой
	|ГДЕ
	|	ОплатаОтПокупателяПлатежнойКартой.КассаККМ = &КассаККМ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ПриходныйКассовыйОрдер.НомерЧекаККМ), 0)
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.КассаККМ = &КассаККМ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(РасходныйКассовыйОрдер.НомерЧекаККМ), 0)
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.КассаККМ = &КассаККМ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ЧекККМ.НомерЧекаККМ), 0)
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.КассаККМ = &КассаККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ТаблицаПоследнихДокументов.НомерЧекаККМ), 0) КАК НомерЧекаККМ
	|ПОМЕСТИТЬ ТаблицаПоследнихНомеров
	|ИЗ
	|	ТаблицаПоследнихДокументов КАК ТаблицаПоследнихДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоследнихНомеров.НомерЧекаККМ КАК НомерЧекаККМ
	|ИЗ
	|	ТаблицаПоследнихНомеров КАК ТаблицаПоследнихНомеров
	|ГДЕ
	|	ТаблицаПоследнихНомеров.НомерЧекаККМ <> 0
	|");
	Запрос.УстановитьПараметр("КассаККМ", Ссылка);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НомерЧекаККМ = Выборка.НомерЧекаККМ + 1;
		КонецЦикла; 
	КонецЕсли; 

	Возврат НомерЧекаККМ;
	
КонецФункции

#КонецОбласти

#Область ДоступКОбъектам

// Проверка доступа к реквизиту объекта.
//
Функция ПроверитьДоступКРеквизиту(Объект, ИмяРеквизита, ИмяТаблицыЗначений) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоступныеЗначенияРеквизита.Ссылка
	|ИЗ
	|	" + ИмяТаблицыЗначений + " КАК ДоступныеЗначенияРеквизита";
	
	Результат = Запрос.Выполнить();
	МассивРазрешенныхЗначенийРеквизита = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	УстановитьПривилегированныйРежим(Истина);
	ЗначениеРеквизита = Объект[ИмяРеквизита];
	
	Возврат МассивРазрешенныхЗначенийРеквизита.Найти(ЗначениеРеквизита) <> Неопределено;
	
КонецФункции

// Возвращает на клиент значение параметра сеанса по имени.
//
Функция ЗначениеПараметраСеанса(ИмяПараметра) Экспорт
	
	Возврат ПараметрыСеанса[ИмяПараметра]
	
КонецФункции

// Устанавливает параметр сеанса по имени и значению, переданных с клиента.
//
Процедура УстановитьЗначениеПараметраСеанса(ИмяПараметра, ЗначениеПараметра) Экспорт
	
	ПараметрыСеанса[ИмяПараметра] = ЗначениеПараметра;
	
КонецПроцедуры


#КонецОбласти

#Область ПеренаправлениеВызововБСП

// Возвращает структуру, содержащую ОбщиеНастройки и ПерсональныеНастройки\
//
Функция НастройкиРаботыСФайлами() Экспорт
	
	Возврат РаботаСФайлами.НастройкиРаботыСФайлами();
	
КонецФункции

// Удаляет набор записей в регистре по переданным значениям структуры.
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо удалить набор записей.
//  ИмяРегистра     - Строка - имя регистра сведений, в котором необходимо удалить набор записей.
// 
Процедура УдалитьНаборЗаписейВРегистреСведений(СтруктураЗаписи, ИмяРегистра, Загрузка = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбменДаннымиСервер.УдалитьНаборЗаписейВРегистреСведений(СтруктураЗаписи, ИмяРегистра, Загрузка);
	
КонецПроцедуры

// Проверяет, является ли текущий или указанный пользователь полноправным.
// 
// Полноправным считается пользователь, который
// а) при не пустом списке пользователей информационной базы:
// - в локальном режиме работы (без разделения данных) имеет роль ПолныеПрава и
//   роль для администрирования системы,
// - в модели сервиса (с разделением данных) имеет роль ПолныеПрава;
// б) при пустом списке пользователей информационной базы
//    основная роль конфигурации не задана или ПолныеПрава.
//
// Параметры:
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ;
//                 СправочникСсылка.Пользователи,
//                 СправочникСсылка.ВнешниеПользователи - осуществляется поиск
//                    пользователя ИБ по уникальному идентификатору,
//                    заданному в реквизите ИдентификаторПользователяИБ.
//                    Прим.: если пользователь ИБ не найден, возвращается Ложь.
//                 ПользовательИнформационнойБазы - проверяется указанный
//                    пользователь ИБ.
//
//  ПроверятьПраваАдминистрированияСистемы - Булево - если задано Истина, тогда
//                 проверяется наличие роли для администрирования системы.
//                 Начальное значение: Ложь.
//
//  УчитыватьПривилегированныйРежим - Булево - если задано Истина, тогда
//                 функция возвращает Истина, когда установлен привилегированный режим.
//                 Начальное значение: Истина.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоПолноправныйПользователь(Пользователь = Неопределено,
                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
                                    УчитыватьПривилегированныйРежим = Истина) Экспорт
	
	Возврат Пользователи.ЭтоПолноправныйПользователь(Пользователь,
													 ПроверятьПраваАдминистрированияСистемы,
													 УчитыватьПривилегированныйРежим)
	
КонецФункции

// Вспомогательная процедура для вызова на обычном клиенте 
// одноименной функции серверного модуля
// ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВСтруктуру.
Процедура ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, СтрокаВыборки, СтруктураЭлемента) Экспорт
	
	ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВСтруктуру(РезультатЗапроса, СтрокаВыборки, СтруктураЭлемента);
	
КонецПроцедуры

#КонецОбласти

// Адрес магазина.
//  Параметры:
//   Магазин
Функция АдресМагазина(Магазин) Экспорт
	
	Возврат ОбщегоНазначенияРТ.АдресМагазина(Магазин);
	
КонецФункции

// Возвращает ФИО физлица, указанного в текущем пользоватле, с учем замены прав в РМК
Функция ФИОФизЛицаПользователяСУчетомИзмененныхПрав() Экспорт
	
	Пользователь = ОбщегоНазначенияРТКлиентСервер.ПользовательСУчетомИзмененныхПрав();
	
	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо");
	
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат "";
	КонецЕсли;
	
	СтруктураФИО = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(, Новый Структура("ФизЛицо", ФизЛицо)); 
	
	СтрокаФИО = "";
	СтрокаФИО = СтрокаФИО + ?(СтрокаФИО = "", "", " ") + СтруктураФИО.Фамилия;
	СтрокаФИО = СтрокаФИО + ?(СтрокаФИО = "" или СтруктураФИО.Имя = "", "", " ") + СтруктураФИО.Имя;
	СтрокаФИО = СтрокаФИО + ?(СтрокаФИО = "" или СтруктураФИО.Отчество = "", "", " ") + СтруктураФИО.Отчество;
	
	Возврат СтрокаФИО;
	
КонецФункции

#КонецОбласти