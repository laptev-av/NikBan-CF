
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Торговые предложения".
// ОбщийМодуль.ТорговыеПредложенияПереопределяемый.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает признак того, что функциональная опция использования видов номенклатуры включена.
// 
// Параметры:
//   ИмяФормы - Строка - имя формы, для которой получаются данные.
//   Результат - Булево - признак того, что функциональная опция включена.
//
Процедура ФункциональнаяОпцияИспользуется(Знач ИмяФормы, Результат) Экспорт
	
	Если ИмяФормы = "Обработка.ТорговыеПредложения.Форма.СопоставлениеНоменклатуры"
		ИЛИ ИмяФормы = "Обработка.ТорговыеПредложения.Форма.СписокПубликаций" Тогда
		Результат = Истина;
	КонецЕсли;
		
КонецПроцедуры

// Выдает сообщение пользователю о том, что функциональная опция использования видов номенклатуры отключена.
//
// Параметры:
//  ИмяФормы - Строка - имя формы из которой вызывается сообщение.
//  Используется - Булево - признак того, что функциональная опция включена или нет.
//  Отказ - Булево - признак того, что форму сопоставления номенклатуры открывать не нужно.
//
Процедура СообщитьОНеобходимостиИспользованияФункциональнойОпции(Знач ИмяФормы, Знач Используется, Отказ) Экспорт
	
КонецПроцедуры

// Получение валюты регламентированного учета.
// 
// Параметры:
//  Валюта - СправочникСсылка - валюта регламентированного учета.
//
Процедура ПолучитьВалютуРегламентированногоУчета(Валюта) Экспорт
	Валюта = НСтр("ru = 'руб.'");
КонецПроцедуры

// Создает документ заказ поставщику на основании данных торгового предложения.
//
// Параметры:
//  ДанныеЗаполнения - Структура - данные торгового предложения:
//   * Организация       - СправочникСсылка - организация торгового предложения.
//   * Контрагент        - СправочникСсылка - поставщик торгового предложения.
//   * Валюта            - СправочникСсылка.Валюты - валюта торгового предложения.
//   * СтрокиЗаказа      - ТаблицаЗначений - содержит данные табличной части.
//   * КонтекстИсточника - Структура - набор данных из основания содержащий данные для заполнения шапки документа.
//   * СпособДоставки    - Ссылка - способ доставки прикладного решения.
//   * АдресДоставки     - Строка - представление адреса доставки.
//   * АдресДоставкиЗначенияПолей - Строка - значение адреса доставки в формате XML.
//  ДокументОбъект - ДокументОбъект - возвращается созданный, но не записанный документ.
//
Процедура СоздатьДокументЗаказПоставщикуНаОснованииТорговогоПредложения(Знач ДанныеЗаполнения, ДокументОбъект) Экспорт
	
	КонтекстИсточника = ДанныеЗаполнения.КонтекстИсточника;
	СтрокиЗаказа = ДанныеЗаполнения.СтрокиЗаказа;
	Организация = ДанныеЗаполнения.Организация;
	Контрагент = ДанныеЗаполнения.Контрагент;
	
	ДокументОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	ДокументОбъект.ДатаПоступления = ДокументОбъект.Дата;
	ДокументОбъект.Заполнить(Неопределено);
	ДокументОбъект.УстановитьНовыйНомер();

	// Реквизиты шапки.
	ДокументОбъект.Организация = Организация;
	ДокументОбъект.Контрагент =  Контрагент;
	Если КонтекстИсточника <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДокументОбъект, КонтекстИсточника);
	КонецЕсли;
	
	КэшированныеЗначения = Новый Структура;
	// Товары.
	Для Каждого СтрокаЗаказа Из СтрокиЗаказа Цикл
		СтрокаТовары = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаЗаказа);
		СтрокаТовары.Характеристика = СтрокаЗаказа.ХарактеристикаНоменклатуры;
		СтрокаТовары.КоличествоУпаковок = СтрокаЗаказа.Количество;
		Если ЗначениеЗаполнено(СтрокаЗаказа.КонтекстСтроки) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаЗаказа.КонтекстСтроки);
		КонецЕсли;
		СтруктураПараметровСтавкиНДС = Новый Структура;
		СтруктураПараметровСтавкиНДС.Вставить("Дата", ДокументОбъект.Дата);
		СтруктураПараметровСтавкиНДС.Вставить("Склад", ДокументОбъект.Склад);
		СтруктураПараметровСтавкиНДС.Вставить("Организация", ДокументОбъект.Организация);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", СтруктураПараметровСтавкиНДС);
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтавкуНДСВСтрокеСкладВШапкеТЧСервер(СтрокаТовары, СтруктураДействий, КэшированныеЗначения);
		
		СтруктураДействий = Новый Структура;
		ПараметрыПересчетаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ДокументОбъект);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ПараметрыПересчетаНДС);
		
		ОбработкаТабличнойЧастиТоварыСервер.ПересчитатьСуммуНДСВСтрокеТЧСервер(СтрокаТовары, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
	
КонецПроцедуры

// Удаляет созданные заказы поставщику при переходе на шаг назад.
//
// Параметры:
//  ТаблицаДокументы - ТаблицаЗначений - таблица документов для удаления, состав:
//    * Ссылка - ДокументСсылка - ссылка на удаляемый документ.
//  Отказ - Булево - признак результата удаления документов.
//
Процедура УдалитьДокументыЗаказПоставщику(ТаблицаДокументы, Отказ) Экспорт
	
КонецПроцедуры

// Получает значения контекста на основании которого будет производиться поиск предложений
// и которые будут переданы в шапку создаваемых заказов.
//
// Параметры:
//  ПараметрКоманды - Массив - ссылки на документы для заполнения таблицы поиска товаров в 1С:Бизнес-сеть.
//  КонтекстИсточника - Структура - свойства источника, используемые для формирования заказов.
//  ТаблицаТовары - ТаблицаЗначений - товары для поиска с реквизитами, состав:
//    * Номенклатура - СправочникСсылка - номенклатура.
//    * Характеристика - СправочникСсылка - характеристика номенклатуры.
//    * Упаковка - СправочникСсылка - упаковка номенклатуры.
//    * Количество - Число - количество.
//    * ЕдиницаИзмерения - СправочникСсылка - единица измерения номенклатуры.
//    * Числитель - Число - числитель упаковки.
//    * Знаменатель - число - знаменатель номенклатуры.
//    * Склад - СправочникСсылка - склад для заказа.
//    * КонтекстСтроки - Произвольный - дополнительные свойства по источнику.
//
Процедура СвойстваКонтекстаДокументовДляПоискаПредложений(Знач ПараметрКоманды, КонтекстИсточника, ТаблицаТовары) Экспорт
	
КонецПроцедуры

// Производит пересчет суммы для заказа товаров.
//
// Параметры:
//  СтрокаТоваров - Структура - реквизиты строки товаров для пересчета суммы при формировании заказов.
//                              См. ФормированиеЗаказов.ОписаниеСтрокиТаблицыТовары(), состав:
//    * ПроцентНДС      - Строка - значение НДС, полученное из сервиса.
//    * СтавкаНДС       - Ссылка - значение ставки НДС.
//    * Цена            - Число - цена товара для заказа.
//    * ЦенаВключаетНДС - Булево - признак включения НДС в цену.
//    * Количество      - Число - количество товара для заказа.
//    * Сумма           - Число - сумма заказа по строке.
//    * СуммаНДС        - Число - сумма НДС строки.
//    * СуммаСНДС       - Число - значение суммы с НДС.
//
Процедура ПересчитатьСуммуПоСтроке(СтрокаТоваров) Экспорт
	
	СтрокаТоваров.Сумма = Окр(СтрокаТоваров.Количество * СтрокаТоваров.Цена, 2);
	СтрокаТоваров.СуммаСНДС = СтрокаТоваров.Сумма;
	
КонецПроцедуры

// Устанавливаем условное оформление для единиц измерения номенклатуры.
//
// Параметры:
// 	 Форма - Форма - управляемая форму.
// 	 ИмяПоляВводаЕдиницИзмерения - Строка - наименование элемента формы, содержащего ед. измерения номенклатуры.
// 	 ПутьКПолюОтбора - Строка - полный путь к реквизиту.
//
Процедура УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, Знач ИмяПоляВводаЕдиницИзмерения, Знач ПутьКПолюОтбора) Экспорт
	
КонецПроцедуры

// Устанавливает значение свойства элементов формы, если находит элемент на форме.
//
// Параметры:
//  ЭлементыФормы  - ВсеЭлементыФормы - элементы формы, среди которых содержится искомый элемент.
//  ИменаЭлементов - Массив, Строка, Структура - имена искомых элементов.
//  ИмяСвойства    - Строка - имя свойства, для которого будет устанавливаться значение.
//  Значение       - Произвольный - значение, которое будет установлено.
//  УстанавливатьДляПодчиненных - Булево - установить аналогичное свойство для подчиненных элементов искомых элементов.
//
Процедура УстановитьСвойствоЭлементовФормы(ЭлементыФормы, ИменаЭлементов, ИмяСвойства, Значение, УстанавливатьДляПодчиненных = Ложь) Экспорт
	
КонецПроцедуры

// Получение доступных типов значений свойств для сопоставления.
// 
// Параметры:
//  ТипыЗначенийСвойств - СписокЗначений - доступные типы значений, например Тип("СправочникСсылка.Производители").
//
Процедура ПолучитьДоступныеТипыЗначенийСвойствДляСопоставления(ТипыЗначенийСвойств) Экспорт
	
КонецПроцедуры

// Возвращает пустую ссылку реквизита объекта для сопоставления.
// 
// Параметры:
//  Ссылка - ЛюбаяСсылка - пустая ссылка для заполнения сопоставления,
//                         например ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.
//
Процедура ПустаяСсылкаРеквизитаОбъектаДляСопоставления(Ссылка) Экспорт
	
КонецПроцедуры

// Получение реквизитов номенклатуры поставщика.
//
// Параметры:
//  НоменклатураПоставщиков	- Массив - список ссылок справочника номенклатура поставщика.
//  ТаблицаРеквизитов - ТаблицаЗначений - состав колонок:
//    * НоменклатураПоставщика       - СправочникСсылка - ссылка справочника номенклатура поставщика.
//    * Номенклатура                 - СправочникСсылка - ссылка справочника 
//    * ИспользованиеХарактеристик   - Булево - признак использования характеристик номенклатуры.
//    * Упаковка                     - СправочникСсылка - упаковка номенклатуры.
//    * ХарактеристикаНоменклатуры   - СправочникСсылка - характеристика номенклатуры.
//    * ЕдиницаИзмеренияНоменклатуры - СправочникСсылка - единица измерения номенклатуры.
//
Процедура ПолучитьРеквизитыНоменклатурыПоставщика(Знач НоменклатураПоставщиков, ТаблицаРеквизитов) Экспорт
		
КонецПроцедуры

// Заполнение пакета торговых предложений.
//
// Параметры:
//  ТорговоеПредложение	 - СправочникСсылка - ссылка на элемент справочника определяющего торговые предложения,
//                                            например СправочникСсылка.Соглашения.
//  ПакетПредложений	 - Структура - свойства публикуемого торгового предложения.
//                         см. ТорговыеПредложения.ОписаниеПакетаПредложений().
//
Процедура ЗаполнитьПакетПредложений(Знач ТорговоеПредложение, ПакетПредложений) Экспорт
	
КонецПроцедуры

// Заполнение контактной информации по контактному лицу.
//
// Параметры:
//  КонтактноеЛицо    - СправочникСсылка - контактное лицо в информационной базе, например СправочникСсылка.ФизическиеЛица.
//  ЭлектроннаяПочта  - Строка - адрес электронной почты.
//  Телефон           - Строка - номер телефона.
//  УведомлятьПоПочте - Булево - признак необходимости уведомления по электронной почте.
//  Перезаполнять     - Булево - признак необходимости перезаполнения информации.
//
Процедура ЗаполнитьКонтактнуюИнформациюПоКонтактномуЛицу(Знач КонтактноеЛицо, ЭлектроннаяПочта, Телефон, УведомлятьПоПочте, Знач Перезаполнять = Ложь) Экспорт
	
КонецПроцедуры

// Заполнение реквизитов номенклатуры в процедуре формирования заказа.
// См. Обработка.ТорговыеПредложения.Форма.ФормированиеЗаказов.
//
// Параметры:
//  Номенклатура - СправочникСсылка - ссылка на справочник номенклатура.
//  Результат	 - Структура - возвращаемые реквизиты ссылки справочника, 
//                             см. ТорговыеПредложения.ОписаниеРеквизитовНоменклатуры():
//    ИспользованиеХарактеристик - Булево - признак использования характеристик номенклатуры.
//    ЕдиницаИзмерения - СправочникСсылка - единица измерения номенклатуры.
//    Упаковка - СправочникСсылка - упаковка номенклатуры.
//    НоменклатураПоставщика - СправочникСсылка - пустая ссылка номенклатура поставщика.
//
Процедура ЗаполнитьРеквизитыНоменклатурыДляФормированияЗаказа(Знач Номенклатура, Результат) Экспорт
	
КонецПроцедуры

// Инициализация динамического списка сопоставления номенклатуры в форме сопоставления номенклатуры.
// Заполняется переопределяемый текст запроса и свойства списка.
// См. форму обработки ТорговыеПредложения.СопоставлениеНоменклатуры.
//
// Параметры:
//  Список - ЭлементФормы - элемент динамического списка в форме.
//
Процедура ИнициализацияСпискаСопоставленияНоменклатуры(Список) Экспорт
	
	Список.ТекстЗапроса =
	"ВЫБРАТЬ
	|	СправочникВидыНоменклатуры.Ссылка КАК Ссылка,
	|	СправочникВидыНоменклатуры.Наименование КАК Наименование,
	|	СоответствиеКатегорий.ПредставлениеКатегории КАК Категория,
	|	СоответствиеКатегорий.ИдентификаторКатегории КАК ИдентификаторКатегории
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК СправочникВидыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеВидовНоменклатуры1СБизнесСеть КАК СоответствиеКатегорий
	|		ПО СправочникВидыНоменклатуры.Ссылка = СоответствиеКатегорий.ВидНоменклатуры";
	Список.ОсновнаяТаблица = "Справочник.ВидыНоменклатуры";
	Список.ДинамическоеСчитываниеДанных = Истина;
	
КонецПроцедуры

// Добавление служебных колонок в таблицу товары.
//
// Параметры:
//  Товары - ТаблицаЗначений - исходная таблица с товарами, колонки:
//    Обязательные поля:
//    * Номенклатура   - СправочникСсылка - номенклатурная позиция.
//    * Характеристика - СправочникСсылка - характеристика номенклатуры.
//    * Упаковка       - СправочникСсылка - упаковка номенклатуры.
//    * Количество     - Число - количество.
//    Заполняемые поля:
//    * УпаковкаКод         - Строка - код упаковки.
//    * ЕдиницаИзмеренияКод - Строка - код единицы измерения.
//    * УпаковкаЧислитель   - Число - числитель упаковки номенклатуры.
//    * УпаковкаЗнаменатель - Число - знаменатель упаковки номенклатуры.
//    * Артикул             - Строка - артикул номенклатуры.
//    * Наименование        - Строка - наименование номенклатуры.
//    * Штрихкоды            - Массив - штрихкоды номенклатуры.
//  ПолучатьШтрихКоды - Булево - признак необходимости заполнения штрихкодов номенклатуры.
//                               Для значения Ложь, штрихкоды не заполняются.
//
Процедура ДобавитьСлужебныеКолонкиТовары(Товары, Знач ПолучатьШтрихКоды = Ложь) Экспорт
	
КонецПроцедуры

// Получение текста запроса соответствия значений реквизитов вида номенклатуры.
// 
// В запросе необходимо вернуть таблицу содержащую количество значений
// реквизита в информационной базе и количество сопоставленных реквизитов.
// Параметры запроса: &РеквизитОбъекта, &ОбъектСопоставления.
// Поля запроса: КоличествоЗначенийРеквизита, КоличествоСопоставленныхРеквизитов.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//
Процедура ПолучитьТекстЗапросаСоответствияЗначенийРеквизитовВидаНоменклатуры(ТекстЗапроса) Экспорт
	
КонецПроцедуры

// Получение сопоставленных значений реквизита вида номенклатуры.
//
// Параметры:
//  ОбъектСопоставления - СправочникСсылка - ссылка на справочник виды номенклатуры.
//  РеквизитОбъекта	    - Строка, СправочникСсылка - реквизит объекта.
//  ТипЗначения	        - ОписаниеТипов - тип значений реквизита.
//  ЗначенияРеквизита   - ТаблицаЗначений - список сопоставленных реквизитов, колонки:
//   * Значение                                - СправочникСсылка, Строка, Число, Булево - сопоставленное значение.
//   * ИдентификаторЗначенияРеквизитаКатегории - Строка - идентификатор сопоставленного значения.
//   * ПредставлениеЗначенияРеквизитаКатегории - Строка - представление сопоставленного значения.
//
Процедура ПолучитьСопоставленныеЗначенияРеквизитаВидаНоменклатуры(Знач ОбъектСопоставления, Знач РеквизитОбъекта, Знач ТипЗначения, ЗначенияРеквизита) Экспорт
	
КонецПроцедуры

// Заполнение реквизитов заказов.
//
// Параметры:
//  ТаблицаЗаказов	 - ТаблицаЗначений - таблица с ссылками и реквизитами для заполнения.
//                     см. ТорговыеПредложения.ФормированиеЗаказов.Заказы.
//
Процедура ЗаполнитьРеквизитыЗаказов(ТаблицаЗаказов) Экспорт
	
	Для Каждого СтрокаЗаказа Из ТаблицаЗаказов Цикл
		Если ТипЗнч(СтрокаЗаказа.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику")
			И ЗначениеЗаполнено(СтрокаЗаказа.Ссылка) Тогда
			РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗаказа.Ссылка, "Контрагент, Организация, СуммаДокумента");
			ЗаполнитьЗначенияСвойств(СтрокаЗаказа, РеквизитыЗаказа);
			ПолучитьВалютуРегламентированногоУчета(СтрокаЗаказа.Валюта);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получение публикуемых реквизитов номенклатуры.
// 
// Параметры:
//  ПубликуемыеРеквизиты - Соответствие - реквизиты справочника Номенклатура, публикуемые для торговых предложений.
//    * Ключ     - Произвольный - значение реквизита сопоставления, см. определяемый тип ДополнительныеРеквизитыБизнесСеть.
//    * Значение - Структура - свойства реквизита:
//      ** Представление    - Строка - наименование для отображения.
//      ** ПутьКДанным      - Строка - текст запроса для получения данных.
//      ** ТипЗначения      - ОписаниеТипов - описание типа данных.
//      ** ПустоеЗначение   - Произвольный - Значение реквизита, при котором, он считается не заполненным.
//
Процедура ПолучитьРеквизитыНоменклатурыДоступныеДляПубликации(ПубликуемыеРеквизиты) Экспорт
	
КонецПроцедуры

// Процедура, вызываемая из обработчика события формы ПриСозданииНаСервере.
//
// Параметры:
//  Форма - УправляемаяФорма - из обработчика события которой происходит вызов процедуры.
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
КонецПроцедуры

// Обработка выбора формы (переопределяемое события).
// Вызов производится на сервере. См. описание метода ОбработкаВыбора.
//
// Параметры:
//  Форма				 - УправляемаяФорма - форма источник события.
//  ВыбранноеЗначение	 - Произвольный - выбранное событие.
//  ИсточникВыбора		 - Произвольный - форма, где осуществлен выбор.
//
Процедура ОбработатьВыбор(Форма, Знач ВыбранноеЗначение, Знач ИсточникВыбора) Экспорт
	
КонецПроцедуры

// Обработка оповещения формы (переопределяемое событие).
// Вызывается на сервере. См. метод ОбработкаОповещения.
//
// Параметры:
//  ИмяСобытия - Строка - имя оповещения.
//  Параметр   - Произвольный - параметр сообщения.
//  Источник   - УправляемаяФорма - форма источник события.
//
Процедура ОбработатьОповещение(Знач ИмяСобытия, Параметр, Источник) Экспорт
	
КонецПроцедуры

// Получение данных для сопоставления реквизитов и значений реквизитов информационной базы и сервиса.
//
// Параметры:
//  ОбъектСопоставления      - СправочникСсылка - ссылка на справочник виды номенклатуры.
//  СопоставленныеРеквизиты	 - ТаблицаЗначений - сопоставленные реквизиты в ИБ.
//    * РеквизитОбъекта                 - Произвольный - реквизит.
//    * ИдентификаторРеквизитаКатегории - Строка - идентификатор реквизита категории в сервисе.
//    * Представление                   - Строка - представление реквизита.
//  ДополнительныеРеквизиты  - ТаблицаЗначений - дополнительные реквизиты номенклатуры.
//    * РеквизитОбъекта - Произвольный - реквизит.
//    * ТипЗначения     - ОписаниеТипов - тип реквизита.
//  РасчетСоответствий       - ТаблицаЗначений - таблица количества соответствий значений реквизитов.
//    * РеквизитОбъекта                    - Произвольный - реквизит.
//    * КоличествоЗначенийРеквизита        - Число - количество значений реквизита в ИБ.
//    * КоличествоСопоставленныхРеквизитов - Число - количество сопоставленных значений реквизитов.
//
Процедура ПолучитьДанныеСопоставленияРеквизитов(ОбъектСопоставления, СопоставленныеРеквизиты, ДополнительныеРеквизиты, РасчетСоответствий) Экспорт
	
КонецПроцедуры

// Получение свойств торгового предложения.
//
// Параметры:
//  Источник        - СправочникСсылка - источник торгового соглашения, например СправочникСсылка.Соглашения.
//  ЗначенияСвойств - Структура - возвращаемое значение заполнения.
//
Процедура ПолучитьСвойстваТорговогоПредложения(Знач Источник, ЗначенияСвойств) Экспорт
		
КонецПроцедуры

// Получение текста запроса публикуемых товаров.
// 
// В запросе необходимо вернуть данные для публикации товаров.
// См. ТорговыеПредложения.ОписаниеПакетаПредложений таблица Товары.
// Обязательный параметр &ТорговыеПредложения (определяемый тип ТорговыеПредложения).
//
// Параметры:
//   ТекстЗапроса - Строка - формируемый текст запроса.
//   ФормироватьСвойства - Булево - признак добавления подзапроса для получения свойств товаров, штрих-кодов.
//   ИспользоватьПараметры - Булево - признак использования параметров запроса &ТорговоеПредложение, &Период.
//
// Пример:
//   ТорговыеПредложенияПереопределяемый.ТекстЗапросаПубликуемыхТоваров(Ложь) =
//     "ВЫБРАТЬ
//     |  Товары.ВидНоменклатуры,
//     |  Товары.Номенклатура,
//     |  Товары.Характеристика,
//     |  Товары.КатегорияНаименование,
//     |  Товары.Упаковка,
//     |  Товары.СрокаПоставки,
//     |  Товары.Цена
//     |ИЗ Справочник.ПрайсЛист.Товары КАК Товары
//     |  ГДЕ Товары.Ссылка = &ТорговыеПредложения"
//
Процедура ПолучитьТекстЗапросаПубликуемыхТоваров(ТекстЗапроса, ФормироватьСвойства = Ложь, ИспользоватьПараметры = Ложь) Экспорт
	
КонецПроцедуры

// Заполнение адресов абонента по зарегистрированным организациям и складам.
//
// Параметры:
//  АдресаАбонента - ТаблицаЗначения - таблица для заполнения, см. ТорговыеПредложения.ОписаниеАдресовАбонента().
//
Процедура ЗаполнитьАдресаАбонента(АдресаАбонента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОрганизацииКонтактнаяИнформация.Представление КАК Представление,
	|	ОрганизацииКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	|	ОрганизацииКонтактнаяИнформация.Вид КАК Вид,
	|	ОрганизацииКонтактнаяИнформация.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|		ПО (ОрганизацииКонтактнаяИнформация.Ссылка = ОрганизацииБизнесСеть.Организация)
	|ГДЕ
	|	ОрганизацииКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ПустаяСтрока(Выборка.Представление) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаАдреса = АдресаАбонента.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаАдреса, Выборка);
		СтрокаАдреса.Описание = СтрШаблон("%1 (%2)", Выборка.Вид, Выборка.Ссылка);
	КонецЦикла;
	
	АдресаАбонента.Сортировать("Представление");
	
КонецПроцедуры

// Получение способов доставки для заполнения по умолчанию значений при формировании заказов.
//
// Параметры:
//  СпособыДоставки - СписокЗначений - возможные значения способа доставки.
//                                     Первое значение является значением по умолчанию.
//  ВидДоставки	- Строка - значение вида доставки, варианты "Самовывоз", "Доставка".
//
Процедура ПолучитьСпособыДоставки(СпособыДоставки, ВидДоставки = Неопределено) Экспорт
	
	СпособыДоставки = Новый СписокЗначений;
	Если ВРег(ВидДоставки) = "САМОВЫВОЗ" Тогда
		СпособыДоставки.Добавить(НСтр("ru = 'Самовывоз'"));
	ИначеЕсли ВРег(ВидДоставки) = "ДОСТАВКА" Тогда 
		СпособыДоставки.Добавить(НСтр("ru = 'Доставка'"));
	Иначе
		СпособыДоставки.Добавить(НСтр("ru = 'Доставка'"));
		СпособыДоставки.Добавить(НСтр("ru = 'Самовывоз'"));
	КонецЕсли;
	
КонецПроцедуры

// Получение имени ставки НДС.
//
// Параметры:
//  Ссылка		 - СправочникСсылка, ПеречислениеСсылка - ссылка на значение ставки НДС прикладного решения.
//  ИмяСтавкиНДС - Строка - идентификатор ставки НДС.
//
Процедура ПолучитьИмяСтавкиНДС(Знач Ссылка, ИмяСтавкиНДС) Экспорт
	
КонецПроцедуры

// Получение значения ставки НДС по идентификатору.
//
// Параметры:
//  ИмяСтавкиНДС - Строка - идентификатор ставки НДС.
//  Ссылка		 - СправочникСсылка, ПеречислениеСсылка - ссылка на значение ставки НДС прикладного решения.
//
Процедура ПолучитьЗначениеСтавкиНДС(Знач ИмяСтавкиНДС, Ссылка) Экспорт
	
КонецПроцедуры

// Инициализация динамического списка сопоставления номенклатуры в форме сопоставления номенклатуры.
// Заполняется переопределяемый текст запроса и свойства списка.
// См. форму обработки ТорговыеПредложения.СопоставлениеНоменклатуры.
//
// Параметры:
//  Список - ЭлементФормы - элемент динамического списка в форме.
//
Процедура ИнициализацияСпискаСопоставленияПоИерархии(Список) Экспорт
	
КонецПроцедуры

// Инициализация динамического списка сопоставления номенклатуры в форме сопоставления номенклатуры.
// Заполняется переопределяемый текст запроса и свойства списка.
// См. форму обработки ТорговыеПредложения.СопоставлениеНоменклатуры.
//
// Параметры:
//  Список - ЭлементФормы - элемент динамического списка в форме.
//
Процедура ИнициализацияСпискаСопоставленияПоНоменклатуре(Список) Экспорт
	
КонецПроцедуры

// Получение доступности функционала запроса цен в прикладном решении.
//
// Параметры:
//  Результат - Булево - признак доступности функционала запроса цен.
//
Процедура ПолучитьДоступностьФункционалаЗапросаЦен(Результат) Экспорт
	Результат = Ложь;
КонецПроцедуры

// Заполнение штрихкодов для выгрузки.
//
// Параметры:
//  Организации	 - Массив - список организация, для которых производится выгрузка.
//  РежимПоставщика - Булево - выгружать только данные по продажам.
//  РежимПокупателя - Булево - выгружать только данные по покупкам.
//  Штрихкоды	 - ТаблицаЗначений - данные по штрихкодам, 
//                 см. ТорговыеПредложения.ОбновитьПодсказкиТорговыеПредложения:
//    * Организация - СправочникСсылка - ссылка на организацию.
//    * Штрихкод - Строка - штрихкод товара.
//    * Наименование - Строка - наименование товара.
//    * РежимПоставщика - Булево - признак использования штрихкода в продажах.
//    * РежимПокупателя - Булево - признак использования штрихкода в закупках.
//
Процедура ЗаполнитьШтрихкодыДляВыгрузки(Знач Организации, Знач РежимПоставщика, Знач РежимПокупателя, Штрихкоды) Экспорт
	
КонецПроцедуры

// Добавление служебных колонок в таблицу товары.
//
// Параметры:
//  Ссылка - ДокументСсылка - ссылка на документ с товарами.
//  ПолучатьШтрихКоды - Булево - признак необходимости заполнения штрихкодов номенклатуры.
//                               Для значения Ложь, штрихкоды не заполняются.
//  Товары - ТаблицаЗначений - таблица с товарами, см. ТорговыеПредложения.ОписаниеТаблицыТоваровДляПоиска().
//
Процедура ПолучитьТоварыДляПодсказокПоСсылке(Знач Ссылка, Знач ПолучатьШтрихКоды, Товары) Экспорт
	
КонецПроцедуры

// Выгружать относительные остатки товаров.
// Определяет возможность выгрузки в конфигурации торговых предложений
// с указанием остатков номенклатуры в значениях "мало-много".
//
// Параметры:
//  Результат - Булево - признак наличия функционала.
//
Процедура ВыгружатьОтносительныеОстаткиТоваров(Результат) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Обработка переопределяемого метода с возвратом результата.
// Необходимо перенести логику клиент-серверного взаимодействия в модули прикладного решения.
//
// Параметры:
//  ИмяМетода				 - Строка - имя переопределяемого метода.
//  ДополнительныеПараметры	 - Структура - передаваемые параметры.
//  Результат				 - Произвольный - возвращаемое значение исполняемого метода.
// 
Процедура УдалитьОбработатьПереопределяемыйМетод(ИмяМетода, ДополнительныеПараметры, Результат) Экспорт
	
КонецПроцедуры

#КонецОбласти
