#Область ПрограммныйИнтерфейс

// Возвращает строку, преобразованную по правилу именования.
//
// Параметры:
//	ПравилоИменования - Строка - Содержит правило именования номенклатуры.
//	ПараметрыПравилаИменования - ДанныеФормыКоллекция,ТаблицаЗначений,Массив - Содержит таблицу параметров правила именования, либо массив структур параметров. 
//	ИмяИсходнойКолонки - Строка - Имя колонки таблицы "Параметры правила именования". Содержит данные, которые необходимо преобразовать по правилу.  
//	ИмяРезультирующейКолонки - Строка - Имя колонки таблицы "Параметры правила именования". Содержит данные, в которые необходимо преобразовать по правилу.
//	УбратьКвадратныеСкобки - Булево - Определяет, надо ли убрать квадратные скобки из результирующей строки.
//
Функция ПреобразоватьСтрокуПоПравилу(ПравилоИменования,ПараметрыПравилаИменования,ИмяИсходнойКолонки,ИмяРезультирующейКолонки,УбратьКвадратныеСкобки = Истина) Экспорт
	
	СтрокаРезультат = "";	
	СтрокаПравило 	= СтрЗаменить(ПравилоИменования,Символы.ПС, "");
	
	Для Каждого Строка из ПараметрыПравилаИменования Цикл
		
		ИндексПараметр = СтрНайти(СтрокаПравило,"[" + Строка[ИмяИсходнойКолонки] + "]");	
		Если ИндексПараметр = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеРезультирующейКолонки = Строка[ИмяРезультирующейКолонки];
		Если Не ЗначениеЗаполнено(ЗначениеРезультирующейКолонки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеРезультирующейКолонки = "Ложь" Тогда
			ЗначениеРезультирующейКолонки = "";
		КонецЕсли;
		
		СтрокаРезультат	  = СтрокаРезультат +  Лев(СтрокаПравило,ИндексПараметр - 1) + ?(УбратьКвадратныеСкобки,"","[") + ЗначениеРезультирующейКолонки + ?(УбратьКвадратныеСкобки,"","]");
		СтрокаПравило = Прав(СтрокаПравило,СтрДлина(СтрокаПравило) - ИндексПараметр - СтрДлина(Строка[ИмяИсходнойКолонки]) - 1);
		
	КонецЦикла;
	
	СтрокаРезультат = СтрокаРезультат + СтрокаПравило;
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат,"  "," ");
	СтрокаРезультат = СокрЛП(СтрокаРезультат);
	Возврат СтрокаРезультат;

КонецФункции

// Возвращает строку недопустимых символов в имени параметра.
// 
Функция ПолучитьНедопустимыеСимволыВИмениПараметра() Экспорт

	НедопустимыеСимволы = ":;!@#$%^&-~`',?{}[]+=*/|\ ()""";
	НедопустимыеСимволы = НедопустимыеСимволы + Символы.Таб;
	Возврат НедопустимыеСимволы;

КонецФункции

// Выполняет замену недопустимых символов в имени параметра.
//
// Параметры:
//  ИмяПараметра - Строка - исходное имя параметра.
//  НаЧтоМенять  - Строка - строка, на которую необходимо заменить недопустимые символы.
//
Функция ЗаменитьНедопустимыеСимволыВИмениПараметра(ИмяПараметра, НаЧтоМенять = " ") Экспорт

	Результат = ИмяПараметра;
	МассивНайденныхНедопустимыхСимволов = НайтиНедопустимыеСимволыВИмениПараметра(Результат);
	Для Каждого НедопустимыйСимвол Из МассивНайденныхНедопустимыхСимволов Цикл
		Результат = СтрЗаменить(Результат, НедопустимыйСимвол, НаЧтоМенять);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Проверяет наличие недопустимых символов в имени параметра.
//
// Параметры:
//  ИмяПараметра  - Строка - имя параметра.
//
Функция НайтиНедопустимыеСимволыВИмениПараметра(ИмяПараметра) Экспорт

	НедопустимыеСимволы = ПолучитьНедопустимыеСимволыВИмениПараметра();
	
	МассивНайденныхНедопустимыхСимволов = Новый Массив;
	
	Для ПозицияСимвола = 1 По СтрДлина(НедопустимыеСимволы) Цикл
		ПроверяемыйСимвол = Сред(НедопустимыеСимволы,ПозицияСимвола,1);
		Если СтрНайти(ИмяПараметра,ПроверяемыйСимвол) <> 0 Тогда
			МассивНайденныхНедопустимыхСимволов.Добавить(ПроверяемыйСимвол);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивНайденныхНедопустимыхСимволов;

КонецФункции

// Обновляет наборы свойств. 
//
// Параметры:
//	ПутьКДанным - Строка - содержит путь к параметру именования.
//	НаборыСвойств - СписокЗначений - содержит наборы свойств дополнительных реквизитов и сведений, по которым формируется дерево конструктора правила именования.
//	ТаблицаДоступныхПараметров - ДанныеФормыКоллекция - таблица, которая содержит параметры, по которым строится правило именования номенклатуры.
//
Процедура ОбновитьНаборыСвойств(ПутьКДанным,НаборыСвойств,ТаблицаДоступныхПараметров) Экспорт
		
	НаборыСвойствТекущегоПараметра = Новый СписокЗначений;
	
	СтрокиТаблицаДоступныхПараметров = ТаблицаДоступныхПараметров.НайтиСтроки(Новый Структура("ПутьКДанным",ПутьКДанным));
	Для Каждого Строка из СтрокиТаблицаДоступныхПараметров Цикл
		НаборСвойств = Строка.НаборСвойств;
		Если ЗначениеЗаполнено(НаборСвойств) Тогда
			Если НаборыСвойствТекущегоПараметра.НайтиПоЗначению(НаборСвойств) = Неопределено Тогда
				НаборыСвойствТекущегоПараметра.Добавить(НаборСвойств);
			КонецЕсли;	
		Иначе
			РаботаСПравиламиИменованияВызовСервера.ЗаполнитьНаборыСвойств(НаборыСвойствТекущегоПараметра);
		КонецЕсли;
	КонецЦикла;	
		
	Если НаборыСвойств.Количество() = 0 Тогда
		НаборыСвойств = НаборыСвойствТекущегоПараметра;
	Иначе
		МассивУдалить = Новый Массив;
		Для Каждого Свойство Из НаборыСвойств Цикл
			Если НаборыСвойствТекущегоПараметра.НайтиПоЗначению(Свойство.Значение) = Неопределено Тогда
				МассивУдалить.Добавить(Свойство);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлементМассива Из МассивУдалить Цикл
			НаборыСвойств.Удалить(ЭлементМассива);
		КонецЦикла;
	КонецЕсли;
	
	НаборыСвойств.СортироватьПоЗначению();
			
КонецПроцедуры

// Возвращает заполненную структуру правила именования и выполняет проверку правила.
//
// Параметры:
//	Правило - Строка - содержит правило именования.
//	НаборыСвойств - СписокЗначений,СправочникТабличнаяЧасть.ПравилаИменованияНоменклатуры.НаборыСвойств - содержит наборы свойств дополнительных реквизитов и сведений, по которым формируется дерево конструктора правила именования.
//	ТаблицаДоступныхПараметров - ДанныеФормыКоллекция - таблица, которая содержит параметры, по которым строится правило именования номенклатуры.
//
Функция ПолучитьСтруктуруПравилаИменования(Правило,НаборыСвойств,ТаблицаДоступныхПараметров) Экспорт
		
	СтруктураПравила = ПолучитьПустуюСтруктуруПравилаИменования(Правило,НаборыСвойств,ТаблицаДоступныхПараметров);
		
	ПроверитьБалансСкобок(СтруктураПравила);
	
	Если СтруктураПравила.ЕстьОшибки Тогда
		Возврат СтруктураПравила;
	КонецЕсли;
	
	ЗаполнитьСтруктуруПравила(СтруктураПравила);	
	
	Если СтруктураПравила.ЕстьОшибки  Тогда
		Возврат СтруктураПравила;			
	КонецЕсли;
		
	Если СтруктураПравила.ПараметрыПравила.Количество() = 0 Тогда
		СтруктураПравила.ЕстьОшибки = Истина;
		СтруктураПравила.ОписаниеОшибок.Добавить(НСтр("ru = 'В правило необходимо добавить хотя бы один параметр;'"));
	Иначе
		РаботаСПравиламиИменованияВызовСервера.ПроверитьСтруктуруПравилаИменованияСервер(СтруктураПравила);	
	КонецЕсли;

	Возврат СтруктураПравила;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет корректность расстановки квадратных скобок в правиле именования номенклатуры.
//
// Параметры:
//	СтуктураПравила - Структура - см. РаботаСПравиламиИменованияКлиентСервер.ПолучитьПустуюСтруктуруПравилаИменования
//
Процедура ПроверитьБалансСкобок(СтруктураПравила)
	
	ОшибкаБалансаРазделителей = Ложь;
	БалансРазделителей = 0;
	ПараметрИменованияСтрокой = "";
	Для Сч = 1 По СтрДлина(СтруктураПравила.Правило) Цикл
		ТекущийСимвол = Сред(СтруктураПравила.Правило,Сч,1);
				
		Если ТекущийСимвол = "[" Тогда
			БалансРазделителей = БалансРазделителей + 1;
			Если ПараметрИменованияСтрокой <> "" и БалансРазделителей = 1 Тогда
				ПроверитьПараметрИменования(ПараметрИменованияСтрокой,СтруктураПравила);
			КонецЕсли;
		    ПараметрИменованияСтрокой = "";
		ИначеЕсли ТекущийСимвол = "]" Тогда
			БалансРазделителей = БалансРазделителей - 1;
			Если ПараметрИменованияСтрокой <> "" и БалансРазделителей = 0 Тогда
				ПроверитьПараметрИменования(ПараметрИменованияСтрокой,СтруктураПравила);
			КонецЕсли;
		    ПараметрИменованияСтрокой = "";
		ИначеЕсли БалансРазделителей = 1 Тогда
			ПараметрИменованияСтрокой = ПараметрИменованияСтрокой + ТекущийСимвол;
		КонецЕсли;
		
		Если БалансРазделителей < 0 Или БалансРазделителей > 1 Тогда
			ОшибкаБалансаРазделителей = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если БалансРазделителей <> 0 Тогда
		ОшибкаБалансаРазделителей = Истина;
	КонецЕсли;
		
	Если ОшибкаБалансаРазделителей Тогда
		
		СтруктураПравила.ЕстьОшибки = Истина;
		СтруктураПравила.ОписаниеОшибок.Добавить(НСтр("ru = 'Некорреткно расставлены квадратные скобки;'"));
		
	КонецЕсли;

КонецПроцедуры

// Проверяет корректность параметра именования.
//
// Параметры:
//	ПараметрИменованияСтрокой - Строка - проверяемый параметр.
//	СтруктураПравила - Структура - см. РаботаСПравиламиИменованияКлиентСервер.ПолучитьПустуюСтруктуруПравилаИменования 
//
Процедура ПроверитьПараметрИменования(ПараметрИменованияСтрокой,СтруктураПравила)
	
	Буквы = "abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя";

	НедопустимыеСимволы = РаботаСПравиламиИменованияКлиентСервер.ПолучитьНедопустимыеСимволыВИмениПараметра();
		
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Неверный путь к данным ""%1"". Путь к данным должен состоять из одного слова, начинаться с буквы и не содержать символов: %2;'"), ПараметрИменованияСтрокой, НедопустимыеСимволы);
	
	Результат = Истина;
		
	ПервыйСимволБуква = СтрНайти(Буквы,НРег(Лев(ПараметрИменованияСтрокой,1)));
	Если ПервыйСимволБуква = 0 Тогда
		Результат = Ложь;
	Иначе
		Для ПозицияСимвола = 1 По СтрДлина(НедопустимыеСимволы) Цикл
			ПроверяемыйСимвол = Сред(НедопустимыеСимволы,ПозицияСимвола,1);
			Если СтрНайти(ПараметрИменованияСтрокой,ПроверяемыйСимвол) <> 0 Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Если Не Результат Тогда
		СтруктураПравила.ЕстьОшибки = Истина;
		СтруктураПравила.ОписаниеОшибок.Добавить(ТекстОшибки);
	КонецЕсли;

КонецПроцедуры

// Формирует структуру правила именования.
//
// Параметры:
//	Правило - Строка - содержит правило именования.
//	НаборыСвойств - СписокЗначений - содержит наборы свойств дополнительных реквизитов и сведений, по которым формируется дерево конструктора правила именования.
//	ТаблицаДоступныхПараметров - ДанныеФормыКоллекция - таблица, которая содержит параметры, по которым строится правило именования номенклатуры.
//
Функция ПолучитьПустуюСтруктуруПравилаИменования(Правило,НаборыСвойств,ТаблицаДоступныхПараметров)
	
	СтруктураПравила = Новый Структура;
	
	СтруктураПравила.Вставить("Правило",					Правило);
	СтруктураПравила.Вставить("ПараметрыПравила"			);
	СтруктураПравила.Вставить("НаборыСвойств",			   	НаборыСвойств);
	СтруктураПравила.Вставить("ЕстьОшибки",					Ложь);
	СтруктураПравила.Вставить("ОписаниеОшибок",				Новый Массив);
	СтруктураПравила.Вставить("ТаблицаДоступныхПараметров",	ТаблицаДоступныхПараметров);
	
	Возврат СтруктураПравила;
	
КонецФункции

// Заполняет структуру параметров.
//
// Параметры:
//	СтуктураПравила - Структура - см. РаботаСПравиламиИменованияКлиент.ПолучитьПустуюСтруктуруПравилаИменования
//
Процедура ЗаполнитьСтруктуруПравила(СтруктураПараметров)
		
	ПравилоСтр = СтруктураПараметров.Правило; 
	
	МассивПараметров = Новый Массив;
	НаборыСвойств 	 = Новый СписокЗначений;
	
	РаботаСПравиламиИменованияВызовСервера.ЗаполнитьНаборыСвойств(НаборыСвойств);

	Пока СтрДлина(ПравилоСтр) > 0 Цикл
		
		ИндексСкобкаОткрывается = СтрНайти(ПравилоСтр,"[");
		ИндексСкобкаЗакрывается = СтрНайти(ПравилоСтр,"]");
		
		Если ИндексСкобкаОткрывается = 0 Или ИндексСкобкаЗакрывается = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПутьКДаннымСтр = Сред(ПравилоСтр,ИндексСкобкаОткрывается + 1,ИндексСкобкаЗакрывается - 1 - ИндексСкобкаОткрывается);
		ПравилоСтр = Прав(ПравилоСтр,СтрДлина(ПравилоСтр) - ИндексСкобкаЗакрывается);
				
		ОбновитьНаборыСвойств(ПутьКДаннымСтр,НаборыСвойств,СтруктураПараметров.ТаблицаДоступныхПараметров);
				
		СтрокиИмяПараметра = СтруктураПараметров.ТаблицаДоступныхПараметров.НайтиСтроки(Новый Структура("ПутьКДанным",ПутьКДаннымСтр));
		Если СтрокиИмяПараметра.Количество() > 0 Тогда
			ПараметрСтр = СтрокиИмяПараметра[0].ИмяПараметра;
			
			СтруктураПараметра = Новый Структура;
			СтруктураПараметра.Вставить("ИмяПараметра",ПараметрСтр);
			СтруктураПараметра.Вставить("ПутьКДанным",ПутьКДаннымСтр);
			
			МассивПараметров.Добавить(СтруктураПараметра);
		Иначе
			СтруктураПараметров.ЕстьОшибки = Истина;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Путь к данным ""%1"" не соответствует ни одному параметру;'"),ПутьКДаннымСтр);
			СтруктураПараметров.ОписаниеОшибок.Добавить(ТекстОшибки);
			ПараметрСтр = "";
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПараметров.НаборыСвойств	 = НаборыСвойств;
	СтруктураПараметров.ПараметрыПравила = МассивПараметров;
							
КонецПроцедуры

#КонецОбласти
