#Область ПрограммныйИнтерфейс

// Возвращает соответствие полей документов-оснований и исходящей транспортной операции
// 
// Возвращаемое значение:
//  Соответствие - соответствие со свойствами:
//  * ИмяДокумента — Соответствие — ключом свойства является имя документа, например "РеализацияТоваровУслуг",
//  	а значением — соответствие со свойствами:
//  ** ГрузоотправительХозяйствующийСубъект — Строка — имя поля документа, которое соответствует контрагенту
//  	хозяйствуюшего субъекта грузоотправителя
//  ** ГрузоотправительПредприятие — Строка — имя поля документа, которое соответствует предприятию грузоотправителя
//  ** ГрузополучательХозяйствующийСубъект — Строка — имя поля документа, которое соответствует контрагенту
//  	хозяйствуюшего субъекта грузополучателя
//  ** ГрузополучательПредприятие — Строка — имя поля документа, которое соответствует предприяютию грузополучателя
//
Функция СоответствиеПолейДокументовОснованийИИсходящейТранспортнойОперации() Экспорт
	
	СоответствиеПолей = Новый Соответствие;
	
	СоответствиеПолей.Вставить("ВозвратТоваровПоставщику", Новый Соответствие);
	СоответствиеПолей["ВозвратТоваровПоставщику"].Вставить("ГрузоотправительХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ВозвратТоваровПоставщику"].Вставить("ГрузоотправительПредприятие", "Магазин");
	СоответствиеПолей["ВозвратТоваровПоставщику"].Вставить("ГрузополучательХозяйствующийСубъект", "Контрагент");
	СоответствиеПолей["ВозвратТоваровПоставщику"].Вставить("ГрузополучательПредприятие", Неопределено);
	
	СоответствиеПолей.Вставить("ПеремещениеТоваров", Новый Соответствие);
	СоответствиеПолей["ПеремещениеТоваров"].Вставить("ГрузоотправительХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ПеремещениеТоваров"].Вставить("ГрузоотправительПредприятие", "МагазинОтправитель");
	СоответствиеПолей["ПеремещениеТоваров"].Вставить("ГрузополучательХозяйствующийСубъект", "ОрганизацияПолучатель");
	СоответствиеПолей["ПеремещениеТоваров"].Вставить("ГрузополучательПредприятие", "МагазинПолучатель");
	
	СоответствиеПолей.Вставить("РеализацияТоваров", Новый Соответствие);
	СоответствиеПолей["РеализацияТоваров"].Вставить("ГрузоотправительХозяйствующийСубъект", "Организация");
	СоответствиеПолей["РеализацияТоваров"].Вставить("ГрузоотправительПредприятие", "Магазин");
	СоответствиеПолей["РеализацияТоваров"].Вставить("ГрузополучательХозяйствующийСубъект", "Контрагент");
	СоответствиеПолей["РеализацияТоваров"].Вставить("ГрузополучательПредприятие", Неопределено);
	
	СоответствиеПолей.Вставить("ПередачаТоваровМеждуОрганизациями", Новый Соответствие);
	СоответствиеПолей["ПередачаТоваровМеждуОрганизациями"].Вставить("ГрузоотправительХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ПередачаТоваровМеждуОрганизациями"].Вставить("ГрузоотправительПредприятие", "Магазин");
	СоответствиеПолей["ПередачаТоваровМеждуОрганизациями"].Вставить("ГрузополучательХозяйствующийСубъект", "ОрганизацияПолучатель");
	СоответствиеПолей["ПередачаТоваровМеждуОрганизациями"].Вставить("ГрузополучательПредприятие", "Магазин");
	
	Возврат СоответствиеПолей;
	
КонецФункции

// Возвращает соответствие полей документов-оснований и входящей транспортной операции
// 
// Возвращаемое значение:
//  Соответствие - соответствие со свойствами:
//  * ИмяДокумента — Соответствие — ключом свойства является имя документа, например "РеализацияТоваровУслуг",
//  	а значением — соответствие со свойствами:
//  ** ГрузоотправительХозяйствующийСубъект — Строка — имя поля документа, которое соответствует контрагенту
//  	хозяйствуюшего субъекта грузоотправителя
//  ** ГрузоотправительПредприятие — Строка — имя поля документа, которое соответствует предприятию грузоотправителя
//  ** ГрузополучательХозяйствующийСубъект — Строка — имя поля документа, которое соответствует контрагенту
//  	хозяйствуюшего субъекта грузополучателя
//  ** ГрузополучательПредприятие — Строка — имя поля документа, которое соответствует предприяютию грузополучателя
//
Функция СоответствиеПолейДокументовОснованийИВходящейТранспортнойОперации() Экспорт
	
	СоответствиеПолей = Новый Соответствие;

	СоответствиеПолей.Вставить("ВозвратТоваровОтПокупателя", Новый Соответствие);
	СоответствиеПолей["ВозвратТоваровОтПокупателя"].Вставить("ГрузоотправительХозяйствующийСубъект", "Контрагент");
	СоответствиеПолей["ВозвратТоваровОтПокупателя"].Вставить("ГрузоотправительПредприятие", Неопределено);
	СоответствиеПолей["ВозвратТоваровОтПокупателя"].Вставить("ГрузополучательХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ВозвратТоваровОтПокупателя"].Вставить("ГрузополучательПредприятие", "Магазин");
	
	СоответствиеПолей.Вставить("ПоступлениеТоваров", Новый Соответствие);
	СоответствиеПолей["ПоступлениеТоваров"].Вставить("ГрузоотправительХозяйствующийСубъект", "Контрагент");
	СоответствиеПолей["ПоступлениеТоваров"].Вставить("ГрузоотправительПредприятие", Неопределено);
	СоответствиеПолей["ПоступлениеТоваров"].Вставить("ГрузополучательХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ПоступлениеТоваров"].Вставить("ГрузополучательПредприятие", "Магазин");
	
	СоответствиеПолей.Вставить("ПеремещениеТоваров", Новый Соответствие);
	СоответствиеПолей["ПеремещениеТоваров"].Вставить("ГрузоотправительХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ПеремещениеТоваров"].Вставить("ГрузоотправительПредприятие", "МагазинОтправитель");
	СоответствиеПолей["ПеремещениеТоваров"].Вставить("ГрузополучательХозяйствующийСубъект", "ОрганизацияПолучатель");
	СоответствиеПолей["ПеремещениеТоваров"].Вставить("ГрузополучательПредприятие", "МагазинПолучатель");
	
	СоответствиеПолей.Вставить("ПередачаТоваровМеждуОрганизациями", Новый Соответствие);
	СоответствиеПолей["ПередачаТоваровМеждуОрганизациями"].Вставить("ГрузоотправительХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ПередачаТоваровМеждуОрганизациями"].Вставить("ГрузоотправительПредприятие", "Магазин");
	СоответствиеПолей["ПередачаТоваровМеждуОрганизациями"].Вставить("ГрузополучательХозяйствующийСубъект", "ОрганизацияПолучатель");
	СоответствиеПолей["ПередачаТоваровМеждуОрганизациями"].Вставить("ГрузополучательПредприятие", "Магазин");
	
	Возврат СоответствиеПолей;
	
КонецФункции

// Возвращает соответствие полей документов-оснований и производственных операций
// 
// Возвращаемое значение:
//  Соответствие - соответствие
Функция СоответствиеПолейДокументовОснованийИПроизводственнойОперации() Экспорт
	
	СоответствиеПолей = Новый Соответствие;
	
	СоответствиеПолей.Вставить("СборкаТоваров", Новый Соответствие);
	СоответствиеПолей["СборкаТоваров"].Вставить("ХозяйствующийСубъект", "Организация");
	СоответствиеПолей["СборкаТоваров"].Вставить("Предприятие", "Магазин");
	
	Возврат СоответствиеПолей;
	
КонецФункции

// Возвращает соответствие полей документов-оснований и инвентаризации продукции
// 
// Возвращаемое значение:
//  Соответствие - соответствие
Функция СоответствиеПолейДокументовОснованийИИнвентаризацииПродукции() Экспорт
	
	СоответствиеПолей = Новый Соответствие;
	
	СоответствиеПолей.Вставить("СписаниеТоваров", Новый Соответствие);
	СоответствиеПолей["СписаниеТоваров"].Вставить("ХозяйствующийСубъект", "Организация");
	СоответствиеПолей["СписаниеТоваров"].Вставить("Предприятие", "Магазин");
	
	СоответствиеПолей.Вставить("ПересортицаТоваров", Новый Соответствие);
	СоответствиеПолей["ПересортицаТоваров"].Вставить("ХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ПересортицаТоваров"].Вставить("Предприятие", "Магазин");
	
	СоответствиеПолей.Вставить("ОприходованиеТоваров", Новый Соответствие);
	СоответствиеПолей["ОприходованиеТоваров"].Вставить("ХозяйствующийСубъект", "Организация");
	СоответствиеПолей["ОприходованиеТоваров"].Вставить("Предприятие", "Магазин");
	
	Возврат СоответствиеПолей;
	
КонецФункции

Функция СвойстваЭлементовПроизводственнойТранзакцииПоДокументуОснованию(ДокументОснование) Экспорт
	
	Результат = Новый Структура("Видимость, Доступность, ТолькоПросмотр", Ложь, Истина, Истина);
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак необходимости заполнения реквизита 'ТорговыйОбъект' документа 'ПроизводственнаяОперацияВЕТИС'.
//
// Параметры:
//	ДокументОснование - ОпределяемыйТип.ТорговыйОбъектВЕТИС - Основание документа.
//
// Возвращаемое значение:
//	Булево, Истина - нужно заполнить реквизит 'ТорговыйОбъект' документа 'ПроизводственнаяОперацияВЕТИС'.
//
Функция ЗаполнитьТорговыйОбъектПоДокументуОснованию(ДокументОснование) Экспорт
	
	
	Возврат Ложь;
	
КонецФункции

// Возвращает структуру, содержащую поля кэшируемых значений.
// 
// Возвращаемое значение:
//  Структура, Неопределено - Состав структуры зависит от конфигурации.
//
Функция ПолучитьСтруктуруКэшируемыеЗначения() Экспорт

	КэшированныеЗначения = Неопределено;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Возврат КэшированныеЗначения;
	
КонецФункции

// Возвращает параметры формы подбора товаров.
//
// Параметры:
//	Форма					- УправляемаяФорма			- Форма, в которой вызывается команда открытия формы подбора товаров.
//	ПараметрыУказанияСерий	- Структура, Неопределено	- Состав полей определен в функции 
//															НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//		* СкрыватьКнопкуЗапрашиватьКоличество		- Булево - Признак необходимости сокрытия кнопки указания количества.
//		* РежимПодбораБезКоличественныхПараметров	- Булево - Признак работы формы подбора товаров с выключенным режимом 
//																использования количественных параметров.
//		* Склад										- ОпределяемыйТип.ТорговыйОбъектВЕТИС - Склад, на котором осуществляется подбор товаров.
//		* ПараметрыУказанияСерий					- ПараметрыУказанияСерий - Состав полей определен в функции 
//																			НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыФормыПодбораТоваров(Форма, ПараметрыУказанияСерий) Экспорт
	
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Пересчитывает количество из базовой единицы измерения номенклатуры в единицу измерения ВетИС.
//
Функция ПересчитатьКоличествоЕдиницВЕТИС(Количество, Номенклатура, ЕдиницаИзмеренияВЕТИС, КэшированныеЗначения, ТекстОшибки = Неопределено) Экспорт

	НовоеКоличествоВЕТИС = Неопределено;
	
	НовоеКоличествоВЕТИС = ИнтеграцияВЕТИСРТКлиентСервер_ПересчитатьКоличествоЕдиницВЕТИС(
										Количество,
										Номенклатура,
										ЕдиницаИзмеренияВЕТИС,
										Истина,
										КэшированныеЗначения,
										ТекстОшибки);
	
	Возврат НовоеКоличествоВЕТИС;
	
КонецФункции

// Пересчитывает количество из единицы измерения ВетИС в базовую единицу измерения номенклатуры.
//
Функция ПересчитатьКоличествоЕдиниц(КоличествоВЕТИС, Номенклатура, ЕдиницаИзмеренияВЕТИС, КэшированныеЗначения, ТекстОшибки = Неопределено) Экспорт
	
	НовоеКоличество = Неопределено;
	
	НовоеКоличество = ИнтеграцияВЕТИСРТКлиентСервер_ПересчитатьКоличествоЕдиниц(
										КоличествоВЕТИС,
										Номенклатура,
										ЕдиницаИзмеренияВЕТИС,
										Истина,
										КэшированныеЗначения,
										ТекстОшибки);
										
	Возврат НовоеКоличество;
	
КонецФункции

// Возвращает параметры оформления серии по данным строки (если использование условного оформления не возможно).
//
//	Параметры:
//		ДанныеСтроки - Структура, ДанныеФормыЭлементКоллекции - данные, в которых содержится информация по оформлению серии.
//
//	Возвращаемое значение:
//		Структура - структура, содержащая поля, на основании которых можно оформить элемент формы.
//			
Функция ПараметрыОформленияСерииПоДаннымСтроки(ДанныеСтроки) Экспорт
	
	
	Возврат Новый Структура;
	
КонецФункции

#КонецОбласти

#Область СлужебнеПроцедурыИФункции

// Перенести в: ИнтеграцияветисКлиентСервер

#КонецОбласти





#Область ИнтеграцияВЕТИСРТКлиентСервер


#Область Прочее

Функция ИнтеграцияВЕТИСРТКлиентСервер_ПересчитатьКоличествоЕдиницВЕТИС(Количество, Номенклатура, ЕдиницаИзмеренияВЕТИС, НужноОкруглять, КэшированныеЗначения, ТекстОшибки = Неопределено) Экспорт
	
	НовоеКоличествоВЕТИС = Неопределено;
	ТекстОшибки = Неопределено;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		ДанныеЕдиницыИзмерения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьКоэффициентЕдиницыИзмеренияВЕТИС(
									ЕдиницаИзмеренияВЕТИС, 
									КэшированныеЗначения,
									Номенклатура);
		
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияВЕТИС) Тогда
			
			Если ДанныеЕдиницыИзмерения.КодОшибки <> 0 Тогда
				
				ТекстОшибки = ТекстОшибкиПересчетаЕдиницыИзмеренияВЕТИС(
										ДанныеЕдиницыИзмерения.КодОшибки,
										Номенклатура, 
										ЕдиницаИзмеренияВЕТИС, 
										ДанныеЕдиницыИзмерения.ТипИзмеряемойВеличины);
				
				Возврат Неопределено;
				
			КонецЕсли;
			
			НовоеКоличествоВЕТИС = Количество / ДанныеЕдиницыИзмерения.Коэффициент;
		
			Если НужноОкруглять
				И ДанныеЕдиницыИзмерения.НужноОкруглятьКоличество Тогда
				
				НовоеКоличествоВЕТИС = Окр(НовоеКоличествоВЕТИС, 0, РежимОкругления.Окр15как20);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат НовоеКоличествоВЕТИС;
	
КонецФункции

Функция ИнтеграцияВЕТИСРТКлиентСервер_ПересчитатьКоличествоЕдиниц(КоличествоВЕТИС, Номенклатура, ЕдиницаИзмеренияВЕТИС, НужноОкруглять, КэшированныеЗначения, ТекстОшибки = Неопределено) Экспорт
	
	НовоеКоличество = Неопределено;
	ТекстОшибки = Неопределено;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		ДанныеЕдиницыИзмерения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьКоэффициентЕдиницыИзмеренияВЕТИС(
									ЕдиницаИзмеренияВЕТИС, 
									КэшированныеЗначения,
									Номенклатура);
		
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияВЕТИС) Тогда
			
			Если ДанныеЕдиницыИзмерения.КодОшибки <> 0 Тогда
				
				ТекстОшибки = ТекстОшибкиПересчетаЕдиницыИзмеренияВЕТИС(
										ДанныеЕдиницыИзмерения.КодОшибки,
										Номенклатура,
										ЕдиницаИзмеренияВЕТИС,
										ДанныеЕдиницыИзмерения.ТипИзмеряемойВеличины,
										"ВЕТИС");
				
				Возврат Неопределено;
				
			КонецЕсли;
			
			НовоеКоличество = КоличествоВЕТИС * ДанныеЕдиницыИзмерения.Коэффициент;
			
			Если НужноОкруглять
				И ДанныеЕдиницыИзмерения.НужноОкруглятьКоличество Тогда
				
				НовоеКоличество = Окр(НовоеКоличество, 0, РежимОкругления.Окр15как20);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат НовоеКоличество;
	
КонецФункции


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ТекстОшибкиПересчетаЕдиницыИзмеренияВЕТИС(КодОшибки, Номенклатура, ЕдиницаИзмеренияВЕТИС, ТипИзмеряемойВеличины, СуффиксКоличества = "")
	
	ПересчетВЕТИС        = СокрЛП(СуффиксКоличества) = "ВЕТИС";
	ТекстЕдиницыХранения = ?(ПересчетВЕТИС, НСтр("ru = 'в единицу хранения'"), НСтр("ru = 'количества (ВетИС)'"));
	
	ШаблонСообщенияНеЗаполненаЕдиницаИзмерения    = НСтр("ru = 'Не удалось выполнить пересчет %ЕдиницаХранения%, т.к. не заполнено поле ""Единица измерения"" в карточке единицы измерения ВетИС ""%ЕдиницаИзмеренияВЕТИС%""'");
	ШаблонСообщенияНеСопоставленыЕдиницыИзмерения = НСтр("ru = 'Не удалось выполнить пересчет %ЕдиницаХранения%. Приведите в соответствие единицу измерения в карточке единицы измерения ВетИС ""%ЕдиницаИзмеренияВЕТИС%"" с единицей хранения номенклатуры ""%Номенклатура%"" или укажите %ТипКоличества% вручную'");
	
	Если КодОшибки = 1 Тогда
		ТекстСообщения = ШаблонСообщенияНеЗаполненаЕдиницаИзмерения;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаХранения%",       ТекстЕдиницыХранения);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмеренияВЕТИС%", Строка(ЕдиницаИзмеренияВЕТИС));
		
	Иначе
		ТекстСообщения = "";
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

#КонецОбласти

#КонецОбласти
