// Универсальные механизмы интеграции ИС (ЕГАИС, ГИСМ, ВЕТИС, ...)

#Область ПрограммныйИнтерфейс

#Область ВЕТИС

// Вызывается при формировании текста гиперссылки ВЕТИС в форме документа-основания.
// В данной процедуре можно переопределить текст гиперссылки ВЕТИС, формируемый механикой ВЕТИС.
// Для переопределения текста гиперссылки необходимо поместить этот текст в параметр ТекстНадписи.
//
Процедура ПриОбновленииПоляИнтеграцииВЕТИСВФормеДокументаОснования(Форма, Объект, ТекстНадписи) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ФормыДокументовОснований

// Получает параметры интеграции с библиотеками ГосИС по входящему объекту
//
Функция ПараметрыИнтеграцииВФормеПоОбъекту(Объект) Экспорт
	
	Результат = ИнтеграцияИС.ПараметрыИнтеграцииВФорме();
	
	Результат.ИмяЭлементаДляРазмещения = ИнтеграцияИС.ИмяЭлементаДляРазмещения();
	ОбъектМетаданных = Объект.Ссылка.Метаданные();
	// Объекты с гиперссылками на ВетИС
	ОбъектыМетаданныхИнтеграцииВЕТИС = ИнтеграцияВЕТИСПереопределяемый.ОбъектыМетаданныхИнтеграции();
	Если ОбъектыМетаданныхИнтеграцииВЕТИС.Найти(ОбъектМетаданных) <> Неопределено Тогда
		Результат.ИменаПодсистем = ИнтеграцияВЕТИСКлиентСервер.ИмяПодсистемы();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Процедура ПриОпределенииИспользованияПодсистемыВФормеДокументаОснования(Форма, Объект, ИмяПодсистемы, Использование) Экспорт
	
	Если ИмяПодсистемы = ИнтеграцияВЕТИСКлиентСервер.ИмяПодсистемы() Тогда
		
		Использование = ИнтеграцияИСРТ_ИспользуетсяИнтеграцияВЕТИСВФормеДокументаОснования(Форма, Объект);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОбновленииПоляИнтеграцииВФормеДокументаОснования(Форма, Объект, ТекстНадписи) Экспорт
	
	ТекстНадписи = ИнтеграцияИСРТ_ТекстНадписиПоляИнтеграцииВЕТИСВФормеДокументаОснования(Форма, Объект);
	
КонецПроцедуры

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
//
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(Форма);
	
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
	Иначе
		МассивПрефиксыЭлементовФормы = Новый Массив;
		МассивПрефиксыЭлементовФормы.Добавить(ПрефиксыЭлементовФормы);
	КонецЕсли;
	
	Для Каждого Префикс Из МассивПрефиксыЭлементовФормы Цикл
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			Префикс + "ВыгрузитьДанныеВТСД",
			"Видимость",
			Ложь);
	КонецЦикла;
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеПечатныхФорм

// Заполняет структуру параметров возможных получателей печатных форм при отправке по электронной почте.
//
// Параметры:
// 		ПараметрыОтправки - Структура - содержит параметры отправки сформированных печатных форм
// 		ДанныеОбъектовПечати - Массив,Соответствие - данные о печатаемых объектах
// 		КоллекцияПечатныхФорм - ТаблицаЗначений - содержит информацию о формируемых печатных формах.
//
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм)  Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ПравоДоступа

// Проверяет наличие права создания котрагента у текущего пользователя.
//
// Возвращаемое значение:
//  Булево - Истина, если есть право создания контрагента, Ложь в обратном случае.
//
Функция ЕстьПравоСозданияКонтрагента() Экспорт
	
	Результат = Ложь;
	
	ОписаниеТипов = Метаданные.ОпределяемыеТипы.КонтрагентГИСМ.Тип;
	Если ОписаниеТипов.Типы().Количество() = 1 Тогда
		МетаданныеТипа = Метаданные.НайтиПоТипу(ОписаниеТипов.Типы()[0]);
		Если МетаданныеТипа <> Неопределено Тогда
			Результат = ПравоДоступа("Добавление", МетаданныеТипа);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Область ИнтеграцияИСРТ

#Область ПрограммныйИнтерфейс

#Область ФормыДокументовОснований

Функция ИнтеграцияИСРТ_ИспользуетсяИнтеграцияВЕТИСВФормеДокументаОснования(Форма, Объект) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ Метаданные.ОпределяемыеТипы.ОснованиеСтатусыОформленияДокументовВЕТИС.Тип.СодержитТип(ТипЗнч(Объект.Ссылка)) Тогда
		
		УточнениеОшибки = НСтр("ru='Тип документа не входит в состав определяемого типа ""ОснованиеСтатусыОформленияДокументовВЕТИС""'");
		
		ВызватьИсключение ОбщегоНазначенияКлиентСервер.СообщитьПользователю(УточнениеОшибки); // Тип документа не входит в состав определяемого типа
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ИнтеграцияИСРТ_ТекстНадписиПоляИнтеграцииВЕТИСВФормеДокументаОснования(Форма, Объект) Экспорт
	
	ТекстНадписи = "";
	ДокументОснование = Объект.Ссылка;
	
	// Получим структуру вида ИмяДокументаВЕТИС - Статус
	СтатусыОформления = РегистрыСведений.СтатусыОформленияДокументовВЕТИС.СтатусыДокументовВЕТИСПоДокументуОснованию(ДокументОснование);
	
	Если НЕ ЗначениеЗаполнено(СтатусыОформления) Тогда
		Возврат ТекстНадписи;
	КонецЕсли;
		
	// Получим структуру вида ИмяДокументаВЕТИС - Массив(ДокументыВЕТИСДанногоВида)
	ДокументыВЕТИС = ИнтеграцияВЕТИСВызовСервера.ДокументыВЕТИСПоДокументуОснованию(ДокументОснование);
	
	ТекстыНадписиПоДокументам = Новый Массив;
	
	Для Каждого КлючИЗначение Из СтатусыОформления Цикл
		
		МетаданныеДокументаВЕТИС = Метаданные.Документы[КлючИЗначение.Ключ];
		
		Если ИнтеграцияВЕТИС.РеквизитДокументОснованиеДокументаВЕТИС(МетаданныеДокументаВЕТИС).Тип.СодержитТип(ТипЗнч(ДокументОснование)) Тогда
			
			// Получим структуру с ключами "Представление, МассивДокументов, СтатусОформления, МетаданныеДокумента"
			Описание = ОписаниеОформленныхДокументовВЕТИС(МетаданныеДокументаВЕТИС, ДокументОснование, ДокументыВЕТИС, СтатусыОформления);
			
			Если Описание = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекстыНадписиПоДокументам.Количество() > 0 Тогда
				ТекстыНадписиПоДокументам.Добавить(", ");
			КонецЕсли;
			
			ТекстыНадписиПоДокументам.Добавить(Описание.ТекстНадписи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстНадписи = Новый ФорматированнаяСтрока(ТекстыНадписиПоДокументам);
	
	Возврат ТекстНадписи;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормыДокументовОснований

Функция ШаблонПредставленияДокументаВЕТИСДляПоляИнтеграции(МетаданныеДокументаВЕТИС, ДокументОснование)
	
	Шаблон = ИнтеграцияВЕТИС.ШаблонПредставленияДокументаВЕТИСДляПоляИнтеграции(
		МетаданныеДокументаВЕТИС,
		ДокументОснование);
	
	Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
		
		Если Метаданные.ОпределяемыеТипы.ОснованиеИсходящаяТранспортнаяОперацияВЕТИС.Тип.СодержитТип(ТипЗнч(ДокументОснование)) Тогда
			
			// Если документ-основание относится и к входящей и к исходящей операции ВЕТИС,
			// то входящая операция не формируется вручную, а будет получена по обмену.
			
			Шаблон.ИмяКомандыСоздать 		   = Неопределено;
			Шаблон.ПредставлениеКомандыСоздать = Шаблон.ДокументНеПолучен;
			Шаблон.ДокументНеСоздан 		   = Шаблон.ДокументНеПолучен;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Шаблон;
	
КонецФункции

Функция ОписаниеОформленныхДокументовВЕТИС(МетаданныеДокументаВЕТИС, ДокументОснование, ДокументыПоОснованию, СтатусыОформления)
	
	ПравоЧтения     = ПравоДоступа("Чтение",     МетаданныеДокументаВЕТИС);
	ПравоДобавления = ПравоДоступа("Добавление", МетаданныеДокументаВЕТИС)
		И МетаданныеДокументаВЕТИС <> Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС;
	
	Если НЕ ПравоЧтения Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивДокументов 				  = ДокументыПоОснованию[МетаданныеДокументаВЕТИС.Имя];
	ШаблонПредставленияДокументаВЕТИС = ШаблонПредставленияДокументаВЕТИСДляПоляИнтеграции(МетаданныеДокументаВЕТИС, ДокументОснование);
	
	Если СтатусыОформления.Свойство(МетаданныеДокументаВЕТИС.Имя) Тогда
		СтатусОформления = СтатусыОформления[МетаданныеДокументаВЕТИС.Имя];
	Иначе
		СтатусОформления = Перечисления.СтатусыОформленияДокументовВЕТИС.ПустаяСсылка();
	КонецЕсли;
	
	ИмяКоманды   = Неопределено;
	ТекстНадписи = Неопределено;
	
	Если МассивДокументов.Количество() > 0 Тогда
		
		Если МассивДокументов.Количество() = 1 Тогда
			
			Если СтатусОформления = Перечисления.СтатусыОформленияДокументовВЕТИС.ОформленоЧастично
			 ИЛИ СтатусОформления = Перечисления.СтатусыОформленияДокументовВЕТИС.НеОформлено Тогда
				ИмяКоманды = ШаблонПредставленияДокументаВЕТИС.ИмяКомандыОткрытьПротоколОбмена;
			Иначе
				ИмяКоманды = ШаблонПредставленияДокументаВЕТИС.ИмяКомандыОткрыть;
			КонецЕсли;
			
			Статус = МассивДокументов[0].Статус;
			
			ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонПредставленияДокументаВЕТИС.ПредставлениеДокумента,
				Статус);
				
			НуженРазделительВТексте = ЗначениеЗаполнено(Статус);
			
		Иначе
			
			ИмяКоманды   = ШаблонПредставленияДокументаВЕТИС.ИмяКомандыОткрытьПротоколОбмена;
			ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонПредставленияДокументаВЕТИС.ПредставлениеНесколькихДокументов,
				СокрЛП(МассивДокументов.Количество()));
			
			НуженРазделительВТексте = Истина;
			
		КонецЕсли;
		
		Если СтатусОформления <> Перечисления.СтатусыОформленияДокументовВЕТИС.Оформлено Тогда
			ТекстНадписи = ТекстНадписи + ?(НуженРазделительВТексте, ", ", "") + СокрЛП(СтатусОформления);
		КонецЕсли;
		
	Иначе
		
		Если СтатусОформления <> Перечисления.СтатусыОформленияДокументовВЕТИС.Оформлено Тогда
			
			Если ПравоДобавления Тогда
				ТекстНадписи = ШаблонПредставленияДокументаВЕТИС.ПредставлениеКомандыСоздать;
				ИмяКоманды   = ШаблонПредставленияДокументаВЕТИС.ИмяКомандыСоздать;
			Иначе
				ТекстНадписи = ШаблонПредставленияДокументаВЕТИС.ДокументНеСоздан;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстНадписи) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФорматированныйТекстНадписи = Новый ФорматированнаяСтрока(
		ТекстНадписи,
		,
		?(ЗначениеЗаполнено(ИмяКоманды), ЦветаСтиля.ГиперссылкаЦвет, Неопределено),
		,
		ИмяКоманды);
	
	Описание = Новый Структура;
	Описание.Вставить("ТекстНадписи",        ФорматированныйТекстНадписи);
	Описание.Вставить("СтатусОформления",    СтатусОформления);
	Описание.Вставить("МассивДокументов",    МассивДокументов);
	Описание.Вставить("МетаданныеДокумента", МетаданныеДокументаВЕТИС);
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#КонецОбласти

// см ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании.
//
Процедура ПроверитьВозможностьВводаНаОсновании(Документ,
	                                           Статус = Неопределено,
	                                           ЕстьОшибкиПроведен = Ложь,
	                                           ЕстьОшибкиСтатус = Ложь,
	                                           МассивДопустимыхСтатусов = Неопределено,
	                                           СоглашениеДоступноВнешнемуПользователю = Неопределено) Экспорт
	
	ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(Документ);
	
КонецПроцедуры


#КонецОбласти
