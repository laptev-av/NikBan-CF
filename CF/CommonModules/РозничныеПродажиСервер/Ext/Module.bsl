#Область ПрограммныйИнтерфейс

#Область ФункцииСводногоОтчета 

// Функция заполнения документа СводныйОтчетПоКассовойСмене.
//
Функция ПолучитьОтчетыОРозничныхПродажахДляСводногоОтчета(СтруктураПараметров) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтчетККМ.Ссылка КАК ОтчетОРозничныхПродажах,
	|	ОтчетККМ.КассаККМ.Владелец КАК Организация
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетККМ
	|ГДЕ
	|	ОтчетККМ.Проведен
	|	И ОтчетККМ.Магазин = &Магазин
	|	И &ОтчетККМУсловиеОрганизация
	|	И ОтчетККМ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И (НЕ ОтчетККМ.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах
	|				ИЗ
	|					Документ.СводныйОтчетПоКассовойСмене.ОтчетыОРозничныхПродажах КАК СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах
	|				ГДЕ
	|					СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.Ссылка.Проведен
	|					И СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.Ссылка <> &ЭтотСводныйОтчетПоКассовойСмене
	|					И СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Магазин = &Магазин
	|					И СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|					И &СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажахУсловиеОрганизация))
	|ИТОГИ ПО
	|	Организация,
	|	ОтчетОРозничныхПродажах";
	
	Запрос.УстановитьПараметр("Магазин", СтруктураПараметров.Магазин);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(СтруктураПараметров.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(СтруктураПараметров.Дата));
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтчетККМУсловиеОрганизация", "ОтчетККМ.Организация = &Организация");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажахУсловиеОрганизация", "СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Организация = &Организация");
		
		Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтчетККМУсловиеОрганизация", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажахУсловиеОрганизация", "ИСТИНА");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЭтотСводныйОтчетПоКассовойСмене", СтруктураПараметров.ДокументСсылка);
	
	ДеревоОтчетов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ДеревоОтчетов;

КонецФункции

// Процедура проверки заполнения документа СводныйОтчетПоКассовойСмене.
//
Процедура ПроверитьСводныйОтчет(ДокументОбъект, ИмяТабличнойЧасти, Отказ) Экспорт
	
	ЗапросПоТабличнойЧасти = Новый Запрос;
	ЗапросПоТабличнойЧасти.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах КАК Документ.ОтчетОРозничныхПродажах) КАК ОтчетОРозничныхПродажах
	|ПОМЕСТИТЬ ТаблицаОтчетовРозничныхПродаж
	|ИЗ
	|	&ОтчетыОРозничныхПродажах КАК СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.НомерСтроки) КАК НомерСтроки,
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах
	|ПОМЕСТИТЬ ТаблицаОтчетовРозничныхПродажСвернутоПоОтчетам
	|ИЗ
	|	ТаблицаОтчетовРозничныхПродаж КАК СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах
	|
	|СГРУППИРОВАТЬ ПО
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
	|	КОЛИЧЕСТВО(СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах) КАК КоличествоДокументов
	|ПОМЕСТИТЬ ТаблицаКоличестваОтчетов
	|ИЗ
	|	ТаблицаОтчетовРозничныхПродаж КАК СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах
	|
	|СГРУППИРОВАТЬ ПО
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКоличестваОтчетов.ОтчетОРозничныхПродажах,
	|	ТаблицаКоличестваОтчетов.ОтчетОРозничныхПродажах.Представление КАК ПредставлениеДокумента,
	|	ТаблицаКоличестваОтчетов.КоличествоДокументов,
	|	ТаблицаОтчетовРозничныхПродажСвернутоПоОтчетам.НомерСтроки
	|ИЗ
	|	ТаблицаКоличестваОтчетов КАК ТаблицаКоличестваОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтчетовРозничныхПродажСвернутоПоОтчетам КАК ТаблицаОтчетовРозничныхПродажСвернутоПоОтчетам
	|		ПО ТаблицаКоличестваОтчетов.ОтчетОРозничныхПродажах = ТаблицаОтчетовРозничныхПродажСвернутоПоОтчетам.ОтчетОРозничныхПродажах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Представление КАК ПредставлениеДокумента,
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Проведен КАК Проведен,
	|	ВложенныйЗапрос.Ссылка.Представление КАК ПредставлениеПроведенногоСводногоОтчета,
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаОтчетовРозничныхПродаж КАК СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах2.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
	|			СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах2.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.СводныйОтчетПоКассовойСмене.ОтчетыОРозничныхПродажах КАК СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах2
	|		ГДЕ
	|			СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах2.Ссылка <> &ДокументСсылка
	|			И СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах2.Ссылка.Проведен) КАК ВложенныйЗапрос
	|		ПО СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах = ВложенныйЗапрос.ОтчетОРозничныхПродажах
	|ИТОГИ ПО
	|	ОтчетОРозничныхПродажах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Представление КАК ПредставлениеДокумента,
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Проведен КАК Проведен,
	|	СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаОтчетовРозничныхПродаж КАК СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах
	|ГДЕ
	|	(НЕ СводныйОтчетПоКассовойСменеОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах.Проведен)";
	
	ЗапросПоТабличнойЧасти.УстановитьПараметр("ДокументСсылка"          , ДокументОбъект.Ссылка);
	ЗапросПоТабличнойЧасти.УстановитьПараметр("ОтчетыОРозничныхПродажах", ДокументОбъект[ИмяТабличнойЧасти].Выгрузить());
	
	РезультатПакетногоВыполненияЗапроса = ЗапросПоТабличнойЧасти.ВыполнитьПакет();
	
	ВыборкаПоКоличествуДокументов = РезультатПакетногоВыполненияЗапроса[3].Выбрать();
	Пока ВыборкаПоКоличествуДокументов.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 встречается в табличной части %2 раз(а)! Повторения документов быть не должно!'"),
			ВыборкаПоКоличествуДокументов.ПредставлениеДокумента,
			Строка(ВыборкаПоКоличествуДокументов.КоличествоДокументов)
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			ИмяТабличнойЧасти+"[" + (ВыборкаПоКоличествуДокументов.НомерСтроки - 1) + "].ОтчетОРозничныхПродажах" ,
			,
			Отказ
		);
		
	КонецЦикла;
	
	ВыборкаПоТабличнойЧасти = РезультатПакетногоВыполненияЗапроса[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоТабличнойЧасти.Следующий() Цикл
		
		ВыборкаПоСводнымОтчетам = ВыборкаПоТабличнойЧасти.Выбрать();
		
		Пока ВыборкаПоСводнымОтчетам.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаПоСводнымОтчетам.ПредставлениеПроведенногоСводногоОтчета) Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 уже включен в %2.'"),
					ВыборкаПоСводнымОтчетам.ПредставлениеДокумента,
					ВыборкаПоСводнымОтчетам.ПредставлениеПроведенногоСводногоОтчета
				);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					ИмяТабличнойЧасти+"[" + (ВыборкаПоСводнымОтчетам.НомерСтроки - 1) + "].ОтчетОРозничныхПродажах" ,
					,
					Отказ
				);
				
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ВыборкаПоТабличнойЧасти = РезультатПакетногоВыполненияЗапроса[5].Выбрать();
	
	Пока ВыборкаПоТабличнойЧасти.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 не проведен! В табличной части не должно быть непроведенных документов!'"),
			ВыборкаПоТабличнойЧасти.ПредставлениеДокумента
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			ИмяТабличнойЧасти+"[" + (ВыборкаПоТабличнойЧасти.НомерСтроки - 1) + "].ОтчетОРозничныхПродажах" ,
			,
			Отказ
		);
		
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти

#Область ФункцииПроверкиСостоянияКассовойСмены

// Функция получает открытую кассовую смену по Кассе ККМ в заданный период.
// Используется для контроля пересечения кассовых смен.
// За один период может одновременно существовать только одна кассовая смена.
//
Функция ПолучитьОткрытуюКассовуюСмену(КассаККМ, КассоваяСмена, НачалоКассовойСмены, ОкончаниеКассовойСмены) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.НачалоКассовойСмены <= &НачалоКассовойСмены
	|	И ВЫБОР
	|			КОГДА КассоваяСмена.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены >= &НачалоКассовойСмены
	|		КОНЕЦ
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|	И КассоваяСмена.Ссылка <> &КассоваяСмена
	|	И КассоваяСмена.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	&ОкончаниеКассовойСмены <> ДАТАВРЕМЯ(1, 1, 1)
	|	И КассоваяСмена.НачалоКассовойСмены <= &ОкончаниеКассовойСмены
	|	И ВЫБОР
	|			КОГДА КассоваяСмена.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены >= &ОкончаниеКассовойСмены
	|		КОНЕЦ
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|	И КассоваяСмена.Ссылка <> &КассоваяСмена
	|	И КассоваяСмена.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	&ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|	И КассоваяСмена.НачалоКассовойСмены >= &НачалоКассовойСмены
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|	И КассоваяСмена.Ссылка <> &КассоваяСмена
	|	И КассоваяСмена.Проведен";
	
	Запрос.УстановитьПараметр("КассаККМ",               КассаККМ);
	Запрос.УстановитьПараметр("НачалоКассовойСмены",    НачалоКассовойСмены);
	Запрос.УстановитьПараметр("ОкончаниеКассовойСмены", ОкончаниеКассовойСмены);
	Запрос.УстановитьПараметр("КассоваяСмена",          КассоваяСмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция возвращает пустую структуру состояния кассовой смены.
//
Функция ПолучитьСтруктуруОписанияКассовойСмены()
	
	СостояниеКассовойСмены = Новый Структура;
	СостояниеКассовойСмены.Вставить("ДатаИзмененияСтатуса");
	СостояниеКассовойСмены.Вставить("СтатусКассовойСмены");
	СостояниеКассовойСмены.Вставить("КассоваяСмена");
	СостояниеКассовойСмены.Вставить("НаличностьВКассе");
	СостояниеКассовойСмены.Вставить("НомерКассовойСмены");
	СостояниеКассовойСмены.Вставить("СменаОткрыта", Ложь);
	
	// Описание реквизитов кассовой смены.
	СостояниеКассовойСмены.Вставить("КассаККМ");
	СостояниеКассовойСмены.Вставить("Организация");
	СостояниеКассовойСмены.Вставить("Кассир");
	СостояниеКассовойСмены.Вставить("Магазин");
	
	Возврат СостояниеКассовойСмены;
	
КонецФункции

// Функция возвращает структуру, характеризующую состояние последней кассовой смены по кассе ККМ.
//
Функция ПолучитьСостояниеКассовойСмены(КассаККМ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КассоваяСмена.Номер КАК НомерКассовойСмены,
	|	КассоваяСмена.Ссылка КАК КассоваяСмена,
	|	КассоваяСмена.Статус КАК СтатусКассовойСмены,
	|	КассоваяСмена.КассаККМ КАК КассаККМ,
	|	КассоваяСмена.Организация КАК Организация,
	|	КассоваяСмена.Магазин КАК Магазин,
	|	КассоваяСмена.Кассир КАК Кассир,
	|	ВЫБОР
	|		КОГДА КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СменаОткрыта,
	|	ВЫБОР
	|		КОГДА КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА КассоваяСмена.НачалоКассовойСмены
	|		ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|	КОНЕЦ КАК ДатаИзмененияСтатуса,
	|	ЕСТЬNULL(ДенежныеСредстваККМОстатки.СуммаОстаток, 0) КАК НаличностьВКассе
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваККМ.Остатки(
	|				,
	|				КассаККМ = &КассаККМ
	|					И ДоговорПлатежногоАгента = &ПустойДоговорПлатежногоАгента) КАК ДенежныеСредстваККМОстатки
	|		ПО КассоваяСмена.КассаККМ = ДенежныеСредстваККМОстатки.КассаККМ
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассоваяСмена.Дата УБЫВ,
	|	КассоваяСмена УБЫВ";
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Запрос.УстановитьПараметр("ПустойДоговорПлатежногоАгента", Справочники.ДоговорыПлатежныхАгентов.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОписаниеКассовойСмены = ПолучитьСтруктуруОписанияКассовойСмены();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеКассовойСмены, Выборка);
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ДенежныеСредстваККМОстатки.СуммаОстаток, 0) КАК НаличностьВКассе
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваККМ.Остатки(
		|				,
		|				КассаККМ = &КассаККМ
		|					И ДоговорПлатежногоАгента = &ПустойДоговорПлатежногоАгента) КАК ДенежныеСредстваККМОстатки
		|		ПО (ДенежныеСредстваККМОстатки.КассаККМ = КассыККМ.Ссылка)
		|ГДЕ
		|	КассыККМ.Ссылка = &КассаККМ";
		
		Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
		Запрос.УстановитьПараметр("ПустойДоговорПлатежногоАгента", Справочники.ДоговорыПлатежныхАгентов.ПустаяСсылка());
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ОписаниеКассовойСмены.НаличностьВКассе    = Выборка.НаличностьВКассе;
		
	КонецЕсли;
	
	Возврат ОписаниеКассовойСмены;
	
КонецФункции

// Функция выполняет открытие кассовой смены.
//
Функция ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки = "", ТекстПереходящегоОстатка = "") Экспорт
	
	Результат = Истина;
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	ДатаОткрытияКассовойСмены = ТекущаяДатаСеанса();
	
	ТекстПереходящегоОстатка = "";
	Если СтруктураСостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		
		// Если смена открыта, то с момента открытия должно пройти не больше чем 24 часа.
		Если ДатаОткрытияКассовойСмены - СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса < 86400 Тогда
			
			// Все в порядке
			
		Иначе
			
			Результат = Ложь;
			// Вероятно, что смена была не закрыта.
			ОписаниеОшибки = НСтр("ru = 'С момента открытия кассовой смены истекло более 24 часов.'");
			
		КонецЕсли;
		
	Иначе
		
		// Смена закрыта. Откроем новую кассовую смену.
		
		НоваяКассоваяСмена = Документы.КассоваяСмена.СоздатьДокумент();
		РеквизитыКассыККМ = Справочники.КассыККМ.РеквизитыКассыККМ(КассаККМ);
		ЗаполнитьЗначенияСвойств(НоваяКассоваяСмена, РеквизитыКассыККМ);
		
		НоваяКассоваяСмена.Дата                   = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.Статус    = Перечисления.СтатусыКассовойСмены.Открыта;
		НоваяКассоваяСмена.НачалоКассовойСмены    = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.ОкончаниеКассовойСмены = '00010101';
		НоваяКассоваяСмена.Кассир                 = Пользователи.ТекущийПользователь();
		
		Если НоваяКассоваяСмена.ПроверитьЗаполнение() Тогда
			НоваяКассоваяСмена.Записать(РежимЗаписиДокумента.Проведение);
			
			СуммаОстатка = РозничныеПродажиСервер.СуммаОстаткаДСПоКассеККМ(КассаККМ);
			Если СуммаОстатка <> 0 Тогда
				ТекстПереходящегоОстатка = НСтр("ru = 'Сумма остатка в кассе: %1 руб.'");
				ТекстПереходящегоОстатка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПереходящегоОстатка, 
																						 Формат(СуммаОстатка, "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0"));
			КонецЕсли;
		Иначе
			Результат = Ложь;
			ОписаниеОшибки = НСтр("ru = 'Проверьте настройки кассы ККМ.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура выполняет закрытие кассовой смены.
//
Функция ЗакрытьКассовуюСмену(КассаККМ, ОписаниеОшибки = "", СсылкаНаОтчет = Неопределено) Экспорт
	
	Результат = Истина;
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	Если СтруктураСостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		
		КассоваяСменаОбъект = СтруктураСостояниеКассовойСмены.КассоваяСмена.ПолучитьОбъект();
		КассоваяСменаОбъект.Дата                   = ТекущаяДатаСеанса();
		КассоваяСменаОбъект.Статус    = Перечисления.СтатусыКассовойСмены.Закрыта;
		КассоваяСменаОбъект.ОкончаниеКассовойСмены = КассоваяСменаОбъект.Дата;
		
		Попытка
			КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Если НЕ СсылкаНаОтчет = Неопределено Тогда
				
				ОбъектОтчет = СсылкаНаОтчет.ПолучитьОбъект();
				ОбъектОтчет.КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
				ОбъектОтчет.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Исключение
			
			Результат = Ложь;
			
			ОписаниеОшибки = НСтр("ru = 'При закрытии кассовой смены произошла ошибка.
			                            |Дополнительное описание:
			                            |%ДополнительноеОписание%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
			
		КонецПопытки;
		
	Иначе
		
		// Смена не открыта.
		Попытка
			Если НЕ СсылкаНаОтчет = Неопределено Тогда
				ОбъектОтчет = СсылкаНаОтчет.ПолучитьОбъект();
				ОбъектОтчет.КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
				ОбъектОтчет.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Исключение
			
			Результат = Ложь;
			
			ОписаниеОшибки = НСтр("ru = 'При закрытии кассовой смены произошла ошибка.
			                            |Дополнительное описание:
			                            |%ДополнительноеОписание%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция проверяет состояние кассовой смены на дату. Если смена не открыта - возвращается описание ошибки.
//
Функция СменаОткрыта(КассоваяСмена, Дата, ОписаниеОшибки = "") Экспорт
	
	СменаОткрыта = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КассоваяСмена.Статус    КАК СтатусКассовойСмены,
	|	КассоваяСмена.НачалоКассовойСмены    КАК НачалоКассовойСмены,
	|	КассоваяСмена.ОкончаниеКассовойСмены КАК ОкончаниеКассовойСмены
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И КассоваяСмена.Ссылка = &КассоваяСмена";
	
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
			
			// Если смена открыта, то с момента открытия должно пройти не больше чем 24 часа.
			Если Дата - Выборка.НачалоКассовойСмены < 86400 Тогда
				
				СменаОткрыта = Истина;
				
			Иначе
				
				ОписаниеОшибки = НСтр("ru = 'С момента открытия кассовой смены истекло более 24 часов.'");
				СменаОткрыта = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.СтатусКассовойСмены) Тогда
			
			Если Выборка.ОкончаниеКассовойСмены >= Дата И Выборка.НачалоКассовойСмены <= Дата Тогда
				
				СменаОткрыта = Истина;
				
			Иначе
				
				ОписаниеОшибки = НСтр("ru = 'Кассовая смена закрыта.'");
				СменаОткрыта = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ОписаниеОшибки = НСтр("ru = 'Кассовая смена не открыта.'");
		СменаОткрыта = Ложь;
		
	КонецЕсли;
	
	Возврат СменаОткрыта;
	
КонецФункции

// Функция возвращает текущую сумму положительного остатка денежных средств (ДС) по кассе ККМ.
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ
// Возвращаемое значение:
//  Число
//
Функция СуммаОстаткаДСПоКассеККМ(КассаККМ, ДоговорПлатежногоАгента = Неопределено) Экспорт

	ЗапросОстатокДСвКассе= Новый Запрос();
	ЗапросОстатокДСвКассе.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваККМОстатки.СуммаОстаток КАК СуммаОстатка
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваККМ.Остатки(
	|			,
	|			КассаККМ = &КассаККМ
	|				И ДоговорПлатежногоАгента = &ДоговорПлатежногоАгента) КАК ДенежныеСредстваККМОстатки
	|ГДЕ
	|	ДенежныеСредстваККМОстатки.СуммаОстаток > 0";
	ЗапросОстатокДСвКассе.УстановитьПараметр("КассаККМ", КассаККМ);
	Если ДоговорПлатежногоАгента = Неопределено Тогда
		ЗапросОстатокДСвКассе.УстановитьПараметр("ДоговорПлатежногоАгента", Справочники.ДоговорыПлатежныхАгентов.ПустаяСсылка());
	Иначе
		ЗапросОстатокДСвКассе.УстановитьПараметр("ДоговорПлатежногоАгента", ДоговорПлатежногоАгента);
	КонецЕсли;
	ВыборкаОстатокДСвКассе = ЗапросОстатокДСвКассе.Выполнить().Выбрать();
	Если ВыборкаОстатокДСвКассе.Следующий() Тогда
		СуммаОстатка = ВыборкаОстатокДСвКассе.СуммаОстатка;
	Иначе
		СуммаОстатка = 0;
	КонецЕсли;
	
	Возврат СуммаОстатка;
КонецФункции // СуммаОстаткаДСПоКассеККМ()

// Функция возвращает структуру агентских договоров,
// по которым числятся суммы положительного остатка денежных средств (ДС) по кассе ККМ
// в разрезе агентских договоров.
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ
// Возвращаемое значение:
//  Число
//
Функция МассивАгентскихДоговоровВКассеККМ(КассаККМ) Экспорт

	ЗапросОстатокДСвКассе= Новый Запрос();
	ЗапросОстатокДСвКассе.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваККМОстатки.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваККМ.Остатки(
	|			,
	|			КассаККМ = &КассаККМ
	|				И ДоговорПлатежногоАгента <> &ПустойДоговор) КАК ДенежныеСредстваККМОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредстваККМОстатки.ДоговорПлатежногоАгента
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДенежныеСредстваККМОстатки.СуммаОстаток) > 0";
	ЗапросОстатокДСвКассе.УстановитьПараметр("КассаККМ", КассаККМ);
	ЗапросОстатокДСвКассе.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыПлатежныхАгентов.ПустаяСсылка());
	ВыборкаОстатокДСвКассе = ЗапросОстатокДСвКассе.Выполнить().Выбрать();
	МассивДоговоров = Новый Массив;
	Пока ВыборкаОстатокДСвКассе.Следующий() Цикл
		МассивДоговоров.Добавить(ВыборкаОстатокДСвКассе.ДоговорПлатежногоАгента);
	КонецЦикла;
	
	Возврат МассивДоговоров;
	
КонецФункции

// Функция собирает данные для запроса суммы фактической выемки.
//
// Возвращаемое значение:
//  Структура
Функция ДанныеДляЗапросаСуммыФактическойВыемки(КассаККМ) Экспорт
	
	Данные = Новый Структура;
	КассоваяДисциплина = ПродажиСервер.КассоваяДисциплинаВыемкиПриЗакрытииСмены(КассаККМ);
	Данные.Вставить("ЗапрашиватьСуммуВыемки", КассоваяДисциплина.ЗапрашиватьСуммуВыемки);
	Если Данные.ЗапрашиватьСуммуВыемки Тогда
		Данные.Вставить("МаксимальнаяСуммаВыемки" , СуммаОстаткаДСПоКассеККМ(КассаККМ));
		Данные.Вставить("МаксимальнаяСуммаРазмена", КассоваяДисциплина.МаксимальнаяСуммаРазмена);
	Иначе
		Данные.Вставить("МаксимальнаяСуммаВыемки", 0.00);
	КонецЕсли;
	Возврат Данные;
КонецФункции // ДанныеДляЗапросаСуммыФактическойВыемки()

#КонецОбласти

#Область ФункцииЗаказыПокупателей

// Процедура устанавливает в строках табличной части.
//
Функция УстановитьКлючВСтрокахТабличнойЧасти(Объект, ИмяТабличнойЧасти, РеквизитМаксимальныйКодСтроки = "МаксимальныйКодСтроки") Экспорт

	СтрокиБезКлюча = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("КодСтроки", 0));
	Если СтрокиБезКлюча.Количество() > 0 Тогда
		
		ТекущийКод = Объект[РеквизитМаксимальныйКодСтроки];
		
		Для Каждого СтрокаТовары Из СтрокиБезКлюча Цикл
			
			ТекущийКод = ТекущийКод + 1;
			СтрокаТовары.КодСтроки = ТекущийКод;
			
		КонецЦикла;
		
		Объект[РеквизитМаксимальныйКодСтроки] = ТекущийКод;
		
	КонецЕсли;

КонецФункции

// Процедура заполняет документ или обработку по остаткам заказа.
// 
Процедура ЗаполнитьПоОстаткамЗаказа(Объект, ЗаказПокупателя) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыПокупателейОстатки.Характеристика КАК Характеристика,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток КАК ЗаказаноОстаток,
	|	ЗаказыПокупателейОстатки.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ТаблицаРегистра
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, Заказ = &Заказ) КАК ЗаказыПокупателейОстатки
	|ГДЕ
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.Характеристика,
	|	ЗаказПокупателяТовары.Количество,
	|	ЗаказПокупателяТовары.Упаковка,
	|	ЗаказПокупателяТовары.КоличествоУпаковок,
	|	ЗаказПокупателяТовары.Цена,
	|	ЗаказПокупателяТовары.Продавец,
	|	ЗаказПокупателяТовары.ПроцентАвтоматическойСкидки,
	|	ЗаказПокупателяТовары.ПроцентРучнойСкидки,
	|	ЗаказПокупателяТовары.Сумма,
	|	ЗаказПокупателяТовары.СтавкаНДС,
	|	ЗаказПокупателяТовары.СуммаНДС,
	|	ЗаказПокупателяТовары.СуммаАвтоматическойСкидки,
	|	ЗаказПокупателяТовары.СуммаРучнойСкидки,
	|	ЗаказПокупателяТовары.КлючСвязи,
	|	ЗаказПокупателяТовары.КодСтроки,
	|	ЗаказПокупателяТовары.Резервировать,
	|	ЗаказПокупателяТовары.ПродажаПодарка КАК ПродажаПодарка
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка = &Заказ
	|	И ЗаказПокупателяТовары.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.Характеристика,
	|	ТаблицаДокумента.Количество,
	|	ТаблицаДокумента.Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок,
	|	ТаблицаДокумента.Цена,
	|	ТаблицаДокумента.Продавец,
	|	ТаблицаДокумента.ПроцентАвтоматическойСкидки,
	|	ТаблицаДокумента.ПроцентРучнойСкидки,
	|	ТаблицаДокумента.Сумма,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС,
	|	ТаблицаДокумента.СуммаАвтоматическойСкидки,
	|	ТаблицаДокумента.СуммаРучнойСкидки,
	|	ТаблицаДокумента.КлючСвязи,
	|	ТаблицаДокумента.КодСтроки,
	|	ТаблицаДокумента.ПродажаПодарка,
	|	ТаблицаРегистра.ЗаказаноОстаток,
	|	ТаблицаДокумента.Резервировать
	|ПОМЕСТИТЬ ТаблицаДокументРегистр
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРегистра КАК ТаблицаРегистра
	|		ПО ТаблицаДокумента.Номенклатура = ТаблицаРегистра.Номенклатура
	|			И ТаблицаДокумента.Характеристика = ТаблицаРегистра.Характеристика
	|			И ТаблицаДокумента.КодСтроки = ТаблицаРегистра.КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументРегистр.Номенклатура,
	|	ТаблицаДокументРегистр.Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА ТаблицаДокументРегистр.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА ТаблицаДокументРегистр.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ТаблицаДокументРегистр.Цена,
	|	ТаблицаДокументРегистр.Продавец,
	|	ТаблицаДокументРегистр.ПроцентАвтоматическойСкидки,
	|	ТаблицаДокументРегистр.ПроцентРучнойСкидки,
	|	ТаблицаДокументРегистр.Сумма * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаДокументРегистр.СтавкаНДС,
	|	ТаблицаДокументРегистр.СуммаНДС * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК СуммаНДС,
	|	ТаблицаДокументРегистр.СуммаАвтоматическойСкидки * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК СуммаАвтоматическойСкидки,
	|	ТаблицаДокументРегистр.СуммаРучнойСкидки * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК СуммаРучнойСкидки,
	|	ТаблицаДокументРегистр.КлючСвязи,
	|	ТаблицаДокументРегистр.КодСтроки,
	|	ТаблицаДокументРегистр.ЗаказаноОстаток КАК Количество,
	|	&Заказ КАК ЗаказПокупателя,
	|	&Склад,
	|	ТаблицаДокументРегистр.ПродажаПодарка,
	|	ТаблицаДокументРегистр.Резервировать
	|ИЗ
	|	ТаблицаДокументРегистр КАК ТаблицаДокументРегистр
	|ГДЕ
	|	ТаблицаДокументРегистр.ЗаказаноОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументРегистр.КлючСвязи,
	|	ТаблицаДокументРегистр.Количество,
	|	ТаблицаДокументРегистр.ЗаказаноОстаток
	|ПОМЕСТИТЬ ТаблицаСкидокПоТоварам
	|ИЗ
	|	ТаблицаДокументРегистр КАК ТаблицаДокументРегистр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяСкидкиНаценки.КлючСвязи,
	|	ЗаказПокупателяСкидкиНаценки.Сумма,
	|	ЗаказПокупателяСкидкиНаценки.СкидкаНаценка
	|ПОМЕСТИТЬ ТаблицаДокументаСкидки
	|ИЗ
	|	Документ.ЗаказПокупателя.СкидкиНаценки КАК ЗаказПокупателяСкидкиНаценки
	|ГДЕ
	|	ЗаказПокупателяСкидкиНаценки.Ссылка = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументаСкидки.КлючСвязи,
	|	ТаблицаДокументаСкидки.Сумма * ВЫБОР
	|		КОГДА ТаблицаСкидокПоТоварам.Количество = ТаблицаСкидокПоТоварам.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаСкидокПоТоварам.ЗаказаноОстаток / ТаблицаСкидокПоТоварам.Количество
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаДокументаСкидки.СкидкаНаценка
	|ИЗ
	|	ТаблицаСкидокПоТоварам КАК ТаблицаСкидокПоТоварам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументаСкидки КАК ТаблицаДокументаСкидки
	|		ПО ТаблицаСкидокПоТоварам.КлючСвязи = ТаблицаДокументаСкидки.КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекККМ.Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Проведен
	|	И ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|	И ЧекККМ.ЗаказПокупателя = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяПодарки.НомерСтроки,
	|	ЗаказПокупателяПодарки.СкидкаНаценка,
	|	ЗаказПокупателяПодарки.Номенклатура,
	|	ЗаказПокупателяПодарки.Характеристика,
	|	ЗаказПокупателяПодарки.Количество,
	|	ЗаказПокупателяПодарки.Цена,
	|	ЗаказПокупателяПодарки.Сумма,
	|	ЗаказПокупателяПодарки.Склад,
	|	ЗаказПокупателяПодарки.КлючСвязи,
	|	ЗаказПокупателяПодарки.Упаковка,
	|	ЗаказПокупателяПодарки.КоличествоУпаковок
	|ИЗ
	|	Документ.ЗаказПокупателя.Подарки КАК ЗаказПокупателяПодарки
	|ГДЕ
	|	ЗаказПокупателяПодарки.Ссылка = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументаСкидки.СкидкаНаценка КАК СкидкаНаценка
	|ИЗ
	|	ТаблицаДокументаСкидки КАК ТаблицаДокументаСкидки
	|ГДЕ
	|	ТаблицаДокументаСкидки.СкидкаНаценка.Управляемая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БонусныеБаллыКНачислению.КлючСвязи,
	|	БонусныеБаллыКНачислению.БонуснаяПрограммаЛояльности,
	|	БонусныеБаллыКНачислению.СкидкаНаценка,
	|	БонусныеБаллыКНачислению.ДатаНачисления,
	|	БонусныеБаллыКНачислению.ДатаСписания,
	|	БонусныеБаллыКНачислению.КоличествоБонусныхБаллов
	|ПОМЕСТИТЬ ТаблицаДокументаБонусы
	|ИЗ
	|	Документ.ЗаказПокупателя.БонусныеБаллыКНачислению КАК БонусныеБаллыКНачислению
	|ГДЕ
	|	БонусныеБаллыКНачислению.Ссылка = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументаБонусы.КлючСвязи,
	|	ТаблицаДокументаБонусы.БонуснаяПрограммаЛояльности,
	|	ТаблицаДокументаБонусы.СкидкаНаценка,
	|	ТаблицаДокументаБонусы.ДатаНачисления,
	|	ТаблицаДокументаБонусы.ДатаСписания,
	|	ТаблицаДокументаБонусы.КоличествоБонусныхБаллов * ВЫБОР
	|		КОГДА ТаблицаСкидокПоТоварам.Количество = ТаблицаСкидокПоТоварам.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаСкидокПоТоварам.ЗаказаноОстаток / ТаблицаСкидокПоТоварам.Количество
	|	КОНЕЦ КАК КоличествоБонусныхБаллов
	|ИЗ
	|	ТаблицаСкидокПоТоварам КАК ТаблицаСкидокПоТоварам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументаБонусы КАК ТаблицаДокументаБонусы
	|		ПО ТаблицаСкидокПоТоварам.КлючСвязи = ТаблицаДокументаБонусы.КлючСвязи
	|";
	
	Запрос.УстановитьПараметр("Заказ", ЗаказПокупателя);
	Запрос.УстановитьПараметр("Склад", ЗаказПокупателя.Склад);
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаТоваров = Результат[3].Выгрузить();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаТоваров, Объект["Товары"]);
	
	ТаблицаСкидок = Результат[6].Выгрузить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаСкидок, Объект["СкидкиНаценки"]);
	
	Ссылка = Объект.Ссылка;
	
	Если Результат[7].Пустой() 
		И НЕ Ссылка.Метаданные().ТабличныеЧасти.Найти("Подарки") = Неопределено Тогда
		ТаблицаПодарков = Результат[8].Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПодарков, Объект["Подарки"]);
	КонецЕсли;
	
	Если НЕ Ссылка.Метаданные().ТабличныеЧасти.Найти("УправляемыеСкидки") = Неопределено Тогда
		ТаблицаУправляемыеСкидки = Результат[9].Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаУправляемыеСкидки, Объект["УправляемыеСкидки"]);
	КонецЕсли;
	
	Если НЕ Ссылка.Метаданные().ТабличныеЧасти.Найти("БонусныеБаллыКНачислению") = Неопределено Тогда
		ТаблицаБонусов = Результат[11].Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаБонусов, Объект["БонусныеБаллыКНачислению"]);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткуЗаказа()

// Процедура заполняет табличную часть по остаткам заказа без резерва.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткамЗаказаБезРезерва(Объект, ИмяТабличнойЧастиТовары, ЗаказПокупателя) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Номенклатура,
	|	ЗаказыПокупателейОстатки.Характеристика,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток,
	|	ЗаказыПокупателейОстатки.КодСтроки
	|ПОМЕСТИТЬ ТаблицаРегистра
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, Заказ = &Заказ) КАК ЗаказыПокупателейОстатки
	|ГДЕ
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Номенклатура,
	|	ЗаказПокупателяТовары.Характеристика,
	|	ЗаказПокупателяТовары.Количество,
	|	ЗаказПокупателяТовары.Упаковка,
	|	ЗаказПокупателяТовары.КоличествоУпаковок,
	|	ЗаказПокупателяТовары.Цена,
	|	ЗаказПокупателяТовары.Продавец,
	|	ЗаказПокупателяТовары.ПроцентАвтоматическойСкидки,
	|	ЗаказПокупателяТовары.ПроцентРучнойСкидки,
	|	ЗаказПокупателяТовары.Сумма,
	|	ЗаказПокупателяТовары.СтавкаНДС,
	|	ЗаказПокупателяТовары.СуммаНДС,
	|	ЗаказПокупателяТовары.СуммаАвтоматическойСкидки,
	|	ЗаказПокупателяТовары.СуммаРучнойСкидки,
	|	ЗаказПокупателяТовары.КлючСвязи,
	|	ЗаказПокупателяТовары.КодСтроки,
	|	ЗаказПокупателяТовары.Резервировать
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка = &Заказ
	|	И ЗаказПокупателяТовары.Количество > 0
	|	И НЕ ЗаказПокупателяТовары.Резервировать
	|	И НЕ ЗаказПокупателяТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.Характеристика,
	|	ТаблицаДокумента.Количество,
	|	ТаблицаДокумента.Упаковка,
	|	ТаблицаДокумента.КоличествоУпаковок,
	|	ТаблицаДокумента.Цена,
	|	ТаблицаДокумента.Продавец,
	|	ТаблицаДокумента.ПроцентАвтоматическойСкидки,
	|	ТаблицаДокумента.ПроцентРучнойСкидки,
	|	ТаблицаДокумента.Сумма,
	|	ТаблицаДокумента.СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС,
	|	ТаблицаДокумента.СуммаАвтоматическойСкидки,
	|	ТаблицаДокумента.СуммаРучнойСкидки,
	|	ТаблицаДокумента.КлючСвязи,
	|	ТаблицаДокумента.КодСтроки,
	|	ТаблицаРегистра.ЗаказаноОстаток,
	|	ТаблицаДокумента.Резервировать
	|ПОМЕСТИТЬ ТаблицаДокументРегистр
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРегистра КАК ТаблицаРегистра
	|		ПО ТаблицаДокумента.Номенклатура = ТаблицаРегистра.Номенклатура
	|			И ТаблицаДокумента.Характеристика = ТаблицаРегистра.Характеристика
	|			И ТаблицаДокумента.КодСтроки = ТаблицаРегистра.КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументРегистр.Номенклатура,
	|	ТаблицаДокументРегистр.Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА ТаблицаДокументРегистр.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА ТаблицаДокументРегистр.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ТаблицаДокументРегистр.Цена,
	|	ТаблицаДокументРегистр.Продавец,
	|	ТаблицаДокументРегистр.ПроцентАвтоматическойСкидки,
	|	ТаблицаДокументРегистр.ПроцентРучнойСкидки,
	|	ТаблицаДокументРегистр.Сумма * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаДокументРегистр.СтавкаНДС,
	|	ТаблицаДокументРегистр.СуммаНДС * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК СуммаНДС,
	|	ТаблицаДокументРегистр.СуммаАвтоматическойСкидки * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК СуммаАвтоматическойСкидки,
	|	ТаблицаДокументРегистр.СуммаРучнойСкидки * ВЫБОР
	|		КОГДА ТаблицаДокументРегистр.Количество = ТаблицаДокументРегистр.ЗаказаноОстаток
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаДокументРегистр.ЗаказаноОстаток / ТаблицаДокументРегистр.Количество
	|	КОНЕЦ КАК СуммаРучнойСкидки,
	|	ТаблицаДокументРегистр.КлючСвязи,
	|	ТаблицаДокументРегистр.КодСтроки,
	|	ТаблицаДокументРегистр.ЗаказаноОстаток КАК Количество
	|ИЗ
	|	ТаблицаДокументРегистр КАК ТаблицаДокументРегистр
	|ГДЕ
	|	ТаблицаДокументРегистр.ЗаказаноОстаток > 0";
	
	Запрос.УстановитьПараметр("Заказ", ЗаказПокупателя);
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаТоваров = Результат[3].Выгрузить();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаТоваров, Объект[ИмяТабличнойЧастиТовары]);
	
КонецПроцедуры

// Функция возвращает признак наличия незарезервированных строк.
//
Функция НаличиеНезарезервированныхСтрок(Знач Товары) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЗаказПокупателяТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ЗаказПокупателяТовары.Резервировать,
	|	ЗаказПокупателяТовары.Отменено
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	&Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	НЕ ЗаказПокупателяТовары.Резервировать
	|	И НЕ ЗаказПокупателяТовары.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаВЗапросе.Номенклатура
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|ГДЕ
	|	ТаблицаВЗапросе.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)";
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Процедура проверяет отмену строк в табличной части документа.
// Параметры:
//	Объект - проверяемый ДокументОбъект.
//	ИмяТЧ - Строка - имя проверяемой табличной части.
//	ИмяРеквизитаОтменыСтрок - Строка - имя проверяемого реквизита ТЧ. Тип реквизита Булево.
//
Функция ВсеСтрокиОтменены(Объект, ИмяТЧ, ИмяРеквизитаОтменыСтрок) Экспорт
	
	СтруктураОтбора = Новый Структура(ИмяРеквизитаОтменыСтрок, Ложь);
	НеОтмененныеСтроки = Объект[ИмяТЧ].НайтиСтроки(СтруктураОтбора);
	
	Возврат (НеОтмененныеСтроки.Количество() = 0);
	
КонецФункции

// Отменяет все строки, по которым не было документально оформлена реализация.
//
// Параметры:
// 		ДокументЗаказа   - ДокументСсылка - ссылка на документ заказа,
// 			в котором необходимо отменить непроданные строк.
// 		ИмяТабличнойЧасти - Строка - имя табличной части, в которой необходимо осуществить проверку.
// 		ПричинаОтмены     - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина, по которой отменяются строки.
// 		ПроверятьОстатки  - Булево - признак, указывающий на необходимость запроса для проверки остатков.
//
// Возвращаемое значение:
// 		Число - Количество отмененных строк.
//
Функция ОтменитьСНепроданнымиТоварами(ДокументЗаказа, ИмяТабличнойЧасти, Знач ПричинаОтмены, Знач ПроверятьОстатки = Ложь) Экспорт
	
	КоличествоОтмененныхСтрок = 0;
	ТаблицаТовары = ДокументЗаказа[ИмяТабличнойЧасти];
	
	СвойстваОтмененнойСтроки = Новый Структура(
		"Резервировать, Отменено, ПричинаОтмены",
		Ложь, Истина, ПричинаОтмены
	);
	
	Если Не ПроверятьОстатки Тогда
		Для Индекс = 0 По ТаблицаТовары.Количество() - 1 Цикл
			Если Не ТаблицаТовары[Индекс].Отменено Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаТовары[Индекс], СвойстваОтмененнойСтроки);
				КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
			КонецЕсли;
		КонецЦикла;
		Возврат КоличествоОтмененныхСтрок;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТовары.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.КодСтроки КАК ЧИСЛО) КАК КодСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Количество КАК ЧИСЛО) КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Отменено КАК БУЛЕВО) КАК Отменено
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Отменено = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.КодСтроки КАК КодСтроки,
	|	ЕСТЬNULL(ТаблицаТовары.Упаковка.Коэффициент, 1) КАК КоэффициентУпаковки,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Количество > ЗаказыПокупателейОстатки.ЗаказаноОстаток
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РазбитьСтроку
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(, Заказ = &ЗаказПокупателя) КАК ЗаказыПокупателейОстатки
	|		ПО ТаблицаТовары.КодСтроки = ЗаказыПокупателейОстатки.КодСтроки
	|			И (ЗаказыПокупателейОстатки.ЗаказаноОстаток > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ДокументЗаказа.Ссылка);
	Запрос.УстановитьПараметр(
		"ТаблицаТовары",
		ДокументЗаказа[ИмяТабличнойЧасти].Выгрузить(
			, // Массив строк для выгрузки
			"НомерСтроки, КодСтроки, Упаковка, Количество, Отменено"
		)
	);
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	Если ПакетРезультатов[1].Пустой() Тогда
		Возврат КоличествоОтмененныхСтрок;
	КонецЕсли;
	
	Выборка = ПакетРезультатов[1].Выбрать();
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Пока Выборка.Следующий() Цикл
		
		Строка = ДокументЗаказа[ИмяТабличнойЧасти][Выборка.НомерСтроки-1];
		
		Если Выборка.РазбитьСтроку Тогда
			
			НоваяСтрока = ДокументЗаказа[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваОтмененнойСтроки);
			НоваяСтрока.КодСтроки = 0;
			
			ПересчитатьНаЕдиницуИзмерения = Ложь;
			
			Если Выборка.КоэффициентУпаковки <> 1
				И Цел(Выборка.ЗаказаноОстаток / Выборка.КоэффициентУпаковки) <> (Выборка.ЗаказаноОстаток / Выборка.КоэффициентУпаковки) Тогда
				
				ПересчитатьНаЕдиницуИзмерения = Истина;
				
			КонецЕсли;
			
			Строка.Количество              = Выборка.Количество - Выборка.ЗаказаноОстаток;
			Если ПересчитатьНаЕдиницуИзмерения Тогда
				Строка.КоличествоУпаковок      = Строка.Количество;
				Строка.Упаковка                = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
			Иначе
				Строка.КоличествоУпаковок      = (Выборка.Количество - Выборка.ЗаказаноОстаток) / Выборка.КоэффициентУпаковки;
			КонецЕсли;
			
			СуммаИзмененияАвтоматическойСкидки = 0;
			СуммаИзмененияРучнойСкидки = 0;
			Если Выборка.Количество <> 0 Тогда
				СуммаИзмененияАвтоматическойСкидки = Строка.СуммаАвтоматическойСкидки * Выборка.ЗаказаноОстаток / Выборка.Количество;
				Строка.СуммаАвтоматическойСкидки   = Строка.СуммаАвтоматическойСкидки - СуммаИзмененияАвтоматическойСкидки;
				
				СуммаИзмененияРучнойСкидки = Строка.СуммаРучнойСкидки * Выборка.ЗаказаноОстаток / Выборка.Количество;
				Строка.СуммаРучнойСкидки   = Строка.СуммаРучнойСкидки - СуммаИзмененияРучнойСкидки;
				
			КонецЕсли;
			
			НоваяСтрока.Количество         = Выборка.ЗаказаноОстаток;
			Если ПересчитатьНаЕдиницуИзмерения Тогда
				НоваяСтрока.КоличествоУпаковок      = НоваяСтрока.Количество;
				НоваяСтрока.Упаковка                = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
			Иначе
				НоваяСтрока.КоличествоУпаковок      = Выборка.ЗаказаноОстаток / Выборка.КоэффициентУпаковки;
			КонецЕсли;
			НоваяСтрока.СуммаАвтоматическойСкидки = СуммаИзмененияАвтоматическойСкидки;
			НоваяСтрока.СуммаАвтоматическойСкидки = СуммаИзмененияРучнойСкидки;
			
			СтруктураДействий = Новый Структура;
			
			Если ПересчитатьНаЕдиницуИзмерения Тогда
				СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", Строка.Количество);
			КонецЕсли;
			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ДокументЗаказа));
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(Строка, СтруктураДействий, КэшированныеЗначения);
			
			Если ПересчитатьНаЕдиницуИзмерения Тогда
				СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", НоваяСтрока.Количество);
			КонецЕсли;
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
			
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(Строка, ДокументЗаказа.ЦенаВключаетНДС);
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(НоваяСтрока, ДокументЗаказа.ЦенаВключаетНДС);
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(Строка, СвойстваОтмененнойСтроки);
			
		КонецЕсли;
		
		КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
		
	КонецЦикла;
	
	Возврат КоличествоОтмененныхСтрок;
	
КонецФункции

// Резервирует по заказу все что есть на складе.
// 		ДокументЗаказа   - ДокументСсылка - ссылка на документ заказа,
// 		ИмяТабличнойЧасти - Строка - имя табличной части, в которой необходимо осуществить проверку.
//
Функция РезервироватьПоДаннымОстатков(ДокументЗаказа, ИмяТабличнойЧасти) Экспорт
	
	КоличествоСтрок = 0;
	ТаблицаТовары = ДокументЗаказа[ИмяТабличнойЧасти];
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТовары.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.КодСтроки КАК ЧИСЛО) КАК КодСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Количество КАК ЧИСЛО) КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Отменено КАК БУЛЕВО) КАК Отменено,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Резервировать КАК БУЛЕВО) КАК Резервировать
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	НЕ ТаблицаТовары.Отменено
	|	И НЕ ТаблицаТовары.Резервировать
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.КодСтроки КАК КодСтроки,
	|	ЕСТЬNULL(ТаблицаТовары.Упаковка.Коэффициент, 1) КАК КоэффициентУпаковки,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Количество > ЗаказыПокупателейОстатки.ЗаказаноОстаток
	|				ИЛИ ТаблицаТовары.Количество > ТаблицаОстатков.СвободныйОстаток
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РазбитьСтроку,
	|	ТаблицаОстатков.СвободныйОстаток,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Количество <= ЗаказыПокупателейОстатки.ЗаказаноОстаток
	|				И ТаблицаТовары.Количество <= ТаблицаОстатков.СвободныйОстаток
	|			ТОГДА ТаблицаТовары.Количество
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаказыПокупателейОстатки.ЗаказаноОстаток <= ТаблицаОстатков.СвободныйОстаток
	|					ТОГДА ЗаказыПокупателейОстатки.ЗаказаноОстаток
	|				ИНАЧЕ ТаблицаОстатков.СвободныйОстаток
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоРезерва
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(, Заказ = &ЗаказПокупателя) КАК ЗаказыПокупателейОстатки
	|		ПО ТаблицаТовары.КодСтроки = ЗаказыПокупателейОстатки.КодСтроки
	|			И (ЗаказыПокупателейОстатки.ЗаказаноОстаток > 0)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|			ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|			ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыНаСкладахОстатки.РезервОстаток КАК СвободныйОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Остатки(
	|					,
	|					Склад = &Склад
	|						И Номенклатура В
	|							(ВЫБРАТЬ
	|								ТаблицаТовары.Номенклатура
	|							ИЗ
	|								ТаблицаТовары КАК ТаблицаТовары)) КАК ТоварыНаСкладахОстатки
	|		ГДЕ
	|			ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыНаСкладахОстатки.РезервОстаток > 0) КАК ТаблицаОстатков
	|		ПО ТаблицаТовары.Номенклатура = ТаблицаОстатков.Номенклатура
	|			И ТаблицаТовары.Характеристика = ТаблицаОстатков.Характеристика
	|			И (ТаблицаОстатков.СвободныйОстаток > 0)
	|ГДЕ
	|	НЕ (ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ДокументЗаказа.Ссылка);
	Запрос.УстановитьПараметр("Склад"          , ДокументЗаказа.Склад);
	Запрос.УстановитьПараметр(
		"ТаблицаТовары",
		ДокументЗаказа[ИмяТабличнойЧасти].Выгрузить(
			, // Массив строк для выгрузки
			"НомерСтроки, КодСтроки, Упаковка, Количество, Отменено, Резервировать, Номенклатура, Характеристика"
		)
	);
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	Если ПакетРезультатов[1].Пустой() Тогда
		Возврат КоличествоСтрок;
	КонецЕсли;
	
	Выборка = ПакетРезультатов[1].Выбрать();
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Пока Выборка.Следующий() Цикл
		
		Строка = ДокументЗаказа[ИмяТабличнойЧасти][Выборка.НомерСтроки-1];
		
		Если Выборка.РазбитьСтроку Тогда
			
			НоваяСтрока = ДокументЗаказа[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Резервировать = Истина;
			НоваяСтрока.КодСтроки = 0;
			
			ПересчитатьНаЕдиницуИзмерения = Ложь;
			
			Если Выборка.КоэффициентУпаковки <> 1
				И Цел(Выборка.ЗаказаноОстаток / Выборка.КоэффициентУпаковки) <> (Выборка.ЗаказаноОстаток / Выборка.КоэффициентУпаковки) Тогда
				
				ПересчитатьНаЕдиницуИзмерения = Истина;
				
			КонецЕсли;
			
			Строка.Количество = Выборка.Количество - Выборка.КоличествоРезерва;
			Если ПересчитатьНаЕдиницуИзмерения Тогда
				Строка.КоличествоУпаковок      = Строка.Количество;
				Строка.Упаковка                = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
			Иначе
				Строка.КоличествоУпаковок      = (Выборка.Количество - Выборка.КоличествоРезерва) / Выборка.КоэффициентУпаковки;
			КонецЕсли;
			
			СуммаИзмененияАвтоматическойСкидки = 0;
			СуммаИзмененияРучнойСкидки = 0;
			Если Выборка.Количество <> 0 Тогда
				СуммаИзмененияАвтоматическойСкидки = Строка.СуммаАвтоматическойСкидки * Выборка.КоличествоРезерва / Выборка.Количество;
				Строка.СуммаАвтоматическойСкидки   = Строка.СуммаАвтоматическойСкидки - СуммаИзмененияАвтоматическойСкидки;
				
				СуммаИзмененияРучнойСкидки = Строка.СуммаРучнойСкидки * Выборка.КоличествоРезерва / Выборка.Количество;
				Строка.СуммаРучнойСкидки   = Строка.СуммаРучнойСкидки - СуммаИзмененияРучнойСкидки;
				
			КонецЕсли;
			
			НоваяСтрока.Количество         = Выборка.КоличествоРезерва;
			Если ПересчитатьНаЕдиницуИзмерения Тогда
				НоваяСтрока.КоличествоУпаковок      = НоваяСтрока.Количество;
				НоваяСтрока.Упаковка                = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
			Иначе
				НоваяСтрока.КоличествоУпаковок      = Выборка.КоличествоРезерва / Выборка.КоэффициентУпаковки;
			КонецЕсли;
			НоваяСтрока.СуммаАвтоматическойСкидки = СуммаИзмененияАвтоматическойСкидки;
			НоваяСтрока.СуммаАвтоматическойСкидки = СуммаИзмененияРучнойСкидки;
			
			СтруктураДействий = Новый Структура;
			
			Если ПересчитатьНаЕдиницуИзмерения Тогда
				СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", Строка.Количество);
			КонецЕсли;
			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ДокументЗаказа));
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(Строка, СтруктураДействий, КэшированныеЗначения);
			
			Если ПересчитатьНаЕдиницуИзмерения Тогда
				СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", НоваяСтрока.Количество);
			КонецЕсли;
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
			
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(Строка, ДокументЗаказа.ЦенаВключаетНДС);
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(НоваяСтрока, ДокументЗаказа.ЦенаВключаетНДС);
			
		Иначе
			
			Строка.Резервировать = Истина;
			
		КонецЕсли;
		
		КоличествоСтрок = КоличествоСтрок + 1;
		
	КонецЦикла;
	
	Возврат КоличествоСтрок;
	
	
КонецФункции // РезервироватьПоДаннымОстатков()

// Общая процедура Остатков серийных номеров.
//
// Параметры:
//  ИмяТабличнойЧасти - Имя табличной части Товары.
//  ЗаказПокупателя - заказ покупателя по которому проверяются остатки.
//  Отказ - Переменная отвечающая за прерывание проведения.
//  ТекстОшибки - текст сообщения об ошибке.
//
Процедура ПроверитьОстаткиЗаказовПокупателей(
		ТаблицаЗначений_Товары, 
		ЗаказПокупателя,
		Отказ,
		ТекстОшибки) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаТовары.ЗаказПокупателя КАК Документ.ЗаказПокупателя) КАК ЗаказПокупателя,
	|	ВЫРАЗИТЬ(ТаблицаТовары.КодСтроки КАК ЧИСЛО(10, 0)) КАК КодСтроки
	|ПОМЕСТИТЬ ДокТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокТовары.Номенклатура,
	|	ДокТовары.Характеристика,
	|	СУММА(ДокТовары.Количество) КАК Количество,
	|	ДокТовары.ЗаказПокупателя,
	|	ДокТовары.КодСтроки
	|ПОМЕСТИТЬ ТаблицаДляАнализа
	|ИЗ
	|	ДокТовары КАК ДокТовары
	|ГДЕ
	|	НЕ ДокТовары.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТовары.Номенклатура,
	|	ДокТовары.Характеристика,
	|	ДокТовары.ЗаказПокупателя,
	|	ДокТовары.КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Заказ,
	|	ЗаказыПокупателейОстатки.КодСтроки,
	|	ЗаказыПокупателейОстатки.Номенклатура,
	|	ЗаказыПокупателейОстатки.Характеристика,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток
	|ПОМЕСТИТЬ ТаблицаРегистра
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, Заказ = &ЗаказПокупателя) КАК ЗаказыПокупателейОстатки
	|ГДЕ
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДляАнализа.Номенклатура,
	|	ТаблицаДляАнализа.Характеристика,
	|	ТаблицаДляАнализа.ЗаказПокупателя,
	|	ТаблицаДляАнализа.КодСтроки,
	|	ТаблицаДляАнализа.Количество - ЕСТЬNULL(ТаблицаРегистра.ЗаказаноОстаток, 0) КАК Количество,
	|	ТаблицаДляАнализа.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	ТаблицаДляАнализа КАК ТаблицаДляАнализа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРегистра КАК ТаблицаРегистра
	|		ПО ТаблицаДляАнализа.Номенклатура = ТаблицаРегистра.Номенклатура
	|			И ТаблицаДляАнализа.Характеристика = ТаблицаРегистра.Характеристика
	|			И ТаблицаДляАнализа.ЗаказПокупателя = ТаблицаРегистра.Заказ
	|			И ТаблицаДляАнализа.КодСтроки = ТаблицаРегистра.КодСтроки
	|ГДЕ
	|	ТаблицаДляАнализа.Количество - ЕСТЬNULL(ТаблицаРегистра.ЗаказаноОстаток, 0) > 0";

	Запрос.УстановитьПараметр("ТаблицаТовары"  , ТаблицаЗначений_Товары);
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ШаблонСообщения = НСтр("ru = 'Номенклатура %1 
		|Превышен остаток по заказу в строке заказа %2 на %3 %4'");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Отказ = Истина;
		ТекстОшибки = ТекстОшибки + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Выборка.Номенклатура, Выборка.Характеристика),
			Строка(Выборка.КодСтроки),
			Строка(Выборка.Количество),
			Строка(Выборка.ЕдиницаИзмерения));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Сопоставить алкогольную продукцию с номенклатурой.
//
// Параметры:
//  Объект - ДокументОбъект - Объект в котором сопоставляется номенклатура.
//  ИмяКолонки - Строка - Имя колонки с номенклатурой ЕГАИС.
//  ЗаписыватьСправку2 - Булево - признак сопоставления по справке 2.
//  СопоставлятьПоИдентификаторуУпаковки - Булево - признак сопоставления по идентификатору.
//
Процедура СопоставитьАлкогольнуюПродукциюСНоменклатурой(Объект, ИмяКолонки = "НоменклатураЕГАИС", ЗаписыватьСправку2 = Ложь, СопоставлятьПоИдентификаторуУпаковки = Ложь, СопоставлятьПоСерии = Истина) Экспорт
	
	КолонкиДляВыгрузки = ИмяКолонки + ", " + "Номенклатура, Характеристика";
	Если СопоставлятьПоСерии Тогда
		КолонкиДляВыгрузки = КолонкиДляВыгрузки + ", Серия";
	КонецЕсли;
	Если СопоставлятьПоИдентификаторуУпаковки Тогда
		КолонкиДляВыгрузки = КолонкиДляВыгрузки + ", ИдентификаторУпаковки";
	КонецЕсли;
	Если ЗаписыватьСправку2 Тогда
		КолонкиДляВыгрузки = КолонкиДляВыгрузки + ", Справка2";
	КонецЕсли;
	Данные = Объект.Товары.Выгрузить(, КолонкиДляВыгрузки);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&ИмяКолонкиАлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	&ИмяКолонкиСерия КАК Серия,
	|	&ИмяКолонкиИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	&ИмяКолонкиСправка2 КАК Справка2
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Серия КАК Серия,
	|	Таблица.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Таблица.Справка2 КАК Справка2,
	|	Сопоставлено.АлкогольнаяПродукция КАК Сопоставлено,
	|	МАКСИМУМ(ЕСТЬNULL(Сопоставлено.Порядок,ЕСТЬNULL(СопоставленоБЕЗСерии.Порядок,0))) КАК Порядок
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК Сопоставлено
	|		ПО Сопоставлено.Номенклатура = Таблица.Номенклатура
	|		 И Сопоставлено.Характеристика = Таблица.Характеристика
	|		 И Сопоставлено.ИдентификаторУпаковки = Таблица.ИдентификаторУпаковки
	|		 И Сопоставлено.Справка2 = Таблица.Справка2
	|		 И Сопоставлено.Серия = Таблица.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СопоставленоБЕЗСерии
	|		ПО СопоставленоБЕЗСерии.Номенклатура = Таблица.Номенклатура
	|		 И СопоставленоБЕЗСерии.Характеристика = Таблица.Характеристика
	|		 И СопоставленоБЕЗСерии.ИдентификаторУпаковки = Таблица.ИдентификаторУпаковки
	|		 И СопоставленоБЕЗСерии.Справка2 = Таблица.Справка2
	|ГДЕ
	|	Таблица.АлкогольнаяПродукция <> ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|	И Таблица.Номенклатура <> &ПустаяСсылкаНоменклатура
	|	И Сопоставлено.АлкогольнаяПродукция ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	Таблица.АлкогольнаяПродукция,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	Таблица.ИдентификаторУпаковки,
	|	Таблица.Справка2,
	|	Сопоставлено.АлкогольнаяПродукция
	|");
	
	Запрос.УстановитьПараметр("Таблица", Данные);
	Запрос.УстановитьПараметр("ПустаяСсылкаНоменклатура", ИнтеграцияЕГАИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("ПустаяСправка2", Справочники.Справки2ЕГАИС.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяКолонкиАлкогольнаяПродукция", ИмяКолонки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ИмяКолонкиИдентификаторУпаковки",
		?(СопоставлятьПоИдентификаторуУпаковки, "Т.ИдентификаторУпаковки", "&ПустаяСтрока"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ИмяКолонкиСерия",
		?(СопоставлятьПоСерии, "Т.Серия", "&ПустаяСерия"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ИмяКолонкиСправка2",
		?(ЗаписыватьСправку2, "Т.Справка2", "&ПустаяСправка2"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура, Истина);
		НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика, Истина);
		НаборЗаписей.Отбор.Серия.Установить(Выборка.Серия, Истина);
		НаборЗаписей.Отбор.АлкогольнаяПродукция.Установить(Выборка.АлкогольнаяПродукция, Истина);
		НаборЗаписей.Отбор.ИдентификаторУпаковки.Установить(Выборка.ИдентификаторУпаковки, Истина);
		НаборЗаписей.Отбор.Справка2.Установить(Выборка.Справка2, Истина);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Номенклатура          = Выборка.Номенклатура;
		НоваяЗапись.Характеристика        = Выборка.Характеристика;
		НоваяЗапись.Серия                 = Выборка.Серия;
		НоваяЗапись.АлкогольнаяПродукция  = Выборка.АлкогольнаяПродукция;
		НоваяЗапись.ИдентификаторУпаковки = Выборка.ИдентификаторУпаковки;
		НоваяЗапись.Справка2              = Выборка.Справка2;
		НоваяЗапись.Порядок               = Выборка.Порядок + 1;
	
		Попытка
			НаборЗаписей.Записать();
		Исключение
			
			ТекстОшибки = НСтр("ru = 'При записи соответствия номенклатуры произошла ошибка:
			                         |%1'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			
			ИнтеграцияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КодСоответствуетНоменклатуреИУпаковке(Форма, КодМаркировки, ДополнительныеПараметры, ОсобыйВыводСообщения = Ложь) Экспорт
	
	РезультатПроверки = Ложь;
	СтрокаТЧ = Форма.Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	Если СтрокаТЧ = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка в табличной части ""Товары"".'");
		Если ОсобыйВыводСообщения Тогда
			ДополнительныеПараметры.Вставить("ТекстСообщения", ТекстСообщения)
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Форма, "Объект.Товары");
		КонецЕсли;
	Иначе
		
		ДанныеМаркировки = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьКодМаркировки(КодМаркировки);
		Если ДанныеМаркировки.Разобран Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Штрихкоды.Штрихкод КАК Штрихкод,
			|	Штрихкоды.Владелец КАК Владелец,
			|	Штрихкоды.Характеристика КАК Характеристика,
			|	Штрихкоды.Упаковка КАК Упаковка
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Штрихкод = &EAN
			|	И Штрихкоды.Владелец = &Номенклатура
			|	И Штрихкоды.Упаковка = &Упаковка
			|";
			Запрос.УстановитьПараметр("EAN", ДанныеМаркировки.EAN);
			Запрос.УстановитьПараметр("Номенклатура", СтрокаТЧ.Номенклатура);
			Запрос.УстановитьПараметр("Упаковка", ?(ЗначениеЗаполнено(СтрокаТЧ.Упаковка), СтрокаТЧ.Упаковка, Справочники.УпаковкиНоменклатуры.ПустаяСсылка()));
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				РезультатПроверки = Истина;
			Иначе
				ТекстСообщения = НСтр("ru = 'Считанный код маркировки %1 не соответствует выбранной номенклатуре %2.'");
				ТекстСообщения = ТекстСообщения + Символы.ПС+ НСтр("ru = 'Попробуйте удалить строку и считать только код маркировки.'");
				ПредставлениеНоменклатуры = Строка(СтрокаТЧ.Номенклатура) + ?(ЗначениеЗаполнено(СтрокаТЧ.Упаковка), "[" + Строка(СтрокаТЧ.Упаковка) + "]", "");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КодМаркировки, ПредставлениеНоменклатуры);
				Если ОсобыйВыводСообщения Тогда
					ДополнительныеПараметры.Вставить("ТекстСообщения", ТекстСообщения)
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Форма, "Объект.Товары[" + (СтрокаТЧ.НомерСтроки - 1) + "].Номенклатура");
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Считанный код маркировки %1 не соответствует формату'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КодМаркировки);
			Если ОсобыйВыводСообщения Тогда
				ДополнительныеПараметры.Вставить("ТекстСообщения", ТекстСообщения)
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Форма);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьШрифтЦвет(ЭлементКартинки, ШрифтВXML, ЦветВXML) Экспорт 
	
	Если ЗначениеЗаполнено(ШрифтВXML) Тогда 
		ЭлементКартинки.Шрифт = ОбщегоНазначения.ЗначениеИзСтрокиXML(ШрифтВXML);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЦветВXML) Тогда 
		ВыбранныйЦвет = ОбщегоНазначения.ЗначениеИзСтрокиXML(ЦветВXML);
		ЭлементКартинки.ЦветРамки = ВыбранныйЦвет;
		ЭлементКартинки.ЦветТекста = ВыбранныйЦвет;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти