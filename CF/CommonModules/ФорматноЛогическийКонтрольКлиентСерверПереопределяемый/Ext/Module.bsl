
#Область ПрограммныйИнтерфейс

// Функция переопределяет типовой форматно-логический контроль чека.
// Параметры:
//   ОбщиеПараметры - Структура, полученная ранее методом МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека,
//                    и заполненная данными чека.
//                    Содержит параметры для контроля:
//                      СпособФорматноЛогическогоКонтроля - ПеречислениеСсылка.СпособыФорматноЛогическогоКонтроля - если не заполнена,
//                                                         то контроль не выполняется,
//                      ДопустимоеРасхождениеФорматноЛогическогоКонтроля - Число - по умолчанию установленное 54-ФЗ отклонение - 0.01,
//
//   СтандартнаяОбработка - Булево - Если присваивается значение Ложь, то стандартный контроль выполняться не будет.
//
//   ПодключаемоеОборудование - СправочникСсылка.ПодключаемоеОборудования - не обязательный.
//                              Если заполнено оборудование и не заполнен способ контроля в общих параметрах,
//                              то способ контроля и допустимое расхождение можно получать из подключаемого оборудования.
Процедура ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры, СтандартнаяОбработка, ПодключаемоеОборудование = Неопределено) Экспорт
	
КонецПроцедуры

// Функция выполняет разделение фискальной строки.
//
Процедура РазделитьФискальнуюСтроку(ТекущаяПозиция, НовыеПозицииЧека, РасчетнаяЦена, РазницаСумм, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	// Запоминаем начальные значения.
	КоличествоНачальное = ТекущаяПозиция.Количество;
	СуммаСкидокНачальная = ТекущаяПозиция.СуммаСкидок;
	СуммаНДСНачальная = ТекущаяПозиция.СуммаНДС; // Рассчитывается формально, т.к. сумма НДС текущими драйверами игнорируется.
	СуммаНачальная = ТекущаяПозиция.Сумма;
	
	// Если разница есть, то ее делим на копейку.
	// Получаем количество, которое нужно переоценить.
	КоличествоПереоценки = Окр(РазницаСумм / 0.01, 3, 1);
	Если КоличествоПереоценки < 0 Тогда
		КоличествоПереоценки = -КоличествоПереоценки;
	КонецЕсли;
	
	// Из начального количества отнимаем количество переоценки.
	// Получаем количество, которое остается по расчетной цене.
	КоличествоРасчетное = ТекущаяПозиция.Количество - КоличествоПереоценки;
	
	// Цена переоценки во всех примерах отличается от расчетной на 1 копейку.
	// В  большую или меньшую сторону в зависимости от знака разницы - зависимость обратная.
	ЦенаПереоценки = РасчетнаяЦена - Окр(РазницаСумм / КоличествоПереоценки, 2, 1);
	
	// Теперь считаются суммы, т.к. по ним выполняется анализ коэффициента для пересчета
	СуммаПереоценки = Окр(КоличествоПереоценки * ЦенаПереоценки, 2, 1);
	СуммаРасчетная = Окр(КоличествоРасчетное * РасчетнаяЦена, 2, 1);
	
	// Распределяем суммы скидок пропорционально количеству.
	// Если суммы есть. А если их нет, то должно остаться Неопределено.
	Если СуммаСкидокНачальная <> Неопределено Тогда
		Если КоличествоПереоценки > КоличествоРасчетное Тогда
			СуммаСкидокПереоценки = Окр(СуммаСкидокНачальная * КоличествоПереоценки / КоличествоНачальное, 2, 1);
			СуммаСкидокРасчетная = СуммаСкидокНачальная - СуммаСкидокПереоценки;
		Иначе
			СуммаСкидокРасчетная = Окр(СуммаСкидокНачальная * КоличествоРасчетное / КоличествоНачальное, 2, 1);
			СуммаСкидокПереоценки = СуммаСкидокНачальная - СуммаСкидокРасчетная;
		КонецЕсли;
	КонецЕсли;
	// А суммы распределяем НДС пропорционально суммам.
	// Потому что распределение пропорционально количеству.
	// Вызывает расхождения в некоторых критичных ситуациях.
	// Если суммы есть. А если их нет, то должно остаться Неопределено.
	Если СуммаНДСНачальная <> Неопределено Тогда
		Если СуммаПереоценки > СуммаРасчетная Тогда
			СуммаНДСПереоценки = Окр(СуммаНДСНачальная * СуммаПереоценки / СуммаНачальная, 2, 1);
			СуммаНДСРасчетная = СуммаНДСНачальная - СуммаНДСПереоценки;
		Иначе
			СуммаНДСРасчетная = Окр(СуммаНДСНачальная * СуммаРасчетная / СуммаНачальная, 2, 1);
			СуммаНДСПереоценки = СуммаНДСНачальная - СуммаНДСРасчетная;
		КонецЕсли;
	КонецЕсли;
	ЕстьМарки = Ложь;
	СтарыйАлкоголь = Неопределено;
	НовыйАлкоголь = Неопределено;
	Если ТекущаяПозиция.Свойство("ПараметрыАлкогольнойПродукции") Тогда
		Если ТекущаяПозиция.ПараметрыАлкогольнойПродукции.Количество() > 0
		 	И ТекущаяПозиция.ПараметрыАлкогольнойПродукции[0] Тогда
			ВсегоАлкоголя = ТекущаяПозиция.ПараметрыАлкогольнойПродукции[1].Количество();
			Если ВсегоАлкоголя > 1 Тогда
				ЕстьМарки = Истина;
				СтарыйАлкоголь = Новый Массив;
				СтарыйАлкоголь.Добавить(ТекущаяПозиция.ПараметрыАлкогольнойПродукции[0]); //1 - Признак передаваемой акцизной продукции
				СтарыйАлкоголь.Добавить(Новый Массив); // 2 - Марки алкогольной продукции перезаполняются
				СтарыйАлкоголь.Добавить(ТекущаяПозиция.ПараметрыАлкогольнойПродукции[2]); // 3 - Объем алкогольной продукции
				СтарыйАлкоголь.Добавить(ТекущаяПозиция.ПараметрыАлкогольнойПродукции[3]); // 4 - Крепость алкогольной продукции
				СтарыйАлкоголь.Добавить(ТекущаяПозиция.ПараметрыАлкогольнойПродукции[4]); // 5 - КодВидаПродукции - код вида продукции по классификатору
				Для СчетчикМарок = КоличествоПереоценки + 1 По ВсегоАлкоголя Цикл
					СтарыйАлкоголь[1].Добавить(ТекущаяПозиция.ПараметрыАлкогольнойПродукции[1][СчетчикМарок - 1]);
				КонецЦикла;
				
				НовыйАлкоголь = Новый Массив;
				НовыйАлкоголь.Добавить(ТекущаяПозиция.ПараметрыАлкогольнойПродукции[0]); //1 - Признак передаваемой акцизной продукции
				НовыйАлкоголь.Добавить(Новый Массив); // 2 - Марки алкогольной продукции перезаполняются
				НовыйАлкоголь.Добавить(ТекущаяПозиция.ПараметрыАлкогольнойПродукции[2]); // 3 - Объем алкогольной продукции
				НовыйАлкоголь.Добавить(ТекущаяПозиция.ПараметрыАлкогольнойПродукции[3]); // 4 - Крепость алкогольной продукции
				НовыйАлкоголь.Добавить(ТекущаяПозиция.ПараметрыАлкогольнойПродукции[4]); // 5 - КодВидаПродукции - код вида продукции по классификатору
				Для СчетчикМарок = 1 По КоличествоПереоценки Цикл
					НовыйАлкоголь[1].Добавить(ТекущаяПозиция.ПараметрыАлкогольнойПродукции[1][СчетчикМарок - 1]);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Выводим вместо первоначальной строки две новых.
	// Сначала с расчетной ценой и остатком количества.
	// И суммой - произведение цены и количества.
	НоваяПозиция = ФорматноЛогическийКонтрольКлиентСервер.СкопироватьСтруктуру(ТекущаяПозиция);
	НоваяПозиция.Количество = КоличествоРасчетное;
	НоваяПозиция.ЦенаСоСкидками = РасчетнаяЦена;
	НоваяПозиция.Сумма = СуммаРасчетная;
	Если СуммаСкидокНачальная <> Неопределено Тогда
		НоваяПозиция.СуммаСкидок = СуммаСкидокНачальная - СуммаСкидокПереоценки;
	КонецЕсли;
	Если СуммаНДСНачальная <> Неопределено Тогда
		НоваяПозиция.СуммаНДС = СуммаНДСРасчетная;
	КонецЕсли;
	Если ЕстьМарки Тогда
		НоваяПозиция.ПараметрыАлкогольнойПродукции = СтарыйАлкоголь;
	КонецЕсли;
	НовыеПозицииЧека.Добавить(НоваяПозиция);
	
	// Потом с переоцененной ценой и переоцененным количеством.
	// И суммой - произведение цены и количества.
	НоваяПозиция = ФорматноЛогическийКонтрольКлиентСервер.СкопироватьСтруктуру(ТекущаяПозиция);
	НоваяПозиция.Количество = КоличествоПереоценки;
	НоваяПозиция.ЦенаСоСкидками = ЦенаПереоценки;
	НоваяПозиция.Сумма = СуммаПереоценки;
	Если СуммаСкидокНачальная <> Неопределено Тогда
		НоваяПозиция.СуммаСкидок = СуммаСкидокПереоценки;
	КонецЕсли;
	Если СуммаНДСНачальная <> Неопределено Тогда
		НоваяПозиция.СуммаНДС = СуммаНДСПереоценки;
	КонецЕсли;
	Если ЕстьМарки Тогда
		НоваяПозиция.ПараметрыАлкогольнойПродукции = НовыйАлкоголь;
	КонецЕсли;
	НовыеПозицииЧека.Добавить(НоваяПозиция);
	
КонецПроцедуры

// Функция выполняет проверку необходимости форматно-логического контроля.
//
Функция НуженФорматноЛогическийКонтроль(ОбщиеПараметры, СтандартнаяОбработка) Экспорт
	
КонецФункции

// Функция получает структуру данных форматно-логического контроля.
//
Функция ПолучитьСтруктуруДанныхФорматноЛогическогоКонтроля(ПодключаемоеОборудование, СтруктураДанныхФорматноЛогическогоКонтроля, СтандартнаяОбработка) Экспорт
 	
КонецФункции
 
#КонецОбласти