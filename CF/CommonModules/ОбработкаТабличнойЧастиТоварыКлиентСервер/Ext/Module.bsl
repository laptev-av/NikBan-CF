
// Функция возвращает структуру кэшируемых значений.
//
Функция ПолучитьСтруктуруКэшируемыеЗначения() Экспорт
	
	КэшированныеЗначения = Новый Структура;
	КэшированныеЗначения.Вставить("КоэффициентыУпаковок", Новый Соответствие);
	КэшированныеЗначения.Вставить("ОбъемУпаковок",        Новый Соответствие);
	КэшированныеЗначения.Вставить("ВесУпаковок",          Новый Соответствие);
	КэшированныеЗначения.Вставить("ПроцентыСтавокНДС",    Новый Соответствие);
	КэшированныеЗначения.Вставить("Штрихкоды",            Новый Соответствие);
	КэшированныеЗначения.Вставить("ИспользоватьРучныеСкидкиВПродажах",         Неопределено);
	КэшированныеЗначения.Вставить("ИспользоватьАвтоматическиеСкидкиВПродажах", Неопределено);
	КэшированныеЗначения.Вставить("ИспользоватьРучныеСкидкиВЗакупках",         Неопределено);
	
	Возврат КэшированныеЗначения;
	
КонецФункции // ПолучитьСтруктуруКэшируемыеЗначения()

// Рассчитывает сумму НДС от суммы в зависимости от включения НДС в цену.
//
// ЦенаВключаетНДС - Булево - Признак включения НДС в цену.
// ПроцентНДС      - Число - Ставка НДС числом.
// Сумма           - Число - Сумма, от которой необходимо рассчитать сумму НДС.
//
Функция РассчитатьСуммуНДС(Сумма, ПроцентНДС, ЦенаВключаетНДС = Истина) Экспорт
	
	Если ЦенаВключаетНДС Тогда
		СуммаНДС = Сумма * ПроцентНДС / (ПроцентНДС + 1);
	Иначе
		СуммаНДС = Сумма * ПроцентНДС;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции // РассчитатьСуммуНДС()

// Рассчитывает сумму НДС от суммы с НДС (Сумма Всего) в зависимости от включения НДС в цену.
//
// ЦенаВключаетНДС - Булево - Признак включения НДС в цену.
// ПроцентНДС      - Число - Ставка НДС числом.
// Сумма           - Число - Сумма с НДС, от которой необходимо рассчитать сумму НДС.
//
Функция РассчитатьСуммуНДСПоСуммеСНДС(Сумма, ПроцентНДС, ЦенаВключаетНДС = Истина) Экспорт
	
	Если ЦенаВключаетНДС Тогда
		СуммаНДС = Сумма * ПроцентНДС / (ПроцентНДС + 1);
	Иначе
		СуммаНДС = Сумма * (1 - 1 / (ПроцентНДС + 1));
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции

// Возвращает структуру, которая затем обрабатывается процедурами заполнения ТЧ.
// Параметры:
//		Штрихкод - штрихкод, который необходимо обработать.
//		Количество - количество товаров с указанным штрихкодом.
Функция ПолучитьСтруктуруДанныхШтрихкода(Штрихкод, Количество) Экспорт

	Возврат Новый Структура("Штрихкод, Количество", Штрихкод, Количество);

КонецФункции

// Определяется сумму изменений автоматической скидки и пропорционально изменяет суммы скидок по строке.
// Параметры:
//  Скидки    - Табличная часть СкидкиНаценки (На клиенте ДанныеКоллекция).
//  КлючСвязи - ключ связи строки.
//  СуммаАвтоматическойСкидки - Новая сумма скидки.
Процедура РаспределитьСуммуИзмененийСтрокиТоваровНаТабличнуюЧастьСкидки(СкидкиНаценки, КлючСвязи, СуммаАвтоматическойСкидки) Экспорт
	
	МассивСтрокСкидки = СкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	
	Если МассивСтрокСкидки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщаяСуммаСкидкиВТаблице = 0;
	МаксСуммаСкидки          = 0;
	МаксСтрокаТаблицы        = Неопределено;
	
	Для каждого СтрокаСкидки Из МассивСтрокСкидки Цикл
		
		ОбщаяСуммаСкидкиВТаблице = ОбщаяСуммаСкидкиВТаблице + СтрокаСкидки.Сумма;
		СуммаВСтроке = ?(СтрокаСкидки.Сумма > 0, СтрокаСкидки.Сумма, - СтрокаСкидки.Сумма);
		
		Если МаксСуммаСкидки < СуммаВСтроке Тогда
			МаксСуммаСкидки   = СуммаВСтроке;
			#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
				МаксСтрокаТаблицы = СтрокаСкидки;
			#Иначе
				МаксСтрокаТаблицы = СтрокаСкидки.ПолучитьИдентификатор();
			#КонецЕсли
		КонецЕсли;
		
	КонецЦикла;
	
	Если МаксСтрокаТаблицы = Неопределено ИЛИ ОбщаяСуммаСкидкиВТаблице = 0 Тогда
		Возврат
	КонецЕсли;
	
	КоэффициентПересчета = СуммаАвтоматическойСкидки / ОбщаяСуммаСкидкиВТаблице;
	ОбщаяСуммаСкидкиВТаблице = 0;
	
	Для каждого СтрокаСкидки Из МассивСтрокСкидки Цикл
		СтрокаСкидки.Сумма = КоэффициентПересчета * СтрокаСкидки.Сумма;
		ОбщаяСуммаСкидкиВТаблице = ОбщаяСуммаСкидкиВТаблице + СтрокаСкидки.Сумма;
	КонецЦикла;
	
	Если (СуммаАвтоматическойСкидки - ОбщаяСуммаСкидкиВТаблице) <> 0 Тогда
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			СтрокаМакСкидки = МаксСтрокаТаблицы;
		#Иначе
			СтрокаМакСкидки = СкидкиНаценки.НайтиПоИдентификатору(МаксСтрокаТаблицы);
		#КонецЕсли
		СтрокаСкидки.Сумма = СтрокаСкидки.Сумма + (СуммаАвтоматическойСкидки - ОбщаяСуммаСкидкиВТаблице);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПОЛУЧЕНИЯ СТРУКТУР ПАРАМЕТРОВ ДЛЯ ОБРАБОТКИ ТАБЛИЧНОЙ ЧАСТИ "ТОВАРЫ".

// Функция возвращает структуру пересчета суммы НДС в строке.
//
Функция ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Функция возвращает структуру пересчета суммы НДС в табличной части.
//
Функция ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	СтруктураЗаполненияЦены.Вставить("НеобходимоОбработатьВсюТЧ");
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Функция возвращает структуру заполнения ставки НДС.
//
Функция ПолучитьСтруктуруЗаполненияСтавкиНДС(Объект) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Дата"       , Объект.Дата);
	Результат.Вставить("Организация", Объект.Организация);
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает структуру обработки штрихкода.
//
Функция ПолучитьСтруктуруОбработкиШтрихкодов(Объект, Штрихкоды, СтруктураДействийСДобавленнымиСтроками, СтруктураДействийСИзмененнымиСтроками) Экспорт
	
	Если ТипЗнч(Штрихкоды) = Тип("Массив") Тогда
		МассивШтрихкодов = Штрихкоды;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(Штрихкоды);
	КонецЕсли;
	
	СтруктураОбработкиШтрихкода = Новый Структура;
	СтруктураОбработкиШтрихкода.Вставить("Штрихкоды",                              МассивШтрихкодов);
	СтруктураОбработкиШтрихкода.Вставить("СтруктураДействийСДобавленнымиСтроками", СтруктураДействийСДобавленнымиСтроками);
	СтруктураОбработкиШтрихкода.Вставить("СтруктураДействийСИзмененнымиСтроками",  СтруктураДействийСИзмененнымиСтроками);
	СтруктураОбработкиШтрихкода.Вставить("НеизвестныеШтрихкоды",                   Новый Массив);
	
	Возврат СтруктураОбработкиШтрихкода;
	
КонецФункции

// Функция возвращает структуру проверки серийных номеров по владельцу.
//
Функция ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, ТЧСерийныеНомера) Экспорт
	
	СтруктураПроверкиСерийныхНомеровПоВладельцу = Новый Структура;
	СтруктураПроверкиСерийныхНомеровПоВладельцу.Вставить(
		"МассивСерийныхНомеров",
		ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(ТекущаяСтрока.КлючСвязиСерийныхНомеров, ТЧСерийныеНомера));
	
	Возврат СтруктураПроверкиСерийныхНомеровПоВладельцу;
	
КонецФункции

// Функция возвращает массив серийных номеров строки товаров.
//
Функция ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(КлючСвязи, ТЧСерийныеНомера) Экспорт
	
	Результат = Новый Массив;
	Если КлючСвязи > 0 Тогда
		Для Каждого ТекСтрока Из ТЧСерийныеНомера.НайтиСтроки(Новый Структура("КлючСвязиСерийныхНомеров", КлючСвязи)) Цикл
			Результат.Добавить(ТекСтрока.СерийныйНомер);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает структуру пересчета цены и скидки при продаже.
//
Функция ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ИспользоватьРучныеСкидки");
	СтруктураЗаполненияЦены.Вставить("ИспользоватьАвтоматическиеСкидки");
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Функция возвращает структуру пересчета цены и скидки при закупках.
//
Функция ПолучитьСтруктуруПересчетаЦеныСкидкиВЗакупкахВТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ИспользоватьРучныеСкидки");
	СтруктураЗаполненияЦены.Вставить("ИспользоватьАвтоматическиеСкидки");
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Функция возвращает структуру заполнения цены продажи в строке.
//
Функция ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, ПриводитьКМинимальнойЦене = Ложь, ОбнулятьЦену = Истина) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	
	СтруктураЗаполненияЦены.Вставить("Дата"                     , Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("ОбъектЦенообразования"    , Объект.Магазин);
	СтруктураЗаполненияЦены.Вставить("ПриводитьКМинимальнойЦене", ПриводитьКМинимальнойЦене);
	СтруктураЗаполненияЦены.Вставить("ОбнулятьЦену", ОбнулятьЦену);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Функция возвращает структуру заполнения цены назначенной в строке.
//
Функция ПолучитьСтруктуруЗаполненияЦеныНазначеннойВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата"                     , Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("ОбъектЦенообразования"    , Объект.Магазин);
	СтруктураЗаполненияЦены.Вставить("ПриводитьКМинимальнойЦене", Ложь);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Функция возвращает структуру заполнения цены по виду цен.
//
Функция ПолучитьСтруктуруЗаполненияЦеныПоВидуЦенВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата"   , Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("ВидЦены", Объект.ВидЦены);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Функция возвращает структуру заполнения цены закупки в строке.
//
Функция ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата"       , Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Магазин"    , Объект.Магазин);
	СтруктураЗаполненияЦены.Вставить("Контрагент" , Объект.Контрагент);
	СтруктураЗаполненияЦены.Вставить("Ссылка"     , Объект.Ссылка);
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

// Функция возвращает структуру заполнения ставки НДС.
// Склад указывается в строке.
//
Функция СтруктураПараметровСтавкиНДС(Объект) Экспорт
	
	СтруктураПараметровСтавкиНДС = Новый Структура;
	СтруктураПараметровСтавкиНДС.Вставить("Дата", 			Объект.Дата);
	СтруктураПараметровСтавкиНДС.Вставить("Организация", 	Объект.Организация);
	
	Возврат СтруктураПараметровСтавкиНДС;
	
КонецФункции

// Функция возвращает структуру заполнения ставки НДС
// Склад указывается в шапке.
//
Функция СтруктураПараметровСтавкиНДССкладВШапке(Объект) Экспорт
	
	СтруктураПараметровСтавкиНДС = Новый Структура;
	СтруктураПараметровСтавкиНДС.Вставить("Дата", 			Объект.Дата);
	СтруктураПараметровСтавкиНДС.Вставить("Организация", 	Объект.Организация);
	СтруктураПараметровСтавкиНДС.Вставить("Склад", 			Объект.Склад);
	
	Возврат СтруктураПараметровСтавкиНДС;
	
КонецФункции

// Функция возвращает структуру заполнения ставки НДС.
// Ставка НДС зависит от параметра УчитыватьНДС.
//
Функция СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект) Экспорт
	
	СтруктураПараметровСтавкиНДС = Новый Структура;
	СтруктураПараметровСтавкиНДС.Вставить("Дата", 			Объект.Дата);
	СтруктураПараметровСтавкиНДС.Вставить("УчитыватьНДС", 	Объект.УчитыватьНДС);
	
	Возврат СтруктураПараметровСтавкиНДС;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОТОБРАЖЕНИЯ ИТОГОВ ТЧ НА ФОРМЕ ДОКУМЕНТА

// Заполняет поле СуммаВсего в зависимости от признака включения НДС в цену.
//
// Параметры:
// Таблица         - ДанныеФормыКоллекция - Таблица, в которой необходимо заполнить колонку СуммаВсего.
// ЦенаВключаетНДС - Булево - признак включения НДС в цену.
//
Процедура ЗаполнитьСуммуВсегоВТаблице(Таблица, ЦенаВключаетНДС) Экспорт
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		ЗаполнитьСуммуВсегоВСтрокеТаблицы(СтрокаТаблицы, ЦенаВключаетНДС);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСуммуВсегоВТаблице()

// Заполняет поле СуммаВсего в зависимости от признака включения НДС в цену.
//
// Параметры:
// СтрокаТаблицы   - ДанныеФормыЭлементКоллекции - Строка таблицы, в которой необходимо заполнить поле СуммаВсего.
// ЦенаВключаетНДС - Булево - признак включения НДС в цену.
//
Процедура ЗаполнитьСуммуВсегоВСтрокеТаблицы(СтрокаТаблицы, ЦенаВключаетНДС) Экспорт
	
	Если ЦенаВключаетНДС Тогда
		СтрокаТаблицы.СуммаВсего = СтрокаТаблицы.Сумма;
	Иначе
		СтрокаТаблицы.СуммаВсего = СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСуммуВсегоВСтрокеТаблицы()

// Получает сумму ручных скидок.
//
// Параметры:
// Товары         		  - тч документа для подсчета суммы ручных скидок.
// СуммаРучныхСкидок      - переменная, в которую будет помещена итоговая сумма.
//
Процедура ПолучитьСуммуРучныхСкидокДокумента(Знач Товары, СуммаРучныхСкидок) Экспорт
	
	СуммаИтог = Товары.Итог("СуммаРучнойСкидки");

	Если СуммаИтог <> СуммаРучныхСкидок Тогда
		СуммаРучныхСкидок = СуммаИтог;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСуммуВсегоВСтрокеТаблицы()

// Рассчитывает сумму документа и помещает рассчитанное значение в реквизит формы СуммаВсего.
//
// Параметры:
// Товары          - тч документа для подсчета суммы документа.
// ЦенаВключаетНДС - Признак включения НДС в цену документа.
// СуммаВсего      - Реквизит формы документа, в который будет помещена сумма.
//
Процедура ОбновитьСуммыПодвала(Знач Товары, Знач ЦенаВключаетНДС, СуммаВсего) Экспорт

	СуммаДокумента = ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС);

	Если СуммаДокумента <> СуммаВсего Тогда
		СуммаВсего = СуммаДокумента;
	КонецЕсли;

КонецПроцедуры

// Рассчитывает дополнительную сумму документа и добавляет рассчитанное значение к реквизиту формы СуммаВсего.
//
// Параметры:
// Товары      - тч документа для подсчета суммы документа.
// ИмяРеквизита - Имя реквизита по которому рассчитывается Итог.
// СуммаВсего   - Реквизит формы документа, в который будет помещена сумма.
//
Процедура ДополнитьСуммыПодвала(Знач Товары, Знач ИмяРеквизита = "Сумма", СуммаВсего) Экспорт

	ДополнительнаяСумма = Товары.Итог(ИмяРеквизита);

	Если ДополнительнаяСумма <> 0 Тогда
		СуммаВсего = СуммаВсего + ДополнительнаяСумма;
	КонецЕсли;

КонецПроцедуры

// Возвращает сумму документа с учетом НДС.
//
// Параметры:
// Товары          - тч документа для подсчета суммы документа.
// ЦенаВключаетНДС - Признак включения НДС в цену документа.
//
// Возвращаемое значение:
// Число
// Сумма документа с учетом НДС.
//
Функция ПолучитьСуммуДокумента(Знач Товары, Знач ЦенаВключаетНДС) Экспорт

	СуммаДокумента = Товары.Итог("Сумма");

	Если Не ЦенаВключаетНДС Тогда
		СуммаДокумента = СуммаДокумента + Товары.Итог("СуммаНДС");
	КонецЕсли;

	Возврат СуммаДокумента;

КонецФункции

Функция НормализоватьПараметрыПересчетаЕдиниц(ТекущаяСтрока, УпаковкаНоменклатура) Экспорт
	
	Если УпаковкаНоменклатура = Неопределено Тогда
		
		Номенклатура   = ТекущаяСтрока.Номенклатура;
		Упаковка       = ТекущаяСтрока.Упаковка;
		НужноОкруглять = Истина;
		
	ИначеЕсли ТипЗнч(УпаковкаНоменклатура) = Тип("Структура") Тогда
		
		Если УпаковкаНоменклатура.Свойство("Упаковка") Тогда
			Упаковка = УпаковкаНоменклатура.Упаковка;
		ИначеЕсли УпаковкаНоменклатура.Свойство("ЕдиницаИзмеренияВЕТИС") Тогда
			Если ЗначениеЗаполнено(УпаковкаНоменклатура.ЕдиницаИзмеренияВЕТИС) Тогда
				Упаковка = УпаковкаНоменклатура.ЕдиницаИзмеренияВЕТИС;
			Иначе
				Упаковка = ТекущаяСтрока.ЕдиницаИзмеренияВЕТИС;
			КонецЕсли;
		Иначе
			Упаковка = ТекущаяСтрока.Упаковка;
		КонецЕсли;
		
		Если УпаковкаНоменклатура.Свойство("Номенклатура") Тогда
			Номенклатура = УпаковкаНоменклатура.Номенклатура;
		Иначе
			Номенклатура = ТекущаяСтрока.Номенклатура;
		КонецЕсли;
		
		Если УпаковкаНоменклатура.Свойство("НужноОкруглять") Тогда
			НужноОкруглять = УпаковкаНоменклатура.НужноОкруглять;
		Иначе
			НужноОкруглять = Истина;
		КонецЕсли;
		
	Иначе
		Упаковка       = УпаковкаНоменклатура;
		Номенклатура   = ТекущаяСтрока.Номенклатура;
		НужноОкруглять = Истина;
	КонецЕсли;
	
	Возврат Новый Структура("Номенклатура,Упаковка,НужноОкруглять", Номенклатура, Упаковка, НужноОкруглять);
	
КонецФункции

Функция НормализоватьПараметрыПересчетаЕдиницСуффикс(ТекущаяСтрока, ПараметрыПересчета) Экспорт
	
	Суффикс = "";
	НужноОкруглять = Истина;
	
	Если ТипЗнч(ПараметрыПересчета) = Тип("Структура") Тогда
		
		Если ПараметрыПересчета.Свойство("Суффикс") Тогда
			Суффикс = ПараметрыПересчета.Суффикс;
		КонецЕсли;
		
		Если ПараметрыПересчета.Свойство("НужноОкруглять") Тогда
			НужноОкруглять = ПараметрыПересчета.НужноОкруглять;
		КонецЕсли;
	Иначе
		Суффикс = ПараметрыПересчета;
	КонецЕсли;

	Если Суффикс = Неопределено Тогда
		Суффикс = "";
	КонецЕсли;
	
	Возврат Новый Структура("Суффикс,НужноОкруглять", Суффикс, НужноОкруглять); 
	
КонецФункции

// Пересчитывает количество товара ВетИС в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока			- Структура - Структура со свойствами строки документа.
//	СтруктураДействий		- Структура - Структура с действиями, которые нужно произвести.
//	КэшированныеЗначения	- Структура - Сохраненные значения параметров, используемых при обработке строки таблицы.
//
Процедура ПересчитатьКоличествоЕдиницВЕТИСВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыПересчетаКоличестваВЕТИС, ТекстОшибки;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницВЕТИС", ПараметрыПересчетаКоличестваВЕТИС) Тогда
		
		ПараметрыПересчета = ОбработкаТабличнойЧастиТоварыКлиентСервер.НормализоватьПараметрыПересчетаЕдиниц(ТекущаяСтрока, ПараметрыПересчетаКоличестваВЕТИС);
		
		КоличествоВЕТИС = ИнтеграцияВЕТИСРТКлиентСервер.ПересчитатьКоличествоЕдиницВЕТИС(
											ТекущаяСтрока["Количество"+ПараметрыПересчетаКоличестваВЕТИС.Суффикс],
											ПараметрыПересчета.Номенклатура,
											ПараметрыПересчета.Упаковка,
											ПараметрыПересчета.НужноОкруглять,
											КэшированныеЗначения,
											ТекстОшибки);
		
		Если КоличествоВЕТИС <> Неопределено Тогда
			ИмяКоличестваВЕТИС = "Количество" + ПараметрыПересчетаКоличестваВЕТИС.Суффикс + "ВЕТИС";
			
			ТекущаяСтрока[ИмяКоличестваВЕТИС] = КоличествоВЕТИС;
		ИначеЕсли ТекстОшибки <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает количество товара (в единицах хранения) в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока			- Структура - Структура со свойствами строки документа.
//	СтруктураДействий		- Структура - Структура с действиями, которые нужно произвести.
//	КэшированныеЗначения	- Структура - Сохраненные значения параметров, используемых при обработке строки таблицы.
//
Процедура ПересчитатьКоличествоЕдиницПоВЕТИСВСтрокеТЧКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыПересчетаКоличества, ТекстОшибки;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницПоВЕТИС", ПараметрыПересчетаКоличества) Тогда
		
		ПараметрыПересчета = ОбработкаТабличнойЧастиТоварыКлиентСервер.НормализоватьПараметрыПересчетаЕдиниц(ТекущаяСтрока, ПараметрыПересчетаКоличества);
		ИмяКоличестваВЕТИС = "Количество" + ПараметрыПересчетаКоличества.Суффикс + "ВЕТИС";
		
		Количество = ИнтеграцияВЕТИСРТКлиентСервер.ПересчитатьКоличествоЕдиниц(
											ТекущаяСтрока[ИмяКоличестваВЕТИС],
											ПараметрыПересчета.Номенклатура,
											ПараметрыПересчета.Упаковка,
											ПараметрыПересчета.НужноОкруглять,
											КэшированныеЗначения,
											ТекстОшибки);
											
		Если Количество <> Неопределено Тогда
			ТекущаяСтрока["Количество" + ПараметрыПересчетаКоличества.Суффикс] = Количество;
		ИначеЕсли ТекстОшибки <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает количество товара ВетИС при изменении единицы измерения ВетИС в текущей строке табличной 
// части документа.
//
// Параметры:
//	ТекущаяСтрока			- Структура - Структура со свойствами строки документа.
//	СтруктураДействий		- Структура - Структура с действиями, которые нужно произвести.
//	КэшированныеЗначения	- Структура - Сохраненные значения параметров, используемых при обработке строки таблицы.
//
Процедура ПересчитатьКоличествоЕдиницВЕТИСПоЕдиницеИзмеренияКлиент(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыПересчетаКоличестваВЕТИС, ТекстОшибки;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницВЕТИСПоЕдиницеИзмерения", ПараметрыПересчетаКоличестваВЕТИС) Тогда
		
		ПараметрыПересчета = ОбработкаТабличнойЧастиТоварыКлиентСервер.НормализоватьПараметрыПересчетаЕдиниц(ТекущаяСтрока, ПараметрыПересчетаКоличестваВЕТИС);
		ИмяКоличестваВЕТИС = ПараметрыПересчетаКоличестваВЕТИС.ИмяПоляКоличества;
		
		КоличествоВЕТИС = ИнтеграцияВЕТИСРТКлиентСервер.ПересчитатьКоличествоЕдиницВЕТИС(
											ТекущаяСтрока[ИмяКоличестваВЕТИС],
											ПараметрыПересчета.Номенклатура,
											ПараметрыПересчета.Упаковка,
											ПараметрыПересчета.НужноОкруглять,
											КэшированныеЗначения,
											ТекстОшибки);
		
		Если КоличествоВЕТИС <> Неопределено Тогда
			ТекущаяСтрока[ИмяКоличестваВЕТИС] = КоличествоВЕТИС;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЕРИИ

// Процедура обновляет кеш ключевых реквизитов текущей строки товаров. По ключевым реквизитам осуществляется связь
// между ТЧ серий и ТЧ товаров.
// Параметры:
//		ТаблицаФормы - таблица формы, отображающая ТЧ товаров.
//      КэшированныеЗначения - переменная модуля формы, в которой хранятся кешируемые значения.
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                               менеджера документа.
//      Копирование - признак, что кешированная строка скопирована (параметр события ПриНачалеРедактирования).
Процедура ОбновитьКэшированныеЗначенияДляУчетаСерий(ТекущаяСтрока,КэшированныеЗначения,ПараметрыУказанияСерий,Копирование = Ложь) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	ИмяТЧТовары = "";
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧТовары", ИмяТЧТовары) Тогда
		ИмяТЧТовары = "Товары";
	КонецЕсли;
	
	ИмяТЧСерии  = "";
	Если Не ПараметрыУказанияСерий.Свойство("ИмяТЧСерии", ИмяТЧСерии) Тогда
		ИмяТЧСерии = "Серии";
	КонецЕсли;
	
	ИмяКолонкиКоличество = "";
	Если Не ПараметрыУказанияСерий.Свойство("ИмяКолонкиКоличество", ИмяКолонкиКоличество) Тогда
		ИмяКолонкиКоличество = "Количество";
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.Свойство("ЭтоЗаказ")
		И ПараметрыУказанияСерий.ЭтоЗаказ
		И ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки")) = Неопределено
		И ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки")) = Неопределено Тогда
		ЕстьОтменаСтроки = Истина;
	Иначе
		ЕстьОтменаСтроки = Ложь;
	КонецЕсли;
	
	Если ТекущаяСтрока <> Неопределено
		И (Не Копирование
			Или ИмяТЧТовары = ИмяТЧСерии) Тогда
		
		КэшированныеЗначения.Вставить("Номенклатура"      , ТекущаяСтрока.Номенклатура);
		КэшированныеЗначения.Вставить("Характеристика"    , ТекущаяСтрока.Характеристика);
		КэшированныеЗначения.Вставить(ИмяКолонкиКоличество, ТекущаяСтрока[ИмяКолонкиКоличество]);
		
		Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
			КэшированныеЗначения.Вставить(СтрокаМассива,ТекущаяСтрока[СтрокаМассива]);
		КонецЦикла;
		Если ЕстьОтменаСтроки Тогда
			КэшированныеЗначения.Вставить("Отменено",ТекущаяСтрока.Отменено);
		КонецЕсли;
		
	Иначе
		КэшированныеЗначения.Вставить("Номенклатура"        , Неопределено);
		КэшированныеЗначения.Вставить("Характеристика"      , Неопределено);
		КэшированныеЗначения.Вставить(ИмяКолонкиКоличество, 0);
		
		Если ЕстьОтменаСтроки Тогда
			КэшированныеЗначения.Вставить("Отменено", Неопределено);
		КонецЕсли;
		
		Для Каждого СтрокаМассива Из ПараметрыУказанияСерий.ПоляСвязи Цикл
			КэшированныеЗначения.Вставить(СтрокаМассива,Неопределено);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет возможность регистрации новых серий, при указании серий в документе.
// Параметры:
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соответствующей процедурой модуля
//                               менеджера документа.
//
// Возвращаемоен значение - тип "Булево" - ИСТИНА - можно регистрировать новые серии, ЛОЖЬ - серии можно подбирать
// только по остаткам.
Функция НеобходимоРегистрироватьСерии(ПараметрыУказанияСерий) Экспорт
	ТоварВШапке = Ложь;
	Если Не ПараметрыУказанияСерий.Свойство("ТоварВШапке", ТоварВШапке) Тогда
		ТоварВШапке = Ложь;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.Свойство("РегистрироватьСерии") Тогда
		РегистрироватьСерии = ПараметрыУказанияСерий.РегистрироватьСерии;
	ИначеЕсли (ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКлиенту")) <> Неопределено 
		Или ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки")) <> Неопределено
		    И Не ТоварВШапке
		Или ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки")) <> Неопределено
		    И ТоварВШапке
		Или ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаПоВозвратуПоставщику")) <> Неопределено 
		Или ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаПоПеремещению")) <> Неопределено) Тогда
		РегистрироватьСерии = Ложь;
	Иначе
		РегистрироватьСерии = Истина;
	КонецЕсли;
	
	Возврат РегистрироватьСерии;
КонецФункции

// Процедура пересчета статуса СтатусСерийИПодарочныхСертификатов в табличной части.
//
Процедура ОбновитьСтатусыСерийИПодарочныхСертификатов(Товары) Экспорт
	
	Для Каждого СтрокаТаблицы Из Товары Цикл
		
		ОбновитьСтатусыСерийИПодарочныхСертификатовВСтроке(СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура пересчета статуса СтатусСерийИПодарочныхСертификатов в строке табличной части.
//
Процедура ОбновитьСтатусыСерийИПодарочныхСертификатовВСтроке(СтрокаТаблицы) Экспорт
	
	СтрокаТаблицы.СтатусыСерийИПодарочныхСертификатов = 0;
	Если СтрокаТаблицы.Свойство("ИспользоватьСерийныеНомера") И СтрокаТаблицы.ИспользоватьСерийныеНомера Тогда
		СтрокаТаблицы.СтатусыСерийИПодарочныхСертификатов = 12;
	ИначеЕсли СтрокаТаблицы.Свойство("СтатусУказанияСерий") Тогда
		СтрокаТаблицы.СтатусыСерийИПодарочныхСертификатов = СтрокаТаблицы.СтатусУказанияСерий;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет ключи связи по таблице документа или обработки

Процедура ЗаполнитьКлючиСвязиТЧ(ТабличнаяЧасть, ИмяРеквизитаСвязи) Экспорт
	
	ВремКлючСвязи = 0;
	
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		ВремКлючСвязи = ЗаполнитьКлючСвязи(ТабличнаяЧасть, СтрокаТЧ, ИмяРеквизитаСвязи)
	КонецЦикла;
	
КонецПроцедуры

// Заполняет ключ связи таблиц документа или обработки
//
Функция ЗаполнитьКлючСвязи(ТабличнаяЧасть, СтрокаТабличнойЧасти, ИмяРеквизитаСвязи, ВремКлючСвязи = 0) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяРеквизитаСвязи]) Тогда
		Если ВремКлючСвязи = 0 Тогда
			Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
				Если ВремКлючСвязи < СтрокаТЧ[ИмяРеквизитаСвязи] Тогда
					ВремКлючСвязи = СтрокаТЧ[ИмяРеквизитаСвязи];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		СтрокаТабличнойЧасти[ИмяРеквизитаСвязи] = ВремКлючСвязи + 1;
	КонецЕсли;
	
	Возврат СтрокаТабличнойЧасти[ИмяРеквизитаСвязи];
	
КонецФункции


// Возвращает сведения о коэффициенте пересчета единицы измерения ВетИС.
//
// Параметры:
//	ЕдиницаИзмеренияВЕТИС	- СправочникСсылка.ЕдиницыИзмеренияВЕТИС	- Единица измерения ВетИС, коэффициент которой нужно 
//																		получить.
//	КэшированныеЗначения	- Структура									- Сохраненные значения параметров, используемых при обработке 
//																		строки таблицы.
//	Номенклатура			- СправочникСсылка.Номенклатура				- Номенклатура для единицы хранения, которой осуществляется 
//																		получение коэффициента пересчета.
//
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//		* КодОшибки					- Число				- Код ошибки получения коэффициента.
//															0 - Нет ошибок;
//															1 - Не заполнена единица измерения в с правочнике 'ЕдиницыИзмеренияВЕТИС';
//															2 - В справочнике 'Номенклатура' выключена возможность пересчета количества 
//																в соответствующую мерную единицу измерения;
//															3 - Не удалось сопоставить единицу хранения справочника 'Номенклатура' 
//																с единицей измерения справочника 'ЕдиницыИзмеренияВЕТИС'.
//		* Коэффициент				- Число				- Коэффициент пересчета единицы измерения ВетИС.
//		* ТипИзмеряемойВеличины		- ПеречислениеСсылка.ТипыИзмеряемыхВеличин - Тип измеряемой величины единицы измерения 
//																					справочника 'ЕдиницыИзмеренияВЕТИС'.
//		* НужноОкруглятьКоличество	- Булево, Истина	- Признак необходимости округления количества при пересчете.
//
Функция ПолучитьКоэффициентЕдиницыИзмеренияВЕТИС(ЕдиницаИзмеренияВЕТИС, КэшированныеЗначения, Номенклатура = Неопределено) Экспорт
	
	Результат = Новый Структура("КодОшибки, Коэффициент, ТипИзмеряемойВеличины, НужноОкруглятьКоличество");
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВЕТИС) Тогда
		
		КлючКоэффициента = КлючКэшаУпаковки(Номенклатура, ЕдиницаИзмеренияВЕТИС);
		Если КэшированныеЗначения = Неопределено Тогда
			Кэш = Неопределено;
		Иначе
			Кэш = КэшированныеЗначения.КоэффициентыУпаковок[КлючКоэффициента];
		КонецЕсли;
		
		Если Кэш = Неопределено Тогда
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
				ЗначенияРеквизитов = ОбработкаТабличнойЧастиТоварыСервер.ДанныеЕдиницыИзмренияВЕТИС(
										ЕдиницаИзмеренияВЕТИС, 
										Номенклатура,
										КэшированныеЗначения);
				
				ЗаполнитьЗначенияСвойств(Результат, ЗначенияРеквизитов);
			#Иначе
				ТекстИсключения = НСтр("ru = 'Попытка получения коэффициента единицы измерения ВетИС на клиенте.'");
				ВызватьИсключение ТекстИсключения;
			#КонецЕсли
		Иначе
			Результат = Кэш;
		КонецЕсли;
	Иначе
		Результат.КодОшибки                = 0;
		Результат.Коэффициент              = 1;
		Результат.ТипИзмеряемойВеличины    = Неопределено;
		Результат.НужноОкруглятьКоличество = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КлючКэшаУпаковки(Номенклатура, Упаковка) Экспорт
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		КлючНоменклатура = Строка(Номенклатура.УникальныйИдентификатор());
	Иначе
		КлючНоменклатура = "ПустоеЗначение";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Упаковка) Тогда
		КлючУпаковка = Строка(Упаковка.УникальныйИдентификатор());
	Иначе
		КлючУпаковка = "ПустоеЗначение";
	КонецЕсли;
	
	Возврат КлючНоменклатура + КлючУпаковка;
	
КонецФункции


