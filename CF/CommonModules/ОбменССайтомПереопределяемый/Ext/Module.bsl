////////////////////////////////////////////////////////////////////////////////
// ОбменССайтомПереопределяемый: механизм обмена с сайтом
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ФормаУзлаОбмена

// Определяет имя формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  ВыбраннаяФорма - Форма - форма для узла плана обмена.
//
Процедура ПереопределитьФормуУзла(ВыбраннаяФорма) Экспорт
	
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - Форма - форма, из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект - ПланОбменаОбъект - узел плана обмена "ОбменССайтом".
//
Процедура ФормаУзлаПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - Форма - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ - Булево - признак отказа от выполнения действия.
//  ТекущийОбъект - ПланОбменаОбъект - записываемый объект.
//  ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//
Процедура ФормаУзлаПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт	
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект - ПланОбменаОбъект - записываемый объект.
//  ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//
Процедура ФормаУзлаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
КонецПроцедуры

// В данной процедуре можно изменить условное оформление формы узла обмена с сайтом.
//
// Параметры:
//  Форма  - УправляемаяФорма - форма узла обмена с сайтом.
//
Процедура УстановитьУсловноеОформлениеФормаУзлаОбмена(Форма) Экспорт
	
	
	
КонецПроцедуры

// В данной процедуре можно изменить видимость элементов формы узла обмена с сайтом
//
// Параметры:
//  Форма  - УправляемаяФорма - форма узла обмена с сайтом.
//
Процедура УстановитьВидимостьЭлементовФормыУзла(Форма) Экспорт
	
	Форма.Элементы.СтраницаОбменЗаказами.Видимость = Форма.Элементы.СтраницаОбменЗаказами.Видимость И Форма.Объект.ОбменЗаказами;
	
КонецПроцедуры

// Обработчик события ПриИзменении флажка формы узла обмена.
//
// Параметры:
//  ЭлементИмя - Строка - наименование элемента формы.
//  Форма - УправляемаяФорма - Форма узла обмена.
//
Процедура ПолеВводаПриИзмененииНаСервере(ЭлементИмя, Форма) Экспорт
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода формы узла обмена.
//
// Параметры:
//  ЭлементИмя - Строка - наименование элемента формы.
//  Форма - УправляемаяФорма - Форма узла обмена.
//
Процедура ПолеФлажкаПриИзмененииНаСервере(ЭлементИмя, Форма) Экспорт
	

	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования табличной части формы узла обмена.
//
// Параметры:
//  ЭлементИмя - Строка - наименование элемента формы.
//  Форма - УправляемаяФорма - Форма узла обмена.
//  НоваяСтрока - Булево - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево - Истина, если произошла отмена редактирования.
//  Отказ - Булево - Признак отказа от записи объекта.
//
Процедура ТаблицаФормыПередОкончаниемРедактированияНаСервере(ЭлементИмя, НоваяСтрока, ОтменаРедактирования, Отказ, Форма) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаДанных

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре
// ПолучитьТекстЗапросаОбновлениеПакетаПредложений или быть особенностью прикладного решения.
//
// Параметры:
//  ПрикладныеПараметры - Структура - параметры, добавленные в прикладном решении.
//  ПараметрыКомпоновки - ПараметрыСхемыКомпоновкиДанных - параметры, которые могли появиться в тексте запроса
//                                                      в процедуре ПолучитьТекстЗапросаОбновлениеПакетаПредложений.
//
Процедура УстановитьПараметрыЗапросаОбновлениеПакетаПредложений(ПрикладныеПараметры, ПараметрыКомпоновки)  Экспорт
	
	УстановитьПараметрыЗапросаПоЦенообразованию(ПараметрыКомпоновки);
	
КонецПроцедуры

// Заполняет структуру полями, которые должны быть добавлены в отбор настройки каталога.
// Указанные поля будут добавлены к предопределенными полям, заданным в макете 
// "СхемаВыгрузкиОбновлениеПакетаПредложений" плана обмена "Обмен с сайтом".
// Параметры:
//  ПоляОтбора - Структура - сюда добавляются поля отбора.
//		* Ключ - Наименование поля отбора;
//		* Значение - Описание типа значения добавляемого поля.
//
Процедура ЗаполнитьПоляОтбораОбновленияПакетаПредложений(ПоляОтбора) Экспорт
	
КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре
// ПолучитьТекстЗапросаПакетПредложений или быть особенностью прикладного решения.
// 
// Параметры:
//  ПрикладныеПараметры - Структура - параметры, добавленные в прикладном решении.
//  ПараметрыСхемыКомпоновки - ПараметрыСхемыКомпоновки - параметры схемы компоновки текста запроса в процедуре
//                                                        ПолучитьТекстЗапросаПакетПредложений.
//
Процедура УстановитьПараметрыЗапросаПакетПредложений(ПрикладныеПараметры, ПараметрыСхемыКомпоновки) Экспорт
	
	УстановитьПараметрКомпоновки(ПараметрыСхемыКомпоновки, "ИспользоватьДополнительныеРеквизитыИСведения", 
								  ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения"));
	
	УстановитьПараметрыЗапросаПоЦенообразованию(ПараметрыСхемыКомпоновки);
	
	
КонецПроцедуры

// Заполняет соответствие полями, которые должны быть добавлены в отбор настройки каталога.
// Указанные поля будут добавлены к предопределенными полям, заданным в макете 
// "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом".
// Поля в соответствии хранятся с привязкой к набору данных, к которому они относятся.
//
// Параметры:
//   ПоляОтбора - соответствие - сюда добавляются поля отбора.
//		* ИмяНабораДанных - Имя набора данных из макета "СхемаВыгрузкиПакетПредложений".
//		* Структура с полями данного набора.
//			* Ключ - Наименование поля отбора.
//			* Значение - Описание типа значения добавляемого поля.
//
Процедура ЗаполнитьПоляОтбораПакетаПредложений(ПоляОтбора) Экспорт
	
КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре 
// ПолучитьТекстыЗапросовКаталог или быть особенностью прикладного решения.
//
// Параметры:
//  ПрикладныеПараметры - Структура - параметры, добавленные в прикладном решении.
//  ПараметрыКомпоновки - ПараметрСхемыКомпоновкиДанных - параметры схемы компоновки.
//
Процедура УстановитьПараметрыЗапросаКаталог(ПрикладныеПараметры, ПараметрыКомпоновки) Экспорт
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ИспользоватьДополнительныеРеквизитыИСведения", 
								  ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения"));
	
	УстановитьПараметрыЗапросаПоЦенообразованию(ПараметрыКомпоновки);
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "КлассифицироватьПоВидамНоменклатуры",
								  ПрикладныеПараметры.КлассифицироватьПоВидамНоменклатуры);
	
КонецПроцедуры

// Заполняет соответствие полями, которые должны быть добавлены в отбор настройки каталога.
// Указанные поля будут добавлены к предопределенными полям, заданным в макете "СхемаВыгрузкиКаталог" 
// плана обмена "Обмен с сайтом". Поля в соответствии хранятся с привязкой к набору данных, к которому они относятся.
//
// Параметры:
//  ПоляОтбора - ТаблицаЗначений - таблица, в которую добавляются поля отбора:
//    * Наименование - Строка - имя поля.
//    * Синоним - Строка - пользовательское представление.
//    * ТипЗначения - ОписаниеТипов - тип значения поля.
//    * Отбор - Массив - содержит структуры отборов, необходимых при открытии формы выбора поля.
//
Процедура ЗаполнитьПоляОтбораКаталога(ПоляОтбора) Экспорт
	
КонецПроцедуры

// Позволяет внести изменения в компоновщик настроек СКД после загрузки в нее настроек при получении данных для выгрузки.
//
// Параметры:
//  КомпоновщикНастроек  - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек, в который можно внести изменения.
//  ИмяМакета  - Строка - имя макета выполняемой СКД которая выполняется.
//
Процедура КомпоновщикНастроекСхемыФормированияДанныхПослеЗагрузкиНастроек(КомпоновщикНастроек, ИмяМакета) Экспорт
	
	
КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре
// ПолучитьТекстЗапросаЗаказы или быть особенностью прикладного решения.
//
// Параметры:
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ПараметрыКомпоновки - ПараметрСхемыКомпоновкиДанных - параметры схемы компоновки текста запроса в процедуре
//                                                        ПолучитьТекстЗапросаЗаказы.
//
Процедура УстановитьПараметрыТекстаЗапросаЗаказы(ПрикладныеПараметры, ПараметрыКомпоновки) Экспорт
	
	
	
КонецПроцедуры

// Заполняет массив полями, которые должны быть удалены из отбора
// в макете "СхемаВыгрузкиКаталог" плана обмена "Обмен с сайтом".
//
// Параметры:
//  УдаляемыеПоля - Массив - наименованием полей, которые должны быть удалены из отбора.
//
Процедура ЗаполнитьУдаляемыеПоляОтбораКаталог(УдаляемыеПоля) Экспорт
	
КонецПроцедуры

// Заполняет массив полями, которые должны быть удалены из отбора
// в макете "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом".
// 
// Параметры:
//  УдаляемыеПоля - Массив - наименованием полей, которые должны быть удалены из отбора.
//
Процедура ЗаполнитьУдаляемыеПоляОтбораПакетПредложений(УдаляемыеПоля) Экспорт
	
КонецПроцедуры

// Заполняет массив полями, которые должны быть удалены из отбора
// в макете "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом".
//
// Параметры:
//  УдаляемыеПоля - Массив - наименованием полей, которые должны быть удалены из отбора.
//
Процедура ЗаполнитьУдаляемыеПоляОтбораОбновлениеПакетаПредложений(УдаляемыеПоля) Экспорт
	
КонецПроцедуры

// В данной процедуре возможно изменить параметры обмена перед началом обмена
//
// Параметры:
//  ПараметрыОбмена  - Структура - текущие параметры обмена, имеет следующие свойства:
//    * УзелОбмена - ПланОбмена.ОбменССайтом - план обмена, для которого будет выполнен обмен.
//    * НастройкиПодключения - структура настроек для подключения к сайту, содержит следующие свойства:
//        * Пользователь - Строка - имя пользователя для подключения к сайту.
//        * АдресСайта - Строка - адрес сайта.
//        * Пароль - Строка - пароль для подключения.
//    * ВыгружатьИзменения - Булево - если Истина, то будут выгружаться только измененные объекты.
//    * ОтборГруппыКатегорииНоменклатуры  - ПеречислениеСсылка.ВидыОтборовНоменклатуры - режим отбора номенклатуры
//                                                                                       (по группам или категориям).
//    * РазмерПорции - Число - количество товаров, данные о которых будут выгружены на сайт в одной порции данных.
//    * КоличествоПовторов - Число - количество попыток выгрузки данных на сайт в случае сбоя в обмене.
//    * ВладелецКаталога - ОпределяемыйТип.Организация - организация, от имени которой будет публиковаться каталог товаров
//    * ОбменЗаказами - Булево - определяет, загружать ли с сайта заказы.
//    * ОбменТоварами - Булево - определяет, выгружать ли на сайт данные, связанные с товарами.
//    * ВыгружатьТовары - Булево - определяет, выгружать ли на сайт каталог товаров.
//    * ВыгружатьЦеныОстатки - Булево - определяет, выгружать ли на сайт данные по ценам.
//    * ВыгружатьОбновленияЦенИОстатков - Булево - определяет, выгружать ли на сайт информацию об изменении цен и остатков товаров.
//    * КаталогВыгрузки - Строка - каталог на диске, в который будут сохранены файлы обмена.
//    * ВыгружатьНаСайт - Булево - если Истина, то выгрузка будет производиться непосредственно на сайт, а не в каталог выгрузки.
//    * ВыгружатьКартинки - Булево - определяет, выполнять ли выгрузку изображений номенклатуры.
//    * РазрешенныеТипыКартинок - Массив - содержит допустимые расширения файлов картинок.
//    * НаименованиеНалога - Строка - наименование налога, применяемого к товару.
//    * ИспользоватьХарактеристики - Булево - определяет, используются ли характеристики.
//    * РежимЗапускаОбмена - Строка - строка, поясняющая был ли обмен запущен интерактивно
//                                    или через регл. задание.
//    * ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                        подсистемы в прикладное решение.
//    * ФайлЗагрузки - Строка - путь к файлу XML, из которого будут загружаться заказы.
//    * СтруктураИзменений - Структура - имеет следующие свойства:
//        * Заказы - Массив - массив ссылок на заказы, подлежащие выгрузке.
//        * Товары - Массив - массив ссылок на товары, подлежащие выгрузке.
//  УзелОбмена  - ПланОбмена.ОбменССайтом - план обмена, для которого будет выполнен обмен.
//
Процедура ИзменитьПараметрыОбмена(ПараметрыОбмена, УзелОбмена) Экспорт
	
	КлассифицироватьПоВидамНоменклатуры = Ложь;
	Если ПараметрыОбмена.ВидОтбораПоНоменклатуре = Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры Тогда
		КлассифицироватьПоВидамНоменклатуры = Истина;
	КонецЕсли;
	
	ПараметрыОбмена.ПрикладныеПараметры.Вставить("КлассифицироватьПоВидамНоменклатуры", КлассифицироватьПоВидамНоменклатуры);
	
КонецПроцедуры

// Процедура записывает в БП информацию о номера и дате заказа на сайте.
//
// Параметры:
//  ТаблицаЗаказов - ТаблицаЗначений - информация о заказах, загруженных с сайта:
//    * Заказ - Ссылка - ссылка на документ Заказ покупателя;
//    * НомерЗаказа - Строка - номер заказа на сайте;
//    * ДатаЗаказа - Дата - дата заказа на сайте;
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//
Процедура ЗаписатьДатуНомерЗаказовССайта(ТаблицаЗаказов, ПрикладныеПараметры) Экспорт
	
	Для Каждого ТекСтрока Из ТаблицаЗаказов Цикл
		
		ЗаказОбъект = ТекСтрока.Заказ.ПолучитьОбъект();
		ЗаказОбъект.НомерЗаказаНаСайте = ТекСтрока.НомерЗаказа;
		ЗаказОбъект.ДатаЗаказаНаСайте  = ТекСтрока.ДатаЗаказа;
		ЗаказОбъект.ОбменДанными.Загрузка = Истина;
		ЗаказОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Заполняет информацию о складах.
// 
// Параметры:
//	СписокТочекСамовывоза - СписокЗначений - точки самовывоза, указанные в узле обмена.
//	СписокСкладов - СписокЗначений - склады полученные в результате выполнения запроса (при выгрузке пакета предложений).
//	ИнформацияОТочкахСамовывоза - ТаблицаЗначений - таблица, в которой будет храниться информация о точках самовывоза и складах.
//    * Склад - Ссылка, ссылка на элемент справочника (склады или точки самовывоза).
//    * СкладНаименование - наименование склада.
//    * СкладАдрес - Адресная информация о складе - Структура СкладАдрес.
//    * СкладКонтактнаяИнформация - Контактная информация о складе  -структура "СкладКонтактнаяИнформация".
//	СкладАдрес - Структура - структура, в которой необходимо представить адресную информацию о складе:
//    * ПочтовыйИндекс, Страна, Регион, Район, НаселенныйПункт, Город,Улица, Дом, Корпус, Квартира.
//	СкладКонтактнаяИнформация - Структура - структура, в которой необходимо представить контактную информацию о складе:
//    * ТелефонРабочий, Почта, КоординатыНаКарте, Прочее.
//
Процедура ЗаполнитьИнформациюОСкладахИТочкахСамовывоза(СписокТочекСамовывоза, СписокСкладов,
	ИнформацияОТочкахСамовывоза, СкладАдрес, СкладКонтактнаяИнформация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Магазины.Ссылка,
	|	Магазины.Наименование,
	|	ЕСТЬNULL(МагазиныКонтактнаяОтправитель.Представление, """") КАК АдресМагазина,
	|	ЕСТЬNULL(МагазиныКонтактнаяОтправитель.ЗначенияПолей, """") КАК ЗначенияПолей
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины.КонтактнаяИнформация КАК МагазиныКонтактнаяОтправитель
	|		ПО Магазины.Ссылка = МагазиныКонтактнаяОтправитель.Ссылка
	|			И (МагазиныКонтактнаяОтправитель.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресМагазина))
	|ГДЕ
	|	(Магазины.Ссылка В (&СписокТочекСамовывоза)
	|			ИЛИ Магазины.Ссылка В (&СписокСкладов))";
	
	Запрос.УстановитьПараметр("СписокТочекСамовывоза", СписокТочекСамовывоза);
	Запрос.УстановитьПараметр("СписокСкладов", СписокСкладов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ИнформацияОТочкахСамовывоза.Добавить();
		СтрокаТаблицы.Склад                     = Выборка.Ссылка;
		СтрокаТаблицы.СкладНаименование         = Выборка.Наименование;
		СтрокаТаблицы.СкладАдрес                = СкладАдрес;
		СтрокаТаблицы.СкладКонтактнаяИнформация = СкладКонтактнаяИнформация;
		
		СтранаРоссия = Справочники.СтраныМира.Россия;
		
		Если ЗначениеЗаполнено(Выборка.АдресМагазина) Тогда
			СтрокаТаблицы.СкладКонтактнаяИнформация.Почта = Выборка.АдресМагазина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// В зависимости от значения функциональной опции "Использовать статусы заказов" устанавливается
// видимость табличной части "Соответствия заказов".
//
// Параметры:
//  Видимость - Булево - признак видимости табличной части.
//
Процедура УстановитьВидимостьТабличнойЧастиСоответствиеЗаказовФормыУзлаПланаОбмена(Видимость) Экспорт
	
	Видимость = Истина;
	
КонецПроцедуры

// В зависимости от типа регистрируемых данных определяет данные, которые необходимо зарегистрировать в плане обмена.
//
// Параметры:
//	Объект. Тип: СправочникОбъект, ДокументОбъект.
//			Регистрируемый объект данных, например, НоменклатураОбъект, ЗаказОбъект.
// 
//	МассивУзловТовары. Тип: массив значений.
//			Массив узлов плана обмена "Обмен с сайтом" в которых необходимо регистрировать объект в том случае если он
//			является Номенклатурой.
//
//	МассивУзловЗаказы. Тип: массив значений.
//			Массив узлов плана обмена "Обмен с сайтом" в которых необходимо регистрировать объект в том случае если он
//			является Заказом.
Процедура ЗарегистрироватьИзмененияВУзлах(Объект, МассивУзловТовары, МассивУзловЗаказы, Замещение = Ложь) Экспорт
	
	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ТоварыНаСкладах")
		ИЛИ ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ДействующиеЦеныНоменклатуры")
		ИЛИ ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры")
		Тогда
		
		Если Замещение Тогда
			
			ОбъектМетаданных = Объект.Метаданные();
			
			ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);
			
			Если ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыСведений() Тогда
				
				СтарыйНаборЗаписей = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			ИначеЕсли ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыНакопления() Тогда
				
				СтарыйНаборЗаписей = РегистрыНакопления[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			Иначе
				
				Возврат;
				
			КонецЕсли;
			
			Для Каждого ЗначениеОтбора Из Объект.Отбор Цикл
				
				Если ЗначениеОтбора.Использование = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
				СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
				СтрокаОтбора.Использование = Истина;
				
			КонецЦикла;
			
			СтарыйНаборЗаписей.Прочитать();
			
			Для каждого Запись Из СтарыйНаборЗаписей Цикл
			
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Запись.Номенклатура);
			
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого Запись Из Объект Цикл
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Запись.Номенклатура);
			
		КонецЦикла;

	
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Номенклатура") Тогда
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Ссылка);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.НоменклатураПрисоединенныеФайлы") Тогда
		
		Если НЕ ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.ВладелецФайла);

		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ХарактеристикиНоменклатуры") Тогда
		
		Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Владелец);
		ИначеЕсли ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.ВидНоменклатуры = &ВидНоменклатуры";
			
			Запрос.УстановитьПараметр("ВидНоменклатуры", Объект.Владелец);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Выборка.Ссылка);
			КонецЦикла;
			
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ЗаказПокупателя") Тогда 
		
		Для Каждого УзелОбмена Из МассивУзловЗаказы Цикл
			
			СтруктураПараметровССайта = Неопределено;
			РеквизитыЗаказаНаСайте(Объект.Ссылка, УзелОбмена, СтруктураПараметровССайта);
			
			Если НЕ СтруктураПараметровССайта = НеОпределено Тогда
				
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Объект.Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.ЗаказыПокупателей") Тогда
		
		Для Каждого ЗначениеОтбора Из Объект.Отбор Цикл
			
			Если ЗначениеОтбора.Использование = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеОтбора.Имя = "Регистратор" Тогда
				
				Если ТипЗнч(ЗначениеОтбора.Значение) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
					ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловЗаказы, ЗначениеОтбора.Значение);
				ИначеЕсли ТипЗнч(ЗначениеОтбора.Значение) = Тип("ДокументСсылка.ЧекККМ") Тогда
					Если ЗначениеЗаполнено(ЗначениеОтбора.Значение.ЗаказПокупателя) Тогда
						ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловЗаказы, ЗначениеОтбора.Значение.ЗаказПокупателя);
					КонецЕсли;
				ИначеЕсли ТипЗнч(ЗначениеОтбора.Значение) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ОтчетОРозничныхПродажахТовары.ЗаказПокупателя КАК ЗаказПокупателя
					|ИЗ
					|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
					|ГДЕ
					|	ОтчетОРозничныхПродажахТовары.Ссылка = &Ссылка
					|	И НЕ ОтчетОРозничныхПродажахТовары.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)";
					
					Запрос.УстановитьПараметр("Ссылка", ЗначениеОтбора.Значение);
					
					Результат = Запрос.Выполнить();
					Выборка = Результат.Выбрать();
					
					Пока Выборка.Следующий() Цикл
						ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловЗаказы, Выборка.ЗаказПокупателя);
					КонецЦикла;
					
				КонецЕсли;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет статус контрагента по значению перечисления.
//
// Параметры:
//  ДанныеКонтрагентаЮрФизЛицо - ПеречислениеСсылка - определяет юридический статус контрагента.
//                               В зависимости от статуса контрагента при выгрузке на сайт
//                               будут по разному заполняется данные о контрагенте.
//  ЭтоЮрЛицо - Булево - если это юридическое лицо заполняется ИНН, КПП, если это физическое лицо, то наименование.
//
Процедура ОпределитьЭтоЮрЛицо(ДанныеКонтрагентаЮрФизЛицо, ЭтоЮрЛицо) Экспорт
	
	ЭтоЮрЛицо = ДанныеКонтрагентаЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	
КонецПроцедуры

// К ИД номенклатуры добавляет ИД характеристики, если она задана.
//
// Параметры:
//	Номенклатура - Ссылка - например, СправочникСсылка.Номенклатура.
//	Характеристика - Ссылка - например, СправочникСсылка.ХарактеристикиНоменклатуры.
//  Ид - Строка - идентификатор.
//
Процедура ДополнитьИдНоменклатурыХарактеристикой(Номенклатура, Характеристика, Ид) Экспорт
	
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")
		И ТипЗнч(Характеристика) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры")
		И (НЕ Номенклатура.ЭтоГруппа)
		И ЗначениеЗаполнено(Характеристика) Тогда
		
		Ид = Ид + "#" + Строка(Характеристика.УникальныйИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

// Получает заказы, загруженные с сайта.
//  Параметры:
// ПрикладныеПараметры - структура, содержащая параметры прикладного решения.
// ТаблицаНомераИДатыЗаказа - Таблица значений, содержащая номера и даты заказов, загруженных с сайта.
//		Колонки: НомерЗаказа, ДатаЗаказа
// 
// Результат - таблица значений, в которую будет помещаться информация о заказах.
// 		Колонки:ЗаказПокупателя - ссылка на документ Заказ.
//				НомерЗаказаНаСайте - Номер заказа.
//				НеОбновлятьЗаказ - Признак того, что Заказ не должен перезаписываться.
// 
Процедура ПолучитьРанееЗагруженныеДокументы(ПрикладныеПараметры, ТаблицаНомераИДатыЗаказов, Результат) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНомераИДаты.НомерЗаказа,
	|	ТаблицаНомераИДаты.ДатаЗаказа
	|ПОМЕСТИТЬ ТаблицаНомераИДаты
	|ИЗ
	|	&ТаблицаНомераИДаты КАК ТаблицаНомераИДаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК ЗаказПокупателя,
	|	ЗаказПокупателя.НомерЗаказаНаСайте,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.Отменено
	|				ИЛИ ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеОбновлятьЗаказ
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	(ЗаказПокупателя.НомерЗаказаНаСайте, ЗаказПокупателя.ДатаЗаказаНаСайте) В
	|			(ВЫБРАТЬ
	|				ТаблицаНомераИДаты.НомерЗаказа КАК НомерЗаказа,
	|				ТаблицаНомераИДаты.ДатаЗаказа КАК ДатаЗаказа
	|			ИЗ
	|				ТаблицаНомераИДаты КАК ТаблицаНомераИДаты)";
	
	Запрос.Параметры.Вставить("ТаблицаНомераИДаты", ТаблицаНомераИДатыЗаказов);
	Результат = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Создает новый документ "Заказ покупателя".
// Параметры:
// ДокументОбъект - ДокументОбъект. Выходной параметр, заполняется созданным Объектом документа Заказ.
Процедура СоздатьНовыйДокументЗаказ(ДокументОбъект) Экспорт
	
	ДокументОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();

КонецПроцедуры

// Заполняет документ заказ данными с сайта.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект - объект документа Заказ покупателя.
//  РеквизитыЗаказа - Структура - содержит значения реквизитов заказа, загруженных с сайта:
//     * Ид - Идентификатор заказа, очень часто тоже что и номер.
//     * Дата				- дата создания заказа на сайте.
//     * Номер				- номер заказа на сайте.
//     * ДатаОтгрузки		- дата отгрузки товара по заказу.
//     * ВалютаДокументаКод	- трехзначный идентификатор валюты.
//     * ВидЦенНаименование	- наименование вида цены.
//     * СуммаВключаетНДС	- признак включения НДС.
//     * НаименованиеСкидки	- наименование скидки.
//     * ПроцентСкидки		- процент скидки.
//     * СуммаСкидки		- сумма скидки по заказу.
//     * СкладНаименование 	- наименование склада, точки самовывоза.
//     * ПодразделениеНаименование - наименование подразделения.
//     * Контрагент			- ссылка на контрагента, который уже был идентифицирован в базе.
//     * ТочкаСамовывоза	- ссылка на элемент справочника, который в прикладном решении является справочником точек самовывоза или Неопределено.
//     * Товары				- табличная часть документа.
//     * Комментарий		- текстовый комментарий.
//  СвойстваЗаказа - Соответствие - содержит строковое представления свойств и значений заказа.
//  ПрикладныеПараметры - Структура - содержит параметры прикладного решения, добавленные на форму узла плана обмена.
//  ОписаниеОшибки - Строка - текстовое представление ошибки.
//  Успешно - Булево - признак заполнения документа.
//
Процедура ЗаполнитьЗаказ(ДокументОбъект, РеквизитыЗаказа, СвойстваЗаказа, ПрикладныеПараметры, ОписаниеОшибки, Успешно) Экспорт
	
	ДокументОбъект.Дата        = РеквизитыЗаказа.Дата;
	ДокументОбъект.Организация = ПрикладныеПараметры.Организация;
	ДокументОбъект.Контрагент = РеквизитыЗаказа.Контрагент;
	ДокументОбъект.Комментарий = ""+РеквизитыЗаказа.Комментарий +
				?(ЗначениеЗаполнено(РеквизитыЗаказа.ТочкаСамовывоза), РеквизитыЗаказа.ТочкаСамовывоза.Наименование,"");
	
	Если ЗначениеЗаполнено(РеквизитыЗаказа.ТочкаСамовывоза) Тогда
		
		Магазин = МагазинПоНаименованию(РеквизитыЗаказа.ТочкаСамовывоза.Наименование);
		ДокументОбъект.Магазин = Магазин;
		ДокументОбъект.Склад   = ДокументОбъект.Магазин.СкладПродажи;
			
	КонецЕсли;
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	ДокументОбъект.СкидкиРассчитаны = Истина;
	ДокументОбъект.ЖелаемаяДатаПродажи = РеквизитыЗаказа.Дата;
	
	ТаблицаНоменклатура = Неопределено;
	
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект, РеквизитыЗаказа.Товары, ПрикладныеПараметры);
	
	Для каждого СтрокаТовары Из ДокументОбъект.Товары Цикл
		
		Если НЕ СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ДокументОбъект.УчитыватьНДС = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.ЦенаВключаетНДС = ДокументОбъект.УчитыватьНДС;
	
	СтатусЗаказа = СвойстваЗаказа.Получить("Статус заказа");
	Если Не СтатусЗаказа = Неопределено Тогда
		
		Если ПрикладныеПараметры.Свойство("СоответствиеСтатусовЗаказов") Тогда
			ТаблицаСтатусов = ПрикладныеПараметры.СоответствиеСтатусовЗаказов;
			ЗначениеСтатуса = ТаблицаСтатусов.Найти(СтатусЗаказа, "СтатусЗаказаНаСайте");
		Иначе
			ЗначениеСтатуса = Неопределено;
		КонецЕсли;
		
		Если Не ЗначениеСтатуса = Неопределено Тогда
			ДокументОбъект.Статус = ЗначениеСтатуса.СтатусЗаказаВБазе;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Статус) Тогда
		
		ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПокупателей.НеСогласован;
		
	КонецЕсли;
	
	Успешно = Истина;
	
КонецПроцедуры

// Поиск контрагента по настройкам плана обмена.
//
// Параметры:
//	СтруктураСвойстваЗаказа - Структура - содержит реквизиты заказа, загруженные с сайта. В данной структуре необходимо
//                                        заполнить поле "Контрагент".
//  ДанныеКонтрагента - Структура - содержит реквизита контрагента, загруженная с заказа, по данным реквизитам будет
//                                  происходить поиск существующего контрагента или создание нового:
//    * ЮрЛицо - Тип Булево. Признак наличия статуса Юр. лицо у контрагента.
//    * ОфициальноеНаименование - Тип строка.Официальное Наименование контрагента Юр. лица.
//    * ПолноеНаименование - Тип строка. Полное наименование контрагента Юр. лица.
//    * Наименование - Тип строка. Наименование контрагента.
//    * ФИО - ФИО контрагента, если он Физ. лицо.
//    * ОКПО - код ОКПО
//    * ИНН - код ИНН
//    * КПП - код КПП
//    * РасчетныеСчета - Массив - элементами массива является структура, в которой описаны свойства
//                                расчетного счета (необязательное поле):
//        ** НомерСчета - Строка - Номер банковского счета контрагента
//        ** ДанныеБанка - Структура - Данные банка расчетного счета:
//             *** Наименование - Строка
//             *** БИК - Строка
//             *** SWIFT - Строка
//             *** КоррСчет - Строка
//             *** Адрес - Строка
//             *** Город - Строка
//    * ИнформацияПоКонтрагенту - ТаблицаЗначений - содержит строковое представление и значение
//                                                  контактной информации о контрагенте:
//        ** Вид - Вид контактной информации.
//        ** Значение - значение контактной информации.
//  ПрикладныеПараметры - Структура - содержащая параметры прикладного решения.
//  ОписаниеОшибки - Строка - текстовое представление ошибки.
//
//	Пример: 
//   Заполнение таблицы ИнформацияПоКонтрагенту:
//			Вид						Значение
//			"Наименование"			Администратор
//			"Полное наименование"	Администратор
//			"Юр./Физ. лицо"			Физ. лицо
//			"Юридический адрес"		Ул. Ленина
//			"Почта"					email@example.com
//			"Контактные лица"		Администратор
//
Процедура ИдентифицироватьКонтрагента(СтруктураСвойстваЗаказа, ДанныеКонтрагента, ПрикладныеПараметры, ОписаниеОшибки) Экспорт
	
	Наименование  = ДанныеКонтрагента.Наименование;
	ЮрЛицо        = ДанныеКонтрагента.ЮрЛицо;
	ИНН           = ДанныеКонтрагента.ИНН;
	КПП           = ДанныеКонтрагента.КПП;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|";
	
	Если ПустаяСтрока(Наименование) Тогда
		
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, 
		НСтр("ru = 'Наименование контрагента должно быть заполнено!'"));
		
		Возврат ;
		
	КонецЕсли;
	
	ТекстСообщенияНайденоНесколькоКонтрагентов = "";
	
	Если ПустаяСтрока(ИНН) Тогда
		
		ТекстСообщенияНайденоНесколькоКонтрагентов = " " + НСтр("ru = 'по наименованию:'")+ " " + Наименование;
		
		Запрос.Текст = Запрос.Текст + " ГДЕ Контрагенты.Наименование = &Наименование ";
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
	Иначе
			
		Если ТипЗнч(ИНН) <> Тип("Строка") Тогда
			
			ИНН = "";
			ШаблонСообщения = НСтр("ru = 'У контрагента %1 не корректно указан ИНН'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Наименование);
			ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
			
		КонецЕсли;
		
		Если ЮрЛицо Тогда
			
			Если ТипЗнч(КПП) <> Тип("Строка") Тогда
				КПП = "";
				ШаблонСообщения = НСтр("ru = 'У контрагента %1 не корректно указан КПП'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Наименование);
				ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
				
			КонецЕсли;
			
			ТекстСообщенияНайденоНесколькоКонтрагентов = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                            НСтр("ru = ' по ИНН: %1, КПП: %2'"),
			                            ИНН, КПП);
			
			Запрос.Текст = Запрос.Текст + " ГДЕ Контрагенты.ИНН = &ИНН И Контрагенты.КПП = &КПП ";
			
			Запрос.УстановитьПараметр("ИНН", ИНН);
			Запрос.УстановитьПараметр("КПП", КПП);
			
		Иначе // у физического лица КПП не бывает
			
			ТекстСообщенияНайденоНесколькоКонтрагентов = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' по ИНН: %1'"), КПП);
			
			Запрос.Текст = Запрос.Текст + " ГДЕ Контрагенты.ИНН = &ИНН";
			
			Запрос.УстановитьПараметр("ИНН", ИНН);
			
		КонецЕсли;
		
	КонецЕсли;
	
	КонтрагентСсылка = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		КонтрагентСсылка = СоздатьКонтрагента(ДанныеКонтрагента, ПрикладныеПараметры, ОписаниеОшибки, СтруктураСвойстваЗаказа);
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если ЗначениеЗаполнено(Выборка.Контрагент) Тогда
			КонтрагентОбъект = Выборка.Контрагент.ПолучитьОбъект();
			Если КонтрагентОбъект = Неопределено Тогда
				КонтрагентСсылка = Выборка.Контрагент;
			Иначе
				КонтрагентИзменен = Ложь;
				Для Каждого СтрокаИнформации Из ДанныеКонтрагента.ИнформацияПоКонтрагенту Цикл
				
					Если Не ЗначениеЗаполнено(СтрокаИнформации.Представление) Тогда
						Продолжить;
					КонецЕсли;
					
					Если ВРег(СтрокаИнформации.Вид) = ВРег(НСтр("ru = 'Фактический адрес'")) Тогда
						
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
						СтруктураПоиска.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
						СтруктураПоиска.Вставить("Представление", СтрокаИнформации.Представление);
						СтрокиКонтакта = КонтрагентОбъект.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
						Если СтрокиКонтакта.Количество() = 0 Тогда
							ДобавитьКонтактнуюИнформацию(КонтрагентОбъект,
							                             Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
							                             Перечисления.ТипыКонтактнойИнформации.Адрес,
							                             СтрокаИнформации.Представление);
							КонтрагентИзменен = Истина;
						КонецЕсли;
						
					ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(НСтр("ru = 'Юридический адрес'")) Тогда
						
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
						СтруктураПоиска.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
						СтруктураПоиска.Вставить("Представление", СтрокаИнформации.Представление);
						СтрокиКонтакта = КонтрагентОбъект.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
						Если СтрокиКонтакта.Количество() = 0 Тогда
							ДобавитьКонтактнуюИнформацию(КонтрагентОбъект,
							                             Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
							                             Перечисления.ТипыКонтактнойИнформации.Адрес,
							                             СтрокаИнформации.Представление);
							КонтрагентИзменен = Истина;
						КонецЕсли;
						
					ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(НСтр("ru = 'ТелефонРабочий'")) Тогда
						
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
						СтруктураПоиска.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
						СтруктураПоиска.Вставить("Представление", СтрокаИнформации.Представление);
						СтрокиКонтакта = КонтрагентОбъект.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
						Если СтрокиКонтакта.Количество() = 0 Тогда
							ДобавитьКонтактнуюИнформацию(КонтрагентОбъект,
							                             Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
							                             Перечисления.ТипыКонтактнойИнформации.Телефон,
							                             СтрокаИнформации.Представление);
							КонтрагентИзменен = Истина;
						КонецЕсли;
						
					ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(НСтр("ru = 'Почта'")) Тогда
						
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
						СтруктураПоиска.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
						СтруктураПоиска.Вставить("Представление", СтрокаИнформации.Представление);
						СтрокиКонтакта = КонтрагентОбъект.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
						Если СтрокиКонтакта.Количество() = 0 Тогда
							ДобавитьКонтактнуюИнформацию(КонтрагентОбъект,
							                             Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,
							                             Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
							                             СтрокаИнформации.Представление);
							КонтрагентИзменен = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				Если КонтрагентИзменен Тогда
					КонтрагентОбъект.Записать();
				КонецЕсли;
				КонтрагентСсылка = КонтрагентОбъект.Ссылка;
			КонецЕсли;
		Иначе
			КонтрагентСсылка = Выборка.Контрагент;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, 
		НСтр("ru = 'Не удалось найти или создать контрагента!'"));
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураСвойстваЗаказа.Контрагент = КонтрагентСсылка;
	
	
КонецПроцедуры

// Ищет номенклатуру по ИД, если не находит - ищет по артикулу и наименованию, если не находит - создает новую.
//
// Параметры:
// Номенклатура. Тип - неопределено. Ссылка на найденную или новую номенклатуру.
// ДанныеНоменклатуры. Тип - структура. Структура, содержащая информацию о номенклатуре, загруженной с сайта.
//	По данным этой структуры необходимо провести поиск существующей номенклатуры или создать новую.
//		Описание полей:
//				Ид - внутренний идентификатор номенклатуры.
//				АртикулНоменклатуры - Артикул номенклатуры.
//				НаименованиеНоменклатуры - Наименование номенклатуры.
//				ЕдиницаИзмерения  - ссылка на единицу измерения товара.
//				ЭтоУслуга - признак услуги.
//				СтавкаНДС - ставка НДС номенклатуры.
//
// ПрикладныеПараметры - структура,содержащая параметры прикладного решения, добавленные в узел плана обмена.
// ОписаниеОшибки - текстовое представление ошибки.
Процедура НайтиСоздатьНоменклатуру(Номенклатура, ДанныеНоменклатуры, ПрикладныеПараметры, ОписаниеОшибки) Экспорт
	
	ИдНоменклатуры = ДанныеНоменклатуры.Ид;
	
	Попытка 
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдНоменклатуры));
		
		Если Не Номенклатура = Справочники.Номенклатура.ПустаяСсылка()
			 И Номенклатура.ПолучитьОбъект() <> Неопределено  Тогда
			Возврат;
		КонецЕсли;
		
	Исключение
		
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки,
		НСтр("ru = 'Номенклатура не найдена по уникальному идентификатору:'")+ " " + ИдНоменклатуры);
		
	КонецПопытки;
	
	АртикулНоменклатуры			= ДанныеНоменклатуры.АртикулНоменклатуры;
	НаименованиеНоменклатуры	= ДанныеНоменклатуры.НаименованиеНоменклатуры;
	Номенклатура = НайтиНоменклатуруПоАртикулуНаименованию(АртикулНоменклатуры, НаименованиеНоменклатуры);
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;

	
	Номенклатура = Справочники.Номенклатура.СоздатьЭлемент();
	
	Номенклатура.Родитель     = ПрикладныеПараметры.ГруппаДляНовойНоменклатуры;
	Номенклатура.Артикул      = ДанныеНоменклатуры.АртикулНоменклатуры;
	Номенклатура.Наименование = ДанныеНоменклатуры.НаименованиеНоменклатуры;
	
	Если НЕ ДанныеНоменклатуры.ЭтоУслуга Тогда
		Номенклатура.ВидНоменклатуры = ПрикладныеПараметры.ВидНоменклатурыТоварДляНовойНоменклатуры
	Иначе
		Номенклатура.ВидНоменклатуры = ПрикладныеПараметры.ВидНоменклатурыУслугаДляНовойНоменклатуры
	КонецЕсли;
	
	Номенклатура.СтавкаНДС = ПолучитьПоСтавкеНДСЗначениеДляЗагрузки(ДанныеНоменклатуры.СтавкаНДС);
	
	Номенклатура.ЕдиницаИзмерения = НайтиСоздатьЕдиницуИзмерения(ДанныеНоменклатуры.ЕдиницаИзмерения);
	Номенклатура.Описание = "Создан автоматически при загрузке с сайта";
	
	Номенклатура.Записать();
	
	Номенклатура = Номенклатура.Ссылка;
	
КонецПроцедуры

// Поиск единицы измерения товара по коду.
//
// Параметры:
//  КодУпаковки - Строка - код упаковки товара.
//  Упаковка - СправочникСсылка - ссылка на упаковку.
//
Процедура НайтиСоздатьУпаковку(КодУпаковки, Упаковка) Экспорт
	
	
	
КонецПроцедуры

// Создает новый элемент справочника являющегося в прикладном решении точками самовывоза, например, Склады, Магазины.
// Параметры:
// ДанныеТочкиСамовывоза - Структура.
//		Описание полей:
//			Ид - Строка, идентификатор точки самовывоза.
//			Адрес - Структура с полями "ТипАдреса" и "ЗначениеАдреса".
//			Контакты- Структура с полями "ТипКонтакта" и "ЗначениеКонтакта".
//			Наименование - Строка, наименование точки самовывоза.
//
// ТочкаСамовывоза - ссылка на элемент справочника,который в прикладном решении является точкой самовывоза.
Процедура СоздатьТочкуСамовывоза(ДанныеТочки, ТочкаСамовывоза) Экспорт
	
	ТочкаСамовывоза = Справочники.Магазины.СоздатьЭлемент();
	ТочкаСамовывоза.Наименование = ДанныеТочки.Наименование;
	ТочкаСамовывоза.Записать();
	ТочкаСамовывоза = ТочкаСамовывоза.Ссылка;
	
КонецПроцедуры

// Вычисляет значение ставки НДС по переданному элементу справочника или перечисления.
//
// Параметры:
// СтавкаНДС. Тип - ПеречислениеСсылка, СправочникСсылка, Ставка НДС, выраженная элементом объекта метаданных
// прикладного решения.
// ЗначениеСтавкиНДС. Тип - Число. Значение ставки НДС выраженное числом.
Процедура ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(СтавкаНДС, ЗначениеСтавкиНДС) Экспорт
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		ЗначениеСтавкиНДС = 20;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		ЗначениеСтавкиНДС = 20;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		ЗначениеСтавкиНДС = 18;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		ЗначениеСтавкиНДС = 18;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		ЗначениеСтавкиНДС = 10;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		ЗначениеСтавкиНДС = 10;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
		ЗначениеСтавкиНДС = 0;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		ЗначениеСтавкиНДС = 0;
	Иначе
		ЗначениеСтавкиНДС = 20;
	КонецЕсли;
	
КонецПроцедуры

// Записывает в регистр сведений дополнительные сведения о заказе
//
// Параметры:
//   ОбновленыСвойстваЗаказа - Булево - признак успешного выполнения процедуры.
//   ЗаказПокупателя - ДокументСсылка - ссылка на документ ЗаказПокупателя.
//   СвойстваЗаказа - Соответствие - содержит строковое представления свойств (ключ) и значений (значение) заказа.
//   ОписаниеОшибки - Строка - текстовое представление ошибки.
//
Процедура ОбновитьСоздатьДополнительныеСведенияЗаказа(ОбновленыСвойстваЗаказа,
														ЗаказПокупателя,
														СвойстваЗаказа,
														ОписаниеОшибки) Экспорт
	
КонецПроцедуры

// В зависимости от настроек прикладного решения установка флага использования характеристик.
//
// Параметры:
//  ИспользоватьХарактеристики - Булево - установка признака использования характеристик.
//
// Пример:
//  ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики").
//
Процедура УстановитьПризнакИспользоватьХарактеристики(ИспользоватьХарактеристики) Экспорт
	
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
КонецПроцедуры

// Меняет статус заказа на "Отменен".
//	Параметры:
//		ПрикладныеПараметры - Структура, параметры прикладного решения, добавленные в форму узла плана обмена.
//		ДокументСсылка - Ссылка на документ Заказ, у которого нужно поменять статус.
Процедура ОтменитьЗаказ(ПрикладныеПараметры, ДокументСсылка) Экспорт
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	
	ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовПокупателей.ПустаяСсылка");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПокупателей") Тогда
		ПричинаОтмены = ПрикладныеПараметры.ПричинаОтменыЗаказовПоУмолчанию;
	КонецЕсли;
	
	КоличествоОтмененныхСтрок = РозничныеПродажиСервер.ОтменитьСНепроданнымиТоварами(ДокументОбъект, "Товары", ПричинаОтмены, Истина);
	
	Если КоличествоОтмененныхСтрок > 0 Тогда
		Если ДокументСсылка.Проведен Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение)
		Иначе
			ДокументОбъект.Записать()
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет была ли оплата по заказу.
//
// Параметры: 
//   ЗаказОплачен - Булево - признак того, что заказ был оплачен, влияет на статус оплаты заказа на сайте.
//   СтатусЗаказа - ПеречислениеСсылка - статус заказа в прикладном решении.
//   ДанныеДокументаКОплатеОстаток - Число - не оплаченный остаток денег по заказу.
//
Процедура ОпределитьСтатусОплатыЗаказа(ЗаказОплачен, СтатусЗаказа, 
										ДанныеДокументаКОплатеОстаток) Экспорт
	
	ЗаказОплачен = ДанныеДокументаКОплатеОстаток = 0;
	
КонецПроцедуры

// Проверяет текущее состояние заказа.
//
// Параметры:
//   ЗаказВРаботе - Булево - Признак того, что заказ был "обработан" в прикладном решении (т.е. поменял свой статус после загрузки с сайта).
//                           Данный признак влияет на статус заказа на сайте.
//   ДанныеДокументаСостояниеЗаказа - ПеречислениеСсылка, СправочникСсылка - статус заказа, который он может принимать в прикладном решении.
Процедура ОпределитьСтатусСостоянияЗаказаЗаказВРаботе(ЗаказВРаботе, ДанныеДокументаСостояниеЗаказа) Экспорт
	
	ЗаказВРаботе = НЕ ДанныеДокументаСостояниеЗаказа = Перечисления.СостоянияЗаказовПокупателей.Закрыт;
	
КонецПроцедуры

// Определяет была ли отгрузка товара по заказу.
//
// Параметры:
//   ЗаказОтгружен - Булево - признак того, что товар по заказу был отгружен. Влияет на статус отгрузки заказа на сайте.
//   ДанныеДокументаСтатусЗаказа - ПеречислениеСсылка, СправочникСсылка - статус, который может иметь заказ в прикладном решении.
//   ДанныеДокументаКОтгрузкеОстаток - Число - неотгруженный остаток по заказу (заказано было 7, а отгрузили 5).
Процедура ОпределитьСтатусОтгрузкиЗаказа(ЗаказОтгружен, ДанныеДокументаСтатусЗаказа,
											ДанныеДокументаКОтгрузкеОстаток) Экспорт
	
	ЗаказОтгружен = ДанныеДокументаКОтгрузкеОстаток = 0;
	
КонецПроцедуры

// Определение нужно ли считать НДС.
//
// Параметры:
//  СчитатьНДС - Булево - признак о необходимости считать НДС по заказу.
//  ВыборкаДокументовНалогообложениеНДС - ПеречислениеСсылка, СправочникСсылка - ссылка на объект.
//
Процедура ОпределитьНеобходимостьНДСВЗаказе(СчитатьНДС, ВыборкаДокументовНалогообложениеНДС) Экспорт
	
	СчитатьНДС = ВыборкаДокументовНалогообложениеНДС = "Облагается";
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеДокументов - Соответствие - список справочников.
//
Процедура ПолучитьСоответствиеДокументов(СоответствиеДокументов) Экспорт
	
	СоответствиеДокументов.Вставить("ЗаказПокупателя","ЗаказПокупателя");
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеСправочников - Соответствие - список справочников.
//
Процедура ПолучитьСоответствиеСправочников(СоответствиеСправочников) Экспорт
	
	СоответствиеСправочников.Вставить("Номенклатура", "Номенклатура");
	
	СоответствиеСправочников.Вставить("ХарактеристикиНоменклатуры",
													"ХарактеристикиНоменклатуры");
	СоответствиеСправочников.Вставить("НаборыДополнительныхРеквизитовИСведений",
										"НаборыДополнительныхРеквизитовИСведений");
										
	СоответствиеСправочников.Вставить("ВидыЦен", "ВидыЦен");
	СоответствиеСправочников.Вставить("НоменклатураПрисоединенныеФайлы",
										"НоменклатураПрисоединенныеФайлы");
	СоответствиеСправочников.Вставить("Склады", "Магазины");
	СоответствиеСправочников.Вставить("ТочкиСамовывоза", "Магазины");
	СоответствиеСправочников.Вставить("Организации", "Организации");
	СоответствиеСправочников.Вставить("ВидыНоменклатуры", "ВидыНоменклатуры");
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения, в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеПВХ - Соответствие - список справочников.
//
Процедура ПолучитьСоответствиеПВХ(СоответствиеПВХ) Экспорт
	
	СоответствиеПВХ.Вставить("ДополнительныеРеквизитыИСведения", "ДополнительныеРеквизитыИСведения");
	
КонецПроцедуры

// Заполняет соответствие форм библиотеки и прикладного решения.
// Параметры:
//   СоответствиеФорм - Соответствие - используется для переопределения форм, вызываемых библиотекой.
Процедура ПолучитьСоответствиеФорм(СоответствиеФорм) Экспорт
	
	СоответствиеФорм.Вставить("Справочник.ТипыЦен.ФормаВыбора","Справочник.ВидыЦен.ФормаВыбора");
	СоответствиеФорм.Вставить("Справочник.Склады.ФормаВыбора","Справочник.Магазины.ФормаВыбора");
	СоответствиеФорм.Вставить("ФормаВыбораТочекСамовывоза", "Справочник.Магазины.ФормаВыбора");
	
КонецПроцедуры

// Заполняет массив реквизитов формы, значение которых должно быть сохранено.
//
// Параметры:
//  МассивРеквизитов - Массив - реквизиты для заполнения.
//
Процедура ЗаполнитьПрикладныеРеквизитыФормыУзлаОбменССайтом(МассивРеквизитов) Экспорт
	
	МассивРеквизитов.Добавить("СписокТочекСамовывоза");
	МассивРеквизитов.Добавить("СпособИдентификацииКонтрагентов");
	МассивРеквизитов.Добавить("ГруппаДляНовойНоменклатуры");
	МассивРеквизитов.Добавить("ГруппаДляНовыхКонтрагентов");
	МассивРеквизитов.Добавить("Организация");
	МассивРеквизитов.Добавить("НомерНаСайте");
	МассивРеквизитов.Добавить("ДатаНаСайте");
	МассивРеквизитов.Добавить("ВидНоменклатурыТоварДляНовойНоменклатуры");
	МассивРеквизитов.Добавить("ВидНоменклатурыУслугаДляНовойНоменклатуры");
	МассивРеквизитов.Добавить("ПричинаОтменыЗаказовПоУмолчанию");
	МассивРеквизитов.Добавить("СоответствиеСтатусовЗаказов");
	
КонецПроцедуры

// Добавляет в произвольные поля в структуру ПрикладныеПараметры.
//
// Параметры:
//   ПрикладныеПараметры - Структура - структура, содержащая параметры прикладного решения, необходимые для обмена с сайтом.
//	
Процедура ДополнитьПараметрыПрикладногоРешения(ПрикладныеПараметры) Экспорт
	
	ПрикладныеПараметры.Вставить("ВыгружатьХарактеристикиВКаталог", Истина);
	ПрикладныеПараметры.Вставить("КлассифицироватьПоВидамНоменклатуры", Истина);
	
КонецПроцедуры

// Выполняет логику прикладного решения при обновлении конфигурации.
//
// Параметры:
//  ИмяОбработчика - Строка - представление обработчика обновления, вызвавшего процедуру.
//
Процедура ОбработчикОбновленияПереопределяемый(ИмяОбработчика) Экспорт
	
	
	
КонецПроцедуры

// В форму узла плана обмена добавляются реквизиты прикладного решения и элементы формы к ним.
// Параметры:
//  Форма - УправляемаяФорма - Форма узла плана обмена "Обмен с сайтом".
//  ТекущийОбъект - ПланОбменаОбъект - Объект плана обмена "Обмен с сайтом".
//
Процедура ДобавитьРеквизитыФормыУзла(Форма, ТекущийОбъект) Экспорт
	
	

КонецПроцедуры

#КонецОбласти

#Область ПомощникПодключенияЮМИ

// Процедура, вызываемая из одноименного обработчика события формы "Помощник подключения ЮМИ" обработки "Обмен с сайтами".
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
// 
Процедура ПриСозданииНаСервереФормаПомощникПодключенияЮМИ(Форма) Экспорт
	
	
	
	
КонецПроцедуры

#КонецОбласти

// Функция формирует прокси по настройкам прокси (передаваемому параметру).
//
// Параметры:
//  НастройкаПроксиСервера - Соответствие - настройка прокси-сервера:
//    * ИспользоватьПрокси - Булево - использовать ли прокси-сервер.
//    * НеИспользоватьПроксиДляЛокальныхАдресов - Булево - использовать ли прокси-сервер для локальных адресов.
//    * ИспользоватьСистемныеНастройки - Булево - использовать ли системные настройки прокси-сервера.
//    * Сервер       - Строка - адрес прокси-сервера.
//    * Порт         - Число - порт прокси-сервера.
//    * Пользователь - Строка - имя пользователя для авторизации на прокси-сервере.
//    * Пароль       - Строка - пароль пользователя.
//
// Возвращаемое значение:
//  Соответствие - настройки прокси.
//
Процедура ПолучитьНастройкиПроксиСервера(НастройкаПроксиСервера) Экспорт
	
#Если Клиент Тогда
	НастройкаПроксиСервера = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиПроксиСервера;
#Иначе
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
#КонецЕсли
	
КонецПроцедуры

// Заполняет номер и дату заказа на сайте.
//
// Параметры:
//	ДокСсылка - Ссылка - ссылка на документ Заказ.
//	УзелОбмена - Структура - параметры прикладного решения, размещенные в форме узла плана обмена.
//
// Возвращаемое значение:
//   Структура - структура, содержащая реквизиты заказа:
//     * НомерЗаказаНаСайте - Строка - номер заказа на сайте.
//     * ДатаЗаказаНаСайте - Дата - дата заказа на сайте.
//
Процедура РеквизитыЗаказаНаСайте(ДокСсылка, УзелОбмена, СтруктураРеквизитовЗаказаНаСайте) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателя.НомерЗаказаНаСайте,
	|	ЗаказПокупателя.ДатаЗаказаНаСайте
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		СтруктураРеквизитовЗаказаНаСайте = Новый Структура;
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СтруктураРеквизитовЗаказаНаСайте.Вставить("НомерЗаказаНаСайте", Выборка.НомерЗаказаНаСайте);
		СтруктураРеквизитовЗаказаНаСайте.Вставить("ДатаЗаказаНаСайте", Выборка.ДатаЗаказаНаСайте);
	КонецЕсли;
	
КонецПроцедуры

// Формирует текст запроса, который позволит получить таблицу значений,
// описанную в макете "СхемаВыгрузкиОбновлениеПакетаПредложений"
// плана обмена "Обмен с сайтом".
Процедура ПолучитьТекстЗапросаОбновлениеПакетаПредложений(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Склад.Магазин КАК Магазин,
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика,
	|	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыНаСкладахОстатки.РезервОстаток) КАК СвободныйОстаток
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Склад.Магазин,
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Магазины.Ссылка КАК Магазин,
	|	Магазины.ПравилоЦенообразования КАК ПравилоЦенообразования
	|ПОМЕСТИТЬ ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	НЕ(Магазины.КонтролироватьАссортимент
	|				И &ИспользоватьАссортимент)
	|	И НЕ Магазины.ИспользоватьПрименениеЦен
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаЦенообразования.Ссылка КАК ПравилоЦенообразования,
	|	ПравилаЦенообразования.ВидЦен,
	|	ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка) КАК ЦеноваяГруппа
	|ПОМЕСТИТЬ ТаблицаПравилЦенообразованияИВидовЦен
	|ИЗ
	|	Справочник.ПравилаЦенообразования КАК ПравилаЦенообразования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаЦенообразованияЦеновыеГруппы.Ссылка,
	|	ПравилаЦенообразованияЦеновыеГруппы.ВидЦен,
	|	ПравилаЦенообразованияЦеновыеГруппы.ЦеноваяГруппа
	|ИЗ
	|	Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ПравилаЦенообразованияЦеновыеГруппы
	|ГДЕ
	|	ПравилаЦенообразованияЦеновыеГруппы.ЦеноваяГруппа <> ЗНАЧЕНИЕ(Справочник.ПравилаЦенообразования.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования.Магазин,
	|	ТаблицаПравилЦенообразованияИВидовЦен.ЦеноваяГруппа,
	|	ТаблицаПравилЦенообразованияИВидовЦен.ВидЦен
	|ПОМЕСТИТЬ ТаблицаМагазиновЦеныНоменклатуры
	|ИЗ
	|	ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования КАК ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПравилЦенообразованияИВидовЦен КАК ТаблицаПравилЦенообразованияИВидовЦен
	|		ПО ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования.ПравилоЦенообразования = ТаблицаПравилЦенообразованияИВидовЦен.ПравилоЦенообразования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Магазины.ФорматМагазина КАК ФорматМагазина,
	|	Магазины.Ссылка КАК Магазин
	|ПОМЕСТИТЬ ТаблицаМагазиновЦеныПоАссортименту
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.КонтролироватьАссортимент
	|	И &ИспользоватьАссортимент
	|	И НЕ Магазины.ИспользоватьПрименениеЦен
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Магазины.Магазин КАК Магазин,
	|	Ассортимент.ВидЦен КАК ВидЦен
	|ПОМЕСТИТЬ втАссортимент
	|ИЗ
	|	РегистрСведений.Ассортимент.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&ПериодАссортимента, ДЕНЬ),
	|			ОбъектПланирования В
	|				(ВЫБРАТЬ
	|					Т.ФорматМагазина
	|				ИЗ
	|					ТаблицаМагазиновЦеныПоАссортименту КАК Т)) КАК Ассортимент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновЦеныПоАссортименту КАК Магазины
	|		ПО (Магазины.ФорматМагазина = Ассортимент.ОбъектПланирования)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦен,
	|	Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Магазины.Ссылка КАК Магазин
	|ПОМЕСТИТЬ ТаблицаМагазиновДействующиеЦены
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.ИспользоватьПрименениеЦен
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Магазины.Ссылка КАК Магазин,
	|	Магазины.ВидМинимальныхЦенПродажи КАК ВидМинимальныхЦенПродажи
	|ПОМЕСТИТЬ ТаблицаМагазиновСМинимальнымиЦенами
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	НЕ Магазины.ВидМинимальныхЦенПродажи = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМагазиновЦеныНоменклатуры.Магазин,
	|	ТаблицаМагазиновЦеныНоменклатуры.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ТаблицаМагазиновЦеныНоменклатуры.ВидЦен
	|ПОМЕСТИТЬ ТаблицаМагазиновПоВидамЦен
	|ИЗ
	|	ТаблицаМагазиновЦеныНоменклатуры КАК ТаблицаМагазиновЦеныНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втАссортимент.Магазин,
	|	ЗНАЧЕНИЕ(Справочник.ПравилаЦенообразования.ПустаяСсылка),
	|	втАссортимент.ВидЦен
	|ИЗ
	|	втАссортимент КАК втАссортимент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ВидЦены,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Упаковка
	|ПОМЕСТИТЬ ТаблицаЦенПоВидамЦен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|		ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|		ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|		ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|		ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ВидЦены В
	|					(ВЫБРАТЬ
	|						ТаблицаМагазиновПоВидамЦен.ВидЦен КАК ВидЦены
	|					ИЗ
	|						ТаблицаМагазиновПоВидамЦен КАК ТаблицаМагазиновПоВидамЦен)) КАК ЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Магазин,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.ВидЦены
	|ПОМЕСТИТЬ ЦеныБезПриведенияКУпаковке
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЦенПоВидамЦен.Цена КАК Цена,
	|		ТаблицаМагазиновПоВидамЦен.Магазин КАК Магазин,
	|		ТаблицаЦенПоВидамЦен.Упаковка КАК Упаковка,
	|		ТаблицаЦенПоВидамЦен.Номенклатура КАК Номенклатура,
	|		ТаблицаЦенПоВидамЦен.Характеристика КАК Характеристика,
	|		ТаблицаЦенПоВидамЦен.ВидЦены КАК ВидЦены,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ЕСТЬNULL(ТаблицаМагазиновПоВидамЦен.ЦеноваяГруппа, ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|					ТОГДА 1
	|				ИНАЧЕ 2
	|			КОНЕЦ) КАК ПолеЦеновойГруппы
	|	ИЗ
	|		ТаблицаЦенПоВидамЦен КАК ТаблицаЦенПоВидамЦен
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновПоВидамЦен КАК ТаблицаМагазиновПоВидамЦен
	|			ПО ТаблицаЦенПоВидамЦен.ВидЦены = ТаблицаМагазиновПоВидамЦен.ВидЦен
	|				И (ТаблицаЦенПоВидамЦен.ЦеноваяГруппа = ТаблицаМагазиновПоВидамЦен.ЦеноваяГруппа
	|					ИЛИ ТаблицаМагазиновПоВидамЦен.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаЦенПоВидамЦен.ВидЦены,
	|		ТаблицаЦенПоВидамЦен.Характеристика,
	|		ТаблицаЦенПоВидамЦен.Номенклатура,
	|		ТаблицаМагазиновПоВидамЦен.Магазин,
	|		ТаблицаЦенПоВидамЦен.Упаковка,
	|		ТаблицаЦенПоВидамЦен.Цена) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Магазин,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.ВидЦен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДействующиеЦеныНоменклатурыСрезПоследних.ОбъектЦенообразования КАК Магазин,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.ОбъектЦенообразования.ПравилоЦенообразования.ВидЦен КАК ВидЦен
	|	ИЗ
	|		РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ОбъектЦенообразования В
	|					(ВЫБРАТЬ
	|						ТаблицаМагазинов.Магазин
	|					ИЗ
	|						ТаблицаМагазиновДействующиеЦены КАК ТаблицаМагазинов)) КАК ДействующиеЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныБезПриведенияКУпаковке.Магазин,
	|	ЦеныБезПриведенияКУпаковке.Цена / ВЫБОР
	|		КОГДА ЦеныБезПриведенияКУпаковке.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ЦеныБезПриведенияКУпаковке.Упаковка.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЦеныБезПриведенияКУпаковке.Упаковка.Коэффициент
	|	КОНЕЦ КАК Цена,
	|	ЦеныБезПриведенияКУпаковке.Номенклатура,
	|	ЦеныБезПриведенияКУпаковке.Характеристика,
	|	ЦеныБезПриведенияКУпаковке.ВидЦены
	|ПОМЕСТИТЬ ЦеныБезПриведенияКМинимальнымВидамЦен
	|ИЗ
	|	ЦеныБезПриведенияКУпаковке КАК ЦеныБезПриведенияКУпаковке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Цена / ВЫБОР
	|		КОГДА ВложенныйЗапрос.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ВложенныйЗапрос.Упаковка.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВложенныйЗапрос.Упаковка.Коэффициент
	|	КОНЕЦ КАК Цена,
	|	ТаблицаМагазиновСМинимальнымиЦенами.Магазин,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.ВидЦены
	|ПОМЕСТИТЬ ТаблицаЦенПоМинимальнымВидамЦен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|		ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|		ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка,
	|		ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|		ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ВидЦены В
	|					(ВЫБРАТЬ
	|						ТаблицаМагазиновСМинимальнымиЦенами.ВидМинимальныхЦенПродажи КАК ВидЦены
	|					ИЗ
	|						ТаблицаМагазиновСМинимальнымиЦенами КАК ТаблицаМагазиновСМинимальнымиЦенами)) КАК ЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновСМинимальнымиЦенами КАК ТаблицаМагазиновСМинимальнымиЦенами
	|		ПО ВложенныйЗапрос.ВидЦены = ТаблицаМагазиновСМинимальнымиЦенами.ВидМинимальныхЦенПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.Магазин,
	|	ВЫБОР
	|		КОГДА ТаблицаЦенПоМинимальнымВидамЦен.Цена ЕСТЬ NULL 
	|			ТОГДА ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(ТаблицаЦенПоМинимальнымВидамЦен.Цена, 0) > ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
	|					ТОГДА ЕСТЬNULL(ТаблицаЦенПоМинимальнымВидамЦен.Цена, 0)
	|				ИНАЧЕ ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
	|			КОНЕЦ
	|	КОНЕЦ КАК Цена,
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.Номенклатура,
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.Характеристика,
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.ВидЦены
	|ПОМЕСТИТЬ ТаблицаЦенПоМагазинам
	|ИЗ
	|	ЦеныБезПриведенияКМинимальнымВидамЦен КАК ЦеныБезПриведенияКМинимальнымВидамЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦенПоМинимальнымВидамЦен КАК ТаблицаЦенПоМинимальнымВидамЦен
	|		ПО ЦеныБезПриведенияКМинимальнымВидамЦен.Магазин = ТаблицаЦенПоМинимальнымВидамЦен.Магазин
	|		И ЦеныБезПриведенияКМинимальнымВидамЦен.Номенклатура = ТаблицаЦенПоМинимальнымВидамЦен.Номенклатура
	|		И ЦеныБезПриведенияКМинимальнымВидамЦен.Характеристика = ТаблицаЦенПоМинимальнымВидамЦен.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЦенПоМагазинам.Номенклатура,
	|	ТаблицаЦенПоМагазинам.Характеристика,
	|	ТаблицаЦенПоМагазинам.ВидЦены КАК ТипЦены,
	|	ТаблицаЦенПоМагазинам.Цена КАК ЦенаЗаЕдиницу,
	|	ТаблицаЦенПоМагазинам.Магазин КАК Склад,
	|	0 КАК ОстатокНаСкладе
	|ПОМЕСТИТЬ ТаблицаОстатковИЦен
	|ИЗ
	|	ТаблицаЦенПоМагазинам КАК ТаблицаЦенПоМагазинам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатков.Номенклатура,
	|	ТаблицаОстатков.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка),
	|	0,
	|	ТаблицаОстатков.Магазин,
	|	ТаблицаОстатков.СвободныйОстаток
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатковИЦен.Номенклатура,
	|	ТаблицаОстатковИЦен.Характеристика,
	|	ТаблицаОстатковИЦен.ТипЦены,
	|	ТаблицаОстатковИЦен.ЦенаЗаЕдиницу,
	|	ТаблицаОстатковИЦен.Склад,
	|	ТаблицаОстатковИЦен.ОстатокНаСкладе,
	|	""RUB"" КАК ТипЦеныВалютаНаименование,
	|	""RUB"" КАК ТипЦеныВалютаКод,
	|	ТаблицаОстатковИЦен.Номенклатура.ЕдиницаИзмерения.Наименование КАК ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	1 КАК ТипЦеныЕдиницаЦеныКоэффициент
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	Характеристика.*,
	|	ТипЦены.*,
	|	ЦенаЗаЕдиницу,
	|	Склад.*,
	|	ОстатокНаСкладе,
	|	ТипЦеныВалютаНаименование,
	|	ТипЦеныВалютаКод,
	|	ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ТипЦеныЕдиницаЦеныКоэффициент}
	|ИЗ
	|	ТаблицаОстатковИЦен КАК ТаблицаОстатковИЦен
	|{ГДЕ
	|	ТаблицаОстатковИЦен.Номенклатура.*,
	|	ТаблицаОстатковИЦен.ТипЦены.* КАК ТипЦены,
	|	ТаблицаОстатковИЦен.Склад.*,
	|	ТаблицаОстатковИЦен.ОстатокНаСкладе}";
	
КонецПроцедуры

// Формирует тексты запросов, которые позволяют получить таблицу значений,
// описанные в макете "СхемаВыгрузкиПакетПредложений"
// плана обмена "Обмен с сайтом".
// Параметры:
//		ТекстыЗапросов - структура содержащая тексты запросов.
//			* Цены - поле, в которое нужно поместить текст запроса для заполнения источника данных "Цены"
//					макета "СхемаВыгрузкиПакетПредложений" плана обмена "ОбменССайтом".
//			* Остатки- поле, в которое нужно поместить текст запроса для заполнения источника данных "Остатки"
//					макета "СхемаВыгрузкиПакетПредложений" плана обмена "ОбменССайтом".
//
Процедура ПолучитьТекстыЗапросовПакетаПредложений(ТекстыЗапросов) Экспорт
	
	ТекстыЗапросов.Цены =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	ВЫБОР
	|		КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИспользоватьХарактеристики,
	|	ВЫБОР
	|		КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
	|			ТОГДА Номенклатура.Ссылка
	|		ИНАЧЕ Номенклатура.ВидНоменклатуры
	|	КОНЕЦ КАК ВладелецХарактеристик
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Ссылка КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатураХарактеристикаБезШтрихКодов
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|ГДЕ
	|	НЕ ТаблицаНоменклатуры.ИспользоватьХарактеристики
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	ХарактеристикиНоменклатуры.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаНоменклатуры.Ссылка КАК Ссылка,
	|		ТаблицаНоменклатуры.ВладелецХарактеристик КАК ВладелецХарактеристик
	|	ИЗ
	|		ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|	ГДЕ
	|		ТаблицаНоменклатуры.ИспользоватьХарактеристики) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ВложенныйЗапрос.ВладелецХарактеристик = ХарактеристикиНоменклатуры.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатураХарактеристика.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатураХарактеристика.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатураХарактеристика.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	ТаблицаНоменклатураХарактеристика.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &ЕдиницаПоУмолчанию
	|		ИНАЧЕ ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &КодЕдиницыПоУмолчанию
	|		ИНАЧЕ ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияКод,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &НаименованиеПолноеЕдиницыПоУмолчанию
	|		ИНАЧЕ ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное
	|	КОНЕЦ КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &НаименованиеЕдиницыПоУмолчанию
	|		ИНАЧЕ ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &МеждународноеСокращениеЕдиницыПоУмолчанию
	|		ИНАЧЕ ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение
	|	КОНЕЦ КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	1 КАК ЕдиницаИзмеренияПересчетКоэф,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &КодЕдиницыПоУмолчанию
	|		ИНАЧЕ ТаблицаНоменклатураХарактеристика.Номенклатура.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияПересчетЕдиница,
	|	ТаблицаНоменклатураХарактеристика.Номенклатура.ПометкаУдаления КАК НоменклатураПометкаУдаления
	|ПОМЕСТИТЬ ТаблицаКаталога
	|ИЗ
	|	ТаблицаНоменклатураХарактеристикаБезШтрихКодов КАК ТаблицаНоменклатураХарактеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Магазины.Ссылка КАК Магазин,
	|	Магазины.ПравилоЦенообразования КАК ПравилоЦенообразования
	|ПОМЕСТИТЬ ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	НЕ(Магазины.КонтролироватьАссортимент
	|				И &ИспользоватьАссортимент)
	|	И НЕ Магазины.ИспользоватьПрименениеЦен
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаЦенообразования.Ссылка КАК ПравилоЦенообразования,
	|	ПравилаЦенообразования.ВидЦен,
	|	ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка) КАК ЦеноваяГруппа
	|ПОМЕСТИТЬ ТаблицаПравилЦенообразованияИВидовЦен
	|ИЗ
	|	Справочник.ПравилаЦенообразования КАК ПравилаЦенообразования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаЦенообразованияЦеновыеГруппы.Ссылка,
	|	ПравилаЦенообразованияЦеновыеГруппы.ВидЦен,
	|	ПравилаЦенообразованияЦеновыеГруппы.ЦеноваяГруппа
	|ИЗ
	|	Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ПравилаЦенообразованияЦеновыеГруппы
	|ГДЕ
	|	ПравилаЦенообразованияЦеновыеГруппы.ЦеноваяГруппа <> ЗНАЧЕНИЕ(Справочник.ПравилаЦенообразования.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования.Магазин,
	|	ТаблицаПравилЦенообразованияИВидовЦен.ЦеноваяГруппа,
	|	ТаблицаПравилЦенообразованияИВидовЦен.ВидЦен
	|ПОМЕСТИТЬ ТаблицаМагазиновЦеныНоменклатуры
	|ИЗ
	|	ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования КАК ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПравилЦенообразованияИВидовЦен КАК ТаблицаПравилЦенообразованияИВидовЦен
	|		ПО ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования.ПравилоЦенообразования = ТаблицаПравилЦенообразованияИВидовЦен.ПравилоЦенообразования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Магазины.ФорматМагазина КАК ФорматМагазина,
	|	Магазины.Ссылка КАК Магазин
	|ПОМЕСТИТЬ ТаблицаМагазиновЦеныПоАссортименту
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.КонтролироватьАссортимент
	|	И &ИспользоватьАссортимент
	|	И НЕ Магазины.ИспользоватьПрименениеЦен
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Магазины.Магазин КАК Магазин,
	|	Ассортимент.ВидЦен КАК ВидЦен
	|ПОМЕСТИТЬ втАссортимент
	|ИЗ
	|	РегистрСведений.Ассортимент.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&ПериодАссортимента, ДЕНЬ),
	|			ОбъектПланирования В
	|				(ВЫБРАТЬ
	|					Т.ФорматМагазина
	|				ИЗ
	|					ТаблицаМагазиновЦеныПоАссортименту КАК Т)) КАК Ассортимент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновЦеныПоАссортименту КАК Магазины
	|		ПО (Магазины.ФорматМагазина = Ассортимент.ОбъектПланирования)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦен,
	|	Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Магазины.Ссылка КАК Магазин
	|ПОМЕСТИТЬ ТаблицаМагазиновДействующиеЦены
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.ИспользоватьПрименениеЦен
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Магазины.Ссылка КАК Магазин,
	|	Магазины.ВидМинимальныхЦенПродажи КАК ВидМинимальныхЦенПродажи
	|ПОМЕСТИТЬ ТаблицаМагазиновСМинимальнымиЦенами
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	НЕ Магазины.ВидМинимальныхЦенПродажи = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
	|	И НЕ Магазины.СкладУправляющейСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаМагазиновЦеныНоменклатуры.Магазин,
	|	ТаблицаМагазиновЦеныНоменклатуры.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ТаблицаМагазиновЦеныНоменклатуры.ВидЦен
	|ПОМЕСТИТЬ ТаблицаМагазиновПоВидамЦен
	|ИЗ
	|	ТаблицаМагазиновЦеныНоменклатуры КАК ТаблицаМагазиновЦеныНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втАссортимент.Магазин,
	|	ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка),
	|	втАссортимент.ВидЦен
	|ИЗ
	|	втАссортимент КАК втАссортимент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ВидЦены,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Упаковка
	|ПОМЕСТИТЬ ТаблицаЦенПоВидамЦен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|		ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|		ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|		ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|		ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ВидЦены В
	|					(ВЫБРАТЬ
	|						ТаблицаМагазиновПоВидамЦен.ВидЦен КАК ВидЦены
	|					ИЗ
	|						ТаблицаМагазиновПоВидамЦен КАК ТаблицаМагазиновПоВидамЦен) {(Номенклатура = &Номенклатура
	|				    И ВидЦены = &ТипЦены) КАК ТипЦен}) КАК ЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Магазин,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.ВидЦены
	|ПОМЕСТИТЬ ЦеныБезПриведенияКУпаковке
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЦенПоВидамЦен.Цена КАК Цена,
	|		ТаблицаМагазиновПоВидамЦен.Магазин КАК Магазин,
	|		ТаблицаЦенПоВидамЦен.Упаковка КАК Упаковка,
	|		ТаблицаЦенПоВидамЦен.Номенклатура КАК Номенклатура,
	|		ТаблицаЦенПоВидамЦен.Характеристика КАК Характеристика,
	|		ТаблицаЦенПоВидамЦен.ВидЦены КАК ВидЦены,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ЕСТЬNULL(ТаблицаМагазиновПоВидамЦен.ЦеноваяГруппа, ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|					ТОГДА 1
	|				ИНАЧЕ 2
	|			КОНЕЦ) КАК ПолеЦеновойГруппы
	|	ИЗ
	|		ТаблицаЦенПоВидамЦен КАК ТаблицаЦенПоВидамЦен
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновПоВидамЦен КАК ТаблицаМагазиновПоВидамЦен
	|			ПО ТаблицаЦенПоВидамЦен.ВидЦены = ТаблицаМагазиновПоВидамЦен.ВидЦен
	|				И (ТаблицаЦенПоВидамЦен.ЦеноваяГруппа = ТаблицаМагазиновПоВидамЦен.ЦеноваяГруппа
	|					ИЛИ ТаблицаМагазиновПоВидамЦен.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаЦенПоВидамЦен.ВидЦены,
	|		ТаблицаЦенПоВидамЦен.Характеристика,
	|		ТаблицаЦенПоВидамЦен.Номенклатура,
	|		ТаблицаМагазиновПоВидамЦен.Магазин,
	|		ТаблицаЦенПоВидамЦен.Упаковка,
	|		ТаблицаЦенПоВидамЦен.Цена) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Магазин,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.ВидЦен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДействующиеЦеныНоменклатурыСрезПоследних.ОбъектЦенообразования КАК Магазин,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|		ДействующиеЦеныНоменклатурыСрезПоследних.ОбъектЦенообразования.ПравилоЦенообразования.ВидЦен КАК ВидЦен
	|	ИЗ
	|		РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ОбъектЦенообразования В
	|					(ВЫБРАТЬ
	|						ТаблицаМагазинов.Магазин
	|					ИЗ
	|						ТаблицаМагазиновДействующиеЦены КАК ТаблицаМагазинов) {(Номенклатура = &Номенклатура
	|				    И ОбъектЦенообразования.ПравилоЦенообразования.ВидЦен = &ТипЦены) КАК ТипЦен}) КАК ДействующиеЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныБезПриведенияКУпаковке.Магазин,
	|	ЦеныБезПриведенияКУпаковке.Цена / ВЫБОР
	|		КОГДА ЦеныБезПриведенияКУпаковке.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ЦеныБезПриведенияКУпаковке.Упаковка.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЦеныБезПриведенияКУпаковке.Упаковка.Коэффициент
	|	КОНЕЦ КАК Цена,
	|	ЦеныБезПриведенияКУпаковке.Номенклатура,
	|	ЦеныБезПриведенияКУпаковке.Характеристика,
	|	ЦеныБезПриведенияКУпаковке.ВидЦены
	|ПОМЕСТИТЬ ЦеныБезПриведенияКМинимальнымВидамЦен
	|ИЗ
	|	ЦеныБезПриведенияКУпаковке КАК ЦеныБезПриведенияКУпаковке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Цена / ВЫБОР
	|		КОГДА ВложенныйЗапрос.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА ВложенныйЗапрос.Упаковка.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВложенныйЗапрос.Упаковка.Коэффициент
	|	КОНЕЦ КАК Цена,
	|	ТаблицаМагазиновСМинимальнымиЦенами.Магазин,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.ВидЦены
	|ПОМЕСТИТЬ ТаблицаЦенПоМинимальнымВидамЦен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|		ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|		ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка,
	|		ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|		ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ВидЦены В
	|					(ВЫБРАТЬ
	|						ТаблицаМагазиновСМинимальнымиЦенами.ВидМинимальныхЦенПродажи КАК ВидЦены
	|					ИЗ
	|						ТаблицаМагазиновСМинимальнымиЦенами КАК ТаблицаМагазиновСМинимальнымиЦенами) {(Номенклатура).* КАК Номенклатура}) КАК ЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновСМинимальнымиЦенами КАК ТаблицаМагазиновСМинимальнымиЦенами
	|		ПО ВложенныйЗапрос.ВидЦены = ТаблицаМагазиновСМинимальнымиЦенами.ВидМинимальныхЦенПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.Магазин,
	|	ВЫБОР
	|		КОГДА ТаблицаЦенПоМинимальнымВидамЦен.Цена ЕСТЬ NULL 
	|			ТОГДА ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(ТаблицаЦенПоМинимальнымВидамЦен.Цена, 0) > ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
	|					ТОГДА ЕСТЬNULL(ТаблицаЦенПоМинимальнымВидамЦен.Цена, 0)
	|				ИНАЧЕ ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
	|			КОНЕЦ
	|	КОНЕЦ КАК Цена,
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.Номенклатура,
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.Характеристика,
	|	ЦеныБезПриведенияКМинимальнымВидамЦен.ВидЦены
	|ПОМЕСТИТЬ ТаблицаЦенПоМагазинам
	|ИЗ
	|	ЦеныБезПриведенияКМинимальнымВидамЦен КАК ЦеныБезПриведенияКМинимальнымВидамЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦенПоМинимальнымВидамЦен КАК ТаблицаЦенПоМинимальнымВидамЦен
	|		ПО ЦеныБезПриведенияКМинимальнымВидамЦен.Магазин = ТаблицаЦенПоМинимальнымВидамЦен.Магазин
	|			И ЦеныБезПриведенияКМинимальнымВидамЦен.Номенклатура = ТаблицаЦенПоМинимальнымВидамЦен.Номенклатура
	|			И ЦеныБезПриведенияКМинимальнымВидамЦен.Характеристика = ТаблицаЦенПоМинимальнымВидамЦен.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКаталога.Номенклатура,
	|	ТаблицаКаталога.Характеристика,
	|	ТаблицаКаталога.НоменклатураНаименование,
	|	ТаблицаКаталога.НоменклатураАртикул,
	|	ТаблицаКаталога.ЕдиницаИзмерения,
	|	ТаблицаКаталога.ЕдиницаИзмеренияКод,
	|	ТаблицаКаталога.ЕдиницаИзмеренияНаименованиеПолное,
	|	ТаблицаКаталога.ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ТаблицаКаталога.ЕдиницаИзмеренияМеждународноеСокращение,
	|	ТаблицаКаталога.ЕдиницаИзмеренияПересчетКоэф,
	|	ТаблицаКаталога.ЕдиницаИзмеренияПересчетЕдиница,
	|	ТаблицаКаталога.НоменклатураПометкаУдаления,
	|	ЕСТЬNULL(ТаблицаЦенПоМагазинам.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ТипЦены,
	|	""Рубли"" КАК ТипЦеныВалюта,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаЦенПоМагазинам.ВидЦены ЕСТЬ NULL 
	|			ТОГДА ТаблицаЦенПоМагазинам.ВидЦены.ЦенаВключаетНДС
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ТипЦеныЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаЦенПоМагазинам.ВидЦены ЕСТЬ NULL 
	|			ТОГДА ТаблицаЦенПоМагазинам.ВидЦены.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТипЦеныНаименование,
	|	""RUB"" КАК ТипЦеныВалютаКод,
	|	1 КАК ТипЦеныЕдиницаЦеныКоэффициент,
	|	ЕСТЬNULL(ТаблицаЦенПоМагазинам.Цена, 0) КАК ЦенаЗаЕдиницу
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	Характеристика.*,
	|	НоменклатураНаименование,
	|	НоменклатураАртикул,
	|	ЕдиницаИзмерения.*,
	|	ЕдиницаИзмеренияКод,
	|	ЕдиницаИзмеренияНаименованиеПолное,
	|	ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ЕдиницаИзмеренияМеждународноеСокращение,
	|	ЕдиницаИзмеренияПересчетКоэф,
	|	ЕдиницаИзмеренияПересчетЕдиница,
	|	НоменклатураПометкаУдаления,
	|	ТипЦены.*,
	|	ТипЦеныВалюта,
	|	ТипЦеныЦенаВключаетНДС,
	|	ТипЦеныНаименование,
	|	ТипЦеныВалютаКод,
	|	ТипЦеныЕдиницаЦеныКоэффициент,
	|	ЦенаЗаЕдиницу}
	|ИЗ
	|	ТаблицаКаталога КАК ТаблицаКаталога
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЦенПоМагазинам КАК ТаблицаЦенПоМагазинам
	|		ПО ТаблицаКаталога.Номенклатура = ТаблицаЦенПоМагазинам.Номенклатура
	|			И ТаблицаКаталога.Характеристика = ТаблицаЦенПоМагазинам.Характеристика
	|{ГДЕ
	|	ТаблицаКаталога.Номенклатура.*,
	|	ТаблицаЦенПоМагазинам.ВидЦены.* КАК ТипЦены}";
	
	ТекстыЗапросов.Остатки =
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Склад.Магазин КАК Магазин,
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика,
	|	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыНаСкладахОстатки.РезервОстаток) КАК СвободныйОстаток
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, {(Номенклатура).*, (Склад.Магазин) КАК Склад}) КАК ТоварыНаСкладахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Склад.Магазин,
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатков.Характеристика КАК Характеристика,
	|	ТаблицаОстатков.Магазин КАК Склад,
	|	ТаблицаОстатков.СвободныйОстаток КАК ОстатокНаСкладе,
	|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаОстатков.Магазин.Наименование КАК СкладНаименование
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	Характеристика.*,
	|	Склад.*,
	|	ОстатокНаСкладе,
	|	ЕдиницаИзмерения.*,
	|	СкладНаименование}
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|ГДЕ
	|	ТаблицаОстатков.СвободныйОстаток > 0
	|{ГДЕ
	|	ТаблицаОстатков.Номенклатура.*,
	|	ТаблицаОстатков.Магазин.* КАК Склад,
	|	ТаблицаОстатков.СвободныйОстаток КАК ОстатокНаСкладе}";
	
КонецПроцедуры

//Формирует тексты запросов, которые позволят получить таблицы значений,
// описанные в макете "СхемаВыгрузкиКаталог"
// плана обмена "Обмен с сайтом"
// Параметры:
//	ТекстыЗапросов - структура содердащая тексты запросов
//		* Номенклатура - поле, в которое нужно поместить текст запроса для заполнения источника данных "Номенклатура"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом"
//
//      * Свойства      - поле, в которое нужно поместить текст запроса для заполнения источника данных "Свойства"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом"
//
//      * Файлы          - поле, в которое нужно поместить текст запроса для заполнения источника данных "Файлы"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом"
//
//      * Характеристики - поле, необязательное поле, поле в которое нужно поместить текст запроса для заполнения источника данных "Характерстики"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом"
//
Процедура ПолучитьТекстыЗапросовКаталог(ТекстыЗапросов) Экспорт
	
	ТекстыЗапросов.Номенклатура =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ПометкаУдаления КАК НоменклатураПометкаУдаления,
	|	ВЫБОР
	|		КОГДА &КлассифицироватьПоВидамНоменклатуры
	|			ТОГДА Номенклатура.ВидНоменклатуры
	|		ИНАЧЕ Номенклатура.Родитель
	|	КОНЕЦ КАК НоменклатураРодитель,
	|	Номенклатура.ЭтоГруппа КАК НоменклатураЭтоГруппа,
	|	Номенклатура.Код КАК НоменклатураКод,
	|	Номенклатура.Наименование КАК НоменклатураНаименование,
	|	Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|	Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ВЫБОР
	|		КОГДА Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20) ТОГДА 20
	|		КОГДА Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120) ТОГДА 20
	|		КОГДА Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18) ТОГДА 18
	|		КОГДА Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118) ТОГДА 18
	|		КОГДА Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10) ТОГДА 10
	|		КОГДА Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110) ТОГДА 10
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НоменклатураСтавкаНДСЗначение,
	|	ВЫБОР
	|		КОГДА Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА Номенклатура.ТипНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	КОНЕЦ КАК НоменклатураТипНоменклатуры,
	|	Номенклатура.ВидНоменклатуры КАК НоменклатураВидНоменклатуры,
	|	Номенклатура.Описание КАК НоменклатураОписание,
	|	Номенклатура.ФайлКартинки КАК НоменклатураОсновноеИзображение,
	|	ВЫБОР
	|		КОГДА Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &ЕдиницаПоУмолчанию
	|		ИНАЧЕ Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &КодЕдиницыПоУмолчанию
	|		ИНАЧЕ Номенклатура.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияКод,
	|	ВЫБОР
	|		КОГДА Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &НаименованиеПолноеЕдиницыПоУмолчанию
	|		ИНАЧЕ Номенклатура.ЕдиницаИзмерения.НаименованиеПолное
	|	КОНЕЦ КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	ВЫБОР
	|		КОГДА Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &МеждународноеСокращениеЕдиницыПоУмолчанию
	|		ИНАЧЕ Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение
	|	КОНЕЦ КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	1 КАК ЕдиницаИзмеренияПересчетКоэф,
	|	ВЫБОР
	|		КОГДА Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиница
	|			ТОГДА &КодЕдиницыПоУмолчанию
	|		ИНАЧЕ Номенклатура.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияПересчетЕдиница,
	|	ЕСТЬNULL(ШтрихКодыНоменклатуры.Штрихкод, """") КАК НоменклатураШтрихкод
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	НоменклатураПометкаУдаления,
	|	НоменклатураРодитель.*,
	|	НоменклатураЭтоГруппа,
	|	НоменклатураКод,
	|	НоменклатураНаименование,
	|	НоменклатураНаименованиеПолное,
	|	НоменклатураАртикул,
	|	НоменклатураСтавкаНДСЗначение,
	|	НоменклатураТипНоменклатуры.*,
	|	НоменклатураВидНоменклатуры.*,
	|	НоменклатураОписание,
	|	НоменклатураОсновноеИзображение.*,
	|	ЕдиницаИзмерения.*,
	|	ЕдиницаИзмеренияКод,
	|	ЕдиницаИзмеренияНаименованиеПолное,
	|	ЕдиницаИзмеренияМеждународноеСокращение,
	|	ЕдиницаИзмеренияПересчетКоэф,
	|	ЕдиницаИзмеренияПересчетЕдиница,
	|	НоменклатураШтрихкод}
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Штрихкоды.Владелец КАК Владелец,
	|			МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод
	|		ИЗ
	|			РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ГДЕ
	|			Штрихкоды.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			И Штрихкоды.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Штрихкоды.Владелец) КАК ШтрихКодыНоменклатуры
	|		ПО Номенклатура.Ссылка = ШтрихКодыНоменклатуры.Владелец
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|{ГДЕ
	|	Номенклатура.Ссылка.*}";
	
	Если ТекстыЗапросов.Свойство("Характеристики") Тогда
		
		ТекстыЗапросов.Характеристики = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
		|			ТОГДА Номенклатура.Ссылка
		|		ИНАЧЕ Номенклатура.ВидНоменклатуры
		|	КОНЕЦ КАК ВладелецХарактеристик
		|ПОМЕСТИТЬ ТаблицаВладельцевНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|	ХарактеристикиНоменклатуры.Наименование КАК ХарактеристикаНаименование,
		|	ТаблицаВладельцевНоменклатуры.Номенклатура КАК Номенклатура
		|{ВЫБРАТЬ
		|	Характеристика.*,
		|	ХарактеристикаНаименование,
		|	Номенклатура.*}
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВладельцевНоменклатуры КАК ТаблицаВладельцевНоменклатуры
		|		ПО ХарактеристикиНоменклатуры.Владелец = ТаблицаВладельцевНоменклатуры.ВладелецХарактеристик
		|{ГДЕ
		|	ТаблицаВладельцевНоменклатуры.Номенклатура.*}";
	КонецЕсли;
	
	
	ТекстыЗапросов.Свойства =
	"ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура,
	|	НоменклатураДополнительныеРеквизиты.Свойство КАК СвойствоНоменклатуры,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК ЗначениеСвойства
	|ПОМЕСТИТЬ ТаблицаСвойств
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Объект,
	|	ДополнительныеСведения.Свойство,
	|	ДополнительныеСведения.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект ССЫЛКА Справочник.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСвойств.Номенклатура КАК Номенклатура,
	|	ТаблицаСвойств.СвойствоНоменклатуры КАК СвойствоНоменклатуры,
	|	ТаблицаСвойств.ЗначениеСвойства КАК ЗначениеСвойства
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	СвойствоНоменклатуры.*,
	|	ЗначениеСвойства.*}
	|ИЗ
	|	ТаблицаСвойств КАК ТаблицаСвойств
	|{ГДЕ
	|	ТаблицаСвойств.СвойствоНоменклатуры.*,
	|	ТаблицаСвойств.Номенклатура.*}";
	
	ТекстыЗапросов.Файлы =
	"ВЫБРАТЬ
	|	НоменклатураПрисоединенныеФайлы.ВладелецФайла КАК Номенклатура,
	|	НоменклатураПрисоединенныеФайлы.Ссылка КАК НоменклатураФайл,
	|	ЕСТЬNULL(ДвоичныеДанныеФайлов.ДвоичныеДанныеФайла, НоменклатураПрисоединенныеФайлы.ФайлХранилище) КАК НоменклатураФайлДанныеФайла,
	|	НоменклатураПрисоединенныеФайлы.Том КАК НоменклатураФайлТом,
	|	НоменклатураПрисоединенныеФайлы.Расширение КАК НоменклатураФайлРасширение,
	|	НоменклатураПрисоединенныеФайлы.ПутьКФайлу КАК НоменклатураФайлПутьКФайлу,
	|	НоменклатураПрисоединенныеФайлы.ТипХраненияФайла КАК НоменклатураФайлТипХраненияФайла,
	|	НоменклатураПрисоединенныеФайлы.Описание КАК НоменклатураФайлОписание
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	НоменклатураФайл.*,
	|	НоменклатураФайлДанныеФайла,
	|	НоменклатураФайлТом.*,
	|	НоменклатураФайлРасширение,
	|	НоменклатураФайлПутьКФайлу,
	|	НоменклатураФайлТипХраненияФайла.*,
	|	НоменклатураФайлОписание}
	|ИЗ
	|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДвоичныеДанныеФайлов КАК ДвоичныеДанныеФайлов
	|		ПО ДвоичныеДанныеФайлов.Файл = НоменклатураПрисоединенныеФайлы.Ссылка
	|{ГДЕ
	|	НоменклатураПрисоединенныеФайлы.ВладелецФайла.*}";
	
КонецПроцедуры

// Формирует текст запроса, который позволит получить таблицу значений,
// описанную в макете "СхемаВыгрузкиЗаказов"
// плана обмена "Обмен с сайтом".
Процедура ПолучитьТекстЗапросаЗаказы(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИспользоватьРезервированиеПоЗаказамПокупателей.Значение КАК ИспользоватьРезервированиеПоЗаказамПокупателей
	|ПОМЕСТИТЬ ТаблицаКонстанты
	|ИЗ
	|	Константа.ИспользоватьРезервированиеПоЗаказамПокупателей КАК ИспользоватьРезервированиеПоЗаказамПокупателей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.Заказ,
	|	ЗаказыПокупателейОстатки.КодСтроки,
	|	ЗаказыПокупателейОстатки.ЗаказаноОстаток
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ) КАК ЗаказыПокупателейОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОстатков.Заказ
	|ПОМЕСТИТЬ ТаблицаОстатковПоЗаказам
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка,
	|	ЗаказПокупателя.ПометкаУдаления,
	|	ЗаказПокупателя.Номер,
	|	ЗаказПокупателя.Дата,
	|	ЗаказПокупателя.Проведен,
	|	ЗаказПокупателя.Склад,
	|	ЗаказПокупателя.Магазин,
	|	ЗаказПокупателя.Комментарий,
	|	ЗаказПокупателя.СуммаДокумента,
	|	ЗаказПокупателя.ДисконтнаяКарта,
	|	ЗаказПокупателя.Ответственный,
	|	ЗаказПокупателя.УчитыватьНДС,
	|	ЗаказПокупателя.ЦенаВключаетНДС,
	|	ЗаказПокупателя.ЖелаемаяДатаПродажи,
	|	ЗаказПокупателя.АдресДоставки,
	|	ЗаказПокупателя.ВладелецДисконтнойКарты,
	|	ЗаказПокупателя.Продавец,
	|	ЗаказПокупателя.Организация,
	|	ЗаказПокупателя.Статус,
	|	ЗаказПокупателя.НомерЗаказаНаСайте,
	|	ЗаказПокупателя.ДатаЗаказаНаСайте,
	|	ВЫБОР
	|		КОГДА НЕ ЗаказПокупателя.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ПустаяСсылка)
	|		КОГДА ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.НеСогласован)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ОжидаетсяСогласование)
	|		КОГДА ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.Закрыт)
	|		КОГДА ЗаказПокупателя.Отменено
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ГотовКЗакрытию)
	|		КОГДА НЕ ТаблицаОстатковПоЗаказам.Заказ ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаКонстанты.ИспользоватьРезервированиеПоЗаказамПокупателей
	|							И ЗаказПокупателя.НаличиеНезарезервированныхСтрок
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ОжидаетсяРезервирование)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ОжидаетсяПродажа)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПокупателей.ГотовКЗакрытию)
	|	КОНЕЦ КАК Состояние,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.Контрагент.Наименование КАК КонтрагентНаименование,
	|	ЗаказПокупателя.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	ЗаказПокупателя.Контрагент.ЮрФизЛицо КАК КонтрагентЮрФизЛицо,
	|	ЗаказПокупателя.Контрагент.ИНН КАК КонтрагентИНН,
	|	ЗаказПокупателя.Контрагент.КПП КАК КонтрагентКПП,
	|	ЗаказПокупателя.Контрагент.КодПоОКПО КАК КонтрагентКодПоОКПО
	|ПОМЕСТИТЬ ТаблицаЗаказов
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатковПоЗаказам КАК ТаблицаОстатковПоЗаказам
	|		ПО ЗаказПокупателя.Ссылка = ТаблицаОстатковПоЗаказам.Заказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонстанты КАК ТаблицаКонстанты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЗаказПокупателя.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Закрыт)
	|	И ЗаказПокупателя.НомерЗаказаНаСайте <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка,
	|	ЧекККМ.Номер,
	|	ЧекККМ.Дата
	|ПОМЕСТИТЬ ТаблицаЧековШапка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Проведен
	|	И ЧекККМ.ЗаказПокупателя В
	|			(ВЫБРАТЬ
	|				ТаблицаЗаказов.Ссылка КАК Ссылка
	|			ИЗ
	|				ТаблицаЗаказов КАК ТаблицаЗаказов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМТовары.КодСтроки,
	|	ЧекККМТовары.ЗаказПокупателя,
	|	ТаблицаЧековШапка.Номер,
	|	ТаблицаЧековШапка.Дата,
	|	МАКСИМУМ(ТаблицаЧековШапка.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаЧеков
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЧековШапка КАК ТаблицаЧековШапка
	|		ПО ЧекККМТовары.Ссылка = ТаблицаЧековШапка.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМТовары.КодСтроки,
	|	ЧекККМТовары.ЗаказПокупателя,
	|	ТаблицаЧековШапка.Номер,
	|	ТаблицаЧековШапка.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяТовары.Ссылка КАК Заказ,
	|	ТаблицаЗаказов.НомерЗаказаНаСайте КАК ЗаказНомерНаСайте,
	|	ТаблицаЗаказов.ДатаЗаказаНаСайте КАК ЗаказДатаНаСайте,
	|	ЕСТЬNULL(ТаблицаОстатков.ЗаказаноОстаток, 0) КАК ЗаказКОплатеОстаток,
	|	ЕСТЬNULL(ТаблицаОстатков.ЗаказаноОстаток, 0) КАК ЗаказКОтгрузкеОстаток,
	|	ТаблицаЗаказов.Дата КАК ЗаказДата,
	|	ТаблицаЗаказов.Номер КАК ЗаказНомер,
	|	ТаблицаЗаказов.Проведен КАК ЗаказПроведен,
	|	ТаблицаЗаказов.ПометкаУдаления КАК ЗаказПометкаУдаления,
	|	ЕСТЬNULL(ТаблицаЧеков.Номер, """") КАК ЗаказНомерОплаты,
	|	ЕСТЬNULL(ТаблицаЧеков.Дата, """") КАК ЗаказДатаОплаты,
	|	ЕСТЬNULL(ТаблицаЧеков.Номер, """") КАК ЗаказНомерОтгрузки,
	|	ЕСТЬNULL(ТаблицаЧеков.Дата, """") КАК ЗаказДатаОтгрузки,
	|	""643"" КАК ЗаказВалютаКод,
	|	ТаблицаЗаказов.СуммаДокумента КАК ЗаказСуммаДокумента,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаказов.УчитыватьНДС
	|			ТОГДА ""Облагается""
	|		ИНАЧЕ ""Не облагается""
	|	КОНЕЦ КАК ЗаказНалогообложениеНДС,
	|	ТаблицаЗаказов.ЦенаВключаетНДС КАК ЗаказСуммаВключаетНДС,
	|	ТаблицаЗаказов.Состояние КАК ЗаказСостояниеЗаказа,
	|	ТаблицаЗаказов.Статус КАК ЗаказСтатусЗаказа,
	|	ЛОЖЬ КАК ЗаказЗакрыт,
	|	ТаблицаЗаказов.Комментарий КАК ЗаказКомментарий,
	|	"""" КАК БанковскийСчет,
	|	ТаблицаЗаказов.Контрагент КАК Контрагент,
	|	ТаблицаЗаказов.КонтрагентНаименование КАК КонтрагентНаименование,
	|	ТаблицаЗаказов.КонтрагентНаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	ТаблицаЗаказов.КонтрагентЮрФизЛицо КАК КонтрагентЮрФизЛицо,
	|	ТаблицаЗаказов.КонтрагентИНН КАК КонтрагентИНН,
	|	ТаблицаЗаказов.КонтрагентКПП КАК КонтрагентКПП,
	|	ТаблицаЗаказов.КонтрагентКодПоОКПО КАК КонтрагентКодПоОКПО,
	|	1 КАК ЗаказКурс,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ЗаказПокупателяТовары.Упаковка.ЕдиницаИзмерения
	|	КОНЕЦ КАК ТоварыЕдиницаИзмерения,
	|	ЗаказПокупателяТовары.КоличествоУпаковок КАК ТоварыКоличество,
	|	ЗаказПокупателяТовары.Номенклатура КАК ТоварыНоменклатура,
	|	ЗаказПокупателяТовары.Номенклатура.Артикул КАК ТоварыНоменклатураАртикул,
	|	ЗаказПокупателяТовары.ПроцентАвтоматическойСкидки + ЗаказПокупателяТовары.ПроцентРучнойСкидки КАК ТоварыПроцентСкидки,
	|	ЗаказПокупателяТовары.КоличествоУпаковок * ЗаказПокупателяТовары.Цена - ЗаказПокупателяТовары.Сумма КАК ТоварыСуммаСкидки,
	|	ЗаказПокупателяТовары.Сумма КАК ТоварыСумма,
	|	ЗаказПокупателяТовары.Сумма КАК ТоварыВсего,
	|	ЗаказПокупателяТовары.Цена КАК ТоварыЦена,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяТовары.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ ЗаказПокупателяТовары.Упаковка.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ТоварыЕдиницаИзмеренияКод,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяТовары.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ ЗаказПокупателяТовары.Упаковка.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК ТоварыЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяТовары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное
	|		ИНАЧЕ ЗаказПокупателяТовары.Упаковка.ЕдиницаИзмерения.НаименованиеПолное
	|	КОНЕЦ КАК ТоварыЕдиницаИзмеренияНаименованиеПолное,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяТовары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение
	|		ИНАЧЕ ЗаказПокупателяТовары.Упаковка.ЕдиницаИзмерения.МеждународноеСокращение
	|	КОНЕЦ КАК ТоварыЕдиницаИзмеренияМеждународноеСокращение,
	|	1 КАК ТоварыЕдиницаИзмеренияПересчетКоэффициент,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяТовары.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ ЗаказПокупателяТовары.Упаковка.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ТоварыЕдиницаИзмеренияПересчетЕдиницаКод,
	|	ЗаказПокупателяТовары.СтавкаНДС КАК ТоварыСтавкаНДС,
	|	ЗаказПокупателяТовары.Номенклатура.ТипНоменклатуры КАК ТоварыТипНоменклатуры,
	|	ЗаказПокупателяТовары.Характеристика КАК ТоварыХарактеристика,
	|	ЗаказПокупателяТовары.СуммаНДС КАК ТоварыСуммаНДС
	|{ВЫБРАТЬ
	|	Заказ.*,
	|	ЗаказНомерНаСайте,
	|	ЗаказДатаНаСайте,
	|	ЗаказКОплатеОстаток,
	|	ЗаказКОтгрузкеОстаток,
	|	ЗаказДата,
	|	ЗаказНомер,
	|	ЗаказПроведен,
	|	ЗаказПометкаУдаления,
	|	ЗаказНомерОплаты,
	|	ЗаказДатаОплаты,
	|	ЗаказНомерОтгрузки,
	|	ЗаказДатаОтгрузки,
	|	ЗаказВалютаКод,
	|	ЗаказСуммаДокумента,
	|	ЗаказНалогообложениеНДС,
	|	ЗаказСуммаВключаетНДС,
	|	ЗаказСостояниеЗаказа,
	|	ЗаказСтатусЗаказа,
	|	ЗаказЗакрыт,
	|	ЗаказКомментарий,
	|	БанковскийСчет,
	|	Контрагент.*,
	|	КонтрагентНаименование,
	|	КонтрагентНаименованиеПолное,
	|	КонтрагентЮрФизЛицо.*,
	|	КонтрагентИНН,
	|	КонтрагентКПП,
	|	КонтрагентКодПоОКПО,
	|	ЗаказКурс,
	|	ТоварыЕдиницаИзмерения.*,
	|	ТоварыКоличество,
	|	ТоварыНоменклатура.* КАК ТоварыНоменклатура,
	|	ТоварыНоменклатураАртикул,
	|	ТоварыПроцентСкидки,
	|	ТоварыСуммаСкидки,
	|	ТоварыСумма,
	|	ТоварыВсего,
	|	ТоварыЦена,
	|	ТоварыЕдиницаИзмеренияКод,
	|	ТоварыЕдиницаИзмеренияНаименование,
	|	ТоварыЕдиницаИзмеренияНаименованиеПолное,
	|	ТоварыЕдиницаИзмеренияМеждународноеСокращение,
	|	ТоварыЕдиницаИзмеренияПересчетКоэффициент,
	|	ТоварыЕдиницаИзмеренияПересчетЕдиницаКод,
	|	ТоварыСтавкаНДС.*,
	|	ТоварыТипНоменклатуры,
	|	ТоварыХарактеристика.*,
	|	ТоварыСуммаНДС}
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЗаказов КАК ТаблицаЗаказов
	|		ПО ЗаказПокупателяТовары.Ссылка = ТаблицаЗаказов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатков КАК ТаблицаОстатков
	|		ПО ЗаказПокупателяТовары.Ссылка = ТаблицаОстатков.Заказ
	|			И ЗаказПокупателяТовары.КодСтроки = ТаблицаОстатков.КодСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЧеков КАК ТаблицаЧеков
	|		ПО ЗаказПокупателяТовары.Ссылка = ТаблицаЧеков.ЗаказПокупателя
	|			И ЗаказПокупателяТовары.КодСтроки = ТаблицаЧеков.КодСтроки";
	
КонецПроцедуры


// Отменяет проведение у документа.
// Параметры:
// ДокументОбъект - заказ, проведение которого отменяется.
Процедура ОтменитьПроведениеДокумента(ДокументОбъект) Экспорт
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

// Процедура записи докуменрта заказ.
// Параметры:
// ДокументОбъект - заказ, записываемый.
Процедура ЗаписатьДокументЗаказ(ДокументОбъект) Экспорт
	
	Если НЕ ДокументОбъект.Проведен
		ИЛИ ДокументОбъект.Ссылка.Статус = Перечисления.СтатусыЗаказовПокупателей.НеСогласован Тогда
	
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
	
	КонецЕсли;
	
КонецПроцедуры

// Заполняет префикс организации.
//
// Параметры:
// Организация. Тип - СправочникСсылка.Организации - ссылка на организацию.
// Префикс. Тип - Строка. Префикс для документов принадлежащих организации.
Процедура ПолучитьПрефиксОрганизации(Организация, Префикс) Экспорт
	
КонецПроцедуры

// Заполняет префикс для заказов с сайта.
// Параметры:
// Префикс. Тип - строка. Префикс для заказов, загруженных с сайта.
Процедура ПолучитьПрефиксДляЗаказаССайта(Префикс) Экспорт
	
	
	
КонецПроцедуры

#Область ОбработкаСоздатьСайт

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьПараметрыЗапросаПоЦенообразованию(ПараметрыКомпоновки)
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ИспользоватьАссортимент", 
								  ПолучитьФункциональнуюОпцию("УстанавливатьВидыЦенВАссортименте"));
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ПериодАссортимента", 
								  ТекущаяДатаСеанса());
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "Период", 
								  ТекущаяДатаСеанса());
	
	ПустаяЕдиница = Справочники.БазовыеЕдиницыИзмерения.ПустаяСсылка();
	ЕдиницаИзмеренияПоУмолчанию = Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду("796 ");
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияПоУмолчанию) Тогда
		ЕдиницаИзмеренияПоУмолчанию = НайтиСоздатьЕдиницуИзмерения(ПустаяЕдиница)
	КонецЕсли;
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ПустаяЕдиница", 
								  ПустаяЕдиница);
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ЕдиницаПоУмолчанию", 
								  ЕдиницаИзмеренияПоУмолчанию);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БазовыеЕдиницыИзмерения.Ссылка,
	|	БазовыеЕдиницыИзмерения.ВерсияДанных,
	|	БазовыеЕдиницыИзмерения.ПометкаУдаления,
	|	БазовыеЕдиницыИзмерения.Код,
	|	БазовыеЕдиницыИзмерения.Наименование,
	|	БазовыеЕдиницыИзмерения.НаименованиеПолное,
	|	БазовыеЕдиницыИзмерения.МеждународноеСокращение,
	|	БазовыеЕдиницыИзмерения.Предопределенный,
	|	БазовыеЕдиницыИзмерения.ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.БазовыеЕдиницыИзмерения КАК БазовыеЕдиницыИзмерения
	|ГДЕ
	|	БазовыеЕдиницыИзмерения.Ссылка = &ЕдиницаИзмеренияПоУмолчанию";
	
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияПоУмолчанию", ЕдиницаИзмеренияПоУмолчанию);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "КодЕдиницыПоУмолчанию", 
								  Выборка.Код);
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "НаименованиеЕдиницыПоУмолчанию", 
								  Выборка.Наименование);
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "НаименованиеПолноеЕдиницыПоУмолчанию", 
								  Выборка.НаименованиеПолное);
	
	УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "МеждународноеСокращениеЕдиницыПоУмолчанию", 
								  Выборка.МеждународноеСокращение);
	
КонецПроцедуры

Процедура УстановитьПараметрКомпоновки(ПараметрыКомпоновки, ИмяПараметра, ЗначениеПараметра)
	
	ЭлементПараметра = ПараметрыКомпоновки.Добавить();
	ЭлементПараметра.Имя = ИмяПараметра;
	ЭлементПараметра.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ЭлементПараметра.Значение = ЗначениеПараметра;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьДокумента(Документ, СтруктураРеквизитовТовары, Параметры)
	
	Документ.Товары.Очистить();
	Для Каждого ТекСтрока Из СтруктураРеквизитовТовары Цикл
		
		НоваяСтрока = Документ.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.Характеристика = ТекСтрока.Характеристика;
		НоваяСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		НоваяСтрока.СтавкаНДС = ПолучитьПоСтавкеНДСЗначениеДляЗагрузки(ТекСтрока.СтавкаНДС);
		
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Документ));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Документ.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
КонецПроцедуры

Функция НайтиНоменклатуруПоАртикулуНаименованию(Артикул, Наименование)
	
	Если ЗначениеЗаполнено(Артикул) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Артикул = &Артикул
		|	И НЕ Номенклатура.ЭтоГруппа");
		
		Запрос.УстановитьПараметр("Артикул", Артикул);
		
	ИначеЕсли ЗначениеЗаполнено(Наименование) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование = &Наименование
		|	И НЕ Номенклатура.ЭтоГруппа");
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат.Выгрузить()[0][0];
	
КонецФункции

// Вычисляет значение ставки НДС по переданному значению.
//
// Параметры:
//  ЗначениеСтавкиНДС - Число
//
// Возвращаемое значение:
//  Перечисление.СтавкиНДС
Функция ПолучитьПоСтавкеНДСЗначениеДляЗагрузки(ЗначениеСтавкиНДС)
	
	Если ЗначениеСтавкиНДС = "20" ИЛИ ЗначениеСтавкиНДС = 20 Тогда
		Возврат Перечисления.СтавкиНДС.НДС20;	
	ИначеЕсли ЗначениеСтавкиНДС = "18" ИЛИ ЗначениеСтавкиНДС = 18 Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли ЗначениеСтавкиНДС = "10" ИЛИ ЗначениеСтавкиНДС = 10 Тогда
		Возврат Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли ЗначениеСтавкиНДС = "0" ИЛИ ЗначениеСтавкиНДС = 0 Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
	Иначе
		Возврат Перечисления.СтавкиНДС.НДС20;
	КонецЕсли;
	
КонецФункции

Функция НайтиСоздатьЕдиницуИзмерения(ДанныеЕдиницыИзмерения)
	
	КодБазовойЕдиницы = ДанныеЕдиницыИзмерения.КодБазовойЕдиницы;
	Если ЗначениеЗаполнено(КодБазовойЕдиницы)Тогда
		ЕдиницаИзмерения = Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду(КодБазовойЕдиницы);
		Возврат ЕдиницаИзмерения;
	КонецЕсли;
	
	НаименованиеБазовойЕдиницы = ДанныеЕдиницыИзмерения.НаименованиеБазовойЕдиницы;
	
	Если ЗначениеЗаполнено(НаименованиеБазовойЕдиницы) Тогда
		ЕдиницаИзмерения = Справочники.БазовыеЕдиницыИзмерения.НайтиПоНаименованию(НаименованиеБазовойЕдиницы);
		Возврат ЕдиницаИзмерения;
	КонецЕсли;
	
	ЕдиницаИзмерения = Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду("796");
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		Возврат ЕдиницаИзмерения;
	КонецЕсли;
	
	ЕдиницаИзмеренияОбъект = Справочники.БазовыеЕдиницыИзмерения.СоздатьЭлемент();
	ЕдиницаИзмеренияОбъект.Код = "796";
	ЕдиницаИзмеренияОбъект.Наименование = "Штука";
	ЕдиницаИзмеренияОбъект.МеждународноеСокращение = "PCE";
	ЕдиницаИзмеренияОбъект.Записать();
	ЕдиницаИзмерения = ЕдиницаИзмеренияОбъект.Ссылка;
	Возврат ЕдиницаИзмерения.Ссылка;
	
КонецФункции

Функция МагазинПоНаименованию(НаименованиеМагазина)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Магазины.Ссылка
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.Наименование = &НаименованиеМагазина";
	
	Запрос.УстановитьПараметр("НаименованиеМагазина", НаименованиеМагазина);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Магазины.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // МагазинПоНаименованию()

#КонецОбласти

#Область НовыеПроцедурыИФункции

// Корректирует проверяемые при записи реквизиты формы узла 
//
// Параметры:
//  Форма                 - УправляемаяФорма - форма плана узла обмена, в которой выполняется запись.
//  ПроверяемыеРеквизиты  - Массив - массив имен проверяемых на заполненность реквизитов формы.
//  ОбменТоварами         - Булево - признак того, что будет выполняться обмен товарами.
//  ОбменЗаказами         - Булево - признак того, что будет выполняться обмен заказами.
//
Процедура СкорректироватьПроверяемыеРеквизитыФормыУзла(Форма, ПроверяемыеРеквизиты, ОбменТоварами, ОбменЗаказами) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если Не ОбменЗаказами Тогда
		МассивНепроверяемыхРеквизитов = РеквизитыОбменаЗаказами();
		МассивНепроверяемыхРеквизитов.Добавить("ПричинаОтменыЗаказовПоУмолчанию");
	ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПокупателей") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПричинаОтменыЗаказовПоУмолчанию");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - Форма - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ФормаУзлаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначенияРТ.РеквизитФормы(Форма, "ИспользоватьЗаказыПокупателей") = Неопределено Тогда
		ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
		// Добавление реквизитов на форму.
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИспользоватьЗаказыПокупателей", ОписаниеТиповБулево,));
		
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	
	Форма.ИспользоватьЗаказыПокупателей = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПокупателей");
	
	Если Форма.ИспользоватьЗаказыПокупателей И Форма.Объект.Ссылка.Пустая() Тогда
		
		Для каждого ЗначениеПеречисления Из Метаданные.Перечисления.СтатусыЗаказовПокупателей.ЗначенияПеречисления Цикл
			
			СтрокаТаблица = Форма.СоответствиеСтатусовЗаказов.Добавить();
			СтрокаТаблица.СтатусЗаказаВБазе   = Перечисления.СтатусыЗаказовПокупателей[ЗначениеПеречисления.Имя];
			СтрокаТаблица.СтатусЗаказаНаСайте = ЗначениеПеречисления.Синоним;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыОбменаЗаказами()
	
	МассивРеквизитов = Новый Массив;
	
	МассивРеквизитов.Добавить("СпособИдентификацииКонтрагентов");
	МассивРеквизитов.Добавить("ЕдиницаИзмеренияНовойНоменклатуры");
	МассивРеквизитов.Добавить("ГруппаДляНовойНоменклатуры");
	МассивРеквизитов.Добавить("ГруппаДляНовыхКонтрагентов");
	МассивРеквизитов.Добавить("Организация");
	МассивРеквизитов.Добавить("НомерНаСайте");
	МассивРеквизитов.Добавить("ДатаНаСайте");
	МассивРеквизитов.Добавить("СоответствиеСтатусовЗаказов");
	МассивРеквизитов.Добавить("ВидНоменклатурыТоварДляНовойНоменклатуры");
	МассивРеквизитов.Добавить("ВидНоменклатурыУслугаДляНовойНоменклатуры");
	
	Возврат МассивРеквизитов;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейсРТ

// Создает нового контрагента
//
// Параметры:
//  ДанныеКонтрагента        - Структура - содержит данные покупателя с сайта.
//  ПрикладныеПараметры      - Структура - содержит информацию настройках обмена, выполненных в форме узла.
//  ОписаниеОшибки           - Строка - в нее записывается текст ошибки, которая может возникнуть при создании нового контрагента.
//  СтруктураСвойстваЗаказа  - Структура - содержит свойства заказа с сайта.
//
// Возвращаемое значение:
//   СправочникСсылка.Контрагент   - ссылка на вновь созданного контрагента
//
Функция СоздатьКонтрагента(ДанныеКонтрагента, ПрикладныеПараметры, ТекстОшибки, СтруктураСвойстваЗаказа) Экспорт
	
	НовыйКонтрагент                     = Справочники.Контрагенты.СоздатьЭлемент(); 
	
	ЗаполнитьЗначенияСвойств(НовыйКонтрагент, ДанныеКонтрагента);
	
	НовыйКонтрагент.ЮрФизЛицо          = ?(ДанныеКонтрагента.ЮрЛицо, Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.ЮрФизЛицо.ФизЛицо);
	НовыйКонтрагент.Наименование       = ДанныеКонтрагента.Наименование;
	НовыйКонтрагент.НаименованиеПолное = ?(ДанныеКонтрагента.ЮрЛицо, ДанныеКонтрагента.ОфициальноеНаименование, ДанныеКонтрагента.ПолноеНаименование);
	Попытка
		Если ПрикладныеПараметры.Свойство("ГруппаДляНовыхКонтрагентов") Тогда
			НовыйКонтрагент.Родитель = ПрикладныеПараметры.ГруппаДляНовыхКонтрагентов;
		КонецЕсли;
	Исключение
		СтрокаОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Для Каждого СтрокаИнформации Из ДанныеКонтрагента.ИнформацияПоКонтрагенту Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаИнформации.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(СтрокаИнформации.Вид) = ВРег(НСтр("ru = 'Фактический адрес'")) Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.Адрес,
			                             СтрокаИнформации.Представление);
			
		ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(НСтр("ru = 'Юридический адрес'")) Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.Адрес,
			                             СтрокаИнформации.Представление);
			
		ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(НСтр("ru = 'ТелефонРабочий'")) Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.Телефон,
			                             СтрокаИнформации.Представление);
			
		ИначеЕсли ВРег(СтрокаИнформации.Вид) =  ВРег(НСтр("ru = 'Почта'")) Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
			                             СтрокаИнформации.Представление);
			
		КонецЕсли;
		
	КонецЦикла;
	
	НовыйКонтрагент.Записать();
	
	Если ДанныеКонтрагента.Свойство("РасчетныеСчета") И ДанныеКонтрагента.РасчетныеСчета.Количество() > 0 Тогда
		
		Для Каждого РасчетныйСчет Из ДанныеКонтрагента.РасчетныеСчета Цикл
			
			ДанныеБанка = Новый Структура;
			ДанныеБанка.Вставить("SWIFT","");
			ДанныеБанка.Вставить("Адрес","");
			ДанныеБанка.Вставить("БИК","");
			ДанныеБанка.Вставить("Город","");
			ДанныеБанка.Вставить("КоррСчет","");
			ДанныеБанка.Вставить("Наименование","");
			ЗаполнитьЗначенияСвойств(ДанныеБанка, РасчетныйСчет.ДанныеБанка);
			
			Если ПустаяСтрока(РасчетныйСчет.НомерСчета)
				Или ПустаяСтрока(ДанныеБанка.БИК)
				Или ПустаяСтрока(ДанныеБанка.КоррСчет) Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйСчет = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
			НовыйСчет.НомерСчета            = РасчетныйСчет.НомерСчета;
			НовыйСчет.Владелец              = НовыйКонтрагент.Ссылка;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	КлассификаторБанков.Ссылка
			|ИЗ
			|	Справочник.КлассификаторБанков КАК КлассификаторБанков
			|ГДЕ
			|	КлассификаторБанков.Код = &БИК
			|	ИЛИ КлассификаторБанков.КоррСчет = &КоррСчет";
			
			Запрос.УстановитьПараметр("БИК", ДанныеБанка.БИК);
			Запрос.УстановитьПараметр("КоррСчет", ДанныеБанка.КоррСчет);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НовыйСчет.Банк = Выборка.Ссылка;
			Иначе
				
				Если ПустаяСтрока(ДанныеБанка.КоррСчет)
					Или ПустаяСтрока(ДанныеБанка.Наименование) Тогда
					Продолжить;
				КонецЕсли;
				
				НовыйСчет.РучноеИзменениеРеквизитовБанка = Истина;
				НовыйСчет.НаименованиеБанка = ДанныеБанка.Наименование;
				НовыйСчет.ГородБанка        = ДанныеБанка.Город;
				НовыйСчет.КоррСчетБанка     = ДанныеБанка.КоррСчет;
				НовыйСчет.АдресБанка        = ДанныеБанка.Адрес;
				НовыйСчет.БИКБанка          = ДанныеБанка.БИК;
				
			КонецЕсли;
			
			НовыйСчет.Записать();
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НовыйКонтрагент.Ссылка;
	
КонецФункции

Процедура ДобавитьКонтактнуюИнформацию(Объект, ВидКИ, ТипКИ, Представление)
	
	ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ВидКИ);
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Объект, ЗначенияПолей, ВидКИ, ТипКИ);
	
КонецПроцедуры

#КонецОбласти



