//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ ДОПОЛНИТЕЛЬНЫМИ ПРАВАМИ ПОЛЬЗОВАТЕЛЕЙ

// Функция возвращает список значений права, установленных для пользователя.
// Если количество значений меньше количество доступных ролей, то возвращается значение по умолчанию.
//
// Параметры:
//  Право               - право, для которого определяются значения.
//  ЗначениеПоУмолчанию - значение по умолчанию для передаваемого права (возвращается в случае
//                        отсутствия значений в регистре сведений).
//  ИспользоватьКэш     - Булево
//
// Возвращаемое значение:
//  Список всех значений, установленных наборам прав (ролям), доступных пользователю.
//
Функция ПолучитьЗначениеПраваДляТекущегоПользователя(Право, ЗначениеПоУмолчанию = Неопределено, ИспользоватьКэш = Истина) Экспорт
	
	Если ИспользоватьКэш Тогда
		КэшДополнительныхПрав = глЗначениеПеременной("ЗначенияДополнительныхПравПользователя");
		ЗначениеПрава = КэшДополнительныхПрав[Право];
		Если ЗначениеПрава = Неопределено Тогда
			ЗначениеПрава = ПрочитатьЗначениеПраваДляТекущегоПользователя(Право, ЗначениеПоУмолчанию);
			КэшДополнительныхПрав[Право] = ЗначениеПрава;
			#Если Сервер Тогда
				глЗначениеПеременнойУстановить("ЗначенияДополнительныхПравПользователя", КэшДополнительныхПрав, Истина);
			#КонецЕсли
		КонецЕсли;
	Иначе
		ЗначениеПрава = ПрочитатьЗначениеПраваДляТекущегоПользователя(Право, ЗначениеПоУмолчанию);
	КонецЕсли;
	Возврат ЗначениеПрава;
	
КонецФункции // ПолучитьЗначениеПраваДляТекущегоПользователя()

// Функция читает право текущего пользователя.
//
Функция ПрочитатьЗначениеПраваДляТекущегоПользователя(Право, ЗначениеПоУмолчанию)

	ВозвращаемыеЗначения = Новый СписокЗначений;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Пользователь"     , Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ПравоПользователя", Право);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	РегистрЗначениеПрав.Значение
	               |ИЗ
	               |	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК РегистрЗначениеПрав
	               |ГДЕ
	               |	РегистрЗначениеПрав.Право = &ПравоПользователя
	               |	И РегистрЗначениеПрав.Пользователь В
	               |			(ВЫБРАТЬ
	               |				ПользователиГруппы.Ссылка КАК Ссылка
	               |			ИЗ
	               |				Справочник.ГруппыПользователей.Состав КАК ПользователиГруппы
	               |			ГДЕ
	               |				ПользователиГруппы.Пользователь = &Пользователь
	               |		
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |			ВЫБРАТЬ
	               |				ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	               |		
	               |			ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |			ВЫБРАТЬ
	               |				&Пользователь)";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() = 0 Тогда
		ВозвращаемыеЗначения.Добавить(ЗначениеПоУмолчанию);
	Иначе
		Пока Выборка.Следующий() Цикл
			ВозвращаемыеЗначения.Добавить(Выборка.Значение);
		КонецЦикла;
	КонецЕсли;

	Возврат ВозвращаемыеЗначения;

КонецФункции // ПрочитатьЗначениеПраваДляТекущегоПользователя()

// Функция возвращает булево значение права текущего пользователя.
//
Функция ПолучитьБулевоЗначениеПраваПользователя(Право, ЗначениеПоУмолчанию = Ложь, Пользователь = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Пользователь = Неопределено
	 ИЛИ Пользователь = Пользователи.ТекущийПользователь() Тогда
		Список = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(Право, ЗначениеПоУмолчанию, Ложь);
	Иначе
		Список = УправлениеПользователями.ПолучитьЗначениеПраваДляПользователя(Право, ЗначениеПоУмолчанию, Пользователь);
	КонецЕсли;
	
	Если (Список.Количество() = 0) ИЛИ (Список.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат Список[0].Значение;
	КонецЕсли;
	
КонецФункции 

// Функция возвращает булево значение права текущего пользователя с учетом изменения прав.
// При каждом вызове функции определяется пользователь, поэтому если есть неоходимость получения нескольких прав,
// то лучше заранее получить пользователя и использовать функцию ПолучитьБулевоЗначениеПраваПользователя.
//
Функция ПолучитьБулевоЗначениеПраваПользователяСУчетомИзмененныхПрав(Право, ЗначениеПоУмолчанию = Ложь) Экспорт
	
	Пользователь = ОбщегоНазначенияРТКлиентСервер.ПользовательСУчетомИзмененныхПрав();
	
	Если Пользователь = Неопределено
	 ИЛИ Пользователь = Пользователи.ТекущийПользователь() Тогда
		Список = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(Право, ЗначениеПоУмолчанию, Ложь);
	Иначе
		Список = УправлениеПользователями.ПолучитьЗначениеПраваДляПользователя(Право, ЗначениеПоУмолчанию, Пользователь);
	КонецЕсли;
	
	Если (Список.Количество() = 0) ИЛИ (Список.Количество() > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат Список[0].Значение;
	КонецЕсли;
	
КонецФункции 


// Функция возвращает список значений права, установленных для пользователя.
// Если количество значений меньше количество доступных ролей, то возвращается значение по умолчанию.
//
// Параметры:
//  Право               - право, для которого определяются значения.
//  ЗначениеПоУмолчанию - значение по умолчанию для передаваемого права (возвращается в случае
//                        отсутствия значений в регистре сведений).
//
// Возвращаемое значение:
//  Список всех значений, установленных наборам прав (ролям), доступных пользователю.
//
Функция ПолучитьЗначениеПраваДляПользователя(Право, ЗначениеПоУмолчанию = Неопределено, Пользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемыеЗначения = Новый СписокЗначений;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Пользователь"     , Пользователь);
	Запрос.УстановитьПараметр("ПравоПользователя", Право);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РегистрЗначениеПрав.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК РегистрЗначениеПрав
	|ГДЕ
	|	РегистрЗначениеПрав.Право = &ПравоПользователя
	|	И РегистрЗначениеПрав.Пользователь = &Пользователь";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() = 0 Тогда
		ВозвращаемыеЗначения.Добавить(ЗначениеПоУмолчанию);
	Иначе
		Пока Выборка.Следующий() Цикл
			ВозвращаемыеЗначения.Добавить(Выборка.Значение);
		КонецЦикла;
	КонецЕсли;

	Возврат ВозвращаемыеЗначения;

КонецФункции // ПолучитьЗначениеПраваДляТекущегоПользователя()

//////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБНОВЛЯЮЩИЕ РС по учетным записям.

Функция ПолучитьМассивМагазиновДоступныхВСеансе(Пользователь) Экспорт
	
	Если ПланыОбмена.ПоРабочемуМесту.ЭтоРабочееМесто() Тогда
		МассивМагазинов = Новый Массив;
		МассивМагазинов.Добавить(ПланыОбмена.ПоРабочемуМесту.ЭтотУзел().Магазин);
	Иначе	
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоступныеМагазины.Магазин КАК Магазин
		|ИЗ
		|	(ВЫБРАТЬ
		|		МагазиныУзла.Магазин КАК Магазин
		|	ИЗ
		|		ПланОбмена.ПоМагазину.Магазины КАК МагазиныУзла
		|	ГДЕ
		|		МагазиныУзла.Ссылка = &ЭтотУзел
		|		И (НЕ &ГлавныйУзел)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Магазины.Ссылка
		|	ИЗ
		|		Справочник.Магазины КАК Магазины
		|	ГДЕ
		|		&ГлавныйУзел
		|		И (НЕ Магазины.СкладУправляющейСистемы)) КАК ДоступныеМагазины");			
	КонецЕсли;
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ПоМагазину.ЭтотУзел());
	Запрос.УстановитьПараметр("ГлавныйУзел", ПланыОбмена.ГлавныйУзел() = Неопределено);
	МассивМагазинов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Магазин");
	
	Возврат МассивМагазинов;
	
КонецФункции

// Функция возвращает список пользователей, связанных
// с пользователями текущей информационной базы.
Функция ПолучитьСписокПользователейИнформационнойБазы() Экспорт
	
	Результат = Новый СписокЗначений;
	
	МассивПользователейИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для Каждого ПользовательИБ Из МассивПользователейИБ Цикл
		Пользователь = Справочники.Пользователи.НайтиПоКоду(ПользовательИБ.Имя);
		Если ЗначениеЗаполнено(Пользователь) Тогда
			Результат.Добавить(Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция проверяет переданного пользователя, на то что он
// является пользователем информационной базы.
Функция ЭтоПользовательИнформационнойБазы(Пользователь) Экспорт
	
	Результат = Ложь;
	
	Пользователь = Справочники.Пользователи.НайтиПоКоду(СокрЛП(Пользователь.Код));
	Если Пользователь <> Неопределено Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДОПОЛНИТЕЛЬНЫХ ПРАВ

// Устанавливает доступность 
//
// Параметры:
//  Доступность - Доступность элемента.
//  Право       - право, для которого определяются значения.
//
Процедура УстановитьДоступностьДляРеквизитовТабличнойЧасти(Доступность, Право) Экспорт
	
	Доступность = Доступность И УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(Право, Ложь);
	
КонецПроцедуры // УстановитьДоступностьДляРеквизитовТабличнойЧасти()

// Устанавливает доступность 
//
// Параметры:
//  ТолькоПросмотр - ТолькоПросмотр элемента.
//  Право       - право, для которого определяются значения.
//
Процедура УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(ТолькоПросмотр, Право) Экспорт
	
	ТолькоПросмотр = ТолькоПросмотр ИЛИ НЕ УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(Право, Ложь);
	
КонецПроцедуры // УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти()


