
#Область ПрограммныйИнтерфейс

// Очистка полученного магнитного кода, выбор из нескольких полученных форматов.
//
// Параметры:
//  МагнитныйКод - магнитные данные считанные СМК, в данном параметры возвращается обработанный код.
//
Процедура ВыбратьМагнитныйКод(МагнитныйКод) Экспорт
	
	СписокКодовКарты = ПодключаемоеОборудованиеРТВызовСервера.ПолучитьКодыКарты(МагнитныйКод);
	
	Если СписокКодовКарты.Количество() > 1 Тогда

		#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
			ВыбранныйКодКарты = СписокКодовКарты.ВыбратьЭлемент(НСтр("ru = 'Выберите считанный код:'"));
			Если ВыбранныйКодКарты <> Неопределено Тогда
				МагнитныйКод = ВыбранныйКодКарты.Значение;
			КонецЕсли;
		#КонецЕсли
		

	ИначеЕсли СписокКодовКарты.Количество() = 1 Тогда
		
		МагнитныйКод = СписокКодовКарты[0].Значение;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка ответа пользователя и загрузка данных из ТСД.
//
Процедура ПолучитьДанныеИзТСДПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Форма = Параметры.Форма;
	ОбновитьКоличество = (Результат = КодВозвратаДиалога.Да);
	Параметры.Вставить("ОбновитьКоличество", ОбновитьКоличество);
	
	Если ОбновитьКоличество И Параметры.ОчиститьКоличество Тогда
		Форма.ОчиститьКоличество();
	КонецЕсли;
	
	ДанныеШтрихкодов = Параметры.ДанныеШтрихкодов;
	
	СтруктураМассивов = ПодключаемоеОборудованиеРТВызовСервера.СформироватьМассивТоваров(ДанныеШтрихкодов, ОбновитьКоличество);
	
	Параметры.Вставить("ОпознанныеШтрихкоды", СтруктураМассивов.ОпознанныеШтрихкоды);
	Параметры.Вставить("НеОпознанныеШтрихкоды", СтруктураМассивов.НеОпознанныеШтрихкоды);
	Параметры.Вставить("УчитыватьСерийныеНомераПриСвертке", Параметры.УчитыватьСерийныеНомераПриСвертке);
	
	ПовторяющиесяШтрихкоды = СтруктураМассивов.ПовторяющиесяШтрихкоды;
	Если ПовторяющиесяШтрихкоды.ЗначенияПоиска.Количество() = 0 Тогда
		ПолучитьДанныеИзТСДПослеВыбораПовторов(Неопределено, Параметры);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПовторяющиесяШтрихкоды", ПовторяющиесяШтрихкоды);
		ОбработчикОповещения = Новый ОписаниеОповещения("ПолучитьДанныеИзТСДПослеВыбораПовторов", ЭтотОбъект, Параметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("ОбщаяФорма.ВыборДанныхПоискаПоШК", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		ОткрытаБлокирующаяФорма = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработка повторяющихся штрихкодов.
//
Процедура ПолучитьДанныеИзТСДПослеВыбораПовторов(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Для Каждого ПовторяющийсяШК Из Результат.ЗначенияПоиска Цикл
			Параметры.ОпознанныеШтрихкоды.ЗначенияПоиска.Добавить(ПовторяющийсяШК);
		КонецЦикла;
	КонецЕсли;
	
	НеОпознанныеШтрихкоды = Параметры.НеОпознанныеШтрихкоды;

	Если НеОпознанныеШтрихкоды.Количество() = 0 Тогда
		
		ПодборНоменклатурыПоСоответствиюШтрихкодов(Неопределено, Параметры);
		
	Иначе
		Если Параметры.ВыбиратьНенайденные Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Штрихкоды", НеОпознанныеШтрихкоды);
			
			Оповещение = Новый ОписаниеОповещения("ПодборНоменклатурыПоСоответствиюШтрихкодов", ЭтотОбъект, Параметры);
			ОткрытьФорму("ОбщаяФорма.ПодборНоменклатурыПоСоответствиюШтрихкодов",
							ПараметрыФормы,
							,
							,
							,
							,
							Оповещение,
							РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ШаблонПредупреждения = НСтр("ru = 'Данные по коду не найдены: %1'");
			Для Каждого СтрокаШтрихкода Из НеОпознанныеШтрихкоды Цикл
				СтрокаПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										ШаблонПредупреждения,
										СтрокаШтрихкода.Штрихкод);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаПредупреждения);
			КонецЦикла;
			ПодборНоменклатурыПоСоответствиюШтрихкодов(Неопределено, Параметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Подбор номенклатуры по значению штрихкодов.
//
Процедура ПодборНоменклатурыПоСоответствиюШтрихкодов(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Для Каждого СопоставленныйШК Из Результат Цикл
			Параметры.ОпознанныеШтрихкоды.ЗначенияПоиска.Добавить(СопоставленныйШК);
		КонецЦикла;
	КонецЕсли;
	
	ОпознанныеШтрихкоды = Параметры.ОпознанныеШтрихкоды;
	Если ОпознанныеШтрихкоды.Количество() > 0 Тогда
		ОпознанныеШтрихкоды.Вставить("ОбновитьКоличество", Параметры.ОбновитьКоличество);
		ОпознанныеШтрихкоды.Вставить("УчитыватьСерийныеНомераПриСвертке", Параметры.УчитыватьСерийныеНомераПриСвертке);
		РезультатОбработкиФормы = Параметры.Форма.ОбработатьДанныеИзТСДСервер(ОпознанныеШтрихкоды);
		Если Параметры.Свойство("ОбработатьПослеЗагрузки")
			И Параметры.ОбработатьПослеЗагрузки Тогда
			Параметры.Форма.ОбработатьДанныеПослеЗагрузкиИзТСД(ОпознанныеШтрихкоды);
		КонецЕсли;
	КонецЕсли;
	
	Если ОпознанныеШтрихкоды.Свойство("ТекстПредупреждения") Тогда
		Для Каждого СтрокаПредупреждения Из ОпознанныеШтрихкоды.ТекстПредупреждения Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаПредупреждения);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Обработка результата загрузки данных из ТСД.
//
Процедура ПолучитьДанныеИзТСДЗавершение(СтруктураРезультат, Параметры) Экспорт
	
	Параметры.Форма.Доступность = Истина;
	
	Если НЕ СтруктураРезультат.Результат Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ДанныеШтрихкодов", СтруктураРезультат.ТаблицаТоваров);
	
	Если Параметры.ЕстьКоличество Тогда
		ИмяТаблицы = "Товары";
		Если Параметры.Свойство("ИмяТаблицыВыборки") Тогда
			ИмяТаблицы = Параметры.ИмяТаблицыВыборки;
		КонецЕсли;
		Если Параметры.Форма.Объект[ИмяТаблицы].Количество() > 0 Тогда
			Оповещение = Новый ОписаниеОповещения("ПолучитьДанныеИзТСДПослеЗакрытияВопроса", ЭтотОбъект, Параметры);
			
			ТекстВопроса = НСтр("ru='Перезаполнить количество в строках табличной части?'") 
				+ Символы.ПС
				+ НСтр("ru='Да - Количество в строках табличной части будет заполнено количеством из ТСД'") 
				+ Символы.ПС 
				+ НСтр("ru='Нет - Количество из ТСД будет добавлено к количеству в строках табличной части'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Иначе
			ПолучитьДанныеИзТСДПослеЗакрытияВопроса(КодВозвратаДиалога.Нет, Параметры);
		КонецЕсли;
	Иначе
		ПолучитьДанныеИзТСДПослеЗакрытияВопроса(КодВозвратаДиалога.Нет, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Загружает в таблицу данные из терминала сбора данных.
//
Процедура ПолучитьДанныеИзТСД(Форма, ДополнительныеПараметры = Неопределено) Экспорт
	
	Форма.Доступность = Ложь;
	
	ОчиститьСообщения();
	
	ЕстьКоличество = Истина;
	ОчиститьКоличество = Ложь;
	ВыбиратьНенайденные = Истина;
	ОбработатьПослеЗагрузки = Ложь;
	ИмяТаблицыВыборки = "Товары";
	УчитыватьСерийныеНомераПриСвертке = Истина;
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ЕстьКоличество") Тогда
			ЕстьКоличество = ДополнительныеПараметры.ЕстьКоличество;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ОчиститьКоличество") Тогда
			ОчиститьКоличество = ДополнительныеПараметры.ОчиститьКоличество;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ВыбиратьНенайденные") Тогда
			ВыбиратьНенайденные = ДополнительныеПараметры.ВыбиратьНенайденные;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ОбработатьПослеЗагрузки") Тогда
			ОбработатьПослеЗагрузки = ДополнительныеПараметры.ОбработатьПослеЗагрузки;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ИмяТаблицыВыборки") Тогда
			ИмяТаблицыВыборки = ДополнительныеПараметры.ИмяТаблицыВыборки;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("УчитыватьСерийныеНомераПриСвертке") Тогда
			УчитыватьСерийныеНомераПриСвертке = ДополнительныеПараметры.УчитыватьСерийныеНомераПриСвертке;
		КонецЕсли;
	ИначеЕсли Форма.ПараметрыСобытийПО <> Неопределено Тогда
		Если Форма.ПараметрыСобытийПО.Свойство("ЕстьКоличество") Тогда
			ЕстьКоличество = Форма.ПараметрыСобытийПО.ЕстьКоличество;
		КонецЕсли;
		Если Форма.ПараметрыСобытийПО.Свойство("ОчиститьКоличество") Тогда
			ОчиститьКоличество = Форма.ПараметрыСобытийПО.ОчиститьКоличество;
		КонецЕсли;
		Если Форма.ПараметрыСобытийПО.Свойство("ВыбиратьНенайденные") Тогда
			ВыбиратьНенайденные = Форма.ПараметрыСобытийПО.ВыбиратьНенайденные;
		КонецЕсли;
		Если Форма.ПараметрыСобытийПО.Свойство("ОбработатьПослеЗагрузки") Тогда
			ОбработатьПослеЗагрузки = Форма.ПараметрыСобытийПО.ОбработатьПослеЗагрузки;
		КонецЕсли;
		Если Форма.ПараметрыСобытийПО.Свойство("ИмяТаблицыВыборки") Тогда
			ИмяТаблицыВыборки = Форма.ПараметрыСобытийПО.ИмяТаблицыВыборки;
		КонецЕсли;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Форма", Форма);
	Параметры.Вставить("ЕстьКоличество", ЕстьКоличество);
	Параметры.Вставить("ОчиститьКоличество", ОчиститьКоличество);
	Параметры.Вставить("ВыбиратьНенайденные", ВыбиратьНенайденные);
	Параметры.Вставить("ОбработатьПослеЗагрузки", ОбработатьПослеЗагрузки);
	Параметры.Вставить("ИмяТаблицыВыборки", ИмяТаблицыВыборки);
	Параметры.Вставить("УчитыватьСерийныеНомераПриСвертке", УчитыватьСерийныеНомераПриСвертке);
	
	ОповещенияПриЗагрузкеИзТСД = Новый ОписаниеОповещения("ПолучитьДанныеИзТСДЗавершение", ЭтотОбъект, Параметры);
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(ОповещенияПриЗагрузкеИзТСД, Форма.УникальныйИдентификатор, Истина);
	
КонецПроцедуры

// Выгружает таблицу с данными в терминал сбора данных - После закрытия вопроса.
//
Процедура ВыгрузитьДокументВТСДПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Параметры.Форма.Записать() Тогда
			Параметры.Вставить("Документ", Параметры.Форма.Объект.Ссылка);
			Параметры.Удалить("Форма");
			РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ОткрытьФорму("Обработка.ВыгрузкаТоваровВТСД.Форма", Параметры,,,,,,РежимОткрытияОкна);
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Выгружает таблицу с данными в терминал сбора данных.
// 
Процедура ВыгрузитьДокументВТСД(Форма, ВыгружатьЦену = Ложь, ДополнительныеПараметры = Неопределено) Экспорт
	
	ВидЦены = Неопределено;
	ИмяТаблицыВыборки = "";
	ПрефиксРаздела = "";
	АдресТоваровВХранилище = "";
	ПараметрыФормы = Новый Структура;
	ЭтоСсылочныйОбъект = Истина;
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ВидЦены") Тогда
			ВидЦены = ДополнительныеПараметры.ВидЦены;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ИмяТаблицыВыборки") Тогда
			ИмяТаблицыВыборки = ДополнительныеПараметры.ИмяТаблицыВыборки;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ПрефиксРаздела") Тогда
			ПрефиксРаздела = ДополнительныеПараметры.ПрефиксРаздела;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("АдресТоваровВХранилище") Тогда
			АдресТоваровВХранилище = ДополнительныеПараметры.АдресТоваровВХранилище;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ЭтоСсылочныйОбъект") Тогда
			ЭтоСсылочныйОбъект = ДополнительныеПараметры.ЭтоСсылочныйОбъект;
		КонецЕсли;
	ИначеЕсли Форма.ПараметрыСобытийПО <> Неопределено Тогда
		Если Форма.ПараметрыСобытийПО.Свойство("ВидЦены") Тогда
			ВидЦены = Форма.ПараметрыСобытийПО.ВидЦены;
		КонецЕсли;
		Если Форма.ПараметрыСобытийПО.Свойство("ИмяТаблицыВыборки") Тогда
			ИмяТаблицыВыборки = Форма.ПараметрыСобытийПО.ИмяТаблицыВыборки;
		КонецЕсли;
		Если Форма.ПараметрыСобытийПО.Свойство("ПрефиксРаздела") Тогда
			ПрефиксРаздела = Форма.ПараметрыСобытийПО.ПрефиксРаздела;
		КонецЕсли;
		Если Форма.ПараметрыСобытийПО.Свойство("АдресТоваровВХранилище") Тогда
			АдресТоваровВХранилище = Форма.ПараметрыСобытийПО.АдресТоваровВХранилище;
		КонецЕсли;
		Если Форма.ПараметрыСобытийПО.Свойство("ЭтоСсылочныйОбъект") Тогда
			ЭтоСсылочныйОбъект = Форма.ПараметрыСобытийПО.ЭтоСсылочныйОбъект;
		КонецЕсли;
	КонецЕсли;
	ПараметрыФормы.Вставить("ВидЦены", ВидЦены);
	ПараметрыФормы.Вставить("ИмяТаблицыВыборки", ИмяТаблицыВыборки);
	ПараметрыФормы.Вставить("ПрефиксРаздела", ПрефиксРаздела);
	ПараметрыФормы.Вставить("АдресТоваровВХранилище", АдресТоваровВХранилище);
	ПараметрыФормы.Вставить("ЭтоСсылочныйОбъект", ЭтоСсылочныйОбъект);
	ПараметрыФормы.Вставить("ВариантЗаполнения", "ПоДокументу");
	ПараметрыФормы.Вставить("ВыгружатьЦену", ВыгружатьЦену);
	Если ЭтоСсылочныйОбъект Тогда
		Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
			
			Если Форма.Модифицированность Тогда
				
				ПараметрыФормы.Вставить("Форма", Форма);
				Оповещение = Новый ОписаниеОповещения("ВыгрузитьДокументВТСДПослеЗакрытияВопроса", ЭтотОбъект, ПараметрыФормы);
				
				ТекстВопроса = НСтр("ru = 'Документ был изменен, записать изменения?'");
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
				
			Иначе
				ПараметрыФормы.Вставить("Документ", Форма.Объект.Ссылка);
				РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
				ОткрытьФорму("Обработка.ВыгрузкаТоваровВТСД.Форма", ПараметрыФормы,,,,,,РежимОткрытияОкна);
			КонецЕсли;
			
		Иначе
			ПараметрыФормы.Вставить("форма", Форма);
			Оповещение = Новый ОписаниеОповещения("ВыгрузитьДокументВТСДПослеЗакрытияВопроса", ЭтотОбъект, ПараметрыФормы);
			ТекстВопроса = НСтр("ru = 'Документ необходимо записать. Записать документ?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		КонецЕсли;
	Иначе
		ПараметрыФормы.Вставить("Документ", Форма.Объект);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Обработка.ВыгрузкаТоваровВТСД.Форма", ПараметрыФормы,,,,,,РежимОткрытияОкна);
	КонецЕсли;
	
КонецПроцедуры

// Выгружает таблицу с данными в терминал сбора данных.
// 
Процедура ВыгрузитьОтчетВТСД(Форма, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Обработка.ВыгрузкаТоваровВТСД.Форма", ДополнительныеПараметры,,,,,,РежимОткрытияОкна);
	
КонецПроцедуры

// Получает вес с электронных весов для табличной части - завершение.
//    
Процедура ПолучениеВесаСЭлектронныхВесовДляТабличнойЧастиЗавершение(РезультатОперации, Параметры)Экспорт
	
	Параметры.Форма.Доступность = Истина;
	
	Если РезультатОперации.Результат Тогда
		
		Если Параметры.КоличествоФакт Тогда
			Если Параметры.РежимСложения Тогда
				Параметры.ТекущаяСтрока.КоличествоУпаковокФакт = Параметры.ТекущаяСтрока.КоличествоУпаковокФакт + РезультатОперации.Вес; 
			Иначе
				Параметры.ТекущаяСтрока.КоличествоУпаковокФакт = РезультатОперации.Вес;
			КонецЕсли;
		Иначе
			Если Параметры.РежимСложения Тогда
				Параметры.ТекущаяСтрока.КоличествоУпаковок = Параметры.ТекущаяСтрока.КоличествоУпаковок + РезультатОперации.Вес; 
			Иначе
				Параметры.ТекущаяСтрока.КоличествоУпаковок = РезультатОперации.Вес; 
			КонецЕсли
		КонецЕсли;
			
		Если Параметры.СледующееОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Истина);
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатОперации.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Получает вес с электронных весов для табличной части.
//    
Процедура ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ОповещениеПриПолученииВеса, Форма, ИмяТабличнойЧасти = "Товары", КоличествоФакт = Ложь, РежимСложения = Ложь) Экспорт
	
	// Проверим текущую строку табличной части.
	Если ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		
		ТекущаяСтрока = Форма.Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Необходимо выбрать строку, для которой необходимо получить вес.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			Форма.Доступность = Ложь;
			
			Контекст = Новый Структура;
			Контекст.Вставить("СледующееОповещение", ОповещениеПриПолученииВеса);
			Контекст.Вставить("ТекущаяСтрока" , ТекущаяСтрока);
			Контекст.Вставить("КоличествоФакт", КоличествоФакт);
			Контекст.Вставить("РежимСложения" , РежимСложения);
			Контекст.Вставить("Форма"         , Форма);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолучениеВесаСЭлектронныхВесовДляТабличнойЧастиЗавершение", ЭтотОбъект, Контекст);
			МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОписаниеОповещения, Форма.УникальныйИдентификатор, ,Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает результат попытки пробить чек.
//
Процедура НачатьПробитиеЧекаКОИнкассацияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЧекПробит = Ложь;
	
	Если РезультатВыполнения.Результат Тогда
		
		РезультатПроведения = ПодключаемоеОборудованиеРТВызовСервера.ПровестиПробитыйДокумент(Параметры.ДокументНаККМ, РезультатВыполнения.ВыходныеПараметры[1]);
		Если РезультатПроведения = Истина Тогда
			ПараметрыДокумента = ОбщегоНазначенияРТВызовСервера.ПолучитьЗначенияРеквизитовОбъекта(Параметры.ДокументНаККМ, Новый Структура("КассаККМ, НомерЧекаККМ"));
			НомерДокументаКассыККМ[ПараметрыДокумента.КассаККМ] = ПараметрыДокумента.НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
			ЧекПробит = Истина;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, ЧекПробит);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
									|Чек не напечатан на фискальном устройстве.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает результат попытки пробить чек.
//
Процедура НачатьПробитиеЧекаКОЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЧекПробит = Ложь;
	
	Если РезультатВыполнения.Результат Тогда
		
		Если Параметры.НаличнаяОперация Тогда 
			
			Оповещение = Новый ОписаниеОповещения("НачатьПробитиеЧекаКОИнкассацияЗавершение", ЭтотОбъект, Параметры);
			//МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(Оповещение, Параметры.УникальныйИдентификатор,
			//	Параметры.ИдентификаторУстройства, Параметры.ТипЧека, ПодключаемоеОборудованиеРТВызовСервера.СуммаДокумента(Параметры.ДокументНаККМ), Ложь);
			Параметры.Вставить("Сумма", ПодключаемоеОборудованиеРТВызовСервера.СуммаДокумента(Параметры.ДокументНаККМ));
			
			МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(Оповещение, 
																				Параметры.УникальныйИдентификатор, 
																				Параметры, 
																				Параметры.ИдентификаторУстройства); 
			
		Иначе
				
			РезультатПроведения = ПодключаемоеОборудованиеРТВызовСервера.ПровестиПробитыйДокумент(Параметры.ДокументНаККМ, РезультатВыполнения.ВыходныеПараметры[1]);
			Если РезультатПроведения = Истина Тогда
				ПараметрыДокумента = ОбщегоНазначенияРТВызовСервера.ПолучитьЗначенияРеквизитовОбъекта(Параметры.ДокументНаККМ, Новый Структура("КассаККМ, НомерЧекаККМ"));
				НомерДокументаКассыККМ[ПараметрыДокумента.КассаККМ] = ПараметрыДокумента.НомерЧекаККМ + 1;
				ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
				ЧекПробит = Истина;
			КонецЕсли;
			ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, ЧекПробит);
			
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
									|Чек не напечатан на фискальном устройстве.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, Ложь);
	КонецЕсли;
		
КонецПроцедуры

// Инициирует пробитие кассового чека.
//
Процедура НачатьПробитиеЧекаКОВыполнить(ОповещениеПриЗавершении, Объект, Параметры, УникальныйИдентификатор) Экспорт
	
	ТипЧека = Параметры.ТипЧека;
	ТипОплаты = Параметры.ТипОплаты;
	ИспользоватьПодключаемоеОборудование = Параметры.ИспользоватьПодключаемоеОборудование;
	НаличнаяОперация = Параметры.НаличнаяОперация;
	АгентскийДоговорВШапке = Параметры.АгентскийДоговорВШапке;
	ДокументНаККМ = Параметры.ДокументНаККМ;
	
	ОписаниеОшибки = "";
	
	ЧекПробит = Ложь;
	
	ПараметрыКассыККМ       = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(Объект.КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	РаспределениеВыручкиПоСекциям = ПараметрыКассыККМ.РаспределениеВыручкиПоСекциям;
	ИспользоватьКассуБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если НомерДокументаКассыККМ[Параметры.КассаККМ] <> Неопределено Тогда
		НомерЧекаККМ  = НомерДокументаКассыККМ[Параметры.КассаККМ];
	Иначе
		НомерЧекаККМ  = ПорядковыйНомерПродажи;
	КонецЕсли;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ИспользоватьКассуБезПодключенияОборудования Тогда
		
		РезультатПроведения = ПодключаемоеОборудованиеРТВызовСервера.ПровестиПробитыйДокумент(ДокументНаККМ, НомерЧекаККМ);
		Если РезультатПроведения = Истина Тогда
			НомерДокументаКассыККМ[Параметры.КассаККМ] = НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
			ЧекПробит = Истина;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ЧекПробит);
		
	Иначе
		    
		Если ИдентификаторУстройства <> Неопределено Тогда
			
			Параметры = Новый Структура();
			Параметры.Вставить("Объект", Объект);
			Параметры.Вставить("ДокументНаККМ", ДокументНаККМ); 
			Параметры.Вставить("ТипЧека", ТипЧека);
			Параметры.Вставить("ТипОплаты", ТипОплаты);
			Параметры.Вставить("ИспользоватьПодключаемоеОборудование", ИспользоватьПодключаемоеОборудование);
			Параметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
			Параметры.Вставить("НаличнаяОперация", НаличнаяОперация);
			Параметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
			Параметры.Вставить("АгентскийДоговорВШапке", АгентскийДоговорВШапке);
			Параметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
			
			
			ОбщиеПараметры  = ПодключаемоеОборудованиеРТВызовСервера.ВходящиеДанныеДляФР(ДокументНаККМ, РаспределениеВыручкиПоСекциям, НомерЧекаККМ);
			Оповещение = Новый ОписаниеОповещения("НачатьПробитиеЧекаКОЗавершение", ЭтотОбъект, Параметры);
			
			МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(Оповещение, 
											УникальныйИдентификатор, 
											ОбщиеПараметры, 
											ИдентификаторУстройства);
			
		Иначе
			ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка. Устройство не выбрано.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ЧекПробит);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка внешнего события формы.
//
Процедура ВнешнееСобытиеОборудования(Форма, Источник, Событие, Данные) Экспорт
	
	// Заменяем спец.символы, которе потом не сможем передать на сервер.
	РазделительGS1 = МенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1();
	ЭкранированныйСимволGS1 = МенеджерОборудованияМаркировкаКлиентСервер.ЭкранированныйСимволGS1();
	Данные = СтрЗаменить(Данные, РазделительGS1, ЭкранированныйСимволGS1);
	
	ОписаниеСобытия = Новый Структура();
	ОписаниеОшибки  = "";
	ОписаниеСобытия.Вставить("Источник", Источник);
	ОписаниеСобытия.Вставить("Событие",  Событие);
	ОписаниеСобытия.Вставить("Данные",   Данные);
	
	Результат = МенеджерОборудованияКлиентПереопределяемый.ПолучитьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки);
	Если Результат = Неопределено Тогда 
		ТекстСообщения = НСтр("ru = 'При обработке внешнего события от устройства произошла ошибка:'")
							+ Символы.ПС + ОписаниеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		Если Результат.Источник = "ПодключаемоеОборудование" Тогда
			Если Результат.ИмяСобытия = "ScanData"
				И Найти(Форма.ПоддерживаемыеТипыПодключаемогоОборудования, "СканерШтрихкода") > 0 Тогда
					ТекКод = Результат.Параметр;
					Форма.ОповещениеПоискаПоШтрихкоду(ТекКод, Результат);
			ИначеЕсли Результат.ИмяСобытия ="TracksData"
				И Найти(Форма.ПоддерживаемыеТипыПодключаемогоОборудования, "СчитывательМагнитныхКарт") > 0 Тогда
					ТекКод = Результат.Параметр;
					ПодключаемоеОборудованиеРТКлиент.ВыбратьМагнитныйКод(ТекКод);
					Если ПустаяСтрока(ТекКод) Тогда
						Возврат;
					КонецЕсли;
					Форма.ОповещениеПоискаПоМагнитномуКоду(ТекКод, Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработка внешнего события формы РМК.
//
Процедура ВнешнееСобытиеОборудованияРМК(Форма, Источник, Событие, Данные, ИсполняемаяОперацияЛогирования = "") Экспорт
	
	// Заменяем спец.символы, которе потом не сможем передать на сервер.
	РазделительGS1 = МенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1();
	ЭкранированныйСимволGS1 = МенеджерОборудованияМаркировкаКлиентСервер.ЭкранированныйСимволGS1();
	Данные = СтрЗаменить(Данные, РазделительGS1, ЭкранированныйСимволGS1);
	
	ОписаниеСобытия = Новый Структура();
	ОписаниеОшибки  = "";
	ОписаниеСобытия.Вставить("Источник", Источник);
	ОписаниеСобытия.Вставить("Событие",  Событие);
	ОписаниеСобытия.Вставить("Данные",   Данные);
	
	Результат = МенеджерОборудованияКлиентПереопределяемый.ПолучитьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки);
	Если Результат = Неопределено Тогда
		ЗаголовокСообщения = НСтр("ru = 'При обработке внешнего события от устройства произошла ошибка:'");
		ТекстСообщения = НСтр("ru = 'При обработке внешнего события от устройства произошла ошибка:'")
						+ Символы.ПС
						+ ОписаниеОшибки;
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокСообщения, ТекстСообщения);
	Иначе
		Если Результат.Источник = "ПодключаемоеОборудование" Тогда
			Если Результат.ИмяСобытия = "ScanData" Тогда
				ИсполняемаяОперацияЛогирования = "СчитанШтрихкод";
				ТекКод = Результат.Параметр;
				Форма.ОповещениеПоискаПоШтрихкоду(ТекКод, Результат);
			ИначеЕсли Результат.ИмяСобытия ="TracksData" Тогда
				ИсполняемаяОперацияЛогирования = "СчитанМагнитныйКод";
				ТекКод = Результат.Параметр;
				ПодключаемоеОборудованиеРТКлиент.ВыбратьМагнитныйКод(ТекКод);
				Если ПустаяСтрока(ТекКод) Тогда
					Возврат;
				КонецЕсли;
				Форма.ОповещениеПоискаПоМагнитномуКоду(ТекКод, Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработка полученных данных.
//
Процедура ОбработатьДанныеПоКоду(Форма, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма) Экспорт
	
	Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО")
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
		
		СтрокаСообщения = НСтр("ru = 'Данные по коду не найдены: %1%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", СтруктураПараметровКлиента.ДанныеПО);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ТекстПредупреждения") Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураПараметровКлиента.ТекстПредупреждения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ВыборДанныхПоиска") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКлиента", СтруктураПараметровКлиента);
		
		Если СтруктураПараметровКлиента.Свойство("ОбработкаДанныхЕГАИС") Тогда
			ДополнительныеПараметры.Вставить("Форма", Форма);
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораДанныхПоиска", ИнтеграцияЕГАИСРТКлиент, ДополнительныеПараметры);
		Иначе
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораДанныхПоиска", Форма, ДополнительныеПараметры);
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("АдресВХранилище", СтруктураПараметровКлиента.ВыборДанныхПоиска);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("ОбщаяФорма.ВыборДанныхПоискаПоШК", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		ОткрытаБлокирующаяФорма = Истина;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойКарты") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКлиента", СтруктураПараметровКлиента);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ОбработчикОповещения = Новый ОписаниеОповещения("СоздатьДисконтнуюКарту", ИнформационныеКартыКлиент, ДополнительныеПараметры);
		ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(ОбработчикОповещения, СтруктураПараметровКлиента.ТекстВопросаНовойКарты);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойКартыВыборШаблона") Тогда
		
		ДополнительныеПараметры = Новый Структура("СтруктураПараметровКлиента", СтруктураПараметровКлиента);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ОбработчикОповещения = Новый ОписаниеОповещения("ВыборШаблонаСозданияДисконтнойКарты", ИнформационныеКартыКлиент, ДополнительныеПараметры);
		ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(ОбработчикОповещения, СтруктураПараметровКлиента.ТекстВопросаНовойКарты);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойНоменклатуры") Тогда
		
		// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
		ИдентификаторВСервисе = Неопределено;
		Если РаботаСНоменклатуройКлиент.ДоступенФункционалПодсистемы() Тогда
			ИдентификаторВСервисе = РаботаСНоменклатуройКлиентПереопределяемый.НайтиНоменклатуруПоШтрихкодуВСервисе(СтруктураПараметровКлиента.ДанныеПО);
		КонецЕсли;
		
		Если ИдентификаторВСервисе = Неопределено Тогда
		// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("СтруктураПараметровКлиента", СтруктураПараметровКлиента);
			ОбработчикОповещения = Новый ОписаниеОповещения("СоздатьНоменклатуру", ЭтотОбъект, ДополнительныеПараметры);
			ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(ОбработчикОповещения, СтруктураПараметровКлиента.ТекстВопроса);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Обработка полученных данных.
//
Процедура ОбработатьДанныеПоКодуРМК(Форма, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма) Экспорт
	
	Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") 
		И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
		
		СтрокаСообщения = НСтр("ru = 'Данные по коду не найдены: %1%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", СтруктураПараметровКлиента.ДанныеПО);
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Результаты поиска'"), СтрокаСообщения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ТекстПредупреждения") Тогда
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Результаты поиска'"), СтруктураПараметровКлиента.ТекстПредупреждения);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ВывестиИнформациюРМКУправляемый") Тогда
		
		ЗаголовокИнформации = СтруктураПараметровКлиента.ВывестиИнформациюРМКУправляемый.ЗаголовокИнформации;
		ТекстИнформации = СтруктураПараметровКлиента.ВывестиИнформациюРМКУправляемый.ТекстИнформации;
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("ВыборДанныхПоиска") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКлиента", СтруктураПараметровКлиента);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораДанныхПоиска", Форма, ДополнительныеПараметры);
		
		ПараметрыФормы = Новый Структура("АдресВХранилище", СтруктураПараметровКлиента.ВыборДанныхПоиска);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("ОбщаяФорма.ВыборДанныхПоискаПоШК", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		ОткрытаБлокирующаяФорма = Истина;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойКарты") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКлиента", СтруктураПараметровКлиента);
		ДополнительныеПараметры.Вставить("ЛогироватьСозданиеКарты", СтруктураПараметровКлиента.ДанныеПО);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ОбработчикОповещения = Новый ОписаниеОповещения("СоздатьДисконтнуюКарту", ИнформационныеКартыКлиент, ДополнительныеПараметры);
		ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(ОбработчикОповещения, СтруктураПараметровКлиента.ТекстВопросаНовойКарты);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойКартыВыборШаблона") Тогда
		
		ДополнительныеПараметры = Новый Структура("СтруктураПараметровКлиента", СтруктураПараметровКлиента);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ЛогироватьСозданиеКарты", СтруктураПараметровКлиента.ДанныеПО);
	    ОбработчикОповещения = Новый ОписаниеОповещения("ВыборШаблонаСозданияДисконтнойКарты", ИнформационныеКартыКлиент, ДополнительныеПараметры);
		ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(ОбработчикОповещения, СтруктураПараметровКлиента.ТекстВопросаНовойКарты);
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("РегистрацияНовойНоменклатуры") Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКлиента", СтруктураПараметровКлиента);
		ОбработчикОповещения = Новый ОписаниеОповещения("СоздатьНоменклатуру", ЭтотОбъект, ДополнительныеПараметры);
		ИнформационныеКартыКлиент.ПолучитьРазрешениеПользователяНаСозданиеКарты(ОбработчикОповещения, СтруктураПараметровКлиента.ТекстВопроса);
		
	КонецЕсли;
		
КонецПроцедуры

// Завершение обработки данных по коду.
//
Функция ЗавершитьОбработкуДанныхПоКодуКлиент(Форма, СтруктураПараметровКлиента, ИмяТабличнойЧасти = "Товары") Экспорт
	
	ИдентификаторСтроки = Неопределено;
	
	Если СтруктураПараметровКлиента.Свойство("АктивизироватьСтроку", ИдентификаторСтроки) Тогда
		
		Если ИдентификаторСтроки <> Неопределено Тогда
			Форма.ТекущийЭлемент = Форма.Элементы[ИмяТабличнойЧасти];
			Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = ИдентификаторСтроки;
			ЭлементУпаковок = Форма.Элементы.Найти(ИмяТабличнойЧасти + "КоличествоУпаковок");
			Если ЭлементУпаковок <> Неопределено Тогда
				Форма.Элементы[ИмяТабличнойЧасти].ТекущийЭлемент = ЭлементУпаковок;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

// Открывает форму создания номенклатуры с заполненными реквизитами.
//
Процедура СоздатьНоменклатуру(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СозданиеНовогоШтрихКода", ДополнительныеПараметры);
		Если РаботаСПравиламиИменованияВызовСервера.ИспользоватьПравилаИменования() Тогда
			ОткрытьФорму("Справочник.Номенклатура.Форма.ПомощникНового",ПараметрыФормы);
		Иначе
			ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область RFID

Функция ДляОбработкиRFIDНуженСерверныйВызов(ДанныеМеток, Форма) Экспорт
	
	СчитывательRFID = Форма.СчитывательRFID;
	УникальныйИдентификатор = Форма.УникальныйИдентификатор;
	
	ЕстьЗаполненныйTID = Ложь;
	Для Каждого Метка Из ДанныеМеток Цикл
		
		//Если TID не считался, то нельзя считать чтение метки успешным
		Если ЗначениеЗаполнено(Метка.TID) Тогда
			ЕстьЗаполненныйTID = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьЗаполненныйTID Тогда
		
		ПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
		ПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ОбработкаСчитывания";
		ПараметрыОперацииСчитывателяRFID.Форма = Форма;
		ЗакрытьСессиюСчитывателяRFID(Неопределено, ПараметрыОперацииСчитывателяRFID);
			
		Возврат Истина;
		
	Иначе
		
		//Если нет корректно считанных меток, то ничего не делаем - ждем еще события от оборудования.
		//В следующем событии могут уже приехать корректные данные.
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Процедура ОткрытьСессиюСчитывателяRFID(Форма, СледующееДействие = Неопределено) Экспорт
	
	ОткрытаСессияСчитывателяRFID      = Форма.ОткрытаСессияСчитывателяRFID;
	УникальныйИдентификатор           = Форма.УникальныйИдентификатор;
	СчитывательRFID                   = Форма.СчитывательRFID;
	
	Если Не ОткрытаСессияСчитывателяRFID Тогда
		ПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
		
		ПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ОткрытиеСессии";
		ПараметрыОперацииСчитывателяRFID.СледующееДействие = СледующееДействие;
		ПараметрыОперацииСчитывателяRFID.Форма = Форма;
		
		ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗавершениеОперацииСчитывателяRFID", ЭтотОбъект, ПараметрыОперацииСчитывателяRFID);
		МенеджерОборудованияКлиент.НачатьОткрытиеСессииСчитывателяRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеВRFID(Результат, Параметры) Экспорт
	
	Форма = Параметры.Форма;
	ДанныеСерии = Параметры.ДанныеСерии;
	
	УникальныйИдентификатор      = Форма.УникальныйИдентификатор;
	СчитывательRFID              = Форма.СчитывательRFID;
	НастройкиИспользованияСерий  = Форма.НастройкиИспользованияСерий;
	ОткрытаСессияСчитывателяRFID = Форма.ОткрытаСессияСчитывателяRFID;
	GTIN                         = Форма.GTIN;
	
	НужноЗаписатьМетку = Истина;
	
	Если ДанныеСерии = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выберите строку, по которой нужно записать метку и положите соотвествующую метку на устройство.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		НужноЗаписатьМетку = Ложь;
	ИначеЕсли Не ДанныеСерии.НужноЗаписатьМетку Тогда
		ТекстСообщения = НСтр("ru = 'По текущей строке не нужно записывать метку.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		НужноЗаписатьМетку = Ложь;
	ИначеЕсли НастройкиИспользованияСерий.ИспользоватьНомерКИЗГИСМСерии
		И Не ЗначениеЗаполнено(ДанныеСерии.НомерКИЗГИСМ) Тогда
		ТекстСообщения = НСтр("ru = 'Перед записью метки, укажите номер КиЗ.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		НужноЗаписатьМетку = Ложь;
	ИначеЕсли НастройкиИспользованияСерий.ИспользоватьНомерСерии
		И Не ЗначениеЗаполнено(ДанныеСерии.Номер) Тогда
		ТекстСообщения = НСтр("ru = 'Перед записью метки, укажите номер серии.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		НужноЗаписатьМетку = Ложь;
	ИначеЕсли НастройкиИспользованияСерий.ИспользоватьСрокГодностиСерии
		И Не ЗначениеЗаполнено(ДанныеСерии.ГоденДо) Тогда
		ТекстСообщения = НСтр("ru = 'Перед записью метки, укажите срок годности.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		НужноЗаписатьМетку = Ложь;
	КонецЕсли;	
	
	ПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
	ПараметрыОперацииСчитывателяRFID.Форма = Форма;
	Если Не НужноЗаписатьМетку Тогда
		Если ОткрытаСессияСчитывателяRFID Тогда
			ЗакрытьСессиюСчитывателяRFID(Неопределено, ПараметрыОперацииСчитывателяRFID);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Не ОткрытаСессияСчитывателяRFID Тогда
		
		ТекущееДействие = Новый ОписаниеОповещения("ЗаписатьДанныеВRFID", ЭтотОбъект,
			Новый Структура("Форма,ДанныеСерии",Форма,ДанныеСерии));
		ОткрытьСессиюСчитывателяRFID(Форма, ТекущееДействие);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыЗаписи = МенеджерОборудованияКлиент.ПараметрыЗаписиМеткиRFID();
	ПараметрыЗаписи.TID = ДанныеСерии.RFIDTID;
	ПараметрыЗаписи.EPC = ДанныеСерии.RFIDEPC;
	ПараметрыЗаписи.БанкПамяти = "EPC";
	ПараметрыЗаписи.Данные = МенеджерОборудованияКлиентСервер.СформироватьДанныеSGTIN96(GTIN, ДанныеСерии.Номер, 1);
	
	ПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ЗаписьRFID";
	ПараметрыОперацииСчитывателяRFID.СледующееДействие = Новый ОписаниеОповещения("ЗаписатьДанныеВRFIDЗавершение",
		ЭтотОбъект,Новый Структура("Форма,ДанныеСерии",Форма,ДанныеСерии));
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗавершениеОперацииСчитывателяRFID", ЭтотОбъект, ПараметрыОперацииСчитывателяRFID);
	МенеджерОборудованияКлиент.НачатьЗаписьДанныхВМеткуRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID, ПараметрыЗаписи);
КонецПроцедуры

Процедура ОтработатьТаймаутОжиданияСчитыванияМетки(Форма) Экспорт
	
	ТекстСообщения = НСтр("ru = 'Истекло время ожидания чтения RFID-метки. Поднесите RFID-метку к считывателю и повторите попытку.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	ПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
	ПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ТаймуатОжиданияСчитывания";
	ПараметрыОперацииСчитывателяRFID.Форма = Форма;
	ЗакрытьСессиюСчитывателяRFID(Неопределено, ПараметрыОперацииСчитывателяRFID);
	
КонецПроцедуры

Процедура ЗаписатьДанныеВRFIDЗавершение(Результат, Параметры) Экспорт
	
	ДанныеСерии = Параметры.ДанныеСерии;
	
	ПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
	ПараметрыОперацииСчитывателяRFID.Форма = Параметры.Форма;
	ЗакрытьСессиюСчитывателяRFID(Неопределено, ПараметрыОперацииСчитывателяRFID);
	
	Если Результат.Результат Тогда
		ДанныеСерии.RFIDEPC = МенеджерОборудованияКлиентСервер.СформироватьДанныеSGTIN96(Параметры.Форма.GTIN, ДанныеСерии.Номер, 1);
		Оповестить("ЗаписьRFID_Серии", ДанныеСерии);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтключитьОборудование(Результат, Параметры) Экспорт
	
	Форма = Параметры.Форма;
	
	Если Не Форма.ОткрытаСессияСчитывателяRFID Тогда
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, Форма);
	Иначе
		ПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
		ПараметрыОперацииСчитывателяRFID.Форма = Форма;
		ПараметрыОперацииСчитывателяRFID.СледующееДействие = Новый ОписаниеОповещения("ОтключитьОборудование", ЭтотОбъект, Новый Структура("Форма",Форма));
		
		ЗакрытьСессиюСчитывателяRFID(Неопределено, ПараметрыОперацииСчитывателяRFID);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область РМК

Процедура ОткрытьФормуВводаТелефонаДляОтправкиЧерезОФД(ОбработчикОповещения, ПараметрыФормы) Экспорт
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВводаТелефон", ПараметрыФормы,,,,,ОбработчикОповещения,Режим); 
	
КонецПроцедуры

Процедура ОткрытьФормуВводаEmailОтправкиЧерезОФД(ОбработчикОповещения, ПараметрыФормы) Экспорт
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВводаEmail", ПараметрыФормы,,,,,ОбработчикОповещения,Режим); 
	
КонецПроцедуры

Процедура ПреобразоватьТелефонКПользовательсткомуВиду(ВведенноеЧисло, Телефон, ТелефонСтрокой) Экспорт
	
	ВведенноеЧислоСтрокой = Формат(ВведенноеЧисло, "ЧГ=0");
	ВведенноеЧислоСтрокой = Лев(ВведенноеЧислоСтрокой, 10);
	Телефон = Число(ВведенноеЧислоСтрокой);
	Если СтрДлина(ВведенноеЧислоСтрокой) < 10 Тогда
		ВведенноеЧислоСтрокой = Формат(ВведенноеЧисло, "ЧЦ=10; ЧДЦ=; ЧВН=; ЧГ=0");
	КонецЕсли;
	
	ТелефонСтрокой = "+7(";
	ТелефонСтрокой = ТелефонСтрокой + Сред(ВведенноеЧислоСтрокой, 1, 3);
	ТелефонСтрокой = ТелефонСтрокой + ")";
	ТелефонСтрокой = ТелефонСтрокой + Сред(ВведенноеЧислоСтрокой, 4, 3);
	ТелефонСтрокой = ТелефонСтрокой + "-";
	ТелефонСтрокой = ТелефонСтрокой + Сред(ВведенноеЧислоСтрокой, 7, 2);
	ТелефонСтрокой = ТелефонСтрокой + "-";
	ТелефонСтрокой = ТелефонСтрокой + Сред(ВведенноеЧислоСтрокой, 9, 2);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//Возвращает структуру, которая затем обрабатывается процедурами заполнения ТЧ
//Параметры:
//  Штрихкод - штрихкод, который необходимо обработать
//  Количество - количество товаров с указанным штрихкодом
//
Функция СтруктураДанныхШтрихкода(Штрихкод, Количество) Экспорт

	Возврат Новый Структура("Штрихкод, Количество", Штрихкод, Количество);

КонецФункции

Процедура ПоказатьВводШтрихкодаЗавершение(Штрихкод, ДополнительныеПараметры) Экспорт
	
	ОповещениеУспешногоВвода = ДополнительныеПараметры.ОповещениеУспешногоВвода;
	Количество = ДополнительныеПараметры.Количество;
	
	Если (Штрихкод <> Неопределено) Тогда
		Если Не ПустаяСтрока(Штрихкод) Тогда
			Если Количество = Неопределено Тогда
				Количество = 1;
			КонецЕсли;
			ВыполнитьОбработкуОповещения(
				ОповещениеУспешногоВвода,
				СтруктураДанныхШтрихкода(Штрихкод, Количество));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытьСессиюСчитывателяRFID(Результат, ПараметрыОперацииСчитывателяRFID)
	
	СчитывательRFID = ПараметрыОперацииСчитывателяRFID.Форма.СчитывательRFID;
	УникальныйИдентификатор = ПараметрыОперацииСчитывателяRFID.Форма.УникальныйИдентификатор;
	
	НовыеПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
	НовыеПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ЗакрытиеСессии";
	
	НовыеПараметрыОперацииСчитывателяRFID.Форма = ПараметрыОперацииСчитывателяRFID.Форма;
	Если ПараметрыОперацииСчитывателяRFID.СледующееДействие <> Неопределено Тогда
		НовыеПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ЗакрытиеСессии";
		НовыеПараметрыОперацииСчитывателяRFID.СледующееДействие   = ПараметрыОперацииСчитывателяRFID.СледующееДействие;
	КонецЕсли;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗавершениеОперацииСчитывателяRFID", ЭтотОбъект, НовыеПараметрыОперацииСчитывателяRFID);
    МенеджерОборудованияКлиент.НачатьЗакрытиеСессииСчитывателяRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID);

КонецПроцедуры

Процедура ЗавершениеОперацииСчитывателяRFID(РезультатВыполнения, ПараметрыОперацииСчитывателяRFID) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='Операция считывателя RFID завершилась с ошибкой:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ПараметрыОперацииСчитывателяRFID.Форма.ИдетЗаписьМетки = Ложь;
	ИначеЕсли ПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ОткрытиеСессии" Тогда
		ПараметрыОперацииСчитывателяRFID.Форма.ОткрытаСессияСчитывателяRFID = Истина;
	ИначеЕсли ПараметрыОперацииСчитывателяRFID.ВыполненноеДействие = "ЗакрытиеСессии" Тогда
		ПараметрыОперацииСчитывателяRFID.Форма.ОткрытаСессияСчитывателяRFID = Ложь;
		ПараметрыОперацииСчитывателяRFID.Форма.ИдетЗаписьМетки = Ложь;
	КонецЕсли;

	Если ПараметрыОперацииСчитывателяRFID.СледующееДействие <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ПараметрыОперацииСчитывателяRFID.СледующееДействие, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыОперацииСчитывателяRFID()
	
	Результат = Новый Структура;
	Результат.Вставить("ВыполненноеДействие", "");
	Результат.Вставить("СледующееДействие");
	Результат.Вставить("Форма");
	
	Возврат Результат;
	
КонецФункции

Процедура ОтключитьОборудованиеRFID(Результат, Параметры) Экспорт
	
	Форма = Параметры.Форма;
	
	Если Не Форма.ОткрытаСессияСчитывателяRFID Тогда
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, Форма);
	Иначе
		ПараметрыОперацииСчитывателяRFID = ПараметрыОперацииСчитывателяRFID();
		ПараметрыОперацииСчитывателяRFID.Форма = Форма;
		ПараметрыОперацииСчитывателяRFID.СледующееДействие = Новый ОписаниеОповещения("ОтключитьОборудование", ЭтотОбъект, Новый Структура("Форма",Форма));
		
		ЗакрытьСессиюСчитывателяRFID(Неопределено, ПараметрыОперацииСчитывателяRFID);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти