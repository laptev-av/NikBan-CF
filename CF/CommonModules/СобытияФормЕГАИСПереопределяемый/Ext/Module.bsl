
#Область ОбработчикиСобытийОбъектов

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяСправочника - Строка - имя справочника, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыСправочника(ИмяСправочника, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяДокумента - Строка - имя документа, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыДокумента(ИмяДокумента, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаСписка"
		И Параметры.Свойство("ТекущаяСтрока") Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаСпискаДокументов";
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра сведений, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыРегистраСведений(ИмяРегистра, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Возникает на сервере при создании формы.
//
// Параметры:
//  Форма - УправляемаяФорма - создаваемая форма,
//  Отказ - Булево - признак отказа от создания формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Форма.ИмяФормы = "Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.Форма.ФормаВыбора" Тогда
		Если Форма.ИмяФормы = "Документ.ВозвратИзРегистра2ЕГАИС.Форма.ФормаСпискаДокументов" Тогда
			Форма.Элементы.СтраницаКОформлению.Видимость = Ложь;
			Форма.Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		КонецЕсли;
	ИначеЕсли Форма.ИмяФормы = "Справочник.Справки2ЕГАИС.Форма.ФормаВыбора" Тогда
		ПриСозданииНаСервереФормаВыбораСправки2ЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли СтрНайти(Форма.ИмяФормы, "Справочник.ШтрихкодыУпаковокТоваров.Форма") > 0 Тогда
		ПриСозданииНаСервереФормСправочникаШтрихкодыУпаковокТоваров(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ЧекЕГАИС.Форма.ФормаСпискаДокументов" Тогда
		ПриСозданииНаСервереФормаСпискаДокументовЧекЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.АктПостановкиНаБалансЕГАИС.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаАктПостановкиНаБалансЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.АктПостановкиНаБалансЕГАИС.Форма.ФормаСпискаДокументов" Тогда
		ПриСозданииНаСервереФормаСпискаАктПостановкиНаБалансЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.АктСписанияЕГАИС.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаАктСписанияЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ВозвратИзРегистра2ЕГАИС.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаВозвратИзРегистра2ЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ПередачаВРегистр2ЕГАИС.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаПередачаВРегистр2ЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ЧекЕГАИС.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаЧекЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ЧекЕГАИСВозврат.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаЧекЕГАИСВозврат(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ТТНВходящаяЕГАИС.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаТТНВходящаяЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ТТНВходящаяЕГАИС.Форма.ФормаСпискаДокументов" Тогда
		
		Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеТоваров) Тогда
			Форма.Элементы.Действия.Видимость = Ложь;
			Форма.Элементы.СписокОформитьДокументПоступления.Видимость = Ложь;
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ТТНИсходящаяЕГАИС.Форма.ФормаДокумента" Тогда
		ПриСозданииНаСервереФормаДокументаТТНИсходящаяЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.СопоставлениеКлассификаторовЕГАИС.Форма.СопоставлениеКлассификаторовЕГАИС" Тогда
		ПриСозданииНаСервереФормаОбработкиСопоставлениеКлассификаторовЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор" Тогда
		ПриСозданииНаСервереФормаОбработкиПроверкаИПодборАлкогольнойПродукцииЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "РегистрСведений.СоответствиеНоменклатурыЕГАИС.Форма.ФормаЗаписи" Тогда
		ПриСозданииНаСервереФормаЗаписиРегистрСведенийСоответствиеНоменклатурыЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "РегистрСведений.СоответствиеНоменклатурыЕГАИС.Форма.ФормаСписка" Тогда
		ПриСозданииНаСервереФормаСпискаРегистрСведенийСоответствиеНоменклатурыЕГАИС(Форма, Отказ, СтандартнаяОбработка);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ОтчетЕГАИС.Форма.ФормаСпискаДокументов" Тогда
		
		Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ОтчетЕГАИС) Тогда
			Форма.Элементы.ПодменюСоздать.Видимость = Ложь;
			Форма.Элементы.СписокСкопировать.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.Команды.Найти("ОткрытьПодбор") <> Неопределено Тогда
		Форма.Команды["ОткрытьПодбор"].Картинка = БиблиотекаКартинок.ПодобратьТовары;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при чтении объекта на сервере.
//
// Параметры:
//  Форма - УправляемаяФорма - форма читаемого объекта,
//  ТекущийОбъект - ДокументОбъект, СправочникОбъект - читаемый объект.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Выполняет действия при изменении номенклатуры в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - Структура - см. функцию СобытияФормЕГАИСКлиент.СтруктураПараметрыЗаполнения.
//
Процедура ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Номенклатура", "Номенклатура");
	СтруктураПараметров.Вставить("ХарактеристикиИспользуются", "ХарактеристикиИспользуются");
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметров);
	
	Если ПараметрыЗаполнения.ОбработатьУпаковки Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц Тогда
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;
	
	Если ПараметрыЗаполнения.МаркируемаяАлкогольнаяПродукцияВТЧ Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Номенклатура", "Номенклатура");
		СтруктураПараметров.Вставить("МаркируемаяАлкогольнаяПродукция", "МаркируемаяАлкогольнаяПродукция");
		
		СтруктураДействий.Вставить("ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция", СтруктураПараметров);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	Если ПараметрыЗаполнения.ПерезаполнитьНоменклатуруЕГАИС Тогда
		ПараметрыЗаполненияНоменклатурыЕГАИС = Новый Структура;
		ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ЗаполнитьФлагАлкогольнаяПродукция", Ложь);
		ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ИмяКолонки", "АлкогольнаяПродукция");
		
		СтруктураДействий.Вставить("ЗаполнитьНоменклатуруЕГАИС", ПараметрыЗаполненияНоменклатурыЕГАИС);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
		СтруктураДействий.Вставить("ЗаполнитьИндексАкцизнойМарки");
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус Тогда
		Если ПараметрыУказанияСерий <> Неопределено
			И ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяПоляСклад)
			И ОбщегоНазначенияРТКлиентСервер.ЕстьРеквизитОбъекта(Форма[ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта], ПараметрыУказанияСерий.ИмяПоляСклад) Тогда
			Склад = Форма[ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта][ПараметрыУказанияСерий.ИмяПоляСклад];
		Иначе
			Склад = Неопределено;
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерий, Склад));
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию Тогда
		СтруктураДействий.Вставить("ЗаполнитьАлкогольнуюПродукцию", ПараметрыЗаполнения);
	КонецЕсли;
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		Форма.ИмяФормы, "Товары"));
		
	
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураДействий, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

// Выполняет действия при изменении количества упаковок в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - Структура - см. функцию СобытияФормЕГАИСКлиент.СтруктураПараметрыЗаполнения.
//
Процедура ПриИзмененииКоличестваУпаковок(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	Если ТипЗнч(ПараметрыЗаполнения) = Тип("Структура") 
		И ПараметрыЗаполнения.Свойство("ПересчитатьКоличествоУпаковок")
		И ПараметрыЗаполнения.ПересчитатьКоличествоУпаковок Тогда
		
		Если ТекущаяСтрока.Свойство("МаркируемаяАлкогольнаяПродукция") Тогда
			ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоАкцизныхМарок;
		Иначе
			ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.Количество;
		КонецЕсли; 
	КонецЕсли;
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Форма.Объект.Товары);
	
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, КэшированныеЗначения);
	Если ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
		АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(ТекущаяСтрока, "Количество");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении номенклатуры в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - Структура - см. функцию СобытияФормЕГАИСКлиент.СтруктураПараметрыЗаполнения.
//
Процедура ПриИзмененииХарактеристики(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	СтруктураДействий = Новый Структура;
	
	Если ПараметрыЗаполнения.ПерезаполнитьНоменклатуруЕГАИС Тогда
		ПараметрыЗаполненияНоменклатурыЕГАИС = Новый Структура;
		ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ЗаполнитьФлагАлкогольнаяПродукция", Ложь);
		ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ИмяКолонки", "АлкогольнаяПродукция");
		
		СтруктураДействий.Вставить("ЗаполнитьНоменклатуруЕГАИС", ПараметрыЗаполненияНоменклатурыЕГАИС);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию Тогда
		СтруктураДействий.Вставить("ЗаполнитьАлкогольнуюПродукцию", ПараметрыЗаполнения);
	КонецЕсли;
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ", Форма.Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры


#КонецОбласти

#Область ПрограммныйИнтерфейс

// Заполняет табличную часть Товары подобранными товарами.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой производится подбор,
//  ВыбранноеЗначение - Произвольный - данные, содержащие подобранную пользователем номенклатуру,
//  ПараметрыЗаполнения - Структура - см. функцию СобытияФормЕГАИСКлиент.СтруктураПараметрыЗаполнения.
//
Процедура ОбработкаРезультатаПодбораНоменклатуры(Форма, ВыбранноеЗначение, ПараметрыЗаполнения) Экспорт
	
	//ПараметрыЗаполнения.МаркируемаяАлкогольнаяПродукцияВТЧ = Истина;
	ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию      = Истина;
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ЕстьМарки = Форма.Объект.Свойство("АкцизныеМарки");
	ТекущаяСтрока = Неопределено;
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Форма.Объект.Товары.Добавить();
		
		СписокСвойств = "Номенклатура, Характеристика, Упаковка";
		Если ТекущаяСтрока.Свойство("КоличествоУпаковок") Тогда
			СписокСвойств = СписокСвойств + ", КоличествоУпаковок";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, СписокСвойств);
		
		СобытияФормЕГАИСПереопределяемый.ПриИзмененииНоменклатуры(
			Форма, ТекущаяСтрока, КэшированныеЗначения,
			ПараметрыЗаполнения);
			
		Если ЕстьМарки Тогда
			АкцизныеМаркиЕГАИС.ЗаполнитьСлужебныеРеквизиты(Форма);
		КонецЕсли;
	
	КонецЦикла;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		Форма.Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

// Устанавливет у элемента формы Упаковка подсказку ввода для соответствующей номенклатуры
//
// Параметры:
// 	Форма - УправляемаяФорма - Форма объекта.
//
Процедура УстановитьИнформациюОЕдиницеХранения(Форма) Экспорт
	
КонецПроцедуры


// В функции нужно заполнить акт постановки на баланс положительной разницей между учетными остатками номенклатуры и остатками в ЕГАИС.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.АктПостановкиНаБалансЕГАИС - заполняемый документ,
//  Форма - УправляемаяФорма - форма заполняемого акта.
//
// Возвращаемое значение:
//  Структура - результат заполнения акта:
//   * ЕстьНесопоставленнаяАлкогольнаяПродукция - Булево - Истина, если на остатках есть несопоставленная продукция,
//   * АдресТаблицыНесопоставленныхТоваров - Строка - адрес таблицы несопоставленных товаров.
//                                                    Колонки: Номенклатура, Характеристика, ЕдиницаИзмерения.
//
Функция ЗаполнитьАктПостановкиНаБалансОтсутствующимиВЕГАИСОстатками(ДокументОбъект, Форма) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьНесопоставленнаяАлкогольнаяПродукция", Ложь);
	Результат.Вставить("АдресТаблицыНесопоставленныхТоваров", Неопределено);
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.ОрганизацияЕГАИС, "Контрагент, ТорговыйОбъект, СоответствуетОрганизации");
	Если ЗначенияРеквизитов.СоответствуетОрганизации <> Истина ИЛИ НЕ ЗначениеЗаполнено(ЗначенияРеквизитов.ТорговыйОбъект) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Организации ЕГАИС не сопоставлена наша организация, заполнение по остаткам невозможно.'"));
		Возврат Результат;
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.АкцизныеМарки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыОрганизацийОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыОрганизацийОстатки.Характеристика КАК Характеристика,
	|	СУММА(ТоварыОрганизацийОстатки.КоличествоОстаток) КАК Остаток,
	|	ТоварыОрганизацийОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(
	|			&Период,
	|			Номенклатура.АлкогольнаяПродукция
	|				И Склад.Магазин = &ТорговыйОбъект
	|				И Организация = &Организация) КАК ТоварыОрганизацийОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыОрганизацийОстатки.Номенклатура,
	|	ТоварыОрганизацийОстатки.Характеристика,
	|	ТоварыОрганизацийОстатки.Номенклатура.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОстатков.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатков.Характеристика КАК Характеристика,
	|	ТаблицаОстатков.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК АлкогольнаяПродукция,
	|	ТаблицаОстатков.Остаток КАК Количество
	|ПОМЕСТИТЬ ТаблицаОстатковСопоставленнаяАлкогольнаяПродукция
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО ТаблицаОстатков.Номенклатура = СоответствиеНоменклатурыЕГАИС.Номенклатура
	|			И ТаблицаОстатков.Характеристика = СоответствиеНоменклатурыЕГАИС.Характеристика
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.СвободныйОстатокОстаток КАК Количество,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.АлкогольнаяПродукция
	|ПОМЕСТИТЬ ОстаткиАлкогольнаяПродукция
	|ИЗ
	|	РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.Остатки(
	|			&Период,
	|			ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|				И АлкогольнаяПродукция В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ТаблицаОстатковСопоставленнаяАлкогольнаяПродукция.АлкогольнаяПродукция
	|					ИЗ
	|						ТаблицаОстатковСопоставленнаяАлкогольнаяПродукция КАК ТаблицаОстатковСопоставленнаяАлкогольнаяПродукция)) КАК ОстаткиАлкогольнойПродукцииЕГАИСОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатковСопоставленнаяАлкогольнаяПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатковСопоставленнаяАлкогольнаяПродукция.Характеристика КАК Характеристика,
	|	ТаблицаОстатковСопоставленнаяАлкогольнаяПродукция.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаОстатковСопоставленнаяАлкогольнаяПродукция.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаОстатковСопоставленнаяАлкогольнаяПродукция.Количество - ЕСТЬNULL(ОстаткиАлкогольнаяПродукция.Количество, 0) КАК Количество,
	|	ТаблицаОстатковСопоставленнаяАлкогольнаяПродукция.Количество - ЕСТЬNULL(ОстаткиАлкогольнаяПродукция.Количество, 0) КАК КоличествоУпаковок
	|ИЗ
	|	ТаблицаОстатковСопоставленнаяАлкогольнаяПродукция КАК ТаблицаОстатковСопоставленнаяАлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиАлкогольнаяПродукция КАК ОстаткиАлкогольнаяПродукция
	|		ПО ТаблицаОстатковСопоставленнаяАлкогольнаяПродукция.АлкогольнаяПродукция = ОстаткиАлкогольнаяПродукция.АлкогольнаяПродукция
	|ГДЕ
	|	ТаблицаОстатковСопоставленнаяАлкогольнаяПродукция.Количество - ЕСТЬNULL(ОстаткиАлкогольнаяПродукция.Количество, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатковСопоставленнаяАлкогольнаяПродукция.Номенклатура,
	|	ТаблицаОстатковСопоставленнаяАлкогольнаяПродукция.Характеристика,
	|	ТаблицаОстатковСопоставленнаяАлкогольнаяПродукция.ЕдиницаИзмерения
	|ИЗ
	|	ТаблицаОстатковСопоставленнаяАлкогольнаяПродукция КАК ТаблицаОстатковСопоставленнаяАлкогольнаяПродукция
	|ГДЕ
	|	ТаблицаОстатковСопоставленнаяАлкогольнаяПродукция.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ДокументОбъект.ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("Организация"     , ЗначенияРеквизитов.Контрагент);
	Запрос.УстановитьПараметр("ТорговыйОбъект"  , ЗначенияРеквизитов.ТорговыйОбъект);
	Запрос.УстановитьПараметр("Период"          , ?(ЗначениеЗаполнено(ДокументОбъект.Дата), ДокументОбъект.Дата, ТекущаяДатаСеанса()));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаСопоставленныеОстатки = МассивРезультатов[3].Выбрать();
	
	Пока ВыборкаСопоставленныеОстатки.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект.Товары.Добавить(), ВыборкаСопоставленныеОстатки);
		
	КонецЦикла;
	
	Если Не МассивРезультатов[4].Пустой() Тогда
		
		Результат.ЕстьНесопоставленнаяАлкогольнаяПродукция = Истина;
		Результат.АдресТаблицыНесопоставленныхТоваров      = ПоместитьВоВременноеХранилище(МассивРезультатов[4].Выгрузить(), Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииРТ

// Вызывается при создании на сервере формы выбора справочника Справки2ЕГАИС.
//
Процедура ПриСозданииНаСервереФормаВыбораСправки2ЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Если Форма.Параметры.Свойство("Номенклатура")
		И Форма.Параметры.Свойство("Характеристика") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция
		|ИЗ
		|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеЕГАИС
		|ГДЕ
		|	СоответствиеЕГАИС.Номенклатура = &Номенклатура
		|	И СоответствиеЕГАИС.Характеристика = &Характеристика";
		
		Запрос.УстановитьПараметр("Номенклатура", Форма.Параметры.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Форма.Параметры.Характеристика);
		
		МассивПродукции = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("АлкогольнаяПродукция");
		
		Если МассивПродукции.Количество() > 0 Тогда
			ОбщегоНазначенияРТКлиентСервер.ИзменитьЭлементОтбораСписка(
				Форма.Список,
				"АлкогольнаяПродукция",
				МассивПродукции,
				Истина,
				ВидСравненияКомпоновкиДанных.ВСписке,
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
				
			СтрокаОтбораПоНоменклатуре = НСтр("ru = 'Соответствующие номенклатуре: %1'");
			Если ЗначениеЗаполнено(Форма.Параметры.Характеристика) Тогда
				ПредставлениеНоменклатуры = Строка(Форма.Параметры.Номенклатура) + " / " + Строка(Форма.Параметры.Характеристика);
			Иначе
				ПредставлениеНоменклатуры = Строка(Форма.Параметры.Номенклатура);
			КонецЕсли;
			
			Форма.ИнформацияОбОтборе = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОтбораПоНоменклатуре, ПредставлениеНоменклатуры);
			Форма.Элементы.ИнформацияОбОтборе.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании на сервере форм справочника ШтрихкодыУпаковокТоваров.
//
Процедура ПриСозданииНаСервереФормСправочникаШтрихкодыУпаковокТоваров(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.Серия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы списка документов ЧекЕГАИС.
//
Процедура ПриСозданииНаСервереФормаСпискаДокументовЧекЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Если Форма.Параметры.Отбор.Свойство("ВидОперации") И Форма.Параметры.Отбор.ВидОперации = Перечисления.ВидыОперацийЧекаЕГАИС.ВскрытиеТары Тогда
		Форма.АвтоЗаголовок = Ложь;
		Форма.Заголовок = НСтр("ru='Вскрытия тары ЕГАИС'");
		
		Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаОформлено;
		Форма.Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании на сервере формы списка документов АктПостановкиНаБалансЕГАИС.
//
Процедура ПриСозданииНаСервереФормаДокументаАктПостановкиНаБалансЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ОприходованиеТоваров) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПодменюСоздатьНаОснованииОбычное_СоздатьНаОснованииОприходованиеТоваров",
			"Видимость",
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании на сервере формы списка документов АктПостановкиНаБалансЕГАИС.
//
Процедура ПриСозданииНаСервереФормаСпискаАктПостановкиНаБалансЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ОприходованиеТоваров) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПодменюСоздатьНаОснованииОбычное_СоздатьНаОснованииОприходованиеТоваров",
			"Видимость",
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при создании на сервере формы списка документов АктСписанияЕГАИС.
//
Процедура ПриСозданииНаСервереФормаДокументаАктСписанияЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы списка документов ВозвратИзРегистра2ЕГАИС.
//
Процедура ПриСозданииНаСервереФормаДокументаВозвратИзРегистра2ЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы списка документов ПередачаВРегистр2ЕГАИС.
//
Процедура ПриСозданииНаСервереФормаДокументаПередачаВРегистр2ЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы документа ЧекЕГАИС.
//
Процедура ПриСозданииНаСервереФормаДокументаЧекЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ВидОперации.ТолькоПросмотр = Истина;
	
	Если Форма.Объект.ВидОперации = Перечисления.ВидыОперацийЧекаЕГАИС.ВскрытиеТары Тогда
		Форма.АвтоЗаголовок = Ложь;
		
		Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
			Заголовок = НСтр("ru='Вскрытие тары ЕГАИС %1 от %2'");
			Заголовок = СтрШаблон(Заголовок, Форма.Объект.Номер, Форма.Объект.Дата);
		Иначе
			Заголовок = НСтр("ru='Вскрытие тары ЕГАИС (создание)'");
		КонецЕсли;
		
		Форма.Заголовок = Заголовок;
	КонецЕсли;
	
	Если Форма.Объект.ВидОперации = Перечисления.ВидыОперацийЧекаЕГАИС.ВскрытиеТары
		ИЛИ Форма.Объект.ВидОперации = Перечисления.ВидыОперацийЧекаЕГАИС.РеализацияЮридическомуЛицуСБезналичнойОплатой Тогда
		Форма.Элементы.НомерЧекаККМ.Видимость = Ложь;
	КонецЕсли;
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	
	Попытка
		Для каждого СтрокаТаблицы Из Форма.Объект.Товары Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.АлкогольнаяПродукция) И 
				СтрокаТаблицы.НоменклатураДляВыбора.Количество() = 1 Тогда
				СтрокаТаблицы.АлкогольнаяПродукция = СтрокаТаблицы.НоменклатураДляВыбора[0].Значение;
			КонецЕсли;
		КонецЦикла;
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Вызывается при создании на сервере формы документа ЧекЕГАИСВозврат.
//
Процедура ПриСозданииНаСервереФормаДокументаЧекЕГАИСВозврат(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ВидОперации.ТолькоПросмотр = Истина;
	
	Если Форма.Объект.ВидОперации = Перечисления.ВидыОперацийЧекаЕГАИСВозврат.ВозвратОтЮридическогоЛицаСБезналичнойОплатой Тогда
		Форма.Элементы.НомерЧекаККМ.Видимость = Ложь;
	КонецЕсли;
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы обработки СопоставлениеКлассификаторовЕГАИС.
//
Процедура ПриСозданииНаСервереФормаОбработкиСопоставлениеКлассификаторовЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы обработки ПроверкаИПодборАлкогольнойПродукцииЕГАИС.
//
Процедура ПриСозданииНаСервереФормаОбработкиПроверкаИПодборАлкогольнойПродукцииЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.АлкогольнаяПродукцияКОпределениюСправок2Серия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы документа ТТНВходящаяЕГАИС.
//
Процедура ПриСозданииНаСервереФормаДокументаТТНВходящаяЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	Форма.Элементы.ТоварыГруппаДополнительныеКоманды.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы документа ТТНИсходящаяЕГАИС.
//
Процедура ПриСозданииНаСервереФормаДокументаТТНИсходящаяЕГАИС(Форма, Отказ, СтандартнаяОбработка)
	
	Форма.Элементы.ТоварыСерия.Видимость = Ложь;
	Форма.Элементы.ТоварыГруппаДополнительныеКоманды.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы записи регистра сведений СоответствиеНоменклатурыЕГАИС.
//
Процедура ПриСозданииНаСервереФормаЗаписиРегистрСведенийСоответствиеНоменклатурыЕГАИС(Форма, Отказ, СтандартнаяОбработка);
	
	Форма.Элементы.Серия.Видимость = Ложь;
	
КонецПроцедуры

// Вызывается при создании на сервере формы списка регистра сведений СоответствиеНоменклатурыЕГАИС.
//
Процедура ПриСозданииНаСервереФормаСпискаРегистрСведенийСоответствиеНоменклатурыЕГАИС(Форма, Отказ, СтандартнаяОбработка);
	
	Форма.Элементы.Серия.Видимость = Ложь;
	
КонецПроцедуры


#КонецОбласти