
#Область ПрограммныйИнтерфейс

// Возвращает объекты прикладных метаданных, в которых возможна
//  интеграция с ВетИС (в формах объектов)
// Возвращаемое значение:
//  Массив - объекты прикладных метаданных
//
Функция ОбъектыМетаданныхИнтеграции() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить(Метаданные.Документы.ВозвратТоваровОтПокупателя);
	Результат.Добавить(Метаданные.Документы.ВозвратТоваровПоставщику);
	Результат.Добавить(Метаданные.Документы.ОприходованиеТоваров);
	Результат.Добавить(Метаданные.Документы.ПередачаТоваровМеждуОрганизациями);
	Результат.Добавить(Метаданные.Документы.ПеремещениеТоваров);
	Результат.Добавить(Метаданные.Документы.ПересортицаТоваров);
	Результат.Добавить(Метаданные.Документы.РеализацияТоваров);
	Результат.Добавить(Метаданные.Документы.СборкаТоваров);
	Результат.Добавить(Метаданные.Документы.СписаниеТоваров);
	
	Возврат Результат;
	
КонецФункции

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
//
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(Форма);
	
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
	Иначе
		МассивПрефиксыЭлементовФормы = Новый Массив;
		МассивПрефиксыЭлементовФормы.Добавить(ПрефиксыЭлементовФормы);
	КонецЕсли;
	
	Для Каждого Префикс Из МассивПрефиксыЭлементовФормы Цикл
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			Префикс + "ВыгрузитьДанныеВТСД",
			"Видимость",
			Ложь);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизит 'ЕдиницаИзмерения' справочника 'ЕдиницыИзмеренияВЕТИС' по ОКЕИ.
//
// Параметры:
//	СправочникОбъект - СправочникОбъект.ЕдиницыИзмеренияВЕТИС - Единица измерения ВетИС.
//
Процедура ЗаполнитьЕдиницуИзмеренияПоКлассификаторам(СправочникОбъект) Экспорт
	
	Если СправочникОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКлассификатораВЕТИС = ИнтеграцияВЕТИСПовтИсп.ДанныеКлассификатораЕдиницИзмеренияВЕТИС();
	СтрокаКлассификатораВЕТИС = ДанныеКлассификатораВЕТИС.Найти(СправочникОбъект.Идентификатор, "ЕдиницаИзмеренияGUID");
	
	Если ЗначениеЗаполнено(СтрокаКлассификатораВЕТИС)
		И ЗначениеЗаполнено(СтрокаКлассификатораВЕТИС.КодОКЕИ) Тогда
		
		КодОКЕИ = СтрокаКлассификатораВЕТИС.КодОКЕИ;
		ЕдиницаИзмерения = ИнтеграцияВЕТИСРТ_ЕдиницаИзмеренияОКЕИ(КодОКЕИ);
		
		Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			СправочникОбъект.ЕдиницаИзмерения = ЕдиницаИзмерения;
		Иначе
			СправочникОбъект.ЕдиницаИзмерения = ИнтеграцияВЕТИСРТ_СоздатьЕдиницуИзмеренияПоКлассификаторуОКЕИ(КодОКЕИ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИспользованиеИдентификаторовПартий(ТабличнаяЧастьТовары) Экспорт
	
	Возврат
	
КонецПроцедуры

// Процедура проверяет заполнение идентификатора партии
//  Параметры:
//    ТабличнаяЧастьТовары - ДанныеФормыКоллекция - Товарная табличная часть объекта.
//
Процедура ПроверитьЗаполнениеИдентификатораПартии(ДокументОбъект, Отказ, МассивНепроверяемыхРеквизитов) Экспорт
	
	Возврат;
	
КонецПроцедуры

#Область ОбработчикиСобытийДокументов

// Вызывается при вводе документа на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - заполняемый документ,
//  ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения,
//  ТекстЗаполнения - Строка, Неопределено - текст, используемый для заполнения документа,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияДокумента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ИнвентаризацияПродукцииВЕТИС") Тогда
		ОбработкаЗаполненияИнвентаризацииПродукцииВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
		ОбработкаЗаполненияДокументаИсходящаяТранспортнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		ОбработкаЗаполненияДокументаВходящаяТранспортнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПроизводственнаяОперацияВЕТИС") Тогда
		ОбработкаЗаполненияПроизводственнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияИнвентаризацииПродукцииВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияВЕТИСРТ_ОбработкаЗаполненияДокументаИнвентаризацияПродукцииВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаИсходящаяТранспортнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияВЕТИСРТ_ОбработкаЗаполненияДокументаИсходящаяТранспортнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаВходящаяТранспортнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	
КонецПроцедуры

Процедура ОбработкаЗаполненияПроизводственнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнтеграцияВЕТИСРТ_ОбработкаЗаполненияДокументаПроизводственнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

// Вызывается расширением формы при необходимости проверки заполнения реквизитов при записи или при проведении документа в форме,
// а также при выполнении метода ПроверитьЗаполнение.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проверяемый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  ПроверяемыеРеквизиты - Массив - массив путей к реквизитам, для которых будет выполнена проверка заполнения,
//  МассивНепроверяемыхРеквизитов - Массив - массив путей к реквизитам, для которых не будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПроизводственнаяОперацияВЕТИС") Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Серия");
		МассивНепроверяемыхРеквизитов.Добавить("Сырье.Серия");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Характеристика");
		ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект,МассивНепроверяемыхРеквизитов,Отказ);
		МассивНепроверяемыхРеквизитов.Добавить("Сырье.Характеристика");
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("ИмяТЧ", "Сырье");
		ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект,МассивНепроверяемыхРеквизитов,Отказ, ПараметрыПроверки);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗапросСкладскогоЖурналаВЕТИС") Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Серия");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Характеристика");
		ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект,МассивНепроверяемыхРеквизитов,Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Серия");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Характеристика");
		ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект,МассивНепроверяемыхРеквизитов,Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ИнвентаризацияПродукцииВЕТИС") Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Серия");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Характеристика");
		ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект,МассивНепроверяемыхРеквизитов,Отказ);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Серия");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Характеристика");
		ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект,МассивНепроверяемыхРеквизитов,Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при проведении документа. Выполняется в транзакции записи.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проводимый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения.
//
Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	ДокументОбъект.ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Новый Массив);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ДокументОбъект, Отказ);
	
КонецПроцедуры

// Возникает перед выполнением записи документа. Вызывается после начала транзакции записи, но до начала записи документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - записываемый документ,
//  Отказ - Булево - признак отказа от записи,
//  РежимЗаписи - РежимЗаписиДокумента - текущий режим записи документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения документа.
//
Процедура ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи)Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Создает временную таблицу "ДокументыИнформационнойБазы", для дальнейшего использования в методе
//	ЗаполнениеДокументовВЕТИС.ДокументОснованиеПоДаннымСвязанныхДокументов.
//	Содержит колонки:
//		* ТипДокумента - ПеречислениеСсылка.ТипыДокументовВЕТИС - тип документа ВЕТИС, служит для определения типа связи со связанными документами;
//		* ПоказательУпорядочивания - ПроизвольныйТип - при определении документа основания, служит для определения приоритета найденных документов;
//		* Документ - ДокументСсылка - документ, который будет определяться как документ-основание;
//		* Дата - Дата - дата входящего документа, по которой будут сопоставляться данные документов ИБ и данные связанных документов;
//		* Номер - Строка - номер входящего документа, по которому будут сопоставляться данные документов ИБ и данные связанных документов;
//	Параметры:
//		ВременныеТаблицы - МенеджерВременныхТаблиц - менеджер временных таблиц запроса, в который будет добавлена создаваемая временная таблица.
//
Процедура ЗаполнитьВременнуюТаблицуСвязанныхДокументовИнформационнойБазы(ВременныеТаблицы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	
	МассивТекстовЗапросаДокументыПоЗаказу = Новый Массив;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Заказ,
	|	НЕОПРЕДЕЛЕНО КАК Ссылка,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата
	|ПОМЕСТИТЬ ДокументыПоЗаказу
	|ГДЕ
	|	ЛОЖЬ";
	
	МассивТекстовЗапросаДокументыПоЗаказу.Добавить(ТекстЗапроса);
	
	МассивТекстовЗапросаДокументыИнформационнойБазы = Новый Массив;
	
	МассивТекстовРеестраДокументовИнформационнойБазы = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Ссылка,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
	|	"""" КАК Номер
	|ПОМЕСТИТЬ РеестрДокументов
	|ГДЕ
	|	ЛОЖЬ";
	
	МассивТекстовРеестраДокументовИнформационнойБазы.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументовВЕТИС.ПустаяСсылка) КАК ТипДокумента,
	|	НЕОПРЕДЕЛЕНО КАК ПоказательУпорядочивания,
	|	НЕОПРЕДЕЛЕНО КАК Документ,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
	|	"""" КАК Номер
	|ПОМЕСТИТЬ ДокументыИнформационнойБазы
	|ГДЕ
	|	ЛОЖЬ";

	МассивТекстовЗапросаДокументыИнформационнойБазы.Добавить(ТекстЗапроса);
	
	АнализируемыеТипыСсылок = Новый Массив;
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПоступлениеТоваров) Тогда
		АнализируемыеТипыСсылок.Добавить(Тип("ДокументСсылка.ПоступлениеТоваров"));
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказПоставщику) Тогда
		АнализируемыеТипыСсылок.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровОтПокупателя) Тогда
		АнализируемыеТипыСсылок.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваров) Тогда
		АнализируемыеТипыСсылок.Добавить(Тип("ДокументСсылка.РеализацияТоваров"));
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказПокупателя) Тогда
		АнализируемыеТипыСсылок.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	КонецЕсли;
	
	Если АнализируемыеТипыСсылок.Количество() > 0 Тогда
			
		Если ПравоДоступа("Чтение", Метаданные.Документы.ПоступлениеТоваров) Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДокументыПоЗаказу.ЗаказПоставщику КАК Заказ,
			|	ДокументыПоЗаказу.Ссылка КАК Ссылка,
			|	ДокументыПоЗаказу.Дата КАК Дата
			|ИЗ
			|	Документ.ПоступлениеТоваров КАК ДокументыПоЗаказу
			|ГДЕ
			|	ДокументыПоЗаказу.Проведен";
			
			МассивТекстовЗапросаДокументыПоЗаказу.Добавить(ТекстЗапроса);
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПоступлениеТоваров.Ссылка КАК Ссылка,
			|	ПоступлениеТоваров.Дата КАК Дата,
			|	ПоступлениеТоваров.Номер КАК Номер
			|ИЗ
			|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
			|ГДЕ
			|	ПоступлениеТоваров.Проведен";
			
			МассивТекстовРеестраДокументовИнформационнойБазы.Добавить(ТекстЗапроса);
		КонецЕсли;
		
		Если ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваров) Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДокументыПоЗаказу.ЗаказПокупателя КАК Заказ,
			|	ДокументыПоЗаказу.Ссылка КАК Ссылка,
			|	ДокументыПоЗаказу.Дата КАК Дата
			|ИЗ
			|	Документ.РеализацияТоваров КАК ДокументыПоЗаказу
			|ГДЕ
			|	ДокументыПоЗаказу.Проведен";
			
			МассивТекстовЗапросаДокументыПоЗаказу.Добавить(ТекстЗапроса);
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РеализацияТоваров.Ссылка КАК Ссылка,
			|	РеализацияТоваров.Дата КАК Дата,
			|	РеализацияТоваров.Номер КАК Номер
			|ИЗ
			|	Документ.РеализацияТоваров КАК РеализацияТоваров
			|ГДЕ
			|	РеализацияТоваров.Проведен";
			
			МассивТекстовРеестраДокументовИнформационнойБазы.Добавить(ТекстЗапроса);
		КонецЕсли;
		
		Если ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровОтПокупателя) Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка,
			|	ВозвратТоваровОтПокупателя.Дата КАК Дата,
			|	ВозвратТоваровОтПокупателя.Номер КАК Номер
			|ИЗ
			|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
			|ГДЕ
			|	ВозвратТоваровОтПокупателя.Проведен";
			
			МассивТекстовРеестраДокументовИнформационнойБазы.Добавить(ТекстЗапроса);
		КонецЕсли;
		
		Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказПоставщику) Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаказПоставщику.Ссылка КАК Ссылка,
			|	ЗаказПоставщику.Дата КАК Дата,
			|	ЗаказПоставщику.Номер КАК Номер
			|ИЗ
			|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
			|ГДЕ
			|	ЗаказПоставщику.Проведен";
			
			МассивТекстовРеестраДокументовИнформационнойБазы.Добавить(ТекстЗапроса);
		КонецЕсли;
		
		Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказПокупателя) Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаказПокупателя.Ссылка КАК Ссылка,
			|	ЗаказПокупателя.Дата КАК Дата,
			|	ЗаказПокупателя.Номер КАК Номер
			|ИЗ
			|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
			|ГДЕ
			|	ЗаказПокупателя.Проведен";
			
			МассивТекстовРеестраДокументовИнформационнойБазы.Добавить(ТекстЗапроса);
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) В (ТИП(Документ.ЗаказПоставщику), ТИП(Документ.ЗаказПокупателя))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДокументовВЕТИС.Заказ)
		|		КОГДА ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) В (ТИП(Документ.ПоступлениеТоваров), ТИП(Документ.ВозвратТоваровОтПокупателя), ТИП(Документ.РеализацияТоваров))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДокументовВЕТИС.Торг12)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыДокументовВЕТИС.ПустаяСсылка)
		|	КОНЕЦ КАК ТипДокумента,
		|	ЕСТЬNULL(ДокументыПоЗаказу.Дата, РеестрДокументов.Дата) КАК ПоказательУпорядочивания,
		|	ЕСТЬNULL(ДокументыПоЗаказу.Ссылка, РеестрДокументов.Ссылка) КАК Документ,
		|	РеестрДокументов.Дата КАК Дата,
		|	РеестрДокументов.Номер КАК Номер
		|ИЗ
		|	РеестрДокументов КАК РеестрДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыПоЗаказу КАК ДокументыПоЗаказу
		|		ПО РеестрДокументов.Ссылка = ДокументыПоЗаказу.Заказ
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) В (&АнализируемыеТипыСсылок)";
	
		МассивТекстовЗапросаДокументыИнформационнойБазы.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("АнализируемыеТипыСсылок", АнализируемыеТипыСсылок);
	
	ТекстЗапросаДокументыПоЗаказу = СтрСоединить(МассивТекстовЗапросаДокументыПоЗаказу,
		РазделительЗапросовВОбъединении());
	ТекстЗапросаДокументыПоЗаказу = ТекстЗапросаДокументыПоЗаказу + Символы.ПС +
	"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ";
	
	ТекстЗапросаРеестраДокументов = СтрСоединить(МассивТекстовРеестраДокументовИнформационнойБазы,
		РазделительЗапросовВОбъединении());
		
	ТекстЗапросаДокументыИнформационнойБазы = СтрСоединить(МассивТекстовЗапросаДокументыИнформационнойБазы,
		РазделительЗапросовВОбъединении());
		
	ТекстЗапросаДокументыИнформационнойБазы = ТекстЗапросаДокументыИнформационнойБазы + Символы.ПС +
	"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипДокумента,
	|	Дата,
	|	Номер";
	
	
	МассивТекстовЗапроса = Новый Массив;
	МассивТекстовЗапроса.Добавить(ТекстЗапросаДокументыПоЗаказу);
	МассивТекстовЗапроса.Добавить(ТекстЗапросаРеестраДокументов);
	МассивТекстовЗапроса.Добавить(ТекстЗапросаДокументыИнформационнойБазы);
	МассивТекстовЗапроса.Добавить("УНИЧТОЖИТЬ ДокументыПоЗаказу");
	Запрос.Текст = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область ОрганизацииИКонтрагенты

// В функции нужно реализовать поиск организации предприятия по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомой организации,
//  КПП - Строка - КПП искомой организации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ОрганизацияКонтрагентВЕТИС - найденная организация,
//  Неопределено - организация не найдена.
//
Функция ОрганизацияПоИННКПП(ИНН, КПП) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации", ИНН, КПП, ВозвращаемоеЗначение);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// В функции нужно реализовать поиск контрагента по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомого контрагента,
//  КПП - Строка - КПП искомого контрагента.
// 
// Возвращаемое значение:
//  СправочникСсылка.Контрагенты - структура со свойствами:
//   * Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентВЕТИС - найденный контрагент,
//   * ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - найденный торговый объект контрагента (партнер).
//  Неопределено - контрагент не найден.
//
Функция КонтрагентПоИННКПП(ИНН, КПП) Экспорт
	
	РезультатПоиска = ОбщегоНазначенияРТ.ИННКППУжеИспользуетсяВИнформационнойБазе(ИНН, КПП);
	
	Если ЗначениеЗаполнено(РезультатПоиска) Тогда
		Возврат РезультатПоиска.Ссылка;
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Возвращает ИНН и КПП объекта, сопоставленного хозяйствующему субъекту по данным ИБ.
//
// Параметры:
//  ХозяйствующийСубъект - ОпределяемыйТип.ОрганизацияКонтрагентВЕТИС - ссылка на хозя, реквизиты которой нужно определить,
// 
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * КПП - Строка - КПП организации,
//   * ИНН - Строка - ИНН организации.
//
Функция ИННКППСопоставленногоХозяйствующегоСубъекта(ХозяйствующийСубъект) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если Не ЗначениеЗаполнено(ХозяйствующийСубъект) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ХозяйствующийСубъект) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Запрос.Текст ="
		|ВЫБРАТЬ 
		|	Контрагенты.ИНН    КАК ИНН,
		|	Контрагенты.КПП    КАК КПП
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &ХозяйствующийСубъект";
		
	Иначе
		
		Запрос.Текст ="
		|ВЫБРАТЬ
		|	Организации.ИНН КАК ИНН,
		|	Организации.КПП КАК КПП
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &ХозяйствующийСубъект";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ХозяйствующийСубъект"   , ХозяйствующийСубъект);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ИНН", Выборка.ИНН);
		ВозвращаемоеЗначение.Вставить("КПП", Выборка.КПП);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Определяет заданы ли настройки подключения к сервису интернет подддержки пользователей.
//
Функция НастройкиПодключенияКСервисуИППЗаданы() Экспорт

	
	Возврат Ложь;

КонецФункции

Функция ДанныеКонтрагентаДляПоискаХозяйствующегоСубъекта(Контрагент) Экспорт
	
	ДанныеКонтрагента = Новый Структура;
	ДанныеКонтрагента.Вставить("ИНН", "");
	ДанныеКонтрагента.Вставить("КПП", "");
	ДанныеКонтрагента.Вставить("ОГРН", "");
	ДанныеКонтрагента.Вставить("Наименование", "");
	ДанныеКонтрагента.Вставить("НаименованиеПолное", "");
	ДанныеКонтрагента.Вставить("Тип", Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ПустаяСсылка());

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	"""" КАК ОГРН,
	|	Контрагенты.Наименование КАК Наименование,
	|	"""" КАК НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|				ИЛИ Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ЮридическоеЛицо)
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ИндивидуальныйПредприниматель)
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ФизическоеЛицо)
	|	КОНЕЦ КАК Тип
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, Выборка);
	КонецЕсли;
	
	Возврат ДанныеКонтрагента;
	
КонецФункции

#КонецОбласти

#Область ФизическиеЛица

Функция ДанныеФизическогоЛица(ФизическоеЛицо) Экспорт
	
	ДанныеФизЛица = Новый Структура();
	ДанныеФизЛица.Вставить("Фамилия");
	ДанныеФизЛица.Вставить("Имя");
	ДанныеФизЛица.Вставить("Отчество");
	ДанныеФизЛица.Вставить("ДатаРождения");
	ДанныеФизЛица.Вставить("ДокументВид");
	ДанныеФизЛица.Вставить("ДокументТип");
	ДанныеФизЛица.Вставить("ДокументСерия");
	ДанныеФизЛица.Вставить("ДокументНомер");
	ДанныеФизЛица.Вставить("ГражданствоСтрана");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА ФИОФизическихЛицСрезПоследних.ФизЛицо ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ФИОФизическихЛицСрезПоследних.Фамилия
	|	КОНЕЦ КАК Фамилия,
	|	ВЫБОР
	|		КОГДА ФИОФизическихЛицСрезПоследних.ФизЛицо ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ФИОФизическихЛицСрезПоследних.Имя
	|	КОНЕЦ КАК Имя,
	|	ВЫБОР
	|		КОГДА ФИОФизическихЛицСрезПоследних.ФизЛицо ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ФИОФизическихЛицСрезПоследних.Отчество
	|	КОНЕЦ КАК Отчество,
	|	ФизическиеЛица.ДатаРождения КАК ДатаРождения,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ДокументВид,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК ДокументСерия,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК ДокументНомер
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
	|		ПО (ФИОФизическихЛицСрезПоследних.ФизЛицо = ФизическиеЛица.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
	|		ПО (ДокументыФизическихЛицСрезПоследних.Физлицо = ФизическиеЛица.Ссылка)
	|			И (ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность)
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &ФизическоеЛицо";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеФизЛица, Выборка);
	КонецЕсли;
	
	Если ДанныеФизЛица.ДокументВид = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ Тогда
		ДанныеФизЛица.ДокументТип = Перечисления.ТипыДокументовВЕТИС.ПаспортГражданинаРФ;
	КонецЕсли;
	
	Возврат ДанныеФизЛица;
	
КонецФункции

#КонецОбласти

// Процедура вызывается при изменении статуса обработки документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - ссылка на документ,
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработки* - предыдущий статус обработки,
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработки* - новый статус обработки.
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса = Неопределено) Экспорт
	
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо определить значения по умолчанию, которые будут подставляться в
// реквизиты не сопоставленных элементов справочника.
//
// Параметры:
//  СобственнаяОрганизация - ОпределяемыйТип.ОрганизацияКонтрагентВЕТИС - значение по умолчанию для собственной организации,
//  СторонняяОрганизация - ОпределяемыйТип.ОрганизацияКонтрагентВЕТИС - значение по умолчанию для сторонней организации.
//
Процедура ЗначенияПоУмолчаниюНеСопоставленныхОбъектов(СобственнаяОрганизация,
		                                              СобственныйТорговыйОбъект,
		                                              СобственныйПроизводственныйОбъект,
		                                              СторонняяОрганизация,
		                                              СтороннийТорговыйОбъект) Экспорт
	
	СобственнаяОрганизация    			= Справочники.Организации.ПустаяСсылка();
	СобственныйТорговыйОбъект 			= Справочники.Магазины.ПустаяСсылка();
	СобственныйПроизводственныйОбъект	= Неопределено;
	СторонняяОрганизация      			= Справочники.Контрагенты.ПустаяСсылка();
	СтороннийТорговыйОбъект   			= Неопределено;
	
КонецПроцедуры

// Процедура формирования движений по регистру "Движения серий товаров".
//
// Параметры:
//	ДополнительныеСвойства - Структура - дополнительные свойства для записи движений 
//	Движения - КоллекцияДвижений - движения по которым двигается документ
//	Отказ - Булево - признак отказа от проведения документа
//
Процедура ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
КонецПроцедуры

// Получает данные транспортной накладной для входящей или исходящей транспортной операции по документу-основанию.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Ссылка на документ-основание транспортной операции.
// 
// Возвращаемое значение:
//  Структура - структура с данными транспортной накладной с полями:
//  * Номер — Строка, Неопределено — номер транспортной накладной. Неопределено, если транспортная накладная не найдена.
//  * Дата — Дата, Неопределено — дата транспортной накладной. Неопределено, если транспортная накладная не найдена.
//
Функция ДанныеТТНДляТранспортнойОперацииПоДокументуОснованию(ДокументОснование) Экспорт
	
	ДанныеТТН = Новый Структура("Номер, Дата");
	
	
	Возврат ДанныеТТН;
	
КонецФункции

#Область Отчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Процедура ДобавитьКомандуАнализРасхожденийПриПоступленииПродукцииВЕТИС(КомандыОтчетов) Экспорт
	
	КомандаОтчет = Неопределено;
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.АнализРасхожденийПриПоступленииПродукцииВЕТИС) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		                    
		КомандаОтчет.Менеджер = Метаданные.Отчеты.АнализРасхожденийПриПоступленииПродукцииВЕТИС.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Расхождения при поступлении продукции ВЕТИС'");
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "АнализРасхожденийПриПоступленииПродукцииВЕТИС");
		
	КонецЕсли;
	
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента";
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТабличнаяЧастьТовары

// Получить представление номенклатуры.
//
// Параметры:
//	Номенклатура				- ОпределяемыйТип.Номенклатура					- Ссылка на номенклатуру
//	ХарактеристикаНоменклатуры	- ОпределяемыйТип.ХарактеристикаНоменклатуры	- Ссылка на характеристику номенклатуры.
//	Упаковка					- ОпределяемыйТип.Упаковка						- Ссылка на упаковку.
//
// Возвращаемое значение:
//	Строка - Представление номенклатуры.
//
Функция ПредставлениеНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры, Упаковка) Экспорт
	
	ПредставлениеНоменклатуры = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Строка(Номенклатура),
																							Строка(ХарактеристикаНоменклатуры),
																							Строка(Упаковка));
	Возврат ПредставлениеНоменклатуры;
	
КонецФункции

// Устанавливает параметры выбора номенклатуры.
//
// Параметры:
//	Форма			- УправляемаяФорма	- Форма, в которой нужно установить параметры выбора.
//	ИмяПоляВвода	- Строка			- Имя поля ввода номенклатуры.
//
Процедура УстановитьПараметрыВыбораНоменклатуры(Форма, ИмяПоляВвода = "ТоварыНоменклатура") Экспорт
	
	ПараметрыВыбора = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора);
	
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар));
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ОсобенностьУчета",
													Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС));
	
	Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры

// Заполняет количество номенклатуры по количеству ВЕТИС.
//
// Параметры:
//	ТекущаяСтрока	- ДанныеФормыЭлементКоллекции	- Строка табличной части объекта.
//	Суффикс			- Строка						- Окончание наименования колонки, содержащей количество по данным ВЕТИС.
//
Процедура ЗаполнитьКоличествоНоменклатурыПоКоличествуВЕТИС(ТекущаяСтрока, Суффикс = "") Экспорт
	
	ПересчитатьКоличествоЕдиницПоВЕТИС = Новый Структура("ЕдиницаИзмеренияВЕТИС, Суффикс");
	ЗаполнитьЗначенияСвойств(ПересчитатьКоличествоЕдиницПоВЕТИС, ТекущаяСтрока);
	ПересчитатьКоличествоЕдиницПоВЕТИС.Суффикс = Суффикс;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницПоВЕТИС", ПересчитатьКоличествоЕдиницПоВЕТИС);
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
КонецПроцедуры

// Заполняет статус указания серий и проверяет серию в строке табличной части объекта.
//
// Параметры:
//	ДокументОбъект	- ДокументОбъект - Документ, для которого необходимо заполнить статус указания серии.
//	ТекущаяСтрока	- ДанныеФормыЭлементКоллекции - Строка табличной части объекта.
//
Процедура ПроверитьСериюРассчитатьСтатус(ДокументОбъект, ТекущаяСтрока) Экспорт
	
	ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(ДокументОбъект,
								ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДокументОбъект.Метаданные().ПолноеИмя()));
								
	Если ПараметрыУказанияСерий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.Свойство("Товары") Тогда
		ПроверитьСериюРассчитатьСтатус = Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерий.Товары, Неопределено);
	Иначе
		ПроверитьСериюРассчитатьСтатус = Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерий, Неопределено);
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПроверитьСериюРассчитатьСтатус);
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
КонецПроцедуры

// Заполняет идентификатор партии по данным серии в строке табличной части объекта.
//
// Параметры:
//	ТекущаяСтрока - ДанныеФормыЭлементКоллекции - Строка табличной части объекта.
//	Серия - СправочникСсылка - Ссылка на справочник серий, в которой определен реквизит ИдентификаторПартииВЕТИС
//
Процедура ЗаполнитьИдентификаторПартии(ТекущаяСтрока, Серия) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Устанавливает связь элемента формы с полем ввода номенклатуры.
//
// Параметры:
//	Форма					- УправляемаяФорма	- Форма, в которой нужно установить связь.
//	ИмяПоляВвода			- Строка			- Имя поля, связываемого с номенклатурой.
//	ПутьКДаннымНоменклатуры	- Строка			- Путь к текущей номенклатуре в форме.
//
Процедура УстановитьСвязиПараметровВыбораСНоменклатурой(Форма,
														ИмяПоляВвода,
														ПутьКДаннымНоменклатуры = "Элементы.Товары.ТекущиеДанные.Номенклатура") Экспорт
														
	СвязиПараметровВыбораИсточник = Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора;
	
	СвязиПараметровВыбора = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СвязиПараметровВыбораИсточник);
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Номенклатура", ПутьКДаннымНоменклатуры));
	
	Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
КонецПроцедуры

// В функции требуется определить признак использования характеристик для номенклатуры.
//
// Параметры:
//	Номенклатура - ОпределяемыйТип.Номенклатура - Ссылка на элемент номенклатуры.
//
// Возвращаемое значение:
//	Булево - Признак использования характеристик.
//
Функция ПризнакИспользованияХарактеристик(Номенклатура) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура);
	
КонецФункции

#КонецОбласти

#Область Серии

// Возвращает текст запроса для движений по регистру накопления СерииНоменклатуры.
//
// Возвращаемое значение:
//	Строка - текст запроса.
//
Функция ТекстЗапросаДвижениеСерийТоваров(ИмяДокумента) Экспорт
	
	ТекстЗапроса = "";
	
	Если ИмяДокумента = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС.Имя Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ТаблицаСерииУточнение.Номенклатура, ТаблицаСерии.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ТаблицаСерииУточнение.Характеристика, ТаблицаСерии.Характеристика) КАК Характеристика,
		|	ЕСТЬNULL(ТаблицаСерииУточнение.Серия, ТаблицаСерии.Серия) КАК Серия,
		|	ЕСТЬNULL(ТаблицаСерииУточнение.Количество, ТаблицаСерии.Количество) КАК Количество,
		|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВзаимодействиеСВЕТИС) КАК СкладскаяОперация,
		|	&Ссылка КАК Документ,
		|	&Период КАК Период,
		|	&Ссылка КАК Регистратор,
		|	ЛОЖЬ КАК ЭтоСкладскоеДвижение
		|ИЗ
		|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК ТаблицаСерии
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВходящаяТранспортнаяОперацияВЕТИС.ТоварыУточнение КАК ТаблицаСерииУточнение
		|		ПО ТаблицаСерии.ИдентификаторСтроки = ТаблицаСерииУточнение.ИдентификаторСтроки
		|ГДЕ
		|	ТаблицаСерии.Ссылка = &Ссылка
		|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
		
	ИначеЕсли ИмяДокумента = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС.Имя Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаСерии.Номенклатура КАК Номенклатура,
		|	ТаблицаСерии.Характеристика КАК Характеристика,
		|	ТаблицаСерии.Серия КАК Серия,
		|	ТаблицаСерии.Количество КАК Количество,
		|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВзаимодействиеСВЕТИС) КАК СкладскаяОперация,
		|	&Ссылка КАК Документ,
		|	&Период КАК Период,
		|	&Ссылка КАК Регистратор,
		|	ЛОЖЬ КАК ЭтоСкладскоеДвижение
		|ИЗ
		|	Документ.ПроизводственнаяОперацияВЕТИС.Товары КАК ТаблицаСерии
		|ГДЕ
		|	ТаблицаСерии.Ссылка = &Ссылка
		|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСерии.Номенклатура,
		|	ТаблицаСерии.Характеристика,
		|	ТаблицаСерии.Серия,
		|	ТаблицаСерии.Количество,
		|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВзаимодействиеСВЕТИС),
		|	&Ссылка,
		|	&Период,
		|	&Ссылка,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.ПроизводственнаяОперацияВЕТИС.Сырье КАК ТаблицаСерии
		|ГДЕ
		|	ТаблицаСерии.Ссылка = &Ссылка
		|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
		
	ИначеЕсли ИмяДокумента = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС.Имя Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаСерии.Номенклатура КАК Номенклатура,
		|	ТаблицаСерии.Характеристика КАК Характеристика,
		|	ТаблицаСерии.Серия КАК Серия,
		|	ВЫБОР
		|		КОГДА ТаблицаСерии.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление) ТОГДА
		|			ТаблицаСерии.КоличествоИзменение
		|		КОГДА ТаблицаСерии.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение) ТОГДА
		|			ТаблицаСерии.КоличествоИзменение
		|		КОГДА ТаблицаСерии.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление) ТОГДА
		|			ТаблицаСерии.КоличествоИзменение
		|		ИНАЧЕ
		|			0
		|	КОНЕЦ КАК Количество,
		|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВзаимодействиеСВЕТИС) КАК СкладскаяОперация,
		|	&Ссылка КАК Документ,
		|	&Период КАК Период,
		|	&Ссылка КАК Регистратор,
		|	ЛОЖЬ КАК ЭтоСкладскоеДвижение
		|ИЗ
		|	Документ.ИнвентаризацияПродукцииВЕТИС.Товары КАК ТаблицаСерии
		|ГДЕ
		|	ТаблицаСерии.Ссылка = &Ссылка
		|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаСерии.Номенклатура КАК Номенклатура,
		|	ТаблицаСерии.Характеристика КАК Характеристика,
		|	ТаблицаСерии.Серия КАК Серия,
		|	ТаблицаСерии.Количество КАК Количество,
		|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВзаимодействиеСВЕТИС) КАК СкладскаяОперация,
		|	&Ссылка КАК Документ,
		|	&Период КАК Период,
		|	&Ссылка КАК Регистратор,
		|	ЛОЖЬ КАК ЭтоСкладскоеДвижение
		|ИЗ
		|	Документ.%ИмяДокумента%.Товары КАК ТаблицаСерии
		|ГДЕ
		|	ТаблицаСерии.Ссылка = &Ссылка
		|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяДокумента%", ИмяДокумента);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает структуру параметров заполнения серий.
//
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//		* ПараметрыУказанияСерий	- Структура				- Состав полей определен в функции 
//																НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//		* Склад						- ОпределяемыйТип.Склад	- Склад, на котором осуществляется серийный учет.
//
Функция ПараметрыЗаполненияСерий() Экспорт
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("ПараметрыУказанияСерий",	Неопределено);
	ПараметрыЗаполнения.Вставить("Склад",					Неопределено);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Заполняет свойство "Склад" в структуре параметров заполнения серий.
//
// Параметры:
//	Объект				- ДокументОбъект, ДанныеФормыКоллекция	- Объект, хранящий значение склада.
//	ПараметрыЗаполнения	- Структура								- Параметры заполнения серий.
//
Процедура ЗаполнитьПараметрЗаполненияСклад(Объект, ПараметрыЗаполнения) Экспорт

	ПараметрыУказанияСерий = ПараметрыЗаполнения.ПараметрыУказанияСерий;
	
	Если ПараметрыУказанияСерий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяПоляСклад)
		И ОбщегоНазначенияРТКлиентСервер.ЕстьРеквизитОбъекта(Объект, ПараметрыУказанияСерий.ИмяПоляСклад) Тогда
		
		ПараметрыЗаполнения.Склад = Объект[ПараметрыУказанияСерий.ИмяПоляСклад];
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизит "Серия" в товарной табличной части.
//
// Параметры:
//	ТабличнаяЧасть		- ДанныеФормыКоллекция, ТабличнаяЧасть - Товарная табличная часть объекта.
//	ВыделенныеСтроки	- Массив	- Обрабатываемые строки таблицы.
//	ПараметрыЗаполнения	- Структура	- Состав полей определен в функции 
//										ИнтеграцияВЕТИСПереопределяемый.ПараметрыЗаполненияСерий.
//	СтруктураДействий	- Структура	- Структура с действиями, которые нужно произвести.
//
// Возвращаемое значение:
//	Структура - Результат генерации серий, состав полей которого определен в функции 
//				ИнтеграцияВЕТИСУТ.ЗаполнитьСгенерироватьСерии.
//
Функция ЗаполнитьСгенерироватьСерии(ТабличнаяЧастьТовары,
									ВыделенныеСтрокиТоваров,
									ПараметрыЗаполнения,
									ТабличнаяЧастьУточнения,
									СтруктураДействий) Экспорт
	
	Результат = ИнтеграцияВЕТИСРТ_ЗаполнитьСгенерироватьСерии(ТабличнаяЧастьТовары,
									ВыделенныеСтрокиТоваров,
									ПараметрыЗаполнения,
									ТабличнаяЧастьУточнения,
									СтруктураДействий);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДокументОснованиеПроизводственнойОперации

Функция ПолучитьИдентификаторПроизводственнойТранзакцииПоДокументуОснования(ДокументОснования) Экспорт
	
	Результат = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ИдентификаторПроизводственнойТранзакцииВЕТИС");
	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Функция определяет признак использования комиссии при закупках или производства из давальческого сырья.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево - Признак использования комиссии при закупках или производства из давальческого сырья.
//
Функция ИспользуетсяКомиссияПриЗакупкахИлиПереработкаДавальческогоСырья() Экспорт
	
	ЕстьКомиссияПереработка = Ложь;
	
	Возврат ЕстьКомиссияПереработка;
	
КонецФункции

// Функция лпределяет признак используется ли переработка на сторон
//Параметры:
//	Нет.
//Возвращаемое значение:
//	Булево - Признак использования производства на стороне.
Функция ИспользуетсяПереработкаНаСтороне() Экспорт
	Возврат Ложь;
КонецФункции

// Функция определяет признак использования комиссии при продажах или производства из давальческого сырья.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево - Признак использования комиссии при продажах или производства из давальческого сырья.
//
Функция ИспользуетсяКомиссияИлиПереработка() Экспорт
	
	ЕстьКомиссияПереработка = Ложь;
	
	
	Возврат ЕстьКомиссияПереработка;
	
КонецФункции

Функция УказываетсяТранспортноеСредство() Экспорт
	Возврат Ложь;
КонецФункции

Функция РеквизитыТранспортногоСредства(ТранспортноеСредство) Экспорт
	
	Результат = Новый Структура("НомерТранспортногоСредства, НомерАвтомобильногоПрицепа", "", "");
	Возврат Результат;
	
КонецФункции

Функция РазделительЗапросовВОбъединении()
	
	Результат = ОбщегоНазначенияРТ.РазделительЗапросовВОбъединении();
	
	Возврат Результат;
	
КонецФункции

// Записывает соответствие между номенклатурой и продукцией ВЕТИС из табличной части документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ, содержащий табличную часть Товары.
//  ЗаписыватьЗаписьСкладскогоЖурнала - Булево - признак сопоставления по записи складского журнала.
//  СопоставлятьПоСерии - Булево - признак сопоставления по серии.
//
Процедура ЗаписатьСоответствиеНоменклатуры(ДокументОбъект, ЗаписыватьЗаписьСкладскогоЖурнала = Истина, СопоставлятьПоСерии = Ложь) Экспорт
	
	ИнтеграцияВЕТИСРТ_ЗаписатьСоответствиеНоменклатуры(ДокументОбъект, 
		ЗаписыватьЗаписьСкладскогоЖурнала, 
		СопоставлятьПоСерии);
	
КонецПроцедуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Процедура ДобавитьКомандуАнализРасхожденийПриИнвентаризацииПродукцииВЕТИС(КомандыОтчетов) Экспорт
		
	Возврат;
	
КонецПроцедуры


#Область Статусы

Процедура РассчитатьСтатусОформленияВходящаяТранспортнаяОперацияВЕТИС(Источник, Отказ)
	
	ИнтеграцияВЕТИСРТ_РассчитатьСтатусОформленияВходящаяТранспортнаяОперацияВЕТИС(Источник, Отказ);
	
КонецПроцедуры

Процедура РассчитатьСтатусОформленияИсходящаяТранспортнаяОперацияВЕТИС(Источник, Отказ)
	
	ИнтеграцияВЕТИСРТ_РассчитатьСтатусОформленияИсходящаяТранспортнаяОперацияВЕТИС(Источник, Отказ);
	
КонецПроцедуры

Функция ДанныеПартииПроизводстваПоДокументуОснования(ДокументОснования) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторПроизводственнойТранзакции", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ИдентификаторПроизводственнойТранзакцииВЕТИС"));
	Результат.Вставить("ЗавершениеПроизводственнойТранзакции", Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти




#Область ИнтеграцияВЕТИСРТ

#Область ПрограммныйИнтерфейс

// Сопоставляет продукцию ВЕТИС с номенклатурой.
//
// Параметры:
//  Объект - ДокументОбъект - Объект в котором сопоставляется номенклатура.
//  ЗаписыватьЗаписьСкладскогоЖурнала - Булево - признак сопоставления по записи складского журнала.
//  СопоставлятьПоСерии - Булево - признак сопоставления по серии.
//
Процедура ИнтеграцияВЕТИСРТ_ЗаписатьСоответствиеНоменклатуры(Объект, ЗаписыватьЗаписьСкладскогоЖурнала = Истина, СопоставлятьПоСерии = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КолонкиДляВыгрузки = "Продукция, Номенклатура, Характеристика";
	Если СопоставлятьПоСерии Тогда
		КолонкиДляВыгрузки = КолонкиДляВыгрузки + ", Серия";
	КонецЕсли;
	Если ЗаписыватьЗаписьСкладскогоЖурнала Тогда
		КолонкиДляВыгрузки = КолонкиДляВыгрузки + ", ЗаписьСкладскогоЖурнала";
	КонецЕсли;
	Данные = Объект.Товары.Выгрузить(, КолонкиДляВыгрузки);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Продукция КАК Продукция,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	&ИмяКолонкиСерия КАК Серия,
	|	&ИмяКолонкиЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Продукция КАК Продукция,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Серия КАК Серия,
	|	Таблица.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	Сопоставлено.Продукция КАК Сопоставлено,
	|	МАКСИМУМ(ЕСТЬNULL(Сопоставлено.Порядок,ЕСТЬNULL(СопоставленоБЕЗСерии.Порядок,0))) КАК Порядок
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК Сопоставлено
	|		ПО Сопоставлено.Номенклатура = Таблица.Номенклатура
	|		 И Сопоставлено.Характеристика = Таблица.Характеристика
	|		 И Сопоставлено.ЗаписьСкладскогоЖурнала = Таблица.ЗаписьСкладскогоЖурнала
	|		 И Сопоставлено.Серия = Таблица.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СопоставленоБЕЗСерии
	|		ПО СопоставленоБЕЗСерии.Номенклатура = Таблица.Номенклатура
	|		 И СопоставленоБЕЗСерии.Характеристика = Таблица.Характеристика
	|		 И СопоставленоБЕЗСерии.ЗаписьСкладскогоЖурнала = Таблица.ЗаписьСкладскогоЖурнала
	|ГДЕ
	|	Таблица.Продукция <> ЗНАЧЕНИЕ(Справочник.ПродукцияВЕТИС.ПустаяСсылка)
	|	И Таблица.Номенклатура <> &ПустаяСсылкаНоменклатура
	|	И (Сопоставлено.Продукция ЕСТЬ NULL
	|		ИЛИ Сопоставлено.Продукция <> Таблица.Продукция)
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Продукция,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	Таблица.ЗаписьСкладскогоЖурнала,
	|	Сопоставлено.Продукция
	|");
	
	Запрос.УстановитьПараметр("Таблица", Данные);
	Запрос.УстановитьПараметр("ПустаяСсылкаНоменклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип.ПривестиЗначение());
	Запрос.УстановитьПараметр("ПустаяЗаписьСкладскогоЖурнала", Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия", Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип.ПривестиЗначение());
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ИмяКолонкиСерия",
		?(СопоставлятьПоСерии, "Т.Серия", "&ПустаяСерия"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ИмяКолонкиЗаписьСкладскогоЖурнала",
		?(ЗаписыватьЗаписьСкладскогоЖурнала, "Т.ЗаписьСкладскогоЖурнала", "&ПустаяЗаписьСкладскогоЖурнала"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыВЕТИС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура, Истина);
		НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика, Истина);
		НаборЗаписей.Отбор.Серия.Установить(Выборка.Серия, Истина);
		НаборЗаписей.Отбор.Продукция.Установить(Выборка.Продукция, Истина);
		НаборЗаписей.Отбор.ЗаписьСкладскогоЖурнала.Установить(Выборка.ЗаписьСкладскогоЖурнала, Истина);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Номенклатура            = Выборка.Номенклатура;
		НоваяЗапись.Характеристика          = Выборка.Характеристика;
		НоваяЗапись.Серия                   = Выборка.Серия;
		НоваяЗапись.Продукция               = Выборка.Продукция;
		НоваяЗапись.ЗаписьСкладскогоЖурнала = Выборка.ЗаписьСкладскогоЖурнала;
		НоваяЗапись.Порядок                 = Выборка.Порядок + 1;
		
		ПараметрыУказанияСерий = ГосударственныеИнформационныеСистемыПереопределяемый.ПараметрыУказанияСерийФормыОбъекта(НоваяЗапись, РегистрыСведений.СоответствиеНоменклатурыВЕТИС);
		ГосударственныеИнформационныеСистемыПереопределяемый.ЗаполнитьСтатусыУказанияСерий(НоваяЗапись, ПараметрыУказанияСерий);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			
			ТекстОшибки = НСтр("ru = 'При записи соответствия номенклатуры ВЕТИС произошла ошибка:
			                         |%1'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			
			ИнтеграцияВЕТИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			
		КонецПопытки;
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает единицу измерения по ОКЕИ.
//
// Параметры:
//	КодОКЕИ - ОпределяемыйТип.СтрокаВЕТИС - Код ОКЕИ.
//
// Возвращаемое значение:
//	СправочникСсылка.БазовыеЕдиницыИзмерения, Неопределено - Единица измерения по ОКЕИ.
//
Функция ИнтеграцияВЕТИСРТ_ЕдиницаИзмеренияОКЕИ(КодОКЕИ) Экспорт
	
	СоответствиеКодовОКЕИ = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК Ссылка,
	|	ЕдиницыИзмерения.Код КАК Код
	|ИЗ
	|	Справочник.БазовыеЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Код <> """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоответствиеКодовОКЕИ.Вставить(СокрЛП(Выборка.Код), Выборка.Ссылка);
	КонецЦикла;
	
	ЕдиницаИзмерения = СоответствиеКодовОКЕИ.Получить(КодОКЕИ);
	
	Возврат ЕдиницаИзмерения;
	
КонецФункции

// Создает единицу измерения по ОКЕИ.
//
// Параметры:
//	КодОКЕИ - ОпределяемыйТип.СтрокаВЕТИС - Код ОКЕИ.
//
// Возвращаемое значение:
//	СправочникСсылка.ЕдиницаИзмерения, Неопределено - Единица измерения по ОКЕИ.
//
Функция ИнтеграцияВЕТИСРТ_СоздатьЕдиницуИзмеренияПоКлассификаторуОКЕИ(КодОКЕИ) Экспорт
	
	ДеревоДанныхКлассификатора = Справочники.БазовыеЕдиницыИзмерения.ПолучитьДанныеКлассификатора();
	
	ДанныеКлассификатора = ОбщегоНазначенияРТ.ДанныеДерева(ДеревоДанныхКлассификатора, 2);
	СтрокаКлассификатора = ДанныеКлассификатора.Найти(КодОКЕИ, "КодЧисловой");
	
	ЕдиницаИзмерения = Неопределено;
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ЗначениеЗаполнено(СтрокаКлассификатора.УсловноеОбозначениеНациональное) Тогда
			Наименование = СтрокаКлассификатора.УсловноеОбозначениеНациональное;
		ИначеЕсли ЗначениеЗаполнено(СтрокаКлассификатора.УсловноеОбозначениеМеждународное) Тогда
			Наименование = СтрокаКлассификатора.УсловноеОбозначениеМеждународное;
		ИначеЕсли ЗначениеЗаполнено(СтрокаКлассификатора.КодовоеБуквенноеОбозначениеНациональное) Тогда
			Наименование = СтрокаКлассификатора.КодовоеБуквенноеОбозначениеНациональное;
		ИначеЕсли ЗначениеЗаполнено(СтрокаКлассификатора.КодовоеБуквенноеОбозначениеМеждународное) Тогда
			Наименование = СтрокаКлассификатора.КодовоеБуквенноеОбозначениеМеждународное;
		Иначе
			Наименование = СтрокаКлассификатора.Наименование;
		КонецЕсли;
		
		СправочникОбъект = Справочники.БазовыеЕдиницыИзмерения.СоздатьЭлемент();
		
		СправочникОбъект.Код                     = СокрЛП(СтрокаКлассификатора.КодЧисловой);
		СправочникОбъект.Наименование            = СтрЗаменить(Наименование, Символы.ПС, "/");
		СправочникОбъект.НаименованиеПолное      = СтрЗаменить(СтрокаКлассификатора.Наименование, Символы.ПС, "/");
		СправочникОбъект.МеждународноеСокращение = СтрЗаменить(СтрокаКлассификатора.КодовоеБуквенноеОбозначениеМеждународное,
																Символы.ПС,
																"/");
		
		СправочникОбъект.Записать();
		
		ЕдиницаИзмерения = СправочникОбъект.Ссылка;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		ИмяСобытия = НСтр("ru = 'Создание единицы измерения по классификатору.'", КодОсновногоЯзыка);
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат ЕдиницаИзмерения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаЗаполнения

Процедура ЗаполнитьТабличнуюЧастьДокумента(ТабличнаяЧасть, РезультатЗапроса, ДанныеЗаполнения, СоответствиеКолонокКоличествоВЕТИС, БезСопоставления = Истина)
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru='В %1 отсутствует продукция для заполнения.'"),
			ДанныеЗаполнения);
		
	КонецЕсли;
	
	КэшированныеЗначения      = Новый Структура("КоэффициентыУпаковок", Новый Соответствие);
	КолонкиТабличнойЧасти     = ТабличнаяЧасть.Выгрузить(Новый Структура("НомерСтроки",Ложь));
	ЕстьЕдиницаИзмеренияВЕТИС = КолонкиТабличнойЧасти.Колонки.Найти("ЕдиницаИзмеренияВЕТИС") <> Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Продукция) ИЛИ БезСопоставления Тогда
			
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			Если ЕстьЕдиницаИзмеренияВЕТИС Тогда
				ИнтеграцияВЕТИС.ПроверитьОчиститьЕдиницуИзмеренияВЕТИС(НоваяСтрока);
				Если ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмеренияВЕТИС) Тогда
					Для Каждого КлючИЗначение Из СоответствиеКолонокКоличествоВЕТИС Цикл
						НоваяСтрока[КлючИЗначение.Значение] = ИнтеграцияВЕТИСРТКлиентСервер.ПересчитатьКоличествоЕдиницВЕТИС(
											НоваяСтрока[КлючИЗначение.Ключ],
											Выборка.Номенклатура,
											НоваяСтрока.ЕдиницаИзмеренияВЕТИС,
											Ложь,
											КэшированныеЗначения,
											"");
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если ОбщегоНазначенияРТКлиентСервер.ЕстьРеквизитОбъекта(Выборка, "Номенклатура") Тогда
				
				ТабличнаяЧасть.Очистить();
				
				ТекстОшибки = НСтр("ru='Не выполнено сопоставление %Номенклатура% классификатору номенклатуры ВЕТИС.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Выборка.Номенклатура);
				
				ВызватьИсключение ТекстОшибки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ИнвентаризацияПродукцииВЕТИС

Процедура ЗаполнитьШапкуИнвентаризацииПродукции(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	РеквизитыДокумента = Запрос.Выполнить().Выбрать();
	РеквизитыДокумента.Следующий();
	
	ЭтоПерезаполнение = ЗначениеЗаполнено(ДокументОбъект.Ссылка);
	
	Если Не ЭтоПерезаполнение Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(РеквизитыДокумента.ДокументОснование);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыДокумента);
		
		РеквизитыВЕТИС = Справочники.ХозяйствующиеСубъектыВЕТИС.ХозяйствующийСубъектИПредприятиеПоПрикладнымРеквизитам(
			РеквизитыДокумента.Организация, РеквизитыДокумента.ТорговыйОбъект);
		ЗаполнитьЗначенияСвойств(ДокументОбъект,РеквизитыВЕТИС);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьИнвентаризацииПродукции(ДокументОбъект, ДанныеЗаполнения, ТекстТоварыДокумента, ДопустимыйЗнак)
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.УпаковкиВЕТИС.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияИнвентаризацииПродукцииИзПрикладногоДокумента(ТекстТоварыДокумента, ДопустимыйЗнак);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ИнвентаризацияПродукцииВЕТИС.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ПустаяСерия",       Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип.ПривестиЗначение());
	
	КолонкиКоличестваВЕТИС = Новый Структура;
	КолонкиКоличестваВЕТИС.Вставить("КоличествоИзменение","КоличествоИзменениеВЕТИС");
	
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Запрос.Выполнить(), ДанныеЗаполнения, КолонкиКоличестваВЕТИС);
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияИнвентаризацииПродукцииИзПрикладногоДокумента(ТекстТоварыДокумента, ДопустимыйЗнак)
	
	Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОформленныеДокументы
	|ИЗ
	|	Документ.ИнвентаризацияПродукцииВЕТИС КАК ТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
	|		ПО СтатусыДокументовВЕТИС.Документ = ТаблицаДокументы.Ссылка
	|ГДЕ
	|	ТаблицаДокументы.ДокументОснование = &ДокументОснование
	|	И ТаблицаДокументы.Ссылка <> &ЭтаСсылка
	|	И ТаблицаДокументы.Проведен
	|	И СтатусыДокументовВЕТИС.Статус НЕ В(&КонечныеСтатусы)
	|;
	|"
	+
	ТекстТоварыДокумента
	+
	"
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыСерии.Номенклатура                    КАК Номенклатура,
	|	ТоварыСерии.Характеристика                  КАК Характеристика,
	|	ТоварыСерии.Серия                           КАК Серия,
	|	ТоварыСерии.Количество                      КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК ТоварыСерии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура              КАК Номенклатура,
	|	ОформленныеТовары.Характеристика            КАК Характеристика,
	|	ОформленныеТовары.Серия                     КАК Серия,
	|	-ОформленныеТовары.КоличествоИзменение      КАК Количество
	|ИЗ
	|	Документ.ИнвентаризацияПродукцииВЕТИС.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка В (ВЫБРАТЬ Т.Ссылка ИЗ ОформленныеДокументы КАК Т)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеНоменклатурыВЕТИС.Продукция,СоответствиеНоменклатурыВЕТИС2.Продукция)) КАК Продукция,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Серия КАК Серия
	|ПОМЕСТИТЬ СопоставленыеПозиции
	|ИЗ
	|	ТоварыКОформлению КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|		ПО СоответствиеНоменклатурыВЕТИС.Номенклатура = ТабличнаяЧасть.Номенклатура
	|			И СоответствиеНоменклатурыВЕТИС.Характеристика = ТабличнаяЧасть.Характеристика
	|			И (СоответствиеНоменклатурыВЕТИС.Серия = ТабличнаяЧасть.Серия)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС2
	|		ПО СоответствиеНоменклатурыВЕТИС2.Номенклатура = ТабличнаяЧасть.Номенклатура
	|			И СоответствиеНоменклатурыВЕТИС2.Характеристика = ТабличнаяЧасть.Характеристика
	|			И (СоответствиеНоменклатурыВЕТИС2.Серия = &ПустаяСерия)
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Серия
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(СоответствиеНоменклатурыВЕТИС.Продукция,СоответствиеНоменклатурыВЕТИС2.Продукция)) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура                                        КАК Номенклатура,
	|	ТоварыКОформлению.Номенклатура.ЕдиницаИзмерения                       КАК Упаковка,
	|	ТоварыКОформлению.Характеристика                                      КАК Характеристика,
	|	ТоварыКОформлению.Серия                                               КАК Серия,
	|	СопоставленыеПозиции.Продукция                                        КАК Продукция,
	|	СУММА(ТоварыКОформлению.Количество)                                   КАК КоличествоИзменение,
	|	СУММА(ТоварыКОформлению.Количество)                                   КАК КоличествоИзменениеВЕТИС,
	|	ВЫБОР
	|		КОГДА СУММА(ТоварыКОформлению.Количество) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение)
	|	КОНЕЦ                               КАК Операция
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленыеПозиции КАК СопоставленыеПозиции
	|		ПО СопоставленыеПозиции.Номенклатура = ТоварыКОформлению.Номенклатура
	|			И СопоставленыеПозиции.Характеристика = ТоварыКОформлению.Характеристика
	|			И СопоставленыеПозиции.Серия = ТоварыКОформлению.Серия
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	СопоставленыеПозиции.Продукция
	|ИМЕЮЩИЕ ДопустимыйЗнак
	|";
	Если ДопустимыйЗнак = -1 Тогда
		Текст = СтрЗаменить(Текст, "ДопустимыйЗнак", "СУММА(ТоварыКОформлению.Количество)<0");
	ИначеЕсли ДопустимыйЗнак = 1 Тогда
		Текст = СтрЗаменить(Текст, "ДопустимыйЗнак", "СУММА(ТоварыКОформлению.Количество)>0");
	Иначе
		Текст = СтрЗаменить(Текст, "ДопустимыйЗнак", "СУММА(ТоварыКОформлению.Количество)<>0");
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

Процедура ИнтеграцияВЕТИСРТ_ОбработкаЗаполненияДокументаИнвентаризацияПродукцииВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОприходованиеТоваров")Тогда 
		ЗаполнитьИнвентаризациюПродукцииВЕТИСНаОснованииОприходованияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПересортицаТоваров")Тогда 
		ЗаполнитьИнвентаризациюПродукцииВЕТИСНаОснованииПересортицыТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СписаниеТоваров")Тогда 
		ЗаполнитьИнвентаризациюПродукцииВЕТИСНаОснованииСписанияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнвентаризациюПродукцииВЕТИСНаОснованииОприходованияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокОснование.Ссылка КАК ДокументОснование,
	|	ДокОснование.Номер КАК НомерАктаНесоответствия,
	|	ДокОснование.Дата КАК ДатаАктаНесоответствия,
	|	НЕ ДокОснование.Проведен КАК ЕстьОшибкиПроведен,
	|	ДокОснование.Ответственный КАК Ответственный,
	|	ДокОснование.Организация КАК Организация,
	|	ДокОснование.Магазин КАК ТорговыйОбъект
	|ИЗ
	|	Документ.ОприходованиеТоваров КАК ДокОснование
	|ГДЕ
	|	ДокОснование.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуИнвентаризацииПродукции(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	ТекстТоварыДокумента = "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура                                КАК Номенклатура,
	|	Товары.Характеристика                              КАК Характеристика,
	|	&ПустаяСерия                                       КАК Серия,
	|	СУММА(Товары.Количество)                           КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ОприходованиеТоваров.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	&ПустаяСерия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура                                КАК Номенклатура,
	|	Серии.Характеристика                              КАК Характеристика,
	|	Серии.Серия                                       КАК Серия,
	|	СУММА(Серии.Количество)                           КАК Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	Документ.ОприходованиеТоваров.Серии КАК Серии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Серии.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Серии.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|СГРУППИРОВАТЬ ПО
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура                                КАК Номенклатура,
	|	Товары.Характеристика                              КАК Характеристика,
	|	ЕСТЬNULL(Серии.Серия,Товары.Серия)                 КАК Серия,
	|	ЕСТЬNULL(Серии.Количество, Товары.Количество)      КАК Количество
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Серии КАК Серии
	|			ПО Серии.Номенклатура = Товары.Номенклатура
	|			И Серии.Характеристика = Товары.Характеристика
	|;
	|";
		
	ЗаполнитьТабличнуюЧастьИнвентаризацииПродукции(ДокументОбъект, ДанныеЗаполнения, ТекстТоварыДокумента, 1);
	
КонецПроцедуры

Процедура ЗаполнитьИнвентаризациюПродукцииВЕТИСНаОснованииПересортицыТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокОснование.Ссылка        КАК ДокументОснование,
	|	ДокОснование.Номер         КАК НомерАктаНесоответствия,
	|	ДокОснование.Дата          КАК ДатаАктаНесоответствия,
	|	НЕ ДокОснование.Проведен   КАК ЕстьОшибкиПроведен,
	|	ДокОснование.Ответственный КАК Ответственный,
	|	ДокОснование.Организация   КАК Организация,
	|	ДокОснование.Склад         КАК ТорговыйОбъект
	|ИЗ
	|	Документ.ПересортицаТоваров КАК ДокОснование
	|ГДЕ
	|	ДокОснование.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуИнвентаризацииПродукции(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	ТекстТоварыДокумента = "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	&ПустаяСерия              КАК Серия,
	|	-СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	Документ.ПересортицаТоваров.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	&ПустаяСерия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.НоменклатураОприходование,
	|	Товары.ХарактеристикаОприходование,
	|	&ПустаяСерия,
	|	СУММА(Товары.Количество)
	|ИЗ
	|	Документ.ПересортицаТоваров.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.НоменклатураОприходование = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.НоменклатураОприходование,
	|	Товары.ХарактеристикаОприходование,
	|	&ПустаяСерия
	|;
	|";
	
	ЗаполнитьТабличнуюЧастьИнвентаризацииПродукции(ДокументОбъект, ДанныеЗаполнения, ТекстТоварыДокумента, 0);
	
КонецПроцедуры

Процедура ЗаполнитьИнвентаризациюПродукцииВЕТИСНаОснованииСписанияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокОснование.Ссылка        КАК ДокументОснование,
	|	ДокОснование.Номер         КАК НомерАктаНесоответствия,
	|	ДокОснование.Дата          КАК ДатаАктаНесоответствия,
	|	НЕ ДокОснование.Проведен   КАК ЕстьОшибкиПроведен,
	|	ДокОснование.Ответственный КАК Ответственный,
	|	ДокОснование.Организация   КАК Организация,
	|	ДокОснование.Магазин         КАК ТорговыйОбъект
	|ИЗ
	|	Документ.СписаниеТоваров КАК ДокОснование
	|ГДЕ
	|	ДокОснование.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуИнвентаризацииПродукции(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	ТекстТоварыДокумента = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	&ПустаяСерия КАК Серия,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.СписаниеТоваров.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Серия КАК Серия,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	Документ.СписаниеТоваров.Серии КАК Серии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Серии.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Серии.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|
	|СГРУППИРОВАТЬ ПО
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(Серии.Серия, Товары.Серия) КАК Серия,
	|	СУММА(ЕСТЬNULL(-Серии.Количество, -Товары.Количество)) КАК Количество
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Серии КАК Серии
	|		ПО (Серии.Номенклатура = Товары.Номенклатура)
	|			И (Серии.Характеристика = Товары.Характеристика)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(Серии.Серия, Товары.Серия),
	|	Товары.Характеристика,
	|	Товары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	ЗаполнитьТабличнуюЧастьИнвентаризацииПродукции(ДокументОбъект, ДанныеЗаполнения, ТекстТоварыДокумента, -1);
	
КонецПроцедуры

#КонецОбласти

#Область ПроизводственнаяОперацияВЕТИС

Процедура ИнтеграцияВЕТИСРТ_ОбработкаЗаполненияДокументаПроизводственнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	
КонецПроцедуры

Функция СтруктураЗапросаДанныеПрикладногоДокумента(ДанныеЗаполнения)
	
	СтруктураЗапроса = Неопределено;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СборкаТоваров")Тогда
		
		СтруктураЗапроса = СтруктураЗапросаДанныеДокументаСборкаТоваров();
		
	КонецЕсли;
	
	Возврат СтруктураЗапроса;
	
КонецФункции

Функция СтруктураЗапросаДанныеДокументаСборкаТоваров()
	
	СтруктураЗапроса = Новый Структура();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК ДокументОснование,
	|
	|	Таблица.Организация КАК Организация,
	|	Таблица.Склад КАК Склад,
	|
	|	НАЧАЛОПЕРИОДА(Таблица.Дата, ДЕНЬ) КАК ДатаОперацииНачалоПериода,
	|	КОНЕЦПЕРИОДА(Таблица.Дата, ДЕНЬ) КАК ДатаОперацииКонецПериода,
	|
	|	(НЕ Таблица.Проведен) КАК ЕстьОшибкиПроведен,
	|
	|	"""" КАК ИдентификаторПроизводственнойТранзакции,
	|	ЛОЖЬ КАК ЗавершениеПроизводственнойТранзакции
	|
	|ИЗ
	|	Документ.СборкаТоваров КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &ДокументОснование
	|";
	СтруктураЗапроса.Вставить("Реквизиты", ТекстЗапроса);
	
	ШаблонЗапроса =
	"ВЫБРАТЬ
	|
	|	ТабличнаяЧасть.Номенклатура                                КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                              КАК Характеристика,
	|	ТабличнаяЧасть.Серия                                       КАК Серия,
	|	ВЫБОР
	|		КОГДА ISNULL(ТабличнаяЧасть.Серия.ДатаПроизводства, ДАТАВРЕМЯ(1,1,1)) <> ДАТАВРЕМЯ(1,1,1) ТОГДА
	|			ТабличнаяЧасть.Серия.ДатаПроизводства
	|	ИНАЧЕ
	|			НАЧАЛОПЕРИОДА(ТабличнаяЧасть.Ссылка.Дата, ДЕНЬ)
	|	КОНЕЦ                                             КАК ДатаПроизводства,
	|	ТабличнаяЧасть.Количество                                  КАК Количество
	|
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Документ.СборкаТоваров КАК ТабличнаяЧасть
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		 ПО ТабличнаяЧасть.Номенклатура = СправочникНоменклатура.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров.Серии КАК ТаблицаСерии
	|		 ПО ТаблицаСерии.Ссылка = ТабличнаяЧасть.Ссылка
	|			И ТаблицаСерии.Номенклатура   = ТабличнаяЧасть.Номенклатура
	|			И ТаблицаСерии.Характеристика = ТабличнаяЧасть.Характеристика
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|	И ТаблицаСерии.Номенклатура ЕСТЬ NULL
	|	И &Отбор1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|
	|	ТабличнаяЧасть.Номенклатура                                КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                              КАК Характеристика,
	|	ТабличнаяЧасть.Серия                                       КАК Серия,
	|	ВЫБОР
	|		КОГДА ISNULL(ТабличнаяЧасть.Серия.ДатаПроизводства, ДАТАВРЕМЯ(1,1,1)) <> ДАТАВРЕМЯ(1,1,1) ТОГДА
	|			ТабличнаяЧасть.Серия.ДатаПроизводства
	|	ИНАЧЕ
	|			НАЧАЛОПЕРИОДА(ТабличнаяЧасть.Ссылка.Дата, ДЕНЬ)
	|	КОНЕЦ                                                      КАК ДатаПроизводства,
	|	ТабличнаяЧасть.Количество                                  КАК Количество
	|
	|ИЗ
	|	Документ.СборкаТоваров.Серии КАК ТабличнаяЧасть
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		 ПО ТабличнаяЧасть.Номенклатура = СправочникНоменклатура.Ссылка
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаТоваров КАК ТаблицаОграничения
	|		 ПО ТабличнаяЧасть.Ссылка = ТаблицаОграничения.Ссылка
	|			И ТабличнаяЧасть.Номенклатура = ТаблицаОграничения.Номенклатура
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|	И &Отбор1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|
	|	ТабличнаяЧасть.Номенклатура                                КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                              КАК Характеристика,
	|	ТабличнаяЧасть.Серия                                       КАК Серия,
	|	ВЫБОР
	|		КОГДА ISNULL(ТабличнаяЧасть.Серия.ДатаПроизводства, ДАТАВРЕМЯ(1,1,1)) <> ДАТАВРЕМЯ(1,1,1) ТОГДА
	|			ТабличнаяЧасть.Серия.ДатаПроизводства
	|	ИНАЧЕ
	|			НАЧАЛОПЕРИОДА(ТабличнаяЧасть.Ссылка.Дата, ДЕНЬ)
	|	КОНЕЦ                                                      КАК ДатаПроизводства,
	|	ТабличнаяЧасть.Количество                                  КАК Количество
	|
	|ИЗ
	|	Документ.СборкаТоваров.Товары КАК ТабличнаяЧасть
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		 ПО ТабличнаяЧасть.Номенклатура = СправочникНоменклатура.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СборкаТоваров.Серии КАК ТаблицаСерии
	|		 ПО ТаблицаСерии.Ссылка = ТабличнаяЧасть.Ссылка
	|			И ТаблицаСерии.Номенклатура   = ТабличнаяЧасть.Номенклатура
	|			И ТаблицаСерии.Характеристика = ТабличнаяЧасть.Характеристика
	|			И ТаблицаСерии.Назначение     = ТабличнаяЧасть.Назначение
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|	И ТаблицаСерии.Номенклатура ЕСТЬ NULL
	|	И &Отбор2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|
	|	ТабличнаяЧасть.Номенклатура                                КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика                              КАК Характеристика,
	|	ТабличнаяЧасть.Серия                                       КАК Серия,
	|	ВЫБОР
	|		КОГДА ISNULL(ТабличнаяЧасть.Серия.ДатаПроизводства, ДАТАВРЕМЯ(1,1,1)) <> ДАТАВРЕМЯ(1,1,1) ТОГДА
	|			ТабличнаяЧасть.Серия.ДатаПроизводства
	|	ИНАЧЕ
	|			НАЧАЛОПЕРИОДА(ТабличнаяЧасть.Ссылка.Дата, ДЕНЬ)
	|	КОНЕЦ                                                      КАК ДатаПроизводства,
	|	ТабличнаяЧасть.Количество                                  КАК Количество
	|
	|ИЗ
	|	Документ.СборкаТоваров.Серии КАК ТабличнаяЧасть
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		 ПО ТабличнаяЧасть.Номенклатура = СправочникНоменклатура.Ссылка
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаТоваров.Товары КАК ТаблицаОграничения
	|		 ПО ТабличнаяЧасть.Ссылка = ТаблицаОграничения.Ссылка
	|			И ТабличнаяЧасть.Номенклатура = ТаблицаОграничения.Номенклатура
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|	И &Отбор2
	|";
	
	ТекстЗапроса = ШаблонЗапроса;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВременнаяТаблица", "Товары");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отбор1", "(ТабличнаяЧасть.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров))");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отбор2", "(ТабличнаяЧасть.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров))");
	СтруктураЗапроса.Вставить("Товары", ТекстЗапроса);
	
	ТекстЗапроса = ШаблонЗапроса;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВременнаяТаблица", "Сырье");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отбор1", "(ТабличнаяЧасть.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров))");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отбор2", "(ТабличнаяЧасть.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров))");
	СтруктураЗапроса.Вставить("Сырье", ТекстЗапроса);
	
	Возврат СтруктураЗапроса;
	
КонецФункции


#КонецОбласти

#Область ИсходящаяТранспортнаяОперацияВЕТИС

Процедура ЗаполнитьШапкуИсходящейТранспортнойОперации(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	РеквизитыДокумента = Запрос.Выполнить().Выбрать();
	РеквизитыДокумента.Следующий();
	
	ЭтоПерезаполнение = ЗначениеЗаполнено(ДокументОбъект.Ссылка);
	
	Если Не ЭтоПерезаполнение Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(РеквизитыДокумента.ДокументОснование);
			
		ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыДокумента);
		
		Грузоотправитель = Справочники.ХозяйствующиеСубъектыВЕТИС.ХозяйствующийСубъектИПредприятиеПоПрикладнымРеквизитам(
			РеквизитыДокумента.Грузоотправитель, РеквизитыДокумента.СкладОтправитель);
		ДокументОбъект.ГрузоотправительХозяйствующийСубъект = Грузоотправитель.ХозяйствующийСубъект;
		ДокументОбъект.ГрузоотправительПредприятие          = Грузоотправитель.Предприятие;
		
		Грузополучатель = Справочники.ХозяйствующиеСубъектыВЕТИС.ХозяйствующийСубъектИПредприятиеПоПрикладнымРеквизитам(
			РеквизитыДокумента.Грузополучатель, РеквизитыДокумента.СкладПолучатель);
		ДокументОбъект.ГрузополучательХозяйствующийСубъект = Грузополучатель.ХозяйствующийСубъект;
		ДокументОбъект.ГрузополучательПредприятие          = Грузополучатель.Предприятие;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьИсходящейТранспортнойОперации(ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, ЕстьСерии)
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.УпаковкиВЕТИС.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияИсходящейТранспортнойОперацииИзПрикладногоДокумента(ИмяДокумента,ЕстьСерии);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ИсходящаяТранспортнаяОперацияВЕТИС.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ПустаяСерия",       Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип.ПривестиЗначение());
	
	КолонкиКоличествоВЕТИС = Новый Структура;
	КолонкиКоличествоВЕТИС.Вставить("Количество","КоличествоВЕТИС");
	
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Запрос.Выполнить(), ДанныеЗаполнения, КолонкиКоличествоВЕТИС);
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияИсходящейТранспортнойОперацииИзПрикладногоДокумента(ИмяДокумента, ЕстьСерии)
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОформленныеДокументы
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС КАК ТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
	|		ПО СтатусыДокументовВЕТИС.Документ = ТаблицаДокументы.Ссылка
	|ГДЕ
	|	ТаблицаДокументы.ДокументОснование = &ДокументОснование
	|	И ТаблицаДокументы.Ссылка <> &ЭтаСсылка
	|	И ТаблицаДокументы.Проведен
	|	И СтатусыДокументовВЕТИС.Статус НЕ В(&КонечныеСтатусы)
	|;
	|"
	+ ?(ЕстьСерии = Ложь,
	"
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура                                КАК Номенклатура,
	|	Товары.Характеристика                              КАК Характеристика,
	|	&ПустаяСерия                                       КАК Серия,
	|	СУММА(Товары.Количество)                           КАК Количество
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	Документ.ИмяПрикладногоДокумента.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	&ПустаяСерия
	|;
	|"
	,
	"
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура                                КАК Номенклатура,
	|	Товары.Характеристика                              КАК Характеристика,
	|	&ПустаяСерия                                       КАК Серия,
	|	СУММА(Товары.Количество)                           КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ИмяПрикладногоДокумента.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	&ПустаяСерия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура                                КАК Номенклатура,
	|	Серии.Характеристика                              КАК Характеристика,
	|	Серии.Серия                                       КАК Серия,
	|	СУММА(Серии.Количество)                           КАК Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	Документ.ИмяПрикладногоДокумента.Серии КАК Серии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Серии.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Серии.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ПодконтрольнаяПродукцияВЕТИС
	|СГРУППИРОВАТЬ ПО
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура                                КАК Номенклатура,
	|	Товары.Характеристика                              КАК Характеристика,
	|	ЕСТЬNULL(Серии.Серия,Товары.Серия)                 КАК Серия,
	|	ЕСТЬNULL(Серии.Количество, Товары.Количество)      КАК Количество
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Серии КАК Серии
	|			ПО Серии.Номенклатура = Товары.Номенклатура
	|			И Серии.Характеристика = Товары.Характеристика
	|;
	|"
	)
	+
	"
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыСерии.Номенклатура          КАК Номенклатура,
	|	ТоварыСерии.Характеристика        КАК Характеристика,
	|	ТоварыСерии.Серия                 КАК Серия,
	|	ТоварыСерии.Количество            КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК ТоварыСерии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	-ОформленныеТовары.Количество
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка В (ВЫБРАТЬ Т.Ссылка ИЗ ОформленныеДокументы КАК Т)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеНоменклатурыВЕТИС.Продукция,СоответствиеНоменклатурыВЕТИС2.Продукция)) КАК Продукция,
	|	ТабличнаяЧасть.Номенклатура   КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Серия          КАК Серия
	|ПОМЕСТИТЬ СопоставленыеПозиции
	|ИЗ
	|	ТоварыКОформлению КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|		ПО СоответствиеНоменклатурыВЕТИС.Номенклатура = ТабличнаяЧасть.Номенклатура
	|			И СоответствиеНоменклатурыВЕТИС.Характеристика = ТабличнаяЧасть.Характеристика
	|			И (СоответствиеНоменклатурыВЕТИС.Серия = ТабличнаяЧасть.Серия)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС2
	|		ПО СоответствиеНоменклатурыВЕТИС2.Номенклатура = ТабличнаяЧасть.Номенклатура
	|			И СоответствиеНоменклатурыВЕТИС2.Характеристика = ТабличнаяЧасть.Характеристика
	|			И (СоответствиеНоменклатурыВЕТИС2.Серия = &ПустаяСерия)
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ТабличнаяЧасть.Серия
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(СоответствиеНоменклатурыВЕТИС.Продукция,СоответствиеНоменклатурыВЕТИС2.Продукция)) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура                  КАК Номенклатура,
	|	ТоварыКОформлению.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
	|	ТоварыКОформлению.Характеристика                КАК Характеристика,
	|	ТоварыКОформлению.Серия                         КАК Серия,
	|	СопоставленыеПозиции.Продукция                  КАК Продукция,
	|	СУММА(ТоварыКОформлению.Количество)             КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество)             КАК КоличествоВЕТИС
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленыеПозиции КАК СопоставленыеПозиции
	|		ПО СопоставленыеПозиции.Номенклатура = ТоварыКОформлению.Номенклатура
	|			И СопоставленыеПозиции.Характеристика = ТоварыКОформлению.Характеристика
	|			И СопоставленыеПозиции.Серия = ТоварыКОформлению.Серия
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	СопоставленыеПозиции.Продукция
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ИмяПрикладногоДокумента",ИмяДокумента);
	Возврат ТекстЗапроса;
КонецФункции

Процедура ИнтеграцияВЕТИСРТ_ОбработкаЗаполненияДокументаИсходящаяТранспортнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")Тогда 
		ЗаполнитьИсходящуюТранспортнуюОперациюВЕТИСНаОснованииВозвратаТоваровПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")Тогда 
		ЗаполнитьИсходящуюТранспортнуюОперациюВЕТИСНаОснованииПередачиТоваровМеждуОрганизациями(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещениеТоваров")Тогда 
		ЗаполнитьИсходящуюТранспортнуюОперациюВЕТИСНаОснованииПеремещенияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваров")Тогда 
		ЗаполнитьИсходящуюТранспортнуюОперациюВЕТИСНаОснованииРеализацииТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИсходящуюТранспортнуюОперациюВЕТИСНаОснованииВозвратаТоваровПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокОснование.Ссылка КАК ДокументОснование,
	|	ДокОснование.Номер КАК НомерТТН,
	|	ДокОснование.Дата КАК ДатаТТН,
	|	НЕ ДокОснование.Проведен КАК ЕстьОшибкиПроведен,
	|	ДокОснование.Ответственный КАК Ответственный,
	|	ДокОснование.Контрагент КАК Грузополучатель,
	|	ДокОснование.Организация КАК Грузоотправитель,
	|	ДокОснование.Магазин КАК СкладОтправитель,
	|	ДокОснование.Магазин КАК СкладПолучатель
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ДокОснование
	|ГДЕ
	|	ДокОснование.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуИсходящейТранспортнойОперации(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличнуюЧастьИсходящейТранспортнойОперации(ДокументОбъект, ДанныеЗаполнения, "ВозвратТоваровПоставщику", Истина);
	
КонецПроцедуры

Процедура ЗаполнитьИсходящуюТранспортнуюОперациюВЕТИСНаОснованииПередачиТоваровМеждуОрганизациями(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокОснование.Ссылка                КАК ДокументОснование,
	|	ДокОснование.Номер                 КАК НомерТТН,
	|	ДокОснование.Дата                  КАК ДатаТТН,
	|	НЕ ДокОснование.Проведен           КАК ЕстьОшибкиПроведен,
	|	ДокОснование.Ответственный         КАК Ответственный,
	|	ДокОснование.ОрганизацияПолучатель КАК Грузополучатель,
	|	ДокОснование.Организация           КАК Грузоотправитель,
	|	ДокОснование.Магазин               КАК СкладОтправитель,
	|	ДокОснование.Магазин               КАК СкладПолучатель
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДокОснование
	|ГДЕ
	|	ДокОснование.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуИсходящейТранспортнойОперации(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличнуюЧастьИсходящейТранспортнойОперации(ДокументОбъект, ДанныеЗаполнения, "ПередачаТоваровМеждуОрганизациями", Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьИсходящуюТранспортнуюОперациюВЕТИСНаОснованииПеремещенияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка                КАК ДокументОснование,
	|	ПеремещениеТоваров.Номер                 КАК НомерТТН,
	|	ПеремещениеТоваров.Дата                  КАК ДатаТТН,
	|	НЕ ПеремещениеТоваров.Проведен           КАК ЕстьОшибкиПроведен,
	|	ПеремещениеТоваров.Организация           КАК Грузоотправитель,
	|	ПеремещениеТоваров.ОрганизацияПолучатель КАК Грузополучатель,
	|	ПеремещениеТоваров.МагазинОтправитель    КАК СкладОтправитель,
	|	ПеремещениеТоваров.МагазинПолучатель     КАК СкладПолучатель,
	|	ПеремещениеТоваров.Ответственный         КАК Ответственный
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуИсходящейТранспортнойОперации(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличнуюЧастьИсходящейТранспортнойОперации(ДокументОбъект, ДанныеЗаполнения, "ПеремещениеТоваров", Истина);
	
КонецПроцедуры

Процедура ЗаполнитьИсходящуюТранспортнуюОперациюВЕТИСНаОснованииРеализацииТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокОснование.Ссылка                КАК ДокументОснование,
	|	ДокОснование.Номер                 КАК НомерТТН,
	|	ДокОснование.Дата                  КАК ДатаТТН,
	|	НЕ ДокОснование.Проведен           КАК ЕстьОшибкиПроведен,
	|	ДокОснование.Ответственный         КАК Ответственный,
	|	ДокОснование.Контрагент            КАК Грузополучатель,
	|	ДокОснование.Организация           КАК Грузоотправитель,
	|	ДокОснование.Магазин               КАК СкладОтправитель,
	|	ДокОснование.Магазин               КАК СкладПолучатель
	|ИЗ
	|	Документ.РеализацияТоваров КАК ДокОснование
	|ГДЕ
	|	ДокОснование.Ссылка = &ДокументОснование");
	
	ЗаполнитьШапкуИсходящейТранспортнойОперации(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличнуюЧастьИсходящейТранспортнойОперации(ДокументОбъект, ДанныеЗаполнения, "РеализацияТоваров", Истина);
	
КонецПроцедуры

Процедура ИнтеграцияВЕТИСРТ_РассчитатьСтатусОформленияИсходящаяТранспортнаяОперацияВЕТИС(Источник, Отказ) Экспорт 
	
КонецПроцедуры

#КонецОбласти

#Область ВходящаяТранспортнаяОперацияВЕТИС

Процедура ИнтеграцияВЕТИСРТ_РассчитатьСтатусОформленияВходящаяТранспортнаяОперацияВЕТИС(Источник, Отказ) Экспорт
	
	
	
КонецПроцедуры



#КонецОбласти

#КонецОбласти

#Область Прочее

#Область СерииНоменклатуры

// Заполняет реквизит "Серия" в товарной табличной части.
//
// Параметры:
//	ТабличнаяЧасть		- ДанныеФормыКоллекция, ТабличнаяЧасть - Товарная табличная часть объекта.
//	ВыделенныеСтроки	- Массив	- Обрабатываемые строки таблицы.
//	ПараметрыЗаполнения	- Структура	- Состав полей определен в функции 
//										ИнтеграцияВЕТИСПереопределяемый.ПараметрыЗаполненияСерий.
//	СтруктураДействий	- Структура	- Структура с действиями, которые нужно произвести.
//
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//		* ЗаполнениеЗавершено	- Булево, Истина		- Признак успешного выполнения генераций и заполнения серий.
//		* СписокОшибок			- Массив, Неопределено	- Список ошибок.
//
Функция ИнтеграцияВЕТИСРТ_ЗаполнитьСгенерироватьСерии(ТабличнаяЧастьТовары,
									ВыделенныеСтрокиТоваров,
									ПараметрыЗаполнения,
									ТабличнаяЧастьУточнения = Неопределено,
									СтруктураДействий = Неопределено) Экспорт
									
	ПараметрыУказанияСерий = ПараметрыЗаполнения.ПараметрыУказанияСерий;
	Склад = ПараметрыЗаполнения.Склад;
	
	Если СтруктураДействий = Неопределено Тогда
		СтруктураДействий = Новый Структура();
	КонецЕсли;
	
	ПроверитьСериюРассчитатьСтатус = Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерий, Склад);
	
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПроверитьСериюРассчитатьСтатус);
	
	// Инициализация результирующей структуры.
	Результат = Новый Структура("ЗаполнениеЗавершено, СписокОшибок", Ложь, Неопределено);
	
	Запрос = Новый Запрос;
	
	Если ТабличнаяЧастьУточнения = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	"""" КАК ИдентификаторСтроки,
		|	ТаблицаТовары.ИдентификаторПартии КАК ИдентификаторПартии,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Серия КАК Серия,
		|	ТаблицаТовары.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
		|	ТаблицаТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	ЛОЖЬ КАК ЕстьУточнения
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	0 КАК НомерСтроки,
		|	"""" КАК ИдентификаторСтроки,
		|	"""" КАК ИдентификаторПартии,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
		|	0 КАК СтатусУказанияСерий,
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия
		|ПОМЕСТИТЬ ВтУточнения";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ТаблицаТовары.ИдентификаторПартии КАК ИдентификаторПартии,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Серия КАК Серия,
		|	ТаблицаТовары.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
		|	ТаблицаТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	ТаблицаТовары.ЕстьУточнения КАК ЕстьУточнения
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыУточнение.НомерСтроки КАК НомерСтроки,
		|	ТоварыУточнение.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ТоварыУточнение.ИдентификаторПартии КАК ИдентификаторПартии,
		|	ТоварыУточнение.Номенклатура КАК Номенклатура,
		|	ТоварыУточнение.Характеристика КАК Характеристика,
		|	ТоварыУточнение.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	ТоварыУточнение.Серия КАК Серия
		|ПОМЕСТИТЬ ВтУточнения
		|ИЗ
		|	&ТоварыУточнение КАК ТоварыУточнение";
		
	КонецЕсли;
	
	Разделитель = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = ТекстЗапроса + Разделитель;
	
	ТекстЗапроса = 	ТекстЗапроса +
	"ВЫБРАТЬ
	|	ВтТовары.НомерСтроки КАК НомерСтрокиТовары,
	|	ЕСТЬNULL(ВтУточнения.НомерСтроки, 0) КАК НомерСтрокиУточнения,
	|	ВЫБОР
	|		КОГДА ВтТовары.ЕстьУточнения
	|			ТОГДА ЕСТЬNULL(ВтУточнения.ИдентификаторПартии, """""""")
	|		ИНАЧЕ ВтТовары.ИдентификаторПартии
	|	КОНЕЦ КАК ИдентификаторПартии,
	|	ВЫБОР
	|		КОГДА ВтТовары.ЕстьУточнения
	|			ТОГДА ЕСТЬNULL(ВтУточнения.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|		ИНАЧЕ ВтТовары.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ВтТовары.ЕстьУточнения
	|			ТОГДА ЕСТЬNULL(ВтУточнения.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|		ИНАЧЕ ВтТовары.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ВтТовары.ЕстьУточнения
	|			ТОГДА ЕСТЬNULL(ВтУточнения.СтатусУказанияСерий, 0)
	|		ИНАЧЕ ВтТовары.СтатусУказанияСерий
	|	КОНЕЦ КАК СтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ВтТовары.ЕстьУточнения
	|			ТОГДА ЕСТЬNULL(ВтУточнения.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|		ИНАЧЕ ВтТовары.Серия
	|	КОНЕЦ КАК Серия,
	|	ВтТовары.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	ЕСТЬNULL(ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваНачалоПериода, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПроизводства,
	|	ЕСТЬNULL(ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиНачалоПериода, ДАТАВРЕМЯ(1, 1, 1)) КАК ГоденДо,
	|	ВтТовары.ЕстьУточнения
	|		И ВтУточнения.ИдентификаторСтроки ЕСТЬ NULL КАК ОшибкаНетУточнения,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаписиСкладскогоЖурналаВЕТИСПроизводители.Производитель) КАК КоличествоПроизводителей,
	|	ВтТовары.ЕстьУточнения КАК ЕстьУточнения,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьХарактеристики, ЛОЖЬ) КАК НастройкаВидаИспользоватьХарактеристики,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьЗаписьСкладскогоЖурналаВЕТИССерии, ЛОЖЬ) КАК НастройкаВидаИспользоватьЗаписьСкладскогоЖурналаВЕТИССерии,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьДатуПроизводстваСерии, ЛОЖЬ) КАК НастройкаВидаИспользоватьДатуПроизводстваСерии,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСрокГодностиСерии, ЛОЖЬ) КАК НастройкаВидаИспользоватьСрокГодностиСерии,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьИдентификаторПартииВЕТИССерии, ЛОЖЬ) КАК НастройкаВидаИспользоватьИдентификаторПартииВЕТИССерии,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьПроизводителяВЕТИССерии, ЛОЖЬ) КАК НастройкаВидаИспользоватьПроизводителяВЕТИССерии,
	|	ЕСТЬNULL(ВидыНоменклатуры.АвтоматическиГенерироватьСерии, ЛОЖЬ) КАК НастройкаВидаАвтоматическиГенерироватьСерии,
	|	ВидыНоменклатуры.Ссылка КАК ВладелецСерий
	|ПОМЕСТИТЬ ВТОбъединеннаяТаблицаТоваров
	|ИЗ
	|	ВтТовары КАК ВтТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтУточнения КАК ВтУточнения
	|		ПО ВтТовары.ИдентификаторСтроки = ВтУточнения.ИдентификаторСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗаписиСкладскогоЖурналаВЕТИС.Производители КАК ЗаписиСкладскогоЖурналаВЕТИСПроизводители
	|		ПО ВтТовары.ЗаписьСкладскогоЖурнала = ЗаписиСкладскогоЖурналаВЕТИСПроизводители.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗаписиСкладскогоЖурналаВЕТИС КАК ЗаписиСкладскогоЖурналаВЕТИС
	|		ПО ВтТовары.ЗаписьСкладскогоЖурнала = ЗаписиСкладскогоЖурналаВЕТИС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО (ВЫБОР
	|				КОГДА ВтТовары.ЕстьУточнения
	|					ТОГДА ЕСТЬNULL(ВтУточнения.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|				ИНАЧЕ ВтТовары.Номенклатура
	|			КОНЕЦ = СпрНоменклатура.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (СпрНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ВтТовары.ЕстьУточнения
	|			ТОГДА ЕСТЬNULL(ВтУточнения.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|		ИНАЧЕ ВтТовары.Характеристика
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВтТовары.ЕстьУточнения
	|			ТОГДА ЕСТЬNULL(ВтУточнения.Серия, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|		ИНАЧЕ ВтТовары.Серия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВтТовары.ЕстьУточнения
	|			ТОГДА ЕСТЬNULL(ВтУточнения.ИдентификаторПартии, """""""")
	|		ИНАЧЕ ВтТовары.ИдентификаторПартии
	|	КОНЕЦ,
	|	ВтТовары.ЕстьУточнения,
	|	ВтТовары.НомерСтроки,
	|	ЕСТЬNULL(ВтУточнения.НомерСтроки, 0),
	|	ВтТовары.ЕстьУточнения
	|		И ВтУточнения.ИдентификаторСтроки ЕСТЬ NULL,
	|	ВтТовары.ЗаписьСкладскогоЖурнала,
	|	ВЫБОР
	|		КОГДА ВтТовары.ЕстьУточнения
	|			ТОГДА ЕСТЬNULL(ВтУточнения.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|		ИНАЧЕ ВтТовары.Номенклатура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВтТовары.ЕстьУточнения
	|			ТОГДА ЕСТЬNULL(ВтУточнения.СтатусУказанияСерий, 0)
	|		ИНАЧЕ ВтТовары.СтатусУказанияСерий
	|	КОНЕЦ,
	|	ЕСТЬNULL(ЗаписиСкладскогоЖурналаВЕТИС.ДатаПроизводстваНачалоПериода, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(ЗаписиСкладскогоЖурналаВЕТИС.СрокГодностиНачалоПериода, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьХарактеристики, ЛОЖЬ),
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьЗаписьСкладскогоЖурналаВЕТИССерии, ЛОЖЬ),
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьДатуПроизводстваСерии, ЛОЖЬ),
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСрокГодностиСерии, ЛОЖЬ),
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьИдентификаторПартииВЕТИССерии, ЛОЖЬ),
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьПроизводителяВЕТИССерии, ЛОЖЬ),
	|	ЕСТЬNULL(ВидыНоменклатуры.АвтоматическиГенерироватьСерии, ЛОЖЬ),
	|	ВидыНоменклатуры.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОбъединеннаяТаблицаТоваров.НомерСтрокиТовары КАК НомерСтрокиТовары,
	|	ВТОбъединеннаяТаблицаТоваров.НомерСтрокиУточнения КАК НомерСтрокиУточнения,
	|	""ОшибкаНетУточнения"" КАК ТипОшибки,
	|	ЛОЖЬ КАК ЭтоНомерСтрокиУточнений
	|ПОМЕСТИТЬ ВТСтрокиСОшибками
	|ИЗ
	|	ВТОбъединеннаяТаблицаТоваров КАК ВТОбъединеннаяТаблицаТоваров
	|ГДЕ
	|	ВТОбъединеннаяТаблицаТоваров.ОшибкаНетУточнения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТОбъединеннаяТаблицаТоваров.НомерСтрокиТовары,
	|	ВТОбъединеннаяТаблицаТоваров.НомерСтрокиУточнения,
	|	""ОшибкаНетНоменклатуры"",
	|	ВТОбъединеннаяТаблицаТоваров.ЕстьУточнения
	|ИЗ
	|	ВТОбъединеннаяТаблицаТоваров КАК ВТОбъединеннаяТаблицаТоваров
	|ГДЕ
	|	НЕ ВТОбъединеннаяТаблицаТоваров.ОшибкаНетУточнения
	|	И ВТОбъединеннаяТаблицаТоваров.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТОбъединеннаяТаблицаТоваров.НомерСтрокиТовары,
	|	ВТОбъединеннаяТаблицаТоваров.НомерСтрокиУточнения,
	|	""ОшибкаНеНужноГенерировать"",
	|	ВТОбъединеннаяТаблицаТоваров.ЕстьУточнения
	|ИЗ
	|	ВТОбъединеннаяТаблицаТоваров КАК ВТОбъединеннаяТаблицаТоваров
	|ГДЕ
	|	НЕ ВТОбъединеннаяТаблицаТоваров.ОшибкаНетУточнения
	|	И НЕ ВТОбъединеннаяТаблицаТоваров.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВТОбъединеннаяТаблицаТоваров.СтатусУказанияСерий <> 0
	|	И НЕ ВТОбъединеннаяТаблицаТоваров.НастройкаВидаАвтоматическиГенерироватьСерии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТОбъединеннаяТаблицаТоваров.НомерСтрокиТовары,
	|	ВТОбъединеннаяТаблицаТоваров.НомерСтрокиУточнения,
	|	""ОшибкаНетХарактеристики"",
	|	ВТОбъединеннаяТаблицаТоваров.ЕстьУточнения
	|ИЗ
	|	ВТОбъединеннаяТаблицаТоваров КАК ВТОбъединеннаяТаблицаТоваров
	|ГДЕ
	|	НЕ ВТОбъединеннаяТаблицаТоваров.ОшибкаНетУточнения
	|	И НЕ ВТОбъединеннаяТаблицаТоваров.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВТОбъединеннаяТаблицаТоваров.СтатусУказанияСерий <> 0
	|	И ВТОбъединеннаяТаблицаТоваров.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	И ВТОбъединеннаяТаблицаТоваров.НастройкаВидаИспользоватьХарактеристики
	|	И ВТОбъединеннаяТаблицаТоваров.НастройкаВидаАвтоматическиГенерироватьСерии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТОбъединеннаяТаблицаТоваров.НомерСтрокиТовары,
	|	ВТОбъединеннаяТаблицаТоваров.НомерСтрокиУточнения,
	|	""ОшибкаНетЗаписиСкладскогоЖуранала"",
	|	ВТОбъединеннаяТаблицаТоваров.ЕстьУточнения
	|ИЗ
	|	ВТОбъединеннаяТаблицаТоваров КАК ВТОбъединеннаяТаблицаТоваров
	|ГДЕ
	|	НЕ ВТОбъединеннаяТаблицаТоваров.ОшибкаНетУточнения
	|	И НЕ ВТОбъединеннаяТаблицаТоваров.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВТОбъединеннаяТаблицаТоваров.СтатусУказанияСерий <> 0
	|	И (ВТОбъединеннаяТаблицаТоваров.НастройкаВидаИспользоватьЗаписьСкладскогоЖурналаВЕТИССерии
	|			ИЛИ ВТОбъединеннаяТаблицаТоваров.НастройкаВидаИспользоватьДатуПроизводстваСерии
	|			ИЛИ ВТОбъединеннаяТаблицаТоваров.НастройкаВидаИспользоватьСрокГодностиСерии)
	|	И ВТОбъединеннаяТаблицаТоваров.ЗаписьСкладскогоЖурнала = ЗНАЧЕНИЕ(Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка)
	|	И ВТОбъединеннаяТаблицаТоваров.НастройкаВидаАвтоматическиГенерироватьСерии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТОбъединеннаяТаблицаТоваров.НомерСтрокиТовары,
	|	ВТОбъединеннаяТаблицаТоваров.НомерСтрокиУточнения,
	|	""ОшибкаНетДатыПроизводства"",
	|	ВТОбъединеннаяТаблицаТоваров.ЕстьУточнения
	|ИЗ
	|	ВТОбъединеннаяТаблицаТоваров КАК ВТОбъединеннаяТаблицаТоваров
	|ГДЕ
	|	НЕ ВТОбъединеннаяТаблицаТоваров.ОшибкаНетУточнения
	|	И НЕ ВТОбъединеннаяТаблицаТоваров.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВТОбъединеннаяТаблицаТоваров.СтатусУказанияСерий <> 0
	|	И ВТОбъединеннаяТаблицаТоваров.ЗаписьСкладскогоЖурнала <> ЗНАЧЕНИЕ(Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка)
	|	И ВТОбъединеннаяТаблицаТоваров.НастройкаВидаИспользоватьДатуПроизводстваСерии
	|	И ВТОбъединеннаяТаблицаТоваров.ДатаПроизводства = ДАТАВРЕМЯ(1, 1, 1)
	|	И ВТОбъединеннаяТаблицаТоваров.НастройкаВидаАвтоматическиГенерироватьСерии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТОбъединеннаяТаблицаТоваров.НомерСтрокиТовары,
	|	ВТОбъединеннаяТаблицаТоваров.НомерСтрокиУточнения,
	|	""ОшибкаНетГоденДо"",
	|	ВТОбъединеннаяТаблицаТоваров.ЕстьУточнения
	|ИЗ
	|	ВТОбъединеннаяТаблицаТоваров КАК ВТОбъединеннаяТаблицаТоваров
	|ГДЕ
	|	НЕ ВТОбъединеннаяТаблицаТоваров.ОшибкаНетУточнения
	|	И НЕ ВТОбъединеннаяТаблицаТоваров.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВТОбъединеннаяТаблицаТоваров.СтатусУказанияСерий <> 0
	|	И ВТОбъединеннаяТаблицаТоваров.ЗаписьСкладскогоЖурнала <> ЗНАЧЕНИЕ(Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка)
	|	И ВТОбъединеннаяТаблицаТоваров.НастройкаВидаИспользоватьСрокГодностиСерии
	|	И ВТОбъединеннаяТаблицаТоваров.ГоденДо = ДАТАВРЕМЯ(1, 1, 1)
	|	И ВТОбъединеннаяТаблицаТоваров.НастройкаВидаАвтоматическиГенерироватьСерии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТОбъединеннаяТаблицаТоваров.НомерСтрокиТовары,
	|	ВТОбъединеннаяТаблицаТоваров.НомерСтрокиУточнения,
	|	""ОшибкаНетИндентификатораПартии"",
	|	ВТОбъединеннаяТаблицаТоваров.ЕстьУточнения
	|ИЗ
	|	ВТОбъединеннаяТаблицаТоваров КАК ВТОбъединеннаяТаблицаТоваров
	|ГДЕ
	|	НЕ ВТОбъединеннаяТаблицаТоваров.ОшибкаНетУточнения
	|	И НЕ ВТОбъединеннаяТаблицаТоваров.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВТОбъединеннаяТаблицаТоваров.СтатусУказанияСерий <> 0
	|	И ВТОбъединеннаяТаблицаТоваров.НастройкаВидаИспользоватьИдентификаторПартииВЕТИССерии
	|	И ВТОбъединеннаяТаблицаТоваров.ИдентификаторПартии = """"
	|	И ВТОбъединеннаяТаблицаТоваров.НастройкаВидаАвтоматическиГенерироватьСерии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТОбъединеннаяТаблицаТоваров.НомерСтрокиТовары,
	|	ВТОбъединеннаяТаблицаТоваров.НомерСтрокиУточнения,
	|	""ОшибкаНетПроизводителя"",
	|	ВТОбъединеннаяТаблицаТоваров.ЕстьУточнения
	|ИЗ
	|	ВТОбъединеннаяТаблицаТоваров КАК ВТОбъединеннаяТаблицаТоваров
	|ГДЕ
	|	НЕ ВТОбъединеннаяТаблицаТоваров.ОшибкаНетУточнения
	|	И НЕ ВТОбъединеннаяТаблицаТоваров.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВТОбъединеннаяТаблицаТоваров.СтатусУказанияСерий <> 0
	|	И ВТОбъединеннаяТаблицаТоваров.НастройкаВидаИспользоватьПроизводителяВЕТИССерии
	|	И ВТОбъединеннаяТаблицаТоваров.КоличествоПроизводителей = 0
	|	И ВТОбъединеннаяТаблицаТоваров.ЗаписьСкладскогоЖурнала <> ЗНАЧЕНИЕ(Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка)
	|	И ВТОбъединеннаяТаблицаТоваров.НастройкаВидаАвтоматическиГенерироватьСерии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТОбъединеннаяТаблицаТоваров.НомерСтрокиТовары,
	|	ВТОбъединеннаяТаблицаТоваров.НомерСтрокиУточнения,
	|	""ОшибкаМногоПроизводетелей"",
	|	ВТОбъединеннаяТаблицаТоваров.ЕстьУточнения
	|ИЗ
	|	ВТОбъединеннаяТаблицаТоваров КАК ВТОбъединеннаяТаблицаТоваров
	|ГДЕ
	|	НЕ ВТОбъединеннаяТаблицаТоваров.ОшибкаНетУточнения
	|	И НЕ ВТОбъединеннаяТаблицаТоваров.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВТОбъединеннаяТаблицаТоваров.СтатусУказанияСерий <> 0
	|	И ВТОбъединеннаяТаблицаТоваров.НастройкаВидаИспользоватьПроизводителяВЕТИССерии
	|	И ВТОбъединеннаяТаблицаТоваров.КоличествоПроизводителей > 1
	|	И ВТОбъединеннаяТаблицаТоваров.ЗаписьСкладскогоЖурнала <> ЗНАЧЕНИЕ(Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка)
	|	И ВТОбъединеннаяТаблицаТоваров.НастройкаВидаАвтоматическиГенерироватьСерии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОбъединеннаяТаблицаТоваров.НомерСтрокиТовары КАК НомерСтрокиТовары,
	|	ВТОбъединеннаяТаблицаТоваров.НомерСтрокиУточнения КАК НомерСтрокиУточнения,
	|	ВТОбъединеннаяТаблицаТоваров.ЕстьУточнения КАК ЕстьУточнения,
	|	"""" КАК Номер,
	|	ВЫБОР
	|		КОГДА ВТОбъединеннаяТаблицаТоваров.НастройкаВидаИспользоватьЗаписьСкладскогоЖурналаВЕТИССерии
	|			ТОГДА ВТОбъединеннаяТаблицаТоваров.ЗаписьСкладскогоЖурнала
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаписьСкладскогоЖурналаВЕТИС,
	|	ВЫБОР
	|		КОГДА ВТОбъединеннаяТаблицаТоваров.НастройкаВидаИспользоватьПроизводителяВЕТИССерии
	|			ТОГДА ЗаписиСкладскогоЖурналаВЕТИСПроизводители.Производитель
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПредприятияВЕТИС.ПустаяСсылка)
	|	КОНЕЦ КАК ПроизводительВЕТИС,
	|	ВЫБОР
	|		КОГДА ВТОбъединеннаяТаблицаТоваров.НастройкаВидаИспользоватьИдентификаторПартииВЕТИССерии
	|			ТОГДА ВТОбъединеннаяТаблицаТоваров.ИдентификаторПартии
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИдентификаторПартииВЕТИС,
	|	ВЫБОР
	|		КОГДА ВТОбъединеннаяТаблицаТоваров.НастройкаВидаИспользоватьСрокГодностиСерии
	|			ТОГДА ВТОбъединеннаяТаблицаТоваров.ГоденДо
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ГоденДо,
	|	ВЫБОР
	|		КОГДА ВТОбъединеннаяТаблицаТоваров.НастройкаВидаИспользоватьДатуПроизводстваСерии
	|			ТОГДА ВТОбъединеннаяТаблицаТоваров.ДатаПроизводства
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаПроизводства,
	|	ВТОбъединеннаяТаблицаТоваров.ВладелецСерий КАК ВладелецСерий
	|ПОМЕСТИТЬ ВТРеквизитыСерий
	|ИЗ
	|	ВТОбъединеннаяТаблицаТоваров КАК ВТОбъединеннаяТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗаписиСкладскогоЖурналаВЕТИС.Производители КАК ЗаписиСкладскогоЖурналаВЕТИСПроизводители
	|		ПО ВТОбъединеннаяТаблицаТоваров.ЗаписьСкладскогоЖурнала = ЗаписиСкладскогоЖурналаВЕТИСПроизводители.Ссылка
	|			И (ВТОбъединеннаяТаблицаТоваров.НастройкаВидаИспользоватьПроизводителяВЕТИССерии)
	|ГДЕ
	|	НЕ (ВТОбъединеннаяТаблицаТоваров.НомерСтрокиТовары, ВТОбъединеннаяТаблицаТоваров.НомерСтрокиУточнения) В
	|				(ВЫБРАТЬ
	|					ВТСтрокиСОшибками.НомерСтрокиТовары,
	|					ВТСтрокиСОшибками.НомерСтрокиУточнения
	|				ИЗ
	|					ВТСтрокиСОшибками)
	|	И ВТОбъединеннаяТаблицаТоваров.СтатусУказанияСерий <> 0
	|	И ВТОбъединеннаяТаблицаТоваров.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРеквизитыСерий.НомерСтрокиТовары КАК НомерСтрокиТовары,
	|	ВТРеквизитыСерий.НомерСтрокиУточнения КАК НомерСтрокиУточнения,
	|	ВТРеквизитыСерий.ЕстьУточнения КАК ЕстьУточнения,
	|	ВТРеквизитыСерий.Номер КАК Номер,
	|	ВТРеквизитыСерий.ЗаписьСкладскогоЖурналаВЕТИС КАК ЗаписьСкладскогоЖурналаВЕТИС,
	|	ВТРеквизитыСерий.ПроизводительВЕТИС КАК ПроизводительВЕТИС,
	|	ВТРеквизитыСерий.ИдентификаторПартииВЕТИС КАК ИдентификаторПартииВЕТИС,
	|	ВТРеквизитыСерий.ГоденДо КАК ГоденДо,
	|	ВТРеквизитыСерий.ДатаПроизводства КАК ДатаПроизводства,
	|	ВТРеквизитыСерий.ВладелецСерий КАК ВидНоменклатуры,
	|	ЕСТЬNULL(СерииНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК Серия
	|ИЗ
	|	ВТРеквизитыСерий КАК ВТРеквизитыСерий
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО ВТРеквизитыСерий.Номер = СерииНоменклатуры.Номер
	|			И ВТРеквизитыСерий.ЗаписьСкладскогоЖурналаВЕТИС = СерииНоменклатуры.ЗаписьСкладскогоЖурналаВЕТИС
	|			И ВТРеквизитыСерий.ПроизводительВЕТИС = СерииНоменклатуры.ПроизводительВЕТИС
	|			И ВТРеквизитыСерий.ИдентификаторПартииВЕТИС = СерииНоменклатуры.ИдентификаторПартииВЕТИС
	|			И ВТРеквизитыСерий.ГоденДо = СерииНоменклатуры.ГоденДо
	|			И ВТРеквизитыСерий.ДатаПроизводства = СерииНоменклатуры.ДатаПроизводства
	|			И ВТРеквизитыСерий.ВладелецСерий = СерииНоменклатуры.ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтрокиСОшибками.НомерСтрокиТовары КАК НомерСтрокиТовары,
	|	ВТСтрокиСОшибками.НомерСтрокиУточнения КАК НомерСтрокиУточнения,
	|	ВТСтрокиСОшибками.ТипОшибки КАК ТипОшибки,
	|	ВТСтрокиСОшибками.ЭтоНомерСтрокиУточнений КАК ЭтоНомерСтрокиУточнений
	|ИЗ
	|	ВТСтрокиСОшибками КАК ВТСтрокиСОшибками
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТовары,
	|	НомерСтрокиУточнения";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТаблицаТовары", ТабличнаяЧастьТовары.Выгрузить(ВыделенныеСтрокиТоваров));
	
	Если ТабличнаяЧастьУточнения <> Неопределено Тогда 	
		Запрос.УстановитьПараметр("ТоварыУточнение", ТабличнаяЧастьУточнения.Выгрузить());
	КонецЕсли;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаОшибок         = РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выгрузить();
	ТаблицаУстановкиСерий = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-1].Выгрузить();
	
	Результат.ЗаполнениеЗавершено = ТаблицаОшибок.Количество() = 0;
	
	Для Каждого СтрТабл из ТаблицаОшибок Цикл
		
		Если СтрТабл.ТипОшибки = "ОшибкаНетУточнения" Тогда
			ПолеОшибки = "Объект.Товары.НомерСтроки";
			
			ТекстСообщения = НСтр("ru = 'По строке %НомерСтроки% указано, что должны быть уточнения, но строки уточнения не введены.'");
			
		Иначе
			
			Если СтрТабл.ТипОшибки = "ОшибкаНетНоменклатуры" Тогда
				
				Если СтрТабл.ЭтоНомерСтрокиУточнений Тогда
					ПолеОшибки = "Объект.Товары.НомерСтроки";
					ТекстСообщения = НСтр("ru = 'В одной из строк уточнения по строке %НомерСтроки% не указана номенклатура.'");
				Иначе
					ПолеОшибки = "Объект.Товары.Номенклатура";
					ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% не указана номенклатура.'");
				КонецЕсли;
				
			ИначеЕсли СтрТабл.ТипОшибки = "ОшибкаНеНужноГенерировать" Тогда
				
				Если СтрТабл.ЭтоНомерСтрокиУточнений Тогда
					ПолеОшибки = "Объект.Товары.НомерСтроки";
					ТекстСообщения = НСтр("ru = 'В одной из строк уточнения по строке %НомерСтроки% выбрана номенклатура, по которой не настроена автоматическая генерация серий.'");
				Иначе
					ПолеОшибки = "Объект.Товары.Номенклатура";
					ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% выбрана номенклатура, по которой не настроена автоматическая генерация серий'");
				КонецЕсли;
				
			ИначеЕсли СтрТабл.ТипОшибки = "ОшибкаНетХарактеристики" Тогда
				
				Если СтрТабл.ЭтоНомерСтрокиУточнений Тогда
					ПолеОшибки = "Объект.Товары.НомерСтроки";
					ТекстСообщения = НСтр("ru = 'В одной из строк уточнения по строке %НомерСтроки% не указана характеристика - серии нужно генерировать после указания характериски.'");
				Иначе
					ПолеОшибки = "Объект.Товары.Характеристика";
					ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% не указана характеристика - серии нужно генерировать после указания характериски.'");
				КонецЕсли;
				
			ИначеЕсли СтрТабл.ТипОшибки = "ОшибкаНетЗаписиСкладскогоЖуранала" Тогда
				
				ПолеОшибки = "Объект.Товары.ЗаписьСкладскогоЖурнала";
				ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% не указана запись складского журнала ВЕТИС.'");

			ИначеЕсли СтрТабл.ТипОшибки = "ОшибкаНетДатыПроизводства" Тогда
				
				ПолеОшибки = "Объект.Товары.ЗаписьСкладскогоЖурнала";
				ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% не указана запись складского журнала ВЕТИС, в которой не заполнена дата начала производства. Создайте серию вручную.'");
				
			ИначеЕсли СтрТабл.ТипОшибки = "ОшибкаНетГоденДо" Тогда
				
				ПолеОшибки = "Объект.Товары.ЗаписьСкладскогоЖурнала";
				ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% указана запись складского журнала ВЕТИС, в которой не заполнена дата начала периода срока годности. Создайте серию вручную.'");
				
			ИначеЕсли СтрТабл.ТипОшибки = "ОшибкаНетПроизводителя" Тогда
				
				ПолеОшибки = "Объект.Товары.ЗаписьСкладскогоЖурнала";
				ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% указана запись складского журнала ВЕТИС, в которой не заполнен производитель. Создайте серию вручную.'");
				
			ИначеЕсли СтрТабл.ТипОшибки = "ОшибкаМногоПроизводетелей" Тогда
				
				ПолеОшибки = "Объект.Товары.ЗаписьСкладскогоЖурнала";
				ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% указана запись складского журнала ВЕТИС, в которой указано более одного производителя. Создайте серию вручную.'");
				
			ИначеЕсли СтрТабл.ТипОшибки = "ОшибкаНетИндентификатораПартии" Тогда
				
				Если СтрТабл.ЭтоНомерСтрокиУточнений Тогда
					ПолеОшибки = "Объект.Товары.НомерСтроки";
					ТекстСообщения = НСтр("ru = 'В одной из строк уточнения по строке %НомерСтроки% не указан индентификатор партии ВЕТИС.'");
				Иначе
					ПолеОшибки = "Объект.Товары.ИдентификаторПартии";
					ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% не указан индентификатор партии ВЕТИС.'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрТабл.НомерСтрокиТовары);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Результат.СписокОшибок, ПолеОшибки, ТекстСообщения, Неопределено, СтрТабл.НомерСтрокиТовары - 1);
	КонецЦикла;
	
	СозданныеСерии = Новый ТаблицаЗначений;
	СозданныеСерии.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	СозданныеСерии.Колонки.Добавить("ВидНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"));
	СозданныеСерии.Колонки.Добавить("ЗаписьСкладскогоЖурналаВЕТИС", Новый ОписаниеТипов("СправочникСсылка.ЗаписиСкладскогоЖурналаВЕТИС"));
	СозданныеСерии.Колонки.Добавить("ПроизводительВЕТИС", Новый ОписаниеТипов("СправочникСсылка.ПредприятияВЕТИС"));
	СозданныеСерии.Колонки.Добавить("ИдентификаторПартииВЕТИС", Новый ОписаниеТипов("Строка"));
	СозданныеСерии.Колонки.Добавить("ГоденДо", Новый ОписаниеТипов("Дата"));
	СозданныеСерии.Колонки.Добавить("ДатаПроизводства", Новый ОписаниеТипов("Дата"));
	
	ПоляПоиска = "ЗаписьСкладскогоЖурналаВЕТИС,ПроизводительВЕТИС,ИдентификаторПартииВЕТИС,ГоденДо,ДатаПроизводства";
	
	СозданныеСерии.Индексы.Добавить(ПоляПоиска);
	
	СтруктураОтбора = Новый Структура(ПоляПоиска);
	
	Для Каждого СтрТабл из ТаблицаУстановкиСерий Цикл
		
		Если ЗначениеЗаполнено(СтрТабл.Серия) Тогда
			Серия = СтрТабл.Серия;
		Иначе
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрТабл);
			НайденныеСтроки = СозданныеСерии.НайтиСтроки(СтруктураОтбора);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Серия = НайденныеСтроки[0].Серия;
			Иначе
				
				Серия = СоздатьСерию(СтрТабл, Результат);
				
				Если Не ЗначениеЗаполнено(Серия) Тогда
					Результат.ЗаполнениеЗавершено = Ложь;
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = СозданныеСерии.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрТабл);
				НоваяСтрока.Серия = Серия;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрТабл.ЕстьУточнения Тогда
			СтрокаТЧ = ТабличнаяЧастьУточнения[СтрТабл.НомерСтрокиУточнения - 1];
		Иначе
			СтрокаТЧ = ТабличнаяЧастьТовары[СтрТабл.НомерСтрокиТовары - 1];
		КонецЕсли;
		
		СтрокаТЧ.Серия = Серия;
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(СтрокаТЧ, СтруктураДействий, Неопределено);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьСерию(Реквизиты, Результат)
	
	СерияСсылка = Справочники.СерииНоменклатуры.ПустаяСсылка();
	
	Попытка
		
		НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
		НоваяСерия.Заполнить(Реквизиты);
		НоваяСерия.Записать();
		
		СерияСсылка = НоваяСерия.Ссылка;
		
	Исключение
		ПолеОшибки = "Объект.Товары.Серия";
		ТекстСообщения = НСтр("ru = 'Не удалось сгенерировать серию по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Результат.СписокОшибок, ПолеОшибки, ТекстСообщения,
			Неопределено);
		
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.СерииНоменклатуры,
			НоваяСерия.Ссылка,
			ТекстСообщения);
	КонецПопытки;
		
	Возврат СерияСсылка;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецОбласти

