////////////////////////////////////////////////////////////////////////////////
// СкидкиНаценкиСерверПереопределяемый: содержит ряд функций и процедур,
// используемых для расчета скидок и обработки связанных со скидками объектов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс


/////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСЧЕТА СКИДОК

// Процедура выполняет расчет скидок по документу.
// Вызывается из форм документов.
//
Функция Рассчитать(Объект, ВходныеПараметры) Экспорт
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		ВходныеПараметры.Вставить("СписокОдноразовыхКодов", Объект.ПредъявленныеКодыОднократныхСкидок.Выгрузить().ВыгрузитьКолонку("КодСкидки"));
		ДеревоСкидок = РассчитатьПоДокументу(Объект, ВходныеПараметры, "ЧекККМ");
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		
		ДеревоСкидок = РассчитатьПоДокументу(Объект, ВходныеПараметры, "РеализацияТоваров");
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		ВходныеПараметры.Вставить("СписокОдноразовыхКодов", Объект.ПредъявленныеКодыОднократныхСкидок.Выгрузить().ВыгрузитьКолонку("КодСкидки"));
		ДеревоСкидок = РассчитатьПоДокументу(Объект, ВходныеПараметры, "ЗаказПокупателя");
		
	КонецЕсли;
	
	Если ВходныеПараметры.Свойство("СведенияДокумента") Тогда
		ДеревоСкидок.Вставить("СведенияДокумента", ВходныеПараметры.СведенияДокумента);
	КонецЕсли;
	
	Возврат ДеревоСкидок;
	
КонецФункции

// Получает сумму накопления по карте при печати чека.
Функция СуммаНакопленияПоКартеДляПечатиЧека(РеквизитыДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Сумма = 0;
	ДатаНачала = Дата(1, 1, 1, 0, 0, 0);
	ЕстьОшибкиДисконтногоСервера = Ложь;
	Если РеквизитыДокумента.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный Тогда
		ДатаОкончания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДокумента.ОтчетОРозничныхПродажах, "Дата");
	Иначе
		Если РеквизитыДокумента.Ссылка.Пустая() Тогда
			ДатаОкончания = ТекущаяДатаСеанса();
		Иначе
			ДатаОкончания = РеквизитыДокумента.Дата;
		КонецЕсли;
	КонецЕсли;
	ИспользоватьДисконтныйСервер = ПолучитьФункциональнуюОпцию("ИспользоватьДисконтныйСервер");
	Если ИспользоватьДисконтныйСервер Тогда
		МассивКарт = Новый Массив;
		МассивКарт.Добавить(РеквизитыДокумента.ДисконтнаяКарта);
		ДопПараметры = ДисконтныйСервер.СтруктураДопПараметровЗапросаОНакопленияхДисконтномуСерверу();
		ДопПараметры.ДатаНачала = ДатаНачала; 
		ДопПараметры.ДатаОкончания = ДатаОкончания;
		ДопПараметры.Регистратор = РеквизитыДокумента.Ссылка;
		ДанныеНакоплений = ДисконтныйСервер.ДанныеНакопленийПоКарте(МассивКарт, ДопПараметры, ЕстьОшибкиДисконтногоСервера);
		Сумма = ДанныеНакоплений.СуммаНакопления;
	Иначе
		ТаблицаИсторииКарт = МаркетинговыеАкцииСервер.ПолучитьРасширеннуюИсториюДисконтнойКарты(ДатаОкончания, РеквизитыДокумента.ДисконтнаяКарта, Ложь);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ПродажиПоДисконтнымКартамОбороты.Сумма), 0) КАК Сумма
		|ИЗ
		|	РегистрНакопления.ПродажиПоДисконтнымКартам КАК ПродажиПоДисконтнымКартамОбороты
		|ГДЕ ПродажиПоДисконтнымКартамОбороты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ПродажиПоДисконтнымКартамОбороты.ДисконтнаяКарта В (&ДисконтныеКарты)
		|	И ПродажиПоДисконтнымКартамОбороты.Регистратор <> &Регистратор";
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
		Запрос.УстановитьПараметр("ДисконтныеКарты", ТаблицаИсторииКарт.ВыгрузитьКолонку("Карта"));
		Запрос.УстановитьПараметр("Регистратор", РеквизитыДокумента.Ссылка);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Сумма = Сумма + Выборка.Сумма;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если (НЕ ЕстьОшибкиДисконтногоСервера)
		И (НЕ РеквизитыДокумента.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный) Тогда
		ЗапросТовары = Новый Запрос;
		ЗапросТовары.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(&Коэффициент * ТаблицаТовары.Сумма), 0) КАК Сумма
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка";
		ЗапросТовары.УстановитьПараметр("Ссылка", РеквизитыДокумента.Ссылка);
		ЗапросТовары.УстановитьПараметр("Коэффициент", ?(РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, -1, 1));
		ВыборкаТовары = ЗапросТовары.Выполнить().Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			Сумма = Сумма + ВыборкаТовары.Сумма;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Сумма;
	
КонецФункции

// Процедура выполняет перенос строк из табличной части объекта "Подарки"
// в табличную часть "Товары".
Процедура ПеренестиСкидкиПодаркиВТовары(Объект, ЦенаВключаетНДС, ПримененныеСкидкиНаценки = Неопределено, КоличествоПеренесенных = 0, ВыводитьСообщения = Истина, КонтролироватьВидНалога = Ложь) Экспорт
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Подарки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КэшированныеЗначения = Новый Структура;
	ТаблицаСтрокПереносимыхПодарков = Объект.Подарки.Выгрузить();
	МассивУдаляемыхСтрок = Новый Массив;
	Если КонтролироватьВидНалога Тогда
		ВидНалогаВСтроках = Объект.Товары[0].ВидНалога;
		ОрганизацияВСтроках = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Товары[0].Склад, "Организация");
		ТаблицаСтрокПереносимыхПодарков.Колонки.Добавить("ВидНалога");
	КонецЕсли;
	
	Для Каждого СтрокаПодарка Из ТаблицаСтрокПереносимыхПодарков Цикл
		Учитывать = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПодарка.СкидкаНаценка, "УчитыватьПодарокКакПродажу");
		УдалятьСтроку = Истина;
		СтрокаСообщения = "";
		Если Учитывать = Истина Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаПодарка.СкидкаНаценка) Тогда
				СтрокаСообщения = НСтр("ru = 'Подарок в строке %1 нельзя учесть как продажу: не заполнена скидка'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.НомерСтроки);
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаПодарка.Номенклатура) Тогда
				СтрокаСообщения = НСтр("ru = 'Подарок ""%1"" нельзя учесть как продажу: не заполнена номенклатура'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.СкидкаНаценка);
			ИначеЕсли СтрокаПодарка.Количество <= 0 Тогда
				СтрокаСообщения = НСтр("ru = 'Подарок ""%1"" нельзя учесть как продажу: не корректно заполнено количество'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.Номенклатура);
			ИначеЕсли СтрокаПодарка.Сумма <= 0 Тогда
				СтрокаСообщения = НСтр("ru = 'Подарок ""%1"" нельзя учесть как продажу: не корректно заполнена сумма'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.Номенклатура);
			Иначе
				РеквизитыПродукции = Новый Структура("АлкогольнаяПродукция, ТабачнаяПродукция, ОбувнаяПродукция");
				ЗначенияПродукции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаПодарка.Номенклатура, РеквизитыПродукции);
				Если ЗначенияПродукции.АлкогольнаяПродукция = Истина Тогда
					СтрокаСообщения = НСтр("ru = 'Подарок ""%1"" нельзя учесть как продажу: для алкогольной продукции операция не поддерживается'");
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.Номенклатура);
				ИначеЕсли ЗначенияПродукции.ТабачнаяПродукция = Истина Тогда
					СтрокаСообщения = НСтр("ru = 'Подарок ""%1"" нельзя учесть как продажу: для табачной продукции операция не поддерживается'");
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.Номенклатура);
				ИначеЕсли ЗначенияПродукции.ОбувнаяПродукция = Истина Тогда
					СтрокаСообщения = НСтр("ru = 'Подарок ""%1"" нельзя учесть как продажу: для обувной продукции операция не поддерживается'");
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.Номенклатура);
				ИначеЕсли КонтролироватьВидНалога Тогда
					ОрганизацияПодарка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПодарка.Склад, "Организация");
					Если ОрганизацияПодарка = ОрганизацияВСтроках Тогда
						СтруктураПараметровНалога = Новый Структура;
						СтруктураПараметровНалога.Вставить("Дата", Объект.Дата);
						СтруктураПараметровНалога.Вставить("Магазин", Объект.Магазин);
						СтруктураПараметровНалога.Вставить("Организация", ОрганизацияПодарка);
						
						СтруктураДействий = Новый Структура;
						СтруктураДействий.Вставить("ЗаполнитьВидНалога", СтруктураПараметровНалога);
						
						ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьВидНалогаПродажиВСтрокеТЧСервер(СтрокаПодарка, СтруктураДействий, КэшированныеЗначения);
						Если СтрокаПодарка.ВидНалога = ВидНалогаВСтроках Тогда
							УдалятьСтроку = Ложь;
						Иначе
							СтрокаСообщения = НСтр("ru = 'Подарок ""%1"" нельзя учесть как продажу: не совпадает система налогообложения с товарами'");
							СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.Номенклатура);
						КонецЕсли;
					Иначе
						СтрокаСообщения = НСтр("ru = 'Подарок ""%1"" нельзя учесть как продажу: не совпадают организации продаж'");
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.Номенклатура);
					КонецЕсли;
				Иначе
					УдалятьСтроку = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если УдалятьСтроку Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаПодарка);
			Если ВыводитьСообщения И ЗначениеЗаполнено(СтрокаСообщения) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из МассивУдаляемыхСтрок Цикл
		ТаблицаСтрокПереносимыхПодарков.Удалить(ЭлементМассива);
	КонецЦикла;
	
	Если ТаблицаСтрокПереносимыхПодарков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТоварыИтогСумма = Объект.Товары.Итог("Сумма");
	ПодаркиИтогСумма = ТаблицаСтрокПереносимыхПодарков.Итог("Сумма");
	СуммаТоваровНеУчаствующихВРаспределении = 0;
	
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
		
		Если СтрокаТоваров.ПродажаПодарка
			ИЛИ СтрокаТоваров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
			ИЛИ ЗначениеЗаполнено(СтрокаТоваров.ДоговорПлатежногоАгента) Тогда
			
			СуммаТоваровНеУчаствующихВРаспределении = СуммаТоваровНеУчаствующихВРаспределении + СтрокаТоваров.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщаяСумма = ТоварыИтогСумма - СуммаТоваровНеУчаствующихВРаспределении;
	
	Если ПодаркиИтогСумма > ОбщаяСумма Тогда
		Если ВыводитьСообщения Тогда
			СтрокаСообщения = НСтр("ru = 'Подарки нельзя учесть как продажу: сумма подарков превышает итоговую сумму продажи'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрокаСообщения);
		КонецЕсли;
		Возврат;
	ИначеЕсли ПодаркиИтогСумма = ОбщаяСумма Тогда
		Если ВыводитьСообщения Тогда
			СтрокаСообщения = НСтр("ru = 'Подарки нельзя учесть как продажу: сумма подарков совпадает с итоговой суммой продажи'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрокаСообщения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаПодарка Из ТаблицаСтрокПереносимыхПодарков Цикл
		
		СуммаСкидкиКРаспределению = СтрокаПодарка.Сумма;
		ОбщаяСумма = ТоварыИтогСумма - СуммаТоваровНеУчаствующихВРаспределении;
		СтрокаМаксимальнойСуммы = Неопределено;
		
		Для Каждого СтрокаТоваров Из Объект.Товары Цикл
			
			Если СтрокаТоваров.ПродажаПодарка 
				ИЛИ СтрокаТоваров.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
				ИЛИ ЗначениеЗаполнено(СтрокаТоваров.ДоговорПлатежногоАгента) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОбщаяСумма <> 0 Тогда
				СуммаСкидки = Окр(СтрокаТоваров.Сумма * (СуммаСкидкиКРаспределению / ОбщаяСумма), 2); 
			Иначе
				СуммаСкидки = 0;
			КонецЕсли;
			
			СтрокаСкидок = Объект.СкидкиНаценки.Добавить();
			СтрокаСкидок.КлючСвязи = СтрокаТоваров.КлючСвязи;
			СтрокаСкидок.СкидкаНаценка = СтрокаПодарка.СкидкаНаценка;
			СтрокаСкидок.Сумма = СуммаСкидки;
			
			Если НЕ ПримененныеСкидкиНаценки = Неопределено Тогда
				
				СтрокаТаблицыСкидок = ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыСкидок, СтрокаСкидок);
				
			КонецЕсли;
			
			СтрокаТоваров.СуммаАвтоматическойСкидки = СтрокаТоваров.СуммаАвтоматическойСкидки + СуммаСкидки;
			
			СуммаБезСкидки = СтрокаТоваров.КоличествоУпаковок * СтрокаТоваров.Цена;
			
			СтрокаТоваров.ПроцентАвтоматическойСкидки = ?(СуммаБезСкидки = 0, 0 , Окр(100 * СтрокаТоваров.СуммаАвтоматическойСкидки / СуммаБезСкидки, 2));
			
			СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению - СтрокаСкидок.Сумма;
			ОбщаяСумма = ОбщаяСумма - СтрокаТоваров.Сумма;
			
			Если СтрокаМаксимальнойСуммы = Неопределено 
				ИЛИ СтрокаТоваров.Сумма > СтрокаМаксимальнойСуммы.Сумма Тогда
				СтрокаМаксимальнойСуммы = СтрокаТоваров;
			КонецЕсли;
			СтрокаТоваров.Сумма = СтрокаТоваров.Сумма - СуммаСкидки;
			
		КонецЦикла;
		
		Если СуммаСкидкиКРаспределению <> 0 И СтрокаМаксимальнойСуммы <> Неопределено Тогда
			СтрокаМаксимальнойСуммы.СуммаАвтоматическойСкидки = СтрокаМаксимальнойСуммы.СуммаАвтоматическойСкидки + СуммаСкидкиКРаспределению;
			СтрокаМаксимальнойСуммы.Сумма = СтрокаМаксимальнойСуммы.Сумма - СуммаСкидкиКРаспределению;
			СуммаБезСкидки = СтрокаМаксимальнойСуммы.КоличествоУпаковок * СтрокаМаксимальнойСуммы.Цена;
			СтрокаМаксимальнойСуммы.ПроцентАвтоматическойСкидки = ?(СуммаБезСкидки = 0, 0 , Окр(100 * СтрокаМаксимальнойСуммы.СуммаАвтоматическойСкидки / СуммаБезСкидки, 2));
		КонецЕсли;
		
		// итоговая сумма товаров уменьшилась
		ТоварыИтогСумма = Объект.Товары.Итог("Сумма");
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для Каждого СтрокаПодарка Из ТаблицаСтрокПереносимыхПодарков Цикл
		
		КоличествоПеренесенных = КоличествоПеренесенных + 1;
		
		СтрокаТоваров = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТоваров, СтрокаПодарка);
		СтрокаТоваров.КлючСвязи = 0;
		СтрокаТоваров.ПродажаПодарка = Истина;
		Если СтрокаТоваров.Свойство("Организация") Тогда
			СтрокаТоваров.Организация = ОрганизацияВСтроках;
		КонецЕсли;
		
		Если КонтролироватьВидНалога Тогда
			СтруктураПараметровСтавкиНДС = Новый Структура;
			СтруктураПараметровСтавкиНДС.Вставить("Дата", Объект.Дата);
			СтруктураПараметровСтавкиНДС.Вставить("Организация", ОрганизацияВСтроках);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
			
			ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтавкуНДСВСтрокеСкладВСтрокеТЧСервер(СтрокаТоваров, СтруктураДействий, КэшированныеЗначения);
		Иначе
			СтруктураПараметровСтавкиНДС = Новый Структура;
			СтруктураПараметровСтавкиНДС.Вставить("Дата", Объект.Дата);
			СтруктураПараметровСтавкиНДС.Вставить("Склад", Объект.Склад);
			СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", СтруктураПараметровСтавкиНДС);
			
			ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтавкуНДСВСтрокеСкладВШапкеТЧСервер(СтрокаТоваров, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, СтрокаТоваров, "КлючСвязи");
		
		МассивУдаляемыхСтрок.Добавить(Объект.Подарки[СтрокаПодарка.НомерСтроки - 1]);
		
	КонецЦикла;
	
	ЕстьСерииПодарков = Объект.Свойство("СерииПодарков") И Объект.СерииПодарков.Количество() > 0;
	Для Каждого ЭлементМассива Из МассивУдаляемыхСтрок Цикл
		
		Если ЕстьСерииПодарков Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("КлючСвязи", ЭлементМассива.КлючСвязи);
			СтрокиСерий = Объект.СерииПодарков.НайтиСтроки(СтруктураПоиска);
			МассивУдаляемыхСерий = Новый Массив;
			Если СтрокиСерий.Количество() = 0 Тогда
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номенклатура", ЭлементМассива.Номенклатура);
				СтруктураПоиска.Вставить("Характеристика", ЭлементМассива.Характеристика);
				СтрокиСерий = Объект.СерииПодарков.НайтиСтроки(СтруктураПоиска);
			КонецЕсли;
			Для Каждого СтрокаСерии Из СтрокиСерий Цикл
				МассивУдаляемыхСерий.Добавить(СтрокаСерии);
				НоваяСтрока = Объект.Серии.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерии);
			КонецЦикла;
			Для Каждого УдаляемаяСерия Из МассивУдаляемыхСерий Цикл
				Объект.СерииПодарков.Удалить(УдаляемаяСерия);
			КонецЦикла;
		КонецЕсли;
		Объект.Подарки.Удалить(ЭлементМассива);
		
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	ПараметрыПересчетаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ПараметрыПересчетаНДС);
	
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
		ОбработкаТабличнойЧастиТоварыСервер.ПересчитатьСуммуНДСВСтрокеТЧСервер(СтрокаТоваров, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет удаление строк из табличной части объекта "Товары",
// в которых значение поля ПродажаПодарка установлено равным Истина.
Процедура ОчиститьТоварыОтПодарков(Объект) Экспорт
	
	СтруктураПоиска = Новый Структура("ПродажаПодарка", Истина);
	СтрокиТовары = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаТовары Из СтрокиТовары Цикл
		Объект.Товары.Удалить(СтрокаТовары);
	КонецЦикла;
	
КонецПроцедуры

// Процедура анализирует все подарки из одноименной табличной части документа "ЧекККМ".
// И если условие для переноса в товары не выполняется, то выдается соответствующее сообщение.
// Параметры: 
//		Объект - ДанныеФормыСтруктура - основной реквизит "Объект" формы документа "ЧекККМ".
Процедура СообщитьОбОстающихсяПодарках(Объект, ЕстьОшибки) Экспорт
	
	Для Каждого СтрокаПодарка Из Объект.Подарки Цикл
		
		УчитыватьПодарокКакПродажу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПодарка.СкидкаНаценка, "УчитыватьПодарокКакПродажу");
		Если УчитыватьПодарокКакПродажу = Неопределено Тогда
			УчитыватьПодарокКакПродажу = Ложь;
		КонецЕсли;
		ПроверитьЗаполнениеЯчейкиСтрокиПодарка(СтрокаПодарка, "КоличествоУпаковок", "Количество", ЕстьОшибки);
		ПроверитьЗаполнениеЯчейкиСтрокиПодарка(СтрокаПодарка, "Номенклатура", "Номенклатура", ЕстьОшибки);
		Если ЗначениеЗаполнено(СтрокаПодарка.Номенклатура) Тогда
			СтруктураРеквизитов = Новый Структура;
			СтруктураРеквизитов.Вставить("ИспользованиеХарактеристик", "ВидНоменклатуры.ИспользованиеХарактеристик");
			СтруктураНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаПодарка.Номенклатура, СтруктураРеквизитов);
			ИспользованиеХарактеристик = СтруктураНоменклатуры.ИспользованиеХарактеристик;
			Если НЕ ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать Тогда
				ПроверитьЗаполнениеЯчейкиСтрокиПодарка(СтрокаПодарка, "Характеристика", "Характеристика", ЕстьОшибки);
			КонецЕсли;
		КонецЕсли;
		ПроверитьЗаполнениеЯчейкиСтрокиПодарка(СтрокаПодарка, "Склад", "Склад", ЕстьОшибки);
		Если УчитыватьПодарокКакПродажу Тогда
			ПроверитьЗаполнениеЯчейкиСтрокиПодарка(СтрокаПодарка, "Цена", "Цена", ЕстьОшибки);
		Иначе
			СтрокаСообщения = НСтр("ru = 'Подарок из строки %1 не перенесен в товары,'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.НомерСтроки);
			СтрокаСообщения = СтрокаСообщения + " " + НСтр("ru = 'так как в параметрах скидки не установлен признак ""Учитывать подарок как продажу""'"); 
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрокаСообщения,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Подарки", СтрокаПодарка.НомерСтроки, ""),
				"Объект");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет существование запрета продажи для товаров табличной части в указанном магазине на указанную дату.
// Параметры: 
//		Номенклатура - СправочникСсылка.Номенклатура - проверяемый товар.
// 		Магазин - СправочникСсылка.Магазины - магазин, запрет продажи для которого проверяется.
//		Дата - Дата - дата проверки.
//
// Возвращаемое значение: 
//		ЗапрещенаПродажа - Булево - Истина, когда запрет продажи установлен, Ложь, когда запрета нет.
Функция ЗапрещенаПродажаТовара(Номенклатура, Магазин, ДатаРасчета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЗапрещенаПродажа = Ложь;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗапретРозничнойПродажиАлкоголя") Тогда
		ЗапросПредварительный = Новый Запрос;
		ЗапросПредварительный.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СкидкиНаценки.Ссылка
		|ИЗ
		|	Справочник.СкидкиНаценки КАК СкидкиНаценки
		|ГДЕ
		|	СкидкиНаценки.СпособПредоставления = &ЗапретРозничнойПродажи
		|	И СкидкиНаценки.СтатусДействия = &Действует
		|";
		ЗапросПредварительный.УстановитьПараметр("Действует", Перечисления.СтатусыДействияСкидок.Действует);
		ЗапросПредварительный.УстановитьПараметр("ЗапретРозничнойПродажи", Перечисления.СпособыПредоставленияСкидокНаценок.ЗапретРозничнойПродажи);
		РезультатПредварительный = ЗапросПредварительный.Выполнить();
		Если НЕ РезультатПредварительный.Пустой() Тогда
			ТекстЗапроса = "ВЫБРАТЬ
			|	СкидкиНаценки.Ссылка КАК Ссылка,
			|	СкидкиНаценки.СегментНоменклатурыПредоставления КАК Сегмент
			|ПОМЕСТИТЬ СкидкиНаценки
			|ИЗ
			|	Справочник.СкидкиНаценки КАК СкидкиНаценки
			|ГДЕ
			|	СкидкиНаценки.СпособПредоставления = &ЗапретРозничнойПродажи
			|	И СкидкиНаценки.СтатусДействия = &Действует
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СкидкиНаценки.Ссылка КАК СкидкаНаценка,
			|	СкидкиНаценки.Сегмент КАК Сегмент,
			|	ТЧВремяДействия.ВремяНачала КАК ВремяНачала,
			|	ТЧВремяДействия.ВремяОкончания КАК ВремяОкончания
			|ПОМЕСТИТЬ ДействиеСкидок
			|ИЗ
			|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
			|			&ДатаРасчета,
			|			(КОНЕЦПЕРИОДА(ДатаОкончания, ДЕНЬ) >= &ДатаРасчета
			|				ИЛИ ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
			|				И (Магазин = &Магазин
			|					ИЛИ Магазин = &ПустойМагазин)
			|				И СкидкаНаценка В
			|					(ВЫБРАТЬ
			|						СкидкиНаценки.Ссылка
			|					ИЗ
			|						СкидкиНаценки КАК СкидкиНаценки)) КАК ДействиеСкидок
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СкидкиНаценки КАК СкидкиНаценки
			|		ПО (СкидкиНаценки.Ссылка = ДействиеСкидок.СкидкаНаценка)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК ТЧУсловия
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок.ВремяДействия КАК ТЧВремяДействия
			|			ПО (ТЧВремяДействия.Ссылка = ТЧУсловия.УсловиеПредоставления)
			|				И (ВЫБОР
			|					КОГДА ТЧВремяДействия.ДеньНедели = &Понедельник
			|						ТОГДА 1
			|					КОГДА ТЧВремяДействия.ДеньНедели = &Вторник
			|						ТОГДА 2
			|					КОГДА ТЧВремяДействия.ДеньНедели = &Среда
			|						ТОГДА 3
			|					КОГДА ТЧВремяДействия.ДеньНедели = &Четверг
			|						ТОГДА 4
			|					КОГДА ТЧВремяДействия.ДеньНедели = &Пятница
			|						ТОГДА 5
			|					КОГДА ТЧВремяДействия.ДеньНедели = &Суббота
			|						ТОГДА 6
			|					КОГДА ТЧВремяДействия.ДеньНедели = &Воскресенье
			|						ТОГДА 7
			|					ИНАЧЕ ДЕНЬНЕДЕЛИ(&ДатаРасчета)
			|				КОНЕЦ = ДЕНЬНЕДЕЛИ(&ДатаРасчета))
			|				И (ЧАС(&ДатаРасчета) > ЧАС(ТЧВремяДействия.ВремяНачала)
			|						И ЧАС(&ДатаРасчета) < ЧАС(ТЧВремяДействия.ВремяОкончания)
			|					ИЛИ ЧАС(&ДатаРасчета) = ЧАС(ТЧВремяДействия.ВремяНачала)
			|						И МИНУТА(&ДатаРасчета) > МИНУТА(ТЧВремяДействия.ВремяНачала)
			|					ИЛИ ЧАС(&ДатаРасчета) = ЧАС(ТЧВремяДействия.ВремяОкончания)
			|						И МИНУТА(&ДатаРасчета) < МИНУТА(ТЧВремяДействия.ВремяОкончания)
			|					ИЛИ ЧАС(&ДатаРасчета) = ЧАС(ТЧВремяДействия.ВремяНачала)
			|						И МИНУТА(&ДатаРасчета) = МИНУТА(ТЧВремяДействия.ВремяНачала)
			|						И СЕКУНДА(&ДатаРасчета) >= СЕКУНДА(ТЧВремяДействия.ВремяНачала)
			|					ИЛИ ЧАС(&ДатаРасчета) = ЧАС(ТЧВремяДействия.ВремяОкончания)
			|						И МИНУТА(&ДатаРасчета) = МИНУТА(ТЧВремяДействия.ВремяОкончания)
			|						И СЕКУНДА(&ДатаРасчета) < СЕКУНДА(ТЧВремяДействия.ВремяОкончания))
			|		ПО (ТЧУсловия.Ссылка = СкидкиНаценки.Ссылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НоменклатураСегмента.Сегмент КАК Сегмент,
			|	НоменклатураСегмента.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ НоменклатураСегмента
			|ИЗ
			|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
			|ГДЕ
			|	НоменклатураСегмента.Номенклатура = &Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДействиеСкидок.СкидкаНаценка КАК СкидкаНаценка,
			|	ДействиеСкидок.Сегмент КАК Сегмент,
			|	НоменклатураСегмента.Номенклатура КАК Номенклатура,
			|	ДействиеСкидок.ВремяНачала КАК ВремяНачала,
			|	ДействиеСкидок.ВремяОкончания КАК ВремяОкончания
			|ИЗ
			|	ДействиеСкидок КАК ДействиеСкидок
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураСегмента КАК НоменклатураСегмента
			|		ПО ДействиеСкидок.Сегмент = НоменклатураСегмента.Сегмент";
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			Запрос.УстановитьПараметр("Магазин", Магазин);
			Запрос.УстановитьПараметр("ПустойМагазин", Справочники.Магазины.ПустаяСсылка());
			Запрос.УстановитьПараметр("ДатаРасчета", ?(ЗначениеЗаполнено(ДатаРасчета), ДатаРасчета, ТекущаяДатаСеанса()));
			Запрос.УстановитьПараметр("Действует", Перечисления.СтатусыДействияСкидок.Действует);
			Запрос.УстановитьПараметр("ЗапретРозничнойПродажи", Перечисления.СпособыПредоставленияСкидокНаценок.ЗапретРозничнойПродажи);
			Запрос.УстановитьПараметр("Понедельник", Перечисления.ДниНедели.Понедельник);
			Запрос.УстановитьПараметр("Вторник", Перечисления.ДниНедели.Вторник);
			Запрос.УстановитьПараметр("Среда", Перечисления.ДниНедели.Среда);
			Запрос.УстановитьПараметр("Четверг", Перечисления.ДниНедели.Четверг);
			Запрос.УстановитьПараметр("Пятница", Перечисления.ДниНедели.Пятница);
			Запрос.УстановитьПараметр("Суббота", Перечисления.ДниНедели.Суббота);
			Запрос.УстановитьПараметр("Воскресенье", Перечисления.ДниНедели.Воскресенье);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗапрещенаПродажа = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗапрещенаПродажа;
	
КонецФункции

// Процедура проверяет существование запрета продажи для товаров табличной части на указанную дату 
// запрещенные к продаже товары удаляются из табличной части.
// Параметры: 
// 		Магазин - Магазин, запрет продажи для которого проверяется.
//		ТаблицаТоваров - ТабличнаяЧасть - табличная часть документа, в который содержатся проверяемые товары.
//		Дата - Дата - дата проверки.
//
Процедура ПроверитьЗапретРозничнойПродажиТаблицыТоваров(
	Объект,
	ИмяТаблицыТоваров,
	Отказ,
	ИтоговоеСообщение = "",
	ДатаРасчета = Неопределено,
	Сообщать = Истина) Экспорт
	
	Если СкидкиНаценкиВызовСервера.ПолучитьФункциональнуюОпциюИспользованияЗапретаРозничнойПродажиАлкоголя() Тогда
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаТоваров = Объект[ИмяТаблицыТоваров];
		Запрос=Новый Запрос("ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Т.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДействиеСкидок.СкидкаНаценка КАК СкидкаНаценка,
		|	ДействиеСкидок.СкидкаНаценка.СегментНоменклатурыПредоставления КАК СегментНоменклатурыПредоставления
		|ПОМЕСТИТЬ ДействиеСкидок
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
		|			&ДатаРасчета,
		|			(КОНЕЦПЕРИОДА(ДатаОкончания, ДЕНЬ) >= &ДатаРасчета
		|				ИЛИ ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|				И СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ЗапретРозничнойПродажи)
		|				И СкидкаНаценка.СтатусДействия = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
		|				И (Магазин = &Магазин
		|					ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))) КАК ДействиеСкидок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДействиеСкидок.СкидкаНаценка КАК СкидкаНаценка,
		|	ДействиеСкидок.СегментНоменклатурыПредоставления КАК Сегмент,
		|	НоменклатураСегмента.Номенклатура КАК Номенклатура,
		|	ИСТИНА КАК ЗапрещеныПродажи
		|ПОМЕСТИТЬ ЗапретыПродаж
		|ИЗ
		|	ДействиеСкидок КАК ДействиеСкидок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|		ПО ДействиеСкидок.СегментНоменклатурыПредоставления = НоменклатураСегмента.Сегмент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК ТЧУсловия
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок.ВремяДействия КАК ТЧВремяДействия
		|			ПО (ТЧВремяДействия.Ссылка = ТЧУсловия.УсловиеПредоставления)
		|				И (ВЫБОР
		|					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
		|						ТОГДА 1
		|					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
		|						ТОГДА 2
		|					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
		|						ТОГДА 3
		|					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Четверг)
		|						ТОГДА 4
		|					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
		|						ТОГДА 5
		|					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
		|						ТОГДА 6
		|					КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
		|						ТОГДА 7
		|					ИНАЧЕ ДЕНЬНЕДЕЛИ(&ДатаРасчета)
		|				КОНЕЦ = ДЕНЬНЕДЕЛИ(&ДатаРасчета))
		|				И (ЧАС(&ДатаРасчета) > ЧАС(ТЧВремяДействия.ВремяНачала)
		|						И ЧАС(&ДатаРасчета) < ЧАС(ТЧВремяДействия.ВремяОкончания)
		|					ИЛИ ЧАС(&ДатаРасчета) = ЧАС(ТЧВремяДействия.ВремяНачала)
		|						И МИНУТА(&ДатаРасчета) > МИНУТА(ТЧВремяДействия.ВремяНачала)
		|					ИЛИ ЧАС(&ДатаРасчета) = ЧАС(ТЧВремяДействия.ВремяОкончания)
		|						И МИНУТА(&ДатаРасчета) < МИНУТА(ТЧВремяДействия.ВремяОкончания)
		|					ИЛИ ЧАС(&ДатаРасчета) = ЧАС(ТЧВремяДействия.ВремяНачала)
		|						И МИНУТА(&ДатаРасчета) = МИНУТА(ТЧВремяДействия.ВремяНачала)
		|						И СЕКУНДА(&ДатаРасчета) >= СЕКУНДА(ТЧВремяДействия.ВремяНачала)
		|					ИЛИ ЧАС(&ДатаРасчета) = ЧАС(ТЧВремяДействия.ВремяОкончания)
		|						И МИНУТА(&ДатаРасчета) = МИНУТА(ТЧВремяДействия.ВремяОкончания)
		|						И СЕКУНДА(&ДатаРасчета) < СЕКУНДА(ТЧВремяДействия.ВремяОкончания))
		|		ПО (ТЧУсловия.Ссылка = ДействиеСкидок.СкидкаНаценка)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Номенклатура.Наименование КАК Наименование,
		|	ВЫБОР
		|			КОГДА ЗапретыПродаж.ЗапрещеныПродажи ЕСТЬ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НЕ ЗапретыПродаж.ЗапрещеныПродажи
		|		КОНЕЦ КАК РазрешеныПродажи
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗапретыПродаж КАК ЗапретыПродаж
		|		ПО (ЗапретыПродаж.Номенклатура = Товары.Номенклатура
		|				ИЛИ (ЗапретыПродаж.Номенклатура ЕСТЬ NULL 
		|					И ЗапретыПродаж.Сегмент = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)))
		|ГДЕ
		|	НЕ ВЫБОР
		|			КОГДА ЗапретыПродаж.ЗапрещеныПродажи ЕСТЬ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НЕ ЗапретыПродаж.ЗапрещеныПродажи
		|		КОНЕЦ
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиДокумента
		|	");
		Запрос.УстановитьПараметр("Товары", ТаблицаТоваров.Выгрузить());
		Если ДатаРасчета = Неопределено Тогда
			Запрос.УстановитьПараметр("ДатаРасчета", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
		Иначе
			Запрос.УстановитьПараметр("ДатаРасчета", ДатаРасчета);
		КонецЕсли;
		Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
		Результат=Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Отказ = Истина;
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				СтрокаТоваров = ТаблицаТоваров[Выборка.НомерСтрокиДокумента-1];
				ТекстСообщения = НСтр("ru='В строке %1 товар ""%2"" запрещен к продаже.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НомерСтрокиДокумента, Выборка.Наименование);
				Если Сообщать Тогда
					ИмяПоля = ИмяТаблицыТоваров + "[" + Формат(Выборка.НомерСтрокиДокумента - 1, "ЧДЦ=0; ЧН=0; ЧГ=0") + "].Номенклатура";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						Объект,
						ИмяПоля);
				Иначе
					ИтоговоеСообщение = ИтоговоеСообщение + ТекстСообщения + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Получает сумму предыдущей покупки по карте для расчета соответствующей скидки.
Функция ДанныеПредыдущейПокупкиДляРасчетаСкидки(МассивКарт, ДатаРасчета, СегментОтграничения, Регистратор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеПредыдущейПокупки = ПустаяСтруктураДанныхПредыдущейПокупки();
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПродажиПоДисконтнымКартам.Регистратор
	|ПОМЕСТИТЬ ПоследнийРегистратор
	|ИЗ
	|	РегистрНакопления.ПродажиПоДисконтнымКартам КАК ПродажиПоДисконтнымКартам
	|&УсловиеСегмент
	|ГДЕ
	|	ПродажиПоДисконтнымКартам.Период <= &ДатаРасчета
	|	И ПродажиПоДисконтнымКартам.ДисконтнаяКарта В(&МассивКарт)
	|	И ПродажиПоДисконтнымКартам.Регистратор <> &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПродажиПоДисконтнымКартам.Период УБЫВ,
	|	ПродажиПоДисконтнымКартам.Регистратор УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПродажиПоДисконтнымКартам.Регистратор КАК Ссылка,
	|	МАКСИМУМ(ПродажиПоДисконтнымКартам.Период) КАК Дата,
	|	СУММА(ПродажиПоДисконтнымКартам.Сумма) КАК Сумма,
	|	СУММА(ПродажиПоДисконтнымКартам.Количество) КАК Количество
	|ИЗ
	|	РегистрНакопления.ПродажиПоДисконтнымКартам КАК ПродажиПоДисконтнымКартам
	|&УсловиеСегмент
	|ГДЕ
	|	ПродажиПоДисконтнымКартам.Регистратор В
	|			(ВЫБРАТЬ
	|				Т.Регистратор
	|			ИЗ
	|				ПоследнийРегистратор КАК Т)
	|	И ПродажиПоДисконтнымКартам.ДисконтнаяКарта В(&МассивКарт)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажиПоДисконтнымКартам.Регистратор";
	Запрос.УстановитьПараметр("МассивКарт", МассивКарт);
	Запрос.УстановитьПараметр("ДатаРасчета", ДатаРасчета);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	УсловиеСегмент = "";
	Если ЗначениеЗаполнено(СегментОтграничения) Тогда
		УсловиеСегмент = "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегментаИсключения
		|		ПО ПродажиПоДисконтнымКартам.Номенклатура = НоменклатураСегментаИсключения.Номенклатура
		|			И ПродажиПоДисконтнымКартам.Характеристика = НоменклатураСегментаИсключения.Характеристика
		|			И (НоменклатураСегментаИсключения.Сегмент = &СегментОтграничения)";
		Запрос.УстановитьПараметр("СегментОтграничения", СегментОтграничения);
		
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСегмент", УсловиеСегмент);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.Сумма > 0 Тогда
			ЗаполнитьЗначенияСвойств(ДанныеПредыдущейПокупки, Выборка);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДанныеПредыдущейПокупки;
	
КонецФункции

// Обновляет табличную Части скидки.
//
// Параметры:
//  Объект - Чек ККМ или Реализация Товаров.
//  ИмяТЧ - Имя табличной части.
//  ИмяОсновнойТЧ - Имя табличной части.
//
Процедура ОбновитьОтображениеСкидки(Объект, ИмяОсновнойТЧ = "Товары", ИмяТЧ = "СкидкиНаценки") Экспорт

	ОсновнаяТаблица = Объект[ИмяОсновнойТЧ].Выгрузить();
	
	Для каждого СтрокаСкидкиНаценки Из Объект[ИмяТЧ] Цикл
		
		КлючСвязи = СтрокаСкидкиНаценки.КлючСвязи;
		
		СтрокаОсновнойТаблицы = ОсновнаяТаблица.Найти(КлючСвязи, "КлючСвязи");
		
		Если НЕ СтрокаОсновнойТаблицы = Неопределено Тогда
		
			СтрокаСкидкиНаценки.Номенклатура               = СтрокаОсновнойТаблицы.Номенклатура;
			СтрокаСкидкиНаценки.Характеристика             = СтрокаОсновнойТаблицы.Характеристика;
			СтрокаСкидкиНаценки.НомерСтрокиОсновойТаблицы  = СтрокаОсновнойТаблицы.НомерСтроки;
			СтрокаСкидкиНаценки.ХарактеристикиИспользуются = СтрокаОсновнойТаблицы.ХарактеристикиИспользуются
		КонецЕсли;
		
		СтрокаСкидкиНаценки.СкидкаЗапрещенаКПросмору = НЕ ОбщегоНазначенияРТВызовСервера.ПроверитьДоступКРеквизиту(СтрокаСкидкиНаценки, "СкидкаНаценка", "Справочник.СкидкиНаценки");
		
	КонецЦикла;
	

КонецПроцедуры

// Функция формирует текст запроса для динамического списка номенклатуры в обработке "Подбор товаров"
// если включена функциональная опция использования ассортимента
// и подбор открыт с учетом отбора по ассортименту.
// Параметры: 
// 		УсловиеАссортимента - Строка - добавляется к тексту запроса.
// Возвращаемое значение: 
// 		ТекстЗапроса - Строка - итоговый текст запроса.
Функция ТекстЗапросаДинамическогоСпискаДляПодбора() Экспорт
	
	ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СправочникНоменклатура.Ссылка КАК Номенклатура,
				|	СправочникНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
				|	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
				|	СправочникНоменклатура.Родитель КАК Родитель,
				|	СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
				|	СправочникНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
				|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	ВЫБОР
				|		КОГДА СправочникНоменклатура.ЭтоГруппа
				|			ТОГДА ВЫБОР
				|					КОГДА СправочникНоменклатура.ПометкаУдаления
				|						ТОГДА 13
				|					ИНАЧЕ 12
				|				КОНЕЦ
				|		ИНАЧЕ -1 + ВЫБОР
				|				КОГДА СправочникНоменклатура.ПометкаУдаления
				|					ТОГДА 1
				|				ИНАЧЕ 0
				|			КОНЕЦ + ВЫБОР
				|				КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать)
				|					ТОГДА 1
				|				ИНАЧЕ 3
				|			КОНЕЦ
				|	КОНЕЦ КАК ИндексКартинки,
				|	ДействиеСкидок.СкидкаНаценка,
				|	СправочникНоменклатура.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента
				|ИЗ
				|	Справочник.Номенклатура КАК СправочникНоменклатура
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
				|				&НаДату,
				|				(КОНЕЦПЕРИОДА(ДатаОкончания, ДЕНЬ) >= &НаДату
				|					ИЛИ ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
				|					И СкидкаНаценка.СтатусДействия = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
				|					И СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ЗапретРозничнойПродажи)
				|					И (Магазин = &Магазин
				|						ИЛИ Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))) КАК ДействиеСкидок
				|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
				|			ПО ДействиеСкидок.СкидкаНаценка.СегментНоменклатурыПредоставления = НоменклатураСегмента.Сегмент
				|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК ТЧУсловия
				|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок.ВремяДействия КАК ТЧВремяДействия
				|				ПО (ТЧВремяДействия.Ссылка = ТЧУсловия.УсловиеПредоставления)
				|					И (ВЫБОР
				|						КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
				|							ТОГДА 1
				|						КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
				|							ТОГДА 2
				|						КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
				|							ТОГДА 3
				|						КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Четверг)
				|							ТОГДА 4
				|						КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
				|							ТОГДА 5
				|						КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
				|							ТОГДА 6
				|						КОГДА ТЧВремяДействия.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
				|							ТОГДА 7
				|						ИНАЧЕ ДЕНЬНЕДЕЛИ(&НаДату)
				|					КОНЕЦ = ДЕНЬНЕДЕЛИ(&НаДату))
				|					И (ЧАС(&НаДату) > ЧАС(ТЧВремяДействия.ВремяНачала)
				|							И ЧАС(&НаДату) < ЧАС(ТЧВремяДействия.ВремяОкончания)
				|						ИЛИ ЧАС(&НаДату) = ЧАС(ТЧВремяДействия.ВремяНачала)
				|							И МИНУТА(&НаДату) > МИНУТА(ТЧВремяДействия.ВремяНачала)
				|						ИЛИ ЧАС(&НаДату) = ЧАС(ТЧВремяДействия.ВремяОкончания)
				|							И МИНУТА(&НаДату) < МИНУТА(ТЧВремяДействия.ВремяОкончания)
				|						ИЛИ ЧАС(&НаДату) = ЧАС(ТЧВремяДействия.ВремяНачала)
				|							И МИНУТА(&НаДату) = МИНУТА(ТЧВремяДействия.ВремяНачала)
				|							И СЕКУНДА(&НаДату) >= СЕКУНДА(ТЧВремяДействия.ВремяНачала)
				|						ИЛИ ЧАС(&НаДату) = ЧАС(ТЧВремяДействия.ВремяОкончания)
				|							И МИНУТА(&НаДату) = МИНУТА(ТЧВремяДействия.ВремяОкончания)
				|							И СЕКУНДА(&НаДату) < СЕКУНДА(ТЧВремяДействия.ВремяОкончания))
				|			ПО (ТЧУсловия.Ссылка = ДействиеСкидок.СкидкаНаценка)
				|		ПО (НоменклатураСегмента.Номенклатура = СправочникНоменклатура.Ссылка
				|			ИЛИ НоменклатураСегмента.Номенклатура ЕСТЬ NULL 
				|			И ДействиеСкидок.СкидкаНаценка.СегментНоменклатурыПредоставления = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка))
				|ГДЕ
				|	ДействиеСкидок.СкидкаНаценка ЕСТЬ NULL 
				|{ГДЕ
				|	(СправочникНоменклатура.Ссылка В
				|			(ВЫБРАТЬ
				|				Сегменты.Номенклатура
				|			ИЗ
				|				РегистрСведений.НоменклатураСегмента КАК Сегменты
				|			ГДЕ
				|				Сегменты.Сегмент = &СегментНоменклатуры))}";
	Возврат ТекстЗапроса;
	
КонецФункции

// Обрабатывает структуру шаблона и устанавливает значения некоторых параметров
// которые должны отображаться только при определенных условиях
// а данные должны получаться отдельными запросами.
Процедура ОбработатьСтруктуруШаблонаЧекаПриПечати(СтруктураШаблона, ДокументСсылка) Экспорт
	
	Для Каждого СтрокаШаблонаУровень1 Из СтруктураШаблона.Шаблон.Строки Цикл
		Если СтрокаШаблонаУровень1.Элемент = "Подвал" ИЛИ СтрокаШаблонаУровень1.Элемент = "Шапка" Тогда
			МассивУдаляемыхСтрок = Новый Массив;
			Для Каждого СтрокаШаблонаУровень2 Из СтрокаШаблонаУровень1.Строки Цикл
				Если СтрокаШаблонаУровень2.Элемент = "%%Скидки.СуммаНакопления%%" Тогда
					РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Ссылка, Дата, Проведен, ВидОперации, ДисконтнаяКарта, СтатусЧекаККМ, ОтчетОРозничныхПродажах");
					Если ЗначениеЗаполнено(РеквизитыДокумента.ДисконтнаяКарта) Тогда
						ОбработатьПараметрСуммыНакопления(РеквизитыДокумента, СтрокаШаблонаУровень2);
					Иначе
						МассивУдаляемыхСтрок.Добавить(СтрокаШаблонаУровень2);
					КонецЕсли;
				КонецЕсли;
				Если СтрокаШаблонаУровень2.Элемент = "%%Скидки.НакопленоБаллов%%" Тогда
					РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Ссылка, Дата, Проведен, ВидОперации, ДисконтнаяКарта, СтатусЧекаККМ, ОтчетОРозничныхПродажах");
					Если ЗначениеЗаполнено(РеквизитыДокумента.ДисконтнаяКарта) Тогда
						ОбработатьПараметрНакопленныхБаллов(РеквизитыДокумента, СтрокаШаблонаУровень2);
					Иначе
						МассивУдаляемыхСтрок.Добавить(СтрокаШаблонаУровень2);
					КонецЕсли;
				КонецЕсли;
				Если СтрокаШаблонаУровень2.Элемент = "%%Скидки.НачисленоБаллов%%" Тогда
					УдалятьЭлемент = Ложь;
					ОбработатьПараметрНачисленныхБаллов(ДокументСсылка, СтрокаШаблонаУровень2, УдалятьЭлемент);
					Если УдалятьЭлемент Тогда
						МассивУдаляемыхСтрок.Добавить(СтрокаШаблонаУровень2);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
				СтрокаШаблонаУровень1.Строки.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает структуру шаблона и устанавливает значения некоторых параметров
// которые должны отображаться только при определенных условиях
// а данные должны получаться отдельными запросами.
Процедура ОбработатьСтруктуруШаблонаЧекаПриПредварительномПросмотре(СтруктураШаблона, ДокументСсылка) Экспорт
	
	РеквизитыДокумента = Неопределено;
	
	Для Каждого СтрокаШаблонаУровень2 Из СтруктураШаблона.Шапка Цикл
		ПроверитьПараметрСуммыНакопления(СтрокаШаблонаУровень2, ДокументСсылка, РеквизитыДокумента);
		ПроверитьПараметрНакопленныхБаллов(СтрокаШаблонаУровень2, ДокументСсылка, РеквизитыДокумента);
		ПроверитьПараметрНачисленныхБаллов(СтрокаШаблонаУровень2, ДокументСсылка, РеквизитыДокумента);
	КонецЦикла;
	
	Для Каждого СтрокаШаблонаУровень2 Из СтруктураШаблона.Подвал Цикл
		ПроверитьПараметрСуммыНакопления(СтрокаШаблонаУровень2, ДокументСсылка, РеквизитыДокумента);
		ПроверитьПараметрНакопленныхБаллов(СтрокаШаблонаУровень2, ДокументСсылка, РеквизитыДокумента);
		ПроверитьПараметрНачисленныхБаллов(СтрокаШаблонаУровень2, ДокументСсылка, РеквизитыДокумента);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет цены и суммы строк таблицы товаров
// в соответствии с данными документа-основания.
// 
Процедура ПодготовитьСкидкиИОплатуБонусамиКСторнированиюПриВозврате(Объект, РежимРМК = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если РежимРМК ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		Если ЗначениеЗаполнено(Объект.ЧекККМПродажа) Тогда
			ЕстьБонусы = Ложь;
			Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
				БонуснаяПрограмма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДисконтнаяКарта, "БонуснаяПрограммаЛояльности");
				Если ЗначениеЗаполнено(БонуснаяПрограмма) Тогда
					ЕстьБонусы = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика
			|ПОМЕСТИТЬ ТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика 
			|ПОМЕСТИТЬ ТоварыВозврата
			|ИЗ
			|	ТаблицаТовары КАК Товары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Цена КАК Цена,
			|	Товары.Упаковка КАК Упаковка,
			|	ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) КАК Коэффициент,
			|	МАКСИМУМ(Товары.СтавкаНДС) КАК СтавкаНДС,
			|	СУММА(Товары.Количество) КАК Количество,
			|	СУММА(Товары.КоличествоУпаковок) КАК КоличествоУпаковок,
			|	СУММА(Товары.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСкидки,
			|	СУММА(Товары.СуммаРучнойСкидки) КАК СуммаРучнойСкидки,
			|	СУММА(Товары.СуммаСкидкиОплатыБонусом) КАК СуммаСкидкиОплатыБонусом
			|ИЗ
			|	Документ.ЧекККМ.Товары КАК Товары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыВозврата КАК ТоварыВозврата
			|		ПО (ТоварыВозврата.Номенклатура = Товары.Номенклатура)
			|			И (ТоварыВозврата.Характеристика = Товары.Характеристика)
			|ГДЕ
			|	Товары.Ссылка = &ДокументПродажи
			|
			|СГРУППИРОВАТЬ ПО
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Цена,
			|	Товары.Упаковка,
			|	ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0)
			|";
			Запрос.УстановитьПараметр("ДокументПродажи", Объект.ЧекККМПродажа);
			Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
			ТаблицаПродаж = Запрос.Выполнить().Выгрузить();
			Для Каждого СтрокаВозврата Из Объект.Товары Цикл
				
				СтрокаПродажи = СтрокаПродажиПоСтрокеВозврата(ТаблицаПродаж, СтрокаВозврата);
				ОбработатьСтрокуВозвратаПоПродаже(СтрокаВозврата, СтрокаПродажи);
				
			КонецЦикла;
			Если ЕстьБонусы Тогда
				СуммаБонусовВСкидках = Объект.Товары.Итог("СуммаСкидкиОплатыБонусом");
				Если СуммаБонусовВСкидках <> 0 Тогда
					КурсКонвертацииБонусовВВалюту = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БонуснаяПрограмма, "КурсКонвертацииБонусовВВалюту");
					Если РежимРМК Тогда
						ТаблицаОрганизаций = Объект.Товары.Выгрузить();
						ТаблицаОрганизаций.Свернуть("Организация", "СуммаСкидкиОплатыБонусом");
						Объект.ОплатаБонуснымиБаллами.Очистить();
						Для Каждого СтрокаОрганизации Из ТаблицаОрганизаций Цикл
							Если СтрокаОрганизации.СуммаСкидкиОплатыБонусом <> 0 Тогда
								СтрокаОплаты = Объект.ОплатаБонуснымиБаллами.Добавить();
								СтрокаОплаты.Организация = СтрокаОрганизации.Организация;
								СтрокаОплаты.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой;
								СтрокаОплаты.БонуснаяПрограммаЛояльности = БонуснаяПрограмма;
								СтрокаОплаты.СуммаБонусовВСкидках = СтрокаОрганизации.СуммаСкидкиОплатыБонусом;
								КоличествоБонусовВСкидках = Цел(СтрокаОплаты.СуммаБонусовВСкидках / ?(КурсКонвертацииБонусовВВалюту = 0, 1, КурсКонвертацииБонусовВВалюту));
								СтрокаОплаты.КоличествоБонусовВСкидках = КоличествоБонусовВСкидках;
							КонецЕсли;
						КонецЦикла;
					Иначе
						КоличествоБонусовВСкидках = Цел(СуммаБонусовВСкидках / ?(КурсКонвертацииБонусовВВалюту = 0, 1, КурсКонвертацииБонусовВВалюту));
						СтрокаОплаты = Неопределено;
						Для Каждого СтрокаКоллекции Из Объект.Оплата Цикл
							Если СтрокаКоллекции.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой Тогда
								СтрокаОплаты = СтрокаКоллекции;
							КонецЕсли;
						КонецЦикла;
						Если СтрокаОплаты = Неопределено Тогда
							СтрокаОплаты = Объект.Оплата.Добавить();
						КонецЕсли;
						СтрокаОплаты.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой;
						СтрокаОплаты.БонуснаяПрограммаЛояльности = БонуснаяПрограмма;
						СтрокаОплаты.СуммаБонусовВСкидках = СуммаБонусовВСкидках;
						СтрокаОплаты.КоличествоБонусовВСкидках = КоличествоБонусовВСкидках;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.ДокументПродажи КАК ДокументПродажи,
		|	Товары.ЧекККМ КАК ЧекККМ
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.ДокументПродажи КАК ДокументПродажи,
		|	Товары.ЧекККМ КАК ЧекККМ
		|ПОМЕСТИТЬ ТоварыВозврата
		|ИЗ
		|	ТаблицаТовары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	NULL КАК ДокументПродажи,
		|	Товары.Ссылка КАК ЧекККМ,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Цена КАК Цена,
		|	Товары.Упаковка КАК Упаковка,
		|	ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) КАК Коэффициент,
		|	МАКСИМУМ(Товары.СтавкаНДС) КАК СтавкаНДС,
		|	СУММА(Товары.Количество) КАК Количество,
		|	СУММА(Товары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(Товары.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСкидки,
		|	СУММА(Товары.СуммаРучнойСкидки) КАК СуммаРучнойСкидки,
		|	СУММА(Товары.СуммаСкидкиОплатыБонусом) КАК СуммаСкидкиОплатыБонусом
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыВозврата КАК ТоварыВозврата
		|		ПО (ТоварыВозврата.Номенклатура = Товары.Номенклатура)
		|			И (ТоварыВозврата.Характеристика = Товары.Характеристика)
		|			И (ТоварыВозврата.ЧекККМ = Товары.Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.Ссылка,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Цена,
		|	Товары.Упаковка,
		|	ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Ссылка,
		|	NULL,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Цена,
		|	Товары.Упаковка,
		|	ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0),
		|	МАКСИМУМ(Товары.СтавкаНДС),
		|	СУММА(Товары.Количество),
		|	СУММА(Товары.КоличествоУпаковок),
		|	СУММА(Товары.СуммаАвтоматическойСкидки),
		|	СУММА(Товары.СуммаРучнойСкидки),
		|	0
		|ИЗ
		|	Документ.РеализацияТоваров.Товары КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыВозврата КАК ТоварыВозврата
		|		ПО (ТоварыВозврата.Номенклатура = Товары.Номенклатура)
		|			И (ТоварыВозврата.Характеристика = Товары.Характеристика)
		|			И (ТоварыВозврата.ДокументПродажи = Товары.Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.Ссылка,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Цена,
		|	Товары.Упаковка,
		|	ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Ссылка,
		|	NULL,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Цена,
		|	Товары.Упаковка,
		|	ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0),
		|	МАКСИМУМ(Товары.СтавкаНДС),
		|	СУММА(Товары.Количество),
		|	СУММА(Товары.КоличествоУпаковок),
		|	СУММА(Товары.Цена * Товары.Количество * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 1) - Товары.Сумма),
		|	0,
		|	0
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Товары КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыВозврата КАК ТоварыВозврата
		|		ПО (ТоварыВозврата.Номенклатура = Товары.Номенклатура)
		|			И (ТоварыВозврата.Характеристика = Товары.Характеристика)
		|			И (ТоварыВозврата.ДокументПродажи = Товары.Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.Ссылка,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Цена,
		|	Товары.Упаковка,
		|	ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0)";
		Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
		ТаблицаПродаж = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаВозврата Из Объект.Товары Цикл
			
			СтрокаПродажи = Неопределено;
			
			Если ЗначениеЗаполнено(СтрокаВозврата.ЧекККМ) Тогда
				СтрокаПродажи = СтрокаПродажиПоСтрокеВозврата(ТаблицаПродаж, СтрокаВозврата, "ЧекККМ");
			КонецЕсли;
			Если СтрокаПродажи = Неопределено И ЗначениеЗаполнено(СтрокаВозврата.ДокументПродажи) Тогда
				СтрокаПродажи = СтрокаПродажиПоСтрокеВозврата(ТаблицаПродаж, СтрокаВозврата, "ДокументПродажи");
			КонецЕсли;
			
			ОбработатьСтрокуВозвратаПоПродаже(СтрокаВозврата, СтрокаПродажи);
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура выполняет проверку соответствия дисконтной карты возврата
// и дисконтных карт документов продажи.
Функция РасхожденияДисконтныхКартВозвратаИПродаж(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Товары.ДокументПродажи КАК Документ.РеализацияТоваров) КАК ДокументПродажи,
	|	ВЫРАЗИТЬ(Товары.ЧекККМ КАК Документ.ЧекККМ) КАК ЧекККМ
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подзапрос.НомерСтроки КАК НомерСтрокиОснования,
	|	Подзапрос.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	Подзапрос.Основание КАК Основание
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.НомерСтроки КАК НомерСтроки,
	|		Товары.ДокументПродажи.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|		""ДокументПродажи"" КАК Основание
	|	ИЗ
	|		Товары КАК Товары
	|	ГДЕ
	|		Товары.ДокументПродажи ССЫЛКА Документ.РеализацияТоваров
	|		И Товары.ДокументПродажи <> ЗНАЧЕНИЕ(Документ.РеализацияТоваров.ПустаяСсылка)
	|		И Товары.ДокументПродажи.ДисконтнаяКарта <> &ДисконтнаяКарта
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Товары.НомерСтроки,
	|		Товары.ЧекККМ.ДисконтнаяКарта,
	|		""ЧекККМ""
	|	ИЗ
	|		Товары КАК Товары
	|	ГДЕ
	|		Товары.ЧекККМ ССЫЛКА Документ.ЧекККМ
	|		И Товары.ЧекККМ <> ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
	|		И Товары.ЧекККМ.ДисконтнаяКарта <> &ДисконтнаяКарта) КАК Подзапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	Результат = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Процедура выполняет активирование скидок по идентификатору предыдущего чека
// Параметры:
//		Чек - ДокументСсылка.ЧекККМ
//		Магазин - ДокументСсылка Чек ККМ
//		ДатаАктивации - Дата
Процедура АктивироватьСкидкиПоИдентификаторуЧека(Чек, Магазин, ДатаАктивации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросПредварительный = Новый Запрос;
	ЗапросПредварительный.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СкидкиНаценки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СкидкиНаценки.УсловияПредоставления КАК СкидкиНаценки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК Условия
	|		ПО СкидкиНаценки.УсловиеПредоставления = Условия.Ссылка
	|			И Условия.УсловиеПредоставления = &УсловиеПредоставления
	|ГДЕ
	|	СкидкиНаценки.Ссылка.СтатусДействия = &Действует
	|";
	ЗапросПредварительный.УстановитьПараметр("Действует", Перечисления.СтатусыДействияСкидок.Действует);
	ЗапросПредварительный.УстановитьПараметр("УсловиеПредоставления", Перечисления.УсловияПредоставленияСкидокНаценок.ОдноразовыйКод);
	РезультатПредварительный = ЗапросПредварительный.Выполнить();
	Если НЕ РезультатПредварительный.Пустой() Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	СкидкиНаценки.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ СкидкиНаценки
		|ИЗ
		|	Справочник.СкидкиНаценки.УсловияПредоставления КАК СкидкиНаценки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок КАК Условия
		|		ПО СкидкиНаценки.УсловиеПредоставления = Условия.Ссылка
		|			И Условия.УсловиеПредоставления = &УсловиеПредоставления
		|ГДЕ
		|	СкидкиНаценки.Ссылка.СтатусДействия = &Действует
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДействиеСкидок.СкидкаНаценка КАК СкидкаНаценка
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
		|			&ДатаРасчета,
		|			(КОНЕЦПЕРИОДА(ДатаОкончания, ДЕНЬ) >= &ДатаРасчета
		|				ИЛИ ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|				И (Магазин = &Магазин
		|					ИЛИ Магазин = &ПустойМагазин)
		|				И СкидкаНаценка В
		|					(ВЫБРАТЬ
		|						СкидкиНаценки.Ссылка
		|					ИЗ
		|						СкидкиНаценки КАК СкидкиНаценки)) КАК ДействиеСкидок
		|";
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Магазин", Магазин);
		Запрос.УстановитьПараметр("ПустойМагазин", Справочники.Магазины.ПустаяСсылка());
		Запрос.УстановитьПараметр("ДатаРасчета", ?(ЗначениеЗаполнено(ДатаАктивации), ДатаАктивации, ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("Действует", Перечисления.СтатусыДействияСкидок.Действует);
		Запрос.УстановитьПараметр("УсловиеПредоставления", Перечисления.УсловияПредоставленияСкидокНаценок.ОдноразовыйКод);
		ИдентификаторСкидки = Строка(Чек.УникальныйИдентификатор());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОднократныйМенеджер = РегистрыСведений.СостоянияОднократныхСкидокИКупонов.СоздатьМенеджерЗаписи();
			ОднократныйМенеджер.Период = ДатаАктивации;
			ОднократныйМенеджер.ДокументДвижения = Чек;
			ОднократныйМенеджер.ИдентификаторСкидки = ИдентификаторСкидки;
			ОднократныйМенеджер.Магазин = Магазин;
			ОднократныйМенеджер.Скидка = Выборка.СкидкаНаценка;
			ОднократныйМенеджер.Состояние = Перечисления.СостоянияОднократныхСкидок.Активна;
			ОднократныйМенеджер.Записать(Истина);
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура выполняет активирование скидок по идентификатору предыдущего чека
// Параметры:
//		Чек - ДокументСсылка.ЧекККМ
//		ИдентификаторЧека - строковое представление идентификатора чека
Процедура ДеактивироватьСкидкиПоИдентификаторуЧека(Чек) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СостоянияОднократныхСкидокИКупонов.Период КАК Период,
	|	СостоянияОднократныхСкидокИКупонов.Скидка КАК Скидка
	|ИЗ
	|	РегистрСведений.СостоянияОднократныхСкидокИКупонов КАК СостоянияОднократныхСкидокИКупонов
	|ГДЕ
	|	СостоянияОднократныхСкидокИКупонов.ИдентификаторСкидки = &ИдентификаторСкидки";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	ИдентификаторСкидки = Строка(Чек.УникальныйИдентификатор());
	Запрос.УстановитьПараметр("ИдентификаторСкидки", ИдентификаторСкидки);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОднократныйМенеджер = РегистрыСведений.СостоянияОднократныхСкидокИКупонов.СоздатьМенеджерЗаписи();
		ОднократныйМенеджер.Период = Выборка.Период;
		ОднократныйМенеджер.Скидка = Выборка.Скидка;
		ОднократныйМенеджер.ИдентификаторСкидки = ИдентификаторСкидки;
		ОднократныйМенеджер.Удалить();
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура выполняет погашение всех скидок по идентификатору предыдущего чека.
// Которые находятся в группах Вытеснение, Максимум или Последовательное применение.
// если хотя бы одна из них применена в документе.
// Параметры:
//		ДокументОбъект - ДанныеФормыСтруктура - документа ЧекККМ или обработки РМКУправляемыйРежим, или ДокументОбъект ЗаказПокупателя
Процедура ПогаситьОднократныеСкидки(ДокументОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Идентификаторы = Новый Массив;
	Для Каждого СтрокаКода Из ДокументОбъект.ПредъявленныеКодыОднократныхСкидок Цикл
		Идентификаторы.Добавить(СтрокаКода.КодСкидки);
	КонецЦикла;
	Если Идентификаторы.Количество() > 0 Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	СостоянияОднократныхСкидокИКупонов.Период КАК Период,
		|	СостоянияОднократныхСкидокИКупонов.Скидка КАК Скидка,
		|	СостоянияОднократныхСкидокИКупонов.ИдентификаторСкидки КАК ИдентификаторСкидки
		|ИЗ
		|	РегистрСведений.СостоянияОднократныхСкидокИКупонов.СрезПоследних(&Дата, ИдентификаторСкидки В (&Идентификаторы)) КАК СостоянияОднократныхСкидокИКупонов
		|ГДЕ
		|	СостоянияОднократныхСкидокИКупонов.Состояние = &Активна";
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
		Запрос.УстановитьПараметр("Дата", ДокументОбъект.Дата);
		Запрос.УстановитьПараметр("Активна", Перечисления.СостоянияОднократныхСкидок.Активна);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОднократныйМенеджер = РегистрыСведений.СостоянияОднократныхСкидокИКупонов.СоздатьМенеджерЗаписи();
			ОднократныйМенеджер.Период = ?(ДокументОбъект.Дата > Выборка.Период, ДокументОбъект.Дата, Выборка.Период + 1);
			ОднократныйМенеджер.Скидка = Выборка.Скидка;
			ОднократныйМенеджер.ИдентификаторСкидки = Выборка.ИдентификаторСкидки;
			ОднократныйМенеджер.ДокументДвижения = ДокументОбъект.Ссылка;
			ОднократныйМенеджер.Магазин = ДокументОбъект.Магазин;
			ОднократныйМенеджер.Состояние = Перечисления.СостоянияОднократныхСкидок.Применена;
			ОднократныйМенеджер.Записать(Истина);
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Получает все действующие для купона скидки
// Возвращает таблицу состояний действующих непогашенных скидок.
// Непогашенной считается скидка в состоянии "Активна".
Функция СкидкиДляКупона(КодСкидки, ДатаЗапроса = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Период = ?(ЗначениеЗаполнено(ДатаЗапроса), ДатаЗапроса, ТекущаяДатаСеанса());
	ИспользоватьДисконтныйСервер = ПолучитьФункциональнуюОпцию("ИспользоватьДисконтныйСервер");
	Если ИспользоватьДисконтныйСервер Тогда
		Результат = ДисконтныйСервер.ТаблицаСкидокДляКупона(КодСкидки, Период);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СостоянияОднократныхСкидокИКупонов.Период КАК Период,
		|	СостоянияОднократныхСкидокИКупонов.Скидка КАК Скидка,
		|	СостоянияОднократныхСкидокИКупонов.Состояние КАК Состояние,
		|	СостоянияОднократныхСкидокИКупонов.Магазин КАК Магазин,
		|	СостоянияОднократныхСкидокИКупонов.ПериодДействия КАК ПериодДействия
		|ИЗ
		|	РегистрСведений.СостоянияОднократныхСкидокИКупонов.СрезПоследних(&Период, ИдентификаторСкидки = &ИдентификаторСкидки) КАК СостоянияОднократныхСкидокИКупонов
		|ГДЕ
		|	СостоянияОднократныхСкидокИКупонов.Скидка.СтатусДействия = &Действует
		|	И СостоянияОднократныхСкидокИКупонов.Состояние = &Активна
		|	И (СостоянияОднократныхСкидокИКупонов.ПериодДействия = &ПустаяДата
		|			ИЛИ СостоянияОднократныхСкидокИКупонов.ПериодДействия >= &Период)";
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.УстановитьПараметр("Действует", Перечисления.СтатусыДействияСкидок.Действует);
		Запрос.УстановитьПараметр("Активна", Перечисления.СостоянияОднократныхСкидок.Активна);
		Запрос.УстановитьПараметр("ИдентификаторСкидки", КодСкидки);
		Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101000000"));
		Результат = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция МассивПолучателей(ДисконтнаяКарта, Получатель = Неопределено, Контрагент = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Получатели = Новый Массив;
	Получатели.Добавить(ДисконтнаяКарта);
	ВидДисконтнойКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "ВидДисконтнойКарты");
	Если ЗначениеЗаполнено(ВидДисконтнойКарты) Тогда
		Получатели.Добавить(ВидДисконтнойКарты)
	КонецЕсли;
	
	Если Получатель <> Неопределено Тогда
		Получатели.Добавить(Получатель);
		
		ЗапросГруппыПолучателей = Новый Запрос;
		ЗапросГруппыПолучателей.Текст = "ВЫБРАТЬ
		|	СоставГруппПолучателейСкидки.ГруппаПолучателейСкидки КАК ГруппаПолучателей
		|ИЗ
		|	РегистрСведений.СоставГруппПолучателейСкидки КАК СоставГруппПолучателейСкидки
		|ГДЕ
		|	СоставГруппПолучателейСкидки.Получатель = &Получатель";
		ЗапросГруппыПолучателей.УстановитьПараметр("Получатель", Получатель);
		ВыборкаГруппыПолучателей = ЗапросГруппыПолучателей.Выполнить().Выбрать();
		Пока ВыборкаГруппыПолучателей.Следующий() Цикл
			Получатели.Добавить(ВыборкаГруппыПолучателей.ГруппаПолучателей);
		КонецЦикла;
	КонецЕсли;
	
	Если Контрагент <> Неопределено Тогда
		Получатели.Добавить(Контрагент);
		Если Контрагент <> Получатель Тогда
			ЗапросГруппыКонтрагентов = Новый Запрос;
			ЗапросГруппыКонтрагентов.Текст = "ВЫБРАТЬ
			|	СоставГруппПолучателейСкидки.ГруппаПолучателейСкидки КАК ГруппаПолучателей
			|ИЗ
			|	РегистрСведений.СоставГруппПолучателейСкидки КАК СоставГруппПолучателейСкидки
			|ГДЕ
			|	СоставГруппПолучателейСкидки.Получатель = &Получатель";
			ЗапросГруппыКонтрагентов.УстановитьПараметр("Получатель", Контрагент);
			ВыборкаГруппыКонтрагентов = ЗапросГруппыКонтрагентов.Выполнить().Выбрать();
			Пока ВыборкаГруппыКонтрагентов.Следующий() Цикл
				Получатели.Добавить(ВыборкаГруппыКонтрагентов.ГруппаПолучателей);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Получатели;
	
КонецФункции

Функция РассчитатьПоДокументу(Объект, ВходныеПараметры, ТипОбъекта)
	
	Если НЕ ВходныеПараметры.ТолькоСообщенияПослеОформления
		И ТипОбъекта <> "РеализацияТоваров" Тогда
		ОчиститьТоварыОтПодарков(Объект);
	КонецЕсли;
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		СкидкиНаценкиСервер.ОчиститьСкидкиВТЧ(Объект, "Товары");
		СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Товары");
	КонецЕсли;
	СкидкиНаценкиСервер.ПодготовитьДанныеОВыбранныхУправляемыхСкидках(Объект, ВходныеПараметры);
	Товары = Объект.Товары.Выгрузить();
	ДатаОбъекта = ДатаОбъекта(Объект);
	
	ПараметрыРасчета = Новый Структура;
	
	Для Каждого ВходнойПараметр Из ВходныеПараметры Цикл
		ПараметрыРасчета.Вставить(ВходнойПараметр.Ключ, ВходнойПараметр.Значение);
	КонецЦикла;
	
	ПараметрыРасчета.Вставить("Регистратор", Объект.Ссылка);
	ПараметрыРасчета.Вставить("Магазин", Объект.Магазин);
	
	РеквизитыМагазина = "ИспользоватьПрименениеЦен, ФорматМагазина, СегментИсключаемойНоменклатуры, СкладПродажи, ВидМинимальныхЦенПродажи, ПравилоЦенообразования";
	МагазинСРеквизитами = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Магазин, РеквизитыМагазина);
	
	ПараметрыРасчета.Вставить("ИспользоватьПрименениеЦен"     	, МагазинСРеквизитами.ИспользоватьПрименениеЦен);
	ПараметрыРасчета.Вставить("ФорматМагазина"                	, МагазинСРеквизитами.ФорматМагазина);
	ПараметрыРасчета.Вставить("СегментИсключаемойНоменклатуры"	, МагазинСРеквизитами.СегментИсключаемойНоменклатуры);
	ПараметрыРасчета.Вставить("СкладПродажи"            		, МагазинСРеквизитами.СкладПродажи);
	ПараметрыРасчета.Вставить("ВидМинимальныхЦенПродажи"		, МагазинСРеквизитами.ВидМинимальныхЦенПродажи);
	ПараметрыРасчета.Вставить("ПравилоЦенообразования"  		, МагазинСРеквизитами.ПравилоЦенообразования);
	
	ПараметрыРасчета.Вставить("ДеньНедели",   Перечисления.ДниНедели.Получить(ДеньНедели(Объект.Дата) - 1));
	ПараметрыРасчета.Вставить("ВремяОбъекта", ВремяОбъекта(Объект));
	
	ДисконтныеКарты = МаркетинговыеАкцииСервер.ПолучитьИсториюДисконтнойКарты(ДатаОбъекта, Объект.ДисконтнаяКарта, Истина);
	ПараметрыРасчета.Вставить("ДисконтныеКарты", ДисконтныеКарты);
	ПараметрыРасчета.Вставить("ДисконтнаяКартаПредъявлена", ЗначениеЗаполнено(Объект.ДисконтнаяКарта));
	Если ТипОбъекта = "ЧекККМ" И ПараметрыРасчета.ДисконтнаяКартаПредъявлена Тогда
		БонуснаяПрограммаЛояльности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДисконтнаяКарта, "БонуснаяПрограммаЛояльности");
		Если ЗначениеЗаполнено(БонуснаяПрограммаЛояльности) Тогда
			УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				БонуснаяПрограммаЛояльности,
				"УменьшатьСуммуЧекаДляСкидок");
				Если УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Null
					ИЛИ УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Неопределено Тогда
				УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Ложь;
			КонецЕсли;
		Иначе
			УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Ложь;
		КонецЕсли;
	Иначе
		УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Ложь;
	КонецЕсли;
	ПараметрыРасчета.Вставить("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов", УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов);
	
	ВладелецКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДисконтнаяКарта, "ВладелецКарты");
	Если ЗначениеЗаполнено(ВладелецКарты) Тогда
		ПараметрыРасчета.Вставить("ДеньРождения", МаркетинговыеАкцииСервер.ПолучитьБлижайшийДеньРождения(ДатаОбъекта, ВладелецКарты));
	КонецЕсли;
	
	Если ТипОбъекта = "ЧекККМ" Тогда
		ПорядковыйНомерПродажи = 0;
		ВходныеПараметры.Свойство("ПорядковыйНомерПродажи", ПорядковыйНомерПродажи);
		Если НЕ ЗначениеЗаполнено(ПорядковыйНомерПродажи)  Тогда
			ПорядковыйНомерПродажи = 0;
		КонецЕсли;
		ПараметрыРасчета.Вставить("ПорядковыйНомерПродажи", ПорядковыйНомерПродажи);
	Иначе
		ПараметрыРасчета.Вставить("ПорядковыйНомерПродажи", 0);
	КонецЕсли;

	// Скидки по типу получателя
	Если ТипОбъекта = "РеализацияТоваров" Тогда
		ПолучателиСкидок = МассивПолучателей(Объект.ДисконтнаяКарта, ВладелецКарты, Объект.Контрагент);
	Иначе
		ПолучателиСкидок = МассивПолучателей(Объект.ДисконтнаяКарта, ВладелецКарты);
	КонецЕсли;
	ПараметрыРасчета.Вставить("ПолучателиСкидок", ПолучателиСкидок);
	
	ПараметрыРасчета.Вставить("Товары", Товары);
	Если ТипОбъекта = "ЧекККМ" Тогда
		ПараметрыРасчета.Вставить("Оплата", Объект.Оплата.Выгрузить());
	КонецЕсли;
	ПараметрыРасчета.Вставить("ТекущаяДата", ДатаОбъекта);
	Если ТипОбъекта = "РеализацияТоваров" Тогда
		ПараметрыРасчета.Вставить("РасчетПодарков", Ложь);
		ПараметрыРасчета.Вставить("РасчетСообщений", Ложь);
	Иначе
		ПараметрыРасчета.Вставить("РасчетПодарков", Истина);
		ПараметрыРасчета.Вставить("РасчетСообщений", Истина);
		ПараметрыРасчета.Вставить("ЕстьПодаркиВТЧ", Истина);
	КонецЕсли;
	ПараметрыРасчета.Вставить("ТолькоСообщенияПослеОформления", ВходныеПараметры.ТолькоСообщенияПослеОформления);
	
	ПримененныеСкидкиНаценки = СкидкиНаценкиСервер.ДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту И НЕ ВходныеПараметры.ТолькоСообщенияПослеОформления Тогда
		Если ПримененныеСкидкиНаценки.Свойство("ТаблицаБонусов") Тогда
			Объект.БонусныеБаллыКНачислению.Очистить();
			Для Каждого СтрокаБонуса Из ПримененныеСкидкиНаценки.ТаблицаБонусов Цикл
				НоваяСтрока = Объект.БонусныеБаллыКНачислению.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБонуса);
			КонецЦикла;
		КонецЕсли;
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Товары", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, ТипОбъекта = "ЧекККМ");
		Если ТипОбъекта <> "РеализацияТоваров" Тогда
			ТаблицаПодарковНаВыбор = ПримененныеСкидкиНаценки.ТаблицаПодарков.СкопироватьКолонки();
			ПрименитьРезультатРасчетаСкидокПодарковКОбъекту(Объект, ПримененныеСкидкиНаценки.ТаблицаПодарков, ТаблицаПодарковНаВыбор, ТипОбъекта);
			Если ТаблицаПодарковНаВыбор.Количество() > 0 Тогда
				ПримененныеСкидкиНаценки.Вставить("ТаблицаПодарковНаВыбор", ТаблицаПодарковНаВыбор);
			КонецЕсли;
			Если ВходныеПараметры.Свойство("ПеренестиСкидкиПодаркиВТовары") Тогда
				ПеренестиСкидкиПодаркиВТовары(Объект, Объект.ЦенаВключаетНДС, ПримененныеСкидкиНаценки,,, ТипОбъекта = "ЧекККМ");
			КонецЕсли;
		КонецЕсли;
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции

Процедура ПроверитьЗаполнениеЯчейкиСтрокиПодарка(СтрокаПодарка, ИмяКолонки, ПредставлениеКолонки, ЕстьОшибки)
	Если НЕ ЗначениеЗаполнено(СтрокаПодарка[ИмяКолонки]) Тогда
		СтрокаСообщения = НСтр("ru = 'Невозможно перенести подарок из строки %1 в товары: не заполнена колонка ""%2""'");
		ЕстьОшибки = Истина;
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаПодарка.НомерСтроки, ПредставлениеКолонки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрокаСообщения,
			,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Подарки", СтрокаПодарка.НомерСтроки, ИмяКолонки),
			"Объект");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьРезультатРасчетаСкидокПодарковКОбъекту(Объект, ТаблицаПодарков, ТаблицаПодарковНаВыбор, ТипОбъекта) 
	
	Объект.Подарки.Очистить();
	Если ТипОбъекта = "ЧекККМ" Тогда
		Объект.СерииПодарков.Очистить();
	КонецЕсли;
	
	Для Каждого СтрокаПодарка Из ТаблицаПодарков Цикл
		Если СтрокаПодарка.ПодарокИзСписка Тогда
		    НоваяСтрока = ТаблицаПодарковНаВыбор.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодарка);
		Иначе
		    НоваяСтрока = Объект.Подарки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодарка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПараметрСуммыНакопления(СтрокаШаблонаУровень2, ДокументСсылка, РеквизитыДокумента)
	КлючЭлемента = Неопределено;
	Для Каждого СтрокаСоответствия Из СтрокаШаблонаУровень2 Цикл
		КлючЭлемента = СтрокаСоответствия.Ключ;
	КонецЦикла;
	Если КлючЭлемента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если КлючЭлемента.Элемент = "%%Скидки.СуммаНакопления%%" Тогда
		Если РеквизитыДокумента = Неопределено Тогда
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Ссылка, Дата, Проведен, ВидОперации, ДисконтнаяКарта, СтатусЧекаККМ, ОтчетОРозничныхПродажах");
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыДокумента.ДисконтнаяКарта) Тогда
			ОбработатьПараметрСуммыНакопления(РеквизитыДокумента, КлючЭлемента);
			ЗначениеЭлемента = Новый Массив;
			ЗначениеЭлемента.Добавить(КлючЭлемента.Элемент);
			СтрокаШаблонаУровень2.Очистить(); 
			СтрокаШаблонаУровень2.Вставить(КлючЭлемента, ЗначениеЭлемента);
		Иначе
			СтрокаШаблонаУровень2.Очистить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьПараметрНакопленныхБаллов(СтрокаШаблонаУровень2, ДокументСсылка, РеквизитыДокумента)
	КлючЭлемента = Неопределено;
	Для Каждого СтрокаСоответствия Из СтрокаШаблонаУровень2 Цикл
		КлючЭлемента = СтрокаСоответствия.Ключ;
	КонецЦикла;
	Если КлючЭлемента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если КлючЭлемента.Элемент = "%%Скидки.НакопленоБаллов%%" Тогда
		Если РеквизитыДокумента = Неопределено Тогда
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Ссылка, Дата, Проведен, ВидОперации, ДисконтнаяКарта, СтатусЧекаККМ, ОтчетОРозничныхПродажах");
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыДокумента.ДисконтнаяКарта) Тогда
			БонуснаяПрограмма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
									РеквизитыДокумента.ДисконтнаяКарта,
									"БонуснаяПрограммаЛояльности");
			Если ЗначениеЗаполнено(БонуснаяПрограмма) Тогда
				ОбработатьПараметрНакопленныхБаллов(РеквизитыДокумента, КлючЭлемента);
				ЗначениеЭлемента = Новый Массив;
				ЗначениеЭлемента.Добавить(КлючЭлемента.Элемент);
				СтрокаШаблонаУровень2.Очистить(); 
				СтрокаШаблонаУровень2.Вставить(КлючЭлемента, ЗначениеЭлемента);
			КонецЕсли;
		Иначе
			СтрокаШаблонаУровень2.Очистить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьПараметрСуммыНакопления(РеквизитыДокумента, КлючЭлемента)
	
	Если РеквизитыДокумента.Дата = НачалоДня(ТекущаяДатаСеанса()) Тогда
		РеквизитыДокумента.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	СуммаНакопления = СуммаНакопленияПоКартеДляПечатиЧека(РеквизитыДокумента);

	Если ПустаяСтрока(КлючЭлемента.Префикс) Тогда
		Префикс = НСтр("ru = 'Сумма накопления:'") + " ";
	Иначе
		Префикс = КлючЭлемента.Префикс;
		КлючЭлемента.Префикс = "";
	КонецЕсли;
	Если ПустаяСтрока(КлючЭлемента.Постфикс) Тогда
		Постфикс = " " + НСтр("ru = 'руб.'");
	Иначе
		Постфикс = КлючЭлемента.Постфикс;
		КлючЭлемента.Постфикс = "";
	КонецЕсли;
	Если КлючЭлемента.ТипЭлемента <> "СтрокаТекста" Тогда
		КлючЭлемента.ТипЭлемента = "СтрокаТекста";
	КонецЕсли;
	Если ЗначениеЗаполнено(КлючЭлемента.Формат) Тогда
		КлючЭлемента.Элемент = Префикс + Формат(СуммаНакопления, КлючЭлемента.Формат) + Постфикс;
	Иначе
		КлючЭлемента.Элемент = Префикс + СуммаНакопления + Постфикс;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПараметрНакопленныхБаллов(РеквизитыДокумента, КлючЭлемента)
	
	Если РеквизитыДокумента.Дата = НачалоДня(ТекущаяДатаСеанса()) Тогда
		РеквизитыДокумента.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	НакопленоБаллов = БонусныеБаллыСервер.КоличествоНакопленныхБалловДляПечатиЧека(РеквизитыДокумента);

	Если ПустаяСтрока(КлючЭлемента.Префикс) Тогда
		Префикс = НСтр("ru = 'Накоплено бонусов:'") + " ";
	Иначе
		Префикс = КлючЭлемента.Префикс;
		КлючЭлемента.Префикс = "";
	КонецЕсли;
	Если ПустаяСтрока(КлючЭлемента.Постфикс) Тогда
		Постфикс = "";
	Иначе
		Постфикс = КлючЭлемента.Постфикс;
		КлючЭлемента.Постфикс = "";
	КонецЕсли;
	Если КлючЭлемента.ТипЭлемента <> "СтрокаТекста" Тогда
		КлючЭлемента.ТипЭлемента = "СтрокаТекста";
	КонецЕсли;
	Если ЗначениеЗаполнено(КлючЭлемента.Формат) Тогда
		КлючЭлемента.Элемент = Префикс + Формат(НакопленоБаллов, КлючЭлемента.Формат) + Постфикс;
	Иначе
		КлючЭлемента.Элемент = Префикс + НакопленоБаллов + Постфикс;
	КонецЕсли;
	
КонецПроцедуры

Функция ПустаяСтруктураДанныхПредыдущейПокупки()
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Дата", Дата(1, 1, 1, 0, 0, 0));
	СтруктураДанных.Вставить("Сумма", 0);
	СтруктураДанных.Вставить("Количество", 0);
	Возврат СтруктураДанных;
КонецФункции

Функция СтрокаПродажиПоСтрокеВозврата(ТаблицаПродаж, СтрокаВозврата, ДопПолеПоиска = Неопределено)
	
	СтрокаПродажи = Неопределено;
	
	СтруктураОтбора = Новый Структура;
	Если ДопПолеПоиска <> Неопределено Тогда
		СтруктураОтбора.Вставить(ДопПолеПоиска, СтрокаВозврата[ДопПолеПоиска]);
	КонецЕсли;
	СтруктураОтбора.Вставить("Номенклатура", СтрокаВозврата.Номенклатура);
	СтруктураОтбора.Вставить("Характеристика", СтрокаВозврата.Характеристика);
	СтруктураОтбора.Вставить("Цена", СтрокаВозврата.Цена);
	СтруктураОтбора.Вставить("Упаковка", СтрокаВозврата.Упаковка);
	СтрокиПродаж = ТаблицаПродаж.НайтиСтроки(СтруктураОтбора);
	Если СтрокиПродаж.Количество() > 0 Тогда
		СтрокаПродажи = СтрокиПродаж[0];
	Иначе
		СтруктураОтбора = Новый Структура;
		Если ДопПолеПоиска <> Неопределено Тогда
			СтруктураОтбора.Вставить(ДопПолеПоиска, СтрокаВозврата[ДопПолеПоиска]);
		КонецЕсли;
		СтруктураОтбора.Вставить("Номенклатура", СтрокаВозврата.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", СтрокаВозврата.Характеристика);
		СтруктураОтбора.Вставить("Цена", СтрокаВозврата.Цена);
		СтрокиПродаж = ТаблицаПродаж.НайтиСтроки(СтруктураОтбора);
		Если СтрокиПродаж.Количество() > 0 Тогда
			СтрокаПродажи = СтрокиПродаж[0];
		Иначе
			СтруктураОтбора = Новый Структура;
			Если ДопПолеПоиска <> Неопределено Тогда
				СтруктураОтбора.Вставить(ДопПолеПоиска, СтрокаВозврата[ДопПолеПоиска]);
			КонецЕсли;
			СтруктураОтбора.Вставить("Номенклатура", СтрокаВозврата.Номенклатура);
			СтруктураОтбора.Вставить("Характеристика", СтрокаВозврата.Характеристика);
			СтрокиПродаж = ТаблицаПродаж.НайтиСтроки(СтруктураОтбора);
			Если СтрокиПродаж.Количество() > 0 Тогда
				СтрокаПродажи = СтрокиПродаж[0];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат СтрокаПродажи;
	
КонецФункции

Процедура ОбработатьСтрокуВозвратаПоПродаже(СтрокаВозврата, СтрокаПродажи)
	
	Если СтрокаПродажи = Неопределено
		ИЛИ СтрокаПродажи.Количество = 0
		ИЛИ СтрокаВозврата.Количество = 0 Тогда
		Возврат;
	Иначе
		
		Если ЗначениеЗаполнено(СтрокаВозврата.Упаковка) Тогда
			КоэффициентУпаковки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаВозврата.Упаковка, "Коэффициент");
			Если КоэффициентУпаковки = 0 Тогда
				КоэффициентУпаковки = 1;
			КонецЕсли;
		Иначе
			КоэффициентУпаковки = 1;
		КонецЕсли;
		СтрокаВозврата.Цена = СтрокаПродажи.Цена * КоэффициентУпаковки / ?(СтрокаПродажи.Коэффициент = 0, 1, СтрокаПродажи.Коэффициент);
		
		КоэффициентСтроки = Мин(СтрокаВозврата.Количество / СтрокаПродажи.Количество, 1);
		
		СтрокаВозврата.Сумма = СтрокаВозврата.Цена * СтрокаВозврата.КоличествоУпаковок;
		
		СтрокаВозврата.СуммаАвтоматическойСкидки = Окр(СтрокаПродажи.СуммаАвтоматическойСкидки * КоэффициентСтроки, 2);
		СтрокаВозврата.СуммаРучнойСкидки = Окр(СтрокаПродажи.СуммаРучнойСкидки * КоэффициентСтроки, 2);
		СтрокаВозврата.СуммаСкидкиОплатыБонусом = Окр(СтрокаПродажи.СуммаСкидкиОплатыБонусом * КоэффициентСтроки, 2);
		
		СтрокаВозврата.Сумма = СтрокаВозврата.Сумма
								- СтрокаВозврата.СуммаАвтоматическойСкидки
								- СтрокаВозврата.СуммаРучнойСкидки
								- СтрокаВозврата.СуммаСкидкиОплатыБонусом;
		
		СтрокаПродажи.Количество = Макс(СтрокаПродажи.Количество - СтрокаПродажи.Количество, 0);
		СтрокаПродажи.СуммаАвтоматическойСкидки = СтрокаПродажи.СуммаАвтоматическойСкидки - СтрокаВозврата.СуммаАвтоматическойСкидки;
		СтрокаПродажи.СуммаРучнойСкидки = СтрокаПродажи.СуммаРучнойСкидки - СтрокаВозврата.СуммаРучнойСкидки;
		СтрокаПродажи.СуммаСкидкиОплатыБонусом = СтрокаПродажи.СуммаСкидкиОплатыБонусом - СтрокаВозврата.СуммаСкидкиОплатыБонусом;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВремяОбъекта(Объект)
	
	ТекущаяДата = ДатаОбъекта(Объект);
	ТекущееВремя = '00010101' + (ТекущаяДата - НачалоДня(ТекущаяДата));
	
	Возврат ТекущееВремя;
	
КонецФункции

Функция ДатаОбъекта(Объект)
	
	ТекущаяДата = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДатаСеанса());
	
	Возврат ТекущаяДата;
	
КонецФункции

Процедура ПроверитьПараметрНачисленныхБаллов(СтрокаШаблонаУровень2, ДокументСсылка, РеквизитыДокумента)
	КлючЭлемента = Неопределено;
	Для Каждого СтрокаСоответствия Из СтрокаШаблонаУровень2 Цикл
		КлючЭлемента = СтрокаСоответствия.Ключ;
	КонецЦикла;
	Если КлючЭлемента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если КлючЭлемента.Элемент = "%%Скидки.НачисленоБаллов%%" Тогда
		УдалятьЭлемент = Ложь;
		ОбработатьПараметрНачисленныхБаллов(ДокументСсылка, КлючЭлемента, УдалятьЭлемент);
		Если УдалятьЭлемент Тогда
			СтрокаШаблонаУровень2.Очистить();
		Иначе
			ЗначениеЭлемента = Новый Массив;
			ЗначениеЭлемента.Добавить(КлючЭлемента.Элемент);
			СтрокаШаблонаУровень2.Очистить(); 
			СтрокаШаблонаУровень2.Вставить(КлючЭлемента, ЗначениеЭлемента);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьПараметрНачисленныхБаллов(ДокументСсылка, КлючЭлемента, УдалятьЭлемент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачисленоПоДокументу = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ТаблицаНачислено.КоличествоБонусныхБаллов) КАК КоличествоБаллов
	|ИЗ
	|	Документ.ЧекККМ.БонусныеБаллыКНачислению КАК ТаблицаНачислено
	|ГДЕ
	|	ТаблицаНачислено.Ссылка = &Ссылка
	|	И ТаблицаНачислено.ДатаНачисления <> &ПустаяДата";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101000000"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НачисленоПоДокументу = Выборка.КоличествоБаллов;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НачисленоПоДокументу) Тогда
		Если ПустаяСтрока(КлючЭлемента.Префикс) Тогда
			Префикс = НСтр("ru = 'Начислено бонусов:'") + " ";
		Иначе
			Префикс = КлючЭлемента.Префикс;
			КлючЭлемента.Префикс = "";
		КонецЕсли;
		Если ПустаяСтрока(КлючЭлемента.Постфикс) Тогда
			Постфикс = "";
		Иначе
			Постфикс = КлючЭлемента.Постфикс;
			КлючЭлемента.Постфикс = "";
		КонецЕсли;
		Если КлючЭлемента.ТипЭлемента <> "СтрокаТекста" Тогда
			КлючЭлемента.ТипЭлемента = "СтрокаТекста";
		КонецЕсли;
		Если ЗначениеЗаполнено(КлючЭлемента.Формат) Тогда
			КлючЭлемента.Элемент = Префикс + Формат(НачисленоПоДокументу, КлючЭлемента.Формат) + Постфикс;
		Иначе
			КлючЭлемента.Элемент = Префикс + НачисленоПоДокументу + Постфикс;
		КонецЕсли;
	Иначе
		УдалятьЭлемент = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти
