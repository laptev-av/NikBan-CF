////////////////////////////////////////////////////////////////////////////////
// БонусныеБаллыСервер: модуль содержит процедуры и функции для работы
//  					с бонусными системами лояльности.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Запускает автоматическое начисление и списание баллов и контролирует результат.
// 
// Параметры:
//   ПравилоНачисления (СправочникСсылка.ПравилаНачисленияБонусныхБаллов) - правила начисления баллов.
//
Процедура ВыполнитьАвтоматическоеНачислениеИСписаниеРегламентноеЗадание(ПравилоНачисления) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.АвтоматическоеНачислениеИСписаниеБонусныхБаллов);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПравилоНачисления) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСобытия = НСтр("ru = 'Автоматическое начисление и списание бонусных баллов. Запуск по расписанию'",
						ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ПравилоНачисленияМетаданные = ПравилоНачисления.Метаданные();
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПравилоНачисления,
		"ПометкаУдаления, Наименование");
	
	Если Реквизиты.ПометкаУдаления Тогда
		ПодробностиОшибки = НСтр("ru = 'Элемент автоматического начисления и списания бонусных баллов ""%1"" помечен на удаление'");
		ПодробностиОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодробностиОшибки, Реквизиты.Наименование);
		ЗаписьЖурналаРегистрации(ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
			ПравилоНачисленияМетаданные,
			ПравилоНачисления,
			ПодробностиОшибки);
		Возврат;
	КонецЕсли;
	
	Попытка
		БонусныеБаллыСервер.ВыполнитьАвтоматическоеНачислениеИСписание(ПравилоНачисления);
	Исключение
		ПодробностиОшибки = НСтр("ru = 'Ошибка автоматического начисления и списания бонусных баллов для правила ""%1"":'");
		ПодробностиОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодробностиОшибки, Реквизиты.Наименование);
		ПодробностиОшибки = ПодробностиОшибки + Символы.ПС + ОписаниеОшибки();
		
		ЗаписьЖурналаРегистрации(ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,
			ПравилоНачисленияМетаданные,
			ПравилоНачисления,
			ПодробностиОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьАвтоматическоеНачислениеИСписание(ПравилоНачисления) Экспорт
	
	ДатаНачисления = ТекущаяДатаСеанса();
	
	ТаблицаНачислениеИСписание = ТаблицаНачислениеИСписание(ПравилоНачисления, ДатаНачисления);

	Если ТаблицаНачислениеИСписание.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументНачисления = Документы.НачислениеИСписаниеБонусныхБаллов.СоздатьДокумент();
	ДокументНачисления.Дата = ДатаНачисления;
	ДокументНачисления.ПравилоНачисления = ПравилоНачисления;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Правила.Владелец КАК БонуснаяПрограммаЛояльности,
	|	Правила.ПериодДействия КАК ПериодДействия,
	|	Правила.КоличествоПериодовДействия КАК КоличествоПериодовДействия,
	|	Правила.КоличествоПериодовОтсрочкиНачалаДействия КАК КоличествоПериодовОтсрочки,
	|	Правила.ПериодОтсрочкиНачалаДействия КАК ПериодОтсрочкиНачалаДействия,
	|	Правила.ВидПравила КАК ВидПравила
	|ИЗ
	|	Справочник.ПравилаНачисленияБонусныхБаллов КАК Правила
	|ГДЕ
	|	Правила.Ссылка = &ПравилоНачисления");
	
	Запрос.УстановитьПараметр("ПравилоНачисления", ПравилоНачисления);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Если Выборка.Следующий() Тогда
	
		ДокументНачисления.БонуснаяПрограммаЛояльности = Выборка.БонуснаяПрограммаЛояльности;
		
		ДокументНачисления.КоличествоПериодовДействия = Выборка.КоличествоПериодовДействия;
		ДокументНачисления.КоличествоПериодовОтсрочкиНачалаДействия = Выборка.КоличествоПериодовОтсрочки;
		ДокументНачисления.ПериодОтсрочкиНачалаДействия = Выборка.ПериодОтсрочкиНачалаДействия;
		ДокументНачисления.ПериодДействия = Выборка.ПериодДействия;
		ДокументНачисления.ДатаОкончанияСрокаДействия = Неопределено;
		Если Выборка.ВидПравила = Перечисления.ВидыПравилНачисленияБонусныхБаллов.Списание Тогда
			ИмяТаблицы = "Списание";
			ДополнительнаяКолонка = ТаблицаНачислениеИСписание.Колонки.Найти("БаллыКСписанию");
			Если ДополнительнаяКолонка <> Неопределено Тогда
				ЗаполнятьДополнительнуюКолонку = Истина;
			КонецЕсли;
		Иначе
			ИмяТаблицы = "Начисление";
			ЗаполнятьДополнительнуюКолонку = Ложь;
		КонецЕсли;
		
	Иначе
		ИмяТаблицы = "Начисление";
		ЗаполнятьДополнительнуюКолонку = Ложь;
	КонецЕсли;
	

	Для Каждого СтрокаТЧ Из ТаблицаНачислениеИСписание Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ДисконтнаяКарта) Тогда
			НоваяСтрока = ДокументНачисления[ИмяТаблицы].Добавить();
			НоваяСтрока.ДисконтнаяКарта = СтрокаТЧ.ДисконтнаяКарта;
			НоваяСтрока.Баллы = СтрокаТЧ.КоличествоБаллов;
			Если ЗаполнятьДополнительнуюКолонку Тогда
				НоваяСтрока.БаллыКСписанию = СтрокаТЧ.БаллыКСписанию;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если ДокументНачисления.Начисление.Количество() > 0
		ИЛИ ДокументНачисления.Списание.Количество() > 0 Тогда
		ДокументНачисления.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаНачислениеИСписание(ПравилоНачисления, Дата) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ПравилоНачисления.СхемаКомпоновкиДанных КАК СхемаКомпоновкиДанных,
	|	ПравилоНачисления.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
	|	ПравилоНачисления.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных,
	|	ПравилоНачисления.Владелец КАК БонуснаяПрограммаЛояльности
	|ИЗ
	|	Справочник.ПравилаНачисленияБонусныхБаллов КАК ПравилоНачисления
	|ГДЕ
	|	ПравилоНачисления.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ПравилоНачисления);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если Выборка.ХранилищеСхемыКомпоновкиДанных <> Неопределено Тогда
		СхемаКомпоновкиДанных = Выборка.ХранилищеСхемыКомпоновкиДанных.Получить();
		Если СхемаКомпоновкиДанных = Неопределено Тогда
			Если ЗначениеЗаполнено(Выборка.СхемаКомпоновкиДанных) Тогда
				СхемаКомпоновкиДанных = Справочники.ПравилаНачисленияБонусныхБаллов.ПолучитьМакет(Выборка.СхемаКомпоновкиДанных);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Выборка.СхемаКомпоновкиДанных) Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаНачисленияБонусныхБаллов.ПолучитьМакет(Выборка.СхемаКомпоновкиДанных);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();


	// Подготовка компоновщика макета компоновки данных, загрузка настроек.
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));

	Если НастройкиКомпоновкиДанных <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;

	Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ТекущаяДата");
	Если Параметр <> Неопределено Тогда
		Параметр.Использование = Истина;
		Параметр.Значение = Дата;
	КонецЕсли;

	Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПустаяДата");
	Если Параметр <> Неопределено Тогда
		Параметр.Использование = Истина;
		Параметр.Значение = Дата("00010101000000");
	КонецЕсли;

	Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоЭтогоГода");
	Если Параметр <> Неопределено Тогда
		Параметр.Использование = Истина;
		Параметр.Значение = НачалоГода(Дата);
	КонецЕсли;

	Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПрошлогоГода");
	Если Параметр <> Неопределено Тогда
		Параметр.Использование = Истина;
		Параметр.Значение = НачалоГода(НачалоГода(Дата) - 1);
	КонецЕсли;

	Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоСледующегоГода");
	Если Параметр <> Неопределено Тогда
		Параметр.Использование = Истина;
		Параметр.Значение = КонецГода(Дата) + 1;
	КонецЕсли;

	Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("АвтоматическоеНачисление");
	Если Параметр <> Неопределено Тогда
		Параметр.Использование = Истина;
		Параметр.Значение = ПравилоНачисления;
	КонецЕсли;

	Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("БонуснаяПрограммаЛояльности");
	Если Параметр <> Неопределено Тогда
		Параметр.Использование = Истина;
		Параметр.Значение = Выборка.БонуснаяПрограммаЛояльности;
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

	ДанныеОтчета = Новый ТаблицаЗначений();
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	Возврат ДанныеОтчета;
	
КонецФункции

Функция ОстаткиИДвиженияБонусныхБаллов(ДисконтнаяКарта, ДатаЗапроса = Неопределено) Экспорт
	
	Если ДатаЗапроса = Неопределено Тогда
		ДатаЗапроса = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДисконтныйСервер") Тогда
		ЕстьОшибкиДисконтногоСервера = Ложь;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДатаЗапроса", ДатаЗапроса);
		ОстаткиБонусныхБаллов = ДисконтныйСервер.ОстатокБонусовПоКартеРасширенный(ДисконтнаяКарта, СтруктураПараметров, ЕстьОшибкиДисконтногоСервера);
	Иначе
		ОстаткиБонусныхБаллов = ТаблицаОстаткиИДвиженияБонусныхБаллов(ДисконтнаяКарта, ДатаЗапроса);
	КонецЕсли;
	
	Возврат ОстаткиБонусныхБаллов;
	
КонецФункции

Функция ТаблицаОстаткиИДвиженияБонусныхБаллов(ДисконтнаяКарта, ДатаЗапроса) Экспорт
	
	Если ДатаЗапроса = Неопределено Тогда
		ДатаЗапроса = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ОстаткиБонусныхБаллов = Новый ТаблицаЗначений;
	ОстаткиБонусныхБаллов.Колонки.Добавить("Период");
	ОстаткиБонусныхБаллов.Колонки.Добавить("Сумма");
	ОстаткиБонусныхБаллов.Колонки.Добавить("Изменение");
	ОстаткиБонусныхБаллов.Колонки.Добавить("ТекущийОстаток");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИнформационныеКарты.Ссылка КАК ДисконтнаяКарта,
	|	ИнформационныеКарты.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности
	|ПОМЕСТИТЬ КартыИПрограммы
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|ГДЕ
	|	ИнформационныеКарты.Ссылка В(&ДисконтныеКарты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""Сейчас"" КАК Период,
	|	ВЫБОР
	|		КОГДА БонусныеБаллыОстаткиИОбороты.НачисленоОстаток - ВЫБОР КОГДА БонусныеБаллыОстаткиИОбороты.КСписаниюОстаток > 0 ТОГДА БонусныеБаллыОстаткиИОбороты.КСписаниюОстаток ИНАЧЕ 0 КОНЕЦ >= 0
	|			ТОГДА БонусныеБаллыОстаткиИОбороты.НачисленоОстаток - ВЫБОР КОГДА БонусныеБаллыОстаткиИОбороты.КСписаниюОстаток > 0 ТОГДА БонусныеБаллыОстаткиИОбороты.КСписаниюОстаток ИНАЧЕ 0 КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ НачальныйОстаток
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы.Остатки(
	|			&ДатаНачала,
	|			(ДисконтнаяКарта, БонуснаяПрограммаЛояльности) В
	|				(ВЫБРАТЬ
	|					КартыИПрограммы.ДисконтнаяКарта,
	|					КартыИПрограммы.БонуснаяПрограммаЛояльности
	|				ИЗ
	|					КартыИПрограммы КАК КартыИПрограммы)) КАК БонусныеБаллыОстаткиИОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Сейчас"",
	|	0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачальныйОстаток.Период КАК Период,
	|	СУММА(НачальныйОстаток.Сумма) КАК Сумма
	|ИЗ
	|	НачальныйОстаток КАК НачальныйОстаток
	|
	|СГРУППИРОВАТЬ ПО
	|	НачальныйОстаток.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БонусныеБаллыОстаткиИОбороты.ПериодДень КАК Период,
	|	ВЫБОР
	|		КОГДА БонусныеБаллыОстаткиИОбороты.НачисленоКонечныйОстаток - ВЫБОР КОГДА БонусныеБаллыОстаткиИОбороты.КСписаниюКонечныйОстаток > 0 ТОГДА БонусныеБаллыОстаткиИОбороты.КСписаниюКонечныйОстаток ИНАЧЕ 0 КОНЕЦ >= 0
	|			ТОГДА БонусныеБаллыОстаткиИОбороты.НачисленоКонечныйОстаток - ВЫБОР КОГДА БонусныеБаллыОстаткиИОбороты.КСписаниюКонечныйОстаток > 0 ТОГДА БонусныеБаллыОстаткиИОбороты.КСписаниюКонечныйОстаток ИНАЧЕ 0 КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы.ОстаткиИОбороты(
	|			&ДатаНачала,
	|			,
	|			Авто,
	|			Движения,
	|			(ДисконтнаяКарта, БонуснаяПрограммаЛояльности) В
	|				(ВЫБРАТЬ
	|					КартыИПрограммы.ДисконтнаяКарта,
	|					КартыИПрограммы.БонуснаяПрограммаЛояльности
	|				ИЗ
	|					КартыИПрограммы КАК КартыИПрограммы)) КАК БонусныеБаллыОстаткиИОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");

	Запрос.УстановитьПараметр("ДатаНачала", ДатаЗапроса);
	КартаДляНакоплений = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "КартаДляНакоплений");
	Если ЗначениеЗаполнено(КартаДляНакоплений) Тогда
		ДисконтныеКарты = МаркетинговыеАкцииСервер.ПолучитьИсториюДисконтнойКарты(ДатаЗапроса, КартаДляНакоплений, Истина);
	Иначе
		ДисконтныеКарты = МаркетинговыеАкцииСервер.ПолучитьИсториюДисконтнойКарты(ДатаЗапроса, ДисконтнаяКарта, Истина);
	КонецЕсли;
	Запрос.УстановитьПараметр("ДисконтныеКарты", ДисконтныеКарты);
	
	Результат = Запрос.ВыполнитьПакет();
	
	НачальныйОстатокВБаллах = 0;
	
	// Текущий остаток
	Выборка = Результат[2].Выбрать();
	ТекущийОстаток = 0;
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ОстаткиБонусныхБаллов.Добавить();
		НоваяСтрока.Период = Выборка.Период;
		НоваяСтрока.Сумма = Выборка.Сумма;
		НачальныйОстатокВБаллах = НоваяСтрока.Сумма;
		ТекущийОстаток = НоваяСтрока.Сумма;
		НоваяСтрока.Изменение = 0;
		НоваяСтрока.ТекущийОстаток = Истина;
		
	КонецЦикла;
	
	// Списания баллов
	Выборка = Результат[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Изменение = Выборка.Сумма - ТекущийОстаток;
		
		Если Изменение = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеДней = НСтр("ru = ';%1 день;;%1 дня;%1 дней;%1 дня'");
		ПредставлениеБаллов = НСтр("ru = ';%1 балл;;%1 балла;%1 баллов;%1 балла'");
		
		НоваяСтрока = ОстаткиБонусныхБаллов.Добавить();
		РазницаДней = Цел((НачалоДня(Выборка.Период) - НачалоДня(ТекущаяДатаСеанса())) / 86400);
		Если Изменение > 0 Тогда
			НоваяСтрока.Период = НСтр("ru = 'Начисление через'")
			                   + " " + СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеДней, РазницаДней)
			                   + " " + "("+Формат(Выборка.Период,"ДЛФ=D")+"):"
			                   + " " + СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеБаллов, Изменение)
		Иначе
			НоваяСтрока.Период = НСтр("ru = 'Списание через'")
			                   + " " + СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеДней, РазницаДней)
			                   + " " + "("+Формат(Выборка.Период,"ДЛФ=D")+"):"
			                   + " " + СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеБаллов, - Изменение)
		КонецЕсли;
		
		НоваяСтрока.Сумма = Выборка.Сумма;
		НоваяСтрока.Изменение = Изменение;
		ТекущийОстаток = Выборка.Сумма;
		НоваяСтрока.ТекущийОстаток = Ложь;
		
	КонецЦикла;
	
	Возврат ОстаткиБонусныхБаллов;
	
КонецФункции

// Процедура формирования движений по регистру "История подарочных сертификатов".
//
// Параметры:
//	ДополнительныеСвойства - Структура дополнительный свойств.
//	Движения - Коллекция движений.
//	Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьБонусныеБаллы(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаБонусныеБаллы;
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.БонусныеБаллы.Записывать = Истина;
	Движения.БонусныеБаллы.Загрузить(Таблица);

КонецПроцедуры

// Процедура вызывается из подписки на событие СторнироватьБонусныеБаллыПоДокументу
// перед записью документа.
// Входящие параметры:
//		Источник - Документ объект ВозвратТоваровОтПокупателя, ЧекККМ.
//		Отказ - Признак отказа от записи.
//					Если в теле процедуры-обработчика установить данному параметру значение Истина,
//					то запись выполнена не будет и будет вызвано исключение.
//		РежимЗаписи - В параметр передается режим записи документа.
//						Позволяет определить в теле процедуры режим записи.
//						Изменение значения параметра позволяет изменить режим записи.
//		РежимПроведения - В данный параметр передается режим проведения.
//							Изменение значения параметра позволяет изменить режим проведения.
Процедура СторнироватьБонусныеБаллыПоДокументуПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности") Тогда
		
		НужноСторнировать = Ложь;
		БонуснаяПрограммаЛояльности = Справочники.БонусныеПрограммыЛояльности.ПустаяСсылка();
		Если ЗначениеЗаполнено(Источник.ДисконтнаяКарта) Тогда
			БонуснаяПрограммаЛояльности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.ДисконтнаяКарта, "БонуснаяПрограммаЛояльности");
			Если ЗначениеЗаполнено(БонуснаяПрограммаЛояльности) Тогда
				Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
					НужноСторнировать = Истина;
				ИначеЕсли ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ЧекККМ")
					И Источник.СтатусЧекаККМ <> Перечисления.СтатусыЧековККМ.Архивный
					И Источник.СтатусЧекаККМ <> Перечисления.СтатусыЧековККМ.Аннулированный
					И Источник.СтатусЧекаККМ <> Перечисления.СтатусыЧековККМ.Отложенный
					И ЗначениеЗаполнено(Источник.ДисконтнаяКарта)
					И Источник.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
					НужноСторнировать = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НужноСторнировать Тогда
			
			СторнироватьБонусныеБаллыПоДокументу(Источник, Источник.ДисконтнаяКарта, БонуснаяПрограммаЛояльности);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция рассчитывает дату начала и дату окончания действия бонусной скидки
// на указанную дату, а также получает значения остальных реквизитов элемента.
// Входящие параметры:
//		СкидкаНаценка - ссылка на элемент справочника СкидкиНаценки, параметры которого рассчитываются.
//		Дата - дата, в соответствии с которой рассчитываются дата начала действия и дата окончания.
// Возвращаемое значение:
//		СтруктураРезультата - структура, содержащая значения реквизитов.
Функция ПараметрыБонуснойСкидкиНаценки(СкидкаНаценка, Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СкидкиНаценки.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	СкидкиНаценки.КурсКонвертацииБонусовВВалюту КАК КурсКонвертацииБонусовВВалюту,
	|	СкидкиНаценки.СегментНоменклатуры КАК СегментНоменклатуры,
	|	СкидкиНаценки.ВидОплаты КАК ВидОплаты,
	|	СкидкиНаценки.ЗапретНачисленияБалловПриОплатеБонусами КАК ЗапретНачисленияБалловПриОплатеБонусами,
	|	СкидкиНаценки.СпособПредоставления КАК СпособПредоставления,
	|	СкидкиНаценки.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки,
	|	ВЫБОР
	|		КОГДА СкидкиНаценки.КоличествоПериодовОтсрочкиНачалаДействия = 0
	|			ТОГДА СкидкиНаценки.ДатаНачисления
	|		КОГДА СкидкиНаценки.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(СкидкиНаценки.ДатаНачисления, ДЕНЬ, СкидкиНаценки.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА СкидкиНаценки.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(СкидкиНаценки.ДатаНачисления, НЕДЕЛЯ, СкидкиНаценки.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА СкидкиНаценки.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(СкидкиНаценки.ДатаНачисления, МЕСЯЦ, СкидкиНаценки.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА СкидкиНаценки.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(СкидкиНаценки.ДатаНачисления, КВАРТАЛ, СкидкиНаценки.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА СкидкиНаценки.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(СкидкиНаценки.ДатаНачисления, ГОД, СкидкиНаценки.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА СкидкиНаценки.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(СкидкиНаценки.ДатаНачисления, ДЕКАДА, СкидкиНаценки.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА СкидкиНаценки.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(СкидкиНаценки.ДатаНачисления, ПОЛУГОДИЕ, СкидкиНаценки.КоличествоПериодовОтсрочкиНачалаДействия)
	|		ИНАЧЕ СкидкиНаценки.ДатаНачисления
	|	КОНЕЦ КАК ДатаНачисления,
	|	ВЫБОР
	|		КОГДА СкидкиНаценки.КоличествоПериодовОтсрочкиНачалаДействия = 0
	|			ТОГДА СкидкиНаценки.ДатаСписания
	|		КОГДА СкидкиНаценки.ДатаСписания = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА СкидкиНаценки.ДатаСписания
	|		КОГДА СкидкиНаценки.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(СкидкиНаценки.ДатаСписания, ДЕНЬ, СкидкиНаценки.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА СкидкиНаценки.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(СкидкиНаценки.ДатаСписания, НЕДЕЛЯ, СкидкиНаценки.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА СкидкиНаценки.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(СкидкиНаценки.ДатаСписания, МЕСЯЦ, СкидкиНаценки.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА СкидкиНаценки.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(СкидкиНаценки.ДатаСписания, КВАРТАЛ, СкидкиНаценки.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА СкидкиНаценки.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(СкидкиНаценки.ДатаСписания, ГОД, СкидкиНаценки.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА СкидкиНаценки.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(СкидкиНаценки.ДатаСписания, ДЕКАДА, СкидкиНаценки.КоличествоПериодовОтсрочкиНачалаДействия)
	|		КОГДА СкидкиНаценки.ПериодОтсрочкиНачалаДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(СкидкиНаценки.ДатаСписания, ПОЛУГОДИЕ, СкидкиНаценки.КоличествоПериодовОтсрочкиНачалаДействия)
	|		ИНАЧЕ СкидкиНаценки.ДатаСписания
	|	КОНЕЦ КАК ДатаСписания
	|ИЗ
	|	(ВЫБРАТЬ
	|		СкидкиНаценки.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|		СкидкиНаценки.БонуснаяПрограммаЛояльности.КурсКонвертацииБонусовВВалюту КАК КурсКонвертацииБонусовВВалюту,
	|		СкидкиНаценки.БонуснаяПрограммаЛояльности.СегментНоменклатуры КАК СегментНоменклатуры,
	|		СкидкиНаценки.БонуснаяПрограммаЛояльности.ВидОплаты КАК ВидОплаты,
	|		СкидкиНаценки.БонуснаяПрограммаЛояльности.ЗапретНачисленияБалловПриОплатеБонусами КАК ЗапретНачисленияБалловПриОплатеБонусами,
	|		СкидкиНаценки.СпособПредоставления КАК СпособПредоставления,
	|		СкидкиНаценки.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки,
	|		&Период КАК ДатаНачисления,
	|		ВЫБОР
	|			КОГДА СкидкиНаценки.КоличествоПериодовДействия = 0
	|				ТОГДА ДатаВремя(1, 1, 1)
	|			КОГДА СкидкиНаценки.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, СкидкиНаценки.КоличествоПериодовДействия)
	|			КОГДА СкидкиНаценки.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, НЕДЕЛЯ, СкидкиНаценки.КоличествоПериодовДействия)
	|			КОГДА СкидкиНаценки.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, СкидкиНаценки.КоличествоПериодовДействия)
	|			КОГДА СкидкиНаценки.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, КВАРТАЛ, СкидкиНаценки.КоличествоПериодовДействия)
	|			КОГДА СкидкиНаценки.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, ГОД, СкидкиНаценки.КоличествоПериодовДействия)
	|			КОГДА СкидкиНаценки.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, ДЕКАДА, СкидкиНаценки.КоличествоПериодовДействия)
	|			КОГДА СкидкиНаценки.ПериодДействия = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|				ТОГДА ДОБАВИТЬКДАТЕ(&Период, ПОЛУГОДИЕ, СкидкиНаценки.КоличествоПериодовДействия)
	|			ИНАЧЕ ДатаВремя(1, 1, 1)
	|		КОНЕЦ КАК ДатаСписания,
	|		СкидкиНаценки.ПериодОтсрочкиНачалаДействия КАК ПериодОтсрочкиНачалаДействия,
	|		СкидкиНаценки.КоличествоПериодовОтсрочкиНачалаДействия КАК КоличествоПериодовОтсрочкиНачалаДействия
	|	ИЗ
	|		Справочник.СкидкиНаценки КАК СкидкиНаценки
	|	ГДЕ
	|		СкидкиНаценки.Ссылка = &СкидкаНаценка) КАК СкидкиНаценки";
	Запрос.УстановитьПараметр("СкидкаНаценка", СкидкаНаценка);
	Запрос.УстановитьПараметр("Период", НачалоДня(Дата));
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("БонуснаяПрограммаЛояльности");
	СтруктураРезультата.Вставить("КурсКонвертацииБонусовВВалюту", 0);
	СтруктураРезультата.Вставить("СегментНоменклатуры");
	СтруктураРезультата.Вставить("ВидОплаты");
	СтруктураРезультата.Вставить("ЗапретНачисленияБалловПриОплатеБонусами");
	СтруктураРезультата.Вставить("СпособПредоставления");
	СтруктураРезультата.Вставить("ЗначениеСкидкиНаценки", 0);
	СтруктураРезультата.Вставить("ДатаНачисления");
	СтруктураРезультата.Вставить("ДатаСписания");
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРезультата, Выборка);
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Процедура начисляет бонусы по группе совместного применения.
//
Процедура НачислитьБонусыПоГруппеСовместногоПрименения(СтрокаДерева, Параметры, ВерхнийУровень, ИтоговаяТаблицаДанных = Неопределено) Экспорт
	
	ТаблицаДанных = ОбъединитьТаблицыДанныхПодчиненныхСтрок(СтрокаДерева);
	Сложение = Ложь;
	
	Если ВерхнийУровень Тогда
		ТаблицаДанных.Сортировать("КлючСвязи");
		Сложение = Истина;
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
		ТаблицаДанных.Сортировать("КлючСвязи, РеквизитДопУпорядочивания");
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум Тогда
		ТаблицаДанных.Сортировать("КлючСвязи, КоличествоБонусныхБаллов Убыв, РеквизитДопУпорядочивания");
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Минимум Тогда
		ТаблицаДанных.Сортировать("КлючСвязи, КоличествоБонусныхБаллов Возр, РеквизитДопУпорядочивания");
	Иначе
		ТаблицаДанных.Сортировать("КлючСвязи");
		Сложение = Истина;
	КонецЕсли;
	
	ТЗ = ПустаяТаблицаБонусовПриРасчетеСкидок();
	
	КлючСвязи = -1;
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Если СтрокаТаблицы.КлючСвязи <> КлючСвязи Тогда
			
			НоваяСтрокаТЗ = ТЗ.Добавить();
			НоваяСтрокаТЗ.КлючСвязи = СтрокаТаблицы.КлючСвязи;
			НоваяСтрокаТЗ.КоличествоБонусныхБаллов = СтрокаТаблицы.КоличествоБонусныхБаллов;
			
			НоваяСтрокаТЗ.Расшифровка = ПустаяТаблицаРасшифровкиБонусовПриРасчетеСкидок();
			Для Каждого СтрокаРасшифровки Из СтрокаТаблицы.Расшифровка Цикл
				НоваяСтрокаРасшифровки = НоваяСтрокаТЗ.Расшифровка.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРасшифровки, СтрокаРасшифровки);
			КонецЦикла;
			
			КлючСвязи = СтрокаТаблицы.КлючСвязи;
			
		Иначе
			
			Если Сложение Тогда
				НоваяСтрокаТЗ.КоличествоБонусныхБаллов = НоваяСтрокаТЗ.КоличествоБонусныхБаллов + СтрокаТаблицы.КоличествоБонусныхБаллов;
				Для Каждого СтрокаРасшифровки Из СтрокаТаблицы.Расшифровка Цикл
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ.Расшифровка.Добавить(), СтрокаРасшифровки);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВерхнийУровень Тогда
		ИтоговаяТаблицаДанных = ТЗ;
	Иначе
		СтрокаДерева.ТаблицаБонусов = ТЗ;
	КонецЕсли;
	
КонецПроцедуры

// Функция подготавливает пустую таблицу бонусов
// при расчете.
Функция ПустаяТаблицаБонусовПриРасчетеСкидок() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("КлючСвязи",                 ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповЧисла(5, 0));
	ТаблицаДанных.Колонки.Добавить("КоличествоБонусныхБаллов",  ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаДанных.Колонки.Добавить("Расшифровка",               Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаДанных.Колонки.Добавить("РеквизитДопУпорядочивания", ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповЧисла(5, 0));
	
	Возврат ТаблицаДанных;
КонецФункции

// Функция подготавливает пустую таблицу расшифровки
// для расчета бонусов.
Функция ПустаяТаблицаРасшифровкиБонусовПриРасчетеСкидок() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("КлючСвязи", ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповЧисла(5, 0));
	ТаблицаДанных.Колонки.Добавить("ДисконтнаяКарта", Новый ОписаниеТипов("СправочникСсылка.ИнформационныеКарты"));
	ТаблицаДанных.Колонки.Добавить("БонуснаяПрограммаЛояльности", Новый ОписаниеТипов("СправочникСсылка.БонусныеПрограммыЛояльности"));
	ТаблицаДанных.Колонки.Добавить("СкидкаНаценка", Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
	ТаблицаДанных.Колонки.Добавить("ДатаНачисления", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ДатаСписания", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("КоличествоБонусныхБаллов", ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаДанных.Колонки.Добавить("Сегмент", Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры"));
	
	Возврат ТаблицаДанных;
КонецФункции

// Обновляет табличную Части скидки.
//
// Параметры:
//  Объект - Чек ККМ или Реализация Товаров.
//  ИмяТЧ - Имя табличной части.
//  ИмяОсновнойТЧ - Имя табличной части.
//
Процедура ОбновитьОтображениеБонусов(
			Объект,
			ИмяОсновнойТЧ = "Товары",
			ИмяТЧ = "БонусныеБаллыКНачислению",
			ИмяКлюча = "КлючСвязи") Экспорт

	ОсновнаяТаблица = Объект[ИмяОсновнойТЧ].Выгрузить();
	
	Для Каждого СтрокаБонуса Из Объект[ИмяТЧ] Цикл
		
		КлючСвязи = СтрокаБонуса.КлючСвязи;
		
		СтрокаОсновнойТаблицы = ОсновнаяТаблица.Найти(КлючСвязи, ИмяКлюча);
		
		Если НЕ СтрокаОсновнойТаблицы = Неопределено Тогда
		
			СтрокаБонуса.Номенклатура               = СтрокаОсновнойТаблицы.Номенклатура;
			СтрокаБонуса.Характеристика             = СтрокаОсновнойТаблицы.Характеристика;
			СтрокаБонуса.ХарактеристикиИспользуются = СтрокаОсновнойТаблицы.ХарактеристикиИспользуются
			
		КонецЕсли;
		
	КонецЦикла;
	

КонецПроцедуры

// Процедура очищает суммы бонусов в таблице товаров
// и увеличивает общую сумму.
Процедура ОчиститьОплатуБонусамиВТоварах(Объект) Экспорт
	ЕстьИзмененияТаблицы = Ложь;
	Для Каждого СтрокаТовара Из Объект.Товары Цикл
		Если СтрокаТовара.СуммаСкидкиОплатыБонусом <> 0 Тогда
			СтрокаТовара.Сумма = СтрокаТовара.Сумма + СтрокаТовара.СуммаСкидкиОплатыБонусом;
			СтрокаТовара.СуммаСкидкиОплатыБонусом = 0;
			СтрокаТовара.СуммаНДС = ОбработкаТабличнойЧастиТоварыСервер.РассчитатьСуммуНДС(СтрокаТовара.Сумма, СтрокаТовара.СтавкаНДС, Объект.ЦенаВключаетНДС);
			ЕстьИзмененияТаблицы = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьИзмененияТаблицы Тогда
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	КонецЕсли;
КонецПроцедуры

//
Функция КоличествоНакопленныхБалловДляПечатиЧека(РеквизитыДокумента) Экспорт
	
	КоличествоБаллов = 0;
	ЕстьОшибкиДисконтногоСервера = Ложь;
	Если РеквизитыДокумента.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный Тогда
		ДатаЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДокумента.ОтчетОРозничныхПродажах, "Дата") + 1;
	Иначе
		ДатаЗапроса = РеквизитыДокумента.Дата;
	КонецЕсли;
	ИспользоватьДисконтныйСервер = ПолучитьФункциональнуюОпцию("ИспользоватьДисконтныйСервер");
	Если ИспользоватьДисконтныйСервер Тогда
		ДопПараметры = ДисконтныйСервер.СтруктураДопПараметровЗапросаОБонусахДисконтномуСерверу();
		// Запрос к дисконтному серверу идет на дату запроса, следовательно без учета текущего документа.
		ДопПараметры.ДатаЗапроса = ДатаЗапроса;
		ДанныеНакоплений = ДисконтныйСервер.ОстатокБонусовПоКарте(РеквизитыДокумента.ДисконтнаяКарта, ДопПараметры, ЕстьОшибкиДисконтногоСервера);
		КоличествоБаллов = ДанныеНакоплений.КоличествоБаллов;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИнформационныеКарты.Ссылка КАК ДисконтнаяКарта,
		|	ИнформационныеКарты.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности
		|ПОМЕСТИТЬ КартыИПрограммы
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|ГДЕ
		|	ИнформационныеКарты.Ссылка В(&ДисконтныеКарты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(БонусныеБаллы.НачисленоОстаток), 0) КАК НачисленоОстаток,
		|	ЕСТЬNULL(СУММА(БонусныеБаллы.КСписаниюОстаток), 0) КАК КСписаниюОстаток
		|ИЗ
		|	РегистрНакопления.БонусныеБаллы.Остатки(
		|			&ДатаЗапроса,
		|			(ДисконтнаяКарта, БонуснаяПрограммаЛояльности) В
		|				(ВЫБРАТЬ
		|					КартыИПрограммы.ДисконтнаяКарта,
		|					КартыИПрограммы.БонуснаяПрограммаЛояльности
		|				ИЗ
		|					КартыИПрограммы КАК КартыИПрограммы)) КАК БонусныеБаллы";
		
		Запрос.УстановитьПараметр("ДатаЗапроса", ДатаЗапроса + 1);
		КартаДляНакоплений = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДокумента.ДисконтнаяКарта, "КартаДляНакоплений");
		Если ЗначениеЗаполнено(КартаДляНакоплений) Тогда
			ДисконтныеКарты = МаркетинговыеАкцииСервер.ПолучитьИсториюДисконтнойКарты(ДатаЗапроса, КартаДляНакоплений, Истина);
		Иначе
			ДисконтныеКарты = МаркетинговыеАкцииСервер.ПолучитьИсториюДисконтнойКарты(ДатаЗапроса, РеквизитыДокумента.ДисконтнаяКарта, Истина);
		КонецЕсли;
		Запрос.УстановитьПараметр("ДисконтныеКарты", ДисконтныеКарты);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НачисленоОстаток = ?(Выборка.НачисленоОстаток < 0, 0, Выборка.НачисленоОстаток);
			КСписаниюОстаток = ?(Выборка.КСписаниюОстаток < 0, 0, Выборка.КСписаниюОстаток);
			РазницаБаллов = НачисленоОстаток - КСписаниюОстаток;
			КоличествоБаллов = ?(РазницаБаллов < 0, 0, РазницаБаллов);
		КонецЕсли;
	КонецЕсли;
	
	Если (ИспользоватьДисконтныйСервер
			И (НЕ ЕстьОшибкиДисконтногоСервера)
			И (НЕ РеквизитыДокумента.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный))
		ИЛИ НЕ РеквизитыДокумента.Проведен Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(&Коэффициент * ЧекККМОплата.КоличествоБонусов), 0) КАК КоличествоБонусов,
		|	ЕСТЬNULL(СУММА(&Коэффициент * ЧекККМОплата.КоличествоБонусовВСкидках), 0) КАК КоличествоБонусовВСкидках
		|ИЗ
		|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
		|ГДЕ
		|	ЧекККМОплата.Ссылка = &Ссылка
		|	И ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой)";
		Запрос.УстановитьПараметр("Ссылка", РеквизитыДокумента.Ссылка);
		Запрос.УстановитьПараметр("Коэффициент", ?(РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат, -1, 1));
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			КоличествоБаллов = КоличествоБаллов - Выборка.КоличествоБонусов - Выборка.КоличествоБонусовВСкидках;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КоличествоБаллов;
	
КонецФункции

// Процедура распределяет сумму оплаты и количество бонусов
// по вспомогательной таблице товаров при оплате бонусами
// входящие параметры:
//	ТаблицаРаспределения - таблица значений - таблица с товарами, в которой производится распределение.
//	СуммаОплаты - число - сумма для распределения в рублях.
//	СуммаОплатыВБаллах - число - сумма для распределения в бонусных баллах.
Процедура РаспределитьСуммуОплатыПоТоварам(ТаблицаРаспределения, СуммаОплаты, СуммаОплатыВБаллах) Экспорт
	
	ОсталосьРаспределить = СуммаОплаты;
	ОсталосьРаспределитьБонусов = СуммаОплатыВБаллах;
	МаксимальнаяСуммаВТаблице = ТаблицаРаспределения.Итог("МаксимальнаяСуммаОплаты");
	МаксимальнаяСуммаВРаспределении = 0;
	СтрокаДляРаспределения = Неопределено;
	
	Для Каждого СтрокаРаспределения Из ТаблицаРаспределения Цикл
		
		Если СтрокаРаспределения.МаксимальнаяСуммаОплаты > МаксимальнаяСуммаВРаспределении Тогда
			МаксимальнаяСуммаВРаспределении = СтрокаРаспределения.МаксимальнаяСуммаОплаты;
			СтрокаДляРаспределения = СтрокаРаспределения;
		КонецЕсли;
		КоэффициентСтроки = СтрокаРаспределения.МаксимальнаяСуммаОплаты / МаксимальнаяСуммаВТаблице;
		СтрокаРаспределения.КоличествоБонусовОплачено = Окр(СуммаОплатыВБаллах * КоэффициентСтроки, 2);
		СтрокаРаспределения.СуммаОплачено = Окр(СуммаОплаты * КоэффициентСтроки, 2);
		
		ОсталосьРаспределить = ОсталосьРаспределить - СтрокаРаспределения.СуммаОплачено;
		ОсталосьРаспределитьБонусов = ОсталосьРаспределитьБонусов - СтрокаРаспределения.КоличествоБонусовОплачено;
		
	КонецЦикла;
	
	Если ОсталосьРаспределить <> 0 И СтрокаДляРаспределения <> 0 Тогда
		СтрокаДляРаспределения.СуммаОплачено = СтрокаДляРаспределения.СуммаОплачено + ОсталосьРаспределить;
	КонецЕсли;
	
	Если ОсталосьРаспределитьБонусов <> 0 И СтрокаДляРаспределения <> 0 Тогда
		СтрокаДляРаспределения.КоличествоБонусовОплачено = СтрокаДляРаспределения.КоличествоБонусовОплачено + ОсталосьРаспределитьБонусов;
	КонецЕсли;
	
КонецПроцедуры

// Функция рассчитывает максимальные суммы по сегменту и ценовым группам
// и подготавливает таблицу для распределения оплаты бонусными баллами.
Функция ТаблицаМаксимальныхСуммОплаты(ТабличнаяЧастьТовары, БонуснаяПрограммаЛояльности, Магазин) Экспорт
	
	СегментОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БонуснаяПрограммаЛояльности, "СегментНоменклатуры");
	СегментОграничения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "СегментИсключаемойНоменклатуры");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БонуснаяПрограммаЛояльности", БонуснаяПрограммаЛояльности);
	Запрос.УстановитьПараметр("Товары", ТабличнаяЧастьТовары);
	ТекстЗапроса = "";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Организация КАК Организация,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество КАК Количество,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Сумма КАК Сумма
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|";
	ИмяТаблицыТоваров = "Товары";
	
	Если ЗначениеЗаполнено(СегментОплаты) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Организация КАК Организация,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Количество КАК Количество,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	Товары.Сумма КАК Сумма
		|ПОМЕСТИТЬ ТоварыССегментомОплаты
		|ИЗ
		|	" + ИмяТаблицыТоваров + " КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|		ПО Товары.Номенклатура = НоменклатураСегмента.Номенклатура
		|		И Товары.Характеристика = НоменклатураСегмента.Характеристика
		|			И (НоменклатураСегмента.Сегмент = &Сегмент)
		|";
		Запрос.УстановитьПараметр("Сегмент", СегментОплаты);
		ИмяТаблицыТоваров = "ТоварыССегментомОплаты";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СегментОграничения) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Организация КАК Организация,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Количество КАК Количество,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	Товары.Сумма КАК Сумма
		|ПОМЕСТИТЬ ТоварыССегментомОграничения
		|ИЗ
		|	" + ИмяТаблицыТоваров + " КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|		ПО Товары.Номенклатура = НоменклатураСегмента.Номенклатура
		|		И Товары.Характеристика = НоменклатураСегмента.Характеристика
		|			И (НоменклатураСегмента.Сегмент = &СегментОграничения)
		|ГДЕ
		|	НоменклатураСегмента.Номенклатура ЕСТЬ NULL
		|";
		Запрос.УстановитьПараметр("СегментОграничения", СегментОграничения);
		ИмяТаблицыТоваров = "ТоварыССегментомОграничения";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|		Товары.НомерСтроки КАК НомерСтроки,
	|		Товары.Организация КАК Организация,
	|		Товары.Номенклатура КАК Номенклатура,
	|		Товары.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|		Товары.Характеристика КАК Характеристика,
	|		Товары.Количество КАК Количество,
	|		Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|		ЕСТЬNULL(Товары.Упаковка.Коэффициент, 0) КАК КоэффициентУпаковки,
	|		Товары.Сумма КАК Сумма,
	|		ЕСТЬNULL(БонусныеПрограммыЛояльности.МаксимальныйПроцентОплатыБонусами, 0) КАК ПроцентОбщий,
	|		ЕСТЬNULL(ТабличнаяЧастьЦеновыеГруппы.МаксимальныйПроцентОплатыБонусами, 0) КАК ПроцентГруппы
	|	ПОМЕСТИТЬ Проценты
	|	ИЗ
	|		" + ИмяТаблицыТоваров + " КАК Товары
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БонусныеПрограммыЛояльности КАК БонусныеПрограммыЛояльности
	|			ПО (БонусныеПрограммыЛояльности.Ссылка = &БонуснаяПрограммаЛояльности)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БонусныеПрограммыЛояльности.ЦеновыеГруппы КАК ТабличнаяЧастьЦеновыеГруппы
	|			ПО (ТабличнаяЧастьЦеновыеГруппы.Ссылка = &БонуснаяПрограммаЛояльности)
	|				И (ТабличнаяЧастьЦеновыеГруппы.ЦеноваяГруппа = Товары.Номенклатура.ЦеноваяГруппа)
	|ГДЕ
	|		НЕ (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|		ИЛИ (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|				И Товары.Номенклатура.ДоговорПлатежногоАгента <> ЗНАЧЕНИЕ(Справочник.ДоговорыПлатежныхАгентов.ПустаяСсылка)))
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ВидМинимальныхЦенПродажи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "ВидМинимальныхЦенПродажи");
	Если ЗначениеЗаполнено(ВидМинимальныхЦенПродажи) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Проценты.НомерСтроки КАК НомерСтроки,
		|	Проценты.Организация КАК Организация,
		|	Проценты.Номенклатура КАК Номенклатура,
		|	Проценты.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	Проценты.Характеристика КАК Характеристика,
		|	Проценты.Сумма КАК Сумма,
		|	Проценты.Сумма * ВЫБОР
		|		КОГДА Проценты.ПроцентГруппы = 0
		|			ТОГДА Проценты.ПроцентОбщий / 100
		|		ИНАЧЕ Проценты.ПроцентГруппы / 100
		|	КОНЕЦ КАК МаксимальнаяСуммаОплаты,
		|	Проценты.Количество * ЕСТЬNULL(Цены.Цена, 0) * ЕСТЬNULL(Цены.Упаковка.Коэффициент, 1) КАК МинимальнаяСумма,
		|	Проценты.ПроцентГруппы КАК ПроцентГруппы,
		|	Проценты.ПроцентОбщий КАК ПроцентОбщий
		|ПОМЕСТИТЬ ПроцентыСЦенами
		|ИЗ
		|	Проценты КАК Проценты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ВидМинимальныхЦенПродажи) КАК Цены
		|		ПО Проценты.Номенклатура = Цены.Номенклатура
		|			И Проценты.Характеристика = Цены.Характеристика
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Проценты.НомерСтроки КАК НомерСтроки,
		|	Проценты.Организация КАК Организация,
		|	Проценты.Номенклатура КАК Номенклатура,
		|	Проценты.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	Проценты.Характеристика КАК Характеристика,
		|	Проценты.Сумма КАК Сумма,
		|	ВЫБОР
		|		КОГДА Проценты.МинимальнаяСумма <= Проценты.Сумма - Проценты.МаксимальнаяСуммаОплаты
		|			ТОГДА Проценты.МаксимальнаяСуммаОплаты
		|		ИНАЧЕ Проценты.Сумма - Проценты.МинимальнаяСумма
		|	КОНЕЦ КАК МаксимальнаяСуммаОплаты,
		|	ВЫБОР
		|		КОГДА Проценты.МинимальнаяСумма <= Проценты.Сумма - Проценты.МаксимальнаяСуммаОплаты
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОграниченаМинимальнойЦеной,
		|	0 КАК СуммаОплачено,
		|	0 КАК КоличествоБонусовОплачено,
		|	Проценты.ПроцентГруппы КАК ПроцентГруппы,
		|	Проценты.ПроцентОбщий КАК ПроцентОбщий
		|ИЗ
		|	ПроцентыСЦенами КАК Проценты";
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("ВидМинимальныхЦенПродажи", ВидМинимальныхЦенПродажи);
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Проценты.НомерСтроки КАК НомерСтроки,
		|	Проценты.Организация КАК Организация,
		|	Проценты.Номенклатура КАК Номенклатура,
		|	Проценты.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	Проценты.Характеристика КАК Характеристика,
		|	Проценты.Сумма КАК Сумма,
		|	Проценты.Сумма * ВЫБОР
		|		КОГДА Проценты.ПроцентГруппы = 0
		|			ТОГДА Проценты.ПроцентОбщий / 100
		|		ИНАЧЕ Проценты.ПроцентГруппы / 100
		|	КОНЕЦ КАК МаксимальнаяСуммаОплаты,
		|	ЛОЖЬ КАК ОграниченаМинимальнойЦеной,
		|	0 КАК СуммаОплачено,
		|	0 КАК КоличествоБонусовОплачено,
		|	Проценты.ПроцентГруппы КАК ПроцентГруппы,
		|	Проценты.ПроцентОбщий КАК ПроцентОбщий
		|ИЗ
		|	Проценты КАК Проценты
		|";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Процедура ОбъединитьТаблицыБонусовПриОплате(
	ТаблицаБонусныеБаллы,
	ТаблицаОплатыБонусами,
	РезультатЗапроса,
	ПериодБонусов,
	ЭтоОтчетОПродажах = Ложь,
	ЕстьЗамены = Ложь,
	ТаблицаСоответствийЗамен = Неопределено) Экспорт
	
	ТаблицаБонусовНачальная = ТаблицаБонусныеБаллы.Скопировать();
	Если ЭтоОтчетОПродажах Тогда
		ТаблицаБаллыКЗакрытию = РезультатЗапроса[2].Выгрузить();
		ТаблицаБаллыКСписанию = РезультатЗапроса[3].Выгрузить();
	Иначе
		ТаблицаБаллыКЗакрытию = РезультатЗапроса[1].Выгрузить();
		ТаблицаБаллыКСписанию = РезультатЗапроса[2].Выгрузить();
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОплатыБонусами Цикл
		СуммаОплаты = СтрокаТаблицы.Начислено;
		
		Для Каждого СтрокаКЗакрытию Из ТаблицаБаллыКЗакрытию Цикл
			Если СтрокаКЗакрытию.ОстатокБаллов <= 0 Тогда
				Продолжить;
			КонецЕсли;
			Если ЭтоОтчетОПродажах Тогда
				Если ЕстьЗамены Тогда
					// Надо дополнительно проверять соответствие по таблице замен
					Если СтрокаКЗакрытию.ДисконтнаяКарта <> СтрокаТаблицы.ДисконтнаяКарта Тогда
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("ДисконтнаяКарта", СтрокаТаблицы.ДисконтнаяКарта);
						СтруктураПоиска.Вставить("ПредокКарты", СтрокаКЗакрытию.ДисконтнаяКарта);
						СтрокиЗамен = ТаблицаСоответствийЗамен.НайтиСтроки(СтруктураПоиска);
						Если СтрокиЗамен.Количество() = 0 Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				Иначе
					// Просто проверяем по соответствию карты
					Если СтрокаКЗакрытию.ДисконтнаяКарта <> СтрокаТаблицы.ДисконтнаяКарта Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если СуммаОплаты > СтрокаКЗакрытию.ОстатокБаллов Тогда
				СуммаОплатыСтроки = СтрокаКЗакрытию.ОстатокБаллов;
				СтрокаКЗакрытию.ОстатокБаллов = 0;
				СуммаОплаты = СуммаОплаты - СуммаОплатыСтроки;
			Иначе
				СуммаОплатыСтроки = СуммаОплаты;
				СтрокаКЗакрытию.ОстатокБаллов = СтрокаКЗакрытию.ОстатокБаллов - СуммаОплатыСтроки;
				СуммаОплаты = 0;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаБонусныеБаллы.Добавить();
			НоваяСтрока.Период = ПериодБонусов;
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяСтрока.БонуснаяПрограммаЛояльности = СтрокаКЗакрытию.БонуснаяПрограммаЛояльности;
			НоваяСтрока.ДисконтнаяКарта = СтрокаКЗакрытию.ДисконтнаяКарта;
			НоваяСтрока.Начислено = СуммаОплатыСтроки;
			НоваяСтрока.КСписанию = 0;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ДисконтнаяКарта", СтрокаКЗакрытию.ДисконтнаяКарта);
			СтруктураПоиска.Вставить("БонуснаяПрограммаЛояльности", СтрокаКЗакрытию.БонуснаяПрограммаЛояльности);
			СтрокиСписания = ТаблицаБаллыКСписанию.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаКСписанию Из СтрокиСписания Цикл
				Если СтрокаКСписанию.КСписанию <= 0 Тогда
					Продолжить;
				КонецЕсли;
				Если СуммаОплатыСтроки > СтрокаКСписанию.КСписанию Тогда
					СуммаКСписанию = СтрокаКСписанию.КСписанию;
					СтрокаКСписанию.КСписанию = 0;
					СуммаОплатыСтроки = СуммаОплатыСтроки - СуммаКСписанию;
				Иначе
					СуммаКСписанию = СуммаОплатыСтроки;
					СтрокаКСписанию.КСписанию = СтрокаКСписанию.КСписанию - СуммаКСписанию;
					СуммаОплатыСтроки = 0;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаБонусныеБаллы.Добавить();
				НоваяСтрока.Период = СтрокаКСписанию.Период;
				НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
				НоваяСтрока.БонуснаяПрограммаЛояльности = СтрокаКСписанию.БонуснаяПрограммаЛояльности;
				НоваяСтрока.ДисконтнаяКарта = СтрокаКСписанию.ДисконтнаяКарта;
				НоваяСтрока.Начислено = 0;
				НоваяСтрока.КСписанию = СуммаКСписанию;
				НоваяСтрока.ДатаПервоначальногоНачисления = СтрокаКСписанию.ДатаПервоначальногоНачисления;
				
				Если СуммаОплатыСтроки <= 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СуммаОплаты <= 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СуммаОплаты > 0 Тогда
			НоваяСтрока = ТаблицаБонусныеБаллы.Добавить();
			НоваяСтрока.Период = ПериодБонусов;
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяСтрока.БонуснаяПрограммаЛояльности = СтрокаТаблицы.БонуснаяПрограммаЛояльности;
			НоваяСтрока.ДисконтнаяКарта = СтрокаТаблицы.ДисконтнаяКарта;
			НоваяСтрока.Начислено = СуммаОплаты;
			НоваяСтрока.КСписанию = 0;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ДисконтнаяКарта", СтрокаТаблицы.ДисконтнаяКарта);
			СтрокиКСписанию = ТаблицаБонусовНачальная.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаКСписанию Из СтрокиКСписанию Цикл
				Если СуммаОплаты > СтрокаКСписанию.КСписанию Тогда
					СуммаКСписанию = СтрокаКСписанию.КСписанию;
					СтрокаКСписанию.КСписанию = 0;
					СуммаОплаты = СуммаОплаты - СуммаКСписанию;
				Иначе
					СуммаКСписанию = СуммаОплаты;
					СтрокаКСписанию.КСписанию = СтрокаКСписанию.КСписанию - СуммаКСписанию;
					СуммаОплаты = 0;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаБонусныеБаллы.Добавить();
				НоваяСтрока.Период = СтрокаКСписанию.Период;
				НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
				НоваяСтрока.БонуснаяПрограммаЛояльности = СтрокаКСписанию.БонуснаяПрограммаЛояльности;
				НоваяСтрока.ДисконтнаяКарта = СтрокаКСписанию.ДисконтнаяКарта;
				НоваяСтрока.Начислено = 0;
				НоваяСтрока.КСписанию = СуммаКСписанию;
				НоваяСтрока.ДатаПервоначальногоНачисления = СтрокаКСписанию.ДатаПервоначальногоНачисления;
				Если СуммаОплаты <= 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры

Процедура ПровестиОтчетыОПродажахПриОбмене(МассивОтчетовОРозничныхПродажах, ТекущийУзел) Экспорт
	
	Если МассивОтчетовОРозничныхПродажах.Количество() > 0 Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка,
		|	ОтчетОРозничныхПродажах.Дата КАК Дата,
		|	ОтчетОРозничныхПродажах.МоментВремени КАК МоментВремени
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|ГДЕ
		|	ОтчетОРозничныхПродажах.Ссылка В(&МассивДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	МоментВремени");
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивОтчетовОРозничныхПродажах);
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			БонусныеБаллы = РегистрыНакопления.БонусныеБаллы.СоздатьНаборЗаписей();
			БонусныеБаллы.Отбор.Регистратор.Установить(Выборка.Ссылка);
			
			ДополнительныеСвойстваОбъекта = Новый Структура;
			ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Выборка.Ссылка, ДополнительныеСвойстваОбъекта);
			
			Документы.ОтчетОРозничныхПродажах.ИнициализироватьДанныеДокумента(Выборка.Ссылка, ДополнительныеСвойстваОбъекта);
			
			ТаблицаДвижений = ДополнительныеСвойстваОбъекта.ТаблицыДляДвижений.ТаблицаБонусныеБаллы;
			
			Если ТаблицаДвижений.Колонки.Найти("Регистратор") = Неопределено Тогда
				ТаблицаДвижений.Колонки.Добавить("Регистратор");
				ТаблицаДвижений.ЗаполнитьЗначения(Выборка.Ссылка, "Регистратор");
			КонецЕсли;
			
			БонусныеБаллы.Загрузить(ТаблицаДвижений);
			
			Попытка
			
				БонусныеБаллы.ОбменДанными.Отправитель = ТекущийУзел;
				БонусныеБаллы.Записать();
				
			Исключение
				
				Инфо = ИнформацияОбОшибке();
				ТекстСообщенияОбОшибке = НСтр("ru = 'Ошибка при формировании бонусных баллов документа: %1. 
				|При загрузке данных из магазина: %2'");
				ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, КраткоеПредставлениеОшибки(Инфо), ТекущийУзел);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными.Загрузка данных'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,Инфо);
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбъединитьТаблицыДанныхПодчиненныхСтрок(СтрокаДерева)
	
	ТаблицаДанных = ПустаяТаблицаБонусовПриРасчетеСкидок();
	//
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		РеквизитДопУпорядочивания = ПодчиненнаяСтрока.РеквизитДопУпорядочивания;
		
		Для Каждого СтрокаТаблицы Из ПодчиненнаяСтрока.ТаблицаБонусов Цикл
			НоваяСтрока = ТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			ТаблицаРасшифровки = ПустаяТаблицаРасшифровкиБонусовПриРасчетеСкидок();
			Для Каждого СтрокаРасшифровки Из СтрокаТаблицы.Расшифровка Цикл
				Если СтрокаРасшифровки.КлючСвязи = СтрокаТаблицы.КлючСвязи Тогда
					НоваяСтрокаРасшифровки = ТаблицаРасшифровки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаРасшифровки, СтрокаРасшифровки);
				КонецЕсли;
			КонецЦикла;
			
			НоваяСтрока.Расшифровка = ТаблицаРасшифровки;
			НоваяСтрока.РеквизитДопУпорядочивания = РеквизитДопУпорядочивания;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции // ОбъединитьТаблицыДанныхПодчиненныхСтрок()

Процедура ОкруглитьИтогБонусныхБалловПриСторнировании(ТаблицаБонусов)
	Если ТаблицаБонусов.Количество() > 0 Тогда
		ИтогБаллов = ТаблицаБонусов.Итог("КоличествоБонусныхБаллов");
		Если ИтогБаллов <> Цел(ИтогБаллов) Тогда
			Разница = ИтогБаллов - Цел(ИтогБаллов);
			ТаблицаБонусов.Сортировать("КоличествоБонусныхБаллов УБЫВ");
			СтрокаДляРаспределения = ТаблицаБонусов[0];
			СтрокаДляРаспределения.КоличествоБонусныхБаллов = СтрокаДляРаспределения.КоличествоБонусныхБаллов + Разница;
		КонецЕсли;
	КонецЕсли;
	ТаблицаБонусов.Сортировать("КлючСвязи");
КонецПроцедуры

Процедура СторнироватьБонусныеБаллыПоДокументу(Объект, ДисконтнаяКарта, БонуснаяПрограмма)
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		СуммаБонусовВСкидках = Объект.Товары.Итог("СуммаСкидкиОплатыБонусом");
		Если СуммаБонусовВСкидках <> 0 Тогда
			СтрокаОплаты = Объект.Оплата.Найти(Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой, "ВидОплаты");
			Если СтрокаОплаты = Неопределено Тогда
				СтрокаОплаты = Объект.Оплата.Добавить();
			КонецЕсли;
			СтрокаОплаты.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой;
			СтрокаОплаты.БонуснаяПрограммаЛояльности = БонуснаяПрограмма;
			СтрокаОплаты.СуммаБонусовВСкидках = СуммаБонусовВСкидках;
			КурсКонвертацииБонусовВВалюту = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БонуснаяПрограмма, "КурсКонвертацииБонусовВВалюту");
			СтрокаОплаты.КоличествоБонусовВСкидках = Цел(СуммаБонусовВСкидках / ?(КурсКонвертацииБонусовВВалюту = 0, 1, КурсКонвертацииБонусовВВалюту));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ЧекККМПродажа) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Количество КАК Количество
			|ПОМЕСТИТЬ ТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	СУММА(Товары.Количество) КАК Количество
			|ПОМЕСТИТЬ ТоварыВозврата
			|ИЗ
			|	ТаблицаТовары КАК Товары
			|
			|СГРУППИРОВАТЬ ПО
			|	Товары.НомерСтроки,
			|	Товары.Номенклатура,
			|	Товары.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Бонусы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
			|	Бонусы.СкидкаНаценка КАК СкидкаНаценка,
			|	Бонусы.ДатаНачисления КАК ДатаНачисления,
			|	Бонусы.ДатаСписания КАК ДатаСписания,
			|	СУММА(Бонусы.КоличествоБонусныхБаллов) КАК КоличествоБонусныхБаллов,
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	СУММА(Товары.Количество) КАК Количество
			|ПОМЕСТИТЬ БонусыПродажи
			|ИЗ
			|	Документ.ЧекККМ.БонусныеБаллыКНачислению КАК Бонусы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК Товары
			|		ПО (Товары.Ссылка = &ДокументПродажи)
			|			И (Товары.Ссылка = Бонусы.Ссылка)
			|			И (Товары.НомерСтроки = Бонусы.КлючСвязи)
			|ГДЕ
			|	Бонусы.Ссылка = &ДокументПродажи
			|
			|СГРУППИРОВАТЬ ПО
			|	Бонусы.БонуснаяПрограммаЛояльности,
			|	Бонусы.СкидкаНаценка,
			|	Бонусы.ДатаНачисления,
			|	Бонусы.ДатаСписания,
			|	Товары.Номенклатура,
			|	Товары.Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТоварыВозврата.НомерСтроки КАК КлючСвязи,
			|	БонусыПродажи.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
			|	БонусыПродажи.СкидкаНаценка КАК СкидкаНаценка,
			|	БонусыПродажи.ДатаНачисления КАК ДатаНачисления,
			|	БонусыПродажи.ДатаСписания КАК ДатаСписания,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА БонусыПродажи.Количество = ТоварыВозврата.Количество
			|				ТОГДА БонусыПродажи.КоличествоБонусныхБаллов
			|			КОГДА БонусыПродажи.Количество = 0
			|				ТОГДА БонусыПродажи.КоличествоБонусныхБаллов
			|			ИНАЧЕ БонусыПродажи.КоличествоБонусныхБаллов * ТоварыВозврата.Количество / БонусыПродажи.Количество
			|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК КоличествоБонусныхБаллов
			|ИЗ
			|	БонусыПродажи КАК БонусыПродажи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыВозврата КАК ТоварыВозврата
			|		ПО (ТоварыВозврата.Номенклатура = БонусыПродажи.Номенклатура)
			|			И (ТоварыВозврата.Характеристика = БонусыПродажи.Характеристика)";
			Запрос.УстановитьПараметр("ДокументПродажи", Объект.ЧекККМПродажа);
			Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
			ТаблицаБонусов = Запрос.Выполнить().Выгрузить();
			ОкруглитьИтогБонусныхБалловПриСторнировании(ТаблицаБонусов);
			Объект.БонусныеБаллыКНачислению.Загрузить(ТаблицаБонусов);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Товары.НомерСтроки,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.ДокументПродажи КАК ДокументПродажи,
		|	Товары.ЧекККМ КАК ЧекККМ,
		|	Товары.Количество КАК Количество
		|ПОМЕСТИТЬ ТоварыВозврата
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.ЧекККМ КАК ЧекККМ,
		|	Товары.ДокументПродажи КАК ДокументПродажи,
		|	СУММА(Товары.Количество) КАК Количество
		|ПОМЕСТИТЬ ТоварыВозвратаБезСтрок
		|ИЗ
		|	ТоварыВозврата КАК Товары
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.ЧекККМ,
		|	Товары.ДокументПродажи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Бонусы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	Бонусы.СкидкаНаценка КАК СкидкаНаценка,
		|	Бонусы.ДатаНачисления КАК ДатаНачисления,
		|	Бонусы.ДатаСписания КАК ДатаСписания,
		|	СУММА(Бонусы.КоличествоБонусныхБаллов) КАК КоличествоБонусныхБаллов,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	СУММА(Товары.Количество) КАК Количество
		|ПОМЕСТИТЬ БонусыПродажи
		|ИЗ
		|	Документ.ЧекККМ.БонусныеБаллыКНачислению КАК Бонусы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК Товары
		|		ПО (Товары.Ссылка = Бонусы.Ссылка)
		|			И (Товары.НомерСтроки = Бонусы.КлючСвязи)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыВозвратаБезСтрок КАК ТоварыВозвратаБезСтрок
		|		ПО (ТоварыВозвратаБезСтрок.Номенклатура = Товары.Номенклатура)
		|			И (ТоварыВозвратаБезСтрок.Характеристика = Товары.Характеристика)
		|			И (ТоварыВозвратаБезСтрок.ЧекККМ = Товары.Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Бонусы.БонуснаяПрограммаЛояльности,
		|	Бонусы.СкидкаНаценка,
		|	Бонусы.ДатаНачисления,
		|	Бонусы.ДатаСписания,
		|	Товары.Номенклатура,
		|	Товары.Характеристика
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Бонусы.БонуснаяПрограммаЛояльности,
		|	Бонусы.СкидкаНаценка,
		|	Бонусы.ДатаНачисления,
		|	Бонусы.ДатаСписания,
		|	СУММА(Бонусы.КоличествоБонусныхБаллов),
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	СУММА(Товары.Количество)
		|ИЗ
		|	Документ.РеализацияТоваров.БонусныеБаллыКНачислению КАК Бонусы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваров.Товары КАК Товары
		|		ПО (Товары.Ссылка = Бонусы.Ссылка)
		|			И (Товары.НомерСтроки = Бонусы.КлючСвязи)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыВозвратаБезСтрок КАК ТоварыВозвратаБезСтрок
		|		ПО (ТоварыВозвратаБезСтрок.Номенклатура = Товары.Номенклатура)
		|			И (ТоварыВозвратаБезСтрок.Характеристика = Товары.Характеристика)
		|			И (ТоварыВозвратаБезСтрок.ДокументПродажи = Товары.Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Бонусы.БонуснаяПрограммаЛояльности,
		|	Бонусы.СкидкаНаценка,
		|	Бонусы.ДатаНачисления,
		|	Бонусы.ДатаСписания,
		|	Товары.Номенклатура,
		|	Товары.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыВозврата.НомерСтроки КАК КлючСвязи,
		|	БонусыПродажи.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	БонусыПродажи.СкидкаНаценка КАК СкидкаНаценка,
		|	БонусыПродажи.ДатаНачисления КАК ДатаНачисления,
		|	БонусыПродажи.ДатаСписания КАК ДатаСписания,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА БонусыПродажи.Количество = ТоварыВозврата.Количество
		|				ТОГДА БонусыПродажи.КоличествоБонусныхБаллов
		|			КОГДА БонусыПродажи.Количество = 0
		|				ТОГДА БонусыПродажи.КоличествоБонусныхБаллов
		|			ИНАЧЕ БонусыПродажи.КоличествоБонусныхБаллов * ТоварыВозврата.Количество / БонусыПродажи.Количество
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК КоличествоБонусныхБаллов
		|ИЗ
		|	БонусыПродажи КАК БонусыПродажи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыВозврата КАК ТоварыВозврата
		|		ПО (ТоварыВозврата.Номенклатура = БонусыПродажи.Номенклатура)
		|			И (ТоварыВозврата.Характеристика = БонусыПродажи.Характеристика)";
		Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
		ТаблицаБонусов = Запрос.Выполнить().Выгрузить();
		ОкруглитьИтогБонусныхБалловПриСторнировании(ТаблицаБонусов);
		Объект.БонусныеБаллыКНачислению.Загрузить(ТаблицаБонусов);
		
		СуммаБонусовВСкидках = Объект.Товары.Итог("СуммаСкидкиОплатыБонусом");
		Если СуммаБонусовВСкидках <> 0 Тогда
			СтрокаБонусов = Объект.БонусныеБаллыКНачислению.Добавить();
			СтрокаБонусов.БонуснаяПрограммаЛояльности = БонуснаяПрограмма;
			СтрокаБонусов.ДатаНачисления = Объект.Дата;
			КурсКонвертацииБонусовВВалюту = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БонуснаяПрограмма, "КурсКонвертацииБонусовВВалюту");
			СтрокаБонусов.КоличествоБонусныхБаллов = - Цел(СуммаБонусовВСкидках / ?(КурсКонвертацииБонусовВВалюту = 0, 1, КурсКонвертацииБонусовВВалюту));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


