// Конвертация РТ 2.2.11 от 22.01.2019 14:47:34
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	ВариантНастройки = Неопределено;
	Если КомпонентыОбмена.УзелКорреспондента <> Неопределено Тогда
		ВариантНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КомпонентыОбмена.УзелКорреспондента, "ВариантНастройки");
	КонецЕсли;
	Если ВариантНастройки <> "ОфлайнКасса" Тогда
		
		// Заполнение параметров из узла обмена.
		Если КомпонентыОбмена.УзелКорреспондента <> Неопределено Тогда
		РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			КомпонентыОбмена.УзелКорреспондента,
			"ТипЦенДляИзмененияЦен");
		КонецЕсли;
	
		Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
			//Виды  номенклатуры по умолчанию
			ВидыНоменклатурыПоУмолчанию = Новый ТаблицаЗначений;
			ВидыНоменклатурыПоУмолчанию.Колонки.Добавить("ТипНоменклатуры");
			ВидыНоменклатурыПоУмолчанию.Колонки.Добавить("АлкогольнаяПродукция");
			ВидыНоменклатурыПоУмолчанию.Колонки.Добавить("ВидНоменклатуры");
			ПараметрыКонвертации.Вставить("ВидыНоменклатурыПоУмолчанию", ВидыНоменклатурыПоУмолчанию);
	
			// Инициализация таблицы для заполнения наборов дополнительных реквизитов и сведений.
			ДопРеквизитыИСведения = Новый ТаблицаЗначений;
			ДопРеквизитыИСведения.Колонки.Добавить("Свойство");
			ДопРеквизитыИСведения.Колонки.Добавить("ЭтоДопСведение");
			ДопРеквизитыИСведения.Колонки.Добавить("ТипОбъекта");
			КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения = ДопРеквизитыИСведения;
			
		Иначе
			ПараметрыКонвертации.Вставить("ТипЦенДляИзмененияЦен", РеквизитыУзлаОбмена.ТипЦенДляИзмененияЦен);
	
		КонецЕсли;
	Иначе
		ПараметрыКонвертации.ВариантНастройки = ВариантНастройки;
		
		//КонтрагентРозничныйПокупатель.
		ПараметрыКонвертации.КонтрагентРозничныйПокупатель = Константы.КонтрагентРозничныйПокупатель.Получить();
	КонецЕсли;
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
		Если КомпонентыОбмена.РежимЗагрузкиДанныхВИнформационнуюБазу Тогда
			ОбработатьЗагруженныеДопРеквизитыИСведения(КомпонентыОбмена);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Число - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ИнвентаризационнаяОпись_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОплатаОтПокупателяПлатежнойКартой_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомитенту_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомитентуОСписании_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПересортицаТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПересчетТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПриходныйКассовыйОрдер_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РасходныйКассовыйОрдер_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СборкаТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураВыданный_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураПолученный_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ЕдиницыИзмерения__Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчетаКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчетаОрганизаций_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыЦен_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КассыККМ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Магазины_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПравилаЦенообразованияВТипыЦен_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Упаковки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_ВнесениеДСВКассуККМ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВыемкаДСИзКассыККМ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомитенту_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПрочееПоступление_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПрочиеДоходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОНаБанковскийСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОПрочийРасход_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СборкаТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеЗапасов(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЧекККМ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ДополнительныеРеквизиты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ЕдиницыИзмерения_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ЗначенияДопРеквизитов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Номенклатура_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_НоменклатураГруппа(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КассыККМ_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтрагентыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Магазины_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛицаГруппа(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЭквайринговыеТерминалы_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область Документ_ВозвратТоваровОтПокупателя_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтПокупателя_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьПравилоДляДокумента(ДанныеИБ.Ссылка, ИспользованиеПКО.Документ_ВозвратТоваровОтПокупателя_Отправка,"ВозвратТоваровОтПокупателя","");
	
	ТоварыДокумента = 
	"ВЫБРАТЬ
	| ВозвратТоваровОтПокупателяТовары.Номенклатура,
	| ВозвратТоваровОтПокупателяТовары.Характеристика,
	| ВозвратТоваровОтПокупателяТовары.Упаковка,
	| ВозвратТоваровОтПокупателяСерии.Серия,
	| ВозвратТоваровОтПокупателяТовары.Количество,
	| ВозвратТоваровОтПокупателяТовары.КоличествоУпаковок,
	| ВозвратТоваровОтПокупателяТовары.Цена,
	| ВозвратТоваровОтПокупателяТовары.Сумма,
	| СправочникНоменклатура.ЕдиницаИзмерения,
	| СправочникНоменклатура.СтранаПроисхождения,
	| 0 КАК НомерГТД,
	| ""СобственныеТовары"" КАК ТипЗапасов,
	| ВозвратТоваровОтПокупателяТовары.СуммаНДС,
	| ВозвратТоваровОтПокупателяТовары.СтавкаНДС,
	| ВозвратТоваровОтПокупателяТовары.НомерСтроки,
	| ВозвратТоваровОтПокупателяТовары.Сумма КАК Себестоимость,
	| ВЫБОР
	| 	КОГДА &УчитыватьНДС
	| 		ТОГДА ""ОблагаетсяНДС""
	| 		ИНАЧЕ ""НеОблагаетсяНДС""
	| 	КОНЕЦ КАК ВозвратПодДеятельность
	|ИЗ
	| Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|     ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|     ПО ВозвратТоваровОтПокупателяТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Серии КАК ВозвратТоваровОтПокупателяСерии
	|		ПО (ВозвратТоваровОтПокупателяТовары.Ссылка = ВозвратТоваровОтПокупателяСерии.Ссылка)
	|			И (ВозвратТоваровОтПокупателяТовары.Номенклатура = ВозвратТоваровОтПокупателяСерии.Номенклатура)
	|			И (ВозвратТоваровОтПокупателяТовары.Характеристика = ВозвратТоваровОтПокупателяСерии.Характеристика)
	|ГДЕ
	| ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка
	| И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("УчитыватьНДС", ДанныеИБ.УчитыватьНДС);
	РезультатыЗапроса = Запрос.Выполнить();
	Товары = РезультатыЗапроса.Выгрузить();
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.СерииНоменклатуры") Тогда
		Товары.Колонки.Удалить("Серия");
	КонецЕсли;
	ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
	Если Товары.Количество() > 0 Тогда
		Товары = ОбработатьХарактеристикиТоваров(Товары);
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	Иначе
		ИспользованиеПКО.Документ_ВозвратТоваровОтПокупателя_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьПравилоДляДокумента(ДанныеИБ.Ссылка, ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка,"ВозвратТоваровПоставщику","");
	
	//Товары
	ТоварыДокумента = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ВозвратТоваровПоставщикуТовары.Характеристика КАК Характеристика,
	|	ВозвратТоваровПоставщикуТовары.Упаковка КАК Упаковка,
	|	ВозвратТоваровПоставщикуТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВозвратТоваровПоставщикуСерии.Серия КАК Серия,
	|	ВозвратТоваровПоставщикуТовары.Количество КАК Количество,
	|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	|	ВозвратТоваровПоставщикуТовары.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровПоставщикуТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА СправочникНоменклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ВозвратТоваровПоставщикуТовары.Упаковка.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	0 КАК НомерГТД,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	|	ВозвратТоваровПоставщикуТовары.Сумма КАК Себестоимость
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (ВозвратТоваровПоставщикуТовары.Номенклатура = СправочникНоменклатура.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Серии КАК ВозвратТоваровПоставщикуСерии
	|		ПО (ВозвратТоваровПоставщикуТовары.Ссылка = ВозвратТоваровПоставщикуСерии.Ссылка)
	|			И (ВозвратТоваровПоставщикуТовары.Номенклатура = ВозвратТоваровПоставщикуСерии.Номенклатура)
	|			И (ВозвратТоваровПоставщикуТовары.Характеристика = ВозвратТоваровПоставщикуСерии.Характеристика)
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.Выполнить();
	Товары = РезультатыЗапроса.Выгрузить();
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.СерииНоменклатуры") Тогда
		Товары.Колонки.Удалить("Серия");
	КонецЕсли;
	
	Если Товары.Количество() > 0 Тогда
		Товары = ОбработатьХарактеристикиТоваров(Товары);
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	Иначе
		ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризационнаяОпись_Отправка
Процедура ДобавитьПОД_Документ_ИнвентаризационнаяОпись_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ИнвентаризационнаяОпись_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПриказНаПроведениеИнвентаризацииТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ИнвентаризационнаяОпись_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнвентаризационнаяОпись_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ИнвентаризационнаяОпись_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ИспользованиеПКО.Документ_ИнвентаризационнаяОпись_Отправка = Ложь;
		Возврат;
	КонецЕсли;
	
	ДанныеДокумента = ПолучитьДанныеИнвентаризации(ДанныеИБ);
	
	Если ДанныеДокумента = Неопределено Тогда
		ИспользованиеПКО.Документ_ИнвентаризационнаяОпись_Отправка = Ложь;
	Иначе
		ТаблицаТоваров = ДанныеДокумента.РезультатПоТабличнойЧасти;
		ТаблицаТоваров.Колонки.Добавить("ЦенаВРознице");
		ТаблицаТоваров.Колонки.Добавить("ЦенаЗаУпаковку");
		ТаблицаТоваров.Колонки.Добавить("КоличествоУпаковок");
		ТаблицаТоваров.Колонки.Добавить("КоличествоУпаковокУчет");
		ТаблицаТоваров.Колонки.Добавить("СчетУчета");
	
		ТаблицаТоваров.Колонки.Добавить("НомерСтрокиДокумента");
	
		НомерСтроки = 0;
		Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
			НомерСтроки = НомерСтроки + 1;
			СтрокаТаблицы.НомерСтрокиДокумента = НомерСтроки;
		КонецЦикла;
		
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", ТаблицаТоваров);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОплатаОтПокупателяПлатежнойКартой_Отправка
Процедура ДобавитьПОД_Документ_ОплатаОтПокупателяПлатежнойКартой_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОплатаОтПокупателяПлатежнойКартой_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОплатаОтПокупателяПлатежнойКартой;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОплатаОтПокупателяПлатежнойКартой_Отправк");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ОприходованиеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОприходованиеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ОприходованиеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьПравилоДляДокумента(ДанныеИБ.Ссылка, ИспользованиеПКО.Документ_ОприходованиеТоваров_Отправка,"ОприходованиеТоваров","");
	
	//Товары
	ТоварыДокумента = 
	"ВЫБРАТЬ
	|	ОприходованиеТоваровТовары.Номенклатура,
	|	ОприходованиеТоваровТовары.Характеристика,
	|	ОприходованиеТоваровТовары.Упаковка,
	|	ОприходованиеТоваровСерии.Серия,
	|	ОприходованиеТоваровТовары.Количество,
	|	ОприходованиеТоваровТовары.КоличествоУпаковок,
	|	ОприходованиеТоваровТовары.Цена,
	|	ОприходованиеТоваровТовары.Сумма,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения,
	|	0 КАК НомерГТД,
	| ""СобственныеТовары"" КАК ТипЗапасов 
	|ИЗ
	|	Документ.ОприходованиеТоваров.Товары КАК ОприходованиеТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ОприходованиеТоваровТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров.Серии КАК ОприходованиеТоваровСерии
	|		ПО (ОприходованиеТоваровТовары.Ссылка = ОприходованиеТоваровСерии.Ссылка)
	|			И (ОприходованиеТоваровТовары.Номенклатура = ОприходованиеТоваровСерии.Номенклатура)
	|			И (ОприходованиеТоваровТовары.Характеристика = ОприходованиеТоваровСерии.Характеристика)
	|ГДЕ
	|	ОприходованиеТоваровТовары.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|";
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.Выполнить();
	Товары = РезультатыЗапроса.Выгрузить();
	ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.СерииНоменклатуры") Тогда
		Товары.Колонки.Удалить("Серия");
	КонецЕсли;
	Если Товары.Количество() > 0 Тогда
		Товары = ОбработатьХарактеристикиТоваров(Товары);
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	Иначе
		ИспользованиеПКО.Документ_ОприходованиеТоваров_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомитенту_Отправка
Процедура ДобавитьПОД_Документ_ОтчетКомитенту_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомитенту_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетКомитентуОПродажах;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомитенту_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомитентуОСписании_Отправка
Процедура ДобавитьПОД_Документ_ОтчетКомитентуОСписании_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомитентуОСписании_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетКомитентуОСписании;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомитентуОСписании_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах_Отправка
Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПКО_АТТ_ОтчетОРозничныхПродажах");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОРП_Отправка_СтарыеВерсииФормата");
КонецПроцедуры

Процедура ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Для Каждого Правило Из ИспользованиеПКО Цикл
		ИспользованиеПКО.Вставить(Правило.Ключ, Ложь);
	КонецЦикла;
	ВыгружатьДокумент = Истина;
	УстановитьПравилоДляДокумента(ДанныеИБ.Ссылка, ВыгружатьДокумент, "ОтчетОРозничныхПродажах"," И СправочникНоменклатура.ДоговорПлатежногоАгента = ЗНАЧЕНИЕ(Справочник.ДоговорыПлатежныхАгентов.ПустаяСсылка)");
	
	ВыгружатьДокумент = ВыгружатьДокумент И ДанныеИБ.СуммаДокумента > 0;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.6") Тогда
		ИспользованиеПКО.Документ_ОРП_Отправка_СтарыеВерсииФормата = ВыгружатьДокумент;
	Иначе
		ИспользованиеПКО.Документ_ОтчетОРозничныхПродажах_Отправка = ВыгружатьДокумент;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.Сумма,
	|	Товары.Цена,
	|	Товары.СтавкаНДС,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Справочник_Номенклатура.ЕдиницаИзмерения,
	|	Справочник_Номенклатура.СтранаПроисхождения,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	Товары.Характеристика,
	|	ОтчетОРозничныхПродажахСерии.Серия КАК Серия,
	|	0 КАК НомерГТД,
	|	Товары.СуммаНДС,
	|	Товары.НомерСтроки КАК НомерСтрокиДокумента
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Справочник_Номенклатура
	|		ПО Товары.Номенклатура = Справочник_Номенклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Серии КАК ОтчетОРозничныхПродажахСерии
	|		ПО (Товары.Ссылка = ОтчетОРозничныхПродажахСерии.Ссылка)
	|			И (Товары.Номенклатура = ОтчетОРозничныхПродажахСерии.Номенклатура)
	|			И (Товары.Характеристика = ОтчетОРозничныхПродажахСерии.Характеристика)
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Справочник_Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|	И Справочник_Номенклатура.ДоговорПлатежногоАгента = ЗНАЧЕНИЕ(Справочник.ДоговорыПлатежныхАгентов.ПустаяСсылка)
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.Выполнить();
	
	Товары = РезультатыЗапроса.Выгрузить();
	ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.СерииНоменклатуры") Тогда
		Товары.Колонки.Удалить("Серия");
	КонецЕсли;
	Если Товары.Количество() > 0 Тогда
		Товары = ОбработатьХарактеристикиТоваров(Товары);
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	Иначе
		ИспользованиеПКО.Документ_ОтчетОРозничныхПродажах_Отправка = Ложь;
	КонецЕсли;
	
	Если ИспользованиеПКО.Документ_ОтчетОРозничныхПродажах_Отправка Тогда
		СуммаНаличнойОплаты  = ДанныеИБ.СуммаДокумента - ДанныеИБ.ОплатаПлатежнымиКартами.Итог("Сумма") - ДанныеИБ.ОплатаБанковскимиКредитами.Итог("Сумма") - ДанныеИБ.ОплатаПодарочнымиСертификатами;
	
		Если СуммаНаличнойОплаты > 0 И ДанныеИБ.Проведен Тогда
			ВыгружатьПКО = Истина;
		Иначе
			ВыгружатьПКО = Ложь;
		КонецЕсли;
	
		Если ВыгружатьПКО Тогда
			ИспользованиеПКО.ПКО_АТТ_ОтчетОРозничныхПродажах = Истина;
		Иначе
			ИспользованиеПКО.ПКО_АТТ_ОтчетОРозничныхПродажах = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПередачаТоваровМеждуОрганизациями_Отправка
Процедура ДобавитьПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПередачаТоваровМеждуОрганизациями_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПередачаМеждуОрганизациями_ПТУ_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПередачаМеждуОрганизациями_РТУ_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.ПередачаМеждуОрганизациями_РТУ_Отправка = Истина;
	ИспользованиеПКО.ПередачаМеждуОрганизациями_ПТУ_Отправка = Истина;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьПравилоДляДокумента(ДанныеИБ.Ссылка, ИспользованиеПКО.Документ_ПеремещениеТоваров_Отправка,"ПеремещениеТоваров","");
	
	//Товары
	ТоварыДокумента = 
	
	"ВЫБРАТЬ
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ПеремещениеТоваровТовары.Характеристика,
	|	ПеремещениеТоваровТовары.Упаковка,
	|	ПеремещениеТоваровТовары.Количество,
	|	ПеремещениеТоваровТовары.КоличествоУпаковок,
	|	ПеремещениеТоваровТовары.Цена КАК ЦенаВРознице,
	|	ПеремещениеТоваровТовары.Сумма КАК СуммаВРознице,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения,
	|	0 КАК НомерГТД,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	СправочникНоменклатура.СтавкаНДС КАК СтавкаНДСВРознице
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ПеремещениеТоваровТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|";
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.Выполнить();
	Товары = РезультатыЗапроса.Выгрузить();
	ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
	Если Товары.Количество() > 0 Тогда
		Товары = ОбработатьХарактеристикиТоваров(Товары);
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	Иначе
		ИспользованиеПКО.Документ_ПеремещениеТоваров_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересортицаТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПересортицаТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПересортицаТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПересортицаТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПересортицаТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересортицаВОприходование_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересортицаВСписание_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересортицаВСписание_Отправка12");
КонецПроцедуры

Процедура ПОД_Документ_ПересортицаТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПересортицаВОприходование_Отправка = Истина;
	
	ВерсияФормата = ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена);
	
	Если ВерсияФормата < ВерсияФорматаЧислом("1.3") Тогда
		ИспользованиеПКО.Документ_ПересортицаВСписание_Отправка = Ложь;
		ИспользованиеПКО.Документ_ПересортицаВСписание_Отправка12 = Истина;
	Иначе
		ИспользованиеПКО.Документ_ПересортицаВСписание_Отправка12 = Ложь;
		ИспользованиеПКО.Документ_ПересортицаВСписание_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересчетТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПересчетТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПересчетТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПересчетТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПересчетТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПересчетТоваров_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПересчетТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ПересчетТоваров") Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
	КонецЕсли;
	
	//Товары
	ТоварыДокумента = 
	
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Количество КАК Количество,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА Товары.КоличествоУпаковок = 0
	|			ТОГДА Товары.Цена
	|		ИНАЧЕ Товары.Сумма / Товары.КоличествоУпаковок
	|	КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА СправочникНоменклатура.ЕдиницаИзмерения
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.СуммаФакт КАК СуммаФакт,
	|	Товары.КоличествоФакт КАК КоличествоФакт,
	|	Товары.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт
	|ИЗ
	|	Документ.ПересчетТоваров.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (Товары.Номенклатура = СправочникНоменклатура.Ссылка)
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|";
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.Выполнить();
	Товары = РезультатыЗапроса.Выгрузить();
	Если Товары.Количество() > 0 Тогда
		Товары = ОбработатьХарактеристикиТоваров(Товары);
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	Иначе
		ИспользованиеПКО.Документ_ПересчетТоваров_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровУслуг_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьПравилоДляДокумента(ДанныеИБ.Ссылка, ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка,"ПоступлениеТоваров","");
	
	// Товары
	ТоварыДокумента = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	ПоступлениеТоваровСерии.Серия КАК Серия,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	0 КАК НомерГТД
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (Товары.Номенклатура = СправочникНоменклатура.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров.Серии КАК ПоступлениеТоваровСерии
	|		ПО (Товары.Ссылка = ПоступлениеТоваровСерии.Ссылка)
	|			И (Товары.Номенклатура = ПоступлениеТоваровСерии.Номенклатура)
	|			И (Товары.Характеристика = ПоступлениеТоваровСерии.Характеристика)
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	И Товары.Сумма <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	0 КАК НомерГТД
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров.Серии КАК ПоступлениеТоваровСерии
	|		ПО Товары.Ссылка = ПоступлениеТоваровСерии.Ссылка
	|			И Товары.Номенклатура = ПоступлениеТоваровСерии.Номенклатура
	|			И Товары.Характеристика = ПоступлениеТоваровСерии.Характеристика
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И Товары.Сумма <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ПоступлениеТоваровСерии.Серия КАК Серия,
	|	СУММА(Товары.Количество) КАК Количество,
	|	Товары.Цена КАК Цена,
	|	СУММА(Товары.Сумма) КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(Товары.СуммаНДС) КАК СуммаНДС,
	|	Товары.Упаковка КАК Упаковка,
	|	СУММА(Товары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	0 КАК НомерГТД,
	|	""НаПрочиеДоходы"" КАК ВариантОтражения
	|ИЗ
	|	Документ.ПоступлениеТоваров.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров.Серии КАК ПоступлениеТоваровСерии
	|		ПО Товары.Ссылка = ПоступлениеТоваровСерии.Ссылка
	|			И Товары.Номенклатура = ПоступлениеТоваровСерии.Номенклатура
	|			И Товары.Характеристика = ПоступлениеТоваровСерии.Характеристика
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ (Товары.Номенклатура, Товары.Характеристика, Товары.Упаковка, Товары.Количество, Товары.КоличествоУпаковок, Товары.Цена, Товары.СтавкаНДС) В
	|				(ВЫБРАТЬ
	|					ПоступлениеТоваровТоварыПоДаннымПоставщика.Номенклатура,
	|					ПоступлениеТоваровТоварыПоДаннымПоставщика.Характеристика,
	|					ПоступлениеТоваровТоварыПоДаннымПоставщика.Упаковка,
	|					ПоступлениеТоваровТоварыПоДаннымПоставщика.Количество,
	|					ПоступлениеТоваровТоварыПоДаннымПоставщика.КоличествоУпаковок,
	|					ПоступлениеТоваровТоварыПоДаннымПоставщика.Цена,
	|					ПоступлениеТоваровТоварыПоДаннымПоставщика.СтавкаНДС
	|				ИЗ
	|					Документ.ПоступлениеТоваров.ТоварыПоДаннымПоставщика КАК ПоступлениеТоваровТоварыПоДаннымПоставщика
	|				ГДЕ
	|					ПоступлениеТоваровТоварыПоДаннымПоставщика.Ссылка = &Ссылка)
	|	И Товары.Ссылка.ЕстьРасхождения
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	ПоступлениеТоваровСерии.Серия,
	|	Товары.Цена,
	|	Товары.СтавкаНДС,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ПоступлениеТоваровСерии.Серия КАК Серия,
	|	СУММА(Товары.Количество) КАК Количество,
	|	Товары.Цена КАК Цена,
	|	СУММА(Товары.Сумма) КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(Товары.СуммаНДС) КАК СуммаНДС,
	|	Товары.Упаковка КАК Упаковка,
	|	СУММА(Товары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	0 КАК НомерГТД,
	|	""НаПрочиеРасходы"" КАК ВариантОтражения
	|ИЗ
	|	Документ.ПоступлениеТоваров.ТоварыПоДаннымПоставщика КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров.Серии КАК ПоступлениеТоваровСерии
	|		ПО Товары.Ссылка = ПоступлениеТоваровСерии.Ссылка
	|			И Товары.Номенклатура = ПоступлениеТоваровСерии.Номенклатура
	|			И Товары.Характеристика = ПоступлениеТоваровСерии.Характеристика
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ (Товары.Номенклатура, Товары.Характеристика, Товары.Упаковка, Товары.Количество, Товары.КоличествоУпаковок, Товары.Цена, Товары.СтавкаНДС) В
	|				(ВЫБРАТЬ
	|					ПоступлениеТоваровТовары.Номенклатура,
	|					ПоступлениеТоваровТовары.Характеристика,
	|					ПоступлениеТоваровТовары.Упаковка,
	|					ПоступлениеТоваровТовары.Количество,
	|					ПоступлениеТоваровТовары.КоличествоУпаковок,
	|					ПоступлениеТоваровТовары.Цена,
	|					ПоступлениеТоваровТовары.СтавкаНДС
	|				ИЗ
	|					Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|				ГДЕ
	|					ПоступлениеТоваровТовары.Ссылка = &Ссылка)
	|	И Товары.Ссылка.ЕстьРасхождения
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	ПоступлениеТоваровСерии.Серия,
	|	Товары.Цена,
	|	Товары.СтавкаНДС,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ПоддержкаСерийВФормате = СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.СерииНоменклатуры");
	
	Товары = РезультатыЗапроса[0].Выгрузить();
	ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
	
	Товары = ОбработатьХарактеристикиТоваров(Товары);
	
	Если Не ПоддержкаСерийВФормате Тогда
		Товары.Колонки.Удалить("Серия");
	КонецЕсли;
	ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	
	Услуги = РезультатыЗапроса[1].Выгрузить();
	ДанныеИБ.ДополнительныеСвойства.Вставить("Услуги", Услуги);
	
	Излишки = РезультатыЗапроса[2].Выгрузить();
	Если Не ПоддержкаСерийВФормате Тогда
		Излишки.Колонки.Удалить("Серия");
	КонецЕсли;
	Излишки = ОбработатьХарактеристикиТоваров(Излишки);
	ДанныеИБ.ДополнительныеСвойства.Вставить("Излишки", Излишки);
	
	Недостачи = РезультатыЗапроса[3].Выгрузить();
	Если Не ПоддержкаСерийВФормате Тогда
		Недостачи.Колонки.Удалить("Серия");
	КонецЕсли;
	Недостачи = ОбработатьХарактеристикиТоваров(Недостачи);
	ДанныеИБ.ДополнительныеСвойства.Вставить("Недостачи", Недостачи);
	
	Если Товары.Количество() = 0 И Услуги.Количество() = 0 Тогда
		ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПриходныйКассовыйОрдер_Отправка
Процедура ДобавитьПОД_Документ_ПриходныйКассовыйОрдер_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПриходныйКассовыйОрдер_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПриходныйКассовыйОрдер_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПолучениеНаличныхВБанке_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРозничнаяВыручка_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочиеДоходы_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПриходныйКассовыйОрдер_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанке_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПКОРозничнаяВыручка_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПКОПрочиеДоходы_Отправка = Ложь;
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка Тогда
		ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанке_Отправка = Истина;
		ДанныеИБ.ДополнительныеСвойства.Вставить("ВидОперации", "ПолучениеНаличных");
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ Тогда
		ИспользованиеПКО.Документ_ПКОРозничнаяВыручка_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы Тогда
		ВходящиеДанные = Документы.ПриходныйКассовыйОрдер.РеквизитыДокументаДляОбменаСБухгалтерией(ДанныеИБ.Ссылка);
		Если ВходящиеДанные.ВидОперации = "РасчетыПоКредитамИЗаймам" Тогда
			ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка = Истина;
		ИначеЕсли ВходящиеДанные.ВидОперации = "ПрочееПоступление" Тогда
			ИспользованиеПКО.Документ_ПКОПрочиеДоходы_Отправка = Истина;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика
		ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
		ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РасходныйКассовыйОрдер_Отправка
Процедура ДобавитьПОД_Документ_РасходныйКассовыйОрдер_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РасходныйКассовыйОрдер_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РасходныйКассовыйОрдер_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочийРасход_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_РасходныйКассовыйОрдер_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОНаБанковскийСчет_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОПрочийРасход_Отправка = Ложь;
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		ИспользованиеПКО.Документ_РКОНаБанковскийСчет_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику 
	ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию
	ИЛИ ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы Тогда
		ИспользованиеПКО.Документ_РКОПрочийРасход_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Отправка
Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РеализацияТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьПравилоДляДокумента(ДанныеИБ.Ссылка, ИспользованиеПКО.Документ_РеализацияТоваровУслуг_Отправка, "РеализацияТоваров"," И СправочникНоменклатура.ДоговорПлатежногоАгента = ЗНАЧЕНИЕ(Справочник.ДоговорыПлатежныхАгентов.ПустаяСсылка)");
	
	//Товары
	ТоварыДокумента = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.КоличествоУпаковок,
	|	РеализацияТоваровСерии.Серия,
	|	Товары.Сумма,
	|	Товары.Цена,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.Количество,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	0 КАК НомерГТД,
	|	Товары.Характеристика,
	|	Товары.НомерСтроки КАК НомерСтрокиДокумента
	|ИЗ
	|	Документ.РеализацияТоваров.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваров.Серии КАК РеализацияТоваровСерии
	|		ПО (Товары.Ссылка = РеализацияТоваровСерии.Ссылка)
	|			И (Товары.Номенклатура = РеализацияТоваровСерии.Номенклатура)
	|			И (Товары.Характеристика = РеализацияТоваровСерии.Характеристика)
	|ГДЕ
	|	СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	И Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Услуги.Количество,
	|	Услуги.Номенклатура,
	|	СправочникНоменклатура.НаименованиеПолное КАК Содержание,
	|	Услуги.СтавкаНДС,
	|	Услуги.СуммаНДС,
	|	Услуги.Сумма,
	|	Услуги.Цена
	|ИЗ
	|	Документ.РеализацияТоваров.Товары КАК Услуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Услуги.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И Услуги.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ДоговорПлатежногоАгента = ЗНАЧЕНИЕ(Справочник.ДоговорыПлатежныхАгентов.ПустаяСсылка)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Товары = РезультатыЗапроса[0].Выгрузить();
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.СерииНоменклатуры") Тогда
		Товары.Колонки.Удалить("Серия");
	КонецЕсли;
	ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
	Товары = ОбработатьХарактеристикиТоваров(Товары);
	ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	
	Услуги = РезультатыЗапроса[1].Выгрузить();
	ДанныеИБ.ДополнительныеСвойства.Вставить("Услуги", Услуги);
	
	Если Товары.Количество() = 0 И Услуги.Количество() = 0 Тогда
		ИспользованиеПКО.Документ_РеализацияТоваровУслуг_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СборкаТоваров_Отправка
Процедура ДобавитьПОД_Документ_СборкаТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СборкаТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СборкаТоваров;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СборкаТоваров_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваров_Отправка
Процедура ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СписаниеТоваров;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваров_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваров_Отправка12");
КонецПроцедуры

Процедура ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ВерсияФормата = ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена);
	
	Если ВерсияФормата < ВерсияФорматаЧислом("1.3") Тогда
		ИспользованиеПКО.Документ_СписаниеТоваров_Отправка = Ложь;
		ИспользованиеПКО.Документ_СписаниеТоваров_Отправка12 = Истина;
	Иначе
		ИспользованиеПКО.Документ_СписаниеТоваров_Отправка12 = Ложь;
		ИспользованиеПКО.Документ_СписаниеТоваров_Отправка = Истина;
	КонецЕсли;
	
	//Товары
	ТоварыДокумента = 
	"ВЫБРАТЬ
	|	СписаниеТоваровТовары.Номенклатура,
	|	СписаниеТоваровТовары.Количество,
	|	СписаниеТоваровТовары.Характеристика,
	|	СписаниеТоваровТовары.Упаковка,
	|	СписаниеТоваровТовары.КоличествоУпаковок,
	|	СписаниеТоваровСерии.Серия,
	|	СписаниеТоваровТовары.Цена,
	|	СписаниеТоваровТовары.Сумма,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения,
	|	0 КАК НомерГТД,
	|	""СобственныеТовары"" КАК ТипЗапасов
	|ИЗ
	|	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СписаниеТоваровТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеТоваров.Серии КАК СписаниеТоваровСерии
	|		ПО (СписаниеТоваровТовары.Ссылка = СписаниеТоваровСерии.Ссылка)
	|			И (СписаниеТоваровТовары.Номенклатура = СписаниеТоваровСерии.Номенклатура)
	|			И (СписаниеТоваровТовары.Характеристика = СписаниеТоваровСерии.Характеристика)
	|ГДЕ
	|	СписаниеТоваровТовары.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|";
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.Выполнить();
	Товары = РезультатыЗапроса.Выгрузить();
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.СерииНоменклатуры") Тогда
		Товары.Колонки.Удалить("Серия");
	КонецЕсли;
	ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
	Если Товары.Количество() > 0 Тогда
		Товары = ОбработатьХарактеристикиТоваров(Товары);
		ДанныеИБ.ДополнительныеСвойства.Вставить("Товары", Товары);
	Иначе
		ИспользованиеПКО.Документ_СписаниеТоваров_Отправка = Ложь;
		ИспользованиеПКО.Документ_СписаниеТоваров_Отправка12 = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураВыданный_Отправка
Процедура ДобавитьПОД_Документ_СчетФактураВыданный_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураВыданный_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактураВыданный;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураВыданный_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СчетФактураВыданный_Отправка = НЕ ДанныеИБ.Исправление;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураПолученный_Отправка
Процедура ДобавитьПОД_Документ_СчетФактураПолученный_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетФактураПолученный_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактураПолученный;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СчетФактураПолученный_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураПолученный_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СчетФактураПолученный_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СчетФактураПолученный_Отправка = НЕ ДанныеИБ.Исправление;
КонецПроцедуры
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Отправка
Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатуры_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатуры.ВидЦены КАК ТипЦен,
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЦеныНоменклатуры.Цена
	|		ИНАЧЕ ЦеныНоменклатуры.Цена / СпрУпаковки.Коэффициент
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.Товары КАК ЦеныНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК СпрУпаковки
	|		ПО (СпрУпаковки.Ссылка = ЦеныНоменклатуры.Упаковка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО (СпрНоменклатура.Ссылка = ЦеныНоменклатуры.Номенклатура)
	|ГДЕ
	|	ЦеныНоменклатуры.Ссылка = &Ссылка
	|	И ЦеныНоменклатуры.Цена <> 0
	|	И ВЫБОР
	|			КОГДА &ТипЦенДляИзмененияЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЦеныНоменклатуры.ВидЦены = &ТипЦенДляИзмененияЦен
	|		КОНЕЦ
	|ИТОГИ ПО
	|	ТипЦен";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ТипЦенДляИзмененияЦен", КомпонентыОбмена.ПараметрыКонвертации.ТипЦенДляИзмененияЦен);
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ВыборкаВидЦены = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПравилоУстановкаЦенОтправка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_УстановкаЦенНоменклатуры_Отправка", "Имя");
	Если Не ПравилоУстановкаЦенОтправка = Неопределено Тогда
		Пока ВыборкаВидЦены.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаВидЦены.ТипЦен) Тогда
				Продолжить;
			КонецЕсли;
			ДанныеИБСтруктура = Новый Структура("Дата, Номер, Ответственный, Ссылка, Комментарий");
			ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
			ВыборкаДетали = ВыборкаВидЦены.Выбрать();
			ТаблицаТоваров.Очистить();
			Пока ВыборкаДетали.Следующий() Цикл
				СтрокаТовары = ТаблицаТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовары, ВыборкаДетали);
			КонецЦикла;
			ДанныеИБСтруктура.Вставить("ТипЦен", ВыборкаВидЦены.ТипЦен);
			ТаблицаТоваровОбработанная = ОбработатьХарактеристикиТоваров(ТаблицаТоваров);
			ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваровОбработанная);
			ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, 
				ДанныеИБСтруктура, 
				ПравилоУстановкаЦенОтправка);
		КонецЦикла;
	КонецЕсли;
	
	ИспользованиеПКО.Документ_УстановкаЦенНоменклатуры_Отправка = Ложь;
КонецПроцедуры
#КонецОбласти
#Область ЕдиницыИзмерения__Отправка
Процедура ДобавитьПОД_ЕдиницыИзмерения__Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ЕдиницыИзмерения__Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БазовыеЕдиницыИзмерения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры
#КонецОбласти
#Область Номенклатура_Отправка
Процедура ДобавитьПОД_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке            = "ПОД_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыПодарочныхСертификатов_Отправка");
КонецПроцедуры

Процедура ПОД_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
			И ЗначениеЗаполнено(ДанныеИБ.Периодичность) Тогда
		ИспользованиеПКО.Справочник_НоменклатураГруппа = Ложь;
		ИспользованиеПКО.Справочник_Номенклатура_Отправка = Ложь;
		ИспользованиеПКО.Справочник_ВидыПодарочныхСертификатов_Отправка = Истина;
	Иначе
		ИспользованиеПКО.Справочник_НоменклатураГруппа = (ДанныеИБ.ЭтоГруппа);
		ИспользованиеПКО.Справочник_Номенклатура_Отправка = НЕ (ДанныеИБ.ЭтоГруппа);
		ИспользованиеПКО.Справочник_ВидыПодарочныхСертификатов_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Отправка
Процедура ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторБанков;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Банки_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры

Процедура ПОД_Справочник_Банки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_Банки = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаКонтрагентов_Отправка
Процедура ДобавитьПОД_Справочник_БанковскиеСчетаКонтрагентов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчетаКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчетаКонтрагентов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчетаКонтрагентов_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаОрганизаций_Отправка
Процедура ДобавитьПОД_Справочник_БанковскиеСчетаОрганизаций_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчетаОрганизаций;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчетаОрганизаций_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ВидыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыНоменклатуры_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ВидыНоменклатуры") Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыЦен_Отправка
Процедура ДобавитьПОД_Справочник_ВидыЦен_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ВидыЦен_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыЦен;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыЦен_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КассыККМ_Отправка
Процедура ДобавитьПОД_Справочник_КассыККМ_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КассыККМ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КассыККМ;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_КассыККМ_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КассыККМ_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_КассыККМ_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.КассыККМ") Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_КонтрагентыГруппа = (ДанныеИБ.ЭтоГруппа);
	ИспользованиеПКО.Справочник_Контрагенты_Отправка = НЕ (ДанныеИБ.ЭтоГруппа);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Магазины_Отправка
Процедура ДобавитьПОД_Справочник_Магазины_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Магазины_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Магазины;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Отправка
Процедура ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Пользователи;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ПравилаЦенообразованияВТипыЦен_Отправка
Процедура ДобавитьПОД_Справочник_ПравилаЦенообразованияВТипыЦен_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ПравилаЦенообразованияВТипыЦен_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ПравилаЦенообразования;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПравилаЦенообразованияВТипыЦен_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Отправка
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("СтатьиДДС");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Отправка
Процедура ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтраныМира;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Упаковки_Отправка
Процедура ДобавитьПОД_Справочник_Упаковки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Упаковки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.УпаковкиНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Упаковки_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Упаковки");
КонецПроцедуры

Процедура ПОД_Справочник_Упаковки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ТипЗнч(ДанныеИБ.Владелец) <> Тип("СправочникСсылка.Номенклатура") Тогда
		ИспользованиеПКО.Справочник_Упаковки = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ФизическиеЛица;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ХарактеристикиНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ХарактеристикиНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ХарактеристикиНоменклатуры");
КонецПроцедуры

Процедура ПОД_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ХарактеристикиНоменклатуры = Ложь;
	Если ЗначениеЗаполнено(ДанныеИБ.Владелец) И ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		ИспользованиеПКО.Справочник_ХарактеристикиНоменклатуры = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ШтрихкодыНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.Штрихкоды;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыНоменклатуры_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыНоменклатуры_Отправка12");
КонецПроцедуры

Процедура ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ВерсияФормата 	= ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена);
	ВыполнятьВыгрузку = Ложь;
	
	ИменаСвойств = Новый Структура("Владелец,Характеристика,Упаковка");
	ПараметрыОтбора = Новый Структура;
	Для каждого ЭлементОтбора Из ДанныеИБ.Отбор Цикл
		Если ЗначениеЗаполнено(ЭлементОтбора.Значение)
			И ИменаСвойств.Свойство(ЭлементОтбора.Имя) Тогда
			ПараметрыОтбора.Вставить(ЭлементОтбора.Имя,ЭлементОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Элемент Из ПараметрыОтбора Цикл
		Если Элемент.Ключ = "Владелец" Тогда
			ВыполнятьВыгрузку = Истина;
			ТипДанных = ТипЗнч(Элемент.Значение);
		Иначе
			ТипДанных = ТипЗнч(Элемент.Значение.Владелец);
		КонецЕсли;
		ВыполнятьВыгрузку = ТипДанных = Тип("СправочникСсылка.Номенклатура");
	КонецЦикла;
	
	Если Не ВыполнятьВыгрузку Тогда
		ИспользованиеПКО.Справочник_ШтрихкодыНоменклатуры_Отправка = Ложь;
		ИспользованиеПКО.Справочник_ШтрихкодыНоменклатуры_Отправка12 = Ложь;
	ИначеЕсли ВерсияФормата < ВерсияФорматаЧислом("1.3") Тогда
		ИспользованиеПКО.Справочник_ШтрихкодыНоменклатуры_Отправка = Ложь;
		ИспользованиеПКО.Справочник_ШтрихкодыНоменклатуры_Отправка12 = Истина;
	Иначе
		ИспользованиеПКО.Справочник_ШтрихкодыНоменклатуры_Отправка12 = Ложь;
		ИспользованиеПКО.Справочник_ШтрихкодыНоменклатуры_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_ВнесениеДСВКассуККМ_Получение
Процедура ДобавитьПОД_Документ_ВнесениеДСВКассуККМ_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВнесениеДСВКассуККМ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВнесениеДСВКассуККМ";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВнесениеДСВКассуККМ_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Получение
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВозвратТоваровПоставщику_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВозвратТоваровПоставщику";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВыемкаДСИзКассыККМ_Получение
Процедура ДобавитьПОД_Документ_ВыемкаДСИзКассыККМ_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ВыемкаДСИзКассыККМ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВыемкаДСИзКассыККМ";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВыемкаДСИзКассыККМ_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение
Процедура ДобавитьПОД_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЗаявкаНаРасходДСРасчетыСКонтрагентами";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение = ДанныеXDTO.Свойство("ВидРасчетов") И ЗначениеЗаполнено(ДанныеXDTO.ВидРасчетов) И ДанныеXDTO.ВидРасчетов.Значение = "СПоставщиком";
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Получение
Процедура ДобавитьПОД_Документ_ОприходованиеТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОприходованиеТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОприходованиеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомитенту_Получение
Процедура ДобавитьПОД_Документ_ОтчетКомитенту_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетКомитенту_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетКомитенту";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомитенту_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах_Получение
Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОтчетОРозничныхПродажах_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОтчетОРозничныхПродажах";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Получение
Процедура ДобавитьПОД_Документ_ПеремещениеТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПеремещениеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПолучениеНаличныхВБанке_Получение
Процедура ДобавитьПОД_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПолучениеНаличныхВБанке_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПолучениеНаличныхВБанке_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочееПоступление_Получение
Процедура ДобавитьПОД_Документ_ПКОПрочееПоступление_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПрочееПоступление_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПрочееПоступление";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочееПоступление_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочиеДоходы_Получение
Процедура ДобавитьПОД_Документ_ПКОПрочиеДоходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОПрочиеДоходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОПрочиеДоходы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочиеДоходы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Получение
Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваровУслуг_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровУслуг_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Получение
Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РеализацияТоваровУслуг_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РеализацияТоваровУслуг";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_РеализацияТоваровУслуг_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг_Получение");
КонецПроцедуры

Процедура ПОД_Документ_РеализацияТоваровУслуг_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РеализацияТоваровУслуг_Получение = ДанныеXDTO.Свойство("ВидОперации") И ЗначениеЗаполнено(ДанныеXDTO.ВидОперации) И ДанныеXDTO.ВидОперации.Значение = "РеализацияКлиенту";
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОНаБанковскийСчет_Получение
Процедура ДобавитьПОД_Документ_РКОНаБанковскийСчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОНаБанковскийСчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОНаБанковскийСчет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочийРасход_Получение
Процедура ДобавитьПОД_Документ_РКОПрочийРасход_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РКОПрочийРасход_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РКОПрочийРасход";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочийРасход_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Получение");
КонецПроцедуры

Процедура ПОД_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Получение = ДанныеXDTO.Свойство("ВидРасчетов") И ЗначениеЗаполнено(ДанныеXDTO.ВидРасчетов) И ДанныеXDTO.ВидРасчетов.Значение = "СПоставщиком";
КонецПроцедуры
#КонецОбласти
#Область Документ_СборкаТоваров_Получение
Процедура ДобавитьПОД_Документ_СборкаТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СборкаТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СборкаТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СборкаТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеЗапасов
Процедура ДобавитьПОД_Документ_СписаниеЗапасов(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеЗапасов";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СписаниеЗапасов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеЗапасов_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваров_Получение
Процедура ДобавитьПОД_Документ_СписаниеТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СписаниеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Получение
Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_УстановкаЦенНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.УстановкаЦенНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатуры_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ЧекККМ_Получение
Процедура ДобавитьПОД_Документ_ЧекККМ_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ЧекККМ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ЧекККМ";
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ЧекККМ_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЧекККМ_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ЧекККМ_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	//Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОфлайнКасса" Тогда
		ИспользованиеПКО.Документ_ЧекККМ_Получение = Ложь;
	//КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ДополнительныеРеквизиты_Получение
Процедура ДобавитьПОД_ДополнительныеРеквизиты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ДополнительныеРеквизиты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ДополнительныеРеквизиты";
	ПравилоОбработки.ПриОбработке            = "ПОД_ДополнительныеРеквизиты_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДополнительныеРеквизиты");
КонецПроцедуры

Процедура ПОД_ДополнительныеРеквизиты_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		ИспользованиеПКО.Справочник_ДополнительныеРеквизиты = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ЕдиницыИзмерения_Получение
Процедура ДобавитьПОД_ЕдиницыИзмерения_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ЕдиницыИзмерения_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЕдиницыИзмерения";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры
#КонецОбласти
#Область ЗначенияДопРеквизитов_Получение
Процедура ДобавитьПОД_ЗначенияДопРеквизитов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ЗначенияДопРеквизитов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЗначенияДополнительныхРеквизитов";
	ПравилоОбработки.ПриОбработке            = "ПОД_ЗначенияДопРеквизитов_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗначенияДополнительныхРеквизитов");
КонецПроцедуры

Процедура ПОД_ЗначенияДопРеквизитов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		ИспользованиеПКО.Справочник_ЗначенияДополнительныхРеквизитов = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Номенклатура_Получение
Процедура ДобавитьПОД_Номенклатура_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Номенклатура_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Номенклатура";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Получение");
КонецПроцедуры
#КонецОбласти
#Область НоменклатураГруппа
Процедура ДобавитьПОД_НоменклатураГруппа(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "НоменклатураГруппа";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.НоменклатураГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Получение
Процедура ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Банки";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Получение
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.БанковскиеСчета";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчетаОрганизаций_Получение");
КонецПроцедуры

Процедура ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_БанковскиеСчетаКонтрагентов_Получение = Ложь;
	ИспользованиеПКО.Справочник_БанковскиеСчетаОрганизаций_Получение = Ложь;
	Владелец = ДанныеXDTO.КлючевыеСвойства.Владелец;
	Если ЗначениеЗаполнено(Владелец) Тогда
		Если Владелец.ТипЗначения = "Организация" Тогда
			ИспользованиеПКО.Справочник_БанковскиеСчетаОрганизаций_Получение = Истина;		
		ИначеЕсли Владелец.ТипЗначения = "Контрагент" Тогда
			ИспользованиеПКО.Справочник_БанковскиеСчетаКонтрагентов_Получение = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Получение
Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ДоговорыКонтрагентов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Договоры";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ДоговорыКонтрагентов_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_Получение");
КонецПроцедуры

Процедура ПОД_Справочник_ДоговорыКонтрагентов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ДоговорыКонтрагентов_Получение = Ложь;
	ТипДоговора = Неопределено;
	ВидДоговора = Неопределено;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВидДоговора") Тогда
		
		ВидДоговора = ДанныеXDTO.КлючевыеСвойства.ВидДоговора;
		
		Если  ТипЗнч(ВидДоговора) = Тип("Структура")
			И ВидДоговора.Свойство("Значение") Тогда
		    
		    ТипДоговора = ВидДоговора.Значение;
		    
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТипДоговора) И ТипДоговора = "СКомитентом" Тогда
		ИспользованиеПКО.Справочник_ДоговорыКонтрагентов_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_КассыККМ_Получение
Процедура ДобавитьПОД_Справочник_КассыККМ_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КассыККМ_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КассыККМ";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КассыККМ_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Контрагенты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа_Получение
Процедура ДобавитьПОД_Справочник_КонтрагентыГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КонтрагентыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КонтрагентыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Магазины_Получение
Процедура ДобавитьПОД_Справочник_Магазины_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Магазины_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Склады";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Получение
Процедура ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Пользователи";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Получение
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтатьиДДС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДДС";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("СтатьиДДС");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Получение
Процедура ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтраныМира";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен_Получение
Процедура ДобавитьПОД_Справочник_ТипыЦен_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ТипыЦен_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ТипыЦен";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Получение
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛица";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа
Процедура ДобавитьПОД_Справочник_ФизическиеЛицаГруппа(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛицаГруппа";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛицаГруппа";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ФизическиеЛицаГруппа_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_ФизическиеЛицаГруппа_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ФизическиеЛицаГруппа = Ложь;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ХарактеристикиНоменклатуры_Получение
Процедура ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ХарактеристикиНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ХарактеристикиНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ХарактеристикиНоменклатуры");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ШтрихкодыНоменклатуры_Получение
Процедура ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ШтрихкодыНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыНоменклатуры_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЭквайринговыеТерминалы_Получение
Процедура ДобавитьПОД_Справочник_ЭквайринговыеТерминалы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЭквайринговыеТерминалы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЭквайринговыеТерминалы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЭквайринговыеТерминалы_Получение");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнвентаризационнаяОпись_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОплатаОтПокупателяПлатежнойКартой_Отправк(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОРП_Отправка_СтарыеВерсииФормата(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомитенту_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомитентуОСписании_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересортицаВОприходование_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересортицаВСписание_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересортицаВСписание_Отправка12(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПересчетТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочиеДоходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПрименениеЦенНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочийРасход_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СборкаТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураВыданный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ПередачаМеждуОрганизациями_ПТУ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ПередачаМеждуОрганизациями_РТУ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ПКО_АТТ_ОтчетОРозничныхПродажах(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Валюта_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыАлкогольнойПродукции_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыПодарочныхСертификатов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыЦен_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КассыККМ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Пользователи_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ПравилаЦенообразованияВТипыЦен_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Отправка12(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Документ_ВнесениеДСВКассуККМ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВыемкаДСИзКассыККМ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомитенту_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочееПоступление_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочиеДоходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочийРасход_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СборкаТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеЗапасов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЧекККМ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчетаОрганизаций_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыАлкогольнойПродукции_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КассыККМ_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НомерГТД_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Пользователи_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ТипыЦен_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЭквайринговыеТерминалы_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_Банки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СерииНоменклатуры(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Упаковки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ФизическиеЛицаГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ХарактеристикиНоменклатуры(ПравилаКонвертации);
	ДобавитьПКО_СтатьиДДС(ПравилаКонвертации);
КонецПроцедуры

Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

#Область Отправка
#Область Документ_ВозвратТоваровОтПокупателя_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Магазин",               "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПредъявленСчетФактура", "ПокупателемВыставляетсяСчетФактураНаВозврат");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",       "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                      "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                      "ДокументРеализации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "РасчетыВУсловныхЕдиницах", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ВозвратПодДеятельность", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Себестоимость", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	КурсКратность(ДанныеXDTO);
	
	ВыгрузитьДоговор(ДанныеИБ, ДанныеXDTO,"СПокупателем");
	
	ДанныеXDTO.Вставить("ВидОперации","ВозвратОтРозничногоПокупателя");
	
	Если ДанныеИБ.УчитыватьНДС Тогда
		Налогообложение = "ОблагаетсяНДС";
	Иначе
		Налогообложение = "НеОблагаетсяНДС";
	КонецЕсли;
	ДанныеXDTO.Вставить("Налогообложение",Налогообложение);
	
	ДокументРеализации = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.ДокументПродажи
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ДокументРеализации = Выборка.ДокументПродажи;
	ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
		ДокументРеализации = ДанныеИБ.ДокументОснование;
	КонецЕсли;	
	Если ДокументРеализации <> Неопределено Тогда
		ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
		Если ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			ИмяПКО = "Документ_ОтчетОРозничныхПродажах_Отправка";
		КонецЕсли;
		ДанныеXDTO.Вставить("ДокументРеализации", Новый Структура("Значение, ИмяПКО", ДокументРеализации, ИмяПКО));
	Иначе
		ДанныеXDTO.Вставить("ДокументРеализации", Неопределено);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Магазин",         "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                "ВалютаВзаиморасчетов", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                "РасчетыВУсловныхЕдиницах", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	Если ДанныеИБ.УчитыватьНДС Тогда
		Налогообложение = "ПродажаОблагаетсяНДС";
	Иначе
		Налогообложение = "ПродажаНеОблагаетсяНДС";
	КонецЕсли;
	ДанныеXDTO.Вставить("Налогообложение",Налогообложение);
	
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", Инструкция);
	
	КурсКратность(ДанныеXDTO);
	
	Если ЗначениеЗаполнено(ДанныеИБ.Договор) Тогда
		ВидОперации = "ВозвратКомитенту";
		ВыгрузитьДоговор(ДанныеИБ, ДанныеXDTO,"СКомитентом");
	Иначе 
		ВидОперации = "ВозвратПоставщику";
		ВыгрузитьДоговор(ДанныеИБ, ДанныеXDTO,"СПоставщиком");
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризационнаяОпись_Отправка
Процедура ДобавитьПКО_Документ_ИнвентаризационнаяОпись_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ИнвентаризационнаяОпись_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриказНаПроведениеИнвентаризацииТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ИнвентаризацияТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнвентаризационнаяОпись_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",    "ДатаНачалаИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончания", "ДатаОкончанияИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",       "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковокУчет", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУчет", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаУчет", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаЗаУпаковку", 1);

КонецПроцедуры

Процедура ПКО_Документ_ИнвентаризационнаяОпись_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОплатаОтПокупателяПлатежнойКартой_Отправк
Процедура ДобавитьПКО_Документ_ОплатаОтПокупателяПлатежнойКартой_Отправк(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОплатаОтПокупателяПлатежнойКартой_Отправк";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОплатаОтПокупателяПлатежнойКартой;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОперацияПоПлатежнойКарте";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОплатаОтПокупателяПлатежнойКартой_Отправк_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерПлатежнойКарты",   "НомерКарты");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",          "НомерЧекаККМ");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "ВидОперации", , "ХозяйственныеОперацииВВидыОперацийПоПлатежнойКарте");
	ДобавитьПКС(СвойстваШапки, "Эквайрер",              "Эквайрер", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОплатаОтПокупателяПлатежнойКартой_Отправк_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.Сумма,
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.Сумма КАК СуммаВзаиморасчетов,
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом,
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	1 КАК КратностьВзаиморасчетов,
	|	1 КАК КурсВзаиморасчетов
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа
	|ГДЕ
	|	ОплатаОтПокупателяПлатежнойКартойРасшифровкаПлатежа.Ссылка = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	РасшифровкаПлатежа = Запрос.Выполнить().Выгрузить();
	
	РасшифровкаПлатежа.Колонки.Добавить("Договор");
	РасшифровкаПлатежа.Колонки.Добавить("Заказ");
	РасшифровкаПлатежа.Колонки.Добавить("ВалютаВзаиморасчетов");
	РасшифровкаПлатежа.Колонки.Добавить("РасчетыВУсловныхЕдиницах");
	
	Для Каждого СтрокаРасшифровкаПлатежа Из РасшифровкаПлатежа Цикл
		
		СтруктураДоговор = Новый Структура;
		СтруктураДоговор.Вставить("ВидДоговора", "СПокупателем");
		СтруктураДоговор.Вставить("Организация", ДанныеИБ.Организация);
		СтруктураДоговор.Вставить("Контрагент", ДанныеИБ.Контрагент);
		СтруктураДоговор.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
	
		СтруктураДанныеВалюты = Новый Структура;
		СтруктураДанныеВалюты.Вставить("Код", 643);
		СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	
		СтруктураДоговор.Вставить("ВалютаВзаиморасчетов", Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры"));
		
		СтрокаРасшифровкаПлатежа.Договор = Новый Структура("Значение, ИмяПКО", СтруктураДоговор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
		
		Если ЗначениеЗаполнено(СтрокаРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом) Тогда              
			ИмяПКО = "";
			ТипСсылки = ТипЗнч(СтрокаРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом);
			Если ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
			ИначеЕсли
				ТипСсылки = Тип("ДокументСсылка.РеализацияТоваров") Тогда
				ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
			КонецЕсли;
	
			Если ИмяПКО <> "" Тогда
				СтрокаРасшифровкаПлатежа.Заказ = Новый Структура("Значение, ИмяПКО", СтрокаРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом, ИмяПКО);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий", "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",     "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",       "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация", "Организация", , "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОРП_Отправка_СтарыеВерсииФормата
Процедура ДобавитьПКО_Документ_ОРП_Отправка_СтарыеВерсииФормата(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОРП_Отправка_СтарыеВерсииФормата";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОРП_Отправка_СтарыеВерсииФормата_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",         "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаПлатежнымиКартами");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДоговорЭквайринга", 1,"Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "НомерКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаОплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Эквайрер", 1,"Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаСертификатами");
	ДобавитьПКС(СвойстваТЧ, "", "МагнитныйКод", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПодарочныеСертификаты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидПодарочногоСертификата", 1,"Справочник_ВидыПодарочныхСертификатов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДействителенДо", 1);
	ДобавитьПКС(СвойстваТЧ, "", "МагнитныйКод", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОРП_Отправка_СтарыеВерсииФормата_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура.Ссылка КАК ВидПодарочногоСертификата,
	|	Товары.Сумма КАК Сумма,
	|	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод,
	|	ПродажаПС.СерийныйНомер.КодСерийногоНомера КАК МагнитныйКод,
	|	ПродажаПС.СерийныйНомер.Код КАК СерийныйНомер
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.СерийныеНомера КАК ПродажаПС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Товары КАК Товары
	|		ПО (ПродажаПС.КлючСвязиСерийныхНомеров = Товары.КлючСвязиСерийныхНомеров)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО ПродажаПС.СерийныйНомер = Штрихкоды.Владелец
	|ГДЕ
	|	ПродажаПС.Ссылка = &Ссылка
	|	И ПродажаПС.СерийныйНомер <> ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажаПС.СерийныйНомер.КодСерийногоНомера,
	|	ПродажаПС.СерийныйНомер.Код,
	|	Товары.Номенклатура.Ссылка,
	|	Товары.Сумма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ОплатаКартами.Сумма) КАК СуммаОплаты,
	|	1 КАК НомерКарты,
	|	ОплатаКартами.ВидОплаты.Представление КАК ВидКарты,
	|	ОплатаКартами.ЭквайринговыйТерминал.Эквайрер КАК Эквайрер
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК ОплатаКартами
	|ГДЕ
	|	ОплатаКартами.Ссылка = &Ссылка
	|	И ОплатаКартами.ЭквайринговыйТерминал <> ЗНАЧЕНИЕ(Справочник.ЭквайринговыеТерминалы.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаКартами.ВидОплаты.Представление,
	|	ОплатаКартами.ЭквайринговыйТерминал.Эквайрер
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОплатаКартами.Сумма) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПогашениеПС.ПодарочныйСертификат.Номинал КАК Сумма,
	|	ПогашениеПС.СерийныйНомер.КодСерийногоНомера КАК МагнитныйКод,
	|	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод,
	|	ПогашениеПС.СерийныйНомер.Код КАК СерийныйНомер
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ПогашениеПодарочныхСертификатов КАК ПогашениеПС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО ПогашениеПС.СерийныйНомер = Штрихкоды.Владелец
	|ГДЕ
	|	ПогашениеПС.Ссылка = &Ссылка
	|	И ПогашениеПС.СерийныйНомер <> ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПогашениеПС.СерийныйНомер.КодСерийногоНомера,
	|	ПогашениеПС.СерийныйНомер.Код,
	|	ПогашениеПС.ПодарочныйСертификат.Номинал";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Товары = ДанныеИБ.ДополнительныеСвойства.Товары;
	ДанныеXDTO.Вставить("Товары", Товары);
	
	СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Товары, ДанныеИБ.ЦенаВключаетНДС);
	ДанныеXDTO.Вставить("Сумма", СуммаДокумента);
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ОтчетОРозничныхПродажах.ПодарочныеСертификаты") И НЕ РезультатыЗапроса[0].Пустой() Тогда
		ПодарочныеСертификаты = РезультатыЗапроса[0].Выгрузить();
		ДанныеXDTO.Вставить("ПодарочныеСертификаты", ПодарочныеСертификаты);
	КонецЕсли;
	
	Если НЕ РезультатыЗапроса[1].Пустой() Тогда
		ОплатаКартами = РезультатыЗапроса[1].Выгрузить();
		ОплатаКартами.Колонки.Добавить("ДоговорЭквайринга");
	
		СтруктураДанныеВалюты = Новый Структура;
		СтруктураДанныеВалюты.Вставить("Код", 643);
		СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	
		Для Каждого Строка ИЗ ОплатаКартами Цикл
			Валюта = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
			СтруктураДанныеДоговора = Новый Структура("Организация, Контрагент, ВидДоговора, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах",
								ДанныеИБ.Организация, Строка.Эквайрер, "Прочее", Валюта , Ложь);
			Строка.ДоговорЭквайринга = Новый Структура("Значение, ИмяПКО", СтруктураДанныеДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");	
		КонецЦикла;
		ДанныеXDTO.Вставить("ОплатаПлатежнымиКартами", ОплатаКартами);
	КонецЕсли;
	
	Если НЕ РезультатыЗапроса[2].Пустой() Тогда
		ОплатаСертификатами = РезультатыЗапроса[2].Выгрузить();
		ДанныеXDTO.Вставить("ОплатаСертификатами", ОплатаСертификатами);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомитенту_Отправка
Процедура ДобавитьПКО_Документ_ОтчетКомитенту_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетКомитенту_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетКомитентуОПродажах;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетКомитенту";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                               "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                              "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                            "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПроцентКомиссионногоВознаграждения",       "ПроцентКомиссионногоВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СпособРасчетаКомиссионногоВознаграждения", "СпособРасчетаКомиссионногоВознаграждения", , "СпособыРасчетаКомиссионногоВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДСВознаграждения",                  "СтавкаНДСВознаграждения", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаВознаграждения",                      "СуммаВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                           "Сумма");
	ДобавитьПКС(СвойстваШапки, "УслугаКомиссионногоВознаграждения",        "УслугаПоВознаграждению", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",                          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                                         "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                                         "ВалютаВзаиморасчетов", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                                         "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                                         "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                                         "КурсВзаиморасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаРеализации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДСВознаграждения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаПоступления", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	ВыгрузитьВалютуВзаиморасчетов(ДанныеXDTO);
	КурсКратность(ДанныеXDTO);
	ВыгрузитьДоговор(ДанныеИБ, ДанныеXDTO,"СКомитентом");
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.СтавкаНДСВознаграждения) Тогда
		ДанныеXDTO.Вставить("СтавкаНДСВознаграждения", "БезНДС");
	КонецЕсли;
	
	//Товары
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОтчетКомитентуОПродажахТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	ОтчетКомитентуОПродажахТовары.Номенклатура КАК Номенклатура,
	|	ОтчетКомитентуОПродажахТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ОтчетКомитентуОПродажахТовары.Характеристика КАК Характеристика,
	|	ОтчетКомитентуОПродажахТовары.Упаковка КАК Упаковка,
	|	ОтчетКомитентуОПродажахТовары.Количество КАК Количество,
	|	ОтчетКомитентуОПродажахТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ОтчетКомитентуОПродажахТовары.Цена КАК ЦенаПоступления,
	|	ОтчетКомитентуОПродажахТовары.Сумма КАК СуммаПоступления,
	|	ОтчетКомитентуОПродажахТовары.СтавкаНДС КАК СтавкаНДС,
	|	ОтчетКомитентуОПродажахТовары.СуммаНДС КАК СуммаНДС,
	|	ОтчетКомитентуОПродажахТовары.ЦенаПродажи КАК Цена,
	|	ОтчетКомитентуОПродажахТовары.СуммаПродажи КАК Сумма,
	|	ОтчетКомитентуОПродажахТовары.СуммаВознаграждения КАК СуммаВознаграждения,
	|	ВЫРАЗИТЬ(&КоэффициентПересчета * ОтчетКомитентуОПродажахТовары.СуммаВознаграждения КАК ЧИСЛО(15, 2)) КАК СуммаНДСВознаграждения,
	|	ОтчетКомитентуОПродажахТовары.ДокументРеализации.Дата КАК ДатаРеализации
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах.Товары КАК ОтчетКомитентуОПродажахТовары
	|ГДЕ
	|	ОтчетКомитентуОПродажахТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("КоэффициентПересчета", ?(ДанныеИБ.СуммаВознаграждения = 0, 0, ДанныеИБ.СуммаНДСВознаграждения / ДанныеИБ.СуммаВознаграждения));
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить())
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомитентуОСписании_Отправка
Процедура ДобавитьПКО_Документ_ОтчетКомитентуОСписании_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетКомитентуОСписании_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетКомитентуОСписании;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетКомитенту";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетКомитентуОСписании_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                "ВалютаВзаиморасчетов", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПоступления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаПоступления", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомитентуОСписании_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Лев(ДанныеИБ.Номер, 5) + "С" + Сред(ДанныеИБ.Номер, 7));
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	ВыгрузитьВалютуВзаиморасчетов(ДанныеXDTO);
	КурсКратность(ДанныеXDTO);
	ВыгрузитьДоговор(ДанныеИБ, ДанныеXDTO,"СКомитентом");
	
	ДанныеXDTO.Вставить("СпособРасчетаКомиссионногоВознаграждения", "НеРассчитывается");
	ДанныеXDTO.Вставить("СтавкаНДСВознаграждения", "БезНДС");
	
	//Товары
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Цена КАК ЦенаПоступления,
	|	Товары.Сумма КАК СуммаПоступления,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах_Отправка
Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",         "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",           "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",     "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",   "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаПлатежнымиКартами");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДоговорЭквайринга", 1,"Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "НомерКарты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаОплаты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Эквайрер", 1,"Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ОплатаСертификатами");
	ДобавитьПКС(СвойстваТЧ, "", "МагнитныйКод", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПодарочныеСертификаты");
	ДобавитьПКС(СвойстваТЧ, "", "ВидПодарочногоСертификата", 1,"Справочник_ВидыПодарочныхСертификатов_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ДействителенДо", 1);
	ДобавитьПКС(СвойстваТЧ, "", "МагнитныйКод", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СерийныйНомер", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Штрихкод", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ТоварыПродажа");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура.Ссылка КАК ВидПодарочногоСертификата,
	|	Товары.Сумма КАК Сумма,
	|	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод,
	|	ПродажаПС.СерийныйНомер.КодСерийногоНомера КАК МагнитныйКод,
	|	ПродажаПС.СерийныйНомер.Код КАК СерийныйНомер
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.СерийныеНомера КАК ПродажаПС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Товары КАК Товары
	|		ПО (ПродажаПС.КлючСвязиСерийныхНомеров = Товары.КлючСвязиСерийныхНомеров)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО ПродажаПС.СерийныйНомер = Штрихкоды.Владелец
	|ГДЕ
	|	ПродажаПС.Ссылка = &Ссылка
	|	И ПродажаПС.СерийныйНомер <> ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажаПС.СерийныйНомер.КодСерийногоНомера,
	|	ПродажаПС.СерийныйНомер.Код,
	|	Товары.Номенклатура.Ссылка,
	|	Товары.Сумма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ОплатаКартами.Сумма) КАК СуммаОплаты,
	|	1 КАК НомерКарты,
	|	ОплатаКартами.ВидОплаты.Представление КАК ВидКарты,
	|	ОплатаКартами.ЭквайринговыйТерминал.Эквайрер КАК Эквайрер
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК ОплатаКартами
	|ГДЕ
	|	ОплатаКартами.Ссылка = &Ссылка
	|	И ОплатаКартами.ЭквайринговыйТерминал <> ЗНАЧЕНИЕ(Справочник.ЭквайринговыеТерминалы.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаКартами.ВидОплаты.Представление,
	|	ОплатаКартами.ЭквайринговыйТерминал.Эквайрер
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОплатаКартами.Сумма) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПогашениеПС.ПодарочныйСертификат.Номинал КАК Сумма,
	|	ПогашениеПС.СерийныйНомер.КодСерийногоНомера КАК МагнитныйКод,
	|	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод,
	|	ПогашениеПС.СерийныйНомер.Код КАК СерийныйНомер
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ПогашениеПодарочныхСертификатов КАК ПогашениеПС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО ПогашениеПС.СерийныйНомер = Штрихкоды.Владелец
	|ГДЕ
	|	ПогашениеПС.Ссылка = &Ссылка
	|	И ПогашениеПС.СерийныйНомер <> ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПогашениеПС.СерийныйНомер.КодСерийногоНомера,
	|	ПогашениеПС.СерийныйНомер.Код,
	|	ПогашениеПС.ПодарочныйСертификат.Номинал";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Товары = ДанныеИБ.ДополнительныеСвойства.Товары;
	ДанныеXDTO.Вставить("ТоварыПродажа", Товары);
	
	СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Товары, ДанныеИБ.ЦенаВключаетНДС);
	ДанныеXDTO.Вставить("Сумма", СуммаДокумента);
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ОтчетОРозничныхПродажах.ПодарочныеСертификаты") И НЕ РезультатыЗапроса[0].Пустой() Тогда
		ПодарочныеСертификаты = РезультатыЗапроса[0].Выгрузить();
		ДанныеXDTO.Вставить("ПодарочныеСертификаты", ПодарочныеСертификаты);
	КонецЕсли;
	
	Если НЕ РезультатыЗапроса[1].Пустой() Тогда
		ОплатаКартами = РезультатыЗапроса[1].Выгрузить();
		ОплатаКартами.Колонки.Добавить("ДоговорЭквайринга");
	
		СтруктураДанныеВалюты = Новый Структура;
		СтруктураДанныеВалюты.Вставить("Код", 643);
		СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	
		Для Каждого Строка ИЗ ОплатаКартами Цикл
			Валюта = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
			СтруктураДанныеДоговора = Новый Структура("Организация, Контрагент, ВидДоговора, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах",
								ДанныеИБ.Организация, Строка.Эквайрер, "Прочее", Валюта , Ложь);
			Строка.ДоговорЭквайринга = Новый Структура("Значение, ИмяПКО", СтруктураДанныеДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");	
		КонецЦикла;
		ДанныеXDTO.Вставить("ОплатаПлатежнымиКартами", ОплатаКартами);
	КонецЕсли;
	
	Если НЕ РезультатыЗапроса[2].Пустой() Тогда
		ОплатаСертификатами = РезультатыЗапроса[2].Выгрузить();
		ДанныеXDTO.Вставить("ОплатаСертификатами", ОплатаСертификатами);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "МагазинОтправитель", "СкладОтправитель", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "МагазинПолучатель",  "СкладПолучатель", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",      "Ответственный", , "Справочник_Пользователи_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСВРознице", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "ЦенаВРознице", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересортицаВОприходование_Отправка
Процедура ДобавитьПКО_Документ_ПересортицаВОприходование_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересортицаВОприходование_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПересортицаТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересортицаВОприходование_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",       "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПересортицаВОприходование_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	//Товары
	ТоварыДокумента =
	"ВЫБРАТЬ
	|   ПересортицаТоваровТовары.Номенклатура,
	|   ПересортицаТоваровТовары.Количество,
	|   СправочникНоменклатура.ЕдиницаИзмерения,
	|   СправочникНоменклатура.СтранаПроисхождения,
	|   0 КАК НомерГТД,
	|   ""СобственныеТовары"" КАК ТипЗапасов,
	|   ПересортицаТоваровТовары.Цена * ПересортицаТоваровТовары.Количество КАК Сумма,
	|   ПересортицаТоваровТовары.ЦенаОприходование КАК Цена
	|ИЗ
	|   Документ.ПересортицаТоваров.Товары КАК ПересортицаТоваровТовары
	|       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|       ПО ПересортицаТоваровТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|   ПересортицаТоваровТовары.Ссылка = &Ссылка
	|   И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)";
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.Выполнить();
	Товары = РезультатыЗапроса.Выгрузить();
	ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
	ДанныеXDTO.Вставить("Сумма", Товары.Итог("Сумма"));
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересортицаВСписание_Отправка
Процедура ДобавитьПКО_Документ_ПересортицаВСписание_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересортицаВСписание_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПересортицаТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересортицаВСписание_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",       "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПересортицаВСписание_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	//Товары
	ТоварыДокумента =
	"ВЫБРАТЬ
	|   ПересортицаТоваровТовары.Номенклатура,
	|   ПересортицаТоваровТовары.Количество,
	|   ПересортицаТоваровТовары.Цена,
	|   СправочникНоменклатура.ЕдиницаИзмерения,
	|   СправочникНоменклатура.СтранаПроисхождения,
	|   0 КАК НомерГТД,
	|   ""СобственныеТовары"" КАК ТипЗапасов,
	|   ПересортицаТоваровТовары.Количество * ПересортицаТоваровТовары.Цена КАК Сумма
	|ИЗ
	|   Документ.ПересортицаТоваров.Товары КАК ПересортицаТоваровТовары
	|       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|       ПО ПересортицаТоваровТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|   ПересортицаТоваровТовары.Ссылка = &Ссылка
	|   И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)";
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.Выполнить();
	Товары = РезультатыЗапроса.Выгрузить();
	ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
	ДанныеXDTO.Вставить("Сумма", Товары.Итог("Сумма"));
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересортицаВСписание_Отправка12
Процедура ДобавитьПКО_Документ_ПересортицаВСписание_Отправка12(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересортицаВСписание_Отправка12";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПересортицаТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересортицаВСписание_Отправка12_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",       "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПересортицаВСписание_Отправка12_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	//Товары
	ТоварыДокумента =
	"ВЫБРАТЬ
	|   ПересортицаТоваровТовары.Номенклатура,
	|   ПересортицаТоваровТовары.Количество,
	|   ПересортицаТоваровТовары.Цена,
	|   СправочникНоменклатура.ЕдиницаИзмерения,
	|   СправочникНоменклатура.СтранаПроисхождения,
	|   0 КАК НомерГТД,
	|   ""СобственныеТовары"" КАК ТипЗапасов,
	|   ПересортицаТоваровТовары.Количество * ПересортицаТоваровТовары.Цена КАК Сумма
	|ИЗ
	|   Документ.ПересортицаТоваров.Товары КАК ПересортицаТоваровТовары
	|       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|       ПО ПересортицаТоваровТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|   ПересортицаТоваровТовары.Ссылка = &Ссылка
	|   И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)";
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.Выполнить();
	Товары = РезультатыЗапроса.Выгрузить();
	ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
	ДанныеXDTO.Вставить("Сумма", Товары.Итог("Сумма"));
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПересчетТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПересчетТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПересчетТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПересчетТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПересчетТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПересчетТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",       "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "НачалоПериодаИнвентаризации", 1);
	ДобавитьПКС(СвойстваШапки, "",              "ОкончаниеПериодаИнвентаризации", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковокФакт", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоФакт", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаФакт", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПересчетТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПриказНаИнвентаризацию = ДанныеИБ.ДокументОснование;
	ДанныеXDTO.Вставить("НачалоПериодаИнвентаризации", ПриказНаИнвентаризацию.ДатаНачала);
	ДанныеXDTO.Вставить("ОкончаниеПериодаИнвентаризации", ПриказНаИнвентаризацию.ДатаОкончания);
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПолучениеНаличныхВБанке_Отправка
Процедура ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПолучениеНаличныхВБанке_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет", "БанковскийСчет", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",   "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",      "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",               "ВидОперации", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьВалюту(ДанныеXDTO);
	ДанныеXDTO.Вставить("ВидОперации", ДанныеИБ.ДополнительныеСвойства.ВидОперации);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочиеДоходы_Отправка
Процедура ДобавитьПКО_Документ_ПКОПрочиеДоходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОПрочиеДоходы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОПрочиеДоходы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",   "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",      "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	НоваяСтрока = ТабРасшифровка.Добавить();
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() >  0 И ЗначениеЗаполнено(ДанныеИБ.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств) Тогда
		НоваяСтрока.СтатьяДДС = ДанныеИБ.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",   "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",      "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",               "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",     "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПоступлениеИзДругойОрганизации = Ложь;
	КонтрагентСсылка = ДанныеИБ.Контрагент;
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
		ЭтоПоступлениеИзДругойОрганизации = Истина;
		ОрганизацияКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "Организация");
		//Поиск контрагента, соответствующего Организации
		СсылкаНаКонтрагента = Справочники.Контрагенты.ПолучитьСсылку(ОрганизацияКонтрагента.УникальныйИдентификатор());
		Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаКонтрагента) Тогда
			КонтрагентСсылка = СсылкаНаКонтрагента;
		Иначе
			НайтиСоздатьКонтрагентаПоОрганизацииРТ(ОрганизацияКонтрагента, КонтрагентСсылка);
		КонецЕсли;
	
		ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
		ХозОперацияРКО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДокументОснование, "ХозяйственнаяОперация");
		Если  ХозОперацияРКО = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию Тогда
			ВидРасчетов = "СПоставщиком";
		Иначе
			ВидРасчетов = "СПокупателем";
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
		ВидРасчетов = "СПоставщиком";
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы Тогда
	//проверку счетов выполним в ПОД
		ВидРасчетов = "КредитыИЗаймы";
	Иначе
		ВидРасчетов = "СПокупателем";
	КонецЕсли;
	
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ДанныеXDTO.Вставить("Валюта", Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры"));
	
	//Расшифровка платежа
	Если ЭтоПоступлениеИзДругойОрганизации Тогда
		РасшифровкаПлатежа = "
		|	ВЫБРАТЬ
		|	ПриходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
		|	ПриходныйКассовыйОрдер.СуммаДокумента КАК СуммаВзаиморасчетов,
		|	ПриходныйКассовыйОрдер.ДокументОснование КАК ДокументРасчетовСКонтрагентом,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВДругуюОрганизацию) КАК СтатьяДДС
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		|ГДЕ
		|	ПриходныйКассовыйОрдер.Ссылка = &Ссылка";
		Запрос = Новый Запрос;
		Запрос.Текст = РасшифровкаПлатежа;
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Иначе
		РасшифровкаПлатежа = "
		|ВЫБРАТЬ
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	РасшифровкаПлатежа.Сумма,
		|	РасшифровкаПлатежа.Сумма КАК СуммаВзаиморасчетов,
		|	РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|ГДЕ
		|	РасшифровкаПлатежа.Ссылка = &Ссылка";
		Запрос = Новый Запрос;
		Запрос.Текст = РасшифровкаПлатежа;
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	КонецЕсли;
	
	ТабРасшифровка = Запрос.Выполнить().Выгрузить();
	ТабРасшифровка.Колонки.Добавить("Договор");
	ТабРасшифровка.Колонки.Добавить("Заказ");
	ТабРасшифровка.Колонки.Добавить("ВалютаВзаиморасчетов");
	ТабРасшифровка.Колонки.Добавить("КурсВзаиморасчетов");
	ТабРасшифровка.Колонки.Добавить("КратностьВзаиморасчетов");
	ТабРасшифровка.Колонки.Добавить("РасчетыВУсловныхЕдиницах");
	
	Для Каждого СтрокаТаб Из ТабРасшифровка Цикл
		Если ВидРасчетов = "СПоставщиком" Тогда
			ВидДоговора = "СПоставщиком";
		Иначе
			ВидДоговора = "СПокупателем";
		КонецЕсли;
		СтруктураДоговор = Новый Структура;
		СтруктураДоговор.Вставить("ВидДоговора", ВидДоговора);
		СтруктураДоговор.Вставить("Организация", ДанныеИБ.Организация);
		СтруктураДоговор.Вставить("Контрагент", КонтрагентСсылка);
		СтруктураДоговор.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
		СтруктураДоговор.Вставить("ВалютаВзаиморасчетов", Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры"));
		СтрокаТаб.Договор = Новый Структура("Значение, ИмяПКО", СтруктураДоговор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	
		СтрокаТаб.КурсВзаиморасчетов = 1;
		СтрокаТаб.КратностьВзаиморасчетов = 1;
		СтрокаТаб.РасчетыВУсловныхЕдиницах = Ложь;
		СтрокаТаб.ВалютаВзаиморасчетов = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	
		Если ЗначениеЗаполнено(СтрокаТаб.ДокументРасчетовСКонтрагентом) Тогда
			ИмяПКО = "";
			ТипСсылки = ТипЗнч(СтрокаТаб.ДокументРасчетовСКонтрагентом);
			Если ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
			КонецЕсли;
	
			Если ИмяПКО <> "" Тогда
				СтрокаТаб.Заказ = Новый Структура("Значение, ИмяПКО", СтрокаТаб.ДокументРасчетовСКонтрагентом, ИмяПКО);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРозничнаяВыручка_Отправка
Процедура ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПКОРозничнаяВыручка_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРозничнаяВыручка";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",   "НомерЧекаККМ");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",      "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",               "ВыручкаНТТ", 1);
	ДобавитьПКС(СвойстваШапки, "",               "Склад", 1, "Справочник_Склады_Отправка");

КонецПроцедуры

Процедура ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьВалюту(ДанныеXDTO);
	ДанныеXDTO.Вставить("Склад", ДанныеИБ.КассаККМ.Магазин);
	ДанныеXDTO.Вставить("ВыручкаНТТ", Ложь);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПоступлениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчетаКонтрагентов_Отправка");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Магазин",                   "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                          "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                          "ВалютаВзаиморасчетов", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                          "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Налогообложение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Излишки");
	ДобавитьПКС(СвойстваТЧ, "", "ВариантОтражения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Недостачи");
	ДобавитьПКС(СвойстваТЧ, "", "ВариантОтражения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		ДанныеXDTO.Вставить("ВидОперации", "ПриемНаКомиссию");
		ВыгрузитьДоговор(ДанныеИБ, ДанныеXDTO,"СКомитентом");
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", "ПокупкаУПоставщика");
		ВыгрузитьДоговор(ДанныеИБ, ДанныеXDTO,"СПоставщиком");
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеXDTO.Валюта);
	КурсКратность(ДанныеXDTO);
	
	// Налогообложение
	Если ДанныеИБ.УчитыватьНДС Тогда
		Налогообложение = "ОблагаетсяНДС";
	Иначе
		Налогообложение = "НеОблагаетсяНДС";
	КонецЕсли;
	ДанныеXDTO.Вставить("Налогообложение",Налогообложение);
	
	ДанныеXDTO.Вставить("Товары",ДанныеИБ.ДополнительныеСвойства.Товары);
	ДанныеXDTO.Вставить("Услуги",ДанныеИБ.ДополнительныеСвойства.Услуги);
	ДанныеXDTO.Вставить("Излишки",ДанныеИБ.ДополнительныеСвойства.Излишки);
	ДанныеXDTO.Вставить("Недостачи",ДанныеИБ.ДополнительныеСвойства.Недостачи);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПрименениеЦенНоменклатуры_Отправка
Процедура ДобавитьПКО_Документ_ПрименениеЦенНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПрименениеЦенНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПрименениеЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПрименениеЦенНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "ТипЦен", 1, "Справочник_ПравилаЦенообразованияВТипыЦен_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПрименениеЦенНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТоварыДокумента = "ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Цена
	|		ИНАЧЕ Товары.Цена / СпрУпаковки.Коэффициент
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	Документ.ПрименениеЦенНоменклатуры.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК СпрУпаковки
	|		ПО (СпрУпаковки.Ссылка = Товары.Упаковка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО (СпрНоменклатура.Ссылка = Товары.Номенклатура)
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И (СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ИЛИ СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.Выполнить();
	Товары = РезультатыЗапроса.Выгрузить();
	
	ДанныеXDTO.Вставить("Товары", Товары);
	
	ДанныеXDTO.Вставить("ТипЦен",ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ОбъектЦенообразования,"ПравилоЦенообразования"));
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РеализацияТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",             "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьВыдана",        "ДоверенностьКемВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьДата",          "ДоверенностьДата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьНомер",         "ДоверенностьНомер");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Магазин",                   "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                          "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                          "ВалютаВзаиморасчетов", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                          "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                          "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "КурсВзаиморасчетов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Услуги");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Содержание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ВидОперации", "РеализацияКлиенту");
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	ВыгрузитьВалютуВзаиморасчетов(ДанныеXDTO);
	КурсКратность(ДанныеXDTO);
	ВыгрузитьДоговор(ДанныеИБ, ДанныеXDTO,"СПокупателем");
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
	ДанныеXDTO.Вставить("Услуги", ДанныеИБ.ДополнительныеСвойства.Услуги);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОНаБанковскийСчет_Отправка
Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОНаБанковскийСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет", "БанковскийСчет", , "Справочник_БанковскиеСчетаОрганизаций_Отправка");
	ДобавитьПКС(СвойстваШапки, "Выдать",         "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",    "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",               "ВидОперации", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	ДанныеXDTO.Вставить("ВидОперации", "ВзносНаличными");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочийРасход_Отправка
Процедура ДобавитьПКО_Документ_РКОПрочийРасход_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОПрочийРасход_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОПрочийРасход";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Выдать",         "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",    "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РасшифровкаПлатежа.Сумма,
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТабРасшифровка = Запрос.Выполнить().Выгрузить();
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Выдать",         "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",    "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Основание",      "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",    "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",     "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "",               "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",               "ВидРасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",     "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "РасшифровкаПлатежа");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаВзаиморасчетов", 1,"Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "Договор", 1,"Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "Заказ", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДДС", 1,"СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаВзаиморасчетов", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьВалюту(ДанныеXDTO);
	
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		ДанныеXDTO.Вставить("ВидРасчетов", "СПоставщиком");
		ВидДоговора = "СПоставщиком";
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию Тогда
		ДанныеXDTO.Вставить("ВидРасчетов", "СПоставщиком");
		ВидДоговора = "СПокупателем";
	ИначеЕсли ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		ДанныеXDTO.Вставить("ВидРасчетов", "СПокупателем");
		ВидДоговора = "СПокупателем";
	КонецЕсли;
	КонтрагентСсылка = ДанныеИБ.Контрагент;
	Если ДанныеИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию Тогда
		//Поиск контрагента, соответствующего Организации
		ЭтоПоступлениеИзДругойОрганизации = Истина;
		ОрганизацияПолучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.КассаПолучатель, "Владелец");
		СсылкаНаКонтрагента = Справочники.Контрагенты.ПолучитьСсылку(ОрганизацияПолучатель.УникальныйИдентификатор());
		Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаКонтрагента) Тогда
			КонтрагентСсылка = СсылкаНаКонтрагента;
		Иначе
			НайтиСоздатьКонтрагентаПоОрганизацииРТ(ОрганизацияПолучатель, КонтрагентСсылка);
		КонецЕсли;
		ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
	Иначе
		ЭтоПоступлениеИзДругойОрганизации = Ложь;
	КонецЕсли;
	
	Если ЭтоПоступлениеИзДругойОрганизации Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
		|	РасходныйКассовыйОрдер.СуммаДокумента КАК СуммаВзаиморасчетов,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ВыдачаДенежныхСредствВДругуюОрганизацию) КАК СтатьяДДС
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|ГДЕ
		|	РасходныйКассовыйОрдер.Ссылка = &Ссылка");
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Сумма,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Сумма КАК СуммаВзаиморасчетов,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
		|ГДЕ
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТабРасшифровка = Запрос.Выполнить().Выгрузить();
	ТабРасшифровка.Колонки.Добавить("Договор");
	ТабРасшифровка.Колонки.Добавить("Заказ");
	ТабРасшифровка.Колонки.Добавить("ВалютаВзаиморасчетов");
	ТабРасшифровка.Колонки.Добавить("КурсВзаиморасчетов");
	ТабРасшифровка.Колонки.Добавить("КратностьВзаиморасчетов");
	ТабРасшифровка.Колонки.Добавить("РасчетыВУсловныхЕдиницах");
	
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	
	Для Каждого СтрокаТаб Из ТабРасшифровка Цикл
		Договор = Новый Структура;
		Договор.Вставить("ВидДоговора", ВидДоговора);
		Договор.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
		Договор.Вставить("Организация", ДанныеИБ.Организация);
		Договор.Вставить("Контрагент", КонтрагентСсылка);
		Договор.Вставить("ВалютаВзаиморасчетов", Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры"));
		СтрокаТаб.Договор = Новый Структура("Значение, ИмяПКО", Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
		СтрокаТаб.КурсВзаиморасчетов = 1;
		СтрокаТаб.КратностьВзаиморасчетов = 1;
		СтрокаТаб.РасчетыВУсловныхЕдиницах = Ложь;
		СтрокаТаб.ВалютаВзаиморасчетов = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	КонецЦикла;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_СборкаТоваров_Отправка
Процедура ДобавитьПКО_Документ_СборкаТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СборкаТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СборкаТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СборкаТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидОперации",        "ВидОперации", , "ВидыОперацийСборкаТоваров");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Количество",         "Количество");
	ДобавитьПКС(СвойстваШапки, "КоличествоУпаковок", "КоличествоУпаковок");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",            "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номенклатура",       "Номенклатура", , "Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",      "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "",                   "ТипЗапасов", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДоляСтоимости", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_СборкаТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ЕдиницаИзмерения", ДанныеИБ.Номенклатура.ЕдиницаИзмерения);
	ДанныеXDTO.Вставить("ТипЗапасов", "СобственныеТовары");
	
	//Товары
	ТоварыДокумента = 
	"ВЫБРАТЬ
	|	СборкаТоваровТовары.Номенклатура,
	|	СборкаТоваровТовары.Количество,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения,
	|	0 КАК НомерГТД,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	СборкаТоваровТовары.Упаковка,
	|	СборкаТоваровТовары.КоличествоУпаковок,
	|	СборкаТоваровТовары.ДоляСтоимости
	|ИЗ
	|	Документ.СборкаТоваров.Товары КАК СборкаТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СборкаТоваровТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СборкаТоваровТовары.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)";
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.Выполнить();
	Товары = РезультатыЗапроса.Выгрузить();
	ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваров_Отправка
Процедура ДобавитьПКО_Документ_СписаниеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",       "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Основание", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Серия", 1,"Справочник_СерииНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Основание",Лев(ДанныеИБ.ОснованиеСписания,250));
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ДополнительныеСвойства.Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураВыданный_Отправка
Процедура ДобавитьПКО_Документ_СчетФактураВыданный_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетФактураВыданный_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетФактураВыданный;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураВыданный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВыставления",      "ДатаВыставления");
	ДобавитьПКС(СвойстваШапки, "Исправление",          "Исправление");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперации",      "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "Номер",                "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерИсправления",     "НомерИсправления");
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СчетФактураОснование", "ИсправляемыйСчетФактура", , "Документ_СчетФактураВыданный_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                     "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                     "ВидСчетаФактуры", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "Выставлен", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "ДатаИсходногоДокумента", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                     "СпособВыставления", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ПлатежноРасчетныеДокументы");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерДокумента", 1);

КонецПроцедуры

Процедура ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	ДанныеXDTO.Вставить("ВидСчетаФактуры", "НаРеализацию");
	
	Если ТипЗнч(ДанныеИБ.ДокументОснование) <> Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.ДокументОснование.Контрагент);
	Иначе
		КонтрагентСсылка = Неопределено;
		НайтиСоздатьКонтрагентаПоОрганизацииРТ(ДанныеИБ.Организация, КонтрагентСсылка);
		ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДатаИсходногоДокумента",?(ДанныеИБ.Исправление,ДанныеИБ.СчетФактураОснование.Дата, Неопределено));
	
	ДанныеXDTO.Вставить("Выставлен", ЗначениеЗаполнено(ДанныеИБ.ДатаВыставления));
	
	ДанныеXDTO.Вставить("СпособВыставления", ?(ДанныеИБ.ВыставленВЭлектронномВиде,"ВЭлектронномВиде", "НаБумажномНосителе"));
	
	
	//Документ-основание - заполненность проверяется при выполнении ПОД
	ДокументыОснования = Новый ТаблицаЗначений();
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	ИмяПКО = "";
	
	СтрокаОснование = ДокументыОснования.Добавить();
	ИмяПКО = ИмяПКОДляДокументаОснованияСФВыданного(ДанныеИБ.ДокументОснование);
	СтрокаОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО",ДанныеИБ.ДокументОснование,ИмяПКО);
	ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
	
	ПлатРасчДокументы = Новый ТаблицаЗначений;
	ПлатРасчДокументы.Колонки.Добавить("ДатаДокумента");
	ПлатРасчДокументы.Колонки.Добавить("НомерДокумента");
	Если НЕ ДанныеИБ.ПлатежноРасчетныеДокументы.Количество() = 0 Тогда
		Для Каждого СтрокаДокумента Из ДанныеИБ.ПлатежноРасчетныеДокументы Цикл
			СтрокаПлатРасчДокумент = ПлатРасчДокументы.Добавить();
			СтрокаПлатРасчДокумент.ДатаДокумента = СтрокаДокумента.ДатаПлатежноРасчетногоДокумента;
			СтрокаПлатРасчДокумент.НомерДокумента = СтрокаДокумента.НомерПлатежноРасчетногоДокумента;
		КонецЦикла;
	КонецЕсли;
	Если ПлатРасчДокументы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПлатежноРасчетныеДокументы", ПлатРасчДокументы);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураПолученный_Отправка
Процедура ДобавитьПКО_Документ_СчетФактураПолученный_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетФактураПолученный_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.СчетФактураПолученный;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                 "ДатаПолучения");
	ДобавитьПКС(СвойстваШапки, "ДатаИсправления",      "ДатаИсправления");
	ДобавитьПКС(СвойстваШапки, "ДатаСоставления",      "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Исправление",          "Исправление");
	ДобавитьПКС(СвойстваШапки, "КодВидаОперации",      "КодВидаОперации");
	ДобавитьПКС(СвойстваШапки, "Контрагент",           "Контрагент", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",          "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СчетФактураОснование", "ИсправляемыйСчетФактура", , "Документ_СчетФактураПолученный_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                     "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                     "ВидСчетаФактуры", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "СпособВыставления", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "ДокументыОснования");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументОснование", 1);

КонецПроцедуры

Процедура ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	ДанныеXDTO.Вставить("ВидСчетаФактуры", "НаПоступление");
	
	ДанныеXDTO.Вставить("СпособВыставления", ?(ДанныеИБ.ПолученВЭлектронномВиде,"ВЭлектронномВиде", "НаБумажномНосителе"));
	
	ДанныеXDTO.Вставить("ДатаИсходногоДокумента",?(ДанныеИБ.Исправление,ДанныеИБ.СчетФактураОснование.Дата, Неопределено));
	
	ДокументыОснования = Новый ТаблицаЗначений();
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	ИмяПКО = "";
	
	Если НЕ ДанныеИБ.ДокументыОснования.Количество() = 0 Тогда
		Для Каждого СтрокаДокумента Из ДанныеИБ.ДокументыОснования Цикл
			СтрокаОснование = ДокументыОснования.Добавить();
			ИмяПКО = ИмяПКОДляДокументаОснованияСФПолученного(СтрокаДокумента.ДокументОснование);
			СтрокаОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО",СтрокаДокумента.ДокументОснование,ИмяПКО);
		КонецЦикла;
		ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Отправка
Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "ТипЦен", 1, "Справочник_ВидыЦен_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		ДанныеXDTO.Вставить("ТипЦен", ДанныеИБ.ТипЦен);
		ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПередачаМеждуОрганизациями_ПТУ_Отправка
Процедура ДобавитьПКО_ПередачаМеждуОрганизациями_ПТУ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПередачаМеждуОрганизациями_ПТУ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ПередачаМеждуОрганизациями_ПТУ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",               "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "ОрганизацияПолучатель", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",       "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                      "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                      "ВалютаВзаиморасчетов", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                      "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                      "Налогообложение", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "НомерВходящегоДокумента", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_ПередачаМеждуОрганизациями_ПТУ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	НомерВхДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеИБ.Номер, Ложь, Истина);
	ДанныеXDTO.Вставить("НомерВходящегоДокумента", НомерВхДокумента);
	
	ДанныеXDTO.Вставить("ВидОперации", "ПокупкаУПоставщика");
	
	КонтрагентСсылка = Неопределено;
	НайтиСоздатьКонтрагентаПоОрганизацииРТ(ДанныеИБ.Организация, КонтрагентСсылка);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Контрагент", КонтрагентСсылка);
	
	СтруктураДанныеДоговора = Новый Структура;
	СтруктураДанныеДоговора.Вставить("Контрагент", КонтрагентСсылка);
	СтруктураДанныеДоговора.Вставить("Организация", ДанныеИБ.Организация);
	СтруктураДанныеДоговора.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
	СтруктураДанныеДоговора.Вставить("ВидДоговора", "СПоставщиком");
	ДанныеXDTO.Вставить("Договор", Новый Структура("Значение, ИмяПКО", СтруктураДанныеДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	// Налогообложение
	Если ДанныеИБ.УчитыватьНДС Тогда
		Налогообложение = "ОблагаетсяНДС";
	Иначе
		Налогообложение = "НеОблагаетсяНДС";
	КонецЕсли;
	ДанныеXDTO.Вставить("Налогообложение",Налогообложение);
	
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеXDTO.Валюта);
	
	КурсКратность(ДанныеXDTO);
	
	// Товары
	ТоварыДокумента = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.Цена,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения,
	|	0 КАК НомерГТД,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
	|	Товары.Характеристика
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.Выполнить();
	Если НЕ РезультатыЗапроса.Пустой() Тогда
		Товары = РезультатыЗапроса.Выгрузить();
		ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
		Товары = ОбработатьХарактеристикиТоваров(Товары);
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПередачаМеждуОрганизациями_РТУ_Отправка
Процедура ДобавитьПКО_ПередачаМеждуОрганизациями_РТУ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПередачаМеждуОрганизациями_РТУ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ПередачаМеждуОрганизациями_РТУ_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьВыдана", "ДоверенностьКемВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьДата",   "ДоверенностьДата");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьЛицо",   "ДоверенностьКомуВыдана");
	ДобавитьПКС(СвойстваШапки, "ДоверенностьНомер",  "ДоверенностьНомер");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",            "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",     "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",    "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                   "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                   "ВалютаВзаиморасчетов", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                   "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "Договор", 1, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                   "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                   "КратностьВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "КурсВзаиморасчетов", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "Налогообложение", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоУпаковок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Упаковка", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "", "Характеристика", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_ПередачаМеждуОрганизациями_РТУ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "РеализацияКлиенту");
	
	КонтрагентСсылка = Неопределено;
	НайтиСоздатьКонтрагентаПоОрганизацииРТ(ДанныеИБ.Организация, КонтрагентСсылка);
	ДанныеXDTO.Вставить("Контрагент", КонтрагентСсылка);
	
	СтруктураДанныеДоговора = Новый Структура;
	СтруктураДанныеДоговора.Вставить("Контрагент", КонтрагентСсылка);
	СтруктураДанныеДоговора.Вставить("Организация", ДанныеИБ.Организация);
	СтруктураДанныеДоговора.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
	СтруктураДанныеДоговора.Вставить("ВидДоговора", "СПоставщиком");
	ДанныеXDTO.Вставить("Договор", Новый Структура("Значение, ИмяПКО", СтруктураДанныеДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
	
	ВыгрузитьВалюту(ДанныеXDTO);
	
	//Налогообложение
	Если ДанныеИБ.УчитыватьНДС Тогда
		Налогообложение = "ПродажаОблагаетсяНДС";
	Иначе
		Налогообложение = "ПродажаНеОблагаетсяНДС";
	КонецЕсли;
	ДанныеXDTO.Вставить("Налогообложение",Налогообложение);
	
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеXDTO.Валюта);
	
	КурсКратность(ДанныеXDTO);
	
	// Товары
	ТоварыДокумента = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.Количество,
	|	Товары.КоличествоУпаковок,
	|	Товары.Цена,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	СправочникНоменклатура.ЕдиницаИзмерения,
	|	СправочникНоменклатура.СтранаПроисхождения,
	|	0 КАК НомерГТД,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	Товары.НомерСтроки КАК НомерСтрокиДокумента,
	|	Товары.Характеристика
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.Выполнить();
	Если НЕ РезультатыЗапроса.Пустой() Тогда
		Товары = РезультатыЗапроса.Выгрузить();
		Товары = ОбработатьХарактеристикиТоваров(Товары);
		ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары);
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПКО_АТТ_ОтчетОРозничныхПродажах
Процедура ДобавитьПКО_ПКО_АТТ_ОтчетОРозничныхПродажах(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПКО_АТТ_ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПКОРозничнаяВыручка";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ПКО_АТТ_ОтчетОРозничныхПродажах_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",       "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Отправка");
	ДобавитьПКС(СвойстваШапки, "",              "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",              "ВыручкаНТТ", 1);
	ДобавитьПКС(СвойстваШапки, "",              "Сумма", 1);

КонецПроцедуры

Процедура ПКО_ПКО_АТТ_ОтчетОРозничныхПродажах_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьВалюту(ДанныеXDTO);
	ДанныеXDTO.Вставить("ВыручкаНТТ", Ложь);
	СуммаНаличнойОплаты  = ДанныеИБ.СуммаДокумента - ДанныеИБ.ОплатаПлатежнымиКартами.Итог("Сумма") - ДанныеИБ.ОплатаБанковскимиКредитами.Итог("Сумма") - ДанныеИБ.ОплатаПодарочнымиСертификатами;
	ДанныеXDTO.Вставить("Сумма", СуммаНаличнойОплаты);
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаКонтрагентов_Отправка
Процедура ДобавитьПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_БанковскиеСчетаКонтрагентов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.БанковскиеСчетаКонтрагентов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",         "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "Банк",         "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Владелец", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",   "НомерСчета");
	ДобавитьПКС(СвойстваШапки, "",             "ВалютаДенежныхСредств", 1, "Справочник_Валюта_ИзСтруктуры");

КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	ДанныеXDTO.Вставить("ВалютаДенежныхСредств", Инструкция);
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаОрганизаций_Отправка
Процедура ДобавитьПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_БанковскиеСчетаОрганизаций_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.БанковскиеСчетаОрганизаций;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",         "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "Банк",         "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Владелец", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",   "НомерСчета");
	ДобавитьПКС(СвойстваШапки, "",             "ВалютаДенежныхСредств", 1, "Справочник_Валюта_ИзСтруктуры");

КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	ДанныеXDTO.Вставить("ВалютаДенежныхСредств", Инструкция);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюта_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_Валюта_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Валюта_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Валюты";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Код", 1);
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);

КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыАлкогольнойПродукции_Отправка
Процедура ДобавитьПКО_Справочник_ВидыАлкогольнойПродукции_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ВидыАлкогольнойПродукции_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ВидыАлкогольнойПродукции;
	ПравилоКонвертации.ОбъектФормата     = "КлючевыеСвойстваВидыАлкогольнойПродукции";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидЛицензии", 1, "ВидыЛицензийАлкогольнойПродукции");
	ДобавитьПКС(СвойстваШапки, "", "Код", 1);
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);

КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыНоменклатуры_Отправка
Процедура ДобавитьПКО_Справочник_ВидыНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ВидыНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ВидыНоменклатуры;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ВидыНоменклатуры";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Наименование");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатуры", "ТипНоменклатуры", , "ТипыНоменклатуры");

КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыПодарочныхСертификатов_Отправка
Процедура ДобавитьПКО_Справочник_ВидыПодарочныхСертификатов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ВидыПодарочныхСертификатов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ВидыПодарочныхСертификатов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ВидыПодарочныхСертификатов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Номинал",      "Номинал");
	ДобавитьПКС(СвойстваШапки, "",             "Валюта", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",             "КоличествоПериодовДействия", 1);
	ДобавитьПКС(СвойстваШапки, "",             "РазрешитьЧастичнуюОплату", 1);
	ДобавитьПКС(СвойстваШапки, "",             "ТипПериодаДействия", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ВидыПодарочныхСертификатов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	ДанныеXDTO.КлючевыеСвойства.Вставить("Валюта", Инструкция);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("РазрешитьЧастичнуюОплату", Ложь);
	
	ТипПериодаДействия = Неопределено;
	КоличествоПериодовДействия = Неопределено;
	Если ДанныеИБ.Периодичность = Перечисления.Периодичность.День Тогда
		ТипПериодаДействия = "День";
		КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия;
	ИначеЕсли ДанныеИБ.Периодичность = Перечисления.Периодичность.Неделя Тогда
		ТипПериодаДействия = "День";
		КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия * 7;
	ИначеЕсли ДанныеИБ.Периодичность = Перечисления.Периодичность.Декада Тогда
		ТипПериодаДействия = "День";
		КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия * 10;
	ИначеЕсли ДанныеИБ.Периодичность = Перечисления.Периодичность.Месяц Тогда
		ТипПериодаДействия = "Месяц";
		КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия;
	ИначеЕсли ДанныеИБ.Периодичность = Перечисления.Периодичность.Квартал Тогда
		ТипПериодаДействия = "Месяц";
		КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия * 3;
	ИначеЕсли ДанныеИБ.Периодичность = Перечисления.Периодичность.Полугодие Тогда
		ТипПериодаДействия = "Месяц";
		КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия * 6;
	ИначеЕсли ДанныеИБ.Периодичность = Перечисления.Периодичность.Год Тогда
		ТипПериодаДействия = "Месяц";
		КоличествоПериодовДействия = ДанныеИБ.КоличествоПериодовДействия * 12;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипПериодаДействия) И ЗначениеЗаполнено(КоличествоПериодовДействия) Тогда
		ДанныеXDTO.Вставить("ТипПериодаДействия", ТипПериодаДействия);
		ДанныеXDTO.Вставить("КоличествоПериодовДействия", КоличествоПериодовДействия);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыЦен_Отправка
Процедура ДобавитьПКО_Справочник_ВидыЦен_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ВидыЦен_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ВидыЦен;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ТипыЦен";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ВидыЦен_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Идентификатор",            "Идентификатор");
	ДобавитьПКС(СвойстваШапки, "ОкруглятьВБольшуюСторону", "ОкруглятьВБольшуюСторону");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",          "ЦенаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                         "ВалютаЦены", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "Наименование",             "Наименование", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ВидыЦен_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВалютаЦены", Инструкция);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование",Лев(ДанныеИБ.Наименование,25));
	
	Разделители	=  " .,+,-,/,*,?,=,<,>,(,)%!@#$%&*""№:;{}[]?()\|/`~'^_";
	Идентификатор = "";
	БылСпецСимвол = Ложь;
	Для НомСимвола = 1 По СтрДлина(ДанныеИБ.Наименование) Цикл
		Символ = Сред(ДанныеИБ.Наименование, НомСимвола, 1);
		Если Найти(Разделители, Символ) <> 0 Тогда
			БылСпецСимвол = Истина;
		ИначеЕсли БылСпецСимвол Тогда
			БылСпецСимвол = Ложь;
			Идентификатор = Идентификатор + ВРег(Символ);
		Иначе
			Идентификатор = Идентификатор + Символ;
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("Идентификатор", Идентификатор);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Договоры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "", "ВидДоговора", 1);
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Контрагент", 1, "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "", "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "РасчетыВУсловныхЕдиницах", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", Инструкция);
КонецПроцедуры
#КонецОбласти
#Область Справочник_КассыККМ_Отправка
Процедура ДобавитьПКО_Справочник_КассыККМ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_КассыККМ_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.КассыККМ;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.КассыККМ";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",             "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Магазин",              "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Наименование",         "Наименование");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомер", "РегистрационныйНомер");

КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",          "ОКПО");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "ДополнительнаяИнформация");
	ДобавитьПКС(СвойстваШапки, "КПП",                "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Родитель",           "Группа", , "Справочник_КонтрагентыГруппа");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",          "ЮридическоеФизическоеЛицо", , "ЮрФизЛицо_Организации_Отправка");

КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АлкогольнаяПродукция",                      "АлкогольнаяПродукция");
	ДобавитьПКС(СвойстваШапки, "Артикул",                                   "Артикул");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",                          "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "ИмпортнаяАлкогольнаяПродукция",             "ИмпортнаяАлкогольнаяПродукция");
	ДобавитьПКС(СвойстваШапки, "Код",                                       "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование",                              "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",                        "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ОбъемДАЛ",                                  "ОбъемДАЛ");
	ДобавитьПКС(СвойстваШапки, "ПроизводительИмпортерАлкогольнойПродукции", "ПроизводительИмпортер", , "Справочник_Контрагенты_Отправка");
	ДобавитьПКС(СвойстваШапки, "Родитель",                                  "Группа", , "Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                                 "СтавкаНДС", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатуры",                           "ТипНоменклатуры", , "ТипыНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "",                                          "ВидАлкогольнойПродукции", 1, "Справочник_ВидыАлкогольнойПродукции_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                                          "ВидНоменклатуры", 1, "Справочник_ВидыНоменклатуры_Отправка");

КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.НаименованиеПолное) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
	КонецЕсли;
	
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ВидыНоменклатуры") Тогда
		ДанныеXDTO.Вставить("ВидНоменклатуры", ДанныеИБ.ВидНоменклатуры);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.ЕдиницаИзмерения) Тогда
		ЕдиницаИзмеренияПоУмолчанию = Справочники.БазовыеЕдиницыИзмерения.ПолучитьЕдиницуИзмеренияПоУмолчанию();
			Если ЕдиницаИзмеренияПоУмолчанию <> Неопределено Тогда
			ДанныеXDTO.Вставить("ЕдиницаИзмерения", Справочники.БазовыеЕдиницыИзмерения.ПолучитьЕдиницуИзмеренияПоУмолчанию());
		Иначе
			ЕдиницаИзмерения796 = Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду("796");
			ЕдиницаИзмерения = Новый Структура;
			ЕдиницаИзмерения.Вставить("Ссылка",ЕдиницаИзмерения796.Ссылка);
			ЕдиницаИзмерения.Вставить("Код",ЕдиницаИзмерения796.Код);
			ДанныеXDTO.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС) Тогда
		СтруктураВидАП = Новый Структура("Код, Наименование, ВидЛицензии");
		ЗаполнитьЗначенияСвойств(СтруктураВидАП, ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС);
		Если НЕ ЗначениеЗаполнено(СтруктураВидАП.Код) Тогда
			СтруктураВидАП.Код = "0";
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС.ВидЛицензии) Тогда
			ВидЛицензии = "";
			Если ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС.ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво Тогда
				ВидЛицензии = "Пиво";
			ИначеЕсли ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС.ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция Тогда
				ВидЛицензии = "АлкогольнаяПродукция";
			ИначеЕсли ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС.ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция Тогда
				ВидЛицензии = "СпиртосодержащаяПищеваяПродукция";
			ИначеЕсли ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС.ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция Тогда
				ВидЛицензии = "СпиртосодержащаяНеПищеваяПродукция";
			КонецЕсли;
			СтруктураВидАП.Вставить("ВидЛицензии", ВидЛицензии);
		КонецЕсли;
		ДанныеXDTO.Вставить("ВидАлкогольнойПродукции", СтруктураВидАП);
	Иначе
		ДанныеXDTO.Вставить("ВидАлкогольнойПродукции", Неопределено);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                     "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКАТО",              "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",               "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                     "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",            "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",      "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеСокращенное", "НаименованиеСокращенное");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                    "ОГРН");
	ДобавитьПКС(СвойстваШапки, "Префикс",                 "Префикс");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоДатаВыдачи", "СвидетельствоДатаВыдачи");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоСерияНомер", "СвидетельствоСерияНомер");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",               "ЮридическоеФизическоеЛицо", , "ЮрФизЛицо_Организации_Отправка");

КонецПроцедуры

Процедура ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.НаименованиеПолное) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.НаименованиеСокращенное) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеСокращенное", ДанныеИБ.Наименование);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Отправка
Процедура ДобавитьПКО_Справочник_Пользователи_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Пользователи_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Пользователи";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "ФизЛицо",      "ФизическоеЛицо", , "Справочник_ФизическиеЛица_Отправка");

КонецПроцедуры
#КонецОбласти
#Область Справочник_ПравилаЦенообразованияВТипыЦен_Отправка
Процедура ДобавитьПКО_Справочник_ПравилаЦенообразованияВТипыЦен_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ПравилаЦенообразованияВТипыЦен_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ПравилаЦенообразования;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ТипыЦен";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ПравилаЦенообразованияВТипыЦен_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "ЦенаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                "ВалютаЦены", 1, "Справочник_Валюта_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                "Идентификатор", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ОкруглятьВБольшуюСторону", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Наименование", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ПравилаЦенообразованияВТипыЦен_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВалютаЦены", Инструкция);
	ДанныеXDTO.Вставить("ОкруглятьВБольшуюСторону",Ложь);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование",Лев(ДанныеИБ.Наименование,25));
	
	Разделители	=  " .,+,-,/,*,?,=,<,>,(,)%!@#$%&*""№:;{}[]?()\|/`~'^_";
	Идентификатор = "";
	БылСпецСимвол = Ложь;
	Для НомСимвола = 1 По СтрДлина(ДанныеИБ.Наименование) Цикл
		Символ = Сред(ДанныеИБ.Наименование, НомСимвола, 1);
		Если Найти(Разделители, Символ) <> 0 Тогда
			БылСпецСимвол = Истина;
		ИначеЕсли БылСпецСимвол Тогда
			БылСпецСимвол = Ложь;
			Идентификатор = Идентификатор + ВРег(Символ);
		Иначе
			Идентификатор = Идентификатор + Символ;
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("Идентификатор", Идентификатор);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Склады_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.Магазины;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Склады";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "",             "ТипСклада", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ДанныеИБ.СкладУправляющейСистемы Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ТипСклада", "Оптовый");
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("ТипСклада", "Розничный");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ФизическиеЛица_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ФизическиеЛица";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДатаРождения", "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "Наименование", "ФИО");
	ДобавитьПКС(СвойстваШапки, "Пол",          "Пол", , "Пол");

КонецПроцедуры
#КонецОбласти
#Область Справочник_ШтрихкодыНоменклатуры_Отправка
Процедура ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.Штрихкоды;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "НоменклатураОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "УпаковкаОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ХарактеристикаОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ШтрихкодОтбор", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номенклатура 	= ДанныеИБ.Отбор.Владелец.Значение;
	Упаковка 		= ДанныеИБ.Отбор.Упаковка.Значение;
	Характеристика 	= ДанныеИБ.Отбор.Характеристика.Значение;
	Штрихкод 		= ДанныеИБ.Отбор.Штрихкод.Значение;
	
	Если ЗначениеЗаполнено(Номенклатура) И ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		ДанныеXDTO.Вставить("НоменклатураОтбор", Новый Структура("Значение, ИмяПКО", Номенклатура, "Справочник_Номенклатура_Отправка"));
		Если ЗначениеЗаполнено(Упаковка) Тогда
			ДанныеXDTO.Вставить("УпаковкаОтбор", Новый Структура("Значение, ИмяПКО", Упаковка, "Справочник_Упаковки"));
		КонецЕсли; 
		Если ЗначениеЗаполнено(Характеристика) Тогда
			ДанныеXDTO.Вставить("ХарактеристикаОтбор", Новый Структура("Значение, ИмяПКО", Характеристика, "Справочник_ХарактеристикиНоменклатуры"));
		КонецЕсли; 
		ДанныеXDTO.Вставить("ШтрихкодОтбор", Штрихкод);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ШтрихкодыНоменклатуры_Отправка12
Процедура ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Отправка12(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ШтрихкодыНоменклатуры_Отправка12";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.Штрихкоды;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка12_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Номенклатура", 1);
	ДобавитьПКС(СвойстваШапки, "", "Упаковка", 1);
	ДобавитьПКС(СвойстваШапки, "", "Характеристика", 1);
	ДобавитьПКС(СвойстваШапки, "", "Штрихкод", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка12_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номенклатура 	= ДанныеИБ.Отбор.Владелец.Значение;
	Упаковка 		= ДанныеИБ.Отбор.Упаковка.Значение;
	Характеристика 	= ДанныеИБ.Отбор.Характеристика.Значение;
	Штрихкод 		= ДанныеИБ.Отбор.Штрихкод.Значение;
	
	Если ЗначениеЗаполнено(Номенклатура) И ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		ДанныеXDTO.Вставить("Номенклатура", Новый Структура("Значение, ИмяПКО", Номенклатура, "Справочник_Номенклатура_Отправка"));
		Если ЗначениеЗаполнено(Упаковка) Тогда
			ДанныеXDTO.Вставить("Упаковка", Новый Структура("Значение, ИмяПКО", Упаковка, "Справочник_Упаковки"));
		КонецЕсли; 
		Если ЗначениеЗаполнено(Характеристика) Тогда
			ДанныеXDTO.Вставить("Характеристика", Новый Структура("Значение, ИмяПКО", Характеристика, "Справочник_ХарактеристикиНоменклатуры"));
		КонецЕсли; 
		ДанныеXDTO.Вставить("Штрихкод", Штрихкод);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_ВнесениеДСВКассуККМ_Получение
Процедура ДобавитьПКО_Документ_ВнесениеДСВКассуККМ_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВнесениеДСВКассуККМ_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВнесениеДенежныхСредствВКассуККМ;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВнесениеДСВКассуККМ";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВнесениеДСВКассуККМ_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",           "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",       "КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",          "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Ответственный",  "Кассир", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента", "Сумма");
	ДобавитьПКС(СвойстваШапки, "Организация",    "", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",       "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВнесениеДСВКассуККМ_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.КассаККМ, "Владелец");
	ПолученныеДанные.Организация = РеквизитыКассыККМ.Владелец;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Получение
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВозвратТоваровПоставщику_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_ВозвратПоставщику";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                          "");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Магазин",                   "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "УчитыватьНДС",              "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
	
	//Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.АналитикаХозяйственнойОперации) Тогда
		ПолученныеДанные.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Ответственный) Тогда
		ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВыемкаДСИзКассыККМ_Получение
Процедура ДобавитьПКО_Документ_ВыемкаДСИзКассыККМ_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВыемкаДСИзКассыККМ_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВыемкаДенежныхСредствИзКассыККМ;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВыемкаДСИзКассыККМ";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВыемкаДСИзКассыККМ_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",              "КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Кассир", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "Магазин",               "", 1, "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Организация",           "", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВыемкаДСИзКассыККМ_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствИзКассыККМ;
	
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.КассаККМ, "Владелец, Магазин");
	
	ПолученныеДанные.Организация = РеквизитыКассыККМ.Владелец;
	ПолученныеДанные.Магазин = РеквизитыКассыККМ.Магазин;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение
Процедура ДобавитьПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЗаявкаНаРасходДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_СБДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчет", , "Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаПлатежа",               "УтвержденнаяДатаПлатежа");
	ДобавитьПКС(СвойстваШапки, "ЖелательнаяДатаПлатежа",    "КрайнийСрокПлатежа");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент");
	ДобавитьПКС(СвойстваШапки, "Магазин",                   "", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Автор", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ФормаОплаты",               "УтвержденнаяФормаОплаты");
	ДобавитьПКС(СвойстваШапки, "ФормаОплатыЗаявки",         "УтвержденнаяФормаОплаты");
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",     "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
	
	РасшифровкаПлатежаXDTO = Неопределено;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа", РасшифровкаПлатежаXDTO)
		И ЗначениеЗаполнено(РасшифровкаПлатежаXDTO) Тогда
		
		ПравилаЗаполнения = Новый Структура;
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	
		МассивРасшифровкаПлатежа = Новый Массив;
		ОплатаПоставщику = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
		СтатьяДДС_ОплатаПоставщику = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ОплатаПоставщику);
	
		ИспользоватьДокументРасчетов = ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДокументРасчетов") <> Неопределено;
	
		Для Каждого СтрокаРасшифровкаПлатежаXDTO Из РасшифровкаПлатежаXDTO Цикл
			СтрокаРасшифровкаПлатежа = ДанныеКоллекцииВВидеСтруктуры(СтрокаРасшифровкаПлатежаXDTO, ПравилаЗаполнения);
	
		    Если ИспользоватьДокументРасчетов И ЗначениеЗаполнено(СтрокаРасшифровкаПлатежаXDTO.ДокументРасчетов) Тогда
				ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Получение";
				Инструкция = Новый Структура("Значение", СтрокаРасшифровкаПлатежаXDTO.ДокументРасчетов); 
				Инструкция.Вставить("ИмяПКО", ИмяПКО);
			    СтрокаРасшифровкаПлатежа.Вставить("ДокументРасчетовСКонтрагентом", Инструкция);
			КонецЕсли;
	
			Если НЕ ЗначениеЗаполнено(СтрокаРасшифровкаПлатежаXDTO.СтатьяДДС) Тогда
				СтрокаРасшифровкаПлатежаXDTO.СтатьяДДС = СтатьяДДС_ОплатаПоставщику;
			КонецЕсли;
	
			МассивРасшифровкаПлатежа.Добавить(СтрокаРасшифровкаПлатежа);
		КонецЦикла;
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивРасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Получение
Процедура ДобавитьПКО_Документ_ОприходованиеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОприходованиеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_Оприходование";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",                        "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "АналитикаХозяйственнойОперации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.АналитикаХозяйственнойОперации) Тогда
		ПолученныеДанные.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.СкидкиПодарки;
	КонецЕсли;
	//Товары
	МассивСтрокТовары = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
	И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		КонвертацииСвойств = Новый Соответствие;
		КонвертацииСвойств.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойств.Вставить("Количество", "Количество");
		КонвертацииСвойств.Вставить("Сумма", "Сумма");
		КонвертацииСвойств.Вставить("Цена", "Цена");
		КонвертацииСвойств.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = Новый Структура;
			Если СтрокаXDTO.КоличествоУпаковок = Неопределено Тогда
				СтрокаXDTO.КоличествоУпаковок = СтрокаXDTO.Количество;
			КонецЕсли;
			ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
			
			Если ЗначениеЗаполнено(СтрокаXDTO.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код, СтранаПроисхождения", СтрокаXDTO.НомерГТД, СтрокаXDTO.СтранаПроисхождения));
			КонецЕсли;
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Ответственный) Тогда
		ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.АналитикаХозяйственнойОперации) Тогда
		ПолученныеДанные.АналитикаХозяйственнойОперации = ДанныеИБ.АналитикаХозяйственнойОперации;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомитенту_Получение
Процедура ДобавитьПКО_Документ_ОтчетКомитенту_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтчетКомитенту_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтчетКомитентуОПродажах;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтчетКомитенту";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтчетКомитенту_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетКомитенту_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_ОтчетКомитенту";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                                     "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                              "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                               "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                              "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                            "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "ПроцентКомиссионногоВознаграждения",       "ПроцентКомиссионногоВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СпособРасчетаКомиссионногоВознаграждения", "СпособРасчетаКомиссионногоВознаграждения", , "СпособыРасчетаКомиссионногоВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДСВознаграждения",                  "СтавкаНДСВознаграждения", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаВознаграждения",                      "СуммаВознаграждения");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                           "Сумма");
	ДобавитьПКС(СвойстваШапки, "УслугаКомиссионногоВознаграждения",        "УслугаПоВознаграждению", , "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",                          "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "Проведен",                                 "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаНДСВознаграждения",                   "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "Товары");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "Количество");
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "КоличествоУпаковок");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "Номенклатура", ,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "СуммаПоступления");
	ДобавитьПКС(СвойстваТЧ, "СуммаПродажи",       "Сумма");
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "Упаковка", ,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",     "Характеристика", ,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",               "ЦенаПоступления");
	ДобавитьПКС(СвойстваТЧ, "ЦенаПродажи",        "Цена");

КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомитенту_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ДатаОплаты = ПолученныеДанные.Дата;
КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомитенту_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Ответственный) Тогда
		ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Характеристика");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	
	ОбменДаннымиXDTOСервер.ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"Количество, Упаковка, КоличествоУпаковок, Цена, Сумма, СуммаНДС, СуммаПродажи, СуммаВознаграждения, ЦенаПродажи",
		"СчетФактураВыданный, ДокументРеализации, Склад");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах_Получение
Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОтчетОРозничныхПродажах_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",                        "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",                "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "", 1);
	ДобавитьПКС(СвойстваШапки, "ОплатаПодарочнымиСертификатами", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	ДобавитьПКС(СвойстваШапки, "СуммаОплатыНаличных",            "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ОплатаПлатежнымиКартами", "");
	ДобавитьПКС(СвойстваТЧ, "ВидОплаты",             "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЭквайринговыйТерминал", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",                  "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Склад",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",     "", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	ОплатаПодарочнымиСертификатами 	= 0;
	ОплатаПлатежнымиКартами			= 0;
	ПолученныеДанные.Проведен = Истина;
	
	Номер = ДанныеXDTO.КлючевыеСвойства.Номер;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВариантНастройки <> "ОфлайнКасса" Тогда
		Запрос = Новый Запрос;
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОтчетОРозничныхПродажах.Номер КАК Номер
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|ГДЕ
		|	ОтчетОРозничныхПродажах.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаДокумента, ГОД) И КОНЕЦПЕРИОДА(&ДатаДокумента, ГОД)
		|	И ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(ОтчетОРозничныхПродажах.Номер КАК СТРОКА(2))) = &ПрефиксУзла
		|				ТОГДА ИСТИНА
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтчетОРозничныхПродажах.Дата УБЫВ
		|";
		Запрос.УстановитьПараметр("ДатаДокумента", ПолученныеДанные.Дата);
		Запрос.УстановитьПараметр("ПрефиксУзла", Лев(Номер, 2));
		Запрос.Текст = ТекстЗапроса;
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ПоследнийНомер = Выборка.Номер;
		Иначе
			ПоследнийНомер = Номер;
		КонецЕсли;
		ПоложениеРазделителя = СтрНайти(ПоследнийНомер,"-");
		Если ПоложениеРазделителя <> 0 Тогда
			ПоследнийНомер = Прав(ПоследнийНомер, СтрДлина(ПоследнийНомер) - СтрНайти(ПоследнийНомер,"-"));
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПоследнийНомер) Тогда
				ЧислоНомер = Число(ПоследнийНомер);
			КонецЕсли;
		Иначе
			Для Индекс = 1 По СтрДлина(ПоследнийНомер)  Цикл
				ЭтоЦифра = КодСимвола(ПоследнийНомер, Индекс) >= 48 И КодСимвола(ПоследнийНомер, Индекс) <= 57;
				Если ЭтоЦифра Тогда
					СтрокаНомерТолькоЦифры = Прав(ПоследнийНомер, СтрДлина(ПоследнийНомер) - Индекс + 1);
					Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаНомерТолькоЦифры) Тогда
						ЧислоНомер = Число(СтрокаНомерТолькоЦифры);
					КонецЕсли;
					Прервать;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
		СледующийНомер = ?(ЧислоНомер <> Неопределено ИЛИ ЧислоНомер = 0, ЧислоНомер + 1, Номер);
		ПоложениеРазделителя = ?(ПоложениеРазделителя = 0, 3, ПоложениеРазделителя);
		ПолученныеДанные.Номер = Лев(Номер, ПоложениеРазделителя - 1) + "-" + Прав("00000000000" + Строка(СледующийНомер), СтрДлина(Номер) - ПоложениеРазделителя);
	Иначе
		ПолученныеДанные.Номер = Номер;
	КонецЕсли;
	
	РеквизитыМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.Магазин, "СкладПродажи");
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Характеристика", "Характеристика");
	ПравилаЗаполнения.Вставить("Упаковка",	   "Упаковка");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	
	// Товары
	МассивСтрокТовары = Новый Массив;
	
	ИмяТабличнойЧастиТовары = ?(ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6"),	
		"ТоварыПродажа", "Товары");
	
	ТабличнаяЧастьТовары = Неопределено;
	Если ДанныеXDTO.Свойство(ИмяТабличнойЧастиТовары, ТабличнаяЧастьТовары)
		И ЗначениеЗаполнено(ТабличнаяЧастьТовары) Тогда
	
		Для Каждого Строка Из ТабличнаяЧастьТовары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			СтруктураДанныхСтроки.Вставить("Склад", РеквизитыМагазина.СкладПродажи);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	
	//Оплата платежными картами
	МассивСтрокОплатаПК = Новый Массив;
	
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартами) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
						|	ВидыОплатЧекаККМ.Ссылка КАК Ссылка
						|ИЗ
						|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
						|ГДЕ
						|	ВидыОплатЧекаККМ.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)";
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ВидОплаты = Выборка.Ссылка;
		Иначе
			ВидОплаты = Справочники.ВидыОплатЧекаККМ.ПустаяСсылка();
		КонецЕсли;
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаПлатежнымиКартами Цикл
			СтруктураДанныхСтроки = Новый Структура;
			СтруктураДанныхСтроки.Вставить("ВидОплаты", ВидОплаты);
			СтруктураДанныхСтроки.Вставить("Сумма", Строка.СуммаОплаты);
			СтруктураДанныхСтроки.Вставить("НомерПлатежнойКарты", Строка.НомерКарты);
		
			Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.4") Тогда
			    Если ЗначениеЗаполнено(Строка.Эквайрер) Тогда
			    	Эквайрер = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
						КомпонентыОбмена,
						Строка.Эквайрер,
						ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_Контрагенты_Получение"), 
						"ПолучитьСсылку");
						
					Если ТипЗнч(Эквайрер) = Тип("СправочникОбъект.Контрагенты") Тогда
						Эквайрер = Эквайрер.Ссылка;
					КонецЕсли;	
				
					Терминал = НайтиТерминалПоЭквайреруИОрганизации(ПолученныеДанные.Организация,
						Эквайрер);
					СтруктураДанныхСтроки.Вставить("ЭквайринговыйТерминал", Терминал);
			    КонецЕсли;
			Иначе //Версия 1.4 и выше
				Инструкция = Новый Структура;
				Инструкция.Вставить("Значение", Справочники.ЭквайринговыеТерминалы.ПустаяСсылка());
				Инструкция.Вставить("ИмяПКО", "Справочник_ЭквайринговыеТерминалы_Получение");
				
				СтруктураДанныхСтроки.Вставить("ЭквайринговыйТерминал", Инструкция);
			КонецЕсли;
			
			МассивСтрокОплатаПК.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		ОплатаПлатежнымиКартами = ДанныеXDTO.ОплатаПлатежнымиКартами.Итог("СуммаОплаты");
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОплатаПлатежнымиКартами", МассивСтрокОплатаПК);	
	КонецЕсли;
	
	//Подарочные сертификаты
	Если ДанныеXDTO.Свойство("ОплатаСертификатами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаСертификатами) Тогда
		ОплатаПодарочнымиСертификатами = ДанныеXDTO.ОплатаСертификатами.Итог("Сумма");
		ПолученныеДанные.ОплатаПодарочнымиСертификатами = ОплатаПодарочнымиСертификатами;
	КонецЕсли;
	
	//Сумма оплаты наличных
	ПолученныеДанные.СуммаОплатыНаличных = ПолученныеДанные.СуммаДокумента - ОплатаПлатежнымиКартами - ОплатаПодарочнымиСертификатами;
КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		ПолучитьКассуККМПоОрганизацииИМагазину(ПолученныеДанные);
		Возврат;
	КонецЕсли;
	
	ДанныеИБМагазин = ДанныеИБ.Магазин;
	
	// Переносим те свойства, которые указаны в ПКС.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем магазин из первоначального документа.
	ДанныеИБ.Магазин = ДанныеИБМагазин;
	
	ПолучитьКассуККМПоОрганизацииИМагазину(ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	// Табличные части
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Характеристика");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"Продавец,ДисконтнаяКарта");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	//Оплаты
	ДанныеИБ.ОплатаПлатежнымиКартами.Загрузить(ПолученныеДанные.ОплатаПлатежнымиКартами.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Получение
Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПеремещениеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_Перемещение";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "МагазинОтправитель", "СкладОтправитель", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "МагазинПолучатель",  "СкладПолучатель", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",      "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",           "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",     "", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен               = Истина;
	
	МассивСтрокТовары = Новый Массив;
	Для Каждого Строка Из ДанныеXDTO.Товары Цикл
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Характеристика",    "Характеристика");
		ПравилаЗаполнения.Вставить("Упаковка",          "Упаковка");
		ПравилаЗаполнения.Вставить("Номенклатура",      "Номенклатура");
		ПравилаЗаполнения.Вставить("КоличествоУпаковок","КоличествоУпаковок");
		ПравилаЗаполнения.Вставить("Количество",        "Количество");
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		Если НЕ (СтруктураДанныхСтроки.Свойство("КоличествоУпаковок") И СтруктураДанныхСтроки.КоличествоУпаковок <> 0) Тогда
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
		КонецЕсли;
		МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Ответственный) Тогда
		ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПолучениеНаличныхВБанке_Получение
Процедура ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОПолучениеНаличныхВБанке_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_ПКО";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчет", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",          "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка;
	ПолученныеДанные.Проведен = Истина;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочееПоступление_Получение
Процедура ДобавитьПКО_Документ_ПКОПрочееПоступление_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОПрочееПоступление_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОПрочееПоступление";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_ПКО";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",          "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "ПробитЧек",             "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1,"СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы;
	
	СтрокаТаблицы = Новый Соответствие;
	СтрокаТаблицы.Вставить("Сумма", "Сумма");
	СтрокаТаблицы.Вставить("СтатьяДвиженияДенежныхСредств", "СтатьяДДС");
	МассивСтрокРасшифровкаПлатежа = Новый Массив;
	ПрочиеДоходы = Перечисления.ХозяйственныеОперации.ПрочиеДоходы;
	СтатьяДДС_ПрочиеДоходы = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ПрочиеДоходы);
	Для Каждого СтрокаXDTO Из ДанныеXDTO.РасшифровкаПлатежа Цикл
		СтруктураДанныхСтроки = Новый Структура;
		Если НЕ ЗначениеЗаполнено(СтрокаXDTO.СтатьяДДС) Тогда
			СтрокаXDTO.СтатьяДДС = СтатьяДДС_ПрочиеДоходы;
		КонецЕсли;
		ЗаполнитьСтруктуруДанныхСтроки(СтрокаТаблицы, СтрокаXDTO, СтруктураДанныхСтроки);
		МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочиеДоходы_Получение
Процедура ДобавитьПКО_Документ_ПКОПрочиеДоходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОПрочиеДоходы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОПрочиеДоходы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_ПКО";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",          "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1,"СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы;
	
	СтрокаТаблицы = Новый Соответствие;
	СтрокаТаблицы.Вставить("Сумма", "Сумма");
	СтрокаТаблицы.Вставить("СтатьяДвиженияДенежныхСредств", "СтатьяДДС");
	МассивСтрокРасшифровкаПлатежа = Новый Массив;
	ПрочиеДоходы = Перечисления.ХозяйственныеОперации.ПрочиеДоходы;
	СтатьяДДС_ПрочиеДоходы = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ПрочиеДоходы);
	Для Каждого СтрокаXDTO Из ДанныеXDTO.РасшифровкаПлатежа Цикл
		СтруктураДанныхСтроки = Новый Структура;
		Если НЕ ЗначениеЗаполнено(СтрокаXDTO.СтатьяДДС) Тогда
			СтрокаXDTO.СтатьяДДС = СтатьяДДС_ПрочиеДоходы;
		КонецЕсли;
		ЗаполнитьСтруктуруДанныхСтроки(СтрокаТаблицы, СтрокаXDTO, СтруктураДанныхСтроки);
		МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Получение
Процедура ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПоступлениеТоваровУслуг_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПоступлениеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_ПТУ";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента", , "Справочник_БанковскиеСчетаКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",    "ДатаВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Договор",                   "Договор", , "Справочник_ДоговорыКонтрагентов_Получение");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Магазин",                   "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента",   "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "УчитыватьНДС",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация",     "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "НомерГТД",           "", 1,"Справочник_НомерГТД_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеТоваров;
	Если ДанныеXDTO.Свойство("Налогообложение") 
		И ЗначениеЗаполнено(ДанныеXDTO.Налогообложение) Тогда
		ПолученныеДанные.УчитыватьНДС = ?(ДанныеXDTO.Налогообложение.Значение = "ОблагаетсяНДС", Истина, Ложь);
	Иначе
		ПолученныеДанные.УчитыватьНДС = Истина;
	КонецЕсли;
	Если ДанныеXDTO.ВидОперации.Значение = "ПриемНаКомиссию" Тогда
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;
	Иначе
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеТоваров
	КонецЕсли;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",   "Количество");
	ПравилаЗаполнения.Вставить("Сумма",        "Сумма");
	ПравилаЗаполнения.Вставить("Цена",         "Цена");
	ПравилаЗаполнения.Вставить("СтавкаНДС",    "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДС",     "СуммаНДС");
	ПравилаЗаполнения.Вставить("Склад",        "Склад");
	
	//Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код, СтранаПроисхождения", Строка.НомерГТД, Строка.СтранаПроисхождения));
			КонецЕсли;
			СуммаСНДС = Строка.Сумма;
			Если СтруктураДанныхСтроки.Свойство("СуммаНДС") И НЕ ПолученныеДанные.ЦенаВключаетНДС Тогда
				СуммаСНДС = СуммаСНДС + СтруктураДанныхСтроки.СуммаНДС
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("СуммаСНДС", СуммаСНДС);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			Если ДанныеXDTO.Свойство("Склад") Тогда
				СтруктураДанныхСтроки.Вставить("Склад", ДанныеXDTO.Склад);
			КонецЕсли;
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	//Услуги  загружаются в ТЧ Товары с другим видом запасов
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Ответственный) Тогда
		ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Получение
Процедура ДобавитьПКО_Документ_РеализацияТоваровУслуг_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РеализацияТоваровУслуг_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РеализацияТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",             "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "АдресДоставки",             "АдресДоставки");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчетОрганизации", "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                      "Дата");
	ДобавитьПКС(СвойстваШапки, "ЗаказПокупателя",           "Заказ");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",                "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Магазин",                   "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                     "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",               "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",             "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",            "Сумма");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС",           "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "Проведен",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "Продавец",                  "", 1);
	ДобавитьПКС(СвойстваШапки, "УчитыватьНДС",              "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",     "", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("Продавец")
		И ЗначениеЗаполнено(ДанныеXDTO.Продавец) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Продавец", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Продавец, "Справочник_Пользователи_Получение"));
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Налогообложение")
		И ЗначениеЗаполнено(ДанныеXDTO.Налогообложение) И ДанныеXDTO.Налогообложение.Значение = "ПродажаОблагаетсяНДС" Тогда
		ПолученныеДанные.УчитыватьНДС = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Продавец = ПолученныеДанные.ДополнительныеСвойства.Продавец;
	
	Если ЗначениеЗаполнено(Продавец.ФизическоеЛицо) Тогда
		ПолученныеДанные.Продавец = Продавец.ФизическоеЛицо;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОНаБанковскийСчет_Получение
Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОНаБанковскийСчет_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_РКО";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",        "БанковскийСчет", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "Выдать",                "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочийРасход_Получение
Процедура ДобавитьПКО_Документ_РКОПрочийРасход_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РКОПрочийРасход_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РКОПрочийРасход";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_РКО";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Выдать");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "ПоДокументу",           "ПоДокументу");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1,"СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

КонецПроцедуры

Процедура ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы;
	
	МассивСтрокРасшифровкаПлатежа = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) Тогда
	
		РасшифровкаПлатежа = Новый Соответствие;
		РасшифровкаПлатежа.Вставить("Сумма", "Сумма");
		РасшифровкаПлатежа.Вставить("СтатьяДвиженияДенежныхСредств", "СтатьяДДС");
	
		Для Каждого СтрокаXDTO Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(РасшифровкаПлатежа, СтрокаXDTO, СтруктураДанныхСтроки);
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РегистрацияБезналичнойОплаты;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_СБДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",            "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "РасшифровкаПлатежа", "");
	ДобавитьПКС(СвойстваТЧ, "СтатьяДвиженияДенежныхСредств", "", 1,"СтатьиДДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	Если ДанныеXDTO.Свойство("ВидРасчетов")
		И ЗначениеЗаполнено(ДанныеXDTO.ВидРасчетов) Тогда
		ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
	КонецЕсли;
	
	РасшифровкаПлатежаXDTO = Неопределено;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа", РасшифровкаПлатежаXDTO)
		И ЗначениеЗаполнено(РасшифровкаПлатежаXDTO) Тогда
		
		ПравилаЗаполнения = Новый Структура;
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	
		МассивРасшифровкаПлатежа = Новый Массив;
		ОплатаПоставщику = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
		СтатьяДДС_ОплатаПоставщику = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ОплатаПоставщику);
	
		Для Каждого СтрокаРасшифровкаПлатежаXDTO Из РасшифровкаПлатежаXDTO Цикл
			СтрокаРасшифровкаПлатежа = ДанныеКоллекцииВВидеСтруктуры(СтрокаРасшифровкаПлатежаXDTO, ПравилаЗаполнения);
	
			Если НЕ ЗначениеЗаполнено(СтрокаРасшифровкаПлатежаXDTO.СтатьяДДС) Тогда
				СтрокаРасшифровкаПлатежаXDTO.СтатьяДДС = СтатьяДДС_ОплатаПоставщику;
			КонецЕсли;
	
			МассивРасшифровкаПлатежа.Добавить(СтрокаРасшифровкаПлатежа);
		КонецЦикла;
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивРасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_СборкаТоваров_Получение
Процедура ДобавитьПКО_Документ_СборкаТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СборкаТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СборкаТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_Сборка";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидОперации",        "ВидОперации", , "ВидыОперацийСборкаТоваров");
	ДобавитьПКС(СвойстваШапки, "Дата",               "Дата");
	ДобавитьПКС(СвойстваШапки, "Количество",         "Количество");
	ДобавитьПКС(СвойстваШапки, "КоличествоУпаковок", "КоличествоУпаковок");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",            "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номенклатура",       "Номенклатура", , "Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",              "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",      "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Упаковка",           "Упаковка", , "Справочник_Упаковки");
	ДобавитьПКС(СвойстваШапки, "Проведен",           "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "", 1,"Справочник_Номенклатура_Получение");

КонецПроцедуры

Процедура ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		//Товары
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("ДоляСтоимости", "ДоляСтоимости");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Ответственный) Тогда
		ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеЗапасов_Получение
Процедура ДобавитьПКО_Документ_СписаниеЗапасов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СписаниеЗапасов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СписаниеЗапасов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СписаниеЗапасов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Документ_Списание";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Магазин",                        "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",                          "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ОснованиеСписания",              "Основание");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",                 "Сумма");
	ДобавитьПКС(СвойстваШапки, "АналитикаХозяйственнойОперации", "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",                       "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СписаниеЗапасов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.АналитикаХозяйственнойОперации) Тогда
		ПолученныеДанные.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.СкидкиПодарки;
	КонецЕсли;
	//Товары
	МассивСтрокТовары = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
	И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		КонвертацииСвойств = Новый Соответствие;
		КонвертацииСвойств.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойств.Вставить("Количество", "Количество");
		КонвертацииСвойств.Вставить("Сумма", "Сумма");
		КонвертацииСвойств.Вставить("Цена", "Цена");
		КонвертацииСвойств.Вставить("КоличествоУпаковок", "КоличествоУпаковок");
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = Новый Структура;
			Если СтрокаXDTO.КоличествоУпаковок = Неопределено Тогда
				СтрокаXDTO.КоличествоУпаковок = СтрокаXDTO.Количество;
			КонецЕсли;
			ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СписаниеЗапасов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Ответственный) Тогда
		ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.АналитикаХозяйственнойОперации) Тогда
		ПолученныеДанные.АналитикаХозяйственнойОперации = ДанныеИБ.АналитикаХозяйственнойОперации;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Получение
Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_УстановкаЦенНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",      "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВидыЦен", "");
	ДобавитьПКС(СвойстваТЧ, "ВидЦены", "", 1,"Справочник_ТипыЦен_Получение");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары",  "");
	ДобавитьПКС(СвойстваТЧ, "ВидЦены",             "", 1,"Справочник_ТипыЦен_Получение");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЦенаИзмененаВручную", "", 1);

КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	//Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			СтруктураДанныхСтроки.Вставить("ВидЦены", ДанныеXDTO.ТипЦен);
			СтруктураДанныхСтроки.Вставить("ЦенаИзмененаВручную", Истина);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	МассивВидыЦен = Новый Массив;
	МассивВидыЦен.Добавить(Новый Структура("ВидЦены", ДанныеXDTO.ТипЦен));
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ВидыЦен", МассивВидыЦен);
КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЧекККМ_Получение
Процедура ДобавитьПКО_Документ_ЧекККМ_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ЧекККМ_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ЧекККМ;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ЧекККМ";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ЧекККМ_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЧекККМ_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",            "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",        "КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",           "НомерВПрограмме");
	ДобавитьПКС(СвойстваШапки, "НомерСменыККМ",   "НомерКассовойСмены");
	ДобавитьПКС(СвойстваШапки, "НомерЧекаККМ",    "НомерЧекаФР");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "Отменен");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",  "Сумма");
	ДобавитьПКС(СвойстваШапки, "ВидОперации",     "", 1);
	ДобавитьПКС(СвойстваШапки, "Контрагент",      "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Магазин",         "", 1, "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Организация",     "", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Проведен",        "", 1);
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Оплата", "");
	ДобавитьПКС(СвойстваТЧ, "ВидОплаты", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",     "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "Количество",         "", 1);
	ДобавитьПКС(СвойстваТЧ, "КоличествоУпаковок", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",       "", 1,"Справочник_Номенклатура_Получение");
	ДобавитьПКС(СвойстваТЧ, "Склад",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СтавкаНДС",          "", 1,"Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваТЧ, "Сумма",              "", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "Упаковка",           "", 1,"Справочник_Упаковки");
	ДобавитьПКС(СвойстваТЧ, "Характеристика",     "", 1,"Справочник_ХарактеристикиНоменклатуры");
	ДобавитьПКС(СвойстваТЧ, "Цена",               "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ЧекККМ_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.КассаККМ, "Владелец, Магазин");
	
	ПолученныеДанные.Организация = РеквизитыКассыККМ.Владелец;
	ПолученныеДанные.Магазин = РеквизитыКассыККМ.Магазин;
	ПолученныеДанные.ЦенаВключаетНДС = Истина;
	ПолученныеДанные.Проведен = Истина;
	ПолученныеДанные.Контрагент = КомпонентыОбмена.ПараметрыКонвертации.КонтрагентРозничныйПокупатель;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
	РеквизитыМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.Магазин, "СкладПродажи");
	
	ОплатаПлатежнымиКартами = 0;
	
	#Область ТоварыИУслуги
	МассивСтрокТовары 	= Новый Массив;
	
	ИмяТабличнойЧастиТовары = ?(ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6"),	
		"ТоварыПродажа", "Товары");
	ТабличнаяЧастьТовары = Неопределено;
	
	Если ДанныеXDTO.Свойство("Товары", ТабличнаяЧастьТовары)
		И ЗначениеЗаполнено(ТабличнаяЧастьТовары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", 		"Номенклатура");
		ПравилаЗаполнения.Вставить("Характеристика", 	"Характеристика");
		ПравилаЗаполнения.Вставить("Упаковка", 			"Упаковка");
		ПравилаЗаполнения.Вставить("Количество",   		"Количество");
		ПравилаЗаполнения.Вставить("Сумма",        		"Сумма");
		ПравилаЗаполнения.Вставить("Цена",         		"Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС",    		"СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС",     		"СуммаНДС");
	
		Для Каждого Строка Из ТабличнаяЧастьТовары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			СтруктураДанныхСтроки.Вставить("КоличествоУпаковок", СтруктураДанныхСтроки.Количество);
			СтруктураДанныхСтроки.Вставить("Склад", РеквизитыМагазина.СкладПродажи);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			// Услуги добавляются в ТЧ Товары
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	#КонецОбласти
	
	#Область Оплата
	МассивСтрокОплата = Новый Массив;
	
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартами) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
						|	ВидыОплатЧекаККМ.Ссылка КАК Ссылка
						|ИЗ
						|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
						|ГДЕ
						|	ВидыОплатЧекаККМ.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)";
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ВидОплаты = Выборка.Ссылка;
		Иначе
			ВидОплаты = Справочники.ВидыОплатЧекаККМ.ПустаяСсылка();
		КонецЕсли;
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаПлатежнымиКартами Цикл
			СтруктураДанныхСтроки = Новый Структура;
			СтруктураДанныхСтроки.Вставить("ВидОплаты", ВидОплаты);
			СтруктураДанныхСтроки.Вставить("Сумма", Строка.СуммаОплаты);
		
			Инструкция = Новый Структура;
			Инструкция.Вставить("Значение", Справочники.ЭквайринговыеТерминалы.ПустаяСсылка());
			Инструкция.Вставить("ИмяПКО", "Справочник_ЭквайринговыеТерминалы_Получение");
			
			СтруктураДанныхСтроки.Вставить("ЭквайринговыйТерминал", Инструкция);
			
			МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		ОплатаПлатежнымиКартами = ДанныеXDTO.ОплатаПлатежнымиКартами.Итог("СуммаОплаты");
	КонецЕсли;
	#КонецОбласти
	
	//Сумма оплаты наличных
	СуммаОплатыНаличных = ПолученныеДанные.СуммаДокумента - ОплатаПлатежнымиКартами;
	Если СуммаОплатыНаличных > 0 Тогда
		СтруктураДанныхСтрокиНаличные = Новый Структура;
		СтруктураДанныхСтрокиНаличные.Вставить("ВидОплаты", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОплатЧекаККМ.Наличные"));
		СтруктураДанныхСтрокиНаличные.Вставить("Сумма", СуммаОплатыНаличных);
	
		МассивСтрокОплата.Добавить(СтруктураДанныхСтрокиНаличные);
	КонецЕсли;
	Если МассивСтрокОплата.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Оплата", МассивСтрокОплата);	
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ЧекККМ_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.АналитикаХозяйственнойОперации) Тогда
		ПолученныеДанные.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Ответственный) Тогда
		ПолученныеДанные.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Переносим те свойства, которые указаны в ПКС.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	// Табличные части
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Характеристика");
	МассивКлючевыхПолей.Добавить("Упаковка");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"Продавец,ДисконтнаяКарта");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	//Оплаты
	ДанныеИБ.Оплата.Загрузить(ПолученныеДанные.Оплата.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаКонтрагентов_Получение
Процедура ДобавитьПКО_Справочник_БанковскиеСчетаКонтрагентов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_БанковскиеСчетаКонтрагентов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.БанковскиеСчетаКонтрагентов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",         "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "Банк",         "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Владелец", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",   "НомерСчета");

КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчетаОрганизаций_Получение
Процедура ДобавитьПКО_Справочник_БанковскиеСчетаОрганизаций_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_БанковскиеСчетаОрганизаций_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.БанковскиеСчетаОрганизаций;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",         "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "Банк",         "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Владелец", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",   "НомерСчета");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,НомерСчета");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыАлкогольнойПродукции_Получение
Процедура ДобавитьПКО_Справочник_ВидыАлкогольнойПродукции_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВидыАлкогольнойПродукции_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыАлкогольнойПродукции;
	ПравилоКонвертации.ОбъектФормата                = "КлючевыеСвойстваВидыАлкогольнойПродукции";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ВидыАлкогольнойПродукции_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидЛицензии",  "ВидЛицензии", , "ВидыЛицензийАлкогольнойПродукции");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Код",          "Код", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ВидЛицензии,Код,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ВидыАлкогольнойПродукции_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если НЕ ДанныеXDTO.КлючевыеСвойства.Свойство("Код") Тогда
		ПолученныеДанные.Код = "0";
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Получение
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДоговорыКонтрагентов_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ДоговорыПлатежныхАгентов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Договоры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Агент",              "Контрагент", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",     "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчетаОрганизаций_Получение");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "Организация",        "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ИННПоставщикаУслуг", "", 1);
	ДобавитьПКС(СвойстваШапки, "ПризнакАгента",      "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипДоговора",        "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Агент,Организация,ПризнакАгента");
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ПризнакАгента = Перечисления.ПризнакиАгента.Комиссионер;
	ПолученныеДанные.ТипДоговора = Перечисления.ТипыДоговоровПлатежныхАгентов.Прямой;
	
	Если ДанныеXDTO.КлючевыеСвойства.Контрагент.Свойство("ИНН") Тогда
		ПолученныеДанные.ИННПоставщикаУслуг = ДанныеXDTO.КлючевыеСвойства.Контрагент.ИНН;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_КассыККМ_Получение
Процедура ДобавитьПКО_Справочник_КассыККМ_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КассыККМ_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КассыККМ;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КассыККМ";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",             "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Магазин",              "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Наименование",         "Наименование");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомер", "РегистрационныйНомер");

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Магазин,Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Контрагенты";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",          "ОКПО");
	ДобавитьПКС(СвойстваШапки, "Комментарий",        "ДополнительнаяИнформация");
	ДобавитьПКС(СвойстваШапки, "КПП",                "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",           "Группа", , "Справочник_КонтрагентыГруппа");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",          "ЮридическоеФизическоеЛицо", , "ЮрФизЛицо_Организации_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,НаименованиеПолное,Родитель");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Получение
Процедура ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Номенклатура_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Номенклатура";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Справочник_Номенклатура";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АлкогольнаяПродукция",                      "АлкогольнаяПродукция");
	ДобавитьПКС(СвойстваШапки, "Артикул",                                   "Артикул");
	ДобавитьПКС(СвойстваШапки, "ВидАлкогольнойПродукцииЕГАИС",              "ВидАлкогольнойПродукции", , "Справочник_ВидыАлкогольнойПродукции_Получение");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",                          "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "ИмпортнаяАлкогольнаяПродукция",             "ИмпортнаяАлкогольнаяПродукция");
	ДобавитьПКС(СвойстваШапки, "Код",                                       "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование",                              "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",                        "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ОбъемДАЛ",                                  "ОбъемДАЛ");
	ДобавитьПКС(СвойстваШапки, "ПроизводительИмпортерАлкогольнойПродукции", "ПроизводительИмпортер", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Родитель",                                  "Группа", , "Справочник_НоменклатураГруппа");
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",                                 "СтавкаНДС", , "Перечисление_СтавкиНДС");
	ДобавитьПКС(СвойстваШапки, "ТипНоменклатуры",                           "ТипНоменклатуры", , "ТипыНоменклатуры");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Артикул,Код,НаименованиеПолное");
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(ПолученныеДанные.СтавкаНДС) Тогда
		ПолученныеДанные.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_НомерГТД_Получение
Процедура ДобавитьПКО_Справочник_НомерГТД_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НомерГТД_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.НомераГТД;
	ПравилоКонвертации.ОбъектФормата                = "";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_НомерГТД_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "СтранаПроисхождения", "", 1, "Справочник_СтраныМира");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,СтранаПроисхождения");
КонецПроцедуры

Процедура ПКО_Справочник_НомерГТД_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Код = ДанныеXDTO.КлючевыеСвойства.Код;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("СтранаПроисхождения", ДанныеXDTO.КлючевыеСвойства.СтранаПроисхождения);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Справочник_Организации";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                     "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКАТО",              "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",               "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                     "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",            "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",      "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеСокращенное", "НаименованиеСокращенное");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                    "ОГРН");
	ДобавитьПКС(СвойстваШапки, "Префикс",                 "Префикс");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоДатаВыдачи", "СвидетельствоДатаВыдачи");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоСерияНомер", "СвидетельствоСерияНомер");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",               "ЮридическоеФизическоеЛицо", , "ЮрФизЛицо_Организации_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП");
КонецПроцедуры

Процедура ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.СпособОценкиТоваровВРознице) Тогда
		ПолученныеДанные.СпособОценкиТоваровВРознице = ДанныеИБ.СпособОценкиТоваровВРознице;
	Иначе
		ПолученныеДанные.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоСтоимостиПриобретения;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Получение
Процедура ДобавитьПКО_Справочник_Пользователи_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Пользователи_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Пользователи";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "ФизЛицо",      "ФизическоеЛицо", , "Справочник_ФизическиеЛица_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Получение
Процедура ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Склады_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Магазины;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Склады";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",            "Наименование");
	ДобавитьПКС(СвойстваШапки, "СкладУправляющейСистемы", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.ТипСклада.Значение = "Розничный"
		ИЛИ ДанныеXDTO.КлючевыеСвойства.ТипСклада.Значение = "НеавтоматизированнаяТорговаяТочка" Тогда
		ПолученныеДанные.СкладУправляющейСистемы = Ложь;
	Иначе
		ПолученныеДанные.СкладУправляющейСистемы = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен_Получение
Процедура ДобавитьПКО_Справочник_ТипыЦен_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ТипыЦен_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВидыЦен;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ТипыЦен";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ТипыЦен_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ТипыЦен_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Наименование");
	ДобавитьПКС(СвойстваШапки, "ЦенаВключаетНДС", "ЦенаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "Идентификатор",   "Идентификатор", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Идентификатор,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ТипыЦен_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Если идентификатор, сформированный по наименованию, занят, устанавливается автосгенерированный.
	ПолученныеДанные.Идентификатор = ПолучитьИдентификаторТипЦены(ПолученныеДанные.Наименование);
	Запрос = Новый Запрос();
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	1 КАК Поле1
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("Идентификатор", ПолученныеДанные.Идентификатор);
	Если Не Запрос.Выполнить().Пустой() Тогда
		ПолученныеДанные.Идентификатор = Строка(Новый УникальныйИдентификатор());
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ТипыЦен_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.Идентификатор) Тогда
		ПолученныеДанные.Идентификатор = ДанныеИБ.Идентификатор;
	ИначеЕсли НЕ ЗначениеЗаполнено(ПолученныеДанные.Идентификатор) Тогда
		Разделители	=  " .,+,-,/,*,?,=,<,>,(,)%!@#$%&*""№:;{}[]?()\|/`~'^_";
		Идентификатор = "";
		БылСпецСимвол = Ложь;
		Для НомСимвола = 1 По СтрДлина(ПолученныеДанные.Наименование) Цикл
			Символ = Сред(ПолученныеДанные.Наименование, НомСимвола, 1);
			Если Найти(Разделители, Символ) <> 0 Тогда
				БылСпецСимвол = Истина;
			ИначеЕсли БылСпецСимвол Тогда
				БылСпецСимвол = Ложь;
				Идентификатор = Идентификатор + ВРег(Символ);
			Иначе
				Идентификатор = Идентификатор + Символ;
			КонецЕсли;
		КонецЦикла;
		ПолученныеДанные.Идентификатор = Идентификатор;
	КонецЕсли;
	Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.СпособЗаданияЦены) Тогда
		ПолученныеДанные.СпособЗаданияЦены = ДанныеИБ.СпособЗаданияЦены;
	Иначе
		ПолученныеДанные.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗадаватьВручную;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Получение
Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛица_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "ФИО");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ФизическиеЛицаГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ШтрихкодыНоменклатуры_Получение
Процедура ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ШтрихкодыНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.РегистрыСведений.Штрихкоды;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ШтрихкодОтбор", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Упаковка,Характеристика,Штрихкод");
КонецПроцедуры

Процедура ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Штрихкод", ДанныеXDTO.ШтрихкодОтбор);
	
	Если ДанныеXDTO.Свойство("НоменклатураОтбор")
		И ЗначениеЗаполнено(ДанныеXDTO.НоменклатураОтбор) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", ДанныеXDTO.НоменклатураОтбор);
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ХарактеристикаОтбор")
		И ЗначениеЗаполнено(ДанныеXDTO.ХарактеристикаОтбор) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Характеристика", ДанныеXDTO.ХарактеристикаОтбор);
	КонецЕсли;
	Если ДанныеXDTO.Свойство("УпаковкаОтбор")
		И ЗначениеЗаполнено(ДанныеXDTO.УпаковкаОтбор) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Упаковка", ДанныеXDTO.УпаковкаОтбор);
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", Неопределено);
	
	Если ДанныеXDTO.Свойство("Записи")
		И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", ДанныеXDTO.Записи);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Справочник_Номенклатура_Получение = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Номенклатура_Получение");
	Справочник_ХарактеристикиНоменклатуры = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ХарактеристикиНоменклатуры");
	Справочник_Упаковки = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Упаковки");
	
	Для каждого Свойство Из ПолученныеДанные.ДополнительныеСвойства Цикл
		Если Свойство.Ключ = "Записи" Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Свойство.Значение) Тогда
			ПолученныеДанные.Отбор[Свойство.Ключ].Установить(Свойство.Значение);
		КонецЕсли;
	КонецЦикла;
		
	// Добавление записей в набор записей.		
	Если ПолученныеДанные.ДополнительныеСвойства.Записи <> Неопределено Тогда
		Для Каждого Строка Из ПолученныеДанные.ДополнительныеСвойства.Записи Цикл
			СтрокаЗаписи = ПолученныеДанные.Добавить();
			СтрокаЗаписи.Штрихкод = ПолученныеДанные.ДополнительныеСвойства.Штрихкод;
			
			СтрокаЗаписи.Владелец = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				Строка.Номенклатура, 
				Справочник_Номенклатура_Получение, 
				"ПолучитьСсылку").Ссылка;
				
			Если ЗначениеЗаполнено(Строка.Характеристика) Тогда
				СтрокаЗаписи.Характеристика = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
					Строка.Характеристика, 
					Справочник_ХарактеристикиНоменклатуры, 
					"ПолучитьСсылку").Ссылка;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.Упаковка) Тогда
				СтрокаЗаписи.Упаковка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
					Строка.Упаковка, 
					Справочник_Упаковки, 
					"ПолучитьСсылку").Ссылка;
			КонецЕсли;
			СтрокаЗаписи.ТипШтрихкода = ПодключаемоеОборудованиеРТВызовСервера.ОпределитьТипШтрихкода(ПолученныеДанные.ДополнительныеСвойства.Штрихкод);
		КонецЦикла;
	Иначе
	
		СтрокаЗаписи = ПолученныеДанные.Добавить();
		СтрокаЗаписи.Штрихкод = ПолученныеДанные.ДополнительныеСвойства.Штрихкод;
		
		СтрокаЗаписи.Владелец = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
			Строка.Номенклатура, 
			Справочник_Номенклатура_Получение, 
			"ПолучитьСсылку").Ссылка;
			
		Если ЗначениеЗаполнено(Строка.Характеристика) Тогда
			СтрокаЗаписи.Характеристика = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				Строка.Характеристика, 
				Справочник_ХарактеристикиНоменклатуры, 
				"ПолучитьСсылку").Ссылка;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Упаковка) Тогда
			СтрокаЗаписи.Упаковка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				Строка.Упаковка, 
				Справочник_Упаковки, 
				"ПолучитьСсылку").Ссылка;
		КонецЕсли;
		СтрокаЗаписи.ТипШтрихкода = ПодключаемоеОборудованиеРТВызовСервера.ОпределитьТипШтрихкода(ПолученныеДанные.ДополнительныеСвойства.Штрихкод);
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЭквайринговыеТерминалы_Получение
Процедура ДобавитьПКО_Справочник_ЭквайринговыеТерминалы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЭквайринговыеТерминалы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЭквайринговыеТерминалы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЭквайринговыеТерминалы";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ЭквайринговыеТерминалы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                                    "Номер");
	ДобавитьПКС(СвойстваШапки, "Наименование",                           "Наименование");
	ДобавитьПКС(СвойстваШапки, "Эквайрер",                               "Эквайер", , "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьБезПодключенияОборудования", "", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ЭквайринговыеТерминалы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ИспользоватьБезПодключенияОборудования = Истина;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область ОтправкаИПолучение
#Область Справочник_Банки
Процедура ДобавитьПКО_Справочник_Банки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Банки";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторБанков;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Банки";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Адрес",        "Адрес");
	ДобавитьПКС(СвойстваШапки, "Город",        "Город");
	ДобавитьПКС(СвойстваШапки, "Код",          "БИК");
	ДобавитьПКС(СвойстваШапки, "КоррСчет",     "КоррСчет");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Телефоны",     "Телефоны");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДополнительныеРеквизиты
Процедура ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДополнительныеРеквизиты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ДополнительныеРеквизиты";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВладелецДополнительныхЗначений",     "ВладелецДополнительныхЗначений");
	ДобавитьПКС(СвойстваШапки, "ДополнительныеЗначенияИспользуются", "ДополнительныеЗначенияИспользуются");
	ДобавитьПКС(СвойстваШапки, "ДополнительныеЗначенияСВесом",       "ДополнительныеЗначенияСВесом");
	ДобавитьПКС(СвойстваШапки, "Заголовок",                          "Заголовок");
	ДобавитьПКС(СвойстваШапки, "ЗаголовокФормыВыбораЗначения",       "ЗаголовокФормыВыбораЗначения");
	ДобавитьПКС(СвойстваШапки, "ЗаголовокФормыЗначения",             "ЗаголовокФормыЗначения");
	ДобавитьПКС(СвойстваШапки, "ЗаполнятьОбязательно",               "ЗаполнятьОбязательно");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "МногострочноеПолеВвода",             "МногострочноеПолеВвода");
	ДобавитьПКС(СвойстваШапки, "Наименование",                       "Наименование");
	ДобавитьПКС(СвойстваШапки, "Подсказка",                          "Подсказка");
	ДобавитьПКС(СвойстваШапки, "ФорматСвойства",                     "ФорматСвойства");
	ДобавитьПКС(СвойстваШапки, "ЭтоДополнительноеСведение",          "ЭтоДополнительноеСведение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Заголовок) Тогда
		ПолученныеДанные.Заголовок = ПолученныеДанные.Наименование;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЕдиницыИзмерения";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.БазовыеЕдиницыИзмерения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЗначенияДополнительныхРеквизитов
Процедура ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Вес",          "Вес");
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Владелец", , "Справочник_ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Владелец");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа
Процедура ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КонтрагентыГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КонтрагентыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_КонтрагентыГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа
Процедура ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатураГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_НоменклатураГруппа_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_НоменклатураГруппа");

КонецПроцедуры

Процедура ПКО_Справочник_НоменклатураГруппа_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ДанныеИБ.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СерииНоменклатуры
Процедура ДобавитьПКО_Справочник_СерииНоменклатуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СерииНоменклатуры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СерииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СерииНоменклатуры";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ГоденДо",      "ГоденДо");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Номер",        "СерийныйНомер");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира
Процедура ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтраныМира";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтраныМира;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтраныМира";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "КодАльфа2",          "КодАльфа2");
	ДобавитьПКС(СвойстваШапки, "КодАльфа3",          "КодАльфа3");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Упаковки
Процедура ДобавитьПКО_Справочник_Упаковки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Упаковки";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.УпаковкиНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Упаковки";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Упаковки_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Упаковки_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения", "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "Коэффициент",      "Коэффициент");
	ДобавитьПКС(СвойстваШапки, "Наименование",     "Наименование");
	ДобавитьПКС(СвойстваШапки, "Объем",            "Объем");
	ДобавитьПКС(СвойстваШапки, "",                 "Высота", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "Глубина", 1);
	ДобавитьПКС(СвойстваШапки, "",                 "Ширина", 1);
	ДобавитьПКС(СвойстваШапки, "Владелец",         "Номенклатура", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Владелец");
КонецПроцедуры

Процедура ПКО_Справочник_Упаковки_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Высота",1);
	ДанныеXDTO.Вставить("Глубина",1);
	ДанныеXDTO.Вставить("Ширина",1);
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.Объем) Тогда
		ДанныеXDTO.Вставить("Объем",1);
	КонецЕсли;
	
	Владелец = ДанныеИБ.Владелец;
	Если ЗначениеЗаполнено(Владелец) И ТипЗнч(Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если СтекВыгрузки.Количество() > 1 Тогда
			ДанныеXDTO.Вставить("Номенклатура", Новый Структура("Значение, ИмяПКО", Владелец, "Справочник_Номенклатура_Отправка"));
			Возврат;
		КонецЕсли;
		
		ДанныеXDTO.КлючевыеСвойства.Вставить("Номенклатура", Новый Структура("Значение, ИмяПКО", Владелец, "Справочник_Номенклатура_Отправка"));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_Упаковки_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("Номенклатура")
		И ЗначениеЗаполнено(ДанныеXDTO.Номенклатура) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Номенклатура, "Справочник_Номенклатура_Получение"));
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа
Процедура ДобавитьПКО_Справочник_ФизическиеЛицаГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛицаГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛицаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ФизическиеЛицаГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ХарактеристикиНоменклатуры
Процедура ДобавитьПКО_Справочник_ХарактеристикиНоменклатуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ХарактеристикиНоменклатуры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ХарактеристикиНоменклатуры";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Номенклатура", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование", "НаименованиеПолное", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Наименование", 	ДанныеИБ.Наименование);
	ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", 	ДанныеИБ.Наименование);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номенклатура", Новый Структура("Значение, ИмяПКО", ДанныеИБ.Владелец, "Справочник_Номенклатура_Отправка"));
	ДанныеXDTO.КлючевыеСвойства.Вставить("Ссылка", ДанныеИБ.Ссылка);
КонецПроцедуры

Процедура ПКО_Справочник_ХарактеристикиНоменклатуры_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("Номенклатура")
		И ЗначениеЗаполнено(ДанныеXDTO.Номенклатура) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Номенклатура, "Справочник_Номенклатура_Получение"));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ХарактеристикиНоменклатуры_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИБВладелец = ДанныеИБ.Владелец;
	
	// Переносим те свойства, которые указаны в ПКС.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	ДанныеИБ.Владелец = ДанныеИБВладелец;
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область СтатьиДДС
Процедура ДобавитьПКО_СтатьиДДС(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "СтатьиДДС";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиДДС";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// Пол.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "Пол";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическогоЛица;
		ПравилоКонвертации.ТипXDTO   = "Пол";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Женский, "Женский");
		ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Мужской, "Мужской");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ХозяйственныеОперацииВВидыОперацийПоПлатежнойКарте.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ХозяйственныеОперацииВВидыОперацийПоПлатежнойКарте";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ХозяйственныеОперации;
		ПравилоКонвертации.ТипXDTO   = "ВидыОперацийПоПлатежнойКарте";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту, "ВозвратОплатыКлиентуНаПлатежнуюКарту");
		ЗначенияДляОтправки.Вставить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента, "ОплатаОтКлиентаПлатежнойКартой");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ЮрФизЛицо_Организации_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ЮрФизЛицо_Организации_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮрФизЛицо;
		ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель, "ФизическоеЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ФизЛицо, "ФизическоеЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ЮрЛицо, "ЮридическоеЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, "ЮридическоеЛицо");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;
	Если НаправлениеОбмена = "Получение" Тогда
		// ЮрФизЛицо_Организации_Получение.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ЮрФизЛицо_Организации_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮрФизЛицо;
		ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель);
		ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	КонецЕсли;

	// ВидыЛицензийАлкогольнойПродукции.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыЛицензийАлкогольнойПродукции";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыЛицензийАлкогольнойПродукции;
	ПравилоКонвертации.ТипXDTO   = "ВидыЛицензийАлкогольнойПродукции";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция, "АлкогольнаяПродукция");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво, "Пиво");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция, "СпиртосодержащаяНеПищеваяПродукция");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция, "СпиртосодержащаяПищеваяПродукция");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("АлкогольнаяПродукция", Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция);
	ЗначенияДляПолучения.Вставить("Пиво", Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво);
	ЗначенияДляПолучения.Вставить("СпиртосодержащаяНеПищеваяПродукция", Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция);
	ЗначенияДляПолучения.Вставить("СпиртосодержащаяПищеваяПродукция", Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийСборкаТоваров.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыОперацийСборкаТоваров";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийКомплектацияНоменклатуры;
	ПравилоКонвертации.ТипXDTO   = "ВидыОперацийСборкаТоваров";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация, "Сборка");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация, "Разборка");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Сборка", Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация);
	ЗначенияДляПолучения.Вставить("Разборка", Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_СтавкиНДС.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_СтавкиНДС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтавкиНДС;
	ПравилоКонвертации.ТипXDTO   = "СтавкиНДС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.БезНДС, "БезНДС");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС0, "НДС0");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10, "НДС10");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10_110, "НДС10_110");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18, "НДС18");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18_118, "НДС18_118");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20, "НДС20");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20_120, "НДС20_120");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("БезНДС", Перечисления.СтавкиНДС.БезНДС);
	ЗначенияДляПолучения.Вставить("НДС0", Перечисления.СтавкиНДС.НДС0);
	ЗначенияДляПолучения.Вставить("НДС10", Перечисления.СтавкиНДС.НДС10);
	ЗначенияДляПолучения.Вставить("НДС10_110", Перечисления.СтавкиНДС.НДС10_110);
	ЗначенияДляПолучения.Вставить("НДС18", Перечисления.СтавкиНДС.НДС18);
	ЗначенияДляПолучения.Вставить("НДС18_118", Перечисления.СтавкиНДС.НДС18_118);
	ЗначенияДляПолучения.Вставить("НДС20", Перечисления.СтавкиНДС.НДС20);
	ЗначенияДляПолучения.Вставить("НДС20_120", Перечисления.СтавкиНДС.НДС20_120);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// СпособыРасчетаКомиссионногоВознаграждения.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "СпособыРасчетаКомиссионногоВознаграждения";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыРасчетаКомиссионногоВознаграждения;
	ПравилоКонвертации.ТипXDTO   = "СпособыРасчетаКомиссионногоВознаграждения";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается, "НеРассчитывается");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммыПродажиИСуммыКомитента, "ПроцентОтРазницыСуммПродажиИПоступления");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи, "ПроцентОтСуммыПродажи");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НеРассчитывается", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);
	ЗначенияДляПолучения.Вставить("ПроцентОтРазницыСуммПродажиИПоступления", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммыПродажиИСуммыКомитента);
	ЗначенияДляПолучения.Вставить("ПроцентОтСуммыПродажи", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ТипыНоменклатуры.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ТипыНоменклатуры";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНоменклатуры;
	ПравилоКонвертации.ТипXDTO   = "ТипыНоменклатуры";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.ПодарочныйСертификат, "Товар");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Товар, "Товар");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Услуга, "Услуга");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Товар", Перечисления.ТипыНоменклатуры.ПодарочныйСертификат);
	ЗначенияДляПолучения.Вставить("Товар", Перечисления.ТипыНоменклатуры.Товар);
	ЗначенияДляПолучения.Вставить("Услуга", Перечисления.ТипыНоменклатуры.Услуга);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Функция ВерсияФорматаЧислом(СтрокаВерсии)
	Если Не ЗначениеЗаполнено(СтрокаВерсии) Или СтрокаВерсии = "1.0.beta" Тогда
		Возврат 0;
	КонецЕсли;
	
	ВерсияФорматаЧислом = 0;
	
	РазрядыВерсии = СтрРазделить(СтрокаВерсии, ".");
	Если РазрядыВерсии.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии);
	КонецЕсли;
	
	МножительРазряда = 10000;
	Для ИндексРазрядаОбратный = 0 По 1 Цикл
		ВерсияФорматаЧислом = ВерсияФорматаЧислом + Число(РазрядыВерсии[ИндексРазрядаОбратный])*МножительРазряда;
		МножительРазряда = МножительРазряда / 100;
	КонецЦикла;
	Возврат ВерсияФорматаЧислом;
КонецФункции
Процедура ВыгрузитьВалюту(ДанныеXDTO)
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	ДанныеXDTO.Вставить("Валюта", Инструкция);
КонецПроцедуры
Процедура ВыгрузитьВалютуВзаиморасчетов(ДанныеXDTO)
	СтруктураДанныеВалюты = Новый Структура;
	СтруктураДанныеВалюты.Вставить("Код", 643);
	СтруктураДанныеВалюты.Вставить("Наименование", "RUB");
	Инструкция = Новый Структура("Значение, ИмяПКО", СтруктураДанныеВалюты, "Справочник_Валюта_ИзСтруктуры");
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", Инструкция);
КонецПроцедуры
Процедура ВыгрузитьДоговор(ДанныеИБ, ДанныеXDTO, ВидДоговора)
	СтруктураДанныеДоговора = Новый Структура("Наименование, Номер, Дата, Контрагент, Организация");
	ЗаполнитьЗначенияСвойств(СтруктураДанныеДоговора, ДанныеИБ);
	МетаданныеОбъекта = ДанныеИБ.Метаданные();
	Если МетаданныеОбъекта.Реквизиты.Найти("Договор") <> Неопределено Тогда
		Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "Договор");
	
		Если ЗначениеЗаполнено(Договор) Тогда
			СтруктураДанныеДоговора.Вставить("Наименование", Договор.Наименование);
		КонецЕсли;
	Иначе
		СтруктураДанныеДоговора.Вставить("Наименование", "Договор по умолчанию");
	КонецЕсли;
	СтруктураДанныеДоговора.Вставить("Номер", ДанныеИБ.Номер);
	СтруктураДанныеДоговора.Вставить("Дата", ДанныеИБ.Дата);
	СтруктураДанныеДоговора.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
	СтруктураДанныеДоговора.Вставить("ВидДоговора", ВидДоговора);
	ДанныеXDTO.Вставить("Договор", Новый Структура("Значение, ИмяПКО", СтруктураДанныеДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
КонецПроцедуры
Функция ДанныеКоллекцииВВидеСтруктуры(Источник, ПравилаЗаполнения)
	Результат = Новый Структура;
	Для Каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
		СтруктураДляПереносаЗначения = Новый Структура(ПравилоЗаполнения.Ключ, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураДляПереносаЗначения, Источник);
		Значение = СтруктураДляПереносаЗначения[ПравилоЗаполнения.Ключ];
		Если Значение <> Неопределено Тогда
			Результат.Вставить(ПравилоЗаполнения.Значение, Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат
КонецФункции
Процедура ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, ЕстьТЧДопРеквизиты = Ложь)
	Если НЕ (ДанныеXDTO.Свойство("ДополнительныеРеквизиты")
			И ЗначениеЗаполнено(ДанныеXDTO.ДополнительныеРеквизиты)) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	МетаОбъект = ПолученныеДанные.Метаданные();
	ИмяБазовогоТипа = "";
	Если Метаданные.Документы.Содержит(МетаОбъект) Тогда
		ИмяБазовогоТипа = "Документ";
	ИначеЕсли Метаданные.Справочники.Содержит(МетаОбъект) Тогда
		ИмяБазовогоТипа = "Справочник";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаОбъект) Тогда
		ИмяБазовогоТипа = "ПланВидовХарактеристик";
	КонецЕсли;	
	
	ТипДанныхСтрокой = ИмяБазовогоТипа+"."+МетаОбъект.Имя;
	
	МассивСтрокДопРеквизиты = Новый Массив;
	МассивСтрокДопСведения = Новый Массив;
	Для Каждого СтрокаТЧ ИЗ ДанныеXDTO.ДополнительныеРеквизиты Цикл
		ЭтоДопСведение = СтрокаТЧ.Свойство.Свойство("ЭтоДополнительноеСведение") И СтрокаТЧ.Свойство.ЭтоДополнительноеСведение;
		ДопРеквизитыСтрока = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения.Добавить();
		ДопРеквизитыСтрока.Свойство = СтрокаТЧ.Свойство;
		ДопРеквизитыСтрока.ЭтоДопСведение = ЭтоДопСведение;
		ДопРеквизитыСтрока.ТипОбъекта = ТипДанныхСтрокой;
	
		СтруктураДанныхСтроки = Новый Структура("Свойство, Значение");
	
		//Проверка на простой тип
		Если ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Строка")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Число")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Дата")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Булево") Тогда
			СтруктураДанныхСтроки.Свойство = СтрокаТЧ.Свойство;
			СтруктураДанныхСтроки.Значение = СтрокаТЧ.ЗначениеСвойства;
		Иначе
			ИмяПКО = "";
			ЗагрузкаДопРеквизитов_ОпределитьИмяПКО(СтрокаТЧ.ЗначениеСвойства, ИмяПКО);
			Если ИмяПКО = "" Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДанныхСтроки.Свойство = СтрокаТЧ.Свойство;
			ЗначениеСвойства = СтрокаТЧ.ЗначениеСвойства;
			Если ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов" Тогда
				Если НЕ (ЗначениеСвойства.Свойство("Владелец") И ЗначениеЗаполнено(ЗначениеСвойства.Владелец)) Тогда
					// Ключевое свойство Владелец необходимо указать явно
					ЗначениеСвойства.Вставить("Владелец", СтрокаТЧ.Свойство);
				КонецЕсли;
			КонецЕсли;
			СтруктураДанныхСтроки.Значение = Новый Структура("Значение, ИмяПКО", СтрокаТЧ.ЗначениеСвойства, ИмяПКО);
		КонецЕсли;
		Если ЭтоДопСведение Тогда
			МассивСтрокДопСведения.Добавить(СтруктураДанныхСтроки);
		ИначеЕсли ЕстьТЧДопРеквизиты Тогда
			МассивСтрокДопРеквизиты.Добавить(СтруктураДанныхСтроки);
		КонецЕсли;
	КонецЦикла;
	Если МассивСтрокДопРеквизиты.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеРеквизиты", МассивСтрокДопРеквизиты);
	КонецЕсли;
	Если МассивСтрокДопСведения.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеСведения", МассивСтрокДопСведения);
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузитьДополнительныеСведения(ОбъектСсылка, СтруктураДопСвойства, КомпонентыОбмена)
	Если СтруктураДопСвойства.Свойство("ДополнительныеСведения") = Ложь ИЛИ 
		СтруктураДопСвойства.ДополнительныеСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	ДопСведенияНаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	ДопСведенияНаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
	ДопСведенияНаборЗаписей.ОбменДанными.Загрузка = Истина;
	ПКО_ДопРеквизиты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ДополнительныеРеквизиты");
	Для Каждого СтрокаДопСведения ИЗ СтруктураДопСвойства.ДополнительныеСведения Цикл
		СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
			СтрокаДопСведения.Свойство, 
			ПКО_ДопРеквизиты, 
			"ПолучитьСсылку");
		Если Найти(СокрЛП(СвойствоСсылка), "Объект не найден") > 0 Тогда
			СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				СтрокаДопСведения.Свойство, 
				ПКО_ДопРеквизиты, 
				"КонвертироватьИЗаписать").Ссылка;
		КонецЕсли;
			
		Если ТипЗнч(СтрокаДопСведения.Значение) = Тип("Структура") Тогда
			ПКО_ЗначениеСвойства = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,СтрокаДопСведения.Значение.ИмяПКО);
			ЗначениеСвойства = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
					СтрокаДопСведения.Значение.Значение, 
					ПКО_ЗначениеСвойства, 
					"ПолучитьСсылку");
			Если Найти(СокрЛП(ЗначениеСвойства), "Объект не найден") > 0 Тогда
				ЗначениеСвойства = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
					СтрокаДопСведения.Значение.Значение, 
					ПКО_ЗначениеСвойства, 
					"КонвертироватьИЗаписать").Ссылка;
			КонецЕсли;
		Иначе
			ЗначениеСвойства = СтрокаДопСведения.Значение;
		КонецЕсли;
		НовЗапись = ДопСведенияНаборЗаписей.Добавить();
		НовЗапись.Объект = ОбъектСсылка;
		НовЗапись.Свойство = СвойствоСсылка;
		НовЗапись.Значение = ЗначениеСвойства;
	КонецЦикла;	
	ДопСведенияНаборЗаписей.Записать();
КонецПроцедуры
Процедура ЗагрузкаДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства, ИмяПКО)
	ТипЗначенияСвойства = ЗначениеСвойства.ТипЗначения;
	
	Если Найти(ТипЗначенияСвойства, "Номенклатура")>0 Тогда
		ИмяПКО = "Справочник_Номенклатура_Получение";
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьЕдиницыИзмеренияПоУмолчанию(Товары)
	ЕдиницаИзмеренияПоУмолчанию = Неопределено;
	Для каждого Строка Из Товары Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Если ЕдиницаИзмеренияПоУмолчанию = Неопределено Тогда
				ЕдиницаИзмеренияПоУмолчанию = Справочники.БазовыеЕдиницыИзмерения.НайтиПоКоду("796 ");
			КонецЕсли;
			Строка.ЕдиницаИзмерения = ЕдиницаИзмеренияПоУмолчанию;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьМагазинПоУмолчанию(ПолученныеДанные)
	Если ПолученныеДанные.Магазин.Пустая() Тогда
		ПолученныеДанные.Магазин = Справочники.Магазины.ПолучитьМагазинПоУмолчанию();
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений = Неопределено)
	Для Каждого СвойствоОбъекта Из КонвертацияСвойств Цикл
		СвойствоИБ = СвойствоОбъекта.СвойствоКонфигурации;
		Если СокрЛП(СвойствоИБ) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивИсключений <> Неопределено И МассивИсключений.Найти(СвойствоИБ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеИБ[СвойствоИБ] = ПолученныеДанные[СвойствоИБ];
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСкладПоступления(ПолученныеДанные)
	Если НЕ ПолученныеДанные.Магазин.Пустая() Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.Магазин, "СкладУправляющейСистемы, СкладПоступления"); 
		Если СтруктураРеквизитов.СкладУправляющейСистемы = Истина Тогда
			ПолученныеДанные.Склад = Справочники.Склады.ПустаяСсылка();
		ИначеЕсли ПолученныеДанные.Склад.Пустая() Тогда
			ПолученныеДанные.Склад = СтруктураРеквизитов.СкладПоступления;
		Иначе
			РеквизитМагазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.Склад, "Магазин");
			Если РеквизитМагазин <> Неопределено
				И ЗначениеЗаполнено(РеквизитМагазин)
				И РеквизитМагазин <> ПолученныеДанные.Магазин Тогда
				ПолученныеДанные.Склад = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьСкладПродажи(ПолученныеДанные)
	Если НЕ ПолученныеДанные.Магазин.Пустая() Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.Магазин, "СкладУправляющейСистемы, СкладПродажи"); 
		Если СтруктураРеквизитов.СкладУправляющейСистемы = Истина Тогда
			ПолученныеДанные.Склад = Справочники.Склады.ПустаяСсылка();
		ИначеЕсли ПолученныеДанные.Склад.Пустая() Тогда
			ПолученныеДанные.Склад = СтруктураРеквизитов.СкладПродажи;
		Иначе
			РеквизитМагазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.Склад, "Магазин");
			Если РеквизитМагазин <> Неопределено
				И ЗначениеЗаполнено(РеквизитМагазин)
				И РеквизитМагазин <> ПолученныеДанные.Магазин Тогда
				ПолученныеДанные.Склад = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьСтруктуруДанныхСтроки(СоответствиеРеквизитовТЧ, СтрокаXDTO, СтруктураДанныхСтроки)
	Для Каждого ЭлементСоответствия Из СоответствиеРеквизитовТЧ Цикл
		ЗначениеРеквизитаТЧ = СтрокаXDTO[ЭлементСоответствия.Значение];
		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизитаТЧ) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанныхСтроки.Вставить(ЭлементСоответствия.Ключ,ЗначениеРеквизитаТЧ); 
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(ТабличнаяЧастьОбъектаПослеОбработки, ТабличнаяЧастьОбъектаДоОбработки, КлючевыеПоля = "", КолонкиДляВключения = "", КолонкиДляИсключения = "")
	ОбменДаннымиXDTOСервер.ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ТабличнаяЧастьОбъектаПослеОбработки, 
		ТабличнаяЧастьОбъектаДоОбработки,
		КлючевыеПоля, 
		КолонкиДляВключения, 
		КолонкиДляИсключения);
КонецПроцедуры
Функция ИмяПКОДляДокументаОснованияСФВыданного(ДокументОснование)
	ТипОснования = ТипЗнч(ДокументОснование);
	Если ТипОснования = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		ИмяПКО = "Документ_ОтчетКомитенту_Отправка";
	Иначе
		ИмяПКО = "ПередачаМеждуОрганизациями_РТУ_Отправка";
	КонецЕсли;
	Возврат ИмяПКО;
КонецФункции
Функция ИмяПКОДляДокументаОснованияСФПолученного(ДокументОснование)
	ТипСсылки = ТипЗнч(ДокументОснование);
	ИмяПКО = "";
	Если ТипСсылки = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ИмяПКО = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	Иначе
		ИмяПКО = "ПередачаМеждуОрганизациями_РТУ_Отправка";
	КонецЕсли;
	Возврат ИмяПКО;
КонецФункции
Функция КассаПоУмолчанию(Организация)
	Перем КассаПоУмолчанию;
	КассаПоУмолчанию = Справочники.Кассы.ПустаяСсылка();
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Кассы.Ссылка КАК Касса
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	Кассы.Владелец = &Организация
	|	И НЕ Кассы.ПометкаУдаления
	|	И НЕ Кассы.КассаУправляющейСистемы
	|";
	Запрос.УстановитьПараметр("Организация", Организация);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 1.00 Тогда
			Выборка.Следующий();
			КассаПоУмолчанию = Выборка.Касса;
		КонецЕсли;
	КонецЕсли;
	Возврат КассаПоУмолчанию;
КонецФункции
Процедура КурсКратность(ДанныеXDTO)
	ДанныеXDTO.Вставить("КурсВзаиморасчетов", 1);
	ДанныеXDTO.Вставить("КратностьВзаиморасчетов", 1);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
КонецПроцедуры
Процедура НайтиСоздатьКонтрагентаПоОрганизацииРТ(ОрганизацияКонтрагента, СсылкаНаКонтрагента)
	// Проверим, есть ли в базе контрагент, созданный по организации, если нет, то создадим его и выгрузим
	СсылкаНаКонтрагента = Справочники.Контрагенты.ПолучитьСсылку(ОрганизацияКонтрагента.УникальныйИдентификатор());
	Если НЕ ОбщегоНазначения.СсылкаСуществует(СсылкаНаКонтрагента) Тогда
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйКонтрагент.ПометкаУдаления		= ОрганизацияКонтрагента.ПометкаУдаления;
		НовыйКонтрагент.ИНН					= ОрганизацияКонтрагента.ИНН;
		НовыйКонтрагент.КодПоОКПО			= ОрганизацияКонтрагента.КодПоОКПО;
		НовыйКонтрагент.КПП					= ОрганизацияКонтрагента.КПП;
		НовыйКонтрагент.НаименованиеПолное	= ОрганизацияКонтрагента.НаименованиеПолное;
		НовыйКонтрагент.ЮрФизЛицо			= ОрганизацияКонтрагента.ЮрФизЛицо;
		НовыйКонтрагент.Наименование		= ОрганизацияКонтрагента.Наименование;
		НовыйКонтрагент.УстановитьСсылкуНового(СсылкаНаКонтрагента);
		НовыйКонтрагент.ОбменДанными.Загрузка = Истина;
		НовыйКонтрагент.Записать();
	КонецЕсли;
КонецПроцедуры
Функция НайтиТерминалПоЭквайреруИОрганизации(Организация, Эквайрер)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	запрос.УстановитьПараметр("Эквайрер", Эквайрер);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭквайринговыеТерминалы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	               |ГДЕ
	               |	ЭквайринговыеТерминалы.Эквайрер = &Эквайрер
	               |	И ЭквайринговыеТерминалы.Организация = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 1 Тогда
		//Неоднозначное представление
		Возврат Неопределено;
	Иначе
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
КонецФункции
Процедура ОбработатьЗагруженныеДопРеквизитыИСведения(КомпонентыОбмена)
	ДопРеквизитыИСведения = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения;
	Если ДопРеквизитыИСведения = Неопределено ИЛИ ДопРеквизитыИСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СоответствиеТипОбъектаИНабор = Новый Соответствие;
	ИменаПредопределенных = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьИменаПредопределенных();
	Для Каждого СтрокаДопРеквизиты ИЗ ДопРеквизитыИСведения Цикл
		// Получение набора доп реквизитов.
		НаборДопРеквизитов = СоответствиеТипОбъектаИНабор.Получить(СтрокаДопРеквизиты.ТипОбъекта);
		Если НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка() Тогда
			//На прошлых итерациях не удалось найти набор доп реквизитов.
			Продолжить;
		ИначеЕсли НаборДопРеквизитов = Неопределено Тогда
			// Поиск набора еще не выполнялся.
			//1 этап - прямой поиск.
			ИмяПредопределенногоЭлемента = СтрЗаменить(СтрокаДопРеквизиты.ТипОбъекта, ".", "_");
			Если ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено Тогда
				НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоЭлемента];
				Если НаборДопРеквизитов.ЭтоГруппа Тогда
					НаборДопРеквизитов = Неопределено;
				КонецЕсли;
			КонецЕсли;
			//2 этап - поиск общего элемента.
			Если НаборДопРеквизитов = Неопределено Тогда
				ИмяПредопределенногоЭлемента = ИмяПредопределенногоЭлемента + "_Общие";
				Если ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено Тогда
					НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоЭлемента];
					Если НаборДопРеквизитов.ЭтоГруппа Тогда
						НаборДопРеквизитов = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			//3 этап - поиск по наименованию.
			Если НаборДопРеквизитов = Неопределено Тогда
				ИмяТипаОбъекта = Прав(СтрокаДопРеквизиты.ТипОбъекта, СтрДлина(СтрокаДопРеквизиты.ТипОбъекта) - Найти(СтрокаДопРеквизиты.ТипОбъекта, "."));
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
				|ИЗ Справочник.НаборыДополнительныхРеквизитовИСведений
				|ГДЕ ЭтоГруппа = Ложь И Наименование ПОДОБНО &ИмяПоиск";
				Запрос.УстановитьПараметр("ИмяПоиск", "%"+ИмяТипаОбъекта+"%");
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НаборДопРеквизитов = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если НаборДопРеквизитов = Неопределено Тогда
				СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка());
				Продолжить;
			Иначе
				СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, НаборДопРеквизитов);
			КонецЕсли;
		КонецЕсли; 
		// Преобразование свойства из XDTO в ссылку.
		СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
							СтрокаДопРеквизиты.Свойство, 
							ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ДополнительныеРеквизиты"),
							"ПолучитьСсылку").Ссылка;
		Если НЕ ЗначениеЗаполнено(СвойствоСсылка) Тогда
			//Возможно на этапе анализа данных, когда данные еще не загружены в ИБ.					
			Продолжить;
		КонецЕсли;
		// Проверка наличия в наборе доп реквизита или доп сведения.
		ИмяТабЧасти = ?(СтрокаДопРеквизиты.ЭтоДопСведение, "ДополнительныеСведения", "ДополнительныеРеквизиты");
		Если НаборДопРеквизитов[ИмяТабЧасти].Найти(СвойствоСсылка, "Свойство") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(НаборДопРеквизитов) = Тип("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений") Тогда
			// Набор еще не менялся. Получение объекта и размещение его в соответствии.
			НаборДопРеквизитовОбъект = НаборДопРеквизитов.ПолучитьОбъект();
			СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, НаборДопРеквизитовОбъект); 
		Иначе
			НаборДопРеквизитовОбъект = НаборДопРеквизитов;
		КонецЕсли;
		НаборДопРеквизитовОбъект.ОбменДанными.Загрузка = Истина;
		СтрокаТЧ = НаборДопРеквизитовОбъект[ИмяТабЧасти].Добавить();
		СтрокаТЧ.Свойство = СвойствоСсылка;	
	КонецЦикла;
	// Запись измененных наборов.
	Для Каждого ЭлементСоответствияНабора ИЗ СоответствиеТипОбъектаИНабор Цикл
		Если ТипЗнч(ЭлементСоответствияНабора.Значение) = Тип("СправочникОбъект.НаборыДополнительныхРеквизитовИСведений") Тогда
			НаборДопРеквизитовОбъект = ЭлементСоответствияНабора.Значение;
			НаборДопРеквизитовОбъект.КоличествоРеквизитов = Формат(НаборДопРеквизитовОбъект.ДополнительныеРеквизиты.НайтиСтроки(
				Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
			
			НаборДопРеквизитовОбъект.КоличествоСведений   = Формат(НаборДопРеквизитовОбъект.ДополнительныеСведения.НайтиСтроки(
				Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
			НаборДопРеквизитовОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Функция ОбработатьХарактеристикиТоваров(Товары)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	*
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|ГДЕ
	|	НЕ ВТ_Товары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|");
	Запрос.УстановитьПараметр("Товары", Товары);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Товары;
	КонецЕсли;
	
	ТаблицаТовары = Товары.СкопироватьКолонки();
	ТаблицаТовары.Колонки.Удалить("Характеристика");
	ТаблицаТовары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("Структура"));
	Для каждого Строка Из Товары Цикл
		СтрокаХарактеристика 	= Строка.Характеристика;
		СтрокаНоменклатура 		= Строка.Номенклатура;
		Если  ЗначениеЗаполнено(СтрокаХарактеристика) Тогда
			Характеристика = Новый Структура;
			Характеристика.Вставить("Ссылка", СтрокаХарактеристика.Ссылка);
			Характеристика.Вставить("Наименование", СтрокаХарактеристика.Наименование);
			Характеристика.Вставить("Владелец", СтрокаНоменклатура);
		Иначе
			Характеристика = Неопределено;
		КонецЕсли;
		СтрокаТоваров = ТаблицаТовары.Добавить();
		СтрокаТоваров.Характеристика = Характеристика;
		ЗаполнитьЗначенияСвойств(СтрокаТоваров, Строка,,"Характеристика");
	КонецЦикла;
	Возврат ТаблицаТовары;
КонецФункции
Процедура ОтложеннаяОбработка_Документ_ВозвратПоставщику(Объект, ОбъектМодифицирован)
	ЗаполнитьМагазинПоУмолчанию(Объект);
	ЗаполнитьСкладПоступления(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_Оприходование(Объект, ОбъектМодифицирован)
	ЗаполнитьМагазинПоУмолчанию(Объект);
	ЗаполнитьСкладПоступления(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_ОтчетКомитенту(Объект)
	ЗаполнитьМагазинПоУмолчанию(Объект);
	
	Если Объект.ЭтапыОплат.Количество() > 0 И Объект.Товары.Итог("СуммаПродажи") <> Объект.ЭтапыОплат.Итог("СуммаПлатежа") Тогда
		Объект.ЭтапыОплат.Очистить();
	КонецЕсли;
	Если Объект.ЭтапыОплат.Количество() = 0 Тогда
		СтрокаОплаты = Объект.ЭтапыОплат.Добавить();
		СтрокаОплаты.ДатаПлатежа    = ?(ЗначениеЗаполнено(Объект.ДатаОплаты), Объект.ДатаОплаты, Объект.Дата);
		СтрокаОплаты.ПроцентПлатежа = 100;
		СтрокаОплаты.СуммаПлатежа   = Объект.Товары.Итог("СуммаПродажи");
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_Перемещение(Объект, ОбъектМодифицирован)
	Если НЕ Объект.МагазинОтправитель.Пустая() Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.МагазинОтправитель, "СкладУправляющейСистемы, СкладПродажи"); 
		Если СтруктураРеквизитов.СкладУправляющейСистемы = Истина Тогда
			Объект.СкладОтправитель = Справочники.Склады.ПустаяСсылка();
		ИначеЕсли Объект.СкладОтправитель.Пустая() Тогда
			Объект.СкладОтправитель = СтруктураРеквизитов.СкладПродажи;
		Иначе
			РеквизитМагазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СкладОтправитель, "Магазин");
			Если РеквизитМагазин <> Неопределено
				И ЗначениеЗаполнено(РеквизитМагазин)
				И РеквизитМагазин <> Объект.МагазинОтправитель Тогда
				Объект.СкладОтправитель = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	Если НЕ Объект.МагазинПолучатель.Пустая() Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.МагазинПолучатель, "СкладУправляющейСистемы, СкладПоступления"); 
		Если СтруктураРеквизитов.СкладУправляющейСистемы = Истина Тогда
			Объект.СкладПолучатель = Справочники.Склады.ПустаяСсылка();
		ИначеЕсли Объект.СкладПолучатель.Пустая() Тогда
			Объект.СкладПолучатель = СтруктураРеквизитов.СкладПоступления;
		Иначе
			РеквизитМагазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СкладПолучатель, "Магазин");
			Если РеквизитМагазин <> Неопределено
				И ЗначениеЗаполнено(РеквизитМагазин)
				И РеквизитМагазин <> Объект.МагазинПолучатель Тогда
				Объект.СкладПолучатель = Справочники.Склады.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_ПКО(Объект)
	Если НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
		Объект.Касса = КассаПоУмолчанию(Объект.Организация);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_ПТУ(Объект, ОбъектМодифицирован)
	ЗаполнитьМагазинПоУмолчанию(Объект);
	ЗаполнитьСкладПоступления(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_РКО(Объект)
	Если НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
		Объект.Касса = КассаПоУмолчанию(Объект.Организация);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_СБДС(Объект, ОбъектМодифицирован)
	ЗаполнитьМагазинПоУмолчанию(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_Сборка(Объект, ОбъектМодифицирован)
	ЗаполнитьМагазинПоУмолчанию(Объект);
	ЗаполнитьСкладПоступления(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_Документ_Списание(Объект, ОбъектМодифицирован)
	ЗаполнитьМагазинПоУмолчанию(Объект);
	ЗаполнитьСкладПродажи(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_Справочник_Номенклатура(Объект, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		//вид номенклатуры подбирается по типу и по признаку алкогольной продукции
		ВидНоменклатуры = Неопределено;
		Если Не ЗначениеЗаполнено(Объект.ТипНоменклатуры) Тогда
			Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		КонецЕсли;
		ПараметрыПоиска = Новый Структура("ТипНоменклатуры, АлкогольнаяПродукция");
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Объект);
		НайденныеСтроки = КомпонентыОбмена.ПараметрыКонвертации.ВидыНоменклатурыПоУмолчанию.НайтиСтроки(ПараметрыПоиска);
		НайденнаяСтрока = ?(НайденныеСтроки.Количество() = 0, Неопределено, НайденныеСтроки[0]);
		
		Если НайденнаяСтрока = Неопределено Тогда
	
			НеобходимоСоздатьЭлемент = Ложь;
	
			Если ПараметрыПоиска.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
				НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru = 'Товар'", Метаданные.ОсновнойЯзык.КодЯзыка);
						ИначеЕсли ПараметрыПоиска.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru = 'Услуга'", Метаданные.ОсновнойЯзык.КодЯзыка);
			КонецЕсли;
			
			Если ПараметрыПоиска.АлкогольнаяПродукция Тогда
				НаименованиеЭлементаДляОбменаПоУмолчанию = НаименованиеЭлементаДляОбменаПоУмолчанию + "; Алк";
			КонецЕсли;
			
			Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
			|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры,
			|	ВЫБОР
			|		КОГДА ВидыНоменклатуры.Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
			|ИЗ
			|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
			|ГДЕ
			|	НЕ ВидыНоменклатуры.ПометкаУдаления
			|	И ВидыНоменклатуры.ТипНоменклатуры = &ТипНоменклатуры
			|	И ВидыНоменклатуры.АлкогольнаяПродукция = &АлкогольнаяПродукция
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
			Запрос.УстановитьПараметр("ТипНоменклатуры", ПараметрыПоиска.ТипНоменклатуры);
			Запрос.УстановитьПараметр("АлкогольнаяПродукция", ПараметрыПоиска.АлкогольнаяПродукция);
			Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Если Выборка.Количество() = 1 ИЛИ Выборка.ЭтоЭлементПоУмолчаниюДляОбмена Тогда
					ВидНоменклатуры = Выборка.ВидНоменклатуры;
				Иначе
					НеобходимоСоздатьЭлемент = Истина;
				КонецЕсли;
			Иначе
				НеобходимоСоздатьЭлемент = Истина;
			КонецЕсли;
			
			Если НеобходимоСоздатьЭлемент Тогда
				
				ВидНоменклатурыОбъект = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(ВидНоменклатурыОбъект, ПараметрыПоиска);
				ВидНоменклатурыОбъект.Наименование                            = НаименованиеЭлементаДляОбменаПоУмолчанию;
				ВидНоменклатурыОбъект.ИспользованиеХарактеристик              = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать;
				ВидНоменклатурыОбъект.ИспользоватьХарактеристики              = Ложь;
				ВидНоменклатурыОбъект.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать;
	
				Попытка
					ВидНоменклатурыОбъект.Записать();
					ВидНоменклатуры = ВидНоменклатурыОбъект.Ссылка;
				Исключение
					ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
				КонецПопытки
			КонецЕсли;
			
			НоваяСтрока = КомпонентыОбмена.ПараметрыКонвертации.ВидыНоменклатурыПоУмолчанию.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыПоиска);
			НоваяСтрока.ВидНоменклатуры = ВидНоменклатуры;
			
		Иначе
			ВидНоменклатуры = НайденнаяСтрока.ВидНоменклатуры;
		КонецЕсли;
		Объект.ВидНоменклатуры = ВидНоменклатуры;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Справочник_Организации(Объект)
	Если ЗначениеЗаполнено(Объект.СпособОценкиТоваровВРознице) Тогда
		Объект.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоСтоимостиПриобретения;
	КонецЕсли;
КонецПроцедуры
Процедура ОчиститьИспользованиеПКО(ИспользованиеПКО)
	Для Каждого Правило Из ИспользованиеПКО Цикл
		ИспользованиеПКО.Удалить(Правило.Ключ);
	КонецЦикла;
КонецПроцедуры
Функция ПолучитьДанныеИнвентаризации(Объект)
	СтруктураВозврата = Новый Структура("РезультатПоТабличнойЧасти");
	
	ТоварыДокумента = 
			
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка 				КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура 		КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика 		КАК Характеристика,
	|	ВложенныйЗапрос.ЕдиницаИзмерения 	КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Количество 			КАК Количество,
	|	ВложенныйЗапрос.Сумма 				КАК Сумма,
	|	ВложенныйЗапрос.КоличествоУчет 		КАК КоличествоУчет,
	|	ВложенныйЗапрос.Цена 				КАК Цена,
	|	ВложенныйЗапрос.СуммаУчет 			КАК СуммаУчет,
	|	""СобственныеТовары"" 				КАК ТипЗапасов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Документ.Ссылка.ДокументОснование КАК Ссылка,
	|		Документ.Номенклатура КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА Документ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА Документ.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ Документ.Упаковка.ЕдиницаИзмерения
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		Документ.Характеристика КАК Характеристика,
	|		ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА Документ.КоличествоУпаковок = 0
	|				ТОГДА Документ.Цена
	|			ИНАЧЕ Документ.Сумма / Документ.КоличествоУпаковок
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|		Документ.КоличествоФакт КАК Количество,
	|		Документ.Количество КАК КоличествоУчет,
	|		Документ.СуммаФакт КАК Сумма,
	|		Документ.Сумма КАК СуммаУчет
	|	ИЗ
	|		Документ.ПересчетТоваров.Товары КАК Документ
	|	ГДЕ
	|		Документ.Ссылка.ДокументОснование В(&ДокументОснование)
	|		И Документ.Ссылка.Проведен
	|		И Документ.Ссылка.ДокументОснование.Проведен
	|		И Документ.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) КАК ВложенныйЗапрос
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТоварыДокумента;		
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Товары = Результат.Выгрузить();
		СтруктураВозврата.РезультатПоТабличнойЧасти = ОбработатьХарактеристикиТоваров(Товары);
		Возврат СтруктураВозврата;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
Функция ПолучитьИдентификаторТипЦены(СтрНаименование)
	// Вычисляет значение идентификатора из строки соответствии с правилами
	// именования идентификаторов
	//
	// Возвращаемое значение:
	// Строка
	// Идентификатор, соответствующий правилам именования идентификаторов
	//
	Разделители	=  " .,+,-,/,*,?,=,<,>,(,)%!@#$%&*""№:;{}[]?()\|/`~'^_";
	
	Идентификатор = "";
	БылСпецСимвол = Ложь;
	
	Для НомСимвола = 1 По СтрДлина(СтрНаименование) Цикл
		
		Символ = Сред(СтрНаименование, НомСимвола, 1);
		
		Если СтрНайти(Разделители, Символ) <> 0 Тогда
			БылСпецСимвол = Истина;
		ИначеЕсли БылСпецСимвол Тогда
			БылСпецСимвол = Ложь;
			Идентификатор = Идентификатор + ВРег(Символ);
		Иначе
			Идентификатор = Идентификатор + Символ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Идентификатор;
КонецФункции
Процедура ПолучитьКассуККМПоОрганизацииИМагазину(ПолученныеДанные)
	Магазин = ПолученныеДанные.Магазин;
		
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.КассаККМ, "Владелец, Магазин");
	
	Если РеквизитыКассыККМ.Владелец <> ПолученныеДанные.Организация
		ИЛИ РеквизитыКассыККМ.Магазин <> Магазин Тогда
		
		КассаККМ = Неопределено;
		Организация = ПолученныеДанные.Организация;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Организация", Организация);
		ПараметрыОтбора.Вставить("Магазин", Магазин);
	
		НеобходимоСоздатьЭлемент = Ложь;
	
		Если ОбщегоНазначения.СсылкаСуществует(Организация) Тогда
			НаименованиеЭлементаДляОбменаПоУмолчанию = СокрЛП(Организация) + " (" + СокрЛП(Магазин) + ")";
		Иначе
			НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Основная касса ККМ'");
		КонецЕсли;
		
		КассаККМ = ЗначениеНастроекПовтИсп.ПолучитьКассуККМПоУмолчанию(Организация, Магазин);
		
		Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
	
		// Создание элемента для обмена с заданными параметрами
		Если НеобходимоСоздатьЭлемент Тогда
			КассаОбъект = Справочники.КассыККМ.СоздатьЭлемент();
			КассаОбъект.Наименование			= НаименованиеЭлементаДляОбменаПоУмолчанию;
			КассаОбъект.Владелец				= Организация;
			КассаОбъект.Магазин					= Магазин;
			КассаОбъект.ТипКассы                = Перечисления.ТипыКассККМ.АвтономнаяККМ;
	
			Попытка
				КассаОбъект.Записать();
				КассаККМ = КассаОбъект.Ссылка;
			Исключение
				КассаККМ = Справочники.КассыККМ.ПустаяСсылка();
			КонецПопытки
		КонецЕсли;
		
		ПолученныеДанные.КассаККМ = КассаККМ;
	КонецЕсли;
КонецПроцедуры
Функция СвойствоФорматаОбмена(КомпонентыОбмена, ИмяСвойства)
	Результат = Ложь;
	
	ПространствоИмен = КомпонентыОбмена.XMLСхема;
	
	Если ФабрикаXDTO.Тип(Новый ТипДанныхXML(ИмяСвойства, ПространствоИмен)) <> Неопределено Тогда
		Результат = Истина;
	Иначе
		МассивСтрок = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ИмяСвойства);
		
		Если МассивСтрок.Количество() > 1 Тогда
			ИмяОбъекта = МассивСтрок[0] + "." + МассивСтрок[1];
			ТипФабрики = ФабрикаXDTO.Тип(Новый ТипДанныхXML(ИмяОбъекта, ПространствоИмен));
			Если ТипФабрики <> Неопределено Тогда
				Для Сч = 2 По МассивСтрок.Количество() - 1 Цикл
					ИмяТекОбъекта = МассивСтрок[Сч];
					Если ТипЗнч(ТипФабрики) = Тип("СвойствоXDTO") Тогда
						ТипФабрики = ТипФабрики.Тип.Свойства.Получить(ИмяТекОбъекта);
					Иначе
						ТипФабрики = ТипФабрики.Свойства.Получить(ИмяТекОбъекта);
					КонецЕсли;
					Если ТипФабрики = Неопределено Тогда
						Возврат Ложь;
					КонецЕсли
				КонецЦикла;
				Результат = ТипФабрики <> Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Процедура УстановитьПравилоДляДокумента(Ссылка, Правило, Тип, ДополнительноеУсловие = "")
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|   Товары.НомерСтроки
	|ИЗ
	|   Документ."+Тип+".Товары КАК Товары
	|       ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|       ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|   Товары.Ссылка = &Ссылка
	|   И СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)" + ДополнительноеУсловие;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Если Тип = "РеализацияТоваров" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст," <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)"," = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Правило = Ложь;
	КонецЕсли;
КонецПроцедуры
Функция ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO)
	// ДанныеXDTO содержат только 1 свойство, 
	// значит выполняется загрузка значения свойства, а не самого объекта. 
	Возврат ДанныеXDTO.Количество() = 1;
КонецФункции

#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ЗагруженныеДопРеквизитыИСведения");
	ПараметрыКонвертации.Вставить("ТипЦенДляИзмененияЦен");
	ПараметрыКонвертации.Вставить("ВариантНастройки");
	ПараметрыКонвертации.Вставить("КонтрагентРозничныйПокупатель");
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ИнвентаризационнаяОпись_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ИнвентаризационнаяОпись_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОприходованиеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОприходованиеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПередачаТоваровМеждуОрганизациями_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПеремещениеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПересортицаТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПересортицаТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПересчетТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПересчетТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПриходныйКассовыйОрдер_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПриходныйКассовыйОрдер_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РасходныйКассовыйОрдер_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РасходныйКассовыйОрдер_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СписаниеТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетФактураПолученный_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СчетФактураПолученный_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Банки_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Банки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ВидыНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_КассыККМ_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_КассыККМ_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Упаковки_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Упаковки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РеализацияТоваровУслуг_Получение_ПриОбработке" Тогда 
		ПОД_Документ_РеализацияТоваровУслуг_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЧекККМ_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ЧекККМ_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ДополнительныеРеквизиты_Получение_ПриОбработке" Тогда 
		ПОД_ДополнительныеРеквизиты_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ЗначенияДопРеквизитов_Получение_ПриОбработке" Тогда 
		ПОД_ЗначенияДопРеквизитов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_БанковскиеСчета_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДоговорыКонтрагентов_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_ДоговорыКонтрагентов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФизическиеЛицаГруппа_ПриОбработке" Тогда 
		ПОД_Справочник_ФизическиеЛицаГруппа_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризационнаяОпись_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнвентаризационнаяОпись_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОплатаОтПокупателяПлатежнойКартой_Отправк_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОплатаОтПокупателяПлатежнойКартой_Отправк_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОРП_Отправка_СтарыеВерсииФормата_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОРП_Отправка_СтарыеВерсииФормата_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитентуОСписании_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетКомитентуОСписании_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересортицаВОприходование_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересортицаВОприходование_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересортицаВСписание_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересортицаВСписание_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересортицаВСписание_Отправка12_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересортицаВСписание_Отправка12_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПересчетТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПересчетТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПрименениеЦенНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПрименениеЦенНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СборкаТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СборкаТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПередачаМеждуОрганизациями_ПТУ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ПередачаМеждуОрганизациями_ПТУ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПередачаМеждуОрганизациями_РТУ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ПередачаМеждуОрганизациями_РТУ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПКО_АТТ_ОтчетОРозничныхПродажах_ПриОтправкеДанных" Тогда 
		ПКО_ПКО_АТТ_ОтчетОРозничныхПродажах_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчетаКонтрагентов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчетаОрганизаций_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыПодарочныхСертификатов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыПодарочныхСертификатов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыЦен_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыЦен_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ПравилаЦенообразованияВТипыЦен_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ПравилаЦенообразованияВТипыЦен_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка12_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка12_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВнесениеДСВКассуККМ_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВнесениеДСВКассуККМ_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВыемкаДСИзКассыККМ_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВыемкаДСИзКассыККМ_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитенту_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетКомитенту_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитенту_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетКомитенту_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеЗапасов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СписаниеЗапасов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеЗапасов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СписаниеЗапасов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМ_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЧекККМ_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМ_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЧекККМ_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыАлкогольнойПродукции_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ВидыАлкогольнойПродукции_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НомерГТД_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_НомерГТД_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ТипыЦен_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ТипыЦен_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ШтрихкодыНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЭквайринговыеТерминалы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ЭквайринговыеТерминалы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатураГруппа_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_НоменклатураГруппа_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Упаковки_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Упаковки_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Упаковки_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Упаковки_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ХарактеристикиНоменклатуры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ХарактеристикиНоменклатуры_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_ВозвратПоставщику" Тогда 
		ОтложеннаяОбработка_Документ_ВозвратПоставщику(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_Оприходование" Тогда 
		ОтложеннаяОбработка_Документ_Оприходование(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_ОтчетКомитенту" Тогда 
		ОтложеннаяОбработка_Документ_ОтчетКомитенту(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_Перемещение" Тогда 
		ОтложеннаяОбработка_Документ_Перемещение(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_ПКО" Тогда 
		ОтложеннаяОбработка_Документ_ПКО(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_ПТУ" Тогда 
		ОтложеннаяОбработка_Документ_ПТУ(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_РКО" Тогда 
		ОтложеннаяОбработка_Документ_РКО(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_СБДС" Тогда 
		ОтложеннаяОбработка_Документ_СБДС(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_Сборка" Тогда 
		ОтложеннаяОбработка_Документ_Сборка(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Документ_Списание" Тогда 
		ОтложеннаяОбработка_Документ_Списание(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Справочник_Номенклатура" Тогда 
		ОтложеннаяОбработка_Справочник_Номенклатура(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Справочник_Организации" Тогда 
		ОтложеннаяОбработка_Справочник_Организации(
			Параметры.Объект);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
