
#Область ПрограммныйИнтерфейс

// Функция формирует запрос дисконтному серверу
// о получении сведений о накоплениях по карте,
// используя метод ПолучитьСуммуНакопления,
// Входящие параметры:
//		МассивКарт - 			массив, содержащий ссылки на дисконтные карты
//								используется только одна первая карта.
//		СтруктураПараметров - 	Структура, содержащая дополнительные параметры для запроса.
//		ЕстьОшибки - 			Булево, Признак того, что при обращении к дисконтному серверу возникли ошибки.
// Возвращаемое значение:
//		ДанныеНакоплений - 		Структура, содержащая Дату запроса
//								и значения накоплений в свойствах "Сумма" и "Количество".
Функция ДанныеНакопленийПоКарте(МассивКарт, СтруктураПараметров, ЕстьОшибки) Экспорт
	
	ДатаНачала = СтруктураПараметров.ДатаНачала;
	ДатаОкончания = СтруктураПараметров.ДатаОкончания;
	СегментОтграничения = СтруктураПараметров.СегментОтграничения;
	Регистратор = СтруктураПараметров.Регистратор;
	
	ДанныеНакоплений = Новый Структура;
	ДанныеНакоплений.Вставить("Дата", ДатаОкончания);
	ДанныеНакоплений.Вставить("СуммаНакопления", 0);
	ДанныеНакоплений.Вставить("КоличествоНакопления", 0);
	
	Если МассивКарт.Количество() = 0 Тогда
		Возврат ДанныеНакоплений;
	КонецЕсли;
	
	Попытка
		
		ДисконтныйПрокси = ПроксиДисконтногоСервера();
		
		ИдентификаторКарты = Строка(МассивКарт[0].УникальныйИдентификатор());
		ДатаНачалаЗапроса = ?(ЗначениеЗаполнено(ДатаНачала), ДатаНачала, Дата("00010101000000"));
		ДатаОкончанияЗапроса = ?(ЗначениеЗаполнено(ДатаОкончания), ДатаОкончания, ТекущаяДатаСеанса());
		Если ЗначениеЗаполнено(СегментОтграничения) Тогда
			ИдентификаторСегмента = Строка(СегментОтграничения.УникальныйИдентификатор());
		Иначе
			ИдентификаторСегмента = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(Регистратор) Тогда
			ИдентификаторИсключаемогоДокумента = Строка(Регистратор.УникальныйИдентификатор());
		Иначе
			ИдентификаторИсключаемогоДокумента = "";
		КонецЕсли;
		ЗапросДанныеНакоплений = ДисконтныйПрокси.ПолучитьСуммуНакопления(ИдентификаторКарты,
											ДатаНачалаЗапроса,
											ДатаОкончанияЗапроса,
											ИдентификаторСегмента,
											ИдентификаторИсключаемогоДокумента);
		Если ЗапросДанныеНакоплений <> Неопределено Тогда
			Для Каждого СтрокаТаблицыНакоплений Из ЗапросДанныеНакоплений.РезультатЗапроса Цикл
				ДанныеНакоплений.СуммаНакопления = СтрокаТаблицыНакоплений.СуммаНакопления;
				ДанныеНакоплений.КоличествоНакопления = СтрокаТаблицыНакоплений.КоличествоНакопления;
			КонецЦикла;
		КонецЕсли;
		
	Исключение
		ДанныеНакоплений.СуммаНакопления = 0;
		ДанныеНакоплений.КоличествоНакопления = 0;
		
		КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		СтрокаОшибки = НСтр("ru = 'Не удалось получить данные накоплений по карте по причине:'", КодЯзыка)
			+ Символы.ПС + ОписаниеОшибки();
		ИмяСобытия = НСтр("ru = 'Дисконтный сервер'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , СтрокаОшибки);
		ЕстьОшибки = Истина;
		Возврат ДанныеНакоплений;
	КонецПопытки;
	
	
	Возврат ДанныеНакоплений;
	
КонецФункции

// Функция формирует запрос дисконтному серверу
// о получении сведений о остатке бонусных баллов на карте,
// используя метод "ПолучитьОстатокБонусов",
// Входящие параметры:
//		ДисконтнаяКарта - 		массив, содержащий ссылки на дисконтные карты
//								используется только одна первая карта.
//		СтруктураПараметров - 	Структура, содержащая дополнительные параметры для запроса.
//		ЕстьОшибки - 			Булево, Признак того, что при обращении к дисконтному серверу возникли ошибки.
// Возвращаемое значение:
//		ДанныеНакоплений - 		Структура, содержащая накопления в свойстве "КоличествоБонусов".
Функция ОстатокБонусовПоКарте(ДисконтнаяКарта, СтруктураПараметров, ЕстьОшибки) Экспорт
	
	ДатаЗапроса = СтруктураПараметров.ДатаЗапроса;
	
	ДанныеНакоплений = Новый Структура;
	ДанныеНакоплений.Вставить("ДатаОперации", ДатаЗапроса);
	ДанныеНакоплений.Вставить("КоличествоБаллов", 0);
	
	Если НЕ ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		Возврат ДанныеНакоплений;
	КонецЕсли;
	
	Попытка
		
		ДисконтныйПрокси = ПроксиДисконтногоСервера();
		
		ИдентификаторКарты = Строка(ДисконтнаяКарта.УникальныйИдентификатор());
		ЗапросДанныеНакоплений = ДисконтныйПрокси.ПолучитьОстатокБонусов(ИдентификаторКарты, ДатаЗапроса);
		Если ЗапросДанныеНакоплений <> Неопределено Тогда
			Для Каждого СтрокаТаблицыНакоплений Из ЗапросДанныеНакоплений.РезультатЗапроса Цикл
				ДанныеНакоплений.ДатаОперации = СтрокаТаблицыНакоплений.ДатаОперации;
				ДанныеНакоплений.КоличествоБаллов = СтрокаТаблицыНакоплений.КоличествоБаллов;
			КонецЦикла;
		КонецЕсли;
		
	Исключение
		ДанныеНакоплений.ДатаОперации = ДатаЗапроса;
		ДанныеНакоплений.КоличествоБаллов = 0;
		
		КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		СтрокаОшибки = НСтр("ru = 'Не удалось получить остаток бонусов по карте по причине:'", КодЯзыка)
			+ Символы.ПС + ОписаниеОшибки();
		ИмяСобытия = НСтр("ru = 'Дисконтный сервер'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , СтрокаОшибки);
		ЕстьОшибки = Истина;
		Возврат ДанныеНакоплений;
	КонецПопытки;
	
	Возврат ДанныеНакоплений;
	
КонецФункции

// Функция формирует запрос дисконтному серверу
// о получении сведений о развернутом по периодам остатке бонусных баллов на карте,
// используя метод "ПолучитьОстатокБонусовРасширенный",
// Входящие параметры:
//		ДисконтнаяКарта - 		массив, содержащий ссылки на дисконтные карты
//								используется только одна первая карта.
//		СтруктураПараметров - 	Структура, содержащая дополнительные параметры для запроса.
//		ЕстьОшибки - 			Булево, Признак того, что при обращении к дисконтному серверу возникли ошибки.
// Возвращаемое значение:
//		ДанныеНакоплений - 		Структура, содержащая накопления в свойстве "КоличествоБонусов".
Функция ОстатокБонусовПоКартеРасширенный(ДисконтнаяКарта, СтруктураПараметров, ЕстьОшибки) Экспорт
	
	ДатаЗапроса = СтруктураПараметров.ДатаЗапроса;
	
	ОстаткиБонусныхБаллов = Новый ТаблицаЗначений;
	ОстаткиБонусныхБаллов.Колонки.Добавить("Период");
	ОстаткиБонусныхБаллов.Колонки.Добавить("Сумма");
	ОстаткиБонусныхБаллов.Колонки.Добавить("Изменение");
	ОстаткиБонусныхБаллов.Колонки.Добавить("ТекущийОстаток");
	
	Если НЕ ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		НоваяСтрока = ОстаткиБонусныхБаллов.Добавить();
		НоваяСтрока.Период = "Сейчас";
		НоваяСтрока.Сумма = 0;
		НоваяСтрока.Изменение = 0;
		НоваяСтрока.ТекущийОстаток = 0;
		
		Возврат ОстаткиБонусныхБаллов;
	КонецЕсли;
	
	Попытка
		
		ДисконтныйПрокси = ПроксиДисконтногоСервера();
		ИдентификаторКарты = Строка(ДисконтнаяКарта.УникальныйИдентификатор());
		ЗапросДанныеНакоплений = ДисконтныйПрокси.ПолучитьОстатокБонусовРасширенный(ИдентификаторКарты, ДатаЗапроса);
		Если ЗапросДанныеНакоплений <> Неопределено Тогда
			Для Каждого СтрокаТаблицыНакоплений Из ЗапросДанныеНакоплений.РезультатЗапроса Цикл
				НоваяСтрока = ОстаткиБонусныхБаллов.Добавить();
				НоваяСтрока.Период = СтрокаТаблицыНакоплений.ПредставлениеПериода;
				НоваяСтрока.Сумма = СтрокаТаблицыНакоплений.КоличествоБаллов;
				НоваяСтрока.Изменение = СтрокаТаблицыНакоплений.Изменение;
				НоваяСтрока.ТекущийОстаток = СтрокаТаблицыНакоплений.ТекущийОстаток;
			КонецЦикла;
		КонецЕсли;
		
	Исключение
		НоваяСтрока = ОстаткиБонусныхБаллов.Добавить();
		НоваяСтрока.Период = "Сейчас";
		НоваяСтрока.Сумма = 0;
		НоваяСтрока.Изменение = 0;
		НоваяСтрока.ТекущийОстаток = 0;
		
		КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		СтрокаОшибки = НСтр("ru = 'Не удалось получить остаток бонусов по карте по причине:'", КодЯзыка)
			+ Символы.ПС + ОписаниеОшибки();
		ИмяСобытия = НСтр("ru = 'Дисконтный сервер'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , СтрокаОшибки);
		ЕстьОшибки = Истина;
	КонецПопытки;
	
	Возврат ОстаткиБонусныхБаллов;
	
КонецФункции

// Функция формирует запрос дисконтному серверу
// о получении сведений о предыдущей покупке по карте,
// используя метод ПолучитьДанныеПоследнейПокупки,
// Входящие параметры:
//		МассивКарт - 			массив, содержащий ссылки на дисконтные карты
//								используется только одна первая карта.
//		СтруктураПараметров - 	Структура, содержащая дополнительные параметры для запроса.
//		ЕстьОшибки - 			Булево, Признак того, что при обращении к дисконтному серверу возникли ошибки.
// Возвращаемое значение:
//		ДанныеНакоплений - 		Структура, содержащая Дату последней покупки
//								и значения накоплений по последней покупке в свойствах "Сумма" и "Количество".
Функция ДанныеПредыдущейПокупки(МассивКарт, СтруктураПараметров, ЕстьОшибки) Экспорт
	
	ДатаРасчета = СтруктураПараметров.ДатаОкончания;
	СегментОтграничения = СтруктураПараметров.СегментОтграничения;
	Регистратор = СтруктураПараметров.Регистратор;
	
	ДанныеНакоплений = Новый Структура;
	ДанныеНакоплений.Вставить("Дата", Дата(1, 1, 1, 0, 0, 0));
	ДанныеНакоплений.Вставить("Сумма", 0);
	ДанныеНакоплений.Вставить("Количество", 0);
	
	Если МассивКарт.Количество() = 0 Тогда
		Возврат ДанныеНакоплений;
	КонецЕсли;
	
	Попытка
		
		ДисконтныйПрокси = ПроксиДисконтногоСервера();
		
		ИдентификаторКарты = Строка(МассивКарт[0].УникальныйИдентификатор());
		ДатаРасчетаЗапроса = ?(ЗначениеЗаполнено(ДатаРасчета), ДатаРасчета, ТекущаяДатаСеанса());
		Если ЗначениеЗаполнено(СегментОтграничения) Тогда
			ИдентификаторСегмента = Строка(СегментОтграничения.УникальныйИдентификатор());
		Иначе
			ИдентификаторСегмента = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(Регистратор) Тогда
			ИдентификаторИсключаемогоДокумента = Строка(Регистратор.УникальныйИдентификатор());
		Иначе
			ИдентификаторИсключаемогоДокумента = "";
		КонецЕсли;
		ЗапросДанныеНакоплений = ДисконтныйПрокси.ПолучитьДанныеПоследнейПокупки(ИдентификаторКарты,
											ДатаРасчетаЗапроса,
											ИдентификаторСегмента,
											ИдентификаторИсключаемогоДокумента);
		Если ЗапросДанныеНакоплений <> Неопределено Тогда
			Для Каждого СтрокаТаблицыНакоплений Из ЗапросДанныеНакоплений.РезультатЗапроса Цикл
				ДанныеНакоплений.Дата = СтрокаТаблицыНакоплений.ДатаПокупки;
				ДанныеНакоплений.Сумма = СтрокаТаблицыНакоплений.СуммаНакопления;
				ДанныеНакоплений.Количество = СтрокаТаблицыНакоплений.КоличествоНакопления;
			КонецЦикла;
		КонецЕсли;
		
	Исключение
		ДанныеНакоплений.Дата = Дата(1, 1, 1, 0, 0, 0);
		ДанныеНакоплений.Сумма = 0;
		ДанныеНакоплений.Количество = 0;
		
		КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		СтрокаОшибки = НСтр("ru = 'Не удалось получить данные о предыдущей покупке.'", КодЯзыка)
			+ Символы.ПС + НСтр("ru = 'Расчет скидки от предыдущей покупки не возможен по причине:'", КодЯзыка)
			+ Символы.ПС + ОписаниеОшибки();
		ИмяСобытия = НСтр("ru = 'Дисконтный сервер'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , СтрокаОшибки);
		ЕстьОшибки = Истина;
		Возврат ДанныеНакоплений;
	КонецПопытки;
	
	ЛокальныеДанные = СкидкиНаценкиСерверПереопределяемый.ДанныеПредыдущейПокупкиДляРасчетаСкидки(МассивКарт, ДатаРасчета, СегментОтграничения, Регистратор);
	
	Если ЛокальныеДанные.Дата > ДанныеНакоплений.Дата Тогда
		ДанныеНакоплений.Дата = ЛокальныеДанные.Дата;
		ДанныеНакоплений.Сумма = ЛокальныеДанные.Сумма;
		ДанныеНакоплений.Количество = ЛокальныеДанные.Количество;
	КонецЕсли;
	
	Возврат ДанныеНакоплений;
	
КонецФункции

// Функция создает WSПрокси дисконтного сервера
// на основании константы АдресДисконтногоСервера.
// Возвращаемое значение
//		Прокси - WSПрокси, клиентский прокси для вызова веб-сервиса дисконтного сервера.
Функция ПроксиДисконтногоСервера() Экспорт
	
	АдресСервера = Константы.АдресДисконтногоСервера.Получить();
	ПользовательСервера = Константы.ПользовательДисконтногоСервера.Получить();
	ПарольСервера = Константы.ПарольДисконтногоСервера.Получить();
	Если НЕ ЗначениеЗаполнено(ПользовательСервера) Тогда
		ПользовательСервера = Неопределено;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПарольСервера) Тогда
		ПарольСервера = Неопределено;
	КонецЕсли;
	ТаймаутСервера = Константы.ТаймаутПодключенияКДисконтномуСерверу.Получить();
	ТаймаутПроверки = Константы.ТаймаутПроверочногоПодключенияКДисконтномуСерверу.Получить();
	ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("HTTP");
	
	// Таймаут для определения отдельный.
	Определения = Новый WSОпределения(АдресСервера, ПользовательСервера, ПарольСервера, ИнтернетПрокси, ТаймаутПроверки);
	// Таймаут для прокси задан в константе.
	Прокси = Новый WSПрокси(Определения, "http://localhost/rt2discountservice", "ДисконтныйСервер", "ДисконтныйСерверSoap", ИнтернетПрокси, ТаймаутСервера);
	Если ЗначениеЗаполнено(ПользовательСервера) Тогда
		Прокси.Пользователь = ПользовательСервера;
		Если ЗначениеЗаполнено(ПарольСервера) Тогда
			Прокси.Пароль = ПарольСервера;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

// Функция подготавливает структуру параметров
// которая используется при получении данных о накоплениях по карте.
Функция СтруктураДопПараметровЗапросаОНакопленияхДисконтномуСерверу() Экспорт
	СтруктураДопПараметров = Новый Структура;
	СтруктураДопПараметров.Вставить("ДатаНачала", Дата(1, 1, 1, 0, 0, 0));
	СтруктураДопПараметров.Вставить("ДатаОкончания", ТекущаяДатаСеанса());
	СтруктураДопПараметров.Вставить("СегментОтграничения", Справочники.СегментыНоменклатуры.ПустаяСсылка());
	СтруктураДопПараметров.Вставить("Регистратор", Документы.ЧекККМ.ПустаяСсылка());
	Возврат СтруктураДопПараметров;
КонецФункции

// Функция подготавливает структуру параметров
// которая используется при получении данных о накопленных по карте бонусах.
Функция СтруктураДопПараметровЗапросаОБонусахДисконтномуСерверу() Экспорт
	СтруктураДопПараметров = Новый Структура;
	СтруктураДопПараметров.Вставить("ДатаЗапроса", Дата(1, 1, 1, 0, 0, 0));
	Возврат СтруктураДопПараметров;
КонецФункции

// Функция обновляет данные о продажах в дисконтном сервере
// для чего используется вызов метода "ОбновитьДанныеОПродажах".
Функция ОбновитьДанныеОПродажах(ДокументСсылка, ЕстьОшибки) Экспорт
	
	Результат = Ложь;
	Попытка
		СтрокаОшибки = НСтр("ru = 'Не удалось обновить данные о продажах дисконтного сервера по причине:'");
		ДисконтныйПрокси = ПроксиДисконтногоСервера();
		
		ФабрикаПрокси = ДисконтныйПрокси.ФабрикаXDTO;
		ТаблицаПродажТип = ФабрикаПрокси.Тип("http://localhost/rt2discountservice", "ТаблицаПродаж");
		
		ТаблицаПродаж = ФабрикаПрокси.Создать(ТаблицаПродажТип);
		
		ИдентификаторДокумента = Строка(ДокументСсылка.УникальныйИдентификатор());
		ТипДокумента = ДокументСсылка.Метаданные().Имя;
		//
		РеквизитыДокумента = Новый Структура;
		РеквизитыДокумента.Вставить("Дата");
		РеквизитыДокумента.Вставить("ДисконтнаяКарта");
		ЗначенияРеквизитовДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, РеквизитыДокумента);
		
		ДатаОперации = ЗначенияРеквизитовДокумента.Дата;
		Карта = ЗначенияРеквизитовДокумента.ДисконтнаяКарта;
		Если ЗначениеЗаполнено(Карта) Тогда
			ИдентификаторКарты = Строка(Карта.УникальныйИдентификатор());
			СтрокаТаблицыПродажТип = ФабрикаПрокси.Тип("http://localhost/rt2discountservice", "СтрокаТаблицыПродаж");
			
			ВыборкаТовары = ТаблицаТоваровДляОбновленияПродаж(ДокументСсылка, ТипДокумента);
			Пока ВыборкаТовары.Следующий() Цикл
				
				СтрокаТаблицыПродаж = ФабрикаПрокси.Создать(СтрокаТаблицыПродажТип);
				ИдентификаторНоменклатуры = Строка(ВыборкаТовары.Номенклатура.УникальныйИдентификатор());
				ИдентификаторХарактеристики = Строка(ВыборкаТовары.Характеристика.УникальныйИдентификатор());
				
				СтрокаТаблицыПродаж.Период = ДатаОперации;
				СтрокаТаблицыПродаж.ИдентификаторКарты = ИдентификаторКарты;
				СтрокаТаблицыПродаж.ИдентификаторНоменклатуры = ИдентификаторНоменклатуры;
				СтрокаТаблицыПродаж.ИдентификаторХарактеристики = ИдентификаторХарактеристики;
				СтрокаТаблицыПродаж.Сумма = ВыборкаТовары.Сумма;
				СтрокаТаблицыПродаж.Количество = ВыборкаТовары.Количество;
				
				ТаблицаПродаж.СтрокиТаблицы.Добавить(СтрокаТаблицыПродаж);
				
			КонецЦикла;
			
			Результат = ДисконтныйПрокси.ОбновитьДанныеОПродажах(ТипДокумента, ИдентификаторДокумента, ТаблицаПродаж);
			Если Результат <> Истина Тогда
				КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
				СтрокаОшибки = НСтр("ru = 'Не удалось обновить данные о продажах дисконтного сервера по невыясненной причине.'", КодЯзыка);
				ИмяСобытия = НСтр("ru = 'Дисконтный сервер'", КодЯзыка);
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , СтрокаОшибки);
				ЕстьОшибки = Истина;
				Результат = Ложь;
			КонецЕсли;
			
			Если НЕ ЕстьОшибки Тогда
				СтрокаОшибки = НСтр("ru = 'Не удалось обновить данные о бонусных накоплениях дисконтного сервера по причине:'");
				
				ТаблицаБонусовТип = ФабрикаПрокси.Тип("http://localhost/rt2discountservice", "ТаблицаБонусов");
				ТаблицаБонусов = ФабрикаПрокси.Создать(ТаблицаБонусовТип);
				
				БонуснаяПрограмма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Карта, "БонуснаяПрограммаЛояльности");
				Если ЗначениеЗаполнено(БонуснаяПрограмма) Тогда
					ИдентификаторБонуснойПрограммы = Строка(БонуснаяПрограмма.УникальныйИдентификатор());
					СтрокаТаблицыБонусовТип = ФабрикаПрокси.Тип("http://localhost/rt2discountservice", "СтрокаТаблицыБонусов");
					
					ВыборкаБонусы = ТаблицаБонусовДляОбновленияПродаж(ДокументСсылка);
					Пока ВыборкаБонусы.Следующий() Цикл
						СтрокаТаблицыБонусов = ФабрикаПрокси.Создать(СтрокаТаблицыБонусовТип);
						
						СтрокаТаблицыБонусов.Период = ВыборкаБонусы.Период;
						СтрокаТаблицыБонусов.ВидДвижения = ?(ВыборкаБонусы.ВидДвижения = ВидДвиженияНакопления.Приход, 0, 1);
						СтрокаТаблицыБонусов.ИдентификаторБонуснойПрограммы = ИдентификаторБонуснойПрограммы;
						СтрокаТаблицыБонусов.ИдентификаторКарты = ИдентификаторКарты;
						СтрокаТаблицыБонусов.Начислено = ВыборкаБонусы.Начислено;
						СтрокаТаблицыБонусов.КСписанию = ВыборкаБонусы.КСписанию;
						
						ТаблицаБонусов.СтрокиТаблицы.Добавить(СтрокаТаблицыБонусов);
					КонецЦикла;
				КонецЕсли;
				
				Результат = ДисконтныйПрокси.ОбновитьДанныеОБонусах(ТипДокумента, ИдентификаторДокумента, ТаблицаБонусов);
				Если Результат <> Истина Тогда
					КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
					СтрокаОшибки = НСтр("ru = 'Не удалось обновить данные о бонусных накоплениях дисконтного сервера по невыясненной причине.'", КодЯзыка);
					ИмяСобытия = НСтр("ru = 'Дисконтный сервер'", КодЯзыка);
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , СтрокаОшибки);
					ЕстьОшибки = Истина;
					Результат = Ложь;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если (НЕ ЕстьОшибки) И (ТипДокумента = "ЧекККМ" ИЛИ ТипДокумента = "ЗаказПокупателя") Тогда
			ВыборкаКупонов = ВыборкаКупоновДокумента(ДокументСсылка);
			Если ВыборкаКупонов.Количество() > 0 Тогда
				
				СтрокаОшибки = НСтр("ru = 'Не удалось обновить данные о купонах в дисконтном сервере по причине:'");
				
				ТаблицаКупоновТип = ФабрикаПрокси.Тип("http://localhost/rt2discountservice", "ТаблицаКупонов");
				ТаблицаКупонов = ФабрикаПрокси.Создать(ТаблицаКупоновТип);
				
				СтрокаТаблицыКупоновТип = ФабрикаПрокси.Тип("http://localhost/rt2discountservice", "СтрокаТаблицыКупонов");
				Пока ВыборкаКупонов.Следующий() Цикл
					Если ЗначениеЗаполнено(ВыборкаКупонов.Скидка) Тогда
						ИдентификаторСкидки = Строка(ВыборкаКупонов.Скидка.УникальныйИдентификатор());
					Иначе
						ИдентификаторСкидки = "";
					КонецЕсли;
					Если ЗначениеЗаполнено(ВыборкаКупонов.Магазин) Тогда
						ИдентификаторМагазина = Строка(ВыборкаКупонов.Магазин.УникальныйИдентификатор());
					Иначе
						ИдентификаторМагазина = "";
					КонецЕсли;
					Если ВыборкаКупонов.Состояние = Перечисления.СостоянияОднократныхСкидок.Активна Тогда
						Состояние = "Активна";
					ИначеЕсли ВыборкаКупонов.Состояние = Перечисления.СостоянияОднократныхСкидок.Применена Тогда
						Состояние = "Применена";
					Иначе
						Состояние = "";
					КонецЕсли;
					
					СтрокаТаблицыКупонов = ФабрикаПрокси.Создать(СтрокаТаблицыКупоновТип);
					
					СтрокаТаблицыКупонов.Период = ВыборкаКупонов.Период;
					СтрокаТаблицыКупонов.ИдентификаторСкидки = ИдентификаторСкидки;
					СтрокаТаблицыКупонов.КодКупона = ВыборкаКупонов.КодКупона;
					СтрокаТаблицыКупонов.Состояние = Состояние;
					СтрокаТаблицыКупонов.ИдентификаторМагазина = ИдентификаторМагазина;
					СтрокаТаблицыКупонов.ПериодДействия = ВыборкаКупонов.ПериодДействия;
					
					ТаблицаКупонов.СтрокиТаблицы.Добавить(СтрокаТаблицыКупонов);
				КонецЦикла;
				
				Результат = ДисконтныйПрокси.ОбновитьДанныеОКупонах(ТипДокумента, ИдентификаторДокумента, ТаблицаКупонов);
				Если Результат <> Истина Тогда
					КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
					СтрокаОшибки = НСтр("ru = 'Не удалось обновить данные о купонах в дисконтном сервере по невыясненной причине.'", КодЯзыка);
					ИмяСобытия = НСтр("ru = 'Дисконтный сервер'", КодЯзыка);
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , СтрокаОшибки);
					ЕстьОшибки = Истина;
					Результат = Ложь;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	Исключение
		КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		СтрокаОшибки = СтрокаОшибки + Символы.ПС + ОписаниеОшибки();
		ИмяСобытия = НСтр("ru = 'Дисконтный сервер'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , СтрокаОшибки);
		ЕстьОшибки = Истина;
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Процедура записывает задание о необходимости обновления
// данных о продажах в дисконтном сервере
// задания записываются в регистр сведений "ПротоколПередачиДокументовДисконтномуСерверу".
Процедура ЗаписатьЗаданиеНаОбновлениеДисконтногоСервера(ДокументСсылка, ВыгрузкаУжеБыла = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи = РегистрыСведений.ПротоколПередачиДокументовДисконтномуСерверу.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДокументПродажи = ДокументСсылка;
	МенеджерЗаписи.ДисконтнаяКарта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДисконтнаяКарта");
	Если ВыгрузкаУжеБыла Тогда
		МенеджерЗаписи.ДатаПоследнейВыгрузки = ТекущаяДатаСеанса();
	Иначе
		МенеджерЗаписи.ДатаПоследнейВыгрузки = Дата(1, 1, 1, 0, 0, 0);
	КонецЕсли;
	МенеджерЗаписи.Записать(Истина);
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Процедура выбирает все задания для передачи дисконтному серверу 
// и выгружает их - каждое по-отдельности...
Процедура ВыгрузитьЗаданияНаОбновлениеПродаж() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеПродажВДисконтномСервере);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДисконтныйСервер") Тогда
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Очередь.ДокументПродажи КАК ДокументПродажи,
		|	Очередь.ДисконтнаяКарта КАК ДисконтнаяКарта
		|ИЗ
		|	РегистрСведений.ПротоколПередачиДокументовДисконтномуСерверу КАК Очередь
		|ГДЕ
		|	Очередь.ДатаПоследнейВыгрузки = &ДатаПоследнейВыгрузки
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПоследнейВыгрузки,
		|	ДокументПродажи";
		Запрос.УстановитьПараметр("ДатаПоследнейВыгрузки", Дата(1, 1, 1, 0, 0, 0));
		Выборка= Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЕстьОшибкиДисконтногоСервера = Ложь;
			Результат = ОбновитьДанныеОПродажах(Выборка.ДокументПродажи, ЕстьОшибкиДисконтногоСервера);
			Если Результат Тогда
				МенеджерЗаписи = РегистрыСведений.ПротоколПередачиДокументовДисконтномуСерверу.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
				МенеджерЗаписи.ДатаПоследнейВыгрузки = ТекущаяДатаСеанса();
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли;
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует запрос дисконтному серверу
// о получении сведений о действующих скидках для указанного одноразового кода или купона,
// используя метод "ПолучитьСкидкиПоКупону",
// Входящие параметры:
//		КодКупона - Строка
//		ДатаЗапроса - ДатаВремя - дата, на которую получается срез последних.
// Возвращаемое значение:
//		ТаблицаКупонов - 		таблица, содержащая сведения среза последних состояний однократных скидок по указанному купону.
Функция ТаблицаСкидокДляКупона(КодКупона, ДатаЗапроса) Экспорт
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("Период");
	ТаблицаРезультат.Колонки.Добавить("Скидка");
	ТаблицаРезультат.Колонки.Добавить("Состояние");
	ТаблицаРезультат.Колонки.Добавить("Магазин");
	ТаблицаРезультат.Колонки.Добавить("ПериодДействия");
	
	Если НЕ ЗначениеЗаполнено(КодКупона) Тогда
		Возврат ТаблицаРезультат;
	КонецЕсли;
	
	Попытка
		
		ДисконтныйПрокси = ПроксиДисконтногоСервера();
		
		ТаблицаПрокси = ДисконтныйПрокси.ПолучитьСкидкиПоКупону(КодКупона, ДатаЗапроса);
		Если ТаблицаПрокси <> Неопределено Тогда
			Для Каждого СтрокаТаблицыКупонов Из ТаблицаПрокси.СтрокиТаблицы Цикл
				НоваяСтрока = ТаблицаРезультат.Добавить();
				НоваяСтрока.Период = СтрокаТаблицыКупонов.Период;
				НоваяСтрока.Скидка = ОбъектПоИдентификатору(СтрокаТаблицыКупонов.ИдентификаторСкидки, "СкидкиНаценки", "Справочник");
				Если ЗначениеЗаполнено(СтрокаТаблицыКупонов.Состояние) Тогда
					НоваяСтрока.Состояние = Перечисления.СостоянияОднократныхСкидок[СтрокаТаблицыКупонов.Состояние];
				КонецЕсли;
				НоваяСтрока.Магазин = ОбъектПоИдентификатору(СтрокаТаблицыКупонов.ИдентификаторМагазина, "Магазины", "Справочник");
				НоваяСтрока.ПериодДействия = СтрокаТаблицыКупонов.ПериодДействия;
			КонецЦикла;
		КонецЕсли;
		
	Исключение
		
		КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		СтрокаОшибки = НСтр("ru = 'Не удалось получить скидки по купону по причине:'", КодЯзыка)
			+ Символы.ПС + ОписаниеОшибки();
		ИмяСобытия = НСтр("ru = 'Дисконтный сервер'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , СтрокаОшибки);
		ЕстьОшибки = Истина;
		
	КонецПопытки;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаТоваровДляОбновленияПродаж(ДокументСсылка, ИмяМетаданных)
	Запрос = Новый Запрос;
	Коэффициент = 1;
	Если ИмяМетаданных = "ВозвратТоваровОтПокупателя" Тогда
		Коэффициент = -1;
	ИначеЕсли ИмяМетаданных = "ЧекККМ" Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидОперации") = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
			Коэффициент = -1;
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Товары.Номенклатура КАК Номенклатура,
	               |	Товары.Характеристика КАК Характеристика,
	               |	Товары.Количество * &Коэффициент КАК Количество,
	               |	Товары.Сумма * &Коэффициент КАК Сумма
	               |ИЗ
	               |	Документ." + ИмяМетаданных + ".Товары КАК Товары
	               |ГДЕ
	               |	Товары.Ссылка = &Ссылка
				   |	И Товары.Ссылка.Проведен
				   |";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Коэффициент", Коэффициент);
	Результат = Запрос.Выполнить().Выбрать();
	Возврат Результат;
КонецФункции

Функция ТаблицаБонусовДляОбновленияПродаж(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БонусныеБаллы.Период КАК Период,
	|	БонусныеБаллы.ВидДвижения КАК ВидДвижения,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	БонусныеБаллы.Начислено КАК Начислено,
	|	БонусныеБаллы.КСписанию КАК КСписанию
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
	|ГДЕ
	|	БонусныеБаллы.Регистратор = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результат = Запрос.Выполнить().Выбрать();
	Возврат Результат;
	
КонецФункции

Функция ВыборкаКупоновДокумента(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СостоянияКупонов.Период КАК Период,
	|	СостоянияКупонов.Скидка КАК Скидка,
	|	СостоянияКупонов.ИдентификаторСкидки КАК КодКупона,
	|	СостоянияКупонов.Состояние КАК Состояние,
	|	СостоянияКупонов.Магазин КАК Магазин,
	|	СостоянияКупонов.ПериодДействия КАК ПериодДействия
	|ИЗ
	|	РегистрСведений.СостоянияОднократныхСкидокИКупонов КАК СостоянияКупонов
	|ГДЕ
	|	СостоянияКупонов.ДокументДвижения = &ДокументДвижения";
	Запрос.УстановитьПараметр("ДокументДвижения", ДокументСсылка);
	Результат = Запрос.Выполнить().Выбрать();
	Возврат Результат;
	
КонецФункции

//
Функция ОбъектПоИдентификатору(ИдентификаторОбъекта, ТипОбъекта, КлассОбъекта) Экспорт
	
	Если КлассОбъекта = "Документ" Тогда
		ОбъектМенеджер = Документы[ТипОбъекта];
	Иначе
		ОбъектМенеджер = Справочники[ТипОбъекта];
	КонецЕсли;
	ОбъектПоСсылке = ОбъектМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторОбъекта));
	
	Возврат ОбъектПоСсылке;
	
КонецФункции

#КонецОбласти
