#Область ПрограммныйИнтерфейс

// Функция вызывается в обработчике ОбработкаВыбора в форме, в которой указываются серии
// и проверяет, что источник выбора - это форма указания серий.
//
// Параметры:
//  ИсточникВыбора	 - Произвольный - форма, где осуществлен выбор. Параметр события ОбработкаВыбора формы.
// 
// Возвращаемое значение:
//   Булево.
//
Функция ЭтоУказаниеСерий(ИсточникВыбора) Экспорт
	
	Возврат ИсточникВыбора.ИмяФормы = "Обработка.ПодборСерийВДокументы.Форма.УказаниеСерииВСтрокеТоваров";
	
КонецФункции

// Обрабатывает указание серии в ТЧ "Товары".
//	Параметры:
//		Форма - УправляемаяФорма - форма документа, в которой инициировано указание серии
//      ПараметрыУказанияСерий - Структура - параметры указания серий, возвращаемые соотвествующей процедурой модуля менеджера документа
//		ВыбраннаяСерия - Структура - формат которой описан в фукнции НоменклатураКлиентСервер.ВыбраннаяСерия
//		ТекущиеДанные - Структура,ДанныеФормыЭлементКоллекции  - данные строки, в которой указывается серия, если значение не передано,
//									то используются текущие данные табличного поля с именем ПараметрыУказанияСерий.ИмяТЧТовары.
//
Процедура ОбработатьУказаниеСерии(Форма, ПараметрыУказанияСерий, ВыбраннаяСерия, ТекущиеДанные = Неопределено) Экспорт
	
	ЕстьПризнакУказанияСерий = ПараметрыУказанияСерий.ПоляСвязи.Найти("УказыватьСерии") <> Неопределено;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Если Не ПараметрыУказанияСерий.ТоварВШапке Тогда		
			ТекущиеДанные = Форма.Элементы[ПараметрыУказанияСерий.ИмяТЧТовары].ДанныеСтроки(ВыбраннаяСерия.ИдентификаторТекущейСтроки);
			
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
		Иначе
			ТекущиеДанные = Форма.Объект;
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанные.Серия = ВыбраннаяСерия.Значение;
	
КонецПроцедуры

Процедура ПересчитатьСтатусУказанияСерийПриОбработке(ПараметрыУказанияСерий, ТекущийСтатус, СерииУказаныПолностью, КоличествоСерий, ВариантОбеспечения = Неопределено) Экспорт
	
	//Если серия указывается в ТЧ Товары, то значение параметра КоличествоСерий должно быть - Неопределено, т.к. в этом случае
	//статус указания серий не зависит от количества - в этом случае статус указания серий зависит только от того, указана серия 
	//или нет.
	
	//Если серия указывается в ТЧ Товары, то в параметре СерииУказаныПолностью передается признак - заполнена серия или нет,
	//иначе - равно ли количество товаров количеству серий (если количество товаров 0, то параметр должен быть ЛОЖЬ)
	
	Если ТекущийСтатус = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПрименятьСтатусМожноУказать = (ПараметрыУказанияСерий.ПодготовкаОрдера ИЛИ ПараметрыУказанияСерий.ЭтоЗаказ)
									И НЕ СерииУказаныПолностью
									И (КоличествоСерий = 0 ИЛИ КоличествоСерий = Неопределено);
		
	ИндексСтатуса = СтатусыСерийСерияНеУказана().Найти(ТекущийСтатус);

	Если ИндексСтатуса = Неопределено Тогда
		ИндексСтатуса = СтатусыСерийСерияУказана().Найти(ТекущийСтатус);
	КонецЕсли;
	
	Если ИндексСтатуса = Неопределено Тогда
		ИндексСтатуса = СтатусыСерийСериюМожноУказать().Найти(ТекущийСтатус);
	КонецЕсли;
	
	Если Не СерииУказаныПолностью
		И ПрименятьСтатусМожноУказать Тогда
		МассивРезультатов = СтатусыСерийСериюМожноУказать();
	ИначеЕсли Не СерииУказаныПолностью Тогда
		МассивРезультатов = СтатусыСерийСерияНеУказана();
	ИначеЕсли СерииУказаныПолностью Тогда
		МассивРезультатов = СтатусыСерийСерияУказана();
	КонецЕсли;
	
	ТекущийСтатус = МассивРезультатов[ИндексСтатуса];
	
КонецПроцедуры

Функция ВЭтомСтатусеСерииНеУказываются(СтатусУказанияСерий, ПараметрыУказанияСерий) Экспорт
	
	Если СтатусУказанияСерий = 0 
		Или (СтатусыСерийСериюМожноУказать().Найти(СтатусУказанияСерий) <> Неопределено
		И Не ПараметрыУказанияСерий.ПодготовкаОрдера)
		Или СтатусУказанияСерий = 15 Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция СтатусыСерийСериюМожноУказать() Экспорт
	
	//Порядок статусов следования используется в ПересчитатьСтатусУказанияСерийПриОбработке
	//и должен соотвествовать порядку в других фунциях СтатусыСерийСерия
	Статусы = Новый Массив;
	Статусы.Добавить(21);
	Статусы.Добавить(23);
	Статусы.Добавить(25);
	Статусы.Добавить(27);
	Статусы.Добавить(11);
	Статусы.Добавить(15);
	
	Возврат Статусы;
	
КонецФункции

Функция СтатусыСерийСерияНеУказана() Экспорт
	
	//Порядок статусов следования используется в ПересчитатьСтатусУказанияСерийПриОбработке
	//и должен соотвествовать порядку в других фунциях СтатусыСерийСерия
	Статусы = Новый Массив;
	Статусы.Добавить(1);
	Статусы.Добавить(3);
	Статусы.Добавить(5);
	Статусы.Добавить(7);
	Статусы.Добавить(9);
	Статусы.Добавить(13);
	
	Возврат Статусы;
	
КонецФункции

Функция СтатусыСерийСерияУказана() Экспорт
	
	//Порядок статусов следования используется в ПересчитатьСтатусУказанияСерийПриОбработке
	//и должен соотвествовать порядку в других фунциях СтатусыСерийСерия
	Статусы = Новый Массив;
	Статусы.Добавить(2);
	Статусы.Добавить(4);
	Статусы.Добавить(6);
	Статусы.Добавить(8);
	Статусы.Добавить(10);
	Статусы.Добавить(14);
	
	Возврат Статусы;
	
КонецФункции

// Функция проверяет необходимость указания серий в строке, если возможно, открывает форму указания,
// если форма указания не требует контекстного вызова сервера.
//
// Параметры
//		Форма - форма документа, в которой инициировано указание серий
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
//		Текст - Строка - текст, введеный в поле ввода (параметр событий ОкончаниеВводаТекста и АвтоПодборВводаТекста)
//		ТекущиеДанные - Структура,ДанныеФормыЭлементКоллекции  - данные строки, в которой указывается серия, если значение не передано,
//									то используются текущие данные табличного поля с именем ПараметрыУказанияСерий.ИмяТЧТовары.
//
// Возвращаемое значение
//      Тип Булево - ИСТИНА, если нужен контекстный вызов.
//
Функция ДляУказанияСерийНуженСерверныйВызов(Форма, ПараметрыУказанияСерий, Текст, ТекущиеДанные = Неопределено, ОпределятьРаспоряжение = Истина) Экспорт
	
	ТекстПоляДляПодбораСерий = "";
	Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляДляПодбораСерий = ТекстПоляДляПодбораСерий + "," + СтрМас  ;
	КонецЦикла;
	Для Каждого СтрМас из ПараметрыУказанияСерий.ИменаПолейДополнительные Цикл
		ТекстПоляДляПодбораСерий = ТекстПоляДляПодбораСерий + "," + СтрМас  ;
	КонецЦикла;
	ПараметрыПодбораСерий = Новый Структура("Номенклатура,Характеристика" + ТекстПоляДляПодбораСерий);
	Если ПараметрыПодбораСерий.Свойство("Назначение") Тогда
		ПараметрыПодбораСерий.Удалить("Назначение");
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Форма.Элементы[ПараметрыУказанияСерий.ИмяТЧТовары].ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Выберите строку товаров, для которой необходимо указать серии.'");
			ПоказатьПредупреждение(,ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторТекущейСтроки = Неопределено;
	
	Если Не ТекущиеДанные.Свойство("ИдентификаторТекущейСтроки", ИдентификаторТекущейСтроки) Тогда
		ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	КонецЕсли;
	
	ЭтоМаркировкаТоваровГИСМ = ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.МаркировкаПродукцииДляГИСМ")) <> Неопределено;
	ЭтоОперацияИдентификации = ПараметрыУказанияСерий.ОперацияДокумента = ПредопределенноеЗначение("Перечисление.ОперацииМаркировкиГИСМ.ИдентификацияРанееМаркированнойНаПроизводствеПродукции")
		ИЛИ ПараметрыУказанияСерий.ОперацияДокумента = ПредопределенноеЗначение("Перечисление.ОперацииМаркировкиГИСМ.ИдентификацияРанееМаркированныхПриИмпортеТоваров");
	
	Если ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
		Если Не ЭтоМаркировкаТоваровГИСМ Тогда
			ТекстСообщения = НСтр("ru='Для этого товара серии указывать не нужно.'");
		Иначе
			ТекстСообщения = НСтр("ru='Для этого товара не настроено указание серий на складе %Склад%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", Форма.Объект.Склад);
		КонецЕсли;
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат Ложь;
	ИначеЕсли ТекущиеДанные.ХарактеристикиИспользуются
		И Не ЗначениеЗаполнено(ТекущиеДанные.Характеристика) Тогда
		
		ТекстСообщения = НСтр("ru='Перед указанием серий нужно заполнить характеристику.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат Ложь;
	ИначеЕсли ЭтоМаркировкаТоваровГИСМ
		И Не ЭтоОперацияИдентификации
		И (Не ЗначениеЗаполнено(ТекущиеДанные.НоменклатураКиЗ)
				Или ТекущиеДанные.ХарактеристикиКиЗИспользуются
					И Не ЗначениеЗаполнено(ТекущиеДанные.ХарактеристикаКиЗ)) Тогда
		ТекстСообщения = НСтр("ru='Перед указанием серий нужно выбрать КиЗ.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат Ложь;
	ИначеЕсли ЭтоМаркировкаТоваровГИСМ
		И Не ЭтоОперацияИдентификации
		И Не ЗначениеЗаполнено(ТекущиеДанные.GTIN) Тогда
		ТекстСообщения = НСтр("ru='Перед указанием серий нужно указать GTIN.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат Ложь;
	ИначеЕсли МаркировкаТоваровГИСМКлиентСерверРТ.ВЭтомСтатусеСерииУказываютсяВТЧТовары(ТекущиеДанные.СтатусУказанияСерий, ПараметрыУказанияСерий)
		И ТекущиеДанные.Свойство("Серия")
		И Не ПараметрыУказанияСерий.ЭтоОрдер Тогда
		
		Если ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта = "ТекущиеДанные" Тогда
			ИсточникДанныхФормы = ТекущиеДанные;
		Иначе 
			ИсточникДанныхФормы = Форма[ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта];
		КонецЕсли; 
		
		Если ПараметрыУказанияСерий.ТолькоПросмотр
			Или Форма.ТолькоПросмотр Тогда
			ПараметрыПодбораСерий.Вставить("ТолькоПросмотр", Истина);
		Иначе
			Форма.ЗаблокироватьДанныеФормыДляРедактирования();
			Форма.Модифицированность = Истина;
			
			ПараметрыПодбораСерий.Вставить("ТолькоПросмотр", Ложь);
		КонецЕсли;
			
		Если ТекущиеДанные.Свойство("ЭтоВводНовойСерии") Тогда
			ПараметрыПодбораСерий.Вставить("ЭтоВводНовойСерии", ТекущиеДанные.ЭтоВводНовойСерии);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрыПодбораСерий,ТекущиеДанные);
		
		Если ПараметрыУказанияСерий.ИмяПоляКоличество <> Неопределено Тогда
			ПараметрыПодбораСерий.Вставить("Количество", ТекущиеДанные[ПараметрыУказанияСерий.ИмяПоляКоличество]);
		КонецЕсли;
		
		ПараметрыПодбораСерий.Вставить("Серия", ТекущиеДанные.Серия);
		ПараметрыПодбораСерий.Вставить("Регистратор", ИсточникДанныхФормы.Ссылка);
		
		Если ПараметрыУказанияСерий.ПоляСвязи.Найти("Магазин") <> Неопределено
			Или ПараметрыУказанияСерий.ИменаПолейДополнительные.Найти("Магазин") <> Неопределено Тогда
			ПараметрыПодбораСерий.Вставить("Магазин", ТекущиеДанные.Магазин);
		Иначе
			ПараметрыПодбораСерий.Вставить("Магазин", ИсточникДанныхФормы[ПараметрыУказанияСерий.ИмяПоляМагазин]);
		КонецЕсли;
		
		ПараметрыПодбораСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
		
		ЗначенияПолейДляОпределенияРаспоряжения = Новый Структура;
		ПараметрыПодбораСерий.Вставить("ЗначенияПолейДляОпределенияРаспоряжения", ЗначенияПолейДляОпределенияРаспоряжения);
		ПараметрыПодбораСерий.Вставить("ИдентификаторТекущейСтроки", ИдентификаторТекущейСтроки);
		ПараметрыПодбораСерий.Вставить("Текст", Текст);
		
		ОткрытьФорму("Обработка.ПодборСерийВДокументы.Форма.УказаниеСерииВСтрокеТоваров",ПараметрыПодбораСерий, Форма);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
