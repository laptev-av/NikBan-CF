	
#Область ПрограммныйИнтерфейс

// Процедура движения по регистру Посетители.
//
Процедура ОтразитьПосетители(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПосетители;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.Посетители.Записывать = Истина;
	Движения.Посетители.Загрузить(Таблица);
	
КонецПроцедуры

// Загрузка внешних данных
//
// Параметры:
//  ДанныеНастройки - Справочник "НастройкиЗагрузкиДанныхСчетчиковПодсчетаПосетителей"
//
Процедура ЗагрузитьВнешниеДанные(ДанныеНастройки) Экспорт
	
	ЗаголовокСообщения = НСтр("ru = 'Загрузка данных в систему подсчета посетителей'") 
							+ Символы.ПС + НСтр("ru = 'Наименование - ""%1"" Код - %2'");

	ЗаголовокСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ЗаголовокСообщения,
		ДанныеНастройки.Наименование,
		ДанныеНастройки.Код);
	
	// Подключаемся к каталогу
	
	Если ДанныеНастройки.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FILE Тогда
		
		ФайлКаталогЗагрузки = Новый Файл(ДанныеНастройки.FILEКаталогОбменаИнформацией);
		Если Не ФайлКаталогЗагрузки.Существует() Тогда
			
			СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
				|Прервана
				|Причина: Не существует каталог загрузки - %2'"),
				ЗаголовокСообщения,
				ДанныеНастройки.FILEКаталогОбменаИнформацией);
			
			ЗаписатьВЖурналИВыдатьСообщение(СтрСообщения, Истина);
			Возврат;
		КонецЕсли;
		лКаталогЗагрузки = ДанныеНастройки.FILEКаталогОбменаИнформацией;
		Если Не Прав(лКаталогЗагрузки,1)= "\" Тогда
			лКаталогЗагрузки = лКаталогЗагрузки + "\";
		КонецЕсли;
		
		МассивНайденныхФайлов = НайтиФайлы(лКаталогЗагрузки, "*.*");
		ИмяFTPСервера = "";
		
	ИначеЕсли ДанныеНастройки.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FTP Тогда
		
		СтрОшибки = "";
		
		ИмяСервераИКаталогНаСервере = РазделитьFTPРесурсНаСерверИКаталог(СокрЛП(ДанныеНастройки.FTPСоединениеПуть));
		
		ИмяСервера       = ИмяСервераИКаталогНаСервере.ИмяСервера;
		КаталогНаСервере = ИмяСервераИКаталогНаСервере.ИмяКаталога;
		
		Попытка
			FTPСоединение = ПолучитьFTPСоединение(ДанныеНастройки, ИмяСервера);
		Исключение
			
			СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
				|Прервана
				|Причина: Ошибка инициализации подключения к FTP-серверу - %2'"),
				ЗаголовокСообщения,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписатьВЖурналИВыдатьСообщение(СтрСообщения, Истина);
			
			Возврат;
		КонецПопытки;
		
		Попытка
			МассивНайденныхФайловFTP = FTPСоединение.НайтиФайлы(КаталогНаСервере, "*.*", Ложь);
		Исключение
			СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
				|Прервана
				|Причина: Ошибка при поиске файлов на FTP-сервере - %2'"),
				ЗаголовокСообщения,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписатьВЖурналИВыдатьСообщение(СтрСообщения, Истина);
			
			Возврат;
		КонецПопытки;
		
		КаталогВременныхФайлов = КаталогВременныхФайлов();
		Если Не Прав(КаталогВременныхФайлов,1)= "\" Тогда
			КаталогВременныхФайлов = КаталогВременныхФайлов = "\";
		КонецЕсли;
		
		МассивНайденныхФайлов = Новый Массив;
		
		КоличествоФайлов = МассивНайденныхФайловFTP.Количество();
		НомерФайла = 0;
		Для каждого ФайлFTP Из МассивНайденныхФайловFTP Цикл
			НомерФайла = НомерФайла + 1;
			ИмяВременногоФайла = КаталогВременныхФайлов + ФайлFTP.Имя;
			FTPСоединение.Получить(ФайлFTP.ПолноеИмя, ИмяВременногоФайла);
			Файл = Новый Файл(ИмяВременногоФайла);
			МассивНайденныхФайлов.Добавить(Файл);
		КонецЦикла;
	Иначе
		
		СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
			|Прервана
			|Причина: Не правильный вид загрузки данных'"),
			ЗаголовокСообщения,
			ДанныеНастройки.FILEКаталогОбменаИнформацией);
		
		ЗаписатьВЖурналИВыдатьСообщение(СтрСообщения, Истина);
		Возврат
	КонецЕсли;
	
	// Получить и бежим по файлам
	Если ДанныеНастройки.ИспользоватьНестандартныйАлгоритм Тогда
		УстановитьБезопасныйРежим(Истина);
		Выполнить(ДанныеНастройки.АлгоритмИсполнения);
	Иначе
		
		НачатьТранзакцию();
		
		Попытка
			БылиНеКритическиеОшибки = Ложь;
			БылиКритическиеОшибки   = Ложь;
			НайденыФайлыКОбработке  = Ложь;
			
			КоличествоОбработанныхВТранзакцииДокументов = 0;
			КоличествоФайлов = МассивНайденныхФайлов.Количество();
			ЗагруженоФайлов  = 0;
			НомерФайла       = 0;
			
			
			МассивОбработанныхФайлов = Новый Массив;
			Для каждого НайденныйФайл Из МассивНайденныхФайлов Цикл
				ФайлНеСодержитОшибок = Истина;
				НомерФайла = НомерФайла + 1;
				Если НайденныйФайл.ЭтоФайл() Тогда
					// Стандартная обработка
					Если Не НайденныйФайл.Расширение = ".txt" Тогда
						Продолжить;
					КонецЕсли;
					ИмяФайла = НайденныйФайл.ПолноеИмя;
					НайденыФайлыКОбработке  = Истина;

					ТекстФайла = Новый ТекстовыйДокумент();
					ТекстФайла.Прочитать(ИмяФайла);
					Если ТекстФайла.КоличествоСтрок()>=2 Тогда
						ЗагруженоФайлов = ЗагруженоФайлов + 1;
						// Считать первую строку
						ТехническийКод = СокрЛП(ТекстФайла.ПолучитьСтроку(1));
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						|	СчетчикиПодсчетаПосетителей.Ссылка
						|ИЗ
						|	Справочник.СчетчикиПодсчетаПосетителей КАК СчетчикиПодсчетаПосетителей
						|ГДЕ
						|	СчетчикиПодсчетаПосетителей.ТехническийКод = &ТехническийКод
						|
						|УПОРЯДОЧИТЬ ПО
						|	СчетчикиПодсчетаПосетителей.ПометкаУдаления";
						
						Запрос.УстановитьПараметр("ТехническийКод", ТехническийКод);
						
						Результат = Запрос.Выполнить();
						Выборка = Результат.Выбрать();
						
						Если Выборка.Следующий() Тогда
							СчетчикПодсчетаПосетителей = Выборка.Ссылка;
						Иначе
							
							СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = '%1
								|Файл - %2
								|Не правильный технический код - %3'"),
								ЗаголовокСообщения,
								ИмяФайла,
								ТехническийКод);
							ЗаписатьВЖурналИВыдатьСообщение(СтрСообщения, Истина);
							БылиНеКритическиеОшибки = Истина;
							ФайлНеСодержитОшибок    = Ложь;
							Продолжить;
						КонецЕсли;
						
						// Цикл по строкам файла
						ДокументРегистрацииДляЗаписи = Неопределено;
						ЗаменилиДанныеСтатистики     = Ложь;
						Для ИндексНомерСтроки = 2 По ТекстФайла.КоличествоСтрок() Цикл
							СтрокаФайла = ТекстФайла.ПолучитьСтроку(ИндексНомерСтроки);
							Если Не ПустаяСтрока(СтрокаФайла) Тогда
								СтрокаФайла = СтрЗаменить(СтрокаФайла, Символы.Таб, Символы.ПС);
								Если СтрЧислоСтрок(СтрокаФайла)>= 3  Тогда
									СтрокаДатаВремя = СтрПолучитьСтроку(СтрокаФайла,1);
									СтрокаДатаВремя = СтрЗаменить(СтрокаДатаВремя, " ", Символы.ПС);
									СтрокаДатаВремя = СтрЗаменить(СтрокаДатаВремя, ":", Символы.ПС);
									СтрокаДатаВремя = СтрЗаменить(СтрокаДатаВремя, "/", Символы.ПС);
									СтрокаДатаВремя = СтрЗаменить(СтрокаДатаВремя, ".", Символы.ПС);
									Попытка
										День    = Число(СокрЛП(СтрПолучитьСтроку(СтрокаДатаВремя,1)));
										Месяц   = Число(СокрЛП(СтрПолучитьСтроку(СтрокаДатаВремя,2)));
										Год     = Число(СокрЛП(СтрПолучитьСтроку(СтрокаДатаВремя,3)));
										Час     = Число(СокрЛП(СтрПолучитьСтроку(СтрокаДатаВремя,4)));
										Минута  = Число(СокрЛП(СтрПолучитьСтроку(СтрокаДатаВремя,5)));
										
										Если СтрЧислоСтрок(СтрокаДатаВремя)>5 Тогда
											Секунда = Число(СокрЛП(СтрПолучитьСтроку(СтрокаДатаВремя,6)));
										Иначе
											Секунда = 0;
										КонецЕсли;
										
										Если Не ЗначениеЗаполнено(Дата(Год, Месяц, День, Час, Минута, Секунда))  Тогда
											
											СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = '%1
												|Файл - %2
												|В строке №%3 не правильный формат даты'"),
												ЗаголовокСообщения,
												ИмяФайла,
												ИндексНомерСтроки);
											
											ЗаписатьВЖурналИВыдатьСообщение(СтрСообщения, Истина);
											БылиНеКритическиеОшибки = Истина;
											ФайлНеСодержитОшибок    = Ложь;
											Продолжить;
										КонецЕсли;
										
										Если Год < 2000 Тогда
											Год = 2000 + Год;
										КонецЕсли;
										
										ВремяРегистрации = Дата(1, 1, 1, Час, Минута, Секунда);
										ДатаВремяРегистрации = Дата(Год, Месяц, День, Час, Минута, Секунда);
										КоличествоВходящих   = Число(СтрПолучитьСтроку(СтрокаФайла,2));
										КоличествоВыходящих  = Число(СтрПолучитьСтроку(СтрокаФайла,3));
									Исключение
										
										СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = '%1
											|Файл - %2
											|В строке №%3 не правильные параметры'"),
											ЗаголовокСообщения,
											ИмяФайла,
											ИндексНомерСтроки);
										
										ЗаписатьВЖурналИВыдатьСообщение(СтрСообщения, Истина);
										БылиНеКритическиеОшибки = Истина;
										ФайлНеСодержитОшибок    = Ложь;
										Продолжить;
									КонецПопытки;
								Иначе
									
									СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = '%1
										|Файл - %2
										|В строке №%3 не хватает параметров'"),
										ЗаголовокСообщения,
										ИмяФайла,
										ИндексНомерСтроки);
									
									ЗаписатьВЖурналИВыдатьСообщение(СтрСообщения, Истина);
									БылиНеКритическиеОшибки = Истина;
									ФайлНеСодержитОшибок    = Ложь;
									Продолжить;
								КонецЕсли;
								
								// Поиск документа
								Если Не ДокументРегистрацииДляЗаписи = Неопределено 
									 И  НачалоДня(ДокументРегистрацииДляЗаписи.Дата) = НачалоДня(ДатаВремяРегистрации)
									 И  ДокументРегистрацииДляЗаписи.СчетчикПодсчетаПосетителей = СчетчикПодсчетаПосетителей Тогда
									
									ДокументРегистрации = ДокументРегистрацииДляЗаписи;
									СтрокаДокумента = ДокументРегистрации.ДанныеПодсчета.Найти(ВремяРегистрации, "ВремяРегистрации");
									Если Не СтрокаДокумента = Неопределено Тогда
										НомерСтроки = СтрокаДокумента.НомерСтроки;
									Иначе
										НомерСтроки = 0;
									КонецЕсли;
								Иначе
									Запрос = Новый Запрос;
									Запрос.Текст = 
									"ВЫБРАТЬ РАЗРЕШЕННЫЕ
									|	РегистрацияПодсчетаПосетителей.Ссылка,
									|	ЕСТЬNULL(ВложенныйЗапрос.НомерСтроки, 0) КАК НомерСтроки,
									|	ВЫБОР
									|		КОГДА ВложенныйЗапрос.Ссылка ЕСТЬ NULL 
									|			ТОГДА ИСТИНА
									|		ИНАЧЕ ЛОЖЬ
									|	КОНЕЦ КАК ЕстьНомерСтроки
									|ИЗ
									|	Документ.РегистрацияПодсчетаПосетителей КАК РегистрацияПодсчетаПосетителей
									|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
									|			РегистрацияПодсчетаПосетителейДанныеПодсчета.Ссылка КАК Ссылка,
									|			РегистрацияПодсчетаПосетителейДанныеПодсчета.НомерСтроки КАК НомерСтроки
									|		ИЗ
									|			Документ.РегистрацияПодсчетаПосетителей.ДанныеПодсчета КАК РегистрацияПодсчетаПосетителейДанныеПодсчета
									|		ГДЕ
									|			(НЕ РегистрацияПодсчетаПосетителейДанныеПодсчета.Ссылка.ПометкаУдаления)
									|			И РегистрацияПодсчетаПосетителейДанныеПодсчета.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
									|			И РегистрацияПодсчетаПосетителейДанныеПодсчета.Ссылка.СчетчикПодсчетаПосетителей = &СчетчикПодсчетаПосетителей
									|			И РегистрацияПодсчетаПосетителейДанныеПодсчета.ВремяРегистрации = &ВремяРегистрации) КАК ВложенныйЗапрос
									|		ПО РегистрацияПодсчетаПосетителей.Ссылка = ВложенныйЗапрос.Ссылка
									|ГДЕ
									|	(НЕ РегистрацияПодсчетаПосетителей.ПометкаУдаления)
									|	И РегистрацияПодсчетаПосетителей.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
									|	И РегистрацияПодсчетаПосетителей.СчетчикПодсчетаПосетителей = &СчетчикПодсчетаПосетителей
									|
									|УПОРЯДОЧИТЬ ПО
									|	ЕстьНомерСтроки,
									|	РегистрацияПодсчетаПосетителей.Проведен УБЫВ";
									
									Запрос.УстановитьПараметр("ДатаНачала"                , НачалоДня(ДатаВремяРегистрации));
									Запрос.УстановитьПараметр("ДатаОкончания"             , КонецДня(ДатаВремяРегистрации));
									Запрос.УстановитьПараметр("СчетчикПодсчетаПосетителей", СчетчикПодсчетаПосетителей);
									Запрос.УстановитьПараметр("ВремяРегистрации"          , ВремяРегистрации );
									
									Результат = Запрос.Выполнить();
									Выборка = Результат.Выбрать();
									
									Если Выборка.Следующий() Тогда
										ДокументРегистрации = Выборка.Ссылка.ПолучитьОбъект();
										НомерСтроки = Выборка.НомерСтроки;
									Иначе 
										ДокументРегистрации = Документы.РегистрацияПодсчетаПосетителей.СоздатьДокумент();
										ДокументРегистрации.Дата                       = ДатаВремяРегистрации;
										ДокументРегистрации.СчетчикПодсчетаПосетителей = СчетчикПодсчетаПосетителей;
										ДокументРегистрации.Магазин                    = СчетчикПодсчетаПосетителей.Магазин;
										ДокументРегистрации.Ответственный = Пользователи.ТекущийПользователь();
										НомерСтроки = 0;
										ЗаменилиДанныеСтатистики = Истина;
										ДокументРегистрации.СтатистикаПодсчетаСотрудников.Загрузить(СчетчикПодсчетаПосетителей.СтатистикаПодсчетаСотрудников.Выгрузить());
									КонецЕсли;
								КонецЕсли;
								
								Если ДокументРегистрацииДляЗаписи <> Неопределено
									И ДокументРегистрацииДляЗаписи <> ДокументРегистрации Тогда
									
									ЗаменилиДанныеСтатистики = Ложь;
									Попытка
										Если ДокументРегистрацииДляЗаписи.ДанныеПодсчета.Количество()>0 Тогда
											ДокументРегистрацииДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
										КонецЕсли; 
										ДокументРегистрацииДляЗаписи = Неопределено;
										КоличествоОбработанныхВТранзакцииДокументов = КоличествоОбработанныхВТранзакцииДокументов + 1;
									Исключение
										
										СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = '%1
											|Файл - %2
											|Ошибка проведения документа за дату %3'"),
											ЗаголовокСообщения,
											ИмяФайла,
											Формат(ДокументРегистрацииДляЗаписи.Дата, "ДЛФ=D"));
										
										ЗаписатьВЖурналИВыдатьСообщение(СтрСообщения, Истина);
										БылиКритическиеОшибки = Истина;
										ФайлНеСодержитОшибок  = Ложь;
									КонецПопытки;
									Если Не ДанныеНастройки.КоличествоЭлементовВТранзакции = 0
										  И КоличествоОбработанныхВТранзакцииДокументов = ДанныеНастройки.КоличествоЭлементовВТранзакции Тогда
										ЗафиксироватьТранзакцию();
										
										КоличествоОбработанныхВТранзакцииДокументов = 0;
										
										НачатьТранзакцию();
									КонецЕсли;
								КонецЕсли;
								
								Если НомерСтроки = 0 Тогда
									СтрокаДокумента = ДокументРегистрации.ДанныеПодсчета.Добавить();
								ИначеЕсли ДанныеНастройки.ЗаменятьДанныеПриПовторнойЗагрузке Тогда
									СтрокаДокумента = ДокументРегистрации.ДанныеПодсчета[НомерСтроки - 1];
								КонецЕсли;
								
								Если НомерСтроки = 0 ИЛИ ДанныеНастройки.ЗаменятьДанныеПриПовторнойЗагрузке Тогда
									СтрокаДокумента.ВремяРегистрации    = ВремяРегистрации;
									СтрокаДокумента.КоличествоВходящих  = КоличествоВходящих;
									СтрокаДокумента.КоличествоВыходящих = КоличествоВыходящих;
									ДокументРегистрацииДляЗаписи        = ДокументРегистрации;
								КонецЕсли;
								
								Если НЕ ЗаменилиДанныеСтатистики И ДанныеНастройки.ЗаменятьДанныеПриПовторнойЗагрузке Тогда
									ДокументРегистрации.СтатистикаПодсчетаСотрудников.Загрузить(СчетчикПодсчетаПосетителей.СтатистикаПодсчетаСотрудников.Выгрузить());
									ЗаменилиДанныеСтатистики = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла; // цикл по строкам файла
						
						Если Не ДокументРегистрацииДляЗаписи = Неопределено Тогда
							
							Попытка
								Если ДокументРегистрацииДляЗаписи.ДанныеПодсчета.Количество()>0 Тогда
									ДокументРегистрацииДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
								КонецЕсли; 
								ДокументРегистрацииДляЗаписи = Неопределено;
								КоличествоОбработанныхВТранзакцииДокументов = КоличествоОбработанныхВТранзакцииДокументов + 1;
							Исключение
								
								СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = '%1
									|Файл - %2
									|Ошибка проведения документа за дату %3'"),
									ЗаголовокСообщения,
									ИмяФайла,
									Формат(ДокументРегистрацииДляЗаписи.Дата, "ДЛФ=D"));
								
								ЗаписатьВЖурналИВыдатьСообщение(СтрСообщения, Истина);
								БылиКритическиеОшибки = Истина;
								ФайлНеСодержитОшибок  = Ложь;
							КонецПопытки;
							
							Если Не ДанныеНастройки.КоличествоЭлементовВТранзакции = 0
								  И КоличествоОбработанныхВТранзакцииДокументов = ДанныеНастройки.КоличествоЭлементовВТранзакции Тогда
								ЗафиксироватьТранзакцию();
								
								КоличествоОбработанныхВТранзакцииДокументов = 0;
								
								НачатьТранзакцию();
							КонецЕсли;
						КонецЕсли;
						Если ФайлНеСодержитОшибок Тогда
							МассивОбработанныхФайлов.Добавить(НайденныйФайл);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; // Цикл по файлам
			
			ЗафиксироватьТранзакцию();
		Исключение
			СтрокаОшибки = НСтр("ru = 'При загрузке данных возникла исключительная ситуация:'") + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибки);
			ОтменитьТранзакцию();
		КонецПопытки;
		
		Если ДанныеНастройки.УдалятьУспешноЗагруженныеФайлы Тогда
			Если ДанныеНастройки.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FILE Тогда
				Для каждого ВременныйФайл Из МассивОбработанныхФайлов Цикл
					УдалитьФайлы(ВременныйФайл.ПолноеИмя);
				КонецЦикла;
			ИначеЕсли ДанныеНастройки.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FTP Тогда
				FTPСоединение.УстановитьТекущийКаталог(КаталогНаСервере);
				Для каждого ВременныйФайл Из МассивОбработанныхФайлов Цикл
					FTPСоединение.Удалить(ВременныйФайл.Имя);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если БылиКритическиеОшибки Тогда
			СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
				|Были критические ошибки при загрузке'"),
				ЗаголовокСообщения);
			ЗаписатьВЖурналИВыдатьСообщение(СтрСообщения, Истина);
		ИначеЕсли БылиНеКритическиеОшибки Тогда
			СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
				|Были не критические ошибки при загрузке'"),
				ЗаголовокСообщения);
			ЗаписатьВЖурналИВыдатьСообщение(СтрСообщения, Истина);
		ИначеЕсли НЕ НайденыФайлыКОбработке Тогда
			
			СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
				|Не найдены файлы к обработке'"),
				ЗаголовокСообщения);
			ЗаписатьВЖурналИВыдатьСообщение(СтрСообщения, Истина);
			
		Иначе
			СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
				|Загрузка прошла успешно'"),
				ЗаголовокСообщения);
			ЗаписатьВЖурналИВыдатьСообщение(СтрСообщения, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеНастройки.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FTP Тогда
		Для каждого ВременныйФайл Из МассивНайденныхФайлов Цикл
			УдалитьФайлы(ВременныйФайл.ПолноеИмя);
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры // ЗагрузкаВнешнихДанных()

// Процедура регламентного задания "ЗагрузкаДанныхСчетчиковПодсчетаПосетителей".
//
Процедура ЗагрузитьВнешниеДанныеПоРегламентномуЗаданию(КодНастройки) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗагрузкаДанныхСчетчиковПодсчетаПосетителей);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиЗагрузкиДанныхСчетчиковПодсчетаПосетителей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиЗагрузкиДанныхСчетчиковПодсчетаПосетителей КАК НастройкиЗагрузкиДанныхСчетчиковПодсчетаПосетителей
	|ГДЕ
	|		 НастройкиЗагрузкиДанныхСчетчиковПодсчетаПосетителей.Код = &Код
	|	И НЕ НастройкиЗагрузкиДанныхСчетчиковПодсчетаПосетителей.ПометкаУдаления
	|";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Код", КодНастройки);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗагрузитьВнешниеДанные(Выборка.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьFTPСоединение(ДанныеНастройки, ИмяСервера)
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	
	Если НастройкаПроксиСервера <> Неопределено Тогда
		Прокси = Новый ИнтернетПрокси();
		Прокси.Установить("ftp", НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
		Прокси.Пользователь = НастройкаПроксиСервера["Пользователь"];
		Прокси.Пароль       = НастройкаПроксиСервера["Пароль"];
		Прокси.НеИспользоватьПроксиДляЛокальныхАдресов
							= НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
	
	FTPСоединение = Новый FTPСоединение(ИмяСервера,
										ДанныеНастройки.FTPСоединениеПорт,
										ДанныеНастройки.FTPСоединениеПользователь,
										ДанныеНастройки.FTPСоединениеПароль,
										Прокси,
										ДанныеНастройки.FTPСоединениеПассивноеСоединение);
	
	Возврат FTPСоединение;
	
КонецФункции

Функция РазделитьFTPРесурсНаСерверИКаталог(Знач ПолныйПуть)
	
	Результат = Новый Структура("ИмяСервера,ИмяКаталога", "", "");
	
	Если ВРег(Лев(ПолныйПуть, 6)) = "FTP://" Тогда
		ПолныйПуть = Прав(ПолныйПуть, СтрДлина(ПолныйПуть) - 6);
	КонецЕсли;
	
	Позиция = Найти(ПолныйПуть, "/");
	
	Если Позиция = 0 Тогда
		Результат.ИмяСервера = ПолныйПуть;
		Результат.ИмяКаталога = "/";
		Возврат Результат;
	КонецЕсли;
	
	Результат.ИмяСервера = Лев(ПолныйПуть, Позиция - 1);
	Результат.ИмяКаталога = Прав(ПолныйПуть, СтрДлина(ПолныйПуть) - Позиция);
	
	Если Прав(Результат.ИмяКаталога, 1) <> "/" Тогда
		Результат.ИмяКаталога = Результат.ИмяКаталога + "/";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьВЖурналИВыдатьСообщение(СтрСообщения, ЭтоОшибка)
	
	ИмяСобытия = НСтр("ru = 'Регистрация подсчета посетителей'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Если ЭтоОшибка Тогда
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтрСообщения);
	Иначе
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Информация,
			,
			,
			СтрСообщения);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСообщения);
	
КонецПроцедуры // ЗаписатьВЖурналИВыдатьСообщение()

#КонецОбласти

