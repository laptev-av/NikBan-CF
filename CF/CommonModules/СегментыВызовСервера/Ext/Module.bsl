
#Область ПрограммныйИнтерфейс

// Функция записывает значение в создаваемую запись XML.
//
Функция ПолучитьXML(Значение) Экспорт
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, Значение);
	Возврат Запись.Закрыть();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ РЕГЛАМЕНТНЫХ ЗАДАНИЙ

// Выполняет формирование периодических сегментов.
//
Процедура ВыполнитьПериодическоеФормирование() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ФормированиеСегментов);
	
	УстановитьПривилегированныйРежим(Истина);

	// Выбрать сегменты, формируемые периодически.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СегментыНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.СегментыНоменклатуры КАК СегментыНоменклатуры
		|ГДЕ
		|	СегментыНоменклатуры.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ПериодическиОбновлять)");
	Выборка = Запрос.Выполнить().Выбрать();

	// Сформировать выбранные сегменты.
	Пока Выборка.Следующий() Цикл
		Сформировать(Выборка.Ссылка);
	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Выполняет формирование периодических сегментов.
//
Процедура ВыполнитьПериодическоеФормированиеГруппПолучателейСкидки() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ФормированиеГруппПолучателейСкидки);
	
	УстановитьПривилегированныйРежим(Истина);

	// Выбрать сегменты, формируемые периодически.
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ГруппыПолучателейСкидки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ГруппыПолучателейСкидки КАК ГруппыПолучателейСкидки
	|ГДЕ
	|	ГруппыПолучателейСкидки.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ПериодическиОбновлять)");
	Выборка = Запрос.Выполнить().Выбрать();

	// Сформировать выбранные сегменты.
	Пока Выборка.Следующий() Цикл
		СформироватьГруппуПолучателейСкидки(Выборка.Ссылка);
	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Выполняет очистку не динамических сегментов по запланированным датам.
//
Процедура ВыполнитьПлановуюОчистку() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОчисткаСегментов);
	
	УстановитьПривилегированныйРежим(Истина);

	// Выбрать сегменты, формируемые вручную с подходящей датой очистки.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СегментыНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.СегментыНоменклатуры КАК СегментыНоменклатуры
		|ГДЕ
		|	СегментыНоменклатуры.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ФормироватьВручную)
		|	И СегментыНоменклатуры.ДатаОчистки <> ДАТАВРЕМЯ(1, 1, 1)
		|	И СегментыНоменклатуры.ДатаОчистки <= &ДатаОчистки");
	Запрос.УстановитьПараметр("ДатаОчистки", ТекущаяДатаСеанса());
	Выборка = Запрос.Выполнить().Выбрать();

	// Очистить выбранные сегменты.
	Пока Выборка.Следующий() Цикл
		Очистить(Выборка.Ссылка);
	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ И ОЧИСТКИ

// Заполняет регистр сведений объектами, вошедшими в сегмент.
Процедура Сформировать(СегментСсылка) Экспорт

	ПривилегированныйРежимУжеВключен = ПривилегированныйРежим();
	Если НЕ ПривилегированныйРежимУжеВключен Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Сегмент", СегментСсылка);
	ДополнительныеПараметры.Вставить("ПроверитьВозможностьОбновления", Истина);
	СписокЭлементов = СписокЭлементовСКД(СегментСсылка, ДополнительныеПараметры);
	ВключатьХарактеристики = СписокЭлементов.Колонки.Найти("ХарактеристикаЭлемента") <> Неопределено;
	
	Если ДополнительныеПараметры.Свойство("ДопустимоЧастичноеОбновление") Тогда
		Для Каждого Элемент Из СписокЭлементов Цикл
			Если Элемент.ПрисутствуетВСтаромСоставе И НЕ Элемент.ПрисутствуетВНовомСоставе Тогда
				// Запись удаляется
				НаборЗаписей = РегистрыСведений.НоменклатураСегмента.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Сегмент.Установить(СегментСсылка);
				НаборЗаписей.Отбор.Номенклатура.Установить(Элемент.ЭлементСписка);
				Если ВключатьХарактеристики Тогда
					НаборЗаписей.Отбор.Характеристика.Установить(Элемент.ХарактеристикаЭлемента);
				КонецЕсли;
				НаборЗаписей.Записать(Истина);
			Иначе
				// Запись добавляется
				Запись = РегистрыСведений.НоменклатураСегмента.СоздатьМенеджерЗаписи();
				Запись.Сегмент = СегментСсылка;
				Запись.Номенклатура = Элемент.ЭлементСписка;
				Если ВключатьХарактеристики Тогда
					Запись.Характеристика = Элемент.ХарактеристикаЭлемента;
				КонецЕсли;
				Запись.Записать(Истина);
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Просто перезаписывается весь набор.
		НаборЗаписей = РегистрыСведений.НоменклатураСегмента.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сегмент.Установить(СегментСсылка);
		Для Каждого Элемент Из СписокЭлементов Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.Сегмент = СегментСсылка;
			Запись.Номенклатура = Элемент.ЭлементСписка;
			Если ВключатьХарактеристики Тогда
				Запись.Характеристика = Элемент.ХарактеристикаЭлемента;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
	Если НЕ ПривилегированныйРежимУжеВключен Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;

КонецПроцедуры

// Заполняет регистр сведений объектами, вошедшими в сегмент.
Процедура СформироватьГруппуПолучателейСкидки(ГруппаСсылка) Экспорт

	ПривилегированныйРежимУжеВключен = ПривилегированныйРежим();
	Если НЕ ПривилегированныйРежимУжеВключен Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ГруппаПолучателейСкидки", ГруппаСсылка);
	ДополнительныеПараметры.Вставить("ПроверитьВозможностьОбновления", Истина);
	СписокЭлементов = СписокЭлементовСКД(ГруппаСсылка, ДополнительныеПараметры);
    	
	Если ДополнительныеПараметры.Свойство("ДопустимоЧастичноеОбновление") Тогда
		Для Каждого Элемент Из СписокЭлементов Цикл
			Если Элемент.ПрисутствуетВСтаромСоставе И НЕ Элемент.ПрисутствуетВНовомСоставе Тогда
				// Запись удаляется
				НаборЗаписей = РегистрыСведений.СоставГруппПолучателейСкидки.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ГруппаПолучателейСкидки.Установить(ГруппаСсылка);
				НаборЗаписей.Отбор.Получатель.Установить(Элемент.ЭлементСписка);
				НаборЗаписей.Записать(Истина);
			Иначе
				// Запись добавляется
				Запись = РегистрыСведений.СоставГруппПолучателейСкидки.СоздатьМенеджерЗаписи();
				Запись.ГруппаПолучателейСкидки = ГруппаСсылка;
				Запись.Получатель = Элемент.ЭлементСписка;
				Запись.Записать(Истина);
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Просто перезаписывается весь набор.
		НаборЗаписей = РегистрыСведений.СоставГруппПолучателейСкидки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ГруппаПолучателейСкидки.Установить(ГруппаСсылка);
		Для Каждого Элемент Из СписокЭлементов Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.ГруппаПолучателейСкидки = ГруппаСсылка;
			Запись.Получатель = Элемент.ЭлементСписка;
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Если НЕ ПривилегированныйРежимУжеВключен Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;

КонецПроцедуры

// Удаляет из регистра сведений записи, относящиеся к сегменту.
Процедура Очистить(СегментСсылка) Экспорт

	НаборСегмента = РегистрыСведений.НоменклатураСегмента.СоздатьНаборЗаписей();
	НаборСегмента.Отбор.Сегмент.Установить(СегментСсылка);
	НаборСегмента.Записать();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СХЕМЫ КОМПОНОВКИ

// Возвращает схему компоновки данных сегмента с учетом способа формирования сегмента.
//
Функция ПолучитьСКД(СегментСсылка) Экспорт

	СКД = СегментСсылка.СхемаКомпоновкиДанных.Получить();

	НаборСписка = СКД.НаборыДанных.Найти("СписокСегмента");

	Если СегментСсылка.СпособФормирования <>
		 Перечисления.СпособыФормированияСегментов.ФормироватьДинамически Тогда

		// Заменить запрос списка на обращение к регистру.
		
		НаборСписка.Запрос = 
		"ВЫБРАТЬ
		|	НоменклатураСегмента.Номенклатура КАК ЭлементСписка,
		|	НоменклатураСегмента.Характеристика КАК ХарактеристикаЭлемента,
		|	НоменклатураСегмента.Сегмент
		|ИЗ
		|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента";
		
		
		// Удалить отбор, соответствующий старому запросу.
		ЭлементыОтбора = СКД.НастройкиПоУмолчанию.Отбор.Элементы;
		ЭлементыОтбора.Очистить();

		// добавить отбор по сегменту
		ОбщегоНазначенияРТКлиентСервер.ДобавитьОтбор(
			СКД.НастройкиПоУмолчанию,
			Новый ПолеКомпоновкиДанных("Сегмент"),
			СегментСсылка);

		// Включить автозаполнение полей.
		СКД.НаборыДанных.СписокСегмента.АвтоЗаполнениеДоступныхПолей = Истина;

	КонецЕсли;

	Возврат(СКД);

КонецФункции

// Возвращает схему компоновки данных сегмента с учетом способа формирования сегмента.
//
Функция ПолучитьСКДГруппыПолучателейСкидки(ГруппаСсылка) Экспорт
	
	СКДСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаСсылка, "СхемаКомпоновкиДанных");
	СКД = СКДСсылка.Получить();

	НаборСписка = СКД.НаборыДанных.Найти("СписокСегмента");

	Если ГруппаСсылка.СпособФормирования <> Перечисления.СпособыФормированияСегментов.ФормироватьДинамически Тогда

		// Заменить запрос списка на обращение к регистру.
		
		НаборСписка.Запрос = 
		"ВЫБРАТЬ
		|	СоставГрупп.ГруппаПолучателейСкидки КАК ГруппаПолучателейСкидки,
		|	СоставГрупп.Получатель КАК ЭлементСписка
		|ИЗ
		|	РегистрСведений.СоставГруппПолучателейСкидки КАК СоставГрупп";
		
		
		// Удалить отбор, соответствующий старому запросу.
		ЭлементыОтбора = СКД.НастройкиПоУмолчанию.Отбор.Элементы;
		ЭлементыОтбора.Очистить();

		// добавить отбор по сегменту
		ОбщегоНазначенияРТКлиентСервер.ДобавитьОтбор(СКД.НастройкиПоУмолчанию, Новый ПолеКомпоновкиДанных("ГруппаПолучателейСкидки"), ГруппаСсылка);

		// Включить автозаполнение полей.
		СКД.НаборыДанных.СписокСегмента.АвтоЗаполнениеДоступныхПолей = Истина;

	КонецЕсли;

	Возврат(СКД);

КонецФункции

// Сохраняет схему компоновки данных сегмента в новое хранилище значения.
//
Функция СохранитьСКД(ДанныеФормыОбъект, СхемаКомпоновки) Экспорт

	ДанныеФормыОбъект.СхемаКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновки);
	ДанныеФормыОбъект.Записать();
	Возврат ДанныеФормыОбъект;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОБРАБОТКИ НАБОРА ЭЛЕМЕНТОВ

// Возвращает список значений, содержащий элементы, входящие в сегмент,
// с учетом способа формирования сегмента.
//
Функция СписокЗначений(СегментСсылка) Экспорт

	Список = Новый СписокЗначений();
	Список.ЗагрузитьЗначения(ТаблицаЗначений(СегментСсылка).ВыгрузитьКолонку(0));
	Возврат Список;

КонецФункции

// Возвращает таблицу значений, содержащую элементы, входящие в сегмент,
// с учетом способа формирования сегмента.
//
Функция ТаблицаЗначений(СегментСсылка) Экспорт

	Если СегментСсылка.СпособФормирования =
		Перечисления.СпособыФормированияСегментов.ФормироватьДинамически Тогда
		Возврат СписокЭлементовСКД(СегментСсылка);
	Иначе
		Возврат ВыборкаИзРегистра(СегментСсылка).Выгрузить();
	КонецЕсли;

КонецФункции

// Возвращает массив элементов, входящих в сегмент,
// с учетом способа формирования сегмента.
//
Функция МассивЭлементов(СегментСсылка) Экспорт

	Возврат ТаблицаЗначений(СегментСсылка).ВыгрузитьКолонку(0);

КонецФункции

// Возвращает количество объектов, отнесенных к сегменту,
// с учетом способа формирования сегмента.
//
Функция КоличествоЭлементов(СегментСсылка) Экспорт

	Если СегментСсылка.СпособФормирования =
		Перечисления.СпособыФормированияСегментов.ФормироватьДинамически Тогда
		Возврат СписокЭлементовСКД(СегментСсылка).Количество();
	Иначе
		Выборка = ВыборкаИзРегистра(СегментСсылка);
		Если Выборка.Пустой() Тогда
			Возврат 0;
		Иначе
			Возврат Выборка.Выбрать().Количество();
		КонецЕсли;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ

// Возвращает флаг вхождения объекта в сегмент.
// Параметры:
// ОбъектСсылка - ссылка на анализируемый объект - номенклатуру,
// СегментСсылка - ссылка на сегмент номенклатуры,
// ХарактеристикаОбъекта - характеристика номенклатуры,
// Динамический - способ формирования сегмента - ФормироватьДинамически.
Функция ВходитВСегмент(ОбъектСсылка, СегментСсылка, Характеристика = Неопределено, Динамический = Истина) Экспорт
	
	Если Динамический Тогда
		
		Настройки = ПолучитьНастройкиСписка(СегментСсылка);
		
		// установить отбор списка
		ЭлементОтбора = Настройки.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЭлементСписка");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ОбъектСсылка;
		ЭлементОтбора.Использование  = Истина;
		
		Если Характеристика <> Неопределено Тогда
			ЭлементОтбора = Настройки.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ХарактеристикаЭлемента");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Характеристика;
			ЭлементОтбора.Использование  = Истина;
		КонецЕсли;
		
		Возврат ТаблицаСКД(Настройки.СКД, Настройки.Настройки).Количество() > 0;
		
	Иначе
		
		Запрос = Новый Запрос;
		
		Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			               |	НоменклатураСегмента.Номенклатура
			               |ИЗ
			               |	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
			               |ГДЕ
			               |	НоменклатураСегмента.Сегмент = &СегментСсылка
			               |	И НоменклатураСегмента.Номенклатура = &ОбъектСсылка
			               |	И НоменклатураСегмента.Характеристика = &Характеристика";
			
							
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли; 		
		
		Запрос.УстановитьПараметр("ОбъектСсылка",ОбъектСсылка);
		Запрос.УстановитьПараметр("СегментСсылка",СегментСсылка);
		Запрос.УстановитьПараметр("Характеристика",Характеристика);
		
		Возврат НЕ Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
КонецФункции

// Возвращает таблицу значений, содержащую ссылки на сегменты, в которые входит объект.
// Параметры:
// ОбъектСсылка - ссылка на номенклатуру.
// ВключатьДинамические - если истина, то с учетом динамических сегментов.
//
Функция СписокСегментов(ОбъектСсылка, ВключатьДинамические = Ложь) Экспорт
	
	// Выбрать не динамические сегменты, в которые входит номенклатура.
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	НоменклатураСегмента.Сегмент
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|ГДЕ
	|	НоменклатураСегмента.Номенклатура = &Номенклатура");
	Запрос.УстановитьПараметр("Номенклатура", ОбъектСсылка);
	Результат = Запрос.Выполнить().Выгрузить();
	
	// Добавить в результат динамические сегменты, в которые входит номенклатура.
	Если ВключатьДинамические Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	СегментыНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.СегментыНоменклатуры КАК СегментыНоменклатуры
		|ГДЕ
		|	СегментыНоменклатуры.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ФормироватьДинамически)");
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ВходитВСегмент(ОбъектСсылка, Выборка.Ссылка) Тогда
				Запись = Результат.Добавить();
				Запись.Сегмент = Выборка.Ссылка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; // Добавить в результат динамические сегменты, в которые входит номенклатура.
	
	Возврат Результат;

КонецФункции

// Если в настройках СКД включено использование отбора по сегменту номенклатуры,
// то процедура устанавливает служебный параметр использования отбора по сегменту номенклатуры.
//
//	Параметры:
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек СКД.
//		
Процедура ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек) Экспорт
	
	ПараметрИспользуетсяОтборПоСегменту  = ОбщегоНазначенияРТКлиентСервер.ПолучитьПараметр(
		КомпоновщикНастроек.Настройки, 
		"ИспользуетсяОтборПоСегментуНоменклатуры");
	
	Если ПараметрИспользуетсяОтборПоСегменту = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрИспользуетсяОтборПоСегменту.Значение      = Ложь;
	ПараметрИспользуетсяОтборПоСегменту.Использование = Ложь;
	
	НастройкиОсновнойСхемы = КомпоновщикНастроек.ПолучитьНастройки();
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкиОсновнойСхемы.Отбор,"СегментНоменклатуры");
	
	ИспользуетсяОтборПоСегменту = Ложь;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.Использование Тогда  
			ИспользуетсяОтборПоСегменту = Истина;
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
	ПараметрИспользуетсяОтборПоСегменту  = ОбщегоНазначенияРТКлиентСервер.ПолучитьПараметр(
		КомпоновщикНастроек.ФиксированныеНастройки, 
		"ИспользуетсяОтборПоСегментуНоменклатуры");
	
	ПараметрИспользуетсяОтборПоСегменту.Значение = Истина;
	ПараметрИспользуетсяОтборПоСегменту.Использование = ИспользуетсяОтборПоСегменту;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает результат запроса, определяющего набор элементов сегмента,
// из регистров сведений (применяется для не динамических сегментов).
//
Функция ВыборкаИзРегистра(СегментСсылка)
        	
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	НоменклатураСегмента.Номенклатура,
			|	НоменклатураСегмента.Характеристика
			|ИЗ
			|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
			|ГДЕ
			|	НоменклатураСегмента.Сегмент = &Сегмент");
			
		Запрос.УстановитьПараметр("Сегмент", СегментСсылка);
		Возврат Запрос.Выполнить();

КонецФункции

// Возвращает таблицу значений, содержащую ссылки на элементы,
// входящие в сегмент, по настройкам СКД.
//
Функция СписокЭлементовСКД(СегментСсылка, ДополнительныеПараметры = Неопределено)

	Настройки = ПолучитьНастройкиСписка(СегментСсылка);
	Возврат ТаблицаСКД(Настройки.СКД, Настройки.Настройки, ДополнительныеПараметры);

КонецФункции

// Возвращает структуру, содержащую СКД сегмента и настройки варианта,
// содержащего список элементов. При этом подключаются поля запроса списка.
//
Функция ПолучитьНастройкиСписка(СегментСсылка)

	СКД = СегментСсылка.СхемаКомпоновкиДанных.Получить();

	// Подключить поля запроса списка.
	Поля = СКД.НаборыДанных.СписокСегмента.Поля;
	Для Каждого Поле Из Поля Цикл
		Поле.ОграничениеИспользования.Поле = Ложь;
	КонецЦикла;// Подключить поля запроса списка.

	НастройкиСписка = СКД.ВариантыНастроек.Список.Настройки;
	Настройки = СКД.НастройкиПоУмолчанию;
	ОбщегоНазначенияРТКлиентСервер.СкопироватьЭлементы(НастройкиСписка.ПараметрыДанных, Настройки.ПараметрыДанных);
	ОбщегоНазначенияРТКлиентСервер.СкопироватьЭлементы(НастройкиСписка.Отбор, Настройки.Отбор);

	Возврат Новый Структура("СКД, Настройки", СКД, НастройкиСписка);

КонецФункции

// Формирует и возвращает таблицу значений по СКД и настройкам.
// Параметры:
// СКД - схема компоновки данных,
// Настройки - вариант настроек схемы, по которым необходимо сформировать таблицу.
//
Функция ТаблицаСКД(СКД, Настройки, ДополнительныеПараметры = Неопределено)

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СКД,
		Настройки,
		,
		,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	Колонка = ТаблицаЗначений.Колонки.Найти("Номенклатура");
	Если Колонка <> Неопределено Тогда
		Колонка.Имя = "ЭлементСписка";
	КонецЕсли;
	Колонка = ТаблицаЗначений.Колонки.Найти("Характеристика");
	Если Колонка <> Неопределено Тогда
		Колонка.Имя = "ХарактеристикаЭлемента";
	КонецЕсли;
	
	ЕстьХарактеристики = Ложь;
	Если ТаблицаЗначений.Колонки.Количество() = 1 Тогда
		ТаблицаЗначений.Свернуть("ЭлементСписка");
	Иначе
		ТаблицаЗначений.Свернуть("ЭлементСписка, ХарактеристикаЭлемента");
		ЕстьХарактеристики = Истина;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ПроверитьВозможностьОбновления") Тогда
			Если ДополнительныеПараметры.Свойство("Сегмент") Тогда
				ПроверитьЦелесообразностьВыборочногоОбновленияСегмента(ТаблицаЗначений, ЕстьХарактеристики, ДополнительныеПараметры);
			ИначеЕсли ДополнительныеПараметры.Свойство("ГруппаПолучателейСкидки") Тогда
				ПроверитьЦелесообразностьВыборочногоОбновленияГруппыПолучателей(ТаблицаЗначений, ДополнительныеПараметры);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаЗначений;

КонецФункции

Процедура ПроверитьЦелесообразностьВыборочногоОбновленияСегмента(ТаблицаЗначений, ЕстьХарактеристики, ДополнительныеПараметры)
	Запрос = Новый Запрос;
	Если ЕстьХарактеристики Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(ТаблицаНовыхЗаписей.ЭлементСписка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ЭлементСписка,
		|	ЕСТЬNULL(ТаблицаНовыхЗаписей.ХарактеристикаЭлемента, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ХарактеристикаЭлемента
		|ПОМЕСТИТЬ ТаблицаНовыхЗаписей
		|ИЗ
		|	&ТаблицаНовыхЗаписей КАК ТаблицаНовыхЗаписей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Подзапрос.ЭлементСписка КАК ЭлементСписка,
		|	Подзапрос.ХарактеристикаЭлемента КАК ХарактеристикаЭлемента,
		|	МАКСИМУМ(Подзапрос.ПрисутствуетВНовомСоставе) КАК ПрисутствуетВНовомСоставе,
		|	МАКСИМУМ(Подзапрос.ПрисутствуетВСтаромСоставе) КАК ПрисутствуетВСтаромСоставе
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаНовыхЗаписей.ЭлементСписка КАК ЭлементСписка,
		|		ТаблицаНовыхЗаписей.ХарактеристикаЭлемента КАК ХарактеристикаЭлемента,
		|		ИСТИНА КАК ПрисутствуетВНовомСоставе,
		|		ЛОЖЬ КАК ПрисутствуетВСтаромСоставе
		|	ИЗ
		|		ТаблицаНовыхЗаписей КАК ТаблицаНовыхЗаписей
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		НоменклатураСегмента.Номенклатура,
		|		НоменклатураСегмента.Характеристика,
		|		ЛОЖЬ,
		|		ИСТИНА
		|	ИЗ
		|		РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|	ГДЕ
		|		НоменклатураСегмента.Сегмент = &Сегмент) КАК Подзапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	Подзапрос.ЭлементСписка,
		|	Подзапрос.ХарактеристикаЭлемента
		|
		|ИМЕЮЩИЕ
		|	НЕ(МАКСИМУМ(Подзапрос.ПрисутствуетВНовомСоставе) = ИСТИНА
		|			И МАКСИМУМ(Подзапрос.ПрисутствуетВСтаромСоставе) = ИСТИНА)";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(ТаблицаНовыхЗаписей.ЭлементСписка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ЭлементСписка
		|ПОМЕСТИТЬ ТаблицаНовыхЗаписей
		|ИЗ
		|	&ТаблицаНовыхЗаписей КАК ТаблицаНовыхЗаписей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Подзапрос.ЭлементСписка КАК ЭлементСписка,
		|	МАКСИМУМ(Подзапрос.ПрисутствуетВНовомСоставе) КАК ПрисутствуетВНовомСоставе,
		|	МАКСИМУМ(Подзапрос.ПрисутствуетВСтаромСоставе) КАК ПрисутствуетВСтаромСоставе
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаНовыхЗаписей.ЭлементСписка КАК ЭлементСписка,
		|		ИСТИНА КАК ПрисутствуетВНовомСоставе,
		|		ЛОЖЬ КАК ПрисутствуетВСтаромСоставе
		|	ИЗ
		|		ТаблицаНовыхЗаписей КАК ТаблицаНовыхЗаписей
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		НоменклатураСегмента.Номенклатура,
		|		ЛОЖЬ,
		|		ИСТИНА
		|	ИЗ
		|		РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|	ГДЕ
		|		НоменклатураСегмента.Сегмент = &Сегмент) КАК Подзапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	Подзапрос.ЭлементСписка
		|
		|ИМЕЮЩИЕ
		|	НЕ(МАКСИМУМ(Подзапрос.ПрисутствуетВНовомСоставе) = ИСТИНА
		|			И МАКСИМУМ(Подзапрос.ПрисутствуетВСтаромСоставе) = ИСТИНА)";
	КонецЕсли;
	Запрос.УстановитьПараметр("Сегмент", ДополнительныеПараметры.Сегмент);
	Запрос.УстановитьПараметр("ТаблицаНовыхЗаписей", ТаблицаЗначений);
	ТаблицаОбновленныхЗначений = Запрос.Выполнить().Выгрузить();
	КоэффициентБалансировкиНагрузки = 20; // 5% От общего количество записей в новом наборе.
	Если ТаблицаОбновленныхЗначений.Количество() < ТаблицаЗначений.Количество() / КоэффициентБалансировкиНагрузки Тогда
		ДополнительныеПараметры.Вставить("ДопустимоЧастичноеОбновление", Истина);
		ТаблицаЗначений = ТаблицаОбновленныхЗначений;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЦелесообразностьВыборочногоОбновленияГруппыПолучателей(ТаблицаЗначений, ДополнительныеПараметры)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаНовыхЗаписей.ЭлементСписка, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ЭлементСписка
	|ПОМЕСТИТЬ ТаблицаНовыхЗаписей
	|ИЗ
	|	&ТаблицаНовыхЗаписей КАК ТаблицаНовыхЗаписей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подзапрос.ЭлементСписка КАК ЭлементСписка,
	|	МАКСИМУМ(Подзапрос.ПрисутствуетВНовомСоставе) КАК ПрисутствуетВНовомСоставе,
	|	МАКСИМУМ(Подзапрос.ПрисутствуетВСтаромСоставе) КАК ПрисутствуетВСтаромСоставе
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаНовыхЗаписей.ЭлементСписка КАК ЭлементСписка,
	|		ИСТИНА КАК ПрисутствуетВНовомСоставе,
	|		ЛОЖЬ КАК ПрисутствуетВСтаромСоставе
	|	ИЗ
	|		ТаблицаНовыхЗаписей КАК ТаблицаНовыхЗаписей
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НоменклатураСегмента.Получатель,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		РегистрСведений.СоставГруппПолучателейСкидки КАК НоменклатураСегмента
	|	ГДЕ
	|		НоменклатураСегмента.ГруппаПолучателейСкидки = &ГруппаПолучателейСкидки) КАК Подзапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	Подзапрос.ЭлементСписка
	|
	|ИМЕЮЩИЕ
	|	НЕ(МАКСИМУМ(Подзапрос.ПрисутствуетВНовомСоставе) = ИСТИНА
	|			И МАКСИМУМ(Подзапрос.ПрисутствуетВСтаромСоставе) = ИСТИНА)";
	Запрос.УстановитьПараметр("ГруппаПолучателейСкидки", ДополнительныеПараметры.ГруппаПолучателейСкидки);
	Запрос.УстановитьПараметр("ТаблицаНовыхЗаписей", ТаблицаЗначений);
	ТаблицаОбновленныхЗначений = Запрос.Выполнить().Выгрузить();
	КоэффициентБалансировкиНагрузки = 20; // 5% От общего количество записей в новом наборе.
	Если ТаблицаОбновленныхЗначений.Количество() < ТаблицаЗначений.Количество() / КоэффициентБалансировкиНагрузки Тогда
		ДополнительныеПараметры.Вставить("ДопустимоЧастичноеОбновление", Истина);
		ТаблицаЗначений = ТаблицаОбновленныхЗначений;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

