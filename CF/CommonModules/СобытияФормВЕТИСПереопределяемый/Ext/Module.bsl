
#Область ОбработчикиСобытийОбъектов

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяСправочника - Строка - имя справочника, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыСправочника(ИмяСправочника, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяДокумента - Строка - имя документа, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыДокумента(ИмяДокумента, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра сведений, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыРегистраСведений(ИмяРегистра, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Возникает на сервере при создании формы.
//
// Параметры:
//  Форма - УправляемаяФорма - создаваемая форма,
//  Отказ - Булево - признак отказа от создания формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	Если Форма.ИмяФормы = "Документ.ВходящаяТранспортнаяОперацияВЕТИС.Форма.ФормаДокумента" Тогда
		Форма.Элементы.ГруппаТоварыБезРазбиенияСерия.Видимость = Ложь;
		Форма.Элементы.ТоварыСерия.Видимость = Ложь;
		Форма.Элементы.ГруппаТоварыБезРазбиенияХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
		Форма.Элементы.ТоварыХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	ИначеЕсли Форма.ИмяФормы = "Документ.ВходящаяТранспортнаяОперацияВЕТИС.Форма.ТоварыУточнение" Тогда
		Форма.Элементы.ТоварыУточнениеСерия.Видимость = Ложь;
		Форма.Элементы.ТоварыУточнениеХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	ИначеЕсли Форма.ИмяФормы = "Документ.ЗапросСкладскогоЖурналаВЕТИС.Форма.ФормаДокумента" Тогда
		Форма.Элементы.ТоварыСерия.Видимость = Ложь;
		Форма.Элементы.ТоварыХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	ИначеЕсли Форма.ИмяФормы = "Документ.ИнвентаризацияПродукцииВЕТИС.Форма.ФормаДокумента" Тогда
		Форма.Элементы.ТоварыСерия.Видимость = Ложь;
		Форма.Элементы.ТоварыХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	ИначеЕсли Форма.ИмяФормы = "Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Форма.ФормаДокумента" Тогда
		Форма.Элементы.ТоварыСерия.Видимость = Ложь;
		Форма.Элементы.ТоварыХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	ИначеЕсли Форма.ИмяФормы = "Документ.ПроизводственнаяОперацияВЕТИС.Форма.ФормаДокумента" Тогда
		Форма.Элементы.ТоварыСерия.Видимость = Ложь;
		Форма.Элементы.ТоварыХарактеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
		
		Форма.Элементы.СырьеСерия.Видимость  = Ложь;
		
		Форма.Элементы.СтраницаСырье.Видимость                  = Ложь;
		Форма.Элементы.СтраницаТехнологическийПроцесс.Видимость = Ложь;
	ИначеЕсли Форма.ИмяФормы = "Документ.СоответствиеНоменклатурыВЕТИС.Форма.ФормаЗаписи" Тогда
		
		Форма.Элементы.Характеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
		Форма.Элементы.Серия.Видимость = Ложь;
		
	ИначеЕсли Форма.ИмяФормы = "Документ.СоответствиеНоменклатурыВЕТИС.Форма.ФормаСписка" Тогда
		
		Форма.Элементы.Характеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
		Форма.Элементы.Серия.Видимость = Ложь;
	ИначеЕсли Форма.ИмяФормы = "Обработка.ПанельОбменВЕТИС.Форма.Форма" Тогда
		Форма.Элементы.ГруппаПроизводственнаяОперацияВЕТИС.Видимость = Ложь;
		Форма.Элементы.ГруппаОбъединениеЗаписейСкладскогоЖурналаВЕТИС.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при чтении объекта на сервере.
//
// Параметры:
//  Форма - УправляемаяФорма - форма читаемого объекта,
//  ТекущийОбъект - ДокументОбъект, СправочникОбъект - читаемый объект.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Выполняет действия при изменении номенклатуры в таблице Товары.
//
// Параметры:
//	Форма					- УправляемаяФорма				- Форма, в которой произошло событие.
//	ТекущаяСтрока			- ДанныеФормыЭлементКоллекции 	- Строка таблицы товаров.
//	КэшированныеЗначения	- Структура						- Сохраненные значения параметров, используемых при обработке строки таблицы.
//	ПараметрыЗаполнения		- Структура						- См. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//	ПараметрыУказанияСерий	- Структура						- Состав полей определен в функции 
//																НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Процедура ПриИзмененииНоменклатуры(Форма,
								ТекущаяСтрока,
								КэшированныеЗначения,
								ПараметрыЗаполнения,
								ПараметрыУказанияСерий = Неопределено) Экспорт
	
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПродукциюВЕТИС",                    ПараметрыЗаполнения);
	
	Если ПараметрыЗаполнения.Свойство("ПересчитатьКоличествоЕдиницВЕТИС") 
		И ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС Тогда
		ПересчитатьКоличествоЕдиницВЕТИС = Новый Структура("ЕдиницаИзмеренияВЕТИС, Суффикс");
		ЗаполнитьЗначенияСвойств(ПересчитатьКоличествоЕдиницВЕТИС, ПараметрыЗаполнения);
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницВЕТИС", ПересчитатьКоличествоЕдиницВЕТИС);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("ПересчитатьКоличествоЕдиницПоВЕТИС")
		И ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС Тогда
		ПересчитатьКоличествоЕдиницПоВЕТИС = Новый Структура("ЕдиницаИзмеренияВЕТИС, Суффикс");
		ЗаполнитьЗначенияСвойств(ПересчитатьКоличествоЕдиницПоВЕТИС, ПараметрыЗаполнения);
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницПоВЕТИС", ПересчитатьКоличествоЕдиницПоВЕТИС);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("ПересчитатьКоличествоЕдиницВЕТИСПоЕдиницеИзмерения")
		И ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИСПоЕдиницеИзмерения Тогда
		ПересчитатьКоличествоЕдиницВЕТИСПоЕдиницеИзмерения = Новый Структура("ЕдиницаИзмеренияВЕТИС, ИмяПоляКоличества");
		ЗаполнитьЗначенияСвойств(ПересчитатьКоличествоЕдиницВЕТИСПоЕдиницеИзмерения, ПараметрыЗаполнения);
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницВЕТИСПоЕдиницеИзмерения",
									ПересчитатьКоличествоЕдиницВЕТИСПоЕдиницеИзмерения);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("ПроверитьСериюРассчитатьСтатус")
		И ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус Тогда
		
		Если ПараметрыУказанияСерий <> Неопределено
			И ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяПоляСклад)
			И ИнтеграцияИСКлиентСервер.ЕстьРеквизитОбъекта(Форма[ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта], ПараметрыУказанияСерий.ИмяПоляСклад) Тогда
			
			Склад = Форма[ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта][ПараметрыУказанияСерий.ИмяПоляСклад];
			
		Иначе
			Склад = Неопределено;
		КонецЕсли;
		
		ПроверитьСериюРассчитатьСтатус = Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерий, Склад);
		
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПроверитьСериюРассчитатьСтатус);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
		Если Форма.ИмяФормы = "РегистрСведений.СоответствиеНоменклатурыВЕТИС.Форма.ФормаЗаписи" Тогда
		
			Форма.ХарактеристикиИспользуются = ТекущаяСтрока.ХарактеристикиИспользуются;
		
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Выполняет действия при изменении количества ВетИС в таблице Товары.
//
// Параметры:
//	Форма					- УправляемаяФорма				- Форма, в которой произошло событие.
//	ТекущаяСтрока			- ДанныеФормыЭлементКоллекции 	- Строка таблицы товаров.
//	КэшированныеЗначения	- Структура						- Сохраненные значения параметров, используемых при обработке строки таблицы.
//	ПараметрыЗаполнения		- Структура						- См. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииКоличестваВЕТИС(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	СтруктураДействий = Новый Структура;
	
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницПоВЕТИС Тогда
		ПересчитатьКоличествоЕдиницПоВЕТИС = Новый Структура("ЕдиницаИзмеренияВЕТИС, Суффикс");
		ЗаполнитьЗначенияСвойств(ПересчитатьКоличествоЕдиницПоВЕТИС, ПараметрыЗаполнения);
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницПоВЕТИС", ПересчитатьКоличествоЕдиницПоВЕТИС);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

// Выполняет действия при изменении количества в таблице Товары.
//
// Параметры:
//	Форма					- УправляемаяФорма				- Форма, в которой произошло событие.
//	ТекущаяСтрока			- ДанныеФормыЭлементКоллекции 	- Строка таблицы товаров.
//	КэшированныеЗначения	- Структура						- Сохраненные значения параметров, используемых при обработке строки таблицы.
//	ПараметрыЗаполнения		- Структура						- См. функцию ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//
Процедура ПриИзмененииКоличества(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	СтруктураДействий = Новый Структура;
	
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиницВЕТИС Тогда
		ПересчитатьКоличествоЕдиницВЕТИС = Новый Структура("ЕдиницаИзмеренияВЕТИС, Суффикс");
		ЗаполнитьЗначенияСвойств(ПересчитатьКоличествоЕдиницВЕТИС, ПараметрыЗаполнения);
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницВЕТИС", ПересчитатьКоличествоЕдиницВЕТИС);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Заполняет табличную часть Товары подобранными товарами.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой производится подбор,
//  ВыбранноеЗначение - Произвольный - данные, содержащие подобранную пользователем номенклатуру,
//  ПараметрыЗаполнения - Структура - см. функцию СобытияФормЕГАИСКлиент.СтруктураПараметрыЗаполнения.
//
Процедура ОбработкаРезультатаПодбораНоменклатуры(Форма, ВыбранноеЗначение, ПараметрыЗаполнения, ПараметрыСерий = Неопределено) Экспорт
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ИмяТабличнойЧасти = Неопределено;
	Если НЕ ПараметрыЗаполнения.Свойство("ИмяТабличнойЧасти", ИмяТабличнойЧасти) Тогда
		ИмяТабличнойЧасти = "Товары";
	КонецЕсли;
	
	ТекущаяСтрока = Неопределено;
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Форма.Объект[ИмяТабличнойЧасти].Добавить();
		
		СписокСвойств = "Номенклатура, Характеристика";
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, СписокСвойств);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		
		Если ПараметрыЗаполнения.Свойство("ЗаполнитьПродукциюВЕТИС") Тогда
			СтруктураДействий.Вставить("ЗаполнитьПродукциюВЕТИС", ПараметрыЗаполнения);
		КонецЕсли;
		
		СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый",
			Новый Структура("ИмяФормы, ИмяТабличнойЧасти", Форма.ИмяФормы, ИмяТабличнойЧасти));
		
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Характеристика".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить условное оформление,
//  ИмяПоляВводаХарактеристики - Строка - имя элемента формы "Характеристика",
//  ПутьКПолюОтбора - Строка - полный путь к реквизиту "Характеристики используются".
//
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма,
	                                                            ИмяПоляВводаХарактеристики = "ТоварыХарактеристика",
	                                                            ПутьКПолюОтбора = "Объект.Товары.ХарактеристикиИспользуются") Экспорт
	
	ГосударственныеИнформационныеСистемыПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма);
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Серия".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить условное оформление,
//
Процедура УстановитьУсловноеОформлениеСерийНоменклатуры(Форма,
	                                                    ИмяПоляВводаСерии = "ТоварыСерия",
	                                                    ПутьКПолюОтбораСтатусУказанияСерий = "Объект.Товары.СтатусУказанияСерий",
	                                                    ПутьКПолюОтбораТипНоменклатуры = "Объект.Товары.ТипНоменклатуры") Экспорт
	
	
КонецПроцедуры

#КонецОбласти
