

////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиПереопределяемый: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет массив актуальными видами электронных документов для прикладного решения.
//
// Параметры:
//  Массив - Массив - виды актуальных ЭД.
//
Процедура ПолучитьАктуальныеВидыЭД(Массив) Экспорт
	
	Массив.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	Массив.Добавить(Перечисления.ВидыЭД.СчетФактура);
	Массив.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	Массив.Добавить(Перечисления.ВидыЭД.КаталогТоваров);
	Массив.Добавить(Перечисления.ВидыЭД.ПрайсЛист);
	Массив.Добавить(Перечисления.ВидыЭД.ЗаказТовара);
	Массив.Добавить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	Массив.Добавить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);
	
КонецПроцедуры

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - Объект, ЛюбаяСсылка - документ или справочник источника.
//  ПараметрыЭД - Структура - параметры источника, необходимых для определения
//                настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//                Контрагент, СоглашениеЭД или Организация.
//  ФорматCML - Булево - если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//    в параметрах должны быть указаны соответствующие виды ЭД.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипИсточника = ТипЗнч(Источник);
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипИсточника);
	
	Если ТипИсточника = Тип("ДокументСсылка.ПоступлениеТоваров")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПоступлениеТоваров") Тогда
		
		Если ФорматCML Тогда
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
		Иначе
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
		КонецЕсли;
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент, ДокументОснование");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент  = ЗначенияРеквизитов.Контрагент;
			ДокументОснование = ЗначенияРеквизитов.ДокументОснование;
		Иначе
			Организация = Источник.Организация;
			Контрагент  = Источник.Контрагент;
			ДокументОснование = Источник.ДокументОснование;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученный")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		
		Если ЭтоКорректировочныйДокумент(Источник) Тогда
			ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		Иначе
			ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		
		Если ЭтоСсылка Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураПолученный.Организация КАК Организация
			|ИЗ
			|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
			|ГДЕ
			|	СчетФактураПолученный.Ссылка = &Источник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СчетФактураПолученныйДокументыОснования.ДокументОснование КАК ДокументОснование
			|ИЗ
			|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
			|ГДЕ
			|	СчетФактураПолученныйДокументыОснования.Ссылка = &Источник";
			Запрос.УстановитьПараметр("Источник", Источник);
			РезультатыЗапроса = Запрос.ВыполнитьПакет();
			Реквизиты = РезультатыЗапроса[0].Выбрать();
			Реквизиты.Следующий();
			
			Организация = Реквизиты.Организация;
			ДокументыОснования = РезультатыЗапроса[1].Выгрузить();
		Иначе
			Организация = Источник.Организация;
			ДокументыОснования = Источник.ДокументыОснования;
		КонецЕсли;
		
		Для Каждого Строка Из ДокументыОснования Цикл
			Если ЗначениеЗаполнено(Строка.ДокументОснование) Тогда
				
				РеквизитыОснования = Новый Структура("Контрагент");
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.ДокументОснование, РеквизитыОснования);
				Контрагент = ЗначенияРеквизитов.Контрагент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ЗаказТовара;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтчетКомитентуОПродажах") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомитентуОСписании")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтчетКомитентуОСписании") Тогда
		
		ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара;
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
		
		Если ФорматCML Тогда
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
		Иначе
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
		КонецЕсли;
		
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		Если ЭтоСсылка Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Организация, Контрагент");
			Организация = ЗначенияРеквизитов.Организация;
			Контрагент = ЗначенияРеквизитов.Контрагент;
		Иначе
			Организация = Источник.Организация;
			Контрагент = Источник.Контрагент;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыЭД.ВидЭД = ВидЭД;
	ПараметрыЭД.НаправлениеЭД = НаправлениеЭД;
	ПараметрыЭД.Организация = Организация;
	ПараметрыЭД.Контрагент = Контрагент;
	
КонецПроцедуры

// Определяет является ли документ информационной базы счет-фактурой.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ информационной базы.
//  Результат - Булево - является ли документ счет-фактурой.
//
Процедура ОпределитьДокументЯвляетсяСчетомФактурой(ДокументСсылка, Результат) Экспорт
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	Если ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданный")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Определение соответствий объектов библиотеки ЭД и прикладного решения.

// Определяет имя реквизита владельца справочника НоменклатураПоставщика.
//
// Параметры:
//  ИмяРеквизитаВладельца - строка - имя реквизита владельца.
//
Процедура ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков(ИмяРеквизитаВладельца) Экспорт
	
	ИмяРеквизитаВладельца = "Контрагент";
	
КонецПроцедуры

// Получает значение перечисления по имени объектов метаданных.
// 
// Параметры:
//  СоответствиеПеречислений - Соответствие - соответствие библиотечных и прикладных перечислений.
//
Процедура ПолучитьСоответствиеПеречислений(СоответствиеПеречислений) Экспорт
	
	СоответствиеПеречислений.Вставить("НДС", "СтавкиНДС");
	СоответствиеПеречислений.Вставить("ЮрФизЛицо", "ЮрФизЛицо");
	//СоответствиеПеречислений.Вставить("ВариантыОплатыКлиентом", "ВариантыОплатыКлиентом");
	//СоответствиеПеречислений.Вставить("ВариантыОплатыПоставщику", "ВариантыОплатыПоставщику");
	СоответствиеПеречислений.Вставить("ФормыОплаты", "ФормыОплаты");
	//СоответствиеПеречислений.Вставить("СпособРасчета", "СпособыРасчетаКомиссионногоВознаграждения");
	
КонецПроцедуры

// В процедуре указывается соответствие строковых представлений ставок НДС (используемые в БЭД)
// с прикладными значениями этих ставок.
//
// Параметры:
//   Соответствие - Соответствие - заполняемое соответствие ставок НДС.
//
// Пример:
//   Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
//   Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
//   Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
//   Соответствие.Вставить("20",      Перечисления.СтавкиНДС.НДС20);
//   Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
//   Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
//   Соответствие.Вставить("20/120",  Перечисления.СтавкиНДС.НДС20_120);
//   Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
//
Процедура ЗаполнитьСоответствиеСтавокНДС(Соответствие) Экспорт
	
	Соответствие.Вставить("0",       Перечисления.СтавкиНДС.НДС0);
	Соответствие.Вставить("10",      Перечисления.СтавкиНДС.НДС10);
	Соответствие.Вставить("18",      Перечисления.СтавкиНДС.НДС18);
	Соответствие.Вставить("20",      Перечисления.СтавкиНДС.НДС20);
	Соответствие.Вставить("10/110",  Перечисления.СтавкиНДС.НДС10_110);
	Соответствие.Вставить("18/118",  Перечисления.СтавкиНДС.НДС18_118);
	Соответствие.Вставить("20/120",  Перечисления.СтавкиНДС.НДС20_120);
	Соответствие.Вставить("без НДС", Перечисления.СтавкиНДС.БезНДС);
	Соответствие.Вставить("НДС исчисляется налоговым агентом", Перечисления.СтавкиНДС.БезНДС);
	
КонецПроцедуры

Функция ЭтоКорректировочныйДокумент(СсылкаНаОбъект) Экспорт
	
	Результат = Ложь;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Если СсылкаНаОбъект.Пустая() Тогда
			Результат = Ложь;
		Иначе
			Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Исправление");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Настройка обмена ЭД.

// Процедура возвращает признак использования справочника Партнеров в качестве
// дополнительной аналитики к справочнику Контрагенты.
//
// Параметры:
//  ИспользуетсяСправочникПартнеры - Булево - флаг использования в библиотеке справочника Партнеры.
//
Процедура ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры) Экспорт
	
	ИспользуетсяСправочникПартнеры = Ложь;
	
КонецПроцедуры

// Процедура возвращает признак использования справочника "Характеристики номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникХарактеристикиНоменклатуры - Булево - флаг использования справочника "Характеристики номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникХарактеристикиНоменклатуры(ИспользуетсяСправочникХарактеристикиНоменклатуры) Экспорт
	
	ИспользуетсяСправочникХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
КонецПроцедуры

// Процедура возвращает признак использования справочника "Упаковка номенклатуры" в качестве
// дополнительной аналитики к справочнику Номенклатура.
//
// Параметры:
//  ИспользуетсяСправочникУпаковкиНоменклатуры - Булево - флаг использования справочника "Упаковки номенклатуры".
//
Процедура ДополнительнаяАналитикаСправочникУпаковкиНоменклатуры(ИспользуетсяСправочникУпаковкиНоменклатуры) Экспорт
	
	ИспользуетсяСправочникУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
КонецПроцедуры

// Заполняет список команд ЭДО в прикладном решении.
// 
// Параметры:
//  СоставКомандЭДО - Структура - структура состава команд ЭДО.
//    Исходящие - Массив - состав объектов, например "Документ.РеализацияТоваровУслуг".
//    Входящие - Массив - состав объектов.
//    БезПодписи - Массив - состав объектов для обмена без ЭП.
//    Интеркампани - Массив - состав объектов Интеркампани.
//
Процедура ПодготовитьСтруктуруОбъектовКомандЭДО(СоставКомандЭДО) Экспорт
	
	СоставКомандЭДО.Исходящие.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ВозвратТоваровПоставщику");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ОтчетКомитентуОПродажах");
	СоставКомандЭДО.Исходящие.Добавить("Документ.ОтчетКомитентуОСписании");
	СоставКомандЭДО.Исходящие.Добавить("Документ.СчетФактураВыданный");
	
	СоставКомандЭДО.Входящие.Добавить("Документ.ПоступлениеТоваров");
	СоставКомандЭДО.Входящие.Добавить("Документ.СчетФактураПолученный");
	
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ЗаказПоставщику");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ВозвратТоваровПоставщику");
	СоставКомандЭДО.БезПодписи.Добавить("Документ.ПоступлениеТоваров");
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов.

// Работа с деревом данных ФНС.

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляУПДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	СчетФактураСсылка = Неопределено;
	ТипДокумента = ТипЗнч(СсылкаНаОбъект);
	Если ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		СчетФактураСсылка = СсылкаНаОбъект;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
		|	И СчетФактураВыданный.Проведен";
		Запрос.УстановитьПараметр("ДокументОснование", СсылкаНаОбъект);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СчетФактураСсылка = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактураСсылка) ТОгда
		ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС(СчетФактураСсылка, СтруктураЭД, ДеревоДанных, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляДОПИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация покупателя).
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляУПДИнформацииПокупателяФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование) = ТИП(Документ.ПоступлениеТоваров)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Порядок
		|ПОМЕСТИТЬ ВТ_Основание
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
		|ГДЕ
		|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка = &ВладелецЭД
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Дата КАК Дата,
		|	ПоступлениеТоваровУслуг.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	ПоступлениеТоваровУслуг.Организация.ИНН КАК ОрганизацияИНН,
		|	ПоступлениеТоваровУслуг.Организация.КПП КАК ОрганизацияКПП
		|ИЗ
		|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Основание КАК ВТ_Основание
		|		ПО ПоступлениеТоваровУслуг.Ссылка = ВТ_Основание.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетФактураПолученный.Дата,
		|	СчетФактураПолученный.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
		|	СчетФактураПолученный.Организация.ИНН КАК ОрганизацияИНН,
		|	СчетФактураПолученный.Организация.КПП КАК ОрганизацияКПП
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Основание КАК ВТ_Основание
		|		ПО СчетФактураПолученный.Ссылка = ВТ_Основание.ДокументОснование";
	
	Запрос.УстановитьПараметр("ВладелецЭД", СтруктураЭД.ВладелецЭД);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДатаПолученияТоваров = ТекущаяДатаСеанса();
	СодержаниеОперации   = "-";
	СоставительДокумента = "-";
	Если НЕ РезультатыЗапроса[1].Пустой() Тогда
		
		Выборка = РезультатыЗапроса[1].Выбрать();
		Выборка.Следующий();
		
		ДатаПолученияТоваров = Выборка.Дата;
		
		СоставительДокумента = ?(ЗначениеЗаполнено(Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				Выборка.ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН, Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН %2'"),
				Выборка.ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН));
		
		СодержаниеОперации = НСтр("ru = 'Товары принял без претензий'");
		
	ИначеЕсли НЕ РезультатыЗапроса[2].Пустой() Тогда
		
		Выборка = РезультатыЗапроса[2].Выбрать();
		Выборка.Следующий();
		
		ДатаПолученияТоваров = Выборка.Дата;
		
		СоставительДокумента = ?(ЗначениеЗаполнено(Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				Выборка.ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН, Выборка.ОрганизацияКПП),
			СтрШаблон(НСтр("ru = '%1, ИНН %2'"),
				Выборка.ОрганизацияНаименованиеПолное, Выборка.ОрганизацияИНН));
		
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СоставительДокумента);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаПолученияТоваров", ДатаПолученияТоваров);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", СодержаниеОперации);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УПД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо 
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляСЧФИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Номер КАК Номер,
	|	СчетФактураВыданный.Дата КАК Дата,
	|	СчетФактураВыданный.Исправление КАК Исправление,
	|	СчетФактураВыданный.НомерИсправления КАК НомерИсправления,
	|	СчетФактураВыданный.Дата КАК ДатаИсправления,
	|	СчетФактураВыданный.КодВидаОперации КАК ВидОперации,
	|	СчетФактураВыданный.Организация КАК Организация,
	|	СчетФактураВыданный.Контрагент КАК Контрагент,
	|	СчетФактураВыданный.ДокументОснование КАК ДокументОснование,
	|	СчетФактураВыданный.ДокументОснование.Договор КАК ДоговорКонтрагента,
	|	СчетФактураВыданный.ДокументОснование.Договор.Наименование КАК НаименованиеДоговора,
	|	"""" КАК НомерДоговора,
	|	"""" КАК ДатаДоговора,
	|	"""" КАК ИдентификаторГосКонтракта,
	|	""RUB"" КАК Валюта,
	|	""643"" КАК ВалютаКод,
	|	""RUB"" КАК ВалютаНаименование,
	|	СчетФактураВыданный.СчетФактураОснование КАК СчетФактураОснование
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТовары.Ссылка КАК Ссылка,
	|	ВозвратТовары.НомерСтроки КАК НомерСтроки,
	|	НоменклатураПоставщиков.Номенклатура КАК НоменклатураПоставщика,
	|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
	|	НоменклатураПоставщиков.Номенклатура.Код КАК НоменклатураКод,
	|	НоменклатураПоставщиков.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	НоменклатураПоставщиков.Артикул КАК НоменклатураАртикул,
	|	НоменклатураПоставщиков.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
	|	0 КАК ХарактеристикаКод,
	|	НоменклатураПоставщиков.Характеристика.Наименование КАК ХарактеристикаНаименование,
	|	ВЫБОР
	|		КОГДА НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Код ЕСТЬ NULL
	|			ТОГДА НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Код ЕСТЬ NULL
	|			ТОГДА НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияКод,
	|	ВЫБОР
	|		КОГДА НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Наименование ЕСТЬ NULL
	|			ТОГДА НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК ЕдиницаИзмеренияНаименование,
	|	НоменклатураПоставщиков.Идентификатор КАК ИдТовараУКонтрагента,
	|	НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ВозвратТовары.Количество КАК КоличествоДоКорректировки,
	|	ВозвратТовары.Количество КАК Количество,
	|	ВозвратТовары.Цена КАК ЦенаДоКорректировки,
	|	ВозвратТовары.Цена КАК Цена,
	|	ВозвратТовары.Сумма КАК СуммаДоКорректировки,
	|	ВозвратТовары.Сумма КАК Сумма,
	|	ВозвратТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВозвратТовары.СуммаНДС КАК СуммаНДСДоКорректировки,
	|	ВозвратТовары.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА Возврат.ЦенаВключаетНДС
	|			ТОГДА ВозвратТовары.Сумма
	|		ИНАЧЕ ВозвратТовары.Сумма + ВозвратТовары.СуммаНДС
	|	КОНЕЦ КАК СуммаСНДСДоКорректировки,
	|	ВЫБОР
	|		КОГДА Возврат.ЦенаВключаетНДС
	|			ТОГДА ВозвратТовары.Сумма
	|		ИНАЧЕ ВозвратТовары.Сумма + ВозвратТовары.СуммаНДС
	|	КОНЕЦ КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА Возврат.ЦенаВключаетНДС
	|			ТОГДА ВозвратТовары.Сумма - ВозвратТовары.СуммаНДС
	|		ИНАЧЕ ВозвратТовары.Сумма
	|	КОНЕЦ КАК СуммаБезНДСДоКорректировки,
	|	ВЫБОР
	|		КОГДА Возврат.ЦенаВключаетНДС
	|			ТОГДА ВозвратТовары.Сумма - ВозвратТовары.СуммаНДС
	|		ИНАЧЕ ВозвратТовары.Сумма
	|	КОНЕЦ КАК СуммаБезНДС,
	|	"""" КАК НомерГТД,
	|	"""" КАК СтранаПроисхожденияКод,
	|	"""" КАК СтранаПроисхожденияНаименование
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК Возврат
	|		ПО СчетФактура.ДокументОснование = Возврат.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТовары
	|		ПО (Возврат.Ссылка = ВозвратТовары.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|		ПО Возврат.Контрагент = НоменклатураПоставщиков.Поставщик
	|			И (НоменклатураПоставщиков.Магазин = &ПустойМагазин)
	|			И ВозвратТовары.Номенклатура = НоменклатураПоставщиков.Номенклатура
	|			И ВозвратТовары.Характеристика = НоменклатураПоставщиков.Характеристика
	|			И ВозвратТовары.Упаковка = НоменклатураПоставщиков.Упаковка
	|ГДЕ
	|	СчетФактура.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетКомитенту.Ссылка КАК Ссылка,
	|	1 КАК НомерСтроки,
	|	НоменклатураПоставщиков.Номенклатура КАК НоменклатураПоставщика,
	|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
	|	НоменклатураПоставщиков.Номенклатура.Код КАК НоменклатураКод,
	|	НоменклатураПоставщиков.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
	|	НоменклатураПоставщиков.Артикул КАК НоменклатураАртикул,
	|	НоменклатураПоставщиков.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
	|	0 КАК ХарактеристикаКод,
	|	НоменклатураПоставщиков.Характеристика.Наименование КАК ХарактеристикаНаименование,
	|	ВЫБОР
	|		КОГДА НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Код ЕСТЬ NULL
	|			ТОГДА НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Код ЕСТЬ NULL
	|			ТОГДА НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияКод,
	|	ВЫБОР
	|		КОГДА НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Наименование ЕСТЬ NULL
	|			ТОГДА НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК ЕдиницаИзмеренияНаименование,
	|	НоменклатураПоставщиков.Идентификатор КАК ИдТовараУКонтрагента,
	|	НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	1 КАК КоличествоДоКорректировки,
	|	1 КАК Количество,
	|	ОтчетКомитенту.СуммаВознаграждения КАК ЦенаДоКорректировки,
	|	ОтчетКомитенту.СуммаВознаграждения КАК Цена,
	|	ОтчетКомитенту.СуммаВознаграждения КАК СуммаДоКорректировки,
	|	ОтчетКомитенту.СуммаВознаграждения КАК Сумма,
	|	ОтчетКомитенту.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ОтчетКомитенту.СуммаНДСВознаграждения КАК СуммаНДСДоКорректировки,
	|	ОтчетКомитенту.СуммаНДСВознаграждения КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ОтчетКомитенту.ЦенаВключаетНДС
	|			ТОГДА ОтчетКомитенту.СуммаВознаграждения
	|		ИНАЧЕ ОтчетКомитенту.СуммаВознаграждения + ОтчетКомитенту.СуммаНДСВознаграждения
	|	КОНЕЦ КАК СуммаСНДСДоКорректировки,
	|	ВЫБОР
	|		КОГДА ОтчетКомитенту.ЦенаВключаетНДС
	|			ТОГДА ОтчетКомитенту.СуммаВознаграждения
	|		ИНАЧЕ ОтчетКомитенту.СуммаВознаграждения + ОтчетКомитенту.СуммаНДСВознаграждения
	|	КОНЕЦ КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА ОтчетКомитенту.ЦенаВключаетНДС
	|			ТОГДА ОтчетКомитенту.СуммаВознаграждения - ОтчетКомитенту.СуммаНДСВознаграждения
	|		ИНАЧЕ ОтчетКомитенту.СуммаВознаграждения
	|	КОНЕЦ КАК СуммаБезНДСДоКорректировки,
	|	ВЫБОР
	|		КОГДА ОтчетКомитенту.ЦенаВключаетНДС
	|			ТОГДА ОтчетКомитенту.СуммаВознаграждения - ОтчетКомитенту.СуммаНДСВознаграждения
	|		ИНАЧЕ ОтчетКомитенту.СуммаВознаграждения
	|	КОНЕЦ КАК СуммаБезНДС,
	|	"""" КАК НомерГТД,
	|	"""" КАК СтранаПроисхожденияКод,
	|	"""" КАК СтранаПроисхожденияНаименование
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитенту
	|		ПО СчетФактура.ДокументОснование = ОтчетКомитенту.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|		ПО ОтчетКомитенту.Контрагент = НоменклатураПоставщиков.Поставщик
	|			И (НоменклатураПоставщиков.Магазин = &ПустойМагазин)
	|			И ОтчетКомитенту.УслугаКомиссионногоВознаграждения = НоменклатураПоставщиков.Номенклатура
	|			И НоменклатураПоставщиков.Характеристика = &ПустаяХарактеристика
	|			И НоменклатураПоставщиков.Упаковка = &ПустаяУпаковка
	|ГДЕ
	|	СчетФактура.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураВыданныйПлатежноРасчетныеДокументы.НомерСтроки КАК НомерСтроки,
	|	СчетФактураВыданныйПлатежноРасчетныеДокументы.НомерПлатежноРасчетногоДокумента КАК НомерПлатежноРасчетногоДокумента,
	|	СчетФактураВыданныйПлатежноРасчетныеДокументы.ДатаПлатежноРасчетногоДокумента КАК ДатаПлатежноРасчетногоДокумента
	|ИЗ
	|	Документ.СчетФактураВыданный.ПлатежноРасчетныеДокументы КАК СчетФактураВыданныйПлатежноРасчетныеДокументы
	|ГДЕ
	|	СчетФактураВыданныйПлатежноРасчетныеДокументы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ПустаяУпаковка", Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойМагазин", Справочники.Магазины.ПустаяСсылка());
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("ВыборкаШапки", МассивРезультатов[0].Выбрать());
	
	Если МассивРезультатов[1].Пустой() Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Счет-фактура выгружается только на основании возврата поставщику или отчета комитенту о продажах.");
		Возврат;
	Иначе
		СтруктураДанных.Вставить("ВыборкаТоваров", МассивРезультатов[1].Выбрать());
	КонецЕсли;
	
	Если НЕ МассивРезультатов[2].Пустой() Тогда
		СтруктураДанных.Вставить("ВыборкаПРД", МассивРезультатов[2].Выбрать());
	КонецЕсли;
	
	ВыборкаШапки = СтруктураДанных.ВыборкаШапки;
	ВыборкаШапки.Следующий();
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаСчетаФактуры", СсылкаНаОбъект);
	
	Если ВыборкаШапки.Исправление Тогда
		
		// Обработка ошибки с открытием формы по навигационной ссылке.
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект, "НомерИсправления");
		ИмяФормы = "Документ.РеализацияТоваровУслуг.ФормаОбъекта";
		ПараметрыФормы = Новый Структура("Ключ", СсылкаНаОбъект);
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.НомерИсправления", НавигационнаяСсылка, ИмяФормы, ПараметрыФормы);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",
			ВыборкаШапки.НомерИсправления, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.Дата");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",
			ВыборкаШапки.ДатаИсправления, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.НомерИсходногоДокумента");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента",
			ВыборкаШапки.НомерИсходногоДокумента, ПараметрыОбработкиОшибок);
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
			СсылкаНаОбъект, "Объект.ДатаИсходногоДокумента");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",
			ВыборкаШапки.ДатаИсходногоДокумента, ПараметрыОбработкиОшибок);
		
	Иначе
		// Обработка ошибки с открытием формы по навигационной ссылке.
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект, "НомерЭД");
		ИмяФормы = "Документ.РеализацияТоваровУслуг.ФормаОбъекта";
		ПараметрыФормы = Новый Структура("Ключ", СсылкаНаОбъект);
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект,
			"Объект.НомерЭД", НавигационнаяСсылка, ИмяФормы, ПараметрыФормы);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", ВыборкаШапки.Номер,
			ПараметрыОбработкиОшибок);
			
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект, 
			"Объект.Дата", НавигационнаяСсылка, ИмяФормы, ПараметрыФормы);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",  ВыборкаШапки.Дата,
			ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаШапки.ИдентификаторГосКонтракта) Тогда
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(СсылкаНаОбъект, 
			"Объект.ИдентификаторГосКонтракта");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ДополнительныеСведенияОбУчастниках.ИдентификаторГосКонтракта", ВыборкаШапки.ИдентификаторГосКонтракта,
			ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	ВидСчетаФактуры = "Реализация";
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры", ВидСчетаФактуры);
	
	МассивОснований = Новый Массив;
	Если ЗначениеЗаполнено(ВыборкаШапки.ДокументОснование) Тогда
		МассивОснований.Добавить(ВыборкаШапки.ДокументОснование);
	КонецЕсли;
	ЗаполнитьДеревоДанныхУПД(СтруктураДанных, СтруктураЭД, ДеревоДанных);
	
	Если ЗначениеЗаполнено(ВыборкаШапки.СчетФактураОснование) Тогда
		МассивОснований.Добавить(ВыборкаШапки.СчетФактураОснование);
	КонецЕсли;
	
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		СсылкаНаОбъект, "Объект.СчетФактураОснование");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры",
		МассивОснований, ПараметрыОбработкиОшибок);
	
	Если СтруктураДанных.Свойство("ВыборкаПРД") Тогда
		
		ПлатежныеДокументы = Новый ТаблицаЗначений;
		ПлатежныеДокументы.Колонки.Добавить("НомерСтроки");
		ПлатежныеДокументы.Колонки.Добавить("НомерПРД");
		ПлатежныеДокументы.Колонки.Добавить("ДатаПРД");
		
		ВыборкаПРД = СтруктураДанных.ВыборкаПРД;
		Пока ВыборкаПРД.Следующий() Цикл
			НоваяСтрока = ПлатежныеДокументы.Добавить();
			НоваяСтрока.НомерСтроки = ВыборкаПРД.НомерСтроки;
			НоваяСтрока.НомерПРД    = ВыборкаПРД.НомерПлатежноРасчетногоДокумента;
			НоваяСтрока.ДатаПРД     = ВыборкаПРД.ДатаПлатежноРасчетногоДокумента;
		КонецЦикла;
		
		// Дополним таблицу платежных документов параметрами обработки ошибок.
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ПлатежныеДокументы,
			"НомерПРД", СсылкаНаОбъект, "Объект.ПлатежноРасчетныеДокументы.НомерПлатежноРасчетногоДокумента",, "НомерСтроки");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ПлатежныеДокументы,
			"ДатаПРД", СсылкаНаОбъект, "Объект.ПлатежноРасчетныеДокументы.ДатаПлатежноРасчетногоДокумента",, "НомерСтроки");
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПлатежныеДокументы, "ПлатежноРасчетныеДокументы");
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляУКДИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляДИСИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация покупателя).
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляУКДИнформацииПокупателяФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа УКД (информация продавца).
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеДляКСЧФИнформацияПродавцаФНС(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Торг12 титул покупателя.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоТорг12ПокупательФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	ДатаПолученияТовара = ДатаПолученияТовараПриемкиРабот(СтруктураЭД);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, 
		"ДатаПолученияГруза", ДатаПолученияТовара);
	
КонецПроцедуры

// Подготавливает данные титула заказчика для электронного документа типа Акт выполненных работ формата 5.01.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоАкт501ЗаказчикФНС(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
	ДатаПриемкиРабот = ДатаПолученияТовараПриемкиРабот(СтруктураЭД);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, 
		"СведенияПоВыполнениюУслуг.ДатаЗаказа", ДатаПриемкиРабот);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа СоглашениеОбИзмененииСтоимостиПолучатель.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоКорректировочномуДокументуПолучатель(СсылкаНаЭД, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПередачаТоваровПродавец.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПередачаТоваровПродавец(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Дата КАК Дата,
	|	ВозвратТоваровПоставщику.СуммаДокумента КАК СуммаДокумента,
	|	ВозвратТоваровПоставщику.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВозвратТоваровПоставщику.Комментарий КАК ДополнительнаяИнформация,
	|	ВозвратТоваровПоставщику.Номер КАК Номер,
	|	ВозвратТоваровПоставщику.Организация КАК Организация,
	|	ВозвратТоваровПоставщику.Контрагент КАК Контрагент,
	|	ВозвратТоваровПоставщику.Номер КАК НомерПоДаннымПоставщика,
	|	ВозвратТоваровПоставщику.Дата КАК ДатаПоДаннымПоставщика,
	|	"""" КАК ДокументОснование
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	НоменклатураПоставщиков.Номенклатура КАК НоменклатураПоставщика,
	|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
	|	НоменклатураПоставщиков.Номенклатура.Код КАК НоменклатураКод,
	|	НоменклатураПоставщиков.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
	|	НоменклатураПоставщиков.Артикул КАК НоменклатураАртикул,
	|	НоменклатураПоставщиков.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
	|	0 КАК ХарактеристикаКод,
	|	НоменклатураПоставщиков.Характеристика.Наименование КАК ХарактеристикаНаименование,
	|	ВЫБОР
	|		КОГДА НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Код ЕСТЬ NULL
	|			ТОГДА НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Код ЕСТЬ NULL
	|			ТОГДА НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияКод,
	|	ВЫБОР
	|		КОГДА НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Наименование ЕСТЬ NULL
	|			ТОГДА НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК ЕдиницаИзмеренияНаименование,
	|	НоменклатураПоставщиков.Идентификатор КАК ИдТовараУКонтрагента,
	|	НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	Товары.Количество КАК МассаНетто,
	|	Товары.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ЦенаВключаетНДС
	|			ТОГДА Товары.Сумма - Товары.СуммаНДС
	|		ИНАЧЕ Товары.Сумма
	|	КОНЕЦ КАК СуммаБезНДС,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ЦенаВключаетНДС
	|			ТОГДА Товары.Сумма
	|		ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
	|	КОНЕЦ КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА Товары.КоличествоУпаковок = 0
	|			ТОГДА Товары.Цена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.Ссылка.ЦенаВключаетНДС
	|					ТОГДА ВЫРАЗИТЬ((Товары.Сумма - Товары.СуммаНДС) / Товары.КоличествоУпаковок КАК ЧИСЛО(15, 2))
	|				ИНАЧЕ Товары.Цена
	|			КОНЕЦ
	|	КОНЕЦ КАК Цена,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|		ПО Товары.Ссылка.Контрагент = НоменклатураПоставщиков.Поставщик
	|			И (НоменклатураПоставщиков.Магазин = &ПустойМагазин)
	|			И Товары.Номенклатура = НоменклатураПоставщиков.Номенклатура
	|			И Товары.Характеристика = НоменклатураПоставщиков.Характеристика
	|			И Товары.Упаковка = НоменклатураПоставщиков.Упаковка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ПустойМагазин", Справочники.Магазины.ПустаяСсылка());
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = МассивРезультатовЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		СсылкаНаОбъект, "Объект");
	
	СведенияОПоставщике = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.Дата);
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Поставщик",   "Юр", РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Грузоотправитель",   "Юр", РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Плательщик", "Юр", РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Грузополучатель", "Юр", РеквизитыШапки.Дата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ВалютаКод", НСтр("ru = '643'"), ПараметрыОбработкиОшибок);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ВалютаНаименование", НСтр("ru = 'руб.'"), ПараметрыОбработкиОшибок);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "НомерТоварнойНакладной", РеквизитыШапки.Номер);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДатаТоварнойНакладной", РеквизитыШапки.Дата);

	ТаблицаТоваров = МассивРезультатовЗапроса[1].Выгрузить();
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
			"ИдТовараУКонтрагента", "НоменклатураПоставщика", "Объект.Идентификатор", НСтр("ru = 'У номенклатуры поставщика не заполнен реквизит ""Идентификатор"". Возможно, она некорректно загружена из базы поставщика.'"), "НомерСтроки");
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "ТаблицаТоваров");
	
	Сумма = ТаблицаТоваров.Итог("Сумма");
	НДС = ТаблицаТоваров.Итог("СуммаНДС");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ВсегоПоНакладной.СуммаБезНДС", Сумма - НДС);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ВсегоПоНакладной.СуммаНДС", НДС);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ВсегоПоНакладной.СуммаСНДС", Сумма);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПередачаРаботИсполнитель.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - ссылка на ЭД, по которому необходимо сформировать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПередачаРаботИсполнитель(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт
	
КонецПроцедуры

// Работа со деревом данных CML

// Подготавливает данные для электронного документа типа Реквизиты организации формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДанных - ДеревоЗначений - дерево значений, соответствующее макету РеквизитыОрганизации обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеРеквизитыОрганизации(СсылкаНаОбъект, СтруктураЭД, ДеревоДанных, Отказ) Экспорт

КонецПроцедуры

// Подготавливает данные для электронного документа типа КаталогТоваров формата CML 2.
//
// Параметры:
//  Организация - СправочникСсылка - ссылка на объект информационной базы, по которому необходимо
//                                   создать электронный документ.
//  ТоварыКаталога - Массив - список товаров для заполнения каталога.
//  ДеревоДанных - ДеревоЗначений - дерево данных заполнения электронного документа.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоКаталогуТоваровCML(Организация, ТоварыКаталога, ДеревоДанных, Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПрайсЛист формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - Дерево значений, соответствующее макету ПрайсЛист обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа Счет формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету СчетНаОплату обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ЗаказТоваров формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ЗаказТовара обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Дата КАК Дата,
	|	&ВалютаКод КАК ВалютаКод,
	|	&Валюта КАК Валюта,
	|	ЗаказПоставщику.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказПоставщику.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЗаказПоставщику.Комментарий КАК ДополнительнаяИнформация,
	|	ЗаказПоставщику.Номер КАК Номер,
	|	ЗаказПоставщику.Организация КАК Организация,
	|	ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказПоставщику.Номер КАК НомерПоДаннымПоставщика,
	|	ЗаказПоставщику.Дата КАК ДатаПоДаннымПоставщика,
	|	"""" КАК АдресДоставки,
	|	"""" КАК АдресДоставкиЗначенияПолей,
	|	&Доставка КАК СпособДоставки,
	|	"""" КАК ДокументОснование
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
	|	НоменклатураПоставщиков.Номенклатура КАК НоменклатураПоставщика,
	|	НоменклатураПоставщиков.Номенклатура.Наименование КАК Наименование,
	|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
	|	НоменклатураПоставщиков.Характеристика.Наименование КАК НаименованиеХарактеристики,
	|	НоменклатураПоставщиков.Упаковка КАК Упаковка,
	|	НоменклатураПоставщиков.Артикул КАК Артикул,
	|	НоменклатураПоставщиков.Идентификатор КАК ИдТовараУКонтрагента,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	Товары.Упаковка.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	Товары.Упаковка.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ Товары.Упаковка.Коэффициент
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР КОГДА Товары.Ссылка.ЦенаВключаетНДС ТОГДА Товары.Сумма ИНАЧЕ Товары.Сумма + Товары.СуммаНДС КОНЕЦ КАК СуммаСНДС,
	|	0 КАК СуммаСкидки,
	|	0 КАК ПроцентСкидки,
	|	Товары.Цена КАК Цена,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка КАК ЕдиницаИзмерения
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|		ПО Товары.Ссылка.Контрагент = НоменклатураПоставщиков.Поставщик
	|			И НоменклатураПоставщиков.Магазин = &ПустойМагазин
	|			И Товары.Номенклатура = НоменклатураПоставщиков.Номенклатура
	|			И Товары.Характеристика = НоменклатураПоставщиков.Характеристика
	|			И Товары.Упаковка = НоменклатураПоставщиков.Упаковка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыОплат.ВидПлатежа КАК ВидОплаты,
	|	ЭтапыОплат.ДатаПлатежа КАК ДатаПлатежа,
	|	ЭтапыОплат.ПроцентОплаты КАК ПроцентПлатежа,
	|	ЭтапыОплат.Сумма КАК СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказПоставщику.ЭтапыОплат КАК ЭтапыОплат
	|ГДЕ
	|	ЭтапыОплат.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыОплат.НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ПустойМагазин", Справочники.Магазины.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВалютаКод", НСтр("ru = '643'"));
	Запрос.УстановитьПараметр("Валюта", НСтр("ru = 'руб.'"));
	Запрос.УстановитьПараметр("Доставка", НСтр("ru = 'Доставка'"));
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки             = МассивРезультатовЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	ТаблицаЭтаповГрафикаОплаты = МассивРезультатовЗапроса[2].Выгрузить();
	
	СведенияОПоставщике = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.Дата);
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец",   "Юр", РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель", "Юр", РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Получатель", "Юр", РеквизитыШапки.Дата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", РеквизитыШапки.ВалютаКод);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс", 1);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", РеквизитыШапки.СуммаДокумента);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Комментарий", РеквизитыШапки.ДополнительнаяИнформация);
	
	// заполнение полей дерева данных Доставка
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.СпособДоставки",	РеквизитыШапки.СпособДоставки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставки", РеквизитыШапки.АдресДоставки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Доставка.АдресДоставкиЗначенияПолей",
		РеквизитыШапки.АдресДоставкиЗначенияПолей);
	
			
	ТаблицаТоваров = МассивРезультатовЗапроса[1].Выгрузить();
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
			"ИдТовараУКонтрагента", "НоменклатураПоставщика", "Объект.Идентификатор", НСтр("ru = 'У номенклатуры поставщика не заполнен реквизит ""Идентификатор"". Возможно, она некорректно загружена из базы поставщика.'"), "НомерСтроки");
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаИтог", ТаблицаТоваров.Итог("Сумма"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНалогаИтог", ТаблицаТоваров.Итог("СуммаНДС"));
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", РеквизитыШапки.ЦенаВключаетНДС);
	
	ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Всего наименований %1, на сумму %2'"),
						ТаблицаТоваров.Количество(), 
						Формат(РеквизитыШапки.СуммаДокумента, ОбщегоНазначенияРТКлиентСерверПовтИсп.ФорматСуммовыхПоказателей()));
	
	СуммаПрописью  = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента);
	ИтоговаяСтрока = ИтоговаяСтрока + " (" + СуммаПрописью + ")";
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
	ТаблицаЭтаповГрафикаОплаты = МассивРезультатовЗапроса[2].Выгрузить();
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаЭтаповГрафикаОплаты, "ГрафикОплаты");
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтветНаЗаказ формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ОтветНаЗаказ обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитенту формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//    Параметр ДополнительныеРеквизитыДляТаблицыТоваров в общей структуре параметров предназначен для заполнения
//    колонки ДополнительныеРеквизиты в таблице товаров.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ОтчетКомиссионераОПродажах обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОтчетКомитенту.Дата КАК Дата,
	|	ОтчетКомитенту.СуммаДокумента КАК СуммаДокумента,
	|	ОтчетКомитенту.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОтчетКомитенту.Комментарий КАК ДополнительнаяИнформация,
	|	ОтчетКомитенту.Номер КАК Номер,
	|	ОтчетКомитенту.Организация КАК Организация,
	|	ОтчетКомитенту.Контрагент КАК Контрагент,
	|	ОтчетКомитенту.НачалоПериода КАК НачалоПериода,
	|	ОтчетКомитенту.КонецПериода КАК КонецПериода,
	|	ОтчетКомитенту.СуммаВознаграждения КАК СуммаВознаграждения,
	|	ОтчетКомитенту.СтавкаНДСВознаграждения КАК СтавкаНДСВознаграждения,
	|	ОтчетКомитенту.СуммаНДСВознаграждения КАК СуммаНДСВознаграждения,
	|	ОтчетКомитенту.ПроцентКомиссионногоВознаграждения КАК ПроцентКомиссионногоВознаграждения,
	|	"""" КАК ДокументОснование
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитенту
	|ГДЕ
	|	ОтчетКомитенту.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	НоменклатураПоставщиков.Номенклатура КАК НоменклатураПоставщика,
	|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
	|	НоменклатураПоставщиков.Номенклатура.Код КАК НоменклатураКод,
	|	НоменклатураПоставщиков.Номенклатура.Наименование КАК Наименование,
	|	НоменклатураПоставщиков.Артикул КАК НоменклатураАртикул,
	|	НоменклатураПоставщиков.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
	|	0 КАК ХарактеристикаКод,
	|	НоменклатураПоставщиков.Характеристика.Наименование КАК ХарактеристикаНаименование,
	|	ВЫБОР
	|		КОГДА НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Код ЕСТЬ NULL
	|			ТОГДА НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Код ЕСТЬ NULL
	|			ТОГДА НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияКод,
	|	ВЫБОР
	|		КОГДА НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Наименование ЕСТЬ NULL
	|			ТОГДА НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК ЕдиницаИзмеренияНаименование,
	|	НоменклатураПоставщиков.Идентификатор КАК ИдТовараУКонтрагента,
	|	НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	Товары.Количество КАК МассаНетто,
	|	Товары.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ЦенаВключаетНДС
	|			ТОГДА Товары.Сумма - Товары.СуммаНДС
	|		ИНАЧЕ Товары.Сумма
	|	КОНЕЦ КАК СуммаБезНДС,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ЦенаВключаетНДС
	|			ТОГДА Товары.Сумма
	|		ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
	|	КОНЕЦ КАК СуммаСНДС,
	|	Товары.Цена КАК Цена,
	|	Товары.ЦенаПродажи КАК ЦенаПродажи,
	|	Товары.СуммаПродажи КАК СуммаПродажи,
	|	Товары.СуммаВознаграждения КАК СуммаВознаграждения,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|		ПО Товары.Ссылка.Контрагент = НоменклатураПоставщиков.Поставщик
	|			И (НоменклатураПоставщиков.Магазин = &ПустойМагазин)
	|			И Товары.Номенклатура = НоменклатураПоставщиков.Номенклатура
	|			И Товары.Характеристика = НоменклатураПоставщиков.Характеристика
	|			И Товары.Упаковка = НоменклатураПоставщиков.Упаковка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ПустойМагазин", Справочники.Магазины.ПустаяСсылка());
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = МассивРезультатовЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		СсылкаНаОбъект, "Объект");
	
	Комиссионер = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.Дата);
	Комитент = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, Комитент, "Комитент",   "Юр", РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, Комиссионер, "Комиссионер", "Юр", РеквизитыШапки.Дата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", НСтр("ru = '643'"), ПараметрыОбработкиОшибок);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс", 1, ПараметрыОбработкиОшибок);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДатаФормирования", РеквизитыШапки.Дата, ПараметрыОбработкиОшибок);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "НачалоПериода", РеквизитыШапки.НачалоПериода);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "КонецПериода", РеквизитыШапки.КонецПериода);

	ТаблицаТоваров = МассивРезультатовЗапроса[1].Выгрузить();
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
			"ИдТовараУКонтрагента", "НоменклатураПоставщика", "Объект.Идентификатор", НСтр("ru = 'У номенклатуры поставщика не заполнен реквизит ""Идентификатор"". Возможно, она некорректно загружена из базы поставщика.'"), "НомерСтроки");
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	КонтрагентРозничныйПокупатель = Константы.КонтрагентРозничныйПокупатель.Получить();
	Если ЗначениеЗаполнено(КонтрагентРозничныйПокупатель) Тогда
		ЧастноеЛицо = ПолучитьДанныеЮрФизЛица(КонтрагентРозничныйПокупатель, РеквизитыШапки.Дата);
	Иначе
		ЧастноеЛицо = Новый Структура("Представление, ПолноеНаименование, КодПоОКПО, ИНН, КПП, Телефоны, ЮридическийАдрес, ФактическийАдрес, ЮрФизЛицо, Фамилия, Имя, Отчество, Ссылка, АдрТекст");
		ЧастноеЛицо.ПолноеНаименование = НСтр("ru = 'Частное лицо'");
		ЧастноеЛицо.Представление = НСтр("ru = 'Частное лицо'");
		ЧастноеЛицо.ИНН = НСтр("ru = '123456789110'");
		ЧастноеЛицо.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		ЧастноеЛицо.Ссылка = Справочники.ФизическиеЛица.ПустаяСсылка();
		ЧастноеЛицо.Фамилия = НСтр("ru = 'Частное лицо'");
		ЧастноеЛицо.Имя = НСтр("ru = 'Частное лицо'");
		ЧастноеЛицо.Отчество = НСтр("ru = 'Частное лицо'");
		ЧастноеЛицо.ЮридическийАдрес = НСтр("ru = 'Неопределено'");
		ЧастноеЛицо.ФактическийАдрес = НСтр("ru = 'Неопределено'");
		ЧастноеЛицо.АдрТекст = НСтр("ru = 'Неопределено'");
КонецЕсли;
	
	СтрокаТаблицаТоваров = ДеревоДокумента.Строки.Найти("Товары", "ПолныйПуть");
	Если ТаблицаТоваров.Количество() Тогда 
		Для Каждого Товар Из СтрокаТаблицаТоваров.Строки Цикл
			ЗаполнитьДанныеУчастника(Товар, ЧастноеЛицо, "Товары.НомерСтроки.Покупатель");
		КонецЦикла;
	КонецЕсли;
	
	СуммаПродажиИтог = ТаблицаТоваров.Итог("СуммаСНДС");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", СуммаПродажиИтог);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаДокумента", СуммаПродажиИтог);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаВознаграждения", РеквизитыШапки.СуммаВознаграждения);
	//
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СтавкаНДСВознаграждения", РеквизитыШапки.СтавкаНДСВознаграждения);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНДСВознаграждения", РеквизитыШапки.СуммаНДСВознаграждения);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", РеквизитыШапки.ЦенаВключаетНДС);
	//
	Если ЗначениеЗаполнено (РеквизитыШапки.ПроцентКомиссионногоВознаграждения) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.Процент", РеквизитыШапки.ПроцентКомиссионногоВознаграждения);
	КонецЕсли;
	
	ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Всего наименований %1, на сумму %2'"),
						ТаблицаТоваров.Количество(), 
						Формат(РеквизитыШапки.СуммаДокумента, ОбщегоНазначенияРТКлиентСерверПовтИсп.ФорматСуммовыхПоказателей()));
						
	СуммаПрописью  = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоДокумента - ДеревоЗначений - дерево значений, соответствующее макету ОтчетКомиссионераОСписании обработки ОбменСКонтрагентами.
//  Отказ - Булево - если нужно отказаться от создания электронного документа, необходимо установить значение в Истина.
//                   После этого дальнейшие действия по формированию документа производиться не будут, поэтому
//                   нужно сформировать сообщения пользователю при необходимости самостоятельно.
//
Процедура ЗаполнитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОтчетКомитенту.Дата КАК Дата,
	|	ОтчетКомитенту.СуммаДокумента КАК СуммаДокумента,
	|	ОтчетКомитенту.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОтчетКомитенту.Комментарий КАК ДополнительнаяИнформация,
	|	ОтчетКомитенту.Номер КАК Номер,
	|	ОтчетКомитенту.Организация КАК Организация,
	|	ОтчетКомитенту.Контрагент КАК Контрагент,
	|	ОтчетКомитенту.НачалоПериода КАК НачалоПериода,
	|	ОтчетКомитенту.КонецПериода КАК КонецПериода,
	|	"""" КАК ДокументОснование
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ОтчетКомитенту
	|ГДЕ
	|	ОтчетКомитенту.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	НоменклатураПоставщиков.Номенклатура КАК НоменклатураПоставщика,
	|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
	|	НоменклатураПоставщиков.Номенклатура.Код КАК НоменклатураКод,
	|	НоменклатураПоставщиков.Номенклатура.Наименование КАК Наименование,
	|	НоменклатураПоставщиков.Артикул КАК НоменклатураАртикул,
	|	НоменклатураПоставщиков.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
	|	0 КАК ХарактеристикаКод,
	|	НоменклатураПоставщиков.Характеристика.Наименование КАК ХарактеристикаНаименование,
	|	ВЫБОР
	|		КОГДА НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Код ЕСТЬ NULL
	|			ТОГДА НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Код ЕСТЬ NULL
	|			ТОГДА НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияКод,
	|	ВЫБОР
	|		КОГДА НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Наименование ЕСТЬ NULL
	|			ТОГДА НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ НоменклатураПоставщиков.Упаковка.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК ЕдиницаИзмеренияНаименование,
	|	НоменклатураПоставщиков.Идентификатор КАК ИдТовараУКонтрагента,
	|	НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	НоменклатураПоставщиков.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	Товары.Количество КАК МассаНетто,
	|	Товары.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ЦенаВключаетНДС
	|			ТОГДА Товары.Сумма - Товары.СуммаНДС
	|		ИНАЧЕ Товары.Сумма
	|	КОНЕЦ КАК СуммаБезНДС,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ЦенаВключаетНДС
	|			ТОГДА Товары.Сумма
	|		ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
	|	КОНЕЦ КАК СуммаСНДС,
	|	Товары.Цена КАК Цена,
	|	Товары.Ссылка.ЦенаВключаетНДС КАК НДСУчтеноВСумме
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|		ПО Товары.Ссылка.Контрагент = НоменклатураПоставщиков.Поставщик
	|			И (НоменклатураПоставщиков.Магазин = &ПустойМагазин)
	|			И Товары.Номенклатура = НоменклатураПоставщиков.Номенклатура
	|			И Товары.Характеристика = НоменклатураПоставщиков.Характеристика
	|			И Товары.Упаковка = НоменклатураПоставщиков.Упаковка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ПустойМагазин", Справочники.Магазины.ПустаяСсылка());
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = МассивРезультатовЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(
		СсылкаНаОбъект, "Объект");
	
	Комиссионер = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Организация, РеквизитыШапки.Дата);
	Комитент = ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Контрагент, РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, Комитент, "Комитент",   "Юр", РеквизитыШапки.Дата);
	ЗаполнитьДанныеУчастника(ДеревоДокумента, Комиссионер, "Комиссионер", "Юр", РеквизитыШапки.Дата);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", НСтр("ru = '643'"), ПараметрыОбработкиОшибок);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс", 1, ПараметрыОбработкиОшибок);
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ДатаФормирования", РеквизитыШапки.Дата, ПараметрыОбработкиОшибок);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "НачалоПериода", РеквизитыШапки.НачалоПериода);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "КонецПериода", РеквизитыШапки.КонецПериода);

	ТаблицаТоваров = МассивРезультатовЗапроса[1].Выгрузить();
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
			"ИдТовараУКонтрагента", "НоменклатураПоставщика", "Объект.Идентификатор", НСтр("ru = 'У номенклатуры поставщика не заполнен реквизит ""Идентификатор"". Возможно, она некорректно загружена из базы поставщика.'"), "НомерСтроки");
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	СуммаПродажиИтог = ТаблицаТоваров.Итог("СуммаСНДС");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма", СуммаПродажиИтог);
	
	ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Всего наименований %1, на сумму %2'"),
						ТаблицаТоваров.Количество(), 
						Формат(РеквизитыШапки.СуммаДокумента, ОбщегоНазначенияРТКлиентСерверПовтИсп.ФорматСуммовыхПоказателей()));
						
	СуммаПрописью  = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

// Сохраняет данные из электронного документа в объект ИБ.
//
// Параметры:
//  СтрокаДляЗагрузки - Строка - параметры для загрузки.
//  ДеревоРазбора     - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - ДокументСсылка - владелец электронного документа.
//  Записывать - Булево - если Истина, то объект будет записан.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//  НайденныйОбъект - Произвольный - созданный объект.
//
// Возвращаемое значение:
//  НайденныйОбъект - ссылка на объект.
//
Процедура СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора,
			СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "", НайденныйОбъект = Неопределено) Экспорт
	
	Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		НайденныйОбъект = ЗагрузитьПрайсЛист(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец 
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		ЗагрузитьКаталогТоваров(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
	КонецЕсли;
	
КонецПроцедуры

// Поиск и создание документа передачи товаров.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - дерево данных электронного документа.
//  СсылкаНаВладельца	 - ДокументСсылка - ссылка на документ учета.
//  Записывать			 - Булево - признак записи документа.
//  СпособОбработки		 - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьДокументПередачаТоваров(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина, СпособОбработки = "") Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		ДокументОбъект.Товары.Очистить();
	Иначе
		ДокументОбъект = Документы.ПоступлениеТоваров.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ДокументОбъект.Организация = ОрганизацияПоДаннымЭД(ДеревоДанных, "Плательщик");
	ДокументОбъект.Контрагент  = КонтрагентПоДаннымЭД(ДеревоДанных, "Поставщик");
	
	ДокументОбъект.НомерВходящегоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной");
	ДокументОбъект.ДатаВходящегоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной");
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		
		МассаНетто = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.МассаНетто");
		КоличествоМест = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.КоличествоМест");
		НоваяСтрока.КоличествоУпаковок = ?(ЗначениеЗаполнено(МассаНетто), МассаНетто, КоличествоМест);
		СтавкаНДСЧисло = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"ТаблицаТоваров.НомерСтроки.СтавкаНДС");
		Если СтавкаНДСЧисло = "НДС исчисляется налоговым агентом" Тогда
			НоваяСтрока.Сумма = НоваяСтрока.Сумма;
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СуммаСНДС");
			НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СуммаНДС");
			НоваяСтрока.СтавкаНДС = НайтиПеречисление("НДС", СтавкаНДСЧисло);
		КонецЕсли;
		
		//НоваяСтрока.НомерГТД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
		НомерГТД = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные.НомерТД", Ложь);
		КодСтраны = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные.КодСтраныПроисхождения", Ложь);
		Если ЗначениеЗаполнено(КодСтраны) Тогда
			//НоваяСтрока.СтранаПроисхождения = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(КодСтраны);
		КонецЕсли;
		
		Идентификатор = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.ИдТовараУКонтрагента");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
		|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
		|	НоменклатураПоставщиков.Упаковка КАК Упаковка,
		|	ЕСТЬNULL(НоменклатураПоставщиков.Упаковка.Коэффициент, 0) КАК КоэффициентУпаковки
		|ИЗ
		|	РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Поставщик = &Поставщик
		|	И НоменклатураПоставщиков.Идентификатор = &Идентификатор
		|	И НоменклатураПоставщиков.Магазин = &ПустойМагазин
		|";
		Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
		Запрос.УстановитьПараметр("Поставщик", ДокументОбъект.Контрагент);
		Запрос.УстановитьПараметр("ПустойМагазин", Справочники.Магазины.ПустаяСсылка());
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			Если ЗначениеЗаполнено(Выборка.КоэффициентУпаковки) И Выборка.КоэффициентУпаковки <> 1 Тогда
				НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок * Выборка.КоэффициентУпаковки;
			Иначе
				НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок;
			КонецЕсли;
		КонецЕсли;
		
		Если ДокументОбъект.ЦенаВключаетНДС Тогда
			НоваяСтрока.Цена = ?(НоваяСтрока.КоличествоУпаковок = 0, НоваяСтрока.Сумма, НоваяСтрока.Сумма / НоваяСтрока.КоличествоУпаковок);
		КонецЕсли;
		
		Если НоваяСтрока.Цена = 0 Тогда
			НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.Цена");
		КонецЕсли;
		
		
	КонецЦикла;
	
	ЗавершениеЗагрузкиИЗаписьДокумента(СсылкаНаВладельца, ДокументОбъект, Записывать);
	
КонецПроцедуры

// Поиск и создание документа передачи результатов работ.
//
// Параметры:
//  ДеревоДанных		 - ДеревоЗначений - дерево данных электронного документа.
//  СсылкаНаВладельца	 - ДокументСсылка - ссылка на документ учета.
//  Записывать			 - Булево - признак записи документа.
//  СпособОбработки		 - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьДокументПередачаРезультатовРабот(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина, СпособОбработки = "") Экспорт
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Структура - способы сохранения данных в информационной базе.
//     * ПервичныйДокумент - Строка - способ сохранения первичного документа.
//     * СчетФактура       - Строка - способ сохранения счета-фактуры.
//
Процедура НайтиСоздатьУниверсальныйПередаточныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено,
	Записывать = Истина, СпособОбработки = Неопределено) Экспорт
	
	Если СсылкиНаВладельцев <> Неопределено Тогда
		Для Каждого СтрокаВладельца Из СсылкиНаВладельцев Цикл
			Если ТипЗнч(СтрокаВладельца) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				СчетФактура = СтрокаВладельца;
			Иначе
				ПервичныйДокумент = СтрокаВладельца;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НайтиСоздатьДокументПередачаТоваровУПД(ДеревоДанных, ПервичныйДокумент, Записывать, СпособОбработки);
	НайтиСоздатьУПДСчетФактуру(ДеревоДанных, СчетФактура, Записывать, СпособОбработки, ПервичныйДокумент);
	
	СсылкиНаВладельцев = Новый Массив;
	СсылкиНаВладельцев.Добавить(ПервичныйДокумент);
	СсылкиНаВладельцев.Добавить(СчетФактура);
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУПДДокументОПередаче(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУПДСчетФактуру(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "", ПервичныйДокумент = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		ДокументОбъект.ДатаСоставления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаДокумента");
	Иначе
		ДокументОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		ДокументОбъект.ДатаСоставления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоДанных, "ДатаДокумента");
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		//ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.Контрагент  = КонтрагентПоДаннымЭД(ДеревоДанных,  "СведенияОПродавце");
	ДокументОбъект.Организация = ОрганизацияПоДаннымЭД(ДеревоДанных, "СведенияОПокупателе");
	
	ДокументОбъект.ПолученВЭлектронномВиде = Истина;
	ДокументОбъект.Номер = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
	
	ДокументОбъект.НомерИсправления = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	Если ЗначениеЗаполнено(ДокументОбъект.НомерИсправления) Тогда
		ДокументОбъект.Исправление = Истина;
		ДокументОбъект.ДатаИсправления  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	КонецЕсли;
	ДокументОбъект.ДокументыОснования.Очистить();
	ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если ЗначениеЗаполнено(ДокументыОснованияСчетаФактуры) Тогда
		ДокументОбъект.ДокументыОснования.Очистить();
		Для Каждого ДокументОснования Из ДокументыОснованияСчетаФактуры Цикл
			Если ТипЗнч(ДокументОснования) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				ДокументОбъект.СчетФактураОснование = ДокументОснования;
			Иначе
				СтрокаТаблицы = ДокументОбъект.ДокументыОснования.Добавить();
				СтрокаТаблицы.ДокументОснование = ДокументОснования;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
		СтрокаОснования = ДокументОбъект.ДокументыОснования.Найти(ПервичныйДокумент, "ДокументОснование");
		Если СтрокаОснования = Неопределено Тогда
			СтрокаТаблицы = ДокументОбъект.ДокументыОснования.Добавить();
			СтрокаТаблицы.ДокументОснование = ПервичныйДокумент;
		КонецЕсли;
	КонецЕсли;
	
	ЗавершениеЗагрузкиИЗаписьДокумента(СсылкаНаВладельца, ДокументОбъект, Записывать);
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкиНаВладельцев - Массив - документы информационной базы, созданные ранее по входящему электронному документу.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Структура - способы сохранения данных в информационной базе.
//     * ПервичныйДокумент - Строка - способ сохранения первичного документа.
//     * СчетФактура       - Строка - способ сохранения счета-фактуры.
//
Процедура НайтиСоздатьУниверсальныйКорректировочныйДокумент(ДеревоДанных, СсылкиНаВладельцев = Неопределено,
	Записывать = Истина, СпособОбработки  = Неопределено) Экспорт
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУКДДокументОбИзмененииСтоимости(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
КонецПроцедуры

// Сохраняет данные из электронного документа в объекты ИБ.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, владельца электронного документа.
//  Записывать - Булево - признак необходимости записывать объект ИБ.
//  СпособОбработки - Строка - способ сохранения данных в информационной базе.
//
Процедура НайтиСоздатьУКДСчетФактуру(ДеревоДанных, СсылкаНаВладельца = Неопределено, Записывать = Истина, СпособОбработки = "") Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Создание элементов справочников.

// Создает объект в ИБ по дереву параметров и помещает ссылку на него в "НовыйЭлемент".
//
// Параметры:
//  СтрокаОбъекта - Структура - параметры записываемого объекта.
//  ДеревоРазбора - ДеревоЗначений - результат разбора электронного документа.
//  НовыйЭлемент - СправочникСсылка - в этот параметр необходимо вернуть ссылку на созданный элемент справочника.
//
Процедура СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора, НовыйЭлемент) Экспорт
	
	Если СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.НоменклатураПоставщиков" Тогда
		НовыйЭлемент = СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора);
	КонецЕсли;
	
КонецПроцедуры

// Поиска элемента справочника по реквизитам ИНН и КПП.
//
// Параметры:
//  ТипОбъекта - Строка - имя справочника в метаданных.
//  ИНН - Строка - ИНН.
//  КПП - Строка - КПП.
//  Организация - СправочникСсылка - ссылка на элемент справочника организации.
//  Ссылка - СправочникСсылка - Ссылка на найденный объект.
//
Процедура СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Ссылка, Организация = Неопределено) Экспорт
	
	Ссылка = Неопределено;
	
	ИмяМетаданных = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника(ТипОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Выборка.Ссылка
	|ИЗ
	|	Справочник." + ИмяМетаданных + " КАК Выборка
	|ГДЕ
	|	Выборка.ИНН = &ИНН И
	|	Выборка.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты объекта данными из структуры реквизитов.
//
// Параметры:
//  СтруктураРеквизитов - структура - перечень значений реквизитов.
//  КонтрагентСсылка    - СправочникСсылка.Контрагенты - ссылка на контрагента, которого нужно заполнить.
//
Процедура ЗаполнитьРеквизитыКонтрагента(СтруктураРеквизитов, КонтрагентСсылка) Экспорт
	
КонецПроцедуры

// Заполняет структуру реквизитов товара.
//
// Параметры:
//  РеквизитыНоменклатуры - Структура - параметры поиска.
//  СтруктураВозврата - Структура - содержит ссылки на номенклатуру, характеристику, упаковку.
//  ИД - Строка - идентификатор обмена ЭД.
//
Процедура ПолучитьРеквизитыТовара(РеквизитыНоменклатуры, СтруктураВозврата, ИД = Неопределено) Экспорт
	
КонецПроцедуры

// Заполняет ИД контрагента.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.Контрагент - ссылка на контрагента (Организация или Контрагент).
//  ВидКонтрагента - Строка - вид контрагента.
//  ИдКонтрагента - Строка - значение ИдКонтрагента.
//
Процедура ПолучитьИДКонтрагента(Контрагент, ВидКонтрагента, ИдКонтрагента) Экспорт
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат
	КонецЕсли;
	
	Если ВРег(ВидКонтрагента) = ВРег("Организация") Тогда
		ИдКонтрагента = Контрагент.ИНН + "_" + Контрагент.КПП;
	ИначеЕсли ВРег(ВидКонтрагента) = ВРег("Контрагент") Тогда
		ИдКонтрагента = Контрагент.ИНН + "_" + Контрагент.КПП;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сопоставление номенклатуры

// Формирует тест запроса для получения таблицы сопоставления номенклатуры
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//   В передаваемом тексте запроса должны выбираться следующие поля:
//    * АртикулНоменклатурыКонтрагента      - Строка - артикул номенклатуры контрагента;
//    * НаименованиеНоменклатурыКонтрагента - Строка - наименование номенклатуры контрагента;
//    * ЕдиницаНоменклатурыКонтрагента      - Ссылка - ссылка на единицу измерения номенклатуры контрагента;
//    * Описание                            - Строка - описание номенклатуры поставщика;
//    * Идентификатор                       - Строка - идентификатор номенклатуры контрагента;
//    * НоменклатураПоставщика              - Ссылка - ссылка на элементы номенклатуры контрагента.
//
Процедура ТекстЗапросаСопоставленияНоменклатуры(ТекстЗапроса) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаИнформацияОТоваре.Ид КАК Идентификатор,
		|	ТаблицаИнформацияОТоваре.Артикул КАК АртикулНоменклатурыКонтрагента,
		|	ТаблицаИнформацияОТоваре.Наименование КАК НаименованиеНоменклатурыКонтрагента,
		|	ТаблицаИнформацияОТоваре.БазоваяЕдиницаКод КАК БазоваяЕдиницаКод,
		|	ТаблицаИнформацияОТоваре.Описание КАК Описание
		|ПОМЕСТИТЬ ТаблицаИнформацияОТоваре
		|ИЗ
		|	&ТаблицаИнформацияОТоваре КАК ТаблицаИнформацияОТоваре
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИнформацияОТоваре.Идентификатор КАК Идентификатор,
		|	ТаблицаИнформацияОТоваре.АртикулНоменклатурыКонтрагента КАК АртикулНоменклатурыКонтрагента,
		|	ТаблицаИнформацияОТоваре.НаименованиеНоменклатурыКонтрагента КАК НаименованиеНоменклатурыКонтрагента,
		|	ЕСТЬNULL(ЕдиницыИзмерения.Ссылка, НЕОПРЕДЕЛЕНО) КАК ЕдиницаНоменклатурыКонтрагента,
		|	ТаблицаИнформацияОТоваре.Описание,
		|	&Контрагент КАК НоменклатураПоставщика
		|ИЗ
		|	ТаблицаИнформацияОТоваре КАК ТаблицаИнформацияОТоваре
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|		ПО ТаблицаИнформацияОТоваре.Идентификатор = НоменклатураПоставщиков.Идентификатор
		|			И НоменклатураПоставщиков.Поставщик = &Контрагент
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БазовыеЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ПО ТаблицаИнформацияОТоваре.БазоваяЕдиницаКод = ЕдиницыИзмерения.Код
		|ГДЕ
		|(НоменклатураПоставщиков.Номенклатура ЕСТЬ NULL 
		|				ИЛИ НоменклатураПоставщиков.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))";
	
КонецПроцедуры

// Сохраняет результат ручного сопоставления Номенклатуры в БД.
//
// Параметры:
//  ТаблицаСопоставления - ТаблицаЗначений - данные сопоставления.
//  Контрагент - СправочникСсылка - ссылка на справочник контрагенты.
//  Отказ - Булево - признак ошибки.
//
Процедура ЗаписатьСопоставлениеНоменклатуры(ДанныеСопоставления, Контрагент, Отказ) Экспорт
	
	Если ЗначениеЗаполнено(Контрагент) И ДанныеСопоставления.Количество() > 0 Тогда
		
		ТаблицаСопоставления = ДанныеСопоставления.Выгрузить();
		Если ТаблицаСопоставления.Колонки.Найти("ХарактеристикаНоменклатуры") = Неопределено Тогда
			ТаблицаСопоставления.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		КонецЕсли;
		Если ТаблицаСопоставления.Колонки.Найти("Упаковка") = Неопределено Тогда
			ТаблицаСопоставления.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаСопоставления.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ТаблицаСопоставления.ХарактеристикаНоменклатуры КАК Характеристика,
		|	ТаблицаСопоставления.Упаковка КАК Упаковка,
		|	ТаблицаСопоставления.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ ТаблицаСопоставления
		|ИЗ
		|	&ТаблицаСопоставления КАК ТаблицаСопоставления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&Поставщик КАК Поставщик,
		|	&ПустойМагазин КАК Магазин,
		|	ТаблицаСопоставления.Номенклатура КАК Номенклатура,
		|	ТаблицаСопоставления.Характеристика КАК Характеристика,
		|	ТаблицаСопоставления.Упаковка КАК Упаковка,
		|	ТаблицаСопоставления.Идентификатор КАК Идентификатор,
		|	НоменклатураПоставщиков.Цена КАК Цена,
		|	НоменклатураПоставщиков.ДатаПоследнегоПоступления КАК ДатаПоследнегоПоступления,
		|	НоменклатураПоставщиков.Артикул КАК Артикул
		|ИЗ
		|	ТаблицаСопоставления КАК ТаблицаСопоставления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|		ПО НоменклатураПоставщиков.Поставщик = &Поставщик
		|			И ТаблицаСопоставления.Идентификатор = НоменклатураПоставщиков.Идентификатор
		|ГДЕ
		|	НЕ ТаблицаСопоставления.Номенклатура.Код ЕСТЬ NULL
		|	И НоменклатураПоставщиков.Номенклатура.Код ЕСТЬ NULL
		|";
		Запрос.УстановитьПараметр("ТаблицаСопоставления", ТаблицаСопоставления);
		Запрос.УстановитьПараметр("Поставщик", Контрагент);
		Запрос.УстановитьПараметр("ПустойМагазин", Справочники.Магазины.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.НоменклатураПоставщиков.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка, , "Номенклатура, Характеристика, Упаковка");
			МенеджерЗаписи.Удалить();
			
			МенеджерЗаписи = РегистрыСведений.НоменклатураПоставщиков.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру для открытия формы сопоставления номенклатуры.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  СтруктураПараметров - Структура - содержит следующие ключи:
//    * ИмяФормы - Строка - полное имя формы, которую нужно открыть для сопоставления номенклатуры.
//    * ПараметрыОткрытияФормы - Структура - см. функцию ОткрытьФорму, параметр "Параметры".
//
Процедура ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД, СтруктураПараметров) Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура("ЭлектронныйДокумент, НеОткрыватьФормуПриОтсутствииНеСопоставленнойНоменклатуры",
		СсылкаНаЭД, Истина);
	СтруктураПараметров.Вставить("ПараметрыОткрытияФормы", ПараметрыОткрытияФормы);
	
КонецПроцедуры

// Заполнение реквизитов формы переданными значениями.
//
// Параметры:
//  ДанныеФормы - УправляемаяФорма - данные управляемой формы.
//  ЗначениеЗаполнения - Строка - ссылка данные во временном хранилище.
//
Процедура ЗаполнитьИсточник(ДанныеФормы, ЗначениеЗаполнения) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение данных для формирования электронных документов.

// Получает значение перечисления по имени перечисления и представлению в библиотеке.
// 
// Параметры:
//  ИмяПеречисления - Строка - наименование перечисления.
//  ПредставлениеПеречисления - Строка - наименование значения перечисления.
//  НайденноеЗначение - ПеречислениеСсылка - значение искомого перечисления.
//
Процедура ПолучитьЗначениеПеречисления(ИмяПеречисления, ПредставлениеПеречисления, НайденноеЗначение) Экспорт
	
КонецПроцедуры

// Получает данные свидетельства о регистрации ИП по ссылке.
//
// Параметры:
//  ИП - СправочникСсылка - источник, по которому нужно получить данные;
//  Сведения - Строка - сведения о регистрации индивидуального предпринимателя.
//
Процедура ДанныеСвидетельстваОРегистрацииИП(ИП, Сведения) Экспорт
	
КонецПроцедуры

// Получение контактной информации организации по ссылке.
//
// Параметры:
//  Организация - Ссылка - элемент справочника Организации, по которому нужно получить данные.
//  ТаблицаКонтактов - ТаблицаЗначений - контактная информация по организации.
//
Процедура ПолучитьКонтактнуюИнформацию(Организация, ТаблицаКонтактов) Экспорт
	
КонецПроцедуры

// Заполняет "НазваниеРегиона" по "КодРегиона".
//
// Параметры:
//  КодРегиона - Строка - строка, содержащая двухсимвольный код региона.
//  НазваниеРегиона - Строка - наименование региона.
//
Процедура НазваниеРегиона(КодРегиона, НазваниеРегиона) Экспорт
	
КонецПроцедуры

// Получает адрес электронной почты контрагента.
//
// Параметры:
//  Контрагент - СправочникСсылка - ссылка на элемент справочника контрагенты, адрес которого надо получить.
//  АдресЭП - Строка - адрес электронной почты.
//
Процедура АдресЭлектроннойПочтыКонтрагента(Контрагент, АдресЭП) Экспорт
		
КонецПроцедуры

// Получает банковские счета.
//
// Параметры:
//  Организация - СправочникСсылка.Организация - ссылка на организацию.
//  Банк - СправочникСсылка - ссылка на элемент справочника с банками.
//  Таблица - ТаблицаЗначений - таблица значений с перечнем банковских счетов.
//
Процедура ПолучитьБанковскиеСчета(Организация, Таблица, Банк = Неопределено) Экспорт
	
КонецПроцедуры

// Получает банковские реквизиты.
//
// Параметры:
//  МассивСчетов - массив - список банковских счетов.
//  Таблица - ТаблицаЗначений - перечень банковских реквизитов. Должна содержать следующие колонки:
//    * Ссылка - Ссылка - ссылка на банковский счет.
//    * РасчетныйСчет - Строка - номер расчетного счета.
//    * КорреспондентскийСчет - Строка - номер корреспондентского счета.
//    * БИК - Строка - БИК банка.
//    * Банк - Ссылка - ссылка на банк.
//    * БанкДляРасчетов - Ссылка - ссылка на банк для расчетов.
//    * БанкДляРасчетовБИК - БИК банка для расчетов.
//    * БанкДляРасчетовКоррСчет - Строка - корреспондентский счет банка для расчетов.
//
Процедура ПолучитьБанковскиеРеквизиты(МассивСчетов, Таблица) Экспорт
	
КонецПроцедуры

// В процедуре выполняется заполнение реквизитов (дата выставления, признак выставления,
// дата получения, признак получения) документов счета-фактуры, по ключевым событиям,
// описанным в приказе от 25 апреля 2011 г. N 50н.: получение ПДО, ПДП, ИП, ПДОИП.
//
// Параметры:
//  ВладелецЭД - документ-ссылка, ссылка на документ ИБ счет-фактура выданный/полученный.
//  ЭД - справочник-ссылка, ссылка на элемент справочника ЭДПрисоединенныеФайлы.
//
Процедура ЗаполнитьРеквизитыЭСФ(ВладелецЭД, ЭД) Экспорт
	
КонецПроцедуры

// Заполняет структуру, содержащую информацию об адресе участника ЭДО.
//
// Параметры:
//  СтруктураАдреса - структура - информация об адресе;
//   * Поля структуры для адреса РФ.
//    ** АдресРФ - Булево - признак, что адрес РФ;
//    ** Индекс - Строка - почтовый индекс организации;
//    ** Регион - Строка - код региона организации;
//    ** Район - Строка;
//    ** Город - Строка;
//    ** НаселенныйПункт - Строка - населенный пункт расположения организации;
//    ** Улица - Строка;
//    ** Дом - Строка;
//    ** Корпус - Строка;
//    ** Квартира - Строка;
//    ** Поля структуры для иностранного адреса или адреса РФ строкой.
//   * КодСтраны - Строка - код страны;
//    ** АдресТекст - Строка - представление адреса;
//  СтруктураПараметров - Структура - содержит ссылки на элементы справочника;
//  ВидКонтрагента - Строка - имя метаданных справочника;
//  ВидАдреса - Строка - "Факт" или "Юр";
//  ТекстОшибки - Строка - описание ошибки.
//
Процедура ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента = "Контрагент", ВидАдреса = "Юр", ТекстОшибки = "") Экспорт
	
	СтруктураАдреса.Вставить("АдресРФ", Истина);
	СтруктураАдреса.Вставить("КодСтр", "");
	СтруктураАдреса.Вставить("КодСтраны", "");
	СтруктураАдреса.Вставить("Индекс", "");
	СтруктураАдреса.Вставить("КодРегион", "");
	СтруктураАдреса.Вставить("КодРегиона", "");
	СтруктураАдреса.Вставить("Район", "");
	СтруктураАдреса.Вставить("Город", "");
	СтруктураАдреса.Вставить("НаселПункт", "");
	СтруктураАдреса.Вставить("НаселенныйПункт", "");
	СтруктураАдреса.Вставить("Улица", "");
	СтруктураАдреса.Вставить("Дом", "");
	СтруктураАдреса.Вставить("Корпус", "");
	СтруктураАдреса.Вставить("Кварт", "");
	СтруктураАдреса.Вставить("Квартира", "");
	СтруктураАдреса.Вставить("АдрТекст", "");
	СтруктураАдреса.Вставить("АдресТекст", "");
	СтруктураАдреса.Вставить("КодГАР", "");
	
	Если ТипЗнч(СтруктураПараметров.Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		ВидКонтактнойИнформации = ?(ВидАдреса = "Юр", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	Иначе
		ВидКонтактнойИнформации = ?(ВидАдреса = "Юр", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ДатаКИ") И ЗначениеЗаполнено(СтруктураПараметров.ДатаКИ) Тогда
		ДатаКИ = СтруктураПараметров.ДатаКИ;
	Иначе
		ДатаКИ = ТекущаяДатаСеанса();
	КонецЕсли;
	Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтруктураПараметров.Ссылка),
		Перечисления.ТипыКонтактнойИнформации.Адрес, 
		ВидКонтактнойИнформации,
		ДатаКИ);
	
	Если Адрес.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(Адрес[0].Значение);
	
	Если СтрСравнить(СведенияОбАдресе.КодСтраны, Справочники.СтраныМира.Россия.Код) = 0 Тогда
		АдресРФ = Истина;
	Иначе
		АдресРФ = Ложь;
	КонецЕсли;
	
	ПредставлениеАдреса = Адрес[0].Представление;
	СтруктураАдреса.АдрТекст   = ПредставлениеАдреса;
	СтруктураАдреса.АдресТекст = ПредставлениеАдреса;
	СтруктураАдреса.АдресРФ    = АдресРФ;
	СтруктураАдреса.КодСтраны  = СведенияОбАдресе.КодСтраны;
	СтруктураАдреса.КодСтр     = СведенияОбАдресе.КодСтраны;
	СтруктураАдреса.КодРегион  = СведенияОбАдресе.КодРегиона;
	СтруктураАдреса.КодРегиона = СведенияОбАдресе.КодРегиона;
	СтруктураАдреса.Индекс     = СведенияОбАдресе.Индекс;
	СтруктураАдреса.Район      = СведенияОбАдресе.Район;
	СтруктураАдреса.Город      = СведенияОбАдресе.Город;
	СтруктураАдреса.НаселПункт = СведенияОбАдресе.НаселенныйПункт;
	СтруктураАдреса.НаселенныйПункт = СведенияОбАдресе.НаселенныйПункт;
	СтруктураАдреса.Улица      = СведенияОбАдресе.Улица;
	Если ЗначениеЗаполнено(СведенияОбАдресе.Здание) Тогда
		СтруктураАдреса.Дом = СведенияОбАдресе.Здание.Номер;
	КонецЕсли;
	Если ЗначениеЗаполнено(СведенияОбАдресе.Корпуса) Тогда
		СтруктураАдреса.Корпус = СведенияОбАдресе.Корпуса[0].Номер;
	КонецЕсли;
	Если ЗначениеЗаполнено(СведенияОбАдресе.Помещения) Тогда
		СтруктураАдреса.Кварт    = СведенияОбАдресе.Помещения[0].Номер;
		СтруктураАдреса.Квартира = СведенияОбАдресе.Помещения[0].Номер;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Просмотр электронных документов.

// Формирует текст НДС по этапу оплаты.
//
// Параметры:
//  СоответствиеСтавокНДС - Соответствие - соответствие, полученное с помощью функции ПолучитьСоответствиеСтавокНДС().
//  ПроцентПлатежа - Число - Процент платежа по этапу.
//  ТекстНДС - Строка - описание ставки НДС.
//
Процедура СформироватьТекстНДСЭтапаОплаты(СоответствиеСтавокНДС, ПроцентПлатежа, ТекстНДС) Экспорт
		
КонецПроцедуры

// Заполняет текстовое представление суммы.
//
// Параметры:
//  СуммаКПрописи - Число - сумма, по которой надо получить представление.
//  КодВалюты - Число - код используемой валюты.
//  ЧН - Строка - параметр нулевого значения числа.
//  ЧРГ - Строка - разделитель групп целой части числа.
//  Результат - Строка - текстовое представление суммы, которое будет заполнено. 
//
Процедура ФорматСумм(СуммаКПрописи, Результат, КодВалюты = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
КонецПроцедуры

// Заполняет сумму прописью.
//
// Параметры:
//  СуммаЧислом - Число - преобразуемая сумма.
//  КодВалюты - Число - код используемой валюты.
//  Результат - Строка - сумма прописью.
//
Процедура СуммаПрописью(СуммаЧислом, КодВалюты, Результат) Экспорт
	
КонецПроцедуры

// Формирует текст НДС по ставке для печатной формы счета и заказа.
//
// Параметры:
//  СтавкаНДС       - ПеречислениеСсылка.СтавкиНДС - ставка НДС, для которой необходимо сформировать текст.
//  ЦенаВключаетНДС - Булево - Признак включения НДС в цену.
//  Результат       - Строка - текстовое представление ставки НДС.
//
Процедура ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС, Результат) Экспорт
	
КонецПроцедуры

// Используется для простановки ответственного при создании электронного документа.
//
// Параметры:
//  Контрагент - СправочникСсылка - ссылка на контрагента, по которому надо получить ответственного.
//  Соглашение - СправочникСсылка.СоглашениеОбИспользованииЭД - соглашение, по которому надо найти ответственного.
//  ОтветственныйПоЭД - СправочникСсылка.Пользователи - ответственное лицо.
//
Процедура ПолучитьОтветственногоПоЭД(Контрагент, Соглашение, ОтветственныйПоЭД) Экспорт
	
КонецПроцедуры

// Возврат признака физического лица.
//
// Параметры:
//  ДанныеКонтрагента - СправочникСсылка - ссылка на элемент справочника.
//  ПризнакФизЛица - Булево - Истина если физическое лицо.
//
Процедура ЭтоФизЛицо(ДанныеКонтрагента, ПризнакФизЛица) Экспорт
	
	Если ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель
		ИЛИ ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ПризнакФизЛица = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Вывод данных о скидках в печатную форму документа.
//
// Параметры:
//  Товары - ТаблицаЗначений, ВыборкаИзРезультатаЗапроса - список товаров.
//  ИспользоватьСкидки - Булево - используются скидки.
//  ВыводитьСкидки - Булево - заполняемый процедурой признак.
//
Процедура НужноВыводитьСкидки(Знач Товары, ИспользоватьСкидки, ВыводитьСкидки) Экспорт
	
КонецПроцедуры

// Определяет имя дополнительной колонки, которая выводится в печатных формах электронных документов Счет на оплату,
// Заказ клиента, Заказ поставщику, Отчет о списании комиссионного товара, Отчет о продажах комиссионного товара.
// В качестве дополнительной колонки могут выступать "Код", "Артикул".
//
// Параметры:
//  Результат - Строка - доступные значения: "Код", "Артикул".
//
Процедура ИмяДополнительнойКолонки(Результат) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределение поведения электронных документов.

// Данное событие возникает при изменении элемента справочника ЭДПрисоединенныеФайлы.
// Предназначено для переопределения или добавления изменяемых реквизитов электронного документа.
//
// Параметры:
//  Объект - СправочникСсылка.ЭДПрисоединенныеФайлы - изменяемый объект.
//  СтруктураПараметров - Структура - структура изменяемых реквизитов.
//
Процедура ПриИзмененииПрисоединенногоФайла(Объект, СтруктураПараметров) Экспорт
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Утвержден".
// 
// Параметры:
//  ЭлектронныйДокумент - СправочникСсылка - ссылка на присоединенный файл.
//
Процедура НазначенСтатусУтвержден(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Подписан".
// 
// Параметры:
//  ЭлектронныйДокумент - СправочникСсылка - ссылка на присоединенный файл.
//
Процедура НазначенСтатусПодписан(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Вызывается при изменении состояния документооборота на ОбменЗавершен, ОбменЗавершенСИсправлением.
//
// Параметры:
//  ОснованияЭлектронногоДокумента - ДокументСсылка - ссылка на документ основания электронного документа.
//
Процедура УстановленоСостояниеОбменЗавершен(ОснованияЭлектронногоДокумента) Экспорт
	
	
	
КонецПроцедуры

// Проверка выполнения условия для утверждения документа.
//
// Параметры:
//  ЭлектронныйДокумент - Ссылка - ссылка на электронный документ.
//  Готов - Булево - заполняемый процедурой признак.
//
Процедура ЭлектронныйДокументГотовКУтверждению(ЭлектронныйДокумент, Готов) Экспорт
	
КонецПроцедуры

// Определяет возможно ли редактировать объект информационной базы.
//
// Параметры:
//  Источник - ДокументОбъект - проверяемый объект.
//  РедактированиеРазрешено - Булево - возвращает разрешено или нет редактирование.
//
Процедура ПроверитьВозможностьРедактированияОбъекта(Источник, РедактированиеРазрешено) Экспорт
	
КонецПроцедуры

// Выполняется проверка возможности корректного чтения Пакета ЭД.
// Необходимость данной проверки возникает при работе с данными внешней информационной базы (через com-соединение).
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//  ЧтениеПакетаВозможно - Булево, Неопределено - Ложь - чтение пакета не будет выполняться, во всех остальных случаях,
//                                                       (включая пустое значение) пакет будет прочитан.
//
Процедура ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД, ЧтениеПакетаВозможно) Экспорт
	
	
	
КонецПроцедуры

// Проверяет на корректность заполнения параметров электронного документа.
//
// Параметры:
//  ПараметрыЭД - структура - перечень параметров ЭД.
//  Результат - Булево - Истина если правильно заполнен объект выгрузки.
//
Процедура ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД, Результат) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции.

// Создает таблицу порядка создания типов при загрузке электронного документа.
//
//  Таблица - таблица значений.
//


// Позволяет переопределить порядок создания типов объектов в дереве. Это может быть необходимо, когда одни типы
// зависимы от других, например, номенклатура поставщика, как правило, зависима от номенклатуры. Используется при
// заполнении в дереве электронного документа ссылок на объекты информационной базы.
//
// Параметры:
//  Таблица	 - ТаблицаЗначений - содержит колонки:
//    * ТипОбъекта - Строка - строковый идентификатор библиотечного типа.
//    * Порядок - Число - порядок создания типа в дереве (нумеруется с 1).
//
Процедура ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов(Таблица) Экспорт
	
КонецПроцедуры

// Получает имя временного файла.
//
// Параметры:
//  ИмяВременногоФайла - Строка - имя временного файла;
//  Расширение - Строка - расширение для временного файла.
//
Процедура ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение = "") Экспорт
	
КонецПроцедуры

// Осуществляет разбор файла с реквизитами контрагента
// в ней можно внести изменения в структуру возвращаемых данных.
//
// Параметры:
//  СсылкаНаФайл - Строка - адрес хранилища файла с реквизитами контрагента.
//  СтруктураВозврата - Структура - перечень параметров.
//  РезультатРазбора - Булево - Истина - разбор файла выполнен; Ложь - разбор файла не выполнялся.
//  ОшибкаРазбора - Строка - текст, описание ошибки.
//
Процедура РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, РезультатРазбора, ОшибкаРазбора) Экспорт
	
	
КонецПроцедуры

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект. Если не задан альтернативный алгоритм получения значений реквизитов (процедура пуста),
// то используется функция БСП: ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов).
// 
// Параметры:
//  Ссылка - Ссылка - произвольная ссылка.
//  ИменаРеквизитов - Строка, Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
//  СтруктураДанных - Структура - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Процедура ПолучитьСтруктуруЗначенийРеквизитов(Ссылка, ИменаРеквизитов, СтруктураДанных) Экспорт
	
	
	
КонецПроцедуры

// Определяет Счета-Фактуры по документам основаниям.
// 
// Параметры:
//  МассивОснований - Массив - массив ссылок на документы основания.
//  МассивСФ - Массив - массив для заполнения ссылками на счета-фактуры.
//  НаправлениеЭД - ПеречислениеСсылка.НаправленияЭД - направление электронного документа.
// 
Процедура ЗаполнитьСчетаФактурыПоДокументамОснования(МассивОснований, МассивСФ, НаправлениеЭД) Экспорт
	
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// Механизм однократной сделки.

// Выполняет заполнение списка документов по виду электронного документа.
//
// Параметры:
//  ВидЭД           - Перечисления   - вид электронного документа;
//  СписокВозврата  - СписокЗначений - список ссылок на документы информационной базы.
//
Процедура СписокТиповДокументовПоВидуЭД(ВидЭД, СписокВозврата) Экспорт
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
		
		СписокВозврата.Добавить(Документы.ПоступлениеТоваров.ПустаяСсылка(),
			Метаданные.Документы.ПоступлениеТоваров.Представление());
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура ИЛИ ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		СписокВозврата.Добавить(Документы.СчетФактураПолученный.ПустаяСсылка(),
			Метаданные.Документы.СчетФактураПолученный.Представление());
		
	ИначеЕсли ВРег(ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
		СписокВозврата.Добавить(Справочники.Контрагенты.ПустаяСсылка(),
			Метаданные.Справочники.Контрагенты.Представление());
		
	КонецЕсли;
	
КонецПроцедуры

// Задает имя файла "по умолчанию", с которым будет предложено пользователю сохранить
// ЭД при выгрузке по сценарию "Однократной сделки".
//
// Параметры:
//  ВладелецЭД - ДокументСсылка - ссылка на документ ИБ, на основании которого формируется и выгружается ЭД.
//  НаименованиеФайла - Строка - имя файла.
//
Процедура ЗадатьИмяСохраняемогоФайлаПриБыстромОбмене(ВладелецЭД, НаименованиеФайла) Экспорт
	
КонецПроцедуры

// Получает реквизиты элемента справочника "Организации", для выгрузки в xml-файл.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - элемент справочника организации;
//  СтруктураВозврата - структура - перечень параметров организации.
//
Процедура ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл(Организация, СтруктураВозврата) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм выгрузки электронных документов в файлы для отправки в ФНС через сервис 1С-Отчетность.

// Метод заполняет соответствие выгружаемым документам дату и номер основания (договора).
//
// Параметры:
//  МассивСсылок - Массив - массив ссылок на документы ИБ (в качестве возможных значений следует принимать те типы 
//                          документов, на основании которых в данном прикладном решении формируется электронный
//                          документ вида «Акт приемки-сдачи работ (услуг).
//  ВозвращаемоеСоответствие - Соответствие - в случае, если требуемые реквизиты у договора не заполнены
//                             или при невозможности получения данных реквизитов, то помещать пустые 
//                             значения указанных типов.
//                             Соответствие со следующими свойствами:
//                             * ключ соответствия - ссылка на выгружаемый документ ИБ, взятая из входящего параметра;
//                             * значение соответствия - Структура:
//                               ** НомерДоговора - Строка;
//                               ** ДатаДоговора - Дата.
//
Процедура ПолучитьНомерДатаДоговораДокументов(МассивСсылок, ВозвращаемоеСоответствие) Экспорт
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм прямого обмена между организациями.

// Переопределяет разрешение использовать механизм прямого обмена между организациями.
//
// Параметры:
//  Отказ - Булево - Истина, если использование обмена между организациями запрещено;
//    Ложь - в противном случае;
//    Значение по умолчанию - Ложь;
//
// Пример:
//	Если <Выражение> Тогда
//		Отказ = Истина;
//	КонецЕсли;
//
Процедура ИспользоватьОбменЭДМеждуОрганизациями(Отказ) Экспорт
	Отказ = Истина;
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПередачаТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - данные для формирования электронного документа.
//  ДеревоЭД - ДеревоЗначений - дерево данных для заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, ДеревоЭД) Экспорт
		
КонецПроцедуры

// Подготавливает данные для электронного документа типа ВозвратТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на объект информационной базы, по которому необходимо
//                                    создать электронный документ.
//  СтруктураЭД - Структура - структура данных для формирования электронного документа.
//  ДеревоЭД - ДеревоЗначений - дерево данных для заполнения электронного документа.
//
Процедура ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД, ДеревоЭД) Экспорт
		
КонецПроцедуры

// Заполнение состояния ЭДО.
//
// Параметры:
//  Форма - Форма - текущая форма.
//
Процедура ЗаполнитьСостояниеЭДО(Форма) Экспорт
	
КонецПроцедуры

// Возвращает список имен документов доступных для создания при загрузке электронного документа.
//
// Параметры:
//  ВидЭД			 - Перечисление.ВидыЭД - вид электронного документа
//  СписокСпособовОбработки - Строка - список для добавления операций по отражению электронного документа.
//
Процедура СписокОперацийВидаЭД(ВидЭД,СписокСпособовОбработки) Экспорт 
	
	Если ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		СписокСпособовОбработки.Добавить("ПоступлениеТоваров", НСтр("ru = 'Поступление товаров'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12 Тогда
		
		СписокСпособовОбработки.Добавить("ПоступлениеТоваров", НСтр("ru = 'Поступление товаров'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
		
		СписокСпособовОбработки.Добавить("ПоступлениеТоваров", НСтр("ru = 'Поступление товаров'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
		
		СписокСпособовОбработки.Добавить("ВозвратТоваровПоставщику", НСтр("ru = 'Возврат товаров поставщику'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		
		СписокСпособовОбработки.Добавить("НоменклатураПоставщиков", НСтр("ru = 'Номенклатура поставщиков'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		
		СписокСпособовОбработки.Добавить("НоменклатураПоставщиков", НСтр("ru = 'Номенклатура поставщиков'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		
		СписокСпособовОбработки.Добавить("ОтчетКомитентуОПродажах", НСтр("ru = 'Отчет комитенту о продажах'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		
		СписокСпособовОбработки.Добавить("ОтчетКомитентуОСписании", НСтр("ru = 'Отчет комитенту о списании'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда	
		
		СписокСпособовОбработки.Добавить("ПередачаТоваровМеждуОрганизациями", НСтр("ru = 'Передача товаров между организациями'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		
		СписокСпособовОбработки.Добавить("СчетФактураПолученный", НСтр("ru = 'Счет фактура полученный'"), Истина);
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		СписокСпособовОбработки.Добавить("СчетФактураПолученный", НСтр("ru = 'Счет фактура полученный (корректировка)'"), Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - переопределяет имя объекта метаданных для способа обработки входящего электронного документа,
//			   по-умолчанию совпадает с именем способа обработки.
//
// Параметры:
//  СпособОбработки - Строка - один из доступных способов обработки входящего документа
//  ИмяДокумента - Строка - переменная в которую будет помещено имя объекта метаданных, соответствующее переданному способу обработки.
//
Процедура ИмяДокументаПоСпособуОбработки(СпособОбработки, ИмяДокумента) Экспорт 
	
КонецПроцедуры

// Процедура - Переопределяет заполнение таблицы соответствия видов ЭД и способов обработки по имени профиля,
//			   который используется в форме настройки ЭДО на закладке "Входящие электронные документы".
//
// Параметры:
//  ТаблицаПрофиля	 - ТаблицаЗначений - таблица, содержащая соответствие видов электронных документов и способов обработки
//  Профиль			 - Строка - имя профиля настроек: "Автоматически", "Вручную", "Поставщик", "Покупатель".
//
Процедура ТаблицаПредопределенногоПрофиля(ТаблицаПрофиля,Профиль) Экспорт 
	
КонецПроцедуры 

// Ищет документ владелец электронного документа, который мог быть получен через ЕГАИС.
//
// Параметры:
//  Документ - ДокументСсылка - Ссылка на документ, полученный через ЕГАИС.
//  ИдентификаторДокумента - Строка - Идентификатор документа отправителя.
//
Процедура НайтиРанееПолученныйДокумент(Документ, ИдентификаторДокумента) Экспорт
	
	
	
КонецПроцедуры

// Заполняет соответствие исходящих видов электронных документов и представлений документов информационной базы,
// на основании которых они формируются.
//
// Параметры:
//  СоответствиеВидовЭДДокументамИБ - Соответствие - перечень видов электронных документов.
//    - Соответствие - с свойствами:
//    * Ключ             - Перечисление.ВидыЭД - вид электронного документа.
//    * Значение         - Строка - представление документа информационной базы (хоз. операции).
//
Процедура СоответствиеИсходящихВидовЭДДокументамИБ(СоответствиеВидовЭДДокументамИБ) Экспорт 
	
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.СчетФактура, НСтр("ru = 'Счет-фактура выданный'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.КорректировочныйСчетФактура, НСтр("ru = 'Счет-фактура выданный (корректировка)'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ЗаказТовара, НСтр("ru = 'Заказ поставщику'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ТОРГ12Продавец, НСтр("ru = 'Возврат товаров поставщику'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара, НСтр("ru = 'Отчет комитенту о продажах'"));
	СоответствиеВидовЭДДокументамИБ.Вставить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара, НСтр("ru = 'Отчет комитенту о списании'"));
	
КонецПроцедуры

#Область Права

// Выполняется при проверке прав пользователя на операции чтения электронных документов.
//
// Параметры:
//  ЕстьПраво - Булево - признак наличия права чтения данных. Для изменения. По умолчанию Истина.
//
Процедура ПриПроверкеПраваЧтенияЭлектронныхДокументов(ЕстьПраво) Экспорт
	
КонецПроцедуры

// Выполняется при проверке прав пользователя на операции добавления и изменения электронных документов.
//
// Параметры:
//  ЕстьПраво - Булево - признак наличия права добавления и изменения данных. Для изменения. По умолчанию Истина.
//
Процедура ПриПроверкеПраваОбработкиЭлектронныхДокументов(ЕстьПраво) Экспорт
	
КонецПроцедуры

#КонецОбласти

// Описывает действия, которые нужно выполнить после формирования электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент	 - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
//
Процедура ЭлектронныйДокументСформирован(ЭлектронныйДокумент) Экспорт
	
КонецПроцедуры

// Выполняется при получении описания основания электронного документа,
// которое используется для представления данных прикладного объекта в подсистеме.
//
// Параметры:
//  ОснованиеОбъект - ОпределяемыйТип.ОснованияЭлектронныхДокументов - объект или ссылка на основание электронного документа.
//  Описание - Структура - данные, описывающие основание электронного документа:
//   * Вид - Строка - представление вида объекта. По умолчанию синоним объекта метаданных.
//   * Организация - ОпределяемыйТип.Организация - организация основания.
//   * Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент основания.
//   * Дата - Дата - дата основания.
//   * Номер - Строка - номер основания.
//   * СуммаДокумента - Число - сумма основания.
//  СтандартнаяОбработка - Булево - признак формирования описания по умолчанию. 
//                                  Если Ложь, то используются данные из параметра Описание. По умолчанию Истина.
//
Процедура ПриПолученииОписанияОснованияЭлектронногоДокумента(ОснованиеОбъект, Описание, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Определение имен связей параметров выбора для полей форм библиотеки, в которые выбирается договор контрагента.
//
// Параметры:
//  ИмяСвязиПоОрганизации  - Строка - Имя связи параметров выбора для связанного поля "Организация",
//                                    если значение не будет установлено, то связь параметров выбора не будет установлена.
//  ИмяСвязиПоКонтрагенту  - Строка - Имя связи параметров выбора для связанного поля "Контрагент",
//                                    если значение не будет установлено, то связь параметров выбора не будет установлена.
//
Процедура УстановитьИменаСвязейПараметровВыбораДоговорКонтрагента(ИмяСвязиПоОрганизации, ИмяСвязиПоКонтрагенту) Экспорт

КонецПроцедуры
	
#КонецОбласти

#Область ПрограммныйИнтерфейсРТ

Функция ПолучитьДанныеЮрФизЛица(ЮрФизЛицо, ДатаСведений = Неопределено, Знач БанковскийСчет = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ДатаСведений = Неопределено Тогда
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДанныеЮрФизЛица = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ЮрФизЛицо, ДатаСведений,, БанковскийСчет);

	ДанныеЮрФизЛица.Вставить("Ссылка", ЮрФизЛицо);
	
	Если ДанныеЮрФизЛица.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ЮрЛицо 
		И ДанныеЮрФизЛица.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		
		ПолноеНаименование = ДанныеЮрФизЛица.ПолноеНаименование;
		Если ВРЕГ(Лев(ПолноеНаименование,2))="ИП" Тогда
			ПолноеНаименование = Прав(ПолноеНаименование, СтрДлина(ПолноеНаименование)-2);
		ИначеЕсли ВРЕГ(Лев(ПолноеНаименование, СтрДлина("Индивидуальный предприниматель")))="ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ" Тогда
			ПолноеНаименование = Прав(ПолноеНаименование, СтрДлина(ПолноеНаименование)-СтрДлина("Индивидуальный предприниматель"));
		КонецЕсли;
		
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ПолноеНаименование);
		
		ДанныеЮрФизЛица.Вставить("Фамилия", ФИО.Фамилия);
		ДанныеЮрФизЛица.Вставить("Имя", ФИО.Имя);
		ДанныеЮрФизЛица.Вставить("Отчество", ФИО.Отчество);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДанныеЮрФизЛица;
	
КонецФункции

Процедура ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Юр", ДатаКИ = Неопределено, ДополнениеТипаФЛ = "ФЛ") Экспорт
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
		Или СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		 
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН", СведенияОбУчастнике.ИНН);
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП", СведенияОбУчастнике.КПП);
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
	
	Иначе
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника." + ДополнениеТипаФЛ +".ИНН", СведенияОбУчастнике.ИНН);
			
		Если ЗначениеЗаполнено(СведенияОбУчастнике.ПолноеНаименование)
			И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника." + ДополнениеТипаФЛ +".ПолноеНаименование") Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".ТипУчастника." + ДополнениеТипаФЛ +".ПолноеНаименование", СведенияОбУчастнике.ПолноеНаименование);
		КонецЕсли;
			
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника." + ДополнениеТипаФЛ +".Фамилия", СведенияОбУчастнике.Фамилия);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника." + ДополнениеТипаФЛ +".Имя", СведенияОбУчастнике.Имя);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".ТипУчастника." + ДополнениеТипаФЛ +".Отчество", СведенияОбУчастнике.Отчество);
		
	КонецЕсли;
	
	СведенияОбУчастнике.Вставить("ДатаКИ", ДатаКИ);
	АдресУчастника = Новый Структура();
	ОбменСКонтрагентамиПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике, "Ссылка", ВидАдреса);
	
	Если АдресУчастника.Свойство("АдресРФ") Тогда
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".Адрес.АдресРФ") Тогда
			ТипАдреса = "АдресРФ";
		Иначе
			ТипАдреса = "Произвольный";
			Попытка
				Если НЕ ЗначениеЗаполнено(АдресУчастника.АдрТекст) Тогда
					Если СведенияОбУчастнике.Свойство("АдрТекст") 
						И ЗначениеЗаполнено(СведенияОбУчастнике.АдрТекст) Тогда
						АдресУчастника.АдрТекст = СведенияОбУчастнике.АдрТекст;
					КонецЕсли;
				КонецЕсли;
			Исключение
				СтрокаОшибки = ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны)
		И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".Контакт.Телефон") Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Контакт.Телефон",
									СведенияОбУчастнике.Телефоны);
	КонецЕсли;
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) 
		 И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ВидУчастника + ".БанковскийСчет") Тогда
		Банк = "";
		БИК = "";
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".БанковскийСчет.НомерСчета", НомерСчета);
		
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			Если ТипЗнч(Банк) = Тип("Строка") Тогда
				БанкНаименование = Банк
			Иначе
				БанкНаименование = Банк.Наименование
			КонецЕсли;
				
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".БанковскийСчет.НаимБанк", БанкНаименование);
		КонецЕсли;
		
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ВидУчастника + ".БанковскийСчет.БИК", БИК);
		КонецЕсли;
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Руководитель";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Фамилия", Значение.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Имя", Значение.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Отчество", Значение.Отчество);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Должность", Значение.Должность);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Комментарий";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) 
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".КодОКПО";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("КодПоОКПО", Значение) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВДеревоДанныеСчета(ДеревоДокумента, ДанныеСчета) Экспорт
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.НомерСчета", ДанныеСчета.НомерСчета);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.Наименование", ДанныеСчета.Банк.Наименование);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.БИК", ДанныеСчета.Банк.Код);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.СчетКорреспондентский", ДанныеСчета.Банк.КоррСчет);
	
	Если ЗначениеЗаполнено(ДанныеСчета.БанкДляРасчетов) Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование", ДанныеСчета.БанкДляРасчетов.Наименование);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", ДанныеСчета.БанкДляРасчетов.КоррСчет);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК", ДанныеСчета.БанкДляРасчетов.Код);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника)
	
	АдресУчастника.Удалить("ПроизвольныйАдрес");
	
	Если ТипАдреса = "Произвольный" Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес.Произвольный",
									АдресУчастника.АдрТекст);
	ИначеЕсли ТипАдреса = "АдресРФ" Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("КодСтраны");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("АдресТекст");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодГАР");
			
		Для Каждого Элемент Из АдресУчастника Цикл
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение);
		КонецЦикла;
	ИначеЕсли ТипАдреса = "АдресИнформация" Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("ПочтовыйИндекс");
			АдресУчастника.Удалить("Индекс");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("Район");
			АдресУчастника.Удалить("Город");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Улица");
			АдресУчастника.Удалить("Дом");
			АдресУчастника.Удалить("Корпус");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("КодГАР");
	
		Для Каждого Элемент Из АдресУчастника Цикл
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение);
		КонецЦикла;
	ИначеЕсли ТипАдреса = "КодГАР" Тогда
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес.КодГАР",
									Элемент.Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначениеРеквизитаДерева(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда 
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе // Передали строку с реквизитом
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		
		Если ИмяРеквизита = "СтавкаНДС" ИЛИ ИмяРеквизита = "НалСтВел" Тогда
			Результат = НайтиПеречисление("НДС", Результат);
		Иначе
			// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора), тогда нашли всего лишь индекс строки
			Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда
					Результат = НайденнаяСтрока.СсылкаНаОбъект;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиПеречисление(Наименование, ПредставлениеПеречисления)
	
	НайденноеЗначение = Неопределено;
	Если Наименование = "НДС" Тогда
		ИмяПеречисления = "СтавкиНДС";
		Если НЕ ТипЗнч(ПредставлениеПеречисления)=Тип("ПеречислениеСсылка.СтавкиНДС") Тогда // определяем по числу
			Возврат ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия(ПредставлениеПеречисления); 
		КонецЕсли;
	ИначеЕсли Наименование = "ТипНоменклатуры" Тогда
		ИмяПеречисления = "ТипыНоменклатуры";
	ИначеЕсли Наименование = "ТипыНалогообложенияНДС" Тогда
		ИмяПеречисления = "ТипыНалогообложенияНДС";	
	ИначеЕсли Наименование = "СпособыРасчетаКомиссионногоВознаграждения" Тогда
		ИмяПеречисления = "СпособыРасчетаКомиссионногоВознаграждения";	
	ИначеЕсли Наименование = "ВариантыОплатыКлиентом" Тогда
		ИмяПеречисления = "ВариантыОплатыКлиентом";	
	ИначеЕсли Наименование = "ВариантыОплатыПоставщику" Тогда
		ИмяПеречисления = "ВариантыОплатыПоставщику";			
	ИначеЕсли Наименование = "ФормыОплаты" Тогда
		ИмяПеречисления = "ФормыОплаты";	
	ИначеЕсли Наименование = "СпособРасчета" Тогда
		ИмяПеречисления = "СпособыРасчетаКомиссионногоВознаграждения";	
		Если ПредставлениеПеречисления = "От суммы" Тогда
			ПредставлениеПеречисления = НСтр("ru = 'Процент от суммы продажи'");
		ИначеЕсли ПредставлениеПеречисления = "От разницы" Тогда
			ПредставлениеПеречисления = НСтр("ru = 'Процент от разности суммы продажи и суммы комитента'");
		КонецЕсли;	
	Иначе
		Возврат НайденноеЗначение;
	КонецЕсли;
	
	Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Если Врег(ЭлПеречисления.Синоним) = Врег(ПредставлениеПеречисления) тогда
			НайденноеЗначение = Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденноеЗначение;
	
КонецФункции

Процедура ЗагрузитьКаталогТоваров(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать)
	
	Если СсылкаНаВладельца = Неопределено Тогда
		Контрагент = Неопределено;
	Иначе
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаВладельца, "Контрагент");
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		СтрокиТЧ = СтрокаДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
		ТаблицаЗагрузки = Новый ТаблицаЗначений;
		ТаблицаЗагрузки.Колонки.Добавить("Идентификатор", ВариантыОтчетов.ОписаниеТиповСтрока(200));
		
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			
			ИдентификаторТовара = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Ид");
			Если ЗначениеЗаполнено(ИдентификаторТовара) Тогда
				
				НовСтрока = ТаблицаЗагрузки.Добавить();
				НовСтрока.Идентификатор = ИдентификаторТовара;
				
			КонецЕсли;
			
			
		КонецЦикла;
		
		Если ТаблицаЗагрузки.Количество() > 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ТаблицаЗагрузки.Идентификатор КАК Идентификатор
			|ПОМЕСТИТЬ ТаблицаЗагрузки
			|ИЗ
			|	&ТаблицаЗагрузки КАК ТаблицаЗагрузки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&Поставщик КАК Поставщик,
			|	&ПустойМагазин КАК Магазин,
			|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
			|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
			|	НоменклатураПоставщиков.Упаковка КАК Упаковка,
			|	ТаблицаЗагрузки.Идентификатор КАК Идентификатор,
			|	НоменклатураПоставщиков.Цена КАК Цена,
			|	НоменклатураПоставщиков.ДатаПоследнегоПоступления КАК ДатаПоследнегоПоступления,
			|	НоменклатураПоставщиков.Артикул КАК Артикул
			|ИЗ
			|	ТаблицаЗагрузки КАК ТаблицаЗагрузки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
			|		ПО НоменклатураПоставщиков.Поставщик = &Поставщик
			|			И ТаблицаЗагрузки.Идентификатор = НоменклатураПоставщиков.Идентификатор";
			Запрос.УстановитьПараметр("ТаблицаЗагрузки", ТаблицаЗагрузки);
			Запрос.УстановитьПараметр("Поставщик", Контрагент);
			Запрос.УстановитьПараметр("ПустойМагазин", Справочники.Магазины.ПустаяСсылка());
			Выборка = Запрос.Выполнить().Выбрать();
			
			ДеревоКартинок = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДеревоКартинок");
			ЕстьКартинки = ДеревоКартинок <> Неопределено;
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.НоменклатураПоставщиков.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
				МенеджерЗаписи.Записать(Истина);
				Если ЕстьКартинки Тогда
					СтрокаТовара = ДеревоКартинок.Строки.Найти(Выборка.Идентификатор, "ИдентификаторТовара");
				КонецЕсли;
			КонецЦикла;
	
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗагрузитьПрайсЛист(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ТипОбъекта", "Контрагенты");
	СтрокиКонтрагента = ДеревоРазбора.Строки.НайтиСтроки(СтруктураПоиска);
	Если СтрокиКонтрагента.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если СтрокиКонтрагента[0].Строки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Контрагент = СтрокиКонтрагента[0].Строки[0].СсылкаНаОбъект;
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеДляЗагрузки = Новый Структура;
	Товары = Документы.УстановкаЦенНоменклатуры.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	
	СтрокиТЧ = СтрокаДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	ТаблицаЗагрузки = Новый ТаблицаЗначений;
	ТаблицаЗагрузки.Колонки.Добавить("Идентификатор", ВариантыОтчетов.ОписаниеТиповСтрока(200));
	ТаблицаЗагрузки.Колонки.Добавить("Цена", ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));

	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		ИдентификаторТовара = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Ид");
		Если ЗначениеЗаполнено(ИдентификаторТовара) Тогда
			Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаТЧ, "Цена");
			
			НовСтрока = ТаблицаЗагрузки.Добавить();
			НовСтрока.Идентификатор = ИдентификаторТовара;
			НовСтрока.Цена = Цена;
			
		КонецЕсли;
		
		
	КонецЦикла;

	Если ТаблицаЗагрузки.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаЗагрузки.Идентификатор КАК Идентификатор,
		|	ТаблицаЗагрузки.Цена КАК Цена
		|ПОМЕСТИТЬ ТаблицаЗагрузки
		|ИЗ
		|	&ТаблицаЗагрузки КАК ТаблицаЗагрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&Поставщик КАК Поставщик,
		|	&ПустойМагазин КАК Магазин,
		|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
		|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
		|	НоменклатураПоставщиков.Упаковка КАК Упаковка,
		|	ТаблицаЗагрузки.Идентификатор КАК Идентификатор,
		|	ТаблицаЗагрузки.Цена КАК Цена,
		|	НоменклатураПоставщиков.ДатаПоследнегоПоступления КАК ДатаПоследнегоПоступления,
		|	НоменклатураПоставщиков.Артикул КАК Артикул
		|ИЗ
		|	ТаблицаЗагрузки КАК ТаблицаЗагрузки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|		ПО НоменклатураПоставщиков.Поставщик = &Поставщик
		|			И ТаблицаЗагрузки.Идентификатор = НоменклатураПоставщиков.Идентификатор";
		Запрос.УстановитьПараметр("ТаблицаЗагрузки", ТаблицаЗагрузки);
		Запрос.УстановитьПараметр("Поставщик", Контрагент);
		Запрос.УстановитьПараметр("ПустойМагазин", Справочники.Магазины.ПустаяСсылка());
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.НоменклатураПоставщиков.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

Функция ОрганизацияПоДаннымЭД(ДеревоДанных, ВидУчастника)
	
	Организация = Неопределено;
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И Организации.КПП = &КПП
			|	И НЕ Организации.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И НЕ Организации.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		НаименованиеПолное = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		Если ЗначениеЗаполнено(НаименованиеПолное) Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Организации.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Организации КАК Организации
				|ГДЕ
				|	Организации.НаименованиеПолное = &НаименованиеПолное
				|	И НЕ Организации.ПометкаУдаления";
			Запрос.УстановитьПараметр("НаименованиеПолное", НаименованиеПолное);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Организация = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

Функция КонтрагентПоДаннымЭД(ДеревоДанных, ВидУчастника)
	
	Контрагент = Неопределено;
	Если ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
		КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И Контрагенты.КПП = &КПП
			|	И НЕ Контрагенты.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Контрагент = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН");
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И НЕ Контрагенты.ПометкаУдаления";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Контрагент = Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		НаименованиеПолное = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации");
		Если ЗначениеЗаполнено(НаименованиеПолное) Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Контрагенты.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.НаименованиеПолное = &НаименованиеПолное
				|	И НЕ Контрагенты.ПометкаУдаления";
			Запрос.УстановитьПараметр("НаименованиеПолное", НаименованиеПолное);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Контрагент = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ" Тогда
		ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН");
		
		Фамилия  = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Фамилия");
		Имя      = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Имя");
		Отчество = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.Отчество");
		
		ЭлементыИмени = Новый Массив;
		Если ЗначениеЗаполнено(Фамилия) Тогда
			ЭлементыИмени.Добавить(Фамилия);
		КонецЕсли;
		Если ЗначениеЗаполнено(Имя) Тогда
			ЭлементыИмени.Добавить(Имя);
		КонецЕсли;
		Если ЗначениеЗаполнено(Отчество) Тогда
			ЭлементыИмени.Добавить(Отчество);
		КонецЕсли;
		ПолноеНаименование = СтрСоединить(ЭлементыИмени, " ");
		
		Если ЗначениеЗаполнено(ИНН) Или ЗначениеЗаполнено(НаименованиеПолное) Тогда 
			Запрос = Новый Запрос();
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Контрагенты.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.ИНН = &ИНН";
			Если ЗначениеЗаполнено(ИНН) Тогда
				Запрос.УстановитьПараметр("ИНН", ИНН);
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Контрагенты.ИНН = &ИНН", "Контрагенты.НаименованиеПолное = &НаименованиеПолное");
				Запрос.УстановитьПараметр("НаименованиеПолное", ПолноеНаименование);
			КонецЕсли;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Контрагент = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

Процедура ЗаполнитьДеревоДанныхУПД(СтруктураДанных, СтруктураЭД, ДеревоДанных)
	
	ВыборкаШапки = СтруктураДанных.ВыборкаШапки;
	
	СведенияОПродавце = Неопределено;
	Если ЗначениеЗаполнено(ВыборкаШапки.Организация) Тогда
		СведенияОПродавце = ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Организация, ВыборкаШапки.Дата);
		
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПродавце, "СведенияОПродавце",,,"ИП");
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.Организация");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОПродавце.Адрес", СведенияОПродавце.ЮридическийАдрес, ПараметрыОбработкиОшибок);
		
		Если ЗначениеЗаполнено(СведенияОПродавце.ЮридическийАдрес) Тогда
			СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(СведенияОПродавце.ЮридическийАдрес);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОПродавце.Адрес.АдресИнформация.КодСтраны", СведенияОбАдресе.КодСтраны,
				ПараметрыОбработкиОшибок);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОПродавце.Адрес.АдресИнформация.АдресТекст", СведенияОПродавце.ЮридическийАдрес,
				ПараметрыОбработкиОшибок);
		КонецЕсли;

		СоставительДокументаНаименование = СведенияОПродавце.ПолноеНаименование
			+ ?(ЗначениеЗаполнено(СведенияОПродавце.КПП),
				СтрШаблон(НСтр("ru = ', ИНН/КПП %1/%2'"), СведенияОПродавце.ИНН, СведенияОПродавце.КПП),
				СтрШаблон(НСтр("ru = ', ИНН %1'"), СведенияОПродавце.ИНН));
				
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.Организация");	
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СоставительДокументаНаименование", СоставительДокументаНаименование, ПараметрыОбработкиОшибок);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОГрузоотправителе.ОнЖе", Истина);
	Иначе
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.Организация");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОПродавце", СведенияОПродавце, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	СведенияОПокупателе = Неопределено; 
	Если ЗначениеЗаполнено(ВыборкаШапки.Контрагент) Тогда
		СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ВыборкаШапки.Контрагент, ВыборкаШапки.Дата);
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "СведенияОПокупателе",,,"ИП");
		ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОПокупателе, "СведенияОГрузополучателе",,,"ИП");
		
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.Контрагент");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОПокупателе.Адрес", СведенияОПокупателе.ЮридическийАдрес, ПараметрыОбработкиОшибок);
		Если ЗначениеЗаполнено(СведенияОПокупателе.ЮридическийАдрес) Тогда
			СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(СведенияОПокупателе.ЮридическийАдрес);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОПокупателе.Адрес.АдресИнформация.КодСтраны", СведенияОбАдресе.КодСтраны,
				ПараметрыОбработкиОшибок);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОПокупателе.Адрес.АдресИнформация.АдресТекст", СведенияОПокупателе.ЮридическийАдрес,
				ПараметрыОбработкиОшибок);
			// 
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОГрузополучателе.Адрес.АдресИнформация.КодСтраны", СведенияОбАдресе.КодСтраны,
				ПараметрыОбработкиОшибок);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОГрузополучателе.Адрес.АдресИнформация.АдресТекст", СведенияОПокупателе.ЮридическийАдрес,
				ПараметрыОбработкиОшибок);
		КонецЕсли;
			
	Иначе
		ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ВыборкаШапки.Ссылка, 
			"Объект.Контрагент");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"СведенияОПокупателе", СведенияОПокупателе, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
	// Обработка ошибки с указанием расширенного текста сообщения вместо параметров обработки ошибки.
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить код валюты документа. Проверьте, что:
	|	- в документе указана валюта,
	|	- для нее заполнен код по Общероссийскому классификатору валют.'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод",
		ВыборкаШапки.ВалютаКод, ТекстОшибки);
	
	
	Если СтруктураЭД.Функция <> "СЧФ" Тогда 
		
		Если ЗначениеЗаполнено(ВыборкаШапки.ДоговорКонтрагента) Тогда
			
			ОснованиеОтгрузкиТоваров = Новый ТаблицаЗначений;
			ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДоговорКонтрагента");
			ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНаименование");
			ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНомер");
			ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДата");
			ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДопСведения");
			
			НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
			НоваяСтрока.ДоговорКонтрагента   = ВыборкаШапки.ДоговорКонтрагента;
			НоваяСтрока.ДокументНаименование = ВыборкаШапки.НаименованиеДоговора;
			НоваяСтрока.ДокументНомер        = ВыборкаШапки.НомерДоговора;
			НоваяСтрока.ДокументДата         = ВыборкаШапки.ДатаДоговора;
			
			// Дополним таблицу оснований параметрами обработки ошибок.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
				"ДокументНаименование", "ДоговорКонтрагента", "Объект.Наименование");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
				"ДокументНомер", "ДоговорКонтрагента", "Объект.НомерДоговора");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
				"ДокументДата", "ДоговорКонтрагента", "Объект.ДатаДоговора");
			
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеОтгрузкиТоваров, "ОснованиеОтгрузкиТоваров");
			
		КонецЕсли;
		
	КонецЕсли;
	
		СведенияОТоварах = Новый ТаблицаЗначений;
		СведенияОТоварах.Колонки.Добавить("НомерСтроки");
		СведенияОТоварах.Колонки.Добавить("НомерСтрокиИсходногоДокумента");
		СведенияОТоварах.Колонки.Добавить("ИдТовараУКонтрагента", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
		СведенияОТоварах.Колонки.Добавить("ТоварИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
		СведенияОТоварах.Колонки.Добавить("ТоварКод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
		СведенияОТоварах.Колонки.Добавить("ТоварНаименование");
		СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмеренияКод");
		СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
		СведенияОТоварах.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
		СведенияОТоварах.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
		СведенияОТоварах.Колонки.Добавить("НалоговаяСтавка");
		СведенияОТоварах.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
		СведенияОТоварах.Колонки.Добавить("СтоимостьТоваровСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
		СведенияОТоварах.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
		СведенияОТоварах.Колонки.Добавить("СведенияОТаможеннойДекларации", Новый ОписаниеТипов("ТаблицаЗначений"));
		СведенияОТоварах.Колонки.Добавить("СтранаПроисхожденияНаименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
		СведенияОТоварах.Колонки.Добавить("Признак", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1)));
		СведенияОТоварах.Колонки.Добавить("Номенклатура");
		СведенияОТоварах.Колонки.Добавить("ЕдиницаИзмерения");
		СведенияОТоварах.Колонки.Добавить("ТоварНаименованиеНавигационнаяСсылка");
		
		ЕстьТовары = Ложь;
		ЕстьУслуги = Ложь;
		ЕстьРаботы = Ложь;
		ЕстьПрава  = Ложь;
		
		НомерСтроки = 1;
		ВыборкаТоваров = СтруктураДанных.ВыборкаТоваров;
		Пока ВыборкаТоваров.Следующий() Цикл
			
			НоваяСтрока = СведенияОТоварах.Добавить();
			НоваяСтрока.НомерСтроки = НомерСтроки;
			НоваяСтрока.НомерСтрокиИсходногоДокумента = ВыборкаТоваров.НомерСтроки;
			НомерСтроки = НомерСтроки +1;
			
			НоваяСтрока.ИдТовараУКонтрагента         = Строка(ВыборкаТоваров.ИдТовараУКонтрагента);
			НоваяСтрока.ТоварИдентификатор           = Строка(ВыборкаТоваров.ИдТовараУКонтрагента);
			НоваяСтрока.ТоварКод                     = ВыборкаТоваров.НоменклатураКод;
			НоваяСтрока.ТоварНаименование            = ВыборкаТоваров.НоменклатураНаименование;
			НоваяСтрока.ЕдиницаИзмеренияКод          = ВыборкаТоваров.ЕдиницаИзмеренияКод;
			НоваяСтрока.ЕдиницаИзмеренияНаименование = ВыборкаТоваров.ЕдиницаИзмеренияНаименование;
			НоваяСтрока.Количество                   = ВыборкаТоваров.Количество;
			
			НоваяСтрока.ЦенаЗаЕдиницуИзмерения       = ?(ВыборкаТоваров.Количество = 0, 0, Окр(ВыборкаТоваров.СуммаБезНДС / ВыборкаТоваров.Количество, 2));
			НоваяСтрока.СтоимостьТоваровБезНалога    = ВыборкаТоваров.СуммаБезНДС;
			НоваяСтрока.НалоговаяСтавка          = ВыборкаТоваров.СтавкаНДС;
			НоваяСтрока.СуммаНалога              = ВыборкаТоваров.СуммаНДС;
			НоваяСтрока.СтоимостьТоваровСНалогом = ВыборкаТоваров.СуммаСНДС;
			
			НоваяСтрока.Номенклатура = ВыборкаТоваров.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = ВыборкаТоваров.ЕдиницаИзмерения;
			Если ЗначениеЗаполнено(ВыборкаТоваров.Номенклатура) Тогда
				НоваяСтрока.ТоварНаименованиеНавигационнаяСсылка = ПолучитьНавигационнуюСсылку(
					ВыборкаТоваров.Номенклатура, "Наименование");
			КонецЕсли;
			
			Если ВыборкаТоваров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
				ИЛИ ВыборкаТоваров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
				ЕстьТовары = Истина;
				НоваяСтрока.Признак = "1";
				
			ИначеЕсли ВыборкаТоваров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				ЕстьУслуги = Истина;
				НоваяСтрока.Признак = "3";
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаТоваров.НомерГТД) Тогда
				СведенияОТаможеннойДекларации = Новый ТаблицаЗначений;
				СведенияОТаможеннойДекларации.Колонки.Добавить("СтранаПроисхожденияКод",
					Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(3)));
				СведенияОТаможеннойДекларации.Колонки.Добавить("ТаможеннаяДекларацияНомер",
					Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(29)));
				СтрокаТД = СведенияОТаможеннойДекларации.Добавить();
				СтрокаТД.ТаможеннаяДекларацияНомер = ВыборкаТоваров.НомерГТД;
				СтрокаТД.СтранаПроисхожденияКод    = ВыборкаТоваров.СтранаПроисхожденияКод;
				НоваяСтрока.СведенияОТаможеннойДекларации   = СведенияОТаможеннойДекларации;
				НоваяСтрока.СтранаПроисхожденияНаименование = ВыборкаТоваров.СтранаПроисхожденияНаименование;
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстОшибки = НСтр("ru = 'Не удалось заполнить итоговые стоимостные показатели. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- не заполнены колонки ""Сумма"", ""НДС"", ""Количество""'");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога", СведенияОТоварах.Итог("СтоимостьТоваровБезНалога"), ТекстОшибки);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом", СведенияОТоварах.Итог("СтоимостьТоваровСНалогом"), ТекстОшибки);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоСуммаНалога", СведенияОТоварах.Итог("СуммаНалога"), ТекстОшибки);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
			"ВсегоКОплате.ВсегоКоличество", СведенияОТоварах.Итог("Количество"), ТекстОшибки);
		
		// Обработка ошибки с открытием формы по навигационной ссылке.
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезНавигационнуюСсылку(СведенияОТоварах,
			"ТоварНаименование", "ТоварНаименованиеНавигационнаяСсылка");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезОткрытиеФормы(СведенияОТоварах,
			"ТоварНаименование", "Справочник.Номенклатура.ФормаОбъекта",, Новый Структура("Ключ", "Номенклатура"));
		
		// Обработка ошибки через механизм сообщений пользователю.
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
			"ТоварКод", "Номенклатура", "Объект.Код");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
			"ТоварНаименование", "Номенклатура", "Объект.НаименованиеПолное");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
			"Количество", ВыборкаТоваров.Ссылка, "Объект.Товары.Количество",, "НомерСтрокиИсходногоДокумента");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
			"ЦенаЗаЕдиницуИзмерения", ВыборкаТоваров.Ссылка, "Объект.Товары.Цена",, "НомерСтрокиИсходногоДокумента");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
			"СтоимостьТоваровБезНалога", ВыборкаТоваров.Ссылка, "Объект.Товары.Сумма",, "НомерСтрокиИсходногоДокумента");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
			"СуммаНалога", ВыборкаТоваров.Ссылка, "Объект.Товары.СуммаНДС",, "НомерСтрокиИсходногоДокумента");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
			"ЕдиницаИзмеренияНаименование", "ЕдиницаИзмерения", "Объект.Наименование");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
			"ЕдиницаИзмеренияКод", "ЕдиницаИзмерения", "Объект.Код");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
			"Признак", "Номенклатура", "Объект.ВидНоменклатуры");
		
		// Обработка ошибки через упрощенный механизм
		ТекстОшибки = НСтр("ru = 'для формирования электронного документа необходимо указать налоговую ставку'");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СведенияОТоварах,
			"НалоговаяСтавка",,, ТекстОшибки);
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, СведенияОТоварах, "СведенияОТоварах");
		
		ТекстОшибки = НСтр("ru = 'Возникла ошибка при заполнении страны происхождения в сведениях по ГТД. Возможные причины:
		|	- не заполнена колонка ""Страна происхождения""
		|	- указанной страны нет в классификаторе стран мира'");
		ЭлектронноеВзаимодействие.ДобавитьВРеквизитОбработкуОшибки(ДеревоДанных,
			"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод", ТекстОшибки);
		
		Если СтруктураЭД.Функция <> "СЧФ" Тогда 
			
			ТолькоУслуги = Истина;
			СоставСодержания = Новый Массив;
			СоставСодержания.Добавить(НСтр("ru = 'Товары переданы.'"));
			ТолькоУслуги = Ложь;
			СодержаниеОперации = СтрСоединить(СоставСодержания, " ");
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", СодержаниеОперации);
			ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
			
		КонецЕсли;
	
КонецПроцедуры

Функция ДатаПолученияТовараПриемкиРабот(СтруктураЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_Основание
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка = &ВладелецЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеТоваров.Дата КАК Дата
	|ИЗ
	|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Основание КАК ВТ_Основание
	|		ПО ПоступлениеТоваров.Ссылка = ВТ_Основание.ДокументОснование";
	Запрос.УстановитьПараметр("ВладелецЭД", СтруктураЭД.ВладелецЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Дата) Тогда
		ДатаПолучения = Выборка.Дата;
	Иначе
		ДатаПолучения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат ДатаПолучения;
	
Конецфункции

Функция СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.НоменклатураПоставщиков.СоздатьМенеджерЗаписи();
	Для Каждого СтрокаНоменклатуры Из СтрокаОбъекта.Строки Цикл
		Если СтрокаНоменклатуры.Реквизит = "Номенклатура" Тогда
			МенеджерЗаписи.Номенклатура = СтрокаНоменклатуры.СсылкаНаОбъект;
		ИначеЕсли СтрокаНоменклатуры.Реквизит = "Хараткеристика" Тогда
			МенеджерЗаписи.Характеристика = СтрокаНоменклатуры.СсылкаНаОбъект;
		ИначеЕсли СтрокаНоменклатуры.Реквизит = "Упаковка" Тогда
			МенеджерЗаписи.Упаковка = СтрокаНоменклатуры.СсылкаНаОбъект;
		ИначеЕсли СтрокаНоменклатуры.Реквизит = "Ид" Тогда
			МенеджерЗаписи.Идентификатор = СтрокаНоменклатуры.ЗначениеРеквизита;
		ИначеЕсли СтрокаНоменклатуры.ТипОбъекта = "Контрагенты" Тогда
			Если СтрокаНоменклатуры.Строки.Количество() > 0 Тогда
				МенеджерЗаписи.Поставщик = СтрокаНоменклатуры.Строки[0].СсылкаНаОбъект;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МенеджерЗаписи.Номенклатура)
		И ЗначениеЗаполнено(МенеджерЗаписи.Идентификатор)
		И ЗначениеЗаполнено(МенеджерЗаписи.Поставщик) Тогда
		МенеджерЗаписи.Записать(Истина);
		Возврат МенеджерЗаписи.Номенклатура;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура НайтиСоздатьДокументПередачаТоваровУПД(ДеревоДанных, СсылкаНаВладельца, Записывать = Истина, СпособОбработки = "")
	
	Если ЗначениеЗаполнено(СсылкаНаВладельца) И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		ДокументОбъект.Товары.Очистить();
	Иначе
		ДокументОбъект = Документы.ПоступлениеТоваров.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ДокументОбъект.Контрагент  = КонтрагентПоДаннымЭД(ДеревоДанных,  "СведенияОПродавце");
	ДокументОбъект.Организация = ОрганизацияПоДаннымЭД(ДеревоДанных, "СведенияОПокупателе");
	
	ДокументОбъект.НомерВходящегоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента");
	ДокументОбъект.ДатаВходящегоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента");
	
	ИдентификаторСтроки = 0;
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		
		КоличествоМест = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.КоличествоУпаковок = КоличествоМест;
		Если НоваяСтрока.КоличествоУпаковок = 0 Тогда
			НоваяСтрока.Цена = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		Иначе
			НоваяСтрока.Сумма = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
			НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.КоличествоУпаковок, 2, 1);
		КонецЕсли;
		
		СтавкаНДСЧисло = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			"СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		Если СтавкаНДСЧисло = "НДС исчисляется налоговым агентом" Тогда
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
			НоваяСтрока.СтавкаНДС = НайтиПеречисление("НДС", СтавкаНДСЧисло);
		КонецЕсли;
		
		
		Идентификатор = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ИдТовараУКонтрагента");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
		|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
		|	НоменклатураПоставщиков.Упаковка КАК Упаковка,
		|	ЕСТЬNULL(НоменклатураПоставщиков.Упаковка.Коэффициент, 0) КАК КоэффициентУпаковки
		|ИЗ
		|	РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Поставщик = &Поставщик
		|	И НоменклатураПоставщиков.Идентификатор = &Идентификатор
		|	И НоменклатураПоставщиков.Магазин = &ПустойМагазин
		|";
		Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
		Запрос.УстановитьПараметр("Поставщик", ДокументОбъект.Контрагент);
		Запрос.УстановитьПараметр("ПустойМагазин", Справочники.Магазины.ПустаяСсылка());
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			Если ЗначениеЗаполнено(Выборка.КоэффициентУпаковки) И Выборка.КоэффициентУпаковки <> 1 Тогда
				НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок * Выборка.КоэффициентУпаковки;
			Иначе
				НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗавершениеЗагрузкиИЗаписьДокумента(СсылкаНаВладельца, ДокументОбъект, Записывать);
	
КонецПроцедуры

Процедура ЗавершениеЗагрузкиИЗаписьДокумента(СсылкаНаВладельца, ДокументОбъект, Записывать)
	
	Если Записывать Тогда
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			ТекстСообщения = НСтр("ru = 'Не удалось записать документ %1 по причине:'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения + Символы.ПС + СтрокаОшибки);
		КонецПопытки;
		СсылкаНаВладельца = ДокументОбъект.Ссылка;
	Иначе // если функция вызвана из формы "Обработки.ОбменСКонтрагентами.ФормаЗагрузкиПросмотраЭД"
		СсылкаНаВладельца = ДокументОбъект;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
