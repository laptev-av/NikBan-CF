
Функция ИмяПоля(Шаблон, ИмяПоля)
	Возврат СтрЗаменить(Шаблон, "%ИмяПоля%", ИмяПоля);
КонецФункции

// Процедура установки отбора по видам номенклатуры.
//
Процедура УстановитьОтборПоКатегориям(МассивКатегорий, ПодборТаблицаНоменклатура, ПодборТаблицаХарактеристики) Экспорт
	
	ПоискПоКатегориям = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ПодборТаблицаНоменклатура.Отбор.Элементы,
		"ПоискПоКатегориям",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли
	);
	
	Для Каждого Категория Из МассивКатегорий Цикл
		
		ОтборыСписковКлиентСервер.УстановитьЭлементОтбораГруппыСписка(
			ПоискПоКатегориям,
			ИмяПоля("Номенклатура.[%ИмяПоля%]", Категория),
			Истина,
			Истина, ВидСравненияКомпоновкиДанных.Равно
		);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура установки отбора по видам номенклатуры.
//
Процедура УстановитьОтборПоВидамНоменклатуры(ДанныеОтбора, ПодборТаблицаНоменклатура, ПодборТаблицаХарактеристики) Экспорт
	
	ЭлементыОтбора = ПодборТаблицаНоменклатура.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	ПоискПоСвойствамВТаблицеНоменклатуры = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ЭлементыОтбора,
		"ПоискПоСвойствамФильтрТаблицыОстатков",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли
	);
	
	ПоискПоСвойствамВТаблицеНоменклатурыОсновная = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ЭлементыОтбора,
		"ПоискПоСвойствамФильтрОсновнойТаблицы",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли
	);
	
	ПоискПоСвойствамХарактеристикВТаблицеХарактеристик = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ЭлементыОтбора,
		"ПоискПоСвойствамФильтрТаблицыОстатков",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли
	);
	
	Счетчик = 0;
	Для каждого ЭлементДанных Из ДанныеОтбора Цикл
		
		Счетчик = Счетчик + 1;
		
		ПоискПоСвойствамВидаНоменклатурыВТаблицеНоменклатуры = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ПоискПоСвойствамВТаблицеНоменклатуры.Элементы,
			"ПоискПоСвойствам" + Счетчик,
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ
		);
		
		ПоискПоСвойствамВидаНоменклатурыВТаблицеНоменклатурыОсновная = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ПоискПоСвойствамВТаблицеНоменклатурыОсновная.Элементы,
			"ПоискПоСвойствам" + Счетчик,
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ
		);
		
		ПоискПоСвойствамВидаНоменклатурыВТаблицеХарактеристик = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ПоискПоСвойствамХарактеристикВТаблицеХарактеристик.Элементы,
			"ПоискПоСвойствам" + Счетчик,
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ
		);
		
		// Перечисление свойств
		Для каждого СтруктураЗначенияСвойств Из ЭлементДанных.ЗначенияСвойств Цикл
			
			ИмяПоляНоменклатураОтбор = "НоменклатураОтбор.[%ИмяПоля%]";
			ИмяПоляНоменклатураОтбор = СтрЗаменить(ИмяПоляНоменклатураОтбор, "%ИмяПоля%", СтруктураЗначенияСвойств.Свойство);
			
			ИмяПоляНоменклатура = "Номенклатура.[%ИмяПоля%]";
			ИмяПоляНоменклатура = СтрЗаменить(ИмяПоляНоменклатура, "%ИмяПоля%", СтруктураЗначенияСвойств.Свойство);
			
			ИмяПоляХарактеристикаОтбор = "ХарактеристикаОтбор.[%ИмяПоля%]";
			ИмяПоляХарактеристикаОтбор = СтрЗаменить(ИмяПоляХарактеристикаОтбор, "%ИмяПоля%", СтруктураЗначенияСвойств.Свойство);
			
			ИмяПоляХарактеристика = "Характеристика.[%ИмяПоля%]";
			ИмяПоляХарактеристика = СтрЗаменить(ИмяПоляХарактеристика, "%ИмяПоля%", СтруктураЗначенияСвойств.Свойство);
			
			Если СтруктураЗначенияСвойств.ДобавитьНеЗаполнено Тогда
				
				ПоискПоСвойствамВидаНоменклатурыВТаблицеНоменклатурыВложеннаяИЛИ = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
					ПоискПоСвойствамВидаНоменклатурыВТаблицеНоменклатуры.Элементы,
					"ПоискПоСвойствам" + Счетчик,
					ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли
				);
				
				ПоискПоСвойствамВидаНоменклатурыВТаблицеХарактеристикВложеннаяИЛИ = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
					ПоискПоСвойствамВидаНоменклатурыВТаблицеХарактеристик.Элементы,
					"ПоискПоСвойствам" + Счетчик,
					ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли
				);
				
				// Основная
				ПоискПоСвойствамВидаНоменклатурыВТаблицеНоменклатурыОсновнаяВложеннаяИЛИ = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
					ПоискПоСвойствамВидаНоменклатурыВТаблицеНоменклатурыОсновная.Элементы,
					"ПоискПоСвойствам" + Счетчик,
					ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли
				);
				
			КонецЕсли;
			
			Если СтруктураЗначенияСвойств.СвойствоХарактеристики Тогда
				
				ОтборыСписковКлиентСервер.УстановитьЭлементОтбораГруппыСписка(
					?(СтруктураЗначенияСвойств.ДобавитьНеЗаполнено, ПоискПоСвойствамВидаНоменклатурыВТаблицеНоменклатурыВложеннаяИЛИ, ПоискПоСвойствамВидаНоменклатурыВТаблицеНоменклатуры),
					ИмяПоляХарактеристикаОтбор,
					СтруктураЗначенияСвойств.Значение,
					Истина, ВидСравненияКомпоновкиДанных.ВСписке
				);
				
				ОтборыСписковКлиентСервер.УстановитьЭлементОтбораГруппыСписка(
					?(СтруктураЗначенияСвойств.ДобавитьНеЗаполнено, ПоискПоСвойствамВидаНоменклатурыВТаблицеХарактеристикВложеннаяИЛИ, ПоискПоСвойствамВидаНоменклатурыВТаблицеХарактеристик),
					ИмяПоляХарактеристика,
					СтруктураЗначенияСвойств.Значение,
					Истина, ВидСравненияКомпоновкиДанных.ВСписке
				);
				
				Если СтруктураЗначенияСвойств.ДобавитьНеЗаполнено Тогда
				
					ОтборыСписковКлиентСервер.УстановитьЭлементОтбораГруппыСписка(
						ПоискПоСвойствамВидаНоменклатурыВТаблицеНоменклатурыВложеннаяИЛИ,
						ИмяПоляХарактеристикаОтбор,
						,
						Истина, ВидСравненияКомпоновкиДанных.НеЗаполнено
					);
					
					ОтборыСписковКлиентСервер.УстановитьЭлементОтбораГруппыСписка(
						ПоискПоСвойствамВидаНоменклатурыВТаблицеХарактеристикВложеннаяИЛИ,
						ИмяПоляХарактеристика,
						,
						Истина, ВидСравненияКомпоновкиДанных.НеЗаполнено
					);
				
				КонецЕсли;
				
			Иначе
				
				ОтборыСписковКлиентСервер.УстановитьЭлементОтбораГруппыСписка(
					?(СтруктураЗначенияСвойств.ДобавитьНеЗаполнено, ПоискПоСвойствамВидаНоменклатурыВТаблицеНоменклатурыВложеннаяИЛИ, ПоискПоСвойствамВидаНоменклатурыВТаблицеНоменклатуры),
					ИмяПоляНоменклатураОтбор,
					СтруктураЗначенияСвойств.Значение,
					Истина, ВидСравненияКомпоновкиДанных.ВСписке
				);
				
				Если СтруктураЗначенияСвойств.ДобавитьНеЗаполнено Тогда
					ОтборыСписковКлиентСервер.УстановитьЭлементОтбораГруппыСписка(
						ПоискПоСвойствамВидаНоменклатурыВТаблицеНоменклатурыВложеннаяИЛИ,
						ИмяПоляНоменклатураОтбор,
						Неопределено,
						Истина, ВидСравненияКомпоновкиДанных.НеЗаполнено
					);
				КонецЕсли;
				
				ОтборыСписковКлиентСервер.УстановитьЭлементОтбораГруппыСписка(
					?(СтруктураЗначенияСвойств.ДобавитьНеЗаполнено, ПоискПоСвойствамВидаНоменклатурыВТаблицеНоменклатурыОсновнаяВложеннаяИЛИ, ПоискПоСвойствамВидаНоменклатурыВТаблицеНоменклатурыОсновная),
					ИмяПоляНоменклатура,
					СтруктураЗначенияСвойств.Значение,
					Истина, ВидСравненияКомпоновкиДанных.ВСписке
				);
				
				Если СтруктураЗначенияСвойств.ДобавитьНеЗаполнено Тогда
					ОтборыСписковКлиентСервер.УстановитьЭлементОтбораГруппыСписка(
						ПоискПоСвойствамВидаНоменклатурыВТаблицеНоменклатурыОсновнаяВложеннаяИЛИ,
						ИмяПоляНоменклатура,
						Неопределено,
						Истина, ВидСравненияКомпоновкиДанных.НеЗаполнено
					);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; // Цикл по свойствам вида номенклатуры.
		
	КонецЦикла; // Цикл по видам номенклатуры.
	
КонецПроцедуры

// Формирует заголовок формы подбора, состоящий из заголовка формы и представления документа.
//
// Параметры:
// Заголовок - Строка - заголовок формы.
// Документ  - ДокументСсылка - ссылка на документ, из которого открывается подбор.
//
// Возвращаемое значение:
// Строка
// Заголовок формы подбора
//
Функция СформироватьЗаголовокФормыПодбора(Заголовок, Документ) Экспорт
	
	Если Документ <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Документ) Тогда
			
			Заголовок = Заголовок + ": " + Документ;
			
		Иначе
			
			ТекстДокумент = НСтр("ru='%ТипДокумента% (новый)'");
			ТекстДокумент = СтрЗаменить(ТекстДокумент, "%ТипДокумента%", Документ.Метаданные().Синоним);
			Заголовок = Заголовок + ": " + ТекстДокумент;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции // СформироватьЗаголовокПодбора()

// Формирует заголовок формы подбора, состоящий из заголовка формы и представления документа.
//
// Параметры:
// ИнформационнаяНадпись - Строка - реквизит, в который будет помещена информационная надпись.
// ТаблицаТоваров        - ДанныеФормыКоллекция - таблица, по которой будет подсчитано количество и сумма подобранных
//                                                товаров.
//
Процедура СформироватьИнформационнуюНадписьПодобранныхТоваров(ИнформационнаяНадпись, ТаблицаТоваров) Экспорт
	
	ВыбранныеСтроки = ТаблицаТоваров.НайтиСтроки(Новый Структура("Выбран", Истина));
	
	КоличествоТоваров = ВыбранныеСтроки.Количество();
	
	СуммаТоваров = 0;
	Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
		Если ТекСтрока.Выбран Тогда
			СуммаТоваров = СуммаТоваров + ТекСтрока.СуммаВсего;
		КонецЕсли;
	КонецЦикла;
	
	ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано позиций %КоличествоТоваров% на сумму %СуммаТоваров% %Валюта%'");
	ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%КоличествоТоваров%", Формат(КоличествоТоваров, "ЧН=0"));
	ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%СуммаТоваров%",      Формат(СуммаТоваров, "ЧЦ=15; ЧДЦ=2; ЧН=0,00"));
	ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%Валюта%",            ОбщегоНазначенияРТКлиентСервер.ПредставлениеВалютыУчета().КодСимвольный);
	
КонецПроцедуры // СформироватьИнформационнуюНадписьПодобранныхТоваров()
