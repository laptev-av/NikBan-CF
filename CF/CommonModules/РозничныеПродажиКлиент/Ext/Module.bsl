
#Область ПрограммныйИнтерфейс

#Область ЗаказыПокупателей

// Проверяет заполненность реквизитов, необходимых для отмены строк в таблице.
//
// Параметры:
//	Документ                    - ДокументОбъект, для которого выполняются проверки.
//	ТабличнаяЧасть              - ДанныеФормыКоллекция - табличная часть, в которой необходимо осуществить проверку.
//	ПредставлениеТабличнойЧасти - Строка - представление табличной части для информирования пользователя.
//
// Возвращаемое значение:
//	Булево
//	Ложь, если необходимые данные не заполнены.
//
Функция НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(ТабличнаяЧасть, ПредставлениеТабличнойЧасти, ВыделенныеСтроки) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Строки не могут быть отменены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат Ложь;
		
	ИначеЕсли ВыделенныеСтроки.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='В таблице отсутствуют выделенные строки. Выделите строки для отмены'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Устанавливает у выделенных в таблице строк признак Отменено и заполняет причину отмены.
//
// Параметры:
//	ТабличнаяЧасть - ДанныеФормыКоллекция - табличная часть, в которой необходимо осуществить проверку.
//	ВыделенныеСтроки - Массив - массив выделенных пользователем строк табличной части.
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина, по которой отменяются строки.
//	СтруктураДействийСИзмененнымиСтроками - Структура - Структура действий с измененными строками.
//
Процедура ОтменитьВыделенныеСтроки(ТабличнаяЧасть, ВыделенныеСтроки, ПричинаОтмены, СтруктураДействийСИзмененнымиСтроками = Неопределено) Экспорт
	
	Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = ТабличнаяЧасть.НайтиПоИдентификатору(ТекСтрока);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			Если Не СтрокаТаблицы.Отменено Тогда
				СтрокаТаблицы.Отменено = Истина;
			КонецЕсли;
			
			Если СтрокаТаблицы.ПричинаОтмены <> ПричинаОтмены Тогда
				СтрокаТаблицы.ПричинаОтмены = ПричинаОтмены;
			КонецЕсли;
			
			Если СтруктураДействийСИзмененнымиСтроками <> Неопределено Тогда
				ОбработкаТабличнойЧастиТоварыКлиент.ОбработатьСтрокуТЧКлиент(СтрокаТаблицы, СтруктураДействийСИзмененнымиСтроками, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает у выделенных в таблице строк признак Отменено и заполняет причину отмены.
//
// Параметры:
//	ТабличнаяЧасть - ДанныеФормыКоллекция - табличная часть, в которой необходимо осуществить проверку.
//	ВыделенныеСтроки - Массив - массив выделенных пользователем строк табличной части.
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина, по которой отменяются строки.
//	СтруктураДействийСИзмененнымиСтроками - Структура - Структура действий с измененными строками.
//
Процедура ОтменитьВыделенныеНеЗарезервированныеСтроки(ТабличнаяЧасть, ВыделенныеСтроки, ПричинаОтмены, СтруктураДействийСИзмененнымиСтроками = Неопределено) Экспорт
	
	Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = ТабличнаяЧасть.НайтиПоИдентификатору(ТекСтрока);
		
		Если СтрокаТаблицы <> Неопределено 
			И НЕ СтрокаТаблицы.Резервировать Тогда
			
			Если Не СтрокаТаблицы.Отменено Тогда
				СтрокаТаблицы.Отменено = Истина;
			КонецЕсли;
			
			Если СтрокаТаблицы.ПричинаОтмены <> ПричинаОтмены Тогда
				СтрокаТаблицы.ПричинаОтмены = ПричинаОтмены;
			КонецЕсли;
			
			Если СтруктураДействийСИзмененнымиСтроками <> Неопределено Тогда
				ОбработкаТабличнойЧастиТоварыКлиент.ОбработатьСтрокуТЧКлиент(СтрокаТаблицы, СтруктураДействийСИзмененнымиСтроками, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Показывает оповещение пользователя об отмене выделенных строк.
//
// Параметры:
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - Причина отмены выделенных строк.
//
Процедура ОповеститьОбОтменеВыделенныхСтрок(ПричинаОтмены) Экспорт

		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выделенные строки отменены'"),
			,
			СтрЗаменить(НСтр("ru='Выделенные строки отменены по причине ""%ПричинаОтмены%""'"), "%ПричинаОтмены%", ПричинаОтмены),
			БиблиотекаКартинок.Информация32
		);
	
КонецПроцедуры

// Показывает оповещение пользователя об отмене выделенных строк.
//
// Параметры:
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - Причина отмены выделенных строк.
//
Процедура ОповеститьОбОтменеВыделенныхНеЗарезервированныхСтрок(ПричинаОтмены) Экспорт

		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выделенные незарезервированные строки отменены'"),
			,
			СтрЗаменить(НСтр("ru='Выделенные незарезервированные строки отменены по причине ""%ПричинаОтмены%""'"), "%ПричинаОтмены%", ПричинаОтмены),
			БиблиотекаКартинок.Информация32
		);
	
КонецПроцедуры

// Показывает оповещение пользователя об отмене выделенных строк.
//
// Параметры:
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - Причина отмены выделенных строк.
//
Процедура ОповеститьОбОтменеНепроданныхТоваров(ПричинаОтмены, КоличествоОтмененныхСтрок, ПроверятьОстатки) Экспорт

	Если КоличествоОтмененныхСтрок = 0 Тогда
			
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Строки не отменены'"),
			,
			НСтр("ru='По всем строкам оформлена продажа. Строки не могут быть отменены'"),
			БиблиотекаКартинок.Информация32
		);
			
	Иначе
			
		Если ПроверятьОстатки Тогда

			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Строки отменены'"),
				,
				СтрЗаменить(НСтр("ru='Все не проданные товары отменены по причине ""%ПричинаОтмены%""'"), "%ПричинаОтмены%", ПричинаОтмены),
				БиблиотекаКартинок.Информация32
			);
		
		Иначе
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Строки отменены'"),
				,
				СтрЗаменить(НСтр("ru='Все строки отменены по причине ""%ПричинаОтмены%"".'"), "%ПричинаОтмены%", ПричинаОтмены),
				БиблиотекаКартинок.Информация32
			);
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РМКЗакрытиеСмены

// Функция проверяет необходимость проверки непробитых чеков при закрытии смены.
// В случае необходимости проверки управление передается форме "ПроверкаНепробитыхЧеков" обработки
// "ЗакрытиеКассовойСмены".
//
Функция ПройденаПроверкаНепробитыхЧеков(КассаККМ, ОбработчикОповещения) Экспорт
	
	Если УправлениеПользователямиВызовСервера.ПолучитьБулевоЗначениеПраваПользователя(ПредопределенноеЗначение("ПланВидовХарактеристик.ПраваПользователей.ПроверятьНепробитыеЧекиПриЗакрытииСмены"), Ложь) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КассаККМ", КассаККМ);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.ЗакрытиеКассовойСмены.Форма.ПроверкаНепробитыхЧеков", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ПройденаПроверка()

// Функция находит возможную максимальную сумму выемки и при положительном остатке в кассе ККМ запрашивает сумму выемки.
//
// Возвращаемое значение:
//  Булево
//
Функция ЗапроситьСуммуФактическойВыемки(КассаККМ, ОбработчикОповещения, УникальныйИдентификатор) Экспорт
	
	ДанныеДляЗапросаСуммыФактическойВыемки = РозничныеПродажиВызовСервера.ДанныеДляЗапросаСуммыФактическойВыемки(КассаККМ);
	МаксимальнаяСуммаВыемки = ДанныеДляЗапросаСуммыФактическойВыемки.МаксимальнаяСуммаВыемки;
	Если МаксимальнаяСуммаВыемки > 0 Тогда 
		ЗначениеВыбораСумма = 0;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок"           , НСтр("ru = 'Ввод суммы выемки.'"));
		ПараметрыФормы.Вставить("МаксимальноеЗначение", МаксимальнаяСуммаВыемки);
		ПараметрыФормы.Вставить("ЧислоВвода"          , ЗначениеВыбораСумма);
		ПараметрыФормы.Вставить("Отрицательное"       , Ложь);
		
		ПроверяемаяМинимальнаяСуммаВыручки = МаксимальнаяСуммаВыемки - ДанныеДляЗапросаСуммыФактическойВыемки.МаксимальнаяСуммаРазмена;
		Если ПроверяемаяМинимальнаяСуммаВыручки > 0 Тогда
			ПараметрыФормы.Вставить("ПроверяемоеМинимальноеЗначение", ПроверяемаяМинимальнаяСуммаВыручки);
			ТекстВопроса = НСтр("ru = 'Сумма остатка ДС в кассе ККМ будет превышать максимальную сумму размена. Продолжить закрытие кассы?'"); 
			ПараметрыФормы.Вставить("ПроверочныйВопрос", ТекстВопроса);
		КонецЕсли;
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВводаЧисла", ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим); 
		Возврат Истина
	Иначе
		// Если в магазине не используется прямая инкассация или максимальная сумма выемки равна 0.00.
		Возврат Ложь
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьКоличествоКодовМаркировки(РеквизитОбъектаТовары, ТаблицаКодыМаркировки) Экспорт
	
	Для Каждого СтрокаТаблицы Из РеквизитОбъектаТовары Цикл
		ЗаполнитьКоличествоКодовМаркировкиВСтроке(СтрокаТаблицы, ТаблицаКодыМаркировки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКоличествоКодовМаркировкиВСтроке(СтрокаТаблицыТовары, ТаблицаКодыМаркировки) Экспорт
	
	Если СтрокаТаблицыТовары = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("КлючСвязи");
	СтруктураПоиска.КлючСвязи = СтрокаТаблицыТовары.КлючСвязи;
	СтрокиМарок = ТаблицаКодыМаркировки.НайтиСтроки(СтруктураПоиска);
	СтрокаТаблицыТовары.КоличествоКодовМаркировки = СтрокиМарок.Количество();
	
КонецПроцедуры

Процедура УстановитьЗначениеСтатусаКодаМаркировки(ТаблицаТовары) Экспорт
	
	Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
		УстановитьЗначениеСтатусаКодаМаркировкиВСтроке(СтрокаТаблицы)
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗначениеСтатусаКодаМаркировкиВСтроке(СтрокаТаблицыТовары) Экспорт
	
	Если СтрокаТаблицыТовары <> Неопределено Тогда
		Если НЕ СтрокаТаблицыТовары.НеобходимостьВводаАкцизнойМарки Тогда
			Если СтрокаТаблицыТовары.НеобходимостьВводаКодаМаркировки Тогда
				
				Если СтрокаТаблицыТовары.КоличествоУпаковок = СтрокаТаблицыТовары.КоличествоКодовМаркировки
					И СтрокаТаблицыТовары.КоличествоУпаковок <> 0 Тогда
					// А статус ставится для акцизных марок, т.к. используется одна колонка.
					СтрокаТаблицыТовары.СтатусУказанияАкцизныхМарок = 1;
				Иначе
					СтрокаТаблицыТовары.СтатусУказанияАкцизныхМарок = 2;
				КонецЕсли;
			Иначе
				СтрокаТаблицыТовары.СтатусУказанияАкцизныхМарок = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти