////////////////////////////////////////////////////////////////////////////////
// Модуль "Ценообразование", содержит процедуры и функции для  проверки 
// корректности документов установки цен и для обработки 
// пользователем введенных данных.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ КОРРЕКТНОСТИ ЗАПОЛНЕНИЯ ДОКУМЕНТОВ

// Проверяет корректность заполнения документа установки цен номенклатуры.
// Вызывается из процедуры документа "ОбработкаПроведения".
//
// Параметры:
// 		ДокументУстановкиЦен - ДокументОбъект, для которого необходимо осуществить проверку.
// 		Отказ - Флаг отказа от проведения документа.
//
Процедура ПроверитьКорректностьЗаполненияДокументаУстановкиЦенНоменклатуры(ДокументУстановкиЦен,
	                                                                       ТаблицаЦен,
	                                                                       ВидыЦен,
	                                                                       Отказ) Экспорт
	
	// Сформируем текст запроса необходимых проверок в соответствие с массивом проверок.
	
	ТекстЗапроса     = "";
	ПараметрыЗапроса = Новый Структура();
	
	ТаблицаПроверок = Новый ТаблицаЗначений;
	ТаблицаПроверок.Колонки.Добавить("Проверка");
	ТаблицаПроверок.Колонки.Добавить("НомерЗапроса");
	
	СтрокаТаблицы = ТаблицаПроверок.Добавить();
	СтрокаТаблицы.Проверка     = "ВременнаяТаблицаЦен";
	СтрокаТаблицы.НомерЗапроса = СформироватьЗапросВременнаяТаблицаЦенДляРегистрацииЦен(ТекстЗапроса, ПараметрыЗапроса, ТаблицаЦен);
	
	СтрокаТаблицы = ТаблицаПроверок.Добавить();
	СтрокаТаблицы.Проверка     = "ВременнаяТаблицаЦенБезДублей";
	СтрокаТаблицы.НомерЗапроса = СформироватьЗапросВременнаяТаблицаЦенБезДублейДляРегистрацииЦен(ТекстЗапроса);
	
	СтрокаТаблицы = ТаблицаПроверок.Добавить();
	СтрокаТаблицы.Проверка     = "КорректностьТоваров";
	СтрокаТаблицы.НомерЗапроса = СформироватьЗапросКорректностьТоваровДляРегистрацииЦен(ТекстЗапроса);
	
	СтрокаТаблицы = ТаблицаПроверок.Добавить();
	СтрокаТаблицы.Проверка     = "НаличиеДублейТоваров";
	СтрокаТаблицы.НомерЗапроса = СформироватьЗапросНаличиеДублейДляРегистрацииЦен(ТекстЗапроса);
	
	СтрокаТаблицы = ТаблицаПроверок.Добавить();
	СтрокаТаблицы.Проверка     = "НаличиеУстановленныхЦен";
	СтрокаТаблицы.НомерЗапроса = СформироватьЗапросНаличиеУстановленныхЦенДляРегистрацииЦен(ТекстЗапроса, ПараметрыЗапроса, ДокументУстановкиЦен, ВидыЦен);
	
	ИспользуетсяОбменСУправлениемТорговлей = Константы.ИспользуетсяОбменСУправлениемТорговлей.Получить();
	Если ИспользуетсяОбменСУправлениемТорговлей Тогда
		СтрокаТаблицы = ТаблицаПроверок.Добавить();
		СтрокаТаблицы.Проверка     = "ПроверитьЗаполнениеТЧПриНаличииОбменаСУправлениемТорговлей";
		СтрокаТаблицы.НомерЗапроса = СформироватьЗапросПроверитьЗаполнениеТЧПриНаличииОбменаСУправлениемТорговлей(ТекстЗапроса);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Сообщим пользователю о результатах проверки для каждого результата запроса.
	
	ТекущийНомерПакета = -1;
	Для каждого СтрокаТаблицы Из ТаблицаПроверок Цикл
		
		ТекущийНомерПакета = ТекущийНомерПакета + СтрокаТаблицы.НомерЗапроса;
		Проверка = СтрокаТаблицы.Проверка;
		
		Если Проверка = "КорректностьТоваров" Тогда
			
			СообщитьОбОшибкахКорректностьТоваровДляРегистрацииЦен(МассивРезультатов[ТекущийНомерПакета].Выбрать(), ДокументУстановкиЦен, Отказ);
			
		ИначеЕсли Проверка = "НаличиеДублейТоваров" Тогда
			
			СообщитьОбОшибкахНаличиеДублейТоваровДляРегистрацииЦен(МассивРезультатов[ТекущийНомерПакета].Выбрать(), ДокументУстановкиЦен, Отказ);
			
		ИначеЕсли Проверка = "НаличиеУстановленныхЦен" Тогда
			
			СообщитьОбОшибкахНаличиеУстановленныхЦенДляРегистрацииЦен(МассивРезультатов[ТекущийНомерПакета].Выбрать(), ДокументУстановкиЦен, Отказ);
		
		ИначеЕсли Проверка = "ПроверитьЗаполнениеТЧПриНаличииОбменаСУправлениемТорговлей" Тогда
			
			СообщитьОбОшибкахЗаполненияТЧПриНаличииОбменаСУправлениемТорговлей(МассивРезультатов[ТекущийНомерПакета].Выбрать(), ДокументУстановкиЦен, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ЦЕН НОМЕНКЛАТУРЫ В РЕГИСТРАХ

// Процедура формирует движения по РС "Цены номенклатуры".
// Параметры: 
//	ДополнительныеСвойства - Структура
//	Движения - Коллекция движений.
//	Отказ  - Булево
Процедура ОтразитьЦеныНоменклатуры(ДополнительныеСвойства,
	                               Движения,
	                               Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЦеныНоменклатуры;
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДвиженияЦеныНоменклатуры            = Движения.ЦеныНоменклатуры;
	ДвиженияЦеныНоменклатуры.Записывать = Истина;
	
	ДвиженияЦеныНоменклатуры.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура формирует движения по РС "Действующие цены номенклатуры".
// Параметры: 
//	ДополнительныеСвойства - Структура
//	Движения - Коллекция движений.
//	Отказ  - Булево
Процедура ОтразитьПрименениеЦенНоменклатуры(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДействующиеЦеныНоменклатуры;
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДвиженияЦеныНоменклатуры            = Движения.ДействующиеЦеныНоменклатуры;
	ДвиженияЦеныНоменклатуры.Записывать = Истина;
	
	ДвиженияЦеныНоменклатуры.Загрузить(Таблица);
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБСЛУЖИВАНИЯ ВИДОВ ЦЕН, ЗАПОЛНЯЕМЫХ ПО ДАННЫМ ИБ

// Возвращает имена и типы полей, которые должны обязательно присутствовать
// в СКД, используемой для заполнения цен по данным ИБ.
//
// Возвращаемое значение:
// Соответствие
// В ключах содержатся имена полей, в значениях - типы полей.
//
Функция ПолучитьОбязательныеПоляСхемыКомпоновкиДанных() Экспорт
	
	Поля = Новый Соответствие();
	
	Поля.Вставить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Поля.Вставить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		Поля.Вставить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
		Поля.Вставить("Коэффициент", Новый ОписаниеТипов("Число"));
	КонецЕсли;
		
	Если ЦенообразованиеПереопределяемый.ИспользуютсяВалюты() Тогда
		
		Поля.Вставить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		
	КонецЕсли;
	
	Поля.Вставить("Цена",   Новый ОписаниеТипов("Число"));
    	
	Возврат Поля;
	
КонецФункции

// Проверяет набор данных СКД, что он содержит заданное поле соответствующего типа.
//
// Параметры:
// НаборДанных 			- набор данных, который необходимо проверить.
// ИмяПоля				- Строка, содержащее имя поля.
// ТипЗначения			- ОписаниеТипов, тип который должно иметь поле СКД.
// СообщениеОбОшибке	- Строка, содержит вводную часть сообщения об ошибке.
//
// Возвращаемое значение:
// Булево
// Истина, если набор данных содержит требуемое поле, в противном случае Ложь.
//
Функция ПроверитьПолеНабораДанныхСКД(НаборДанных, ИмяПоля, ТипЗначения, СообщениеОбОшибке = Неопределено)
	
	Поле = НаборДанных.Поля.Найти(ИмяПоля);
	
	Если Поле = Неопределено Тогда
		Результат = Ложь;
	Иначе
		ТипыПоля       = Поле.ТипЗначения.Типы();
		ДопустимыеТипы = ТипЗначения.Типы();
		
		Результат = Истина;
		Если ТипыПоля.Количество() = ДопустимыеТипы.Количество() Тогда
			
			Для Каждого Тип Из ДопустимыеТипы Цикл
				Если ТипыПоля.Найти(Тип) = Неопределено Тогда
					Результат = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(?(ЗначениеЗаполнено(СообщениеОбОшибке), СообщениеОбОшибке + ": ", "") 
			+ СтрЗаменить(СтрЗаменить(НСтр("ru='Схема компоновки данных для заполнения цен должна содержать поле ""%ИмяПоля%"" с типом значения ""%ТипЗначения%"".'"), "%ИмяПоля%", ИмяПоля), "%ТипЗначения%", ТипЗначения));
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Проверяет схему компоновки данных на соответствие ограничениям, необходимым
// для ее использования при расчете цен.
//
// Параметры:
// СхемаКомпоновкиДанных - СхемаКомпоновкиДанных, которую необходимо проверить.
// СообщениеОбОшибке     - Строка, содержит вводную часть сообщения об ошибке.
//
// Возвращаемое значение:
// Булево
// Истина, если проверка пройдена успешно, в противном случае Ложь.
//
Функция ПроверитьСхемуКомпоновкиДанных(СхемаКомпоновкиДанных, СообщениеОбОшибке = Неопределено) Экспорт
	
	Результат = Истина;
	
	Если СхемаКомпоновкиДанных <> Неопределено И СхемаКомпоновкиДанных.НаборыДанных.Количество() = 1 Тогда
		
		РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
		Поля = ПолучитьОбязательныеПоляСхемыКомпоновкиДанных();
		
		Для Каждого Поле Из Поля Цикл
			Если Не ПроверитьПолеНабораДанныхСКД(РабочийНаборДанных, Поле.Ключ, Поле.Значение, СообщениеОбОшибке) Тогда
				Результат = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(?(ЗначениеЗаполнено(СообщениеОбОшибке), СообщениеОбОшибке + ": ", "") 
			+ НСтр("ru='Схема компоновки данных для заполнения цен должна содержать один набор данных.'"));
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ВЫПОЛНЕНИЯ ОКРУГЛЕНИЯ

// Округляет число по заданному порядку.
//
// Параметры:
// Число                    - исходное число.
// ТочностьОкругления       - Число, определяет точность округления.
// ОкруглятьВБольшуюСторону - булево, определяет способ округления: если Истина, 
//                            то при округлении с точностью до 1, 0.01 будет округлено до 1, 
//                            Ложь - округление по арифметическим правилам.
//
// Возвращаемое значение:
// Число
// Исходное число, округленное с заданной точностью.
//
Функция ОкруглитьЦену(Число, ТочностьОкругления, ОкруглятьВБольшуюСторону) Экспорт

	Перем Результат;
		
	// Вычислим количество интервалов, входящих в число.
	КоличествоИнтервалов = Число / ТочностьОкругления;
		
	// Вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервалов);
		
	Если КоличествоИнтервалов = КоличествоЦелыхИнтервалов Тогда
		// Числа поделились нацело. Округлять не нужно.
		Результат = Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда
			// При порядке округления "0.05" 0.371 должно округлиться до 0.4.
			Результат = ТочностьОкругления * (КоличествоЦелыхИнтервалов + 1);
		Иначе
			// При порядке округления "0.05" 0.371 должно округлиться до 0.35,
			// а 0.376 до 0.4
			Результат = ТочностьОкругления * Окр(КоличествоИнтервалов, 0, РежимОкругления.Окр15как20);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕДЕНИЯ ДОКУМЕНТОВ

// Процедура инициализирует общие структуры, используемые при проведении документов.
// Вызывается из модуля документов при проведении.
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойства, РежимПроведения = Неопределено) Экспорт

	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения".

	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);

	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных
	// таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение (признак наличия записей во временной
	// таблице).
	ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	ДополнительныеСвойства.ДляПроведения.Вставить("РежимПроведения",           РежимПроведения);
	ДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента",       ДокументСсылка.Метаданные());
	ДополнительныеСвойства.ДляПроведения.Вставить("Ссылка",                    ДокументСсылка);
	
КонецПроцедуры

// Процедура выполняет подготовку наборов записей документа к записи движений.
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте).
// 2. Взводит флаг записи у наборов, по которым документ имеет движения.
// Вызывается из модуля документов при проведении.
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект) Экспорт

	Для Каждого НаборЗаписей Из Объект.Движения Цикл

		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;

	КонецЦикла;

	Если НЕ Объект.ДополнительныеСвойства.ЭтоНовый Тогда

		МассивИменРегистров = МассивИспользуемыхРегистров(
			Объект.Ссылка,
			Объект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Движения);
			
		Для Каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Записывать = Истина;
		КонецЦикла;

	КонецЕсли;
    
КонецПроцедуры

 // Процедура записывает движения документа. Дополнительно происходит копирование параметров
// в модули наборов записей для выполнения регистрации изменений в движениях.
// Процедура вызывается из модуля документов при проведении.
//
Процедура ЗаписатьНаборыЗаписей(Объект) Экспорт
	Перем РегистрыДляКонтроля;

	// Регистры, для которых будут рассчитаны таблицы изменений движений.
	Если Объект.ДополнительныеСвойства.ДляПроведения.Свойство("РегистрыДляКонтроля", РегистрыДляКонтроля) Тогда
		Для Каждого НаборЗаписей Из РегистрыДляКонтроля Цикл
			Если НаборЗаписей.Записывать Тогда

				// Установка флага регистрации изменений в наборе записей.
				НаборЗаписей.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", Истина);
				НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоНовый", Объект.ДополнительныеСвойства.ЭтоНовый);

				// Структура для передачи данных в модули наборов записей.
				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", 
						Новый Структура("СтруктураВременныеТаблицы", Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы));

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Объект.Движения.Записать();
    // ПроведениеСервер
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ВАЛЮТАМИ

// Функция пересчитывает сумму из валюты ВалютаНач по курсу ПоКурсуНач 
// в валюту ВалютаКон по курсу ПоКурсуКон.
//
// Параметры:      
//  Сумма          - сумма, которую следует пересчитать;
//  ВалютаНач      - ссылка на элемент справочника Валют;
//                   определяет валюты из которой надо пересчитать;
//  ВалютаКон      - ссылка на элемент справочника Валют;
//                   определяет валюты в которую надо пересчитать;
//  ПоКурсуНач     - курс из которого надо пересчитать;
//  ПоКурсуКон     - курс в который надо пересчитать;
//  ПоКратностьНач - кратность из которого надо пересчитать (по умолчанию = 1);
//  ПоКратностьКон - кратность в который надо пересчитать  (по умолчанию = 1);
//
// Возвращаемое значение: 
//  Сумма, пересчитанная в другую валюту.
//
Функция ПересчитатьИзВалютыВВалюту(Сумма, ВалютаНач, ВалютаКон, ПоКурсуНач, ПоКурсуКон, 
	               ПоКратностьНач =1, ПоКратностьКон = 1 ) Экспорт

	Если (ВалютаНач = ВалютаКон) Тогда
		Возврат Сумма;
	КонецЕсли;

	Если (ПоКурсуНач = ПоКурсуКон) 
	   И (ПоКратностьНач = ПоКратностьКон) Тогда
		Возврат Сумма;
	КонецЕсли;

	Если ПоКурсуНач     = 0 
	 Или ПоКурсуКон     = 0 
	 Или ПоКратностьНач = 0 
	 Или ПоКратностьКон = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'ПересчитатьИзВалютыВВалюту(): при пересчете обнаружен нулевой курс.'"));
		Возврат 0;
	КонецЕсли;

	Возврат Окр((Сумма * ПоКурсуНач * ПоКратностьКон) / (ПоКурсуКон * ПоКратностьНач), 2);
	
КонецФункции

// Возвращает курс валюты на дату.
//
// Параметры:
//  Валюта     - Валюта (элемент справочника "Валюты").
//  ДатаКурса  - Дата, на которую следует получить курс.
//
// Возвращаемое значение: 
//  Структура, содержащая:
//   Курс      - курс валюты
//   Кратность - кратность валюты.
//
Функция ПолучитьКурсВалюты(Валюта, ДатаКурса) Экспорт

	Если ЦенообразованиеПереопределяемый.ИспользуютсяВалюты() Тогда
		
		Возврат РегистрыСведений["КурсыВалют"].ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Валюта));
		
	Иначе
		
		СтруктураКурса = Новый Структура;
		СтруктураКурса.Вставить("Курс",1);
		СтруктураКурса.Вставить("Кратность",1);
		
		Возврат СтруктураКурса;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОГЛАСОВАНИЯ УСТАНОВКИ ЦЕН НОМЕНКЛАТУРЫ

// Устанавливает или сбрасывает флаг Согласован у документа.
// Вызывается из процедуры ПередЗаписью документа.
//
// Параметры:
// 		ДокументОбъект     - ДокументОбъект - Документ, в котором необходимо изменить флаг Согласован.
//		РежимЗаписи        - Режим записи документа.
//
Процедура ИзменитьПризнакСогласованностиДокумента(ДокументОбъект, Знач РежимЗаписи) Экспорт
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись
		ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Если ДокументОбъект.Согласован Тогда
			
			ДокументОбъект.Согласован = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если Не ДокументОбъект.Согласован Тогда
			
			ДокументОбъект.Согласован = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИзменитьПризнакСогласованностиДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция формирует текст в формате, необходимом для выдачи сообщений по табличной части.
//
// Параметры:
//  ИмяТЧ - Строка. Имя табличной части.
//  НомерСтроки - Число. Номер строки табличной части.
//  ИмяРеквизита - Строка. Имя реквизита.
//
// Возвращаемое значение:
//  Строка.
//
Функция ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ(ИмяТЧ, НомерСтроки, ИмяРеквизита) Экспорт

	Возврат ИмяТЧ + "[" + Формат(НомерСтроки - 1, "ЧН=0; ЧГ=0") + "]." + ИмяРеквизита;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует запрос для формирования временной таблицы цен.
//
// Параметры:
// ТекстЗапроса - текстовая строка, к которой необходимо добавить текст запроса.
// ПараметрыЗапроса - структура, содержащая параметры запроса.
// ДокументУстановкиЦен - ДокументОбъект, который необходимо проверить.
// 
// Возвращаемое значение:
//  Число
//
Функция СформироватьЗапросВременнаяТаблицаЦенДляРегистрацииЦен(ТекстЗапроса,
	                                                             ПараметрыЗапроса,
	                                                             ТаблицаЦен)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки      КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура     КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика   КАК Характеристика,
		|	ВременнаяТаблицаТовары.ЭтоГруппа        КАК ЭтоГруппа
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаТовары
		|ИЗ
		|	&ТаблицаЦен КАК ВременнаяТаблицаТовары
		|;
		|";
		
	ПараметрыЗапроса.Вставить("ТаблицаЦен", ТаблицаЦен);
	
	Возврат 1;
	
КонецФункции // СформироватьЗапросВременнаяТаблицаЦенДляРегистрацииЦен()

// Формирует запрос для формирования временной таблицы цен без дублей строк.
//
// Параметры:
// ТекстЗапроса - текстовая строка, к которой необходимо добавить текст запроса.
// ПараметрыЗапроса - структура, содержащая параметры запроса.
// ТаблицаЦен - ТаблицаЗначений
//
// 
// Возвращаемое значение:
//  Число
//
Функция СформироватьЗапросВременнаяТаблицаЦенБезДублейДляРегистрацииЦен(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВременнаяТаблицаТовары.НомерСтроки) КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура          КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика        КАК Характеристика
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаТоварыБезДублей
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|";
	
	Возврат 1;
	
КонецФункции // СформироватьЗапросВременнаяТаблицаЦенДляРегистрацииЦен()

// Формирует запрос для проверки наличия зарегистрированных ранее цен.
//
// Параметры:
// ТекстЗапроса - текстовая строка, к которой необходимо добавить текст запроса.
//
// 
// Возвращаемое значение:
//  Число
//
Функция СформироватьЗапросНаличиеУстановленныхЦенДляРегистрацииЦен(ТекстЗапроса,
	                                                                 ПараметрыЗапроса,
	                                                                 ДокументУстановкиЦен,
	                                                                 ВидыЦен)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки  КАК НомерСтроки,
		|	ЦеныНоменклатуры.Номенклатура       КАК Номенклатура,
		|	ЦеныНоменклатуры.Характеристика     КАК Характеристика,
		|	ЦеныНоменклатуры.ВидЦены            КАК ВидЦены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаТоварыБезДублей КАК ВременнаяТаблицаТовары
		|ПО
		|	ЦеныНоменклатуры.Номенклатура = ВременнаяТаблицаТовары.Номенклатура
		|	И ЦеныНоменклатуры.Характеристика = ВременнаяТаблицаТовары.Характеристика
		|
		|ГДЕ
		|	ЦеныНоменклатуры.Период = &ДатаДокумента
		|	И ЦеныНоменклатуры.Регистратор <> &УстановкаЦен
		|	И (ЦеныНоменклатуры.Номенклатура, ЦеныНоменклатуры.Характеристика) В
		|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ДокументТовары.Номенклатура   КАК Номенклатура,
		|			ДокументТовары.Характеристика КАК Характеристика
		|		ИЗ
		|			ВременнаяТаблицаТовары КАК ДокументТовары)
		|	И ЦеныНоменклатуры.ВидЦены В (&ВидыЦен)
		|;
		|";
		
	ПараметрыЗапроса.Вставить("УстановкаЦен",  ДокументУстановкиЦен.Ссылка);
	ПараметрыЗапроса.Вставить("ДатаДокумента", ДокументУстановкиЦен.Дата);
	ПараметрыЗапроса.Вставить("ВидыЦен",       ВидыЦен);
		
	Возврат 1;
	
КонецФункции // СформироватьЗапросНаличиеУстановленныхЦенДляРегистрацииЦен()

// Формирует запрос для проверки наличия незаполненной номенклатуры в таблице цен.
//
// Параметры:
// ТекстЗапроса - текстовая строка, к которой необходимо добавить текст запроса.
//
// 
// Возвращаемое значение:
//  Число
//
Функция СформироватьЗапросКорректностьТоваровДляРегистрацииЦен(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки    КАК НомерСтроки,
		|	ДокументТовары.Номенклатура   КАК Номенклатура,
		|	ДокументТовары.Характеристика КАК Характеристика,
		|	ДокументТовары.ЭтоГруппа      КАК ЭтоГруппа,
		|	ВЫБОР
		|		КОГДА
		|			ДокументТовары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияНоменклатуры,
		|	ВЫБОР
		|		КОГДА
		|			ДокументТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			И НЕ ДокументТовары.ЭтоГруппа
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияХарактеристики
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	ИЛИ (ДокументТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	И НЕ ДокументТовары.ЭтоГруппа)
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
	Возврат 1;
	
КонецФункции

// Формирует запрос для проверки наличия дублей заполнения таблицы цен.
//
// Параметры:
// ТекстЗапроса - текстовая строка, к которой необходимо добавить текст запроса.
//
// 
// Возвращаемое значение:
//  Число
//
Функция СформироватьЗапросНаличиеДублейДляРегистрацииЦен(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	МАКСИМУМ(ДокументТовары.НомерСтроки)    КАК НомерСтроки,
		|	ДокументТовары.Номенклатура             КАК Номенклатура,
		|	ДокументТовары.Характеристика           КАК Характеристика
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО (*) > 1
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
	Возврат 1;
	
КонецФункции

// Формирует запрос для проверки наличия незаполненной номенклатуры в таблице цен.
//
// Параметры:
// ТекстЗапроса - текстовая строка, к которой необходимо добавить текст запроса.
//
// 
// Возвращаемое значение:
//  Число
//
Функция СформироватьЗапросПроверитьЗаполнениеТЧПриНаличииОбменаСУправлениемТорговлей(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
	|	УстановкаЦенНоменклатурыТовары.НомерСтроки,
	|	УстановкаЦенНоменклатурыТовары.Номенклатура
	|ПОМЕСТИТЬ ТаблицаВЗапрос
	|ИЗ
	|	ВременнаяТаблицаТовары КАК УстановкаЦенНоменклатурыТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапрос.НомерСтроки,
	|	ТаблицаВЗапрос.Номенклатура,
	|	ТаблицаВЗапрос.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ТаблицаВЗапрос КАК ТаблицаВЗапрос
	|ГДЕ
	|	ТаблицаВЗапрос.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.ТипНоменклатуры
	|ПОМЕСТИТЬ ТаблицаПодарочныхСертификатов
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.ТипНоменклатуры
	|ПОМЕСТИТЬ ТаблицаПрочихТоваров
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	(НЕ ТаблицаТоваров.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПодарочныхСертификатов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПодарочныхСертификатов.Номенклатура
	|ИЗ
	|	ТаблицаПодарочныхСертификатов КАК ТаблицаПодарочныхСертификатов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПрочихТоваров КАК ТаблицаПрочихТоваров
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки ВОЗР
	|;
	|";
	
	Возврат 5;
	
КонецФункции

// Выводит сообщения об ошибках в тч Товары документа УстановкаЦенНоменклатуры.
//
// Параметры:
// Выборка         - Выборка из результата запроса.
// ДокументПродажи - ДокументОбъект, для которого необходимо вывести сообщения об ошибках.
// Отказ           - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахКорректностьТоваровДляРегистрацииЦен(Выборка,
	                                                            ДокументУстановкиЦен,
	                                                            Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЕстьОшибкиЗаполненияНоменклатуры Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Номенклатура"" в строке ""%НомерСтроки%"" списка ""Таблица цен""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументУстановкиЦен,
				Ценообразование.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ("ТаблицаЦен", Выборка.НомерСтроки, "Номенклатура"),
				,
				Отказ);
				
			КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияХарактеристики Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Характеристика"" в строке ""%НомерСтроки%"" списка ""Таблица цен""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументУстановкиЦен,
				Ценообразование.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ("ТаблицаЦен", Выборка.НомерСтроки, "Характеристика"),
				,
				Отказ);
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках в тч Товары документа УстановкаЦенНоменклатуры.
//
// Параметры:
// Выборка         - Выборка из результата запроса.
// ДокументПродажи - ДокументОбъект, для которого необходимо вывести сообщения об ошибках.
// Отказ           - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахНаличиеДублейТоваровДляРегистрацииЦен(Выборка,
	                                                             ДокументУстановкиЦен,
	                                                             Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
			
			ТекстОшибки = НСтр("ru='Номенклатура ""%Номенклатура%"" с характеристикой ""%Характеристика%"" повторяется'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",   Выборка.Номенклатура);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%", Выборка.Характеристика);
			
		Иначе
			
			ТекстОшибки = НСтр("ru='Номенклатура ""%Номенклатура%"" повторяется'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Выборка.Номенклатура);
			
		КонецЕсли;
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументУстановкиЦен,
			Ценообразование.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ("ТаблицаЦен", Выборка.НомерСтроки, "Номенклатура"),
			,
			Отказ);
			
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках в тч Товары документа УстановкаЦенНоменклатуры.
//
// Параметры:
// Выборка               - Выборка из результата запроса.
// ДокументаУстановкиЦен - ДокументОбъект, для которого необходимо вывести сообщения об ошибках.
// Отказ                 - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахНаличиеУстановленныхЦенДляРегистрацииЦен(Выборка,
	                                                                ДокументаУстановкиЦен,
	                                                                Отказ)

	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
			
			ТекстОшибки = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" по виду цен ""%ВидЦен%"" на дату %ДатаДокумента% уже установлена'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",   Выборка.Номенклатура);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%", Выборка.Характеристика);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦен%",         Выборка.ВидЦены);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаДокумента%",  ДокументаУстановкиЦен.Дата);
			
		Иначе
			
			ТекстОшибки = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" по виду цен ""%ВидЦен%"" на дату %ДатаДокумента% уже установлена'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",   Выборка.Номенклатура);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦен%",         Выборка.ВидЦены);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаДокумента%",  ДокументаУстановкиЦен.Дата);
			
		КонецЕсли;
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументаУстановкиЦен,
			Ценообразование.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ("ТаблицаЦен", Выборка.НомерСтроки, "Номенклатура"),
			,
			Отказ);
			
	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках в тч Товары документа УстановкаЦенНоменклатуры.
//
// Параметры:
// Выборка         - Выборка из результата запроса.
// ДокументПродажи - ДокументОбъект, для которого необходимо вывести сообщения об ошибках.
// Отказ           - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахЗаполненияТЧПриНаличииОбменаСУправлениемТорговлей(Выборка,
	                                                             ДокументУстановкиЦен,
	                                                             Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='В строке %1 в колонке ""Номенклатура"" указан подарочный сертификат.
						|При совместном использовании с конфигурацией ""Управление торговлей 11"" 
						|операции с подарочными сертификатами оформляются отдельным документом'"),
						Выборка.НомерСтроки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументУстановкиЦен,
			Ценообразование.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ("ТаблицаЦен", Выборка.НомерСтроки, "Номенклатура"),
			,
			Отказ);
			
	КонецЦикла;
	
КонецПроцедуры

Функция МассивИспользуемыхРегистров(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);

	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;

	СчетчикТаблиц   = 0;
	СчетчикДвижений = 0;

	ВсегоДвижений = Движения.Количество();
	ТекстЗапроса  = "";
	Для Каждого Движение Из Движения Цикл

		СчетчикДвижений = СчетчикДвижений + 1;

		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
							И МассивИсключаемыхРегистров.Найти(Движение.Имя) <> Неопределено;

		Если Не ПропуститьРегистр Тогда

			Если СчетчикТаблиц > 0 Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";

			КонецЕсли;

			СчетчикТаблиц = СчетчикТаблиц + 1;

			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|""" + Движение.Имя + """ КАК ИмяРегистра
			|
			|ИЗ " + Движение.ПолноеИмя() + "
			|
			|ГДЕ Регистратор = &Регистратор
			|";

		КонецЕсли;

		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или СчетчикДвижений = ВсегоДвижений Тогда

			Запрос.Текст  = ТекстЗапроса;
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;

			Если Результат.Количество() = 0 Тогда

				Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");

			Иначе

				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат.Добавить(Выборка.ИмяРегистра);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
   
КонецФункции

#КонецОбласти
