
#Область ЗначенияПоУмолчанию
Функция ПолучитьГруппуУчастниковПрограммыДружба() Экспорт
	
	ГруппаССылка = Справочники.ФизическиеЛица.НайтиПоНаименованию("Участники программы Дружба");
	Если ГруппаССылка.Пустая() Тогда
		НовыйГруппаДружба = Справочники.ФизическиеЛица.СоздатьГруппу();
		НовыйГруппаДружба.Наименование = "Участники программы Дружба";
		НовыйГруппаДружба.Записать();
		ГруппаССылка = НовыйГруппаДружба.Ссылка;
	КонецЕсли;	
	Возврат ГруппаССылка
КонецФункции // ПолучитьГруппуУчастниковПрограммыДружба()

Функция ПолучитьГруппуДисконтнойКартыПрограммыДружба() Экспорт

	ГруппаССылка = Справочники.ИнформационныеКарты.НайтиПоНаименованию("Участники программы Дружба");
	Если ГруппаССылка.Пустая() Тогда
		НовыйГруппаДисконтнойКартыПрограммыДружба = Справочники.ИнформационныеКарты.СоздатьГруппу();
		НовыйГруппаДисконтнойКартыПрограммыДружба.Наименование = "Участники программы Дружба";
		НовыйГруппаДисконтнойКартыПрограммыДружба.Записать();
		ГруппаССылка = НовыйГруппаДисконтнойКартыПрограммыДружба.Ссылка;
	КонецЕсли;	
	Возврат ГруппаССылка

КонецФункции // ()

Функция ПолучитьВидДисконтнойКартыПрограммыДружба() Экспорт

	ГруппаССылка = Справочники.ВидыДисконтныхКарт.НайтиПоНаименованию("Участники программы Дружба");
	Если ГруппаССылка.Пустая() Тогда
		НовыйВидыДисконтныхКарт = Справочники.ИнформационныеКарты.СоздатьЭлемент();
		НовыйВидыДисконтныхКарт.Наименование = "Участники программы Дружба";
		НовыйВидыДисконтныхКарт.Записать();
		ГруппаССылка = НовыйВидыДисконтныхКарт.Ссылка;
	КонецЕсли;	
	Возврат ГруппаССылка

КонецФункции // ()

Функция ПолучитьБонуснуюПрограммуДружба() Экспорт

	ГруппаССылка = Справочники.БонусныеПрограммыЛояльности.НайтиПоНаименованию("Дружба");
	Если ГруппаССылка.Пустая() Тогда
		НовыйБонусныеПрограммыЛояльности = Справочники.БонусныеПрограммыЛояльности.СоздатьЭлемент();
		НовыйБонусныеПрограммыЛояльности.Наименование = "Дружба";
		НовыйБонусныеПрограммыЛояльности.УменьшатьСуммуЧекаДляСкидок = Истина;
		НовыйБонусныеПрограммыЛояльности.МаксимальныйПроцентОплатыБонусами = 50;
		НовыйБонусныеПрограммыЛояльности.Записать();
		ГруппаССылка = НовыйБонусныеПрограммыЛояльности.Ссылка;
	КонецЕсли;	
	Возврат ГруппаССылка

КонецФункции // ()

Функция ПолучитьСтроковоеПредставлениеНомераБК(НомерБК) Экспорт
	
	Возврат Формат(НомерБК,"ЧГ=");

КонецФункции	

Функция ПолучитьКоличествоБонусныхБалловЗаРегистрациюПоРекомендации() Экспорт
	Возврат 300
КонецФункции 

Функция ПолучитьПроцентУровняДляНачисленияБонусныхБаллов(Уровень) Экспорт
	Процент = 0;
	Если Уровень = 1 Тогда
		Процент = 3;
	ИначеЕсли Уровень = 2 Тогда
		Процент = 3;
	ИначеЕсли Уровень = 3 Тогда
		Процент = 1;
	КонецЕсли;	
	Возврат Процент
КонецФункции

Функция ПолучитьТочностьОкругленияПриРасчетеБонусныхБаллов(Уровень)
	
	ТочностьОкругления = 2;
	
	Если Уровень = 1 Тогда
		ТочностьОкругления = 2;
	ИначеЕсли Уровень = 2 Тогда
		ТочностьОкругления = 2;
	ИначеЕсли Уровень = 3 Тогда
		ТочностьОкругления = 2;
	КонецЕсли;	
	
	Возврат ТочностьОкругления
	
КонецФункции	
#КонецОбласти	


#Область ФизЛицаДисконтныеКарты
Функция ПолучитьФизЛицоПоБК(БК) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.nb_БК = &nb_БК
		|	И НЕ ФизическиеЛица.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("nb_БК", БК);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ФизЛицоССылка = ВыборкаДетальныеЗаписи.ССылка;
	Иначе
		ФизЛицоССылка = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ФизЛицоССылка;
	
КонецФункции	

Функция ПолучитьДисконтнуюКартуПоБК(ВладелецКарты, НомерБК) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнформационныеКарты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|ГДЕ
		|	ИнформационныеКарты.ВладелецКарты = &ВладелецКарты
		|	И ИнформационныеКарты.КодКарты = &КодКарты
		|	И НЕ ИнформационныеКарты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецКарты", ВладелецКарты);
	Запрос.УстановитьПараметр("КодКарты", ПолучитьСтроковоеПредставлениеНомераБК(НомерБК));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДисконтнаяКартаПоБК = ВыборкаДетальныеЗаписи.ССылка;
	Иначе
		ДисконтнаяКартаПоБК = Справочники.ИнформационныеКарты.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ДисконтнаяКартаПоБК
КонецФункции	

Функция ПолучитьДисконтнуюКартуПоКоду(КодКарты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИнформационныеКарты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|ГДЕ
		|	ИнформационныеКарты.КодКарты = &КодКарты
		|	И НЕ ИнформационныеКарты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("КодКарты", КодКарты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДисконтнаяКартаПоКоду = ВыборкаДетальныеЗаписи.ССылка;
	Иначе
		ДисконтнаяКартаПоКоду = Справочники.ИнформационныеКарты.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ДисконтнаяКартаПоКоду
КонецФункции	

Функция ПолучитьФИОФизЛица(ФизЛицоССылка) Экспорт
	ФИО = Новый Структура("Фамилия, Имя, Отчество");
	ФизЛицоФИО = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(, Новый Структура("ФизЛицо", ФизЛицоССылка)); 
	ЗаполнитьЗначенияСвойств(ФИО, ФизЛицоФИО);
	Возврат ФИО
КонецФункции	

Функция ПолучитьФизЛицоПоФИОиДР(ФИО, ДР) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	НЕ ФизическиеЛица.ПометкаУдаления
		|	И ФизическиеЛица.ДатаРождения = &ДатаРождения
		|	И ФизическиеЛица.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("ДатаРождения", ДР);
	Запрос.УстановитьПараметр("Наименование", ФИО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ФизЛицоССылка = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ФизЛицоССылка = ВыборкаДетальныеЗаписи.ССылка;
	КонецЕсли;
	
	Возврат ФизЛицоССылка
КонецФункции	

Функция ПолучитьФизЛицоПоТелефону(НомерТелефона) Экспорт
	
	ТелефонБезРазделителей = СтрЗаменить(НомерТелефона,"+","");
	ТелефонБезРазделителей = СтрЗаменить(ТелефонБезРазделителей,"(","");
	ТелефонБезРазделителей = СтрЗаменить(ТелефонБезРазделителей,")","");
	ТелефонБезРазделителей = СтрЗаменить(ТелефонБезРазделителей," ","");
	ТелефонБезРазделителей = СтрЗаменить(ТелефонБезРазделителей,"_","");
	ТелефонБезРазделителей = СокрЛП(ТелефонБезРазделителей);
	ФизЛицоССылка = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(ТелефонБезРазделителей) Тогда
		Возврат ФизЛицоССылка
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО ФизическиеЛицаКонтактнаяИнформация.Ссылка = ФизическиеЛица.Ссылка
		|ГДЕ
		|	ФизическиеЛицаКонтактнаяИнформация.Вид = &Вид
		|	И ФизическиеЛицаКонтактнаяИнформация.НомерТелефона = &НомерТелефона";
	
	
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонФизическогоЛица);
	Запрос.УстановитьПараметр("НомерТелефона", ТелефонБезРазделителей);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ФизЛицоССылка = ВыборкаДетальныеЗаписи.ССылка;
	КонецЕсли;
	
	Возврат ФизЛицоССылка	
КонецФункции	

Функция ПолучитьНаименованиеПоФИО(Фамилия, ИМя, Отчество) Экспорт
	Наименование = СокрЛП(Фамилия + " " +Имя + " " + Отчество);
	Наименование = СтрЗаменить(Наименование,"  "," ");
	Возврат Наименование
КонецФункции
#КонецОбласти	


#Область БонусыРасчет

Функция ПолучитьКоличествоБалловПолученныхПриРегистрации(ДК) Экспорт

	КоличествоБаллов = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(БонусныеБаллы.Начислено, 0)) КАК Начислено
		|ИЗ
		|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
		|ГДЕ
		|	БонусныеБаллы.ДисконтнаяКарта = &ДисконтнаяКарта
		|	И БонусныеБаллы.Регистратор ССЫЛКА Документ.НачислениеИСписаниеБонусныхБаллов";
	
	Запрос.УстановитьПараметр("ДисконтнаяКарта", ДК);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() 
		И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Начислено) Тогда
		КоличествоБаллов = ВыборкаДетальныеЗаписи.Начислено;
	КонецЕсли;
	
	Возврат КоличествоБаллов

КонецФункции // ПолучитьКоличествоБалловПолученныхПриРегистрации()

Функция ПолучитьКоличествоБалловДисконтнойКарты(ДК) Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БонусныеБаллыОстатки.НачисленоОстаток КАК НачисленоОстаток
		|ИЗ
		|	РегистрНакопления.БонусныеБаллы.Остатки(, ДисконтнаяКарта = &ДК) КАК БонусныеБаллыОстатки";
	
	Запрос.УстановитьПараметр("ДК", ДК);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	КоличествоБалловДК = 0;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		КоличествоБалловДК = ВыборкаДетальныеЗаписи.НачисленоОстаток;
	КонецЕсли;
	
	Возврат КоличествоБалловДК
КонецФункции	

Функция ПолучитьКоличествоМесяцевПериодаИспользованияБонусныхБаллов(Клиент) Экспорт
	КоличествоМесяцев = 12 
	+?(Клиент.nb_СоглашениеНаУведомлениеEMail,2,0) 
	+ ?(Клиент.nb_СоглашениеНаУведомлениеPUSH,2,0) 
	+ ?(Клиент.nb_СоглашениеНаУведомлениеSMS,2,0)
	+ ?(Клиент.nb_ЕстьРегистрацияВГруппеВК,6,0);
	
	Возврат КоличествоМесяцев
	
КонецФункции	

Функция ПолучитьПериодИспользованияБонусныхБаллов(Дата, Клиент) Экспорт
	КоличествоМесяцев = ПолучитьКоличествоМесяцевПериодаИспользованияБонусныхБаллов(Клиент);
	ПериодИспользованияБонусныхБаллов = ДобавитьМесяц(Дата ,КоличествоМесяцев);
	Возврат ПериодИспользованияБонусныхБаллов
КонецФункции

Процедура ДобавитьВКругПриглашенныхДрузей(КомуДобавить, КогоДобавить, ДатаРегистрации) Экспорт
	
	Рекомендующий = ПолучитьРекомендующего(КогоДобавить);
	
	НеСостоитВКругу = (Рекомендующий = Неопределено);
	
	
	Если НЕСостоитВКругу Тогда
		КомуДобавитьОбъект = КомуДобавить.ПолучитьОбъект();
		СтрокаТЧ = КомуДобавитьОбъект.nb_КругДрузей.Добавить();
		СтрокаТЧ.Друг = КогоДобавить;
		СтрокаТЧ.ДатаРегистрации = ДатаРегистрации;
		СтрокаТЧ.ДатаОкончания = nb_ПрограммаЛояльностиДружбаСервер.ПолучитьПериодИспользованияБонусныхБаллов(СтрокаТЧ.ДатаРегистрации, КомуДобавитьОбъект);
		КомуДобавитьОбъект.Записать();
	КонецЕсли;	
	
КонецПроцедуры	

Функция ПолучитьРекомендующего(Клиент, Период = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица.nb_КругДрузей КАК ФизическиеЛицаnb_КругДрузей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО ФизическиеЛицаnb_КругДрузей.Ссылка = ФизическиеЛица.Ссылка
		|ГДЕ
		|	ФизическиеЛицаnb_КругДрузей.Друг = &Друг
		|	И &УсловиеПериода";
	
	Запрос.УстановитьПараметр("Друг", Клиент);
	Если Период = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеПериода", "Истина");		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеПериода", "ФизическиеЛицаnb_КругДрузей.ДатаОкончания > &Период");
		Запрос.УстановитьПараметр("Период", Период);
	КонецЕсли;	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Рекомендующий = Неопределено;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Рекомендующий = ВыборкаДетальныеЗаписи.ССылка;
	КонецЕсли;	
	
	Возврат Рекомендующий
	
КонецФункции

Процедура ЗаполнитьСтрокуСкидкиДляРасчетаБонусов(КоличествоБонусов, ОтКогоНачисленыБонусныеБаллы = Неопределено, ДисконтнаяКарта, СтрокаДереваСкидок, ПараметрыБонуса, ТоварСегмента, ТаблицаСкидок)
	
		БонуснаяПрограммаЛояльности = ПолучитьБонуснуюПрограммуДружба();
	
		НоваяСтрока = ТаблицаСкидок.Добавить();
		НоваяСтрока.КлючСвязи = ТоварСегмента.КлючСвязи;
		НоваяСтрока.СкидкаНаценка = СтрокаДереваСкидок.СкидкаНаценка;
		НоваяСтрока.СпособПредоставления = СтрокаДереваСкидок.СпособПредоставления;
		НоваяСтрока.РеквизитДопУпорядочивания = СтрокаДереваСкидок.РеквизитДопУпорядочивания;
		НоваяСтрока.Сегмент = СтрокаДереваСкидок.СегментНоменклатурыПредоставления;
		НоваяСтрока.Действует = Истина;
		
		
		ТаблицаБонусов = БонусныеБаллыСервер.ПустаяТаблицаРасшифровкиБонусовПриРасчетеСкидок();
		НоваяСтрокаРасшифровки = ТаблицаБонусов.Добавить();
		НоваяСтрокаРасшифровки.КлючСвязи   					= ТоварСегмента.КлючСвязи;
		НоваяСтрокаРасшифровки.БонуснаяПрограммаЛояльности	= БонуснаяПрограммаЛояльности;
		НоваяСтрокаРасшифровки.СкидкаНаценка				= СтрокаДереваСкидок.СкидкаНаценка;
		НоваяСтрокаРасшифровки.ДисконтнаяКарта				= ДисконтнаяКарта;
		НоваяСтрокаРасшифровки.ДатаНачисления				= ПараметрыБонуса.ТекущаяДата;
		//НоваяСтрокаРасшифровки.ДатаСписания					= ПараметрыБонуса.ДатаСписания;
		НоваяСтрокаРасшифровки.Сегмент   					= СтрокаДереваСкидок.СегментНоменклатурыПредоставления;
		НоваяСтрокаРасшифровки.nb_ОтКогоНачисленыБонусныеБаллы = ОтКогоНачисленыБонусныеБаллы;
		
		
		НоваяСтрока.КоличествоБонусов = КоличествоБонусов;
		НоваяСтрока.СуммаВсехСкидок = НоваяСтрока.КоличествоБонусов;
		НоваяСтрокаРасшифровки.КоличествоБонусныхБаллов = НоваяСтрока.КоличествоБонусов;
		
		НоваяСтрока.ТаблицаБонусов = ТаблицаБонусов.Скопировать();
		
	
КонецПроцедуры	

Процедура РассчитатьБонусныеБаллыПоПрограммеДружбаПоТоварам(ДисконтнаяКарта, СтрокаДереваСкидок, ПараметрыБонуса, ТоварыСегмента, ТаблицаСкидок) Экспорт
	
	
	СтрокаДереваСкидок.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ПроцентОтСуммыВВидеБонусныхБаллов;
	ТоварыДляРасчетаБонусов = ПараметрыБонуса.Товары;
	
	Для Каждого ТоварСегмента Из ТоварыДляРасчетаБонусов Цикл
		
		Если ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат
			ИЛИ (ТоварСегмента.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
				И ЗначениеЗаполнено(ТоварСегмента.ДоговорПлатежногоАгента))Тогда
			Продолжить;
		КонецЕсли;
		
		// Расчет для 1го уровня
		Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
			ТочностьОкругления1 = ПолучитьТочностьОкругленияПриРасчетеБонусныхБаллов(1);
			БонусныеБаллы1 = Окр(ТоварСегмента.Сумма * ПолучитьПроцентУровняДляНачисленияБонусныхБаллов(1) / 100, ТочностьОкругления1);
        	ЗаполнитьСтрокуСкидкиДляРасчетаБонусов(БонусныеБаллы1, , ДисконтнаяКарта, СтрокаДереваСкидок, ПараметрыБонуса, ТоварСегмента, ТаблицаСкидок);
		КонецЕсли;
		
		// Расчет для 2го уровня
		ВладелецДисконтнойКарты2 = ПолучитьРекомендующего(ДисконтнаяКарта.ВладелецКарты, ПараметрыБонуса.ТекущаяДата);
		Если ЗначениеЗаполнено(ВладелецДисконтнойКарты2) Тогда
			ТочностьОкругления2 = ПолучитьТочностьОкругленияПриРасчетеБонусныхБаллов(2);
			БонусныеБаллы2 = Окр(ТоварСегмента.Сумма * ПолучитьПроцентУровняДляНачисленияБонусныхБаллов(2) / 100, ТочностьОкругления2);
			ДК2 = ПолучитьДисконтнуюКартуПоБК(ВладелецДисконтнойКарты2, ВладелецДисконтнойКарты2.nb_БК); 
        	ЗаполнитьСтрокуСкидкиДляРасчетаБонусов(БонусныеБаллы2, ДисконтнаяКарта.ВладелецКарты, ДК2, СтрокаДереваСкидок, ПараметрыБонуса, ТоварСегмента, ТаблицаСкидок);
		КонецЕсли;
		
		// Расчет для 3го уровня
		ВладелецДисконтнойКарты3 = ПолучитьРекомендующего(ВладелецДисконтнойКарты2, ПараметрыБонуса.ТекущаяДата);
		Если ЗначениеЗаполнено(ВладелецДисконтнойКарты3) Тогда
			ТочностьОкругления3 = ПолучитьТочностьОкругленияПриРасчетеБонусныхБаллов(3);
			БонусныеБаллы3 = Окр(ТоварСегмента.Сумма * ПолучитьПроцентУровняДляНачисленияБонусныхБаллов(3) / 100, ТочностьОкругления3);
			ДК3 = ПолучитьДисконтнуюКартуПоБК(ВладелецДисконтнойКарты3, ВладелецДисконтнойКарты3.nb_БК); 
        	ЗаполнитьСтрокуСкидкиДляРасчетаБонусов(БонусныеБаллы3, ДК2.ВладелецКарты, ДК3, СтрокаДереваСкидок, ПараметрыБонуса, ТоварСегмента, ТаблицаСкидок);
		КонецЕсли;	
	КонецЦикла;
		
КонецПроцедуры	

Процедура РассчитатьБонусныеБаллыПоПрограммеДружба(Знач ТаблицаПродажиПоДисконтнымКартам, ТаблицаБонусныхБаллов) Экспорт
	
	
	ТаблицаПродажиПоДисконтнымКартам.Свернуть("ВладелецДисконтнойКарты, Период", "Сумма");
	
	Для Каждого СтрокаТЗ Из ТаблицаПродажиПоДисконтнымКартам Цикл 
		// Расчет для 1го уровня
		ВладелецДисконтнойКарты1 = ПолучитьРекомендующего(СтрокаТЗ.ВладелецДисконтнойКарты, СтрокаТЗ.Период);
		Если ЗначениеЗаполнено(ВладелецДисконтнойКарты1) Тогда
			ТочностьОкругления1 = ПолучитьТочностьОкругленияПриРасчетеБонусныхБаллов(1);
			БонусныеБаллы1 = Окр(СтрокаТЗ.Сумма * ПолучитьПроцентУровняДляНачисленияБонусныхБаллов(1) / 100,ТочностьОкругления1);
			ДК1 = ПолучитьДисконтнуюКартуПоБК(ВладелецДисконтнойКарты1, ВладелецДисконтнойКарты1.nb_БК); 
			СтрокаТЗ_БонусныхБаллов = ТаблицаБонусныхБаллов.Добавить();
			СтрокаТЗ_БонусныхБаллов.Начислено 						= БонусныеБаллы1;
			СтрокаТЗ_БонусныхБаллов.ДисконтнаяКарта 				= ДК1;
			СтрокаТЗ_БонусныхБаллов.БонуснаяПрограммаЛояльности		= ПолучитьБонуснуюПрограммуДружба();
			СтрокаТЗ_БонусныхБаллов.ВидДвижения						= ВидДвиженияНакопления.Приход;
			СтрокаТЗ_БонусныхБаллов.Период							= СтрокаТЗ.Период;
			СтрокаТЗ_БонусныхБаллов.nb_ОтКогоНачисленыБонусныеБаллы = СтрокаТЗ.ВладелецДисконтнойКарты;
		КонецЕсли;	
		// Расчет для 2го уровня
		ВладелецДисконтнойКарты2 = ПолучитьРекомендующего(ВладелецДисконтнойКарты1, СтрокаТЗ.Период);
		Если ЗначениеЗаполнено(ВладелецДисконтнойКарты2) Тогда
			ТочностьОкругления2 = ПолучитьТочностьОкругленияПриРасчетеБонусныхБаллов(2);
			БонусныеБаллы2 = Окр(СтрокаТЗ.Сумма * ПолучитьПроцентУровняДляНачисленияБонусныхБаллов(2) / 100,ТочностьОкругления2);
			ДК2 = ПолучитьДисконтнуюКартуПоБК(ВладелецДисконтнойКарты2, ВладелецДисконтнойКарты2.nb_БК); 
			СтрокаТЗ_БонусныхБаллов = ТаблицаБонусныхБаллов.Добавить();
			СтрокаТЗ_БонусныхБаллов.Начислено 						= БонусныеБаллы2;
			СтрокаТЗ_БонусныхБаллов.ДисконтнаяКарта 				= ДК2;
			СтрокаТЗ_БонусныхБаллов.БонуснаяПрограммаЛояльности		= ПолучитьБонуснуюПрограммуДружба();
			СтрокаТЗ_БонусныхБаллов.ВидДвижения						= ВидДвиженияНакопления.Приход;
			СтрокаТЗ_БонусныхБаллов.Период							= СтрокаТЗ.Период;
			СтрокаТЗ_БонусныхБаллов.nb_ОтКогоНачисленыБонусныеБаллы = ВладелецДисконтнойКарты1;
		КонецЕсли;	
		
		// Расчет для 3го уровня
		ВладелецДисконтнойКарты3 = ПолучитьРекомендующего(ВладелецДисконтнойКарты3, СтрокаТЗ.Период);
		Если ЗначениеЗаполнено(ВладелецДисконтнойКарты3) Тогда
			ТочностьОкругления3 = ПолучитьТочностьОкругленияПриРасчетеБонусныхБаллов(3);
			БонусныеБаллы3 = Окр(СтрокаТЗ.Сумма * ПолучитьПроцентУровняДляНачисленияБонусныхБаллов(3) / 100,ТочностьОкругления3);
			ДК3 = ПолучитьДисконтнуюКартуПоБК(ВладелецДисконтнойКарты3, ВладелецДисконтнойКарты3.nb_БК); 
			СтрокаТЗ_БонусныхБаллов = ТаблицаБонусныхБаллов.Добавить();
			СтрокаТЗ_БонусныхБаллов.Начислено 						= БонусныеБаллы3;
			СтрокаТЗ_БонусныхБаллов.ДисконтнаяКарта 				= ДК3;
			СтрокаТЗ_БонусныхБаллов.БонуснаяПрограммаЛояльности		= ПолучитьБонуснуюПрограммуДружба();
			СтрокаТЗ_БонусныхБаллов.ВидДвижения						= ВидДвиженияНакопления.Приход;
			СтрокаТЗ_БонусныхБаллов.Период							= СтрокаТЗ.Период;
			СтрокаТЗ_БонусныхБаллов.nb_ОтКогоНачисленыБонусныеБаллы = ВладелецДисконтнойКарты2;
		КонецЕсли;	

	КонецЦикла;	
	
КонецПроцедуры
#КонецОбласти	


#Область БонусыАналитика

Функция ПолучитьАналитикуНачисленияБонусов(Период) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПродажиПоДисконтнымКартам.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ПродажиПоДисконтнымКартам.ВладелецДисконтнойКарты КАК ВладелецДисконтнойКарты,
		|	МИНИМУМ(ПродажиПоДисконтнымКартам.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_ПервыеПродажи
		|ИЗ
		|	РегистрНакопления.ПродажиПоДисконтнымКартам КАК ПродажиПоДисконтнымКартам
		|ГДЕ
		|	ПродажиПоДисконтнымКартам.Период < КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
		|	И ПродажиПоДисконтнымКартам.ДисконтнаяКарта.БонуснаяПрограммаЛояльности = &БонуснаяПрограммаЛояльности
		|
		|СГРУППИРОВАТЬ ПО
		|	ПродажиПоДисконтнымКартам.ДисконтнаяКарта,
		|	ПродажиПоДисконтнымКартам.ВладелецДисконтнойКарты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ПервыеПродажи.ДисконтнаяКарта) КАК КоличествоДК_ЗаСмену
		|ИЗ
		|	ВТ_ПервыеПродажи КАК ВТ_ПервыеПродажи
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ВТ_ПервыеПродажи.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СУММА(ВЫБОР
		|			КОГДА nb_АнкетаУчастникаПрограммыЛояльностиДружба.nb_ЕстьРегистрацияВГруппеВК
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК nb_КоличествоЗарегистрированныхВСоцСетяхЗаСмену,
		|	СУММА(ВЫБОР
		|			КОГДА nb_АнкетаУчастникаПрограммыЛояльностиДружба.Рекомендатель_БК = 0
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК nb_КоличествоЗарегистрировалосьПоПриглашениюЗаСмену,
		|	СУММА(ВЫБОР
		|			КОГДА nb_АнкетаУчастникаПрограммыЛояльностиДружба.Рекомендатель_БК = 0
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК nb_КоличествоЗарегистрировалосьСамостоятельноЗаСмену,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ nb_АнкетаУчастникаПрограммыЛояльностиДружба.Ссылка) КАК nb_КоличествоОформленныхАнкетЗаСмену
		|ИЗ
		|	Документ.nb_АнкетаУчастникаПрограммыЛояльностиДружба КАК nb_АнкетаУчастникаПрограммыЛояльностиДружба
		|ГДЕ
		|	nb_АнкетаУчастникаПрограммыЛояльностиДружба.Проведен
		|	И НАЧАЛОПЕРИОДА(nb_АнкетаУчастникаПрограммыЛояльностиДружба.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СУММА(ВЫБОР
		|			КОГДА nb_АнкетаУчастникаПрограммыЛояльностиДружба.nb_ЕстьРегистрацияВГруппеВК
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК nb_КоличествоЗарегистрированныхВСоцСетях,
		|	СУММА(ВЫБОР
		|			КОГДА nb_АнкетаУчастникаПрограммыЛояльностиДружба.Рекомендатель_БК = 0
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК nb_КоличествоЗарегистрировалосьПоПриглашению,
		|	СУММА(ВЫБОР
		|			КОГДА nb_АнкетаУчастникаПрограммыЛояльностиДружба.Рекомендатель_БК = 0
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК nb_КоличествоЗарегистрировалосьСамостоятельно,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ nb_АнкетаУчастникаПрограммыЛояльностиДружба.Ссылка) КАК nb_КоличествоОформленныхАнкет
		|ИЗ
		|	Документ.nb_АнкетаУчастникаПрограммыЛояльностиДружба КАК nb_АнкетаУчастникаПрограммыЛояльностиДружба
		|ГДЕ
		|	nb_АнкетаУчастникаПрограммыЛояльностиДружба.Проведен
		|	И nb_АнкетаУчастникаПрограммыЛояльностиДружба.Дата < КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПродажиПоДисконтнымКартам.ДисконтнаяКарта) КАК КоличествоДК
		|ИЗ
		|	РегистрНакопления.ПродажиПоДисконтнымКартам КАК ПродажиПоДисконтнымКартам
		|ГДЕ
		|	ПродажиПоДисконтнымКартам.Период < КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
		|	И ПродажиПоДисконтнымКартам.ДисконтнаяКарта.БонуснаяПрограммаЛояльности = &БонуснаяПрограммаЛояльности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(БонусныеБаллыОбороты.НачисленоПриход) КАК nb_БонусыНачислено,
		|	СУММА(БонусныеБаллыОбороты.НачисленоРасход) КАК nb_БонусыСписано,
		|	СУММА(ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(БонусныеБаллыОбороты.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
		|				ТОГДА БонусныеБаллыОбороты.НачисленоПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК nb_БонусыНачисленоЗаСмену,
		|	СУММА(ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(БонусныеБаллыОбороты.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
		|				ТОГДА БонусныеБаллыОбороты.НачисленоРасход
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК nb_БонусыСписаноЗаСмену
		|ИЗ
		|	РегистрНакопления.БонусныеБаллы.Обороты(НАЧАЛОПЕРИОДА(&Период, ДЕНЬ), КОНЕЦПЕРИОДА(&Период, ДЕНЬ), День, ) КАК БонусныеБаллыОбороты";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("БонуснаяПрограммаЛояльности", nb_ПрограммаЛояльностиДружбаСервер.ПолучитьБонуснуюПрограммуДружба());
	
	Массив_РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("nb_КоличествоЗарегистрированныхВСоцСетях", 0);
	СтруктураДанных.Вставить("nb_КоличествоЗарегистрированныхВСоцСетяхЗаСмену", 0);
	СтруктураДанных.Вставить("nb_КоличествоВыданныхКартЗаСмену", 0);
	СтруктураДанных.Вставить("nb_КоличествоВыданныхКарт", 0);
	СтруктураДанных.Вставить("nb_КоличествоОформленныхАнкетЗаСмену", 0);
	СтруктураДанных.Вставить("nb_КоличествоОформленныхАнкет", 0);
	СтруктураДанных.Вставить("nb_БонусыНачислено", 0);
	СтруктураДанных.Вставить("nb_БонусыСписано", 0);
	СтруктураДанных.Вставить("nb_БонусыНачисленоЗаСмену", 0);
	СтруктураДанных.Вставить("nb_БонусыСписаноЗаСмену", 0);
	СтруктураДанных.Вставить("nb_КоличествоЗарегистрировалосьПоПриглашению", 0);
	СтруктураДанных.Вставить("nb_КоличествоЗарегистрировалосьПоПриглашениюЗаСмену", 0);
	СтруктураДанных.Вставить("nb_КоличествоЗарегистрировалосьСамостоятельно", 0);
	СтруктураДанных.Вставить("nb_КоличествоЗарегистрировалосьСамостоятельноЗаСмену", 0);
	
	// Количество выданных карт за смену
	ВыборкаДетальныеЗаписи = Массив_РезультатыЗапросов[1].Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СтруктураДанных.nb_КоличествоВыданныхКартЗаСмену = ВыборкаДетальныеЗаписи.КоличествоДК_ЗаСмену;
	КонецЕсли;
	// Количество выданных анкет за смену
	ВыборкаДетальныеЗаписи = Массив_РезультатыЗапросов[2].Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ВыборкаДетальныеЗаписи);
	КонецЕсли;
	// Количество выданных анкет 
	ВыборкаДетальныеЗаписи = Массив_РезультатыЗапросов[3].Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ВыборкаДетальныеЗаписи);
	КонецЕсли;
	// Количество выданных карт за смену
	ВыборкаДетальныеЗаписи = Массив_РезультатыЗапросов[4].Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СтруктураДанных.nb_КоличествоВыданныхКарт = ВыборкаДетальныеЗаписи.КоличествоДК;
	КонецЕсли;
	// Количество начисленных и списанных бонусов 
	ВыборкаДетальныеЗаписи = Массив_РезультатыЗапросов[5].Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ВыборкаДетальныеЗаписи);
	КонецЕсли;
	
	Возврат СтруктураДанных	
КонецФункции
#КонецОбласти	

