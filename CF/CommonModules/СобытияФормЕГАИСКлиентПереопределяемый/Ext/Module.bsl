
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийФормы

// Возникает на клиенте перед выполнением записи объекта из формы.
//
// Параметры:
//  Форма - УправляемаяФорма - форма записываемого объекта,
//  Отказ - Булево - признак отказа от записи,
//  ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//
Процедура ПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Вызывается во всех созданных формах при вызове метода Оповестить.
//
// Параметры:
//  Форма - УправляемаяФорма - оповещаемая форма,
//  ИмяСобытия - Строка - имя события,
//  Параметр - Произвольный - параметр сообщения. Могут быть переданы любые необходимые данные,
//  Источник - Произвольный - источник события.
//
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ЧекЕГАИС.Форма.ФормаДокумента" И ИмяСобытия = "Запись_ЧекЕГАИС" Тогда
		Если Форма.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекаЕГАИС.ВскрытиеТары") Тогда
			Заголовок = НСтр("ru='Вскрытие тары ЕГАИС %1 от %2'");
			Форма.Заголовок = СтрШаблон(Заголовок, Форма.Объект.Номер, Форма.Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

// Обработчик переопределяемой команды формы.
//
// Параметры:
//  Форма - УправляемаяФорма - форма объекта справочника или документа,
//  Команда - КомандаФормы - команда формы.
//
Процедура ВыполнитьПереопределяемуюКоманду(Форма, Команда) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Открывает форму сопоставления номенклатуры с классификатором ЕГАИС.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой вызывается команда открытия обработки сопоставления,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы сопоставления,
//  ПараметрыОткрытияФормы - Структура - параметры, передаваемые в форму сопоставления.
//
Процедура ОткрытьФормуСопоставленияНоменклатурыСАлкогольнойПродукцией(Форма, ОповещениеПриЗавершении = Неопределено, ПараметрыОткрытияФормы = Неопределено) Экспорт
		
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Если Форма.ИмяФормы = "Документ.ТТНВходящаяЕГАИС.Форма.ФормаДокумента" Тогда
	
		ТТН = Форма.Объект.Ссылка;
		
		Если ТТН = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыОткрытияФормы.Вставить("ТТН", ТТН);
		
		ОткрытьФорму("Обработка.СопоставлениеНоменклатурыЕГАИСРТ.Форма", ПараметрыОткрытияФормы, Форма,,,, ОповещениеПриЗавершении, Режим);
		
	ИначеЕсли Форма.ИмяФормы = "Документ.ТТНВходящаяЕГАИС.Форма.ФормаСпискаДокументов" Тогда
		
		ТТН = Неопределено;
		
		Если ТипЗнч(ПараметрыОткрытияФормы) = Тип("Структура") И ПараметрыОткрытияФормы.Свойство("ТоварноТранспортныеНакладные") Тогда
			Если ПараметрыОткрытияФормы.ТоварноТранспортныеНакладные.Количество() > 0 Тогда
				ТТН = ПараметрыОткрытияФормы.ТоварноТранспортныеНакладные[0];
			КонецЕсли;
		КонецЕсли;
		
		Если ТТН = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыОткрытияФормы.Вставить("ТТН", ТТН);
		
		ОткрытьФорму("Обработка.СопоставлениеНоменклатурыЕГАИСРТ.Форма", ПараметрыОткрытияФормы, Форма,,,, ОповещениеПриЗавершении, Режим);
				
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму сопоставления классификатора ЕГАИС с номенклатурой.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой вызывается команда открытия обработки сопоставления,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы сопоставления,
//  ПараметрыОткрытияФормы - Структура - параметры, передаваемые в форму сопоставления.
//
Процедура ОткрытьФормуСопоставленияКлассификаторовЕГАИС(Форма, ОповещениеПриЗавершении = Неопределено, ПараметрыОткрытияФормы = Неопределено) Экспорт
	
	Если ПараметрыОткрытияФормы = Неопределено Тогда
		ПараметрыОткрытияФормы = Новый Структура;
	КонецЕсли;
	
	ОткрытьФормуСопоставленияНоменклатурыСАлкогольнойПродукцией(Форма, ОповещениеПриЗавершении, ПараметрыОткрытияФормы);
		
КонецПроцедуры

// Открывает форму подбора номенклатуры.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой вызывается команда открытия обработки сопоставления,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы подбора.
//
Процедура ОткрытьФормуПодбораНоменклатуры(Форма, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	Если Форма.ИмяФормы = "Документ.ТТНИсходящаяЕГАИС.Форма.ФормаДокумента" Тогда
		РеквизитОрганизацияЕГАИС = "Грузоотправитель";
	Иначе
		РеквизитОрганизацияЕГАИС = "ОрганизацияЕГАИС";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.Объект[РеквизитОрганизацияЕГАИС]) Тогда
		ОчиститьСообщения();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Организация ЕГАИС"" не заполнено'"),
			Форма.Объект,
			"Объект." + РеквизитОрганизацияЕГАИС,
			,
			Отказ);
	КонецЕсли;
	
	Магазин = ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(Форма.Объект[РеквизитОрганизацияЕГАИС], "ТорговыйОбъект");
	
	Если НЕ ЗначениеЗаполнено(Магазин) Тогда
		ОчиститьСообщения();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Выбранная организация ЕГАИС не сопоставлена с магазином'"),
			Форма.Объект,
			"Объект." + РеквизитОрганизацияЕГАИС,
			,
			Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Форма.Объект.Ссылка);
	Иначе
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Акт постановки на баланс ЕГАИС'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.АктСписанияЕГАИС") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Акт списания ЕГАИС'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ВозвратИзРегистра2ЕГАИС") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Возврат из регистра №2 ЕГАИС'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ЗапросАкцизныхМарокЕГАИС") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Запрос акцизных марок ЕГАИС'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ПередачаВРегистр2ЕГАИС") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Передача в регистр №2 ЕГАИС'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Товарно-транспортная накладная ЕГАИС (исходящая)'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ЧекЕГАИС") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Чек ЕГАИС'"));
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ЧекЕГАИСВозврат") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Чек ЕГАИС на возврат'"));
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин"                                  ,Магазин);
	ПараметрыФормы.Вставить("РежимПодбораБезУслуг"                     , Истина);
	ПараметрыФормы.Вставить("ИспользоватьОтборПоТипамНоменклатуры"     , Истина);
	ПараметрыФормы.Вставить("Заголовок"                                , ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата"                                     , Форма.Объект.Дата);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров"        , Истина);
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, Форма, Форма.УникальныйИдентификатор,,, ОповещениеПриЗавершении);
	
КонецПроцедуры

// Открывает форму выбора документа перемещения товаров.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой вызывается команда выбора документа,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы выбора,
//  Отбор - Структура, ДокументСсылка.ТТНВходящаяЕГАИС - значения реквизитов, по которым нужно отобрать выбираемый документ
//                                                       или ссылка на ТТН ЕГАИС (входящая), по которой будет сформирован отбор.
//
Процедура ОткрытьФормуВыбораДокументаПеремещениеТоваров(Форма, ОповещениеПриЗавершении, Знач Отбор) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ПеремещениеТоваров.ФормаВыбора",
		Новый Структура("Отбор", Отбор),
		Форма,,,,
		ОповещениеПриЗавершении);
	
КонецПроцедуры

// Открывает форму выбора документа поступления товаров и услуг.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой вызывается команда выбора документа,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы выбора,
//  Отбор - Структура, ДокументСсылка.ТТНВходящаяЕГАИС - значения реквизитов, по которым нужно отобрать выбираемый документ
//                                                       или ссылка на ТТН ЕГАИС (входящая), по которой будет сформирован отбор.
//
Процедура ОткрытьФормуВыбораДокументаПоступлениеТоваровУслуг(Форма, ОповещениеПриЗавершении, Знач Отбор) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
	Иначе
		НовыйОтбор = Новый Структура;
		НовыйОтбор.Вставить("ПометкаУдаления", Ложь);
		НовыйОтбор.Вставить("ЕстьАлкогольнаяПродукция", Истина);
		
		Если ТипЗнч(Отбор) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
			
			СтруктураОтбора = ИнтеграцияЕГАИСВызовСервера.СтруктураОтбораДляВыбораДокументаПоступления(Отбор);
			
			Если ЗначениеЗаполнено(СтруктураОтбора.Организация) Тогда
				НовыйОтбор.Вставить("Организация", СтруктураОтбора.Организация);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураОтбора.ТорговыйОбъект) Тогда
				НовыйОтбор.Вставить("Магазин", СтруктураОтбора.ТорговыйОбъект);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураОтбора.Контрагент) Тогда
				НовыйОтбор.Вставить("Контрагент", СтруктураОтбора.Контрагент);
			КонецЕсли;
			
		Иначе
			
			Если Отбор.Свойство("Организация") Тогда
				НовыйОтбор.Вставить("Организация", Отбор.Организация);
			КонецЕсли;
			Если Отбор.Свойство("ТорговыйОбъект") Тогда
				НовыйОтбор.Вставить("Магазин", Отбор.ТорговыйОбъект);
			КонецЕсли;
			Если Отбор.Свойство("Контрагент") Тогда
				НовыйОтбор.Вставить("Контрагент", Отбор.Контрагент);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ПоступлениеТоваров.ФормаВыбора",
		Новый Структура("Отбор", Отбор),
		Форма,,,,
		ОповещениеПриЗавершении);
	
КонецПроцедуры

// Открывает форму создания нового документа поступления товаров и услуг на основании ТТН ЕГАИС.
//
// Параметры:
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на ТТН.
//
Процедура ОткрытьФормуСозданияДокументаПоступленияТоваровНаОснованииТТНЕГАИС(ТТНВходящаяЕГАИС) Экспорт
	
	ОткрытьФорму("Документ.ПоступлениеТоваров.Форма.ФормаДокумента", Новый Структура("Основание", ТТНВходящаяЕГАИС));
	
КонецПроцедуры

Процедура ОткрытьФормуСозданияНоменклатуры(ФормаВладелец, Реквизиты) Экспорт
	
	ИнтеграцияЕГАИСРТКлиент.ОткрытьФормуСозданияНоменклатуры(ФормаВладелец, Реквизиты);
	
КонецПроцедуры

Процедура ОткрытьФормуВыбораНоменклатуры(ФормаВладелец, Реквизиты) Экспорт
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(Реквизиты) Тогда
		Для Каждого КлючИЗначение Из Реквизиты Цикл
			Если КлючИЗначение.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ОсобенностьУчета", ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция"));
	ПараметрыОтбора.Вставить("ТипНоменклатуры",  ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	
	// Дополнительные параметры отбора
	Если ЗначениеЗаполнено(Реквизиты) И ЗначениеЗаполнено(Реквизиты.ВидАлкогольнойПродукцииЕГАИС) Тогда
		ПараметрыОтбора.Вставить("ВидАлкогольнойПродукции", Реквизиты.ВидАлкогольнойПродукцииЕГАИС);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

Процедура ОткрытьФормуВыбораАлкогольнойПродукции(ВладелецФормы, Реквизиты, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(Реквизиты) Тогда
		Для Каждого КлючИЗначение Из Реквизиты Цикл
			Если КлючИЗначение.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	// Дополнительные параметры отбора
	Если ЗначениеЗаполнено(Реквизиты) Тогда
		
		Если Реквизиты.Свойство("ВидАлкогольнойПродукции")
			И ЗначениеЗаполнено(Реквизиты.ВидАлкогольнойПродукции) Тогда
			ПараметрыОтбора.Вставить("ВидПродукции", Реквизиты.ВидАлкогольнойПродукции);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Отбор",                ПараметрыОтбора);
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	ОткрытьФорму("Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ФормаВыбора", ПараметрыФормы, ВладелецФормы);
	
КонецПроцедуры

// Открывает форму создания нового контрагента.
//
// Параметры:
//  ДанныеКонтрагента - Структура - данные для заполнения нового контрагента. Структура со свойствами:
//   * Наименование - Строка - наименование контрагента,
//   * СокращенноеНаименование - Строка - сокращенное наименование контрагента,
//   * ИНН - Строка - ИНН контрагента,
//   * КПП - Строка - КПП контрагента.
//  Форма  - УправляемаяФорма - форма-владелец.
//
Процедура ОткрытьФормуСозданияКонтрагента(ФормаВладелец, Реквизиты) Экспорт
	
	Основание = Новый Структура;
	Основание.Вставить("ИНН",                     Реквизиты.ИНН);
	Основание.Вставить("КПП",                     Реквизиты.КПП);
	Основание.Вставить("Наименование",            Реквизиты.Наименование);
	Основание.Вставить("СокращенноеНаименование", Реквизиты.СокращенноеНаименование);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Основание", Основание);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаЭлемента", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

Процедура ОткрытьФормуСозданияТорговогоОбъекта(ФормаВладелец, Реквизиты) Экспорт
	
	
КонецПроцедуры

Процедура ОткрытьФормуВыбораКонтрагента(ФормаВладелец, Реквизиты, Элемент = Неопределено) Экспорт
	
	Основание = Новый Структура;
	Основание.Вставить("ИНН",                     Реквизиты.ИНН);
	Основание.Вставить("КПП",                     Реквизиты.КПП);
	Основание.Вставить("Наименование",            Реквизиты.Наименование);
	Основание.Вставить("СокращенноеНаименование", Реквизиты.СокращенноеНаименование);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

Процедура ОткрытьФормуВыбораТорговогоОбъекта(ФормаВладелец, Реквизиты) Экспорт
	
	
КонецПроцедуры

Процедура ОткрытьПодборСерий(Объект, Форма, ПараметрыФормыУказанияСерий, Текст = "", ТекущиеДанные = Неопределено) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Выберите строку товаров, для которой необходимо указать серии.'");
		ПоказатьПредупреждение(Неопределено, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, ПараметрыФормыУказанияСерий, Форма,,,, Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", Форма, Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Выполняет действия при изменении номенклатуры в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - Структура - см. функцию СобытияФормЕГАИСКлиент.СтруктураПараметрыЗаполнения.
//
Процедура ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	ДанныеПродукции = ИнтеграцияЕГАИСРТВызовСервера.ДанныеАлкогольнойПродукции(ТекущаяСтрока.Номенклатура);
	
	Если ТекущаяСтрока.Свойство("ЕдиницаИзмерения") Тогда
		ТекущаяСтрока.ЕдиницаИзмерения = ДанныеПродукции.ЕдиницаИзмерения;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Номенклатура", "Номенклатура");
	СтруктураПараметров.Вставить("ХарактеристикиИспользуются", "ХарактеристикиИспользуются");
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметров);
	
	Если ПараметрыЗаполнения.ОбработатьУпаковки Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки");
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		ДанныеДокумента = Новый Структура;
		ДанныеДокумента.Вставить("Дата", Форма.Объект.Дата);
		
		Если Форма.Объект.Свойство("ОрганизацияЕГАИС") Тогда
			ДанныеДокумента.Вставить("Магазин", ИнтеграцияЕГАИСРТВызовСервера.ЗначениеРеквизитаОбъекта(Форма.Объект.ОрганизацияЕГАИС, "ТорговыйОбъект"));
		Иначе
			ДанныеДокумента.Вставить("Магазин", Неопределено);
		КонецЕсли;
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(ДанныеДокумента));
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию Тогда
		СтруктураДействий.Вставить("ЗаполнитьАлкогольнуюПродукцию", ПараметрыЗаполнения);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Форма.Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ТекущаяСтрока.Свойство("МаркируемаяАлкогольнаяПродукция") Тогда
		ТекущаяСтрока.МаркируемаяАлкогольнаяПродукция = ДанныеПродукции.Маркируемый;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
		АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(ТекущаяСтрока, "Количество");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении характеристики в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - Структура - см. функцию СобытияФормЕГАИСКлиент.СтруктураПараметрыЗаполнения.
//
Процедура ПриИзмененииХарактеристики(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСумму");
		ДанныеДокумента = Новый Структура;
		ДанныеДокумента.Вставить("Дата", Форма.Объект.Дата);
		
		Если Форма.Объект.Свойство("ОрганизацияЕГАИС") Тогда
			ДанныеДокумента.Вставить("Магазин", ИнтеграцияЕГАИСРТВызовСервера.ЗначениеРеквизитаОбъекта(Форма.Объект.ОрганизацияЕГАИС, "ТорговыйОбъект"));
		Иначе
			ДанныеДокумента.Вставить("Магазин", Неопределено);
		КонецЕсли;
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(ДанныеДокумента));
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Форма.Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
	ТекущаяСтрока.АлкогольнаяПродукция = ИнтеграцияЕГАИСРТВызовСервера.АлкогольнаяПродукцияПоНоменклатуре(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика);
	
	Если ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
		АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(ТекущаяСтрока, "Количество");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении упаковки в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - Структура - см. функцию СобытияФормЕГАИСКлиент.СтруктураПараметрыЗаполнения.
//
Процедура ПриИзмененииУпаковки(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Форма.Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
		АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(ТекущаяСтрока, "Количество");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении количества упаковок в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - Структура - см. функцию СобытияФормЕГАИСКлиент.СтруктураПараметрыЗаполнения.
//
Процедура ПриИзмененииКоличестваУпаковок(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Форма.Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
		АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(ТекущаяСтрока, "Количество");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении количества в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - Структура - см. функцию СобытияФормЕГАИСКлиент.СтруктураПараметрыЗаполнения.
//
Процедура ПриИзмененииКоличества(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	Если ПараметрыЗаполнения.ПерезаполнитьНоменклатуруЕГАИС Тогда
		ТекущаяСтрока.АлкогольнаяПродукция = ИнтеграцияЕГАИСРТВызовСервера.АлкогольнаяПродукцияПоНоменклатуре(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика);
		
		ДанныеПродукции = ИнтеграцияЕГАИСРТВызовСервера.ДанныеАлкогольнойПродукции(ТекущаяСтрока.Номенклатура);
		
		Если ТекущаяСтрока.Свойство("МаркируемаяАлкогольнаяПродукция") Тогда
			ТекущаяСтрока.МаркируемаяАлкогольнаяПродукция = ДанныеПродукции.Маркируемый;
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки");
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Форма.Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
		АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(ТекущаяСтрока, "Количество");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении цены в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - Структура - см. функцию СобытияФормЕГАИСКлиент.СтруктураПараметрыЗаполнения.
//
Процедура ПриИзмененииЦены(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	СтруктураДействий = Новый Структура;
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Форма.Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ПриИзмененииСерии(Форма, ПараметрыУказанияСерий, ТекущиеДанные, КэшированныеЗначения = Неопределено, ПараметрыЗаполнения = Неопределено) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении суммы в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыЗаполнения - Структура - см. функцию СобытияФормЕГАИСКлиент.СтруктураПараметрыЗаполнения.
//
Процедура ПриИзмененииСуммы(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения) Экспорт
	
	СтруктураДействий = Новый Структура;
	
	Если ПараметрыЗаполнения.Свойство("ПересчитатьЦенуПоСумме")
		И ПараметрыЗаполнения.ПересчитатьЦенуПоСумме Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Форма.Товары,
																		ТекущаяСтрока,
																		СтруктураДействий, 
																		КэшированныеЗначения);
	
КонецПроцедуры


// Выполняет действия при начале выбора характеристики в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  Элемент - ПолеВвода - элемент формы Характеристика,
//  ДанныеВыбора - СписокЗначений - в обработчике можно сформировать и передать в этом параметре данные для выбора,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура НачалоВыбораХарактеристики(Форма, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(Форма, Элемент, СтандартнаяОбработка, ТекущаяСтрока);
	
КонецПроцедуры

// Выполняет действия при начале выбора упаковки в таблице Товары.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  Элемент - ПолеВвода - элемент формы Упаковка,
//  ДанныеВыбора - СписокЗначений - в обработчике можно сформировать и передать в этом параметре данные для выбора,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура НачалоВыбораУпаковки(Форма, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

// Вызывает процедуру обработки подбора, если произошел выбор из формы подбора.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура завершения подбора номенклатуры,
//  ВыбранноеЗначение - Произвольный - результат выбора в подчиненной форме,
//  ИсточникВыбора - УправляемаяФорма - форма, где осуществлен выбор.
//
Процедура ОбработкаВыбораПодборНоменклатуры(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру обработки подбора, если произошло оповещение из формы подбора.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура завершения подбора номенклатуры,
//  ИмяСобытия - Строка - имя события, о котором происходит оповещение,
//  Параметр - Произвольный - переданный в сообщение параметр,
//  Источник - УправляемаяФорма - форма, в которой произошло оповещение.
//
Процедура ОбработкаОповещенияПодборНоменклатуры(ОповещениеПриЗавершении, ИмяСобытия, Параметр, Источник) Экспорт
	
	Возврат;
	
КонецПроцедуры


// Вызывает процедуру обработки выбора номенклатуры, если произошел выбор из формы выбора.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура завершения подбора номенклатуры,
//  ВыбранноеЗначение - Произвольный - результат выбора в подчиненной форме,
//  ИсточникВыбора - УправляемаяФорма - форма, где осуществлен выбор.
//
Процедура ОбработкаВыбораНоменклатуры(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Если СтрНачинаетсяС(ИсточникВыбора.ИмяФормы, "Справочник.Номенклатура") Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаВыбораСерии(Форма, ПараметрыУказанияСерий, ВыбраннаяСерия, ИсточникВыбора, ПараметрыЗаполнения = Неопределено) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Вызывает процедуру обработки выбора номенклатуры, если произошел выбор из формы выбора.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура завершения подбора номенклатуры,
//  ВыбранноеЗначение - Произвольный - результат выбора в подчиненной форме,
//  ИсточникВыбора - УправляемаяФорма - форма, где осуществлен выбор.
//
Процедура ОбработкаВыбораКонтрагента(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Если СтрНачинаетсяС(ИсточникВыбора.ИмяФормы, "Справочник.Контрагенты") Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру обработки выбора номенклатуры, если произошел выбор из формы выбора.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура завершения подбора номенклатуры,
//  ВыбранноеЗначение - Произвольный - результат выбора в подчиненной форме,
//  ИсточникВыбора - УправляемаяФорма - форма, где осуществлен выбор.
//
Процедура ОбработкаВыбораТорговогоОбъекта(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Возвращает параметры заполнения при создании контрагента из классификатора организаций ЕГАИС
//
Функция ПараметрыСозданияКонтрагента() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИНН","ИНН");
	Результат.Вставить("КПП","КПП");
	Результат.Вставить("Наименование","НаименованиеПолное");
	Результат.Вставить("СокращенноеНаименование","Наименование");
	Результат.Вставить("ТорговыйОбъект","ТорговыйОбъект");
	Результат.Вставить("ПредставлениеАдреса","ПредставлениеАдреса");
	Результат.Вставить("Адрес","Адрес");
	
	Возврат Результат;
	
КонецФункции


#Область ПодключаемоеОборудование

// Вызывается перед обработкой штрихкодов, не привязанных ни к одной номенклатуре.
//
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения - процедура, которую нужно вызвать после выполнения обработки,
//  Форма - УправляемаяФорма - форма, в которой отсканировали штрихкоды,
//  ИмяСобытия - Строка - имя события, инициировавшее оповещение,
//  Параметр - Структура - данные для обработки,
//  Источник - Произвольный - источник события.
//
Процедура ОбработкаОповещенияОбработаныНеизвестныеШтрихкоды(ОписаниеОповещения, Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать алгоритм передачи данных в ТСД.
//
// Параметры:
//  Форма - УправляемаяФорма - форма документа, инициировавшая выгрузку.
//
Процедура ВыгрузитьДанныеВТСД(Форма) Экспорт
	
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(Форма, Ложь, Новый Структура);
	
КонецПроцедуры

// В процедуре нужно реализовать алгоритм заполнения формы данными из ТСД.
//
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения - процедура, которую нужно вызвать после заполнения данных формы,
//  Форма - УправляемаяФорма - форма, данные в которой требуется заполнить,
//  РезультатВыполнения - Структура - результат загрузки данных из ТСД (см. МенеджерОборудованияКлиент.ПараметрыВыполненияОперацииНаОборудовании()).
//
Процедура ПриПолученииДанныхИзТСД(ОписаниеОповещения, Форма, РезультатВыполнения) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения.ТаблицаТоваров);
		
	Иначе
		
		СообщитьОбОшибке(РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// В процедуре нужно реализовать алгоритм преобразования данных из подсистемы подключаемого оборудования.
//
// Параметры:
//  Параметр - Массив - входящие данные.
//
// Возвращаемое значение:
//  Массив - Массив структур со свойствами:
//   * Штрихкод
//   * Количество
Функция ПреобразоватьДанныеСоСканераВМассив(Параметр) Экспорт
	
	Возврат МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
	
КонецФункции

// В процедуре нужно реализовать алгоритм преобразования данных из подсистемы подключаемого оборудования.
//
// Параметры:
//  Параметр - Массив - входящие данные.
//
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * Штрихкод
//   * Количество
Функция ПреобразоватьДанныеСоСканераВСтруктуру(Параметр) Экспорт
	
	Возврат МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СообщитьОбОшибке(РезультатВыполнения)
	
	ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииРТ

Процедура ПолучитьДанныеИзТСДПослеЗакрытияВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("ОбновитьКоличество", Результат = КодВозвратаДиалога.Да);
	
	СтруктураМассивов = ПодключаемоеОборудованиеРТВызовСервера.СформироватьМассивТоваров(ДополнительныеПараметры.ТаблицаТоваров, ДополнительныеПараметры.ОбновитьКоличество);
	
	ДополнительныеПараметры.Вставить("ОпознанныеШтрихкоды", СтруктураМассивов.ОпознанныеШтрихкоды);
	ДополнительныеПараметры.Вставить("НеОпознанныеШтрихкоды", СтруктураМассивов.НеОпознанныеШтрихкоды);
	ДополнительныеПараметры.Вставить("УчитыватьСерийныеНомераПриСвертке", Истина);
	
	ПовторяющиесяШтрихкоды = СтруктураМассивов.ПовторяющиесяШтрихкоды;
	Если ПовторяющиесяШтрихкоды.ЗначенияПоиска.Количество() = 0 Тогда
		ПолучитьДанныеИзТСДПослеВыбораПовторов(Неопределено, ДополнительныеПараметры);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПовторяющиесяШтрихкоды", ПовторяющиесяШтрихкоды);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ПолучитьДанныеИзТСДПослеВыбораПовторов", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("ОбщаяФорма.ВыборДанныхПоискаПоШК", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеИзТСДПослеВыбораПовторов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Для Каждого ПовторяющийсяШК Из Результат.ЗначенияПоиска Цикл
			ДополнительныеПараметры.ОпознанныеШтрихкоды.ЗначенияПоиска.Добавить(ПовторяющийсяШК);
		КонецЦикла;
	КонецЕсли;
	
	НеОпознанныеШтрихкоды = ДополнительныеПараметры.НеОпознанныеШтрихкоды;
	
	Если НеОпознанныеШтрихкоды.Количество() = 0 Тогда
		
		ПодборНоменклатурыПоСоответствиюШтрихкодов(Неопределено, ДополнительныеПараметры);
		
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Штрихкоды", НеОпознанныеШтрихкоды);
		
		Оповещение = Новый ОписаниеОповещения("ПодборНоменклатурыПоСоответствиюШтрихкодов", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("ОбщаяФорма.ПодборНоменклатурыПоСоответствиюШтрихкодов",
						ПараметрыФормы,
						,
						,
						,
						,
						Оповещение,
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодборНоменклатурыПоСоответствиюШтрихкодов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Для Каждого СопоставленныйШК Из Результат Цикл
			ДополнительныеПараметры.ОпознанныеШтрихкоды.ЗначенияПоиска.Добавить(СопоставленныйШК);
		КонецЦикла;
	КонецЕсли;
	
	ОпознанныеШтрихкоды = ДополнительныеПараметры.ОпознанныеШтрихкоды;
	Если ОпознанныеШтрихкоды.Количество() > 0 Тогда
		ОпознанныеШтрихкоды.Вставить("ОбновитьКоличество", ДополнительныеПараметры.ОбновитьКоличество);
		ОпознанныеШтрихкоды.Вставить("УчитыватьСерийныеНомераПриСвертке", ДополнительныеПараметры.УчитыватьСерийныеНомераПриСвертке);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, ОпознанныеШтрихкоды);
	
КонецПроцедуры

#КонецОбласти
