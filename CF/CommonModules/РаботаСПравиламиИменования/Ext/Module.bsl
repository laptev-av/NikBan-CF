#Область ПрограммныйИнтерфейс

// Заполняет все возможные наборы дополнительных реквизитов и сведений, которые могут участвовать в правилах именования номенклатуры.
//
// Параметры:
//	НаборыСвойств - СписокЗначений - список для заполнения.
//
Процедура ЗаполнитьНаборыСвойств(НаборыСвойств) Экспорт
	
	Выборка = Справочники.НаборыДополнительныхРеквизитовИСведений.ВыбратьИерархически(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура);
	
	НаборыСвойств.Очистить();
	Пока Выборка.Следующий() Цикл
		НаборыСвойств.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	НаборыСвойств.СортироватьПоЗначению();
			
КонецПроцедуры

// Устанавливает параметры выбора правила именования.
//
// Параметры:
//	НаборСвойств - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - содержит дополнительные реквизиты и сведения, по которым строится правило именования.
//	ЭлементПравилоИменования - ПолеФормы - Поле для ввода правила именования.
//
Процедура УстановитьПараметрыВыбораПравилаИменования(НаборСвойств,ЭлементПравилоИменования) Экспорт
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления",Ложь));

	ТаблицаДоступныхПараметров = ПолучитьДоступныеПараметры();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		
		Запрос = Новый Запрос;	
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	ПравилаИменованияНоменклатурыНаборыСвойств.Ссылка КАК ПравилоИменования
						|ИЗ
						|	Справочник.ПравилаИменованияНоменклатуры.НаборыСвойств КАК ПравилаИменованияНоменклатурыНаборыСвойств
						|ГДЕ
						|	ПравилаИменованияНоменклатурыНаборыСвойств.Набор = &Набор";
						
		Запрос.УстановитьПараметр("Набор",НаборСвойств);
		
		Выборка = Запрос.Выполнить().Выбрать();
		МассивДоступныхПравилИменования = Новый Массив;
		Пока Выборка.Следующий() Цикл
			РезультатПроверкиПравила = ПроверитьИспользованиеПравилаИменования(Выборка.ПравилоИменования,ТаблицаДоступныхПараметров);
			Если Не РезультатПроверкиПравила.ЕстьОшибки Тогда
				МассивДоступныхПравилИменования.Добавить(Выборка.ПравилоИменования);
			КонецЕсли;
		КонецЦикла;
		
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивДоступныхПравилИменования)));

	КонецЕсли;
		
	ПараметрыВыбораПравилаИменования = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	ЭлементПравилоИменования.ПараметрыВыбора = ПараметрыВыбораПравилаИменования;
	
КонецПроцедуры

// Устанавливает параметры выбора вида номенклатуры.
//
// Параметры:
//	ЭлементВидНоменклатуры - ПолеФормы - Поле для ввода вида номенклатуры.
//
Процедура УстановитьПараметрыВыбораВидаНоменклатуры(ЭлементВидНоменклатуры) Экспорт
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления",Ложь));

	ТаблицаДоступныхПараметров = ПолучитьДоступныеПараметры();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыНоменклатуры.Ссылка КАК Ссылка,
	               |	ВидыНоменклатуры.ПравилоИменования КАК ПравилоИменования
	               |ИЗ
	               |	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	               |ГДЕ
	               |	ВидыНоменклатуры.ПравилоИменования <> ЗНАЧЕНИЕ(Справочник.ПравилаИменованияНоменклатуры.ПустаяСсылка)";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	МассивДоступныхВидовНоменклатур = Новый Массив;
	Пока Выборка.Следующий() Цикл
		РезультатПроверкиПравила = ПроверитьИспользованиеПравилаИменования(Выборка.ПравилоИменования,ТаблицаДоступныхПараметров);
		Если Не РезультатПроверкиПравила.ЕстьОшибки Тогда
			МассивДоступныхВидовНоменклатур.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивДоступныхВидовНоменклатур)));	
	ПараметрыВыбораПравилаИменования = Новый ФиксированныйМассив(МассивПараметровВыбора);	
	ЭлементВидНоменклатуры.ПараметрыВыбора = ПараметрыВыбораПравилаИменования;
	
КонецПроцедуры

// Формирует дерево реквизитов и сведений, возможных для ввода в правило именования. 
// Формирует таблицу доступных параметров правила.
//
// Параметры:
//	НаборыСвойств - СписокЗначений - содержит наборы свойств дополнительных реквизитов и сведений, по которым формируется дерево.
//	ТаблицаДоступныхПараметров - ДанныеФормыКоллекция - таблица, которая содержит параметры, по которым строится правило именования номенклатуры.
//
Функция ПолучитьДеревоРеквизитовИСведений(НаборыСвойств,ТаблицаДоступныхПараметров) Экспорт
	
	ТаблицаДоступныхПараметров.Очистить();
	
	Дерево = ПолучитьПустоеДеревоОператоров();
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Номенклатура");        
	
	Для Каждого Реквизит Из Метаданные.Справочники.Номенклатура.Реквизиты Цикл
		
		Если Реквизит.Использование = ИспользованиеГруппИЭлементов.Группы Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = Реквизит.Имя;
		
		Если Не РеквизитИспользуется(ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПараметра = Реквизит.Синоним;
		ДобавитьОператор(Дерево, ГруппаОператоров, 1, ИмяПараметра, "Номенклатура." + ИмяРеквизита);
		
		СтрокаПараметров = ТаблицаДоступныхПараметров.Добавить();
		СтрокаПараметров.ИмяПараметра = ИмяПараметра;
		СтрокаПараметров.ПутьКДанным = "Номенклатура." + ИмяРеквизита;
		
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка КАК НаборСвойств,
		               |	2 КАК ИндексКартинки,
		               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.Заголовок КАК ИмяПараметра,
		               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.Имя КАК ПутьКДанным,
		               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК Свойство
		               |ИЗ
		               |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
		               |ГДЕ
		               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка.Родитель = &НаборРеквизитовИСведений
		               |	И НЕ НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка,
		               |	3,
		               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.Заголовок,
		               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.Имя,
		               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство
		               |ИЗ
		               |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
		               |ГДЕ
		               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка.Родитель = &НаборРеквизитовИСведений
		               |	И НЕ НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.ПометкаУдаления
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НаборСвойств,
		               |	ИмяПараметра
		               |ИТОГИ ПО
		               |	НаборСвойств";
		
		
		Запрос.УстановитьПараметр("НаборРеквизитовИСведений",Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура);
		
		ВыборкаНабор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ОбщийНабор = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие;
		
		Пока ВыборкаНабор.Следующий() Цикл
			
			Если  НаборыСвойств.НайтиПоЗначению(ВыборкаНабор.НаборСвойств) <> Неопределено 
				Или ВыборкаНабор.НаборСвойств = ОбщийНабор Тогда	
				ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, ВыборкаНабор.НаборСвойств);
			Иначе
				ГруппаОператоров = Неопределено;
			КонецЕсли;
						
			ВыборкаДетальныеЗаписи = ВыборкаНабор.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если ГруппаОператоров <> Неопределено Тогда 
					ДобавитьОператор(Дерево, ГруппаОператоров, ВыборкаДетальныеЗаписи.ИндексКартинки, ВыборкаДетальныеЗаписи.ИмяПараметра, ВыборкаДетальныеЗаписи.ПутьКДанным,ВыборкаДетальныеЗаписи.НаборСвойств);
				КонецЕсли;
				
				СтрокаПараметров = ТаблицаДоступныхПараметров.Добавить();
				СтрокаПараметров.ИмяПараметра = ВыборкаДетальныеЗаписи.ИмяПараметра;
				СтрокаПараметров.ПутьКДанным  = ВыборкаДетальныеЗаписи.ПутьКДанным;
				Если ВыборкаДетальныеЗаписи.НаборСвойств <> ОбщийНабор Тогда	
					СтрокаПараметров.НаборСвойств = ВыборкаДетальныеЗаписи.НаборСвойств;
				КонецЕсли;
				Если СтрокаПараметров.ПутьКДанным = "" Тогда
					СтрокаПараметров.Свойство = ВыборкаДетальныеЗаписи.Свойство;
				КонецЕсли;									
			КонецЦикла;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Дерево;
	
КонецФункции

// Добавляет на форму элементы правила именования.
// 
// Параметры:
//	Форма - УправляемаяФорма - форма, которую необходимо обработать.
//	ГруппаПараметровИменования - ГруппаФормы - группа, в которой будут располагаться новые элементы.
//	ГруппаДекорацийПараметровИменования - ГруппаФормы - группа, в которой будут располагаться декорации для новых элементов.
//
Процедура ДобавитьЭлементыПравилаИменования(Форма,ГруппаПараметровИменования,ГруппаДекорацийПараметровИменования = Неопределено) Экспорт
	
	Для Каждого Строка из Форма.ПараметрыПравилаИменования Цикл
			
		НовыйЭлемент = Форма.Элементы.Добавить(Строка.ИмяЭлемента,Тип("ПолеФормы"),ГруппаПараметровИменования);
		НовыйЭлемент.ПутьКДанным = Строка.ПутьКДанным;
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;
		НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
		НовыйЭлемент.МаксимальнаяШирина = 40;
		НовыйЭлемент.Формат = "ДФ=dd.MM.yyyy; БЛ=Нет; БИ=Да";
		НовыйЭлемент.ФорматРедактирования = "ДФ=dd.MM.yyyy; БЛ=Нет; БИ=Да";
		
		Если Строка.ДополнительныеЗначенияИспользуются Тогда			
			МассивПараметровВыбора = Новый Массив;
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец",Строка.ВладелецДопЗначений));				
			НовыйЭлемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		КонецЕсли;
		
		НовыйЭлемент.УстановитьДействие("ПриИзменении","Подключаемый_ПараметрИменованияПриИзменении");
		
		Если ГруппаДекорацийПараметровИменования <> Неопределено Тогда
			ДекорацияПараметрИменования = Форма.Элементы.Добавить("Декорация" + Строка.ИмяЭлемента,Тип("ДекорацияФормы"),ГруппаДекорацийПараметровИменования);
			ДекорацияПараметрИменования.Вид = ВидДекорацииФормы.Картинка;
			ДекорацияПараметрИменования.Картинка = БиблиотекаКартинок.РаботаСПравиламиИменованияПараметрПравила;
			ДекорацияПараметрИменования.ВертикальноеПоложениеВГруппе   = ВертикальноеПоложениеЭлемента.Центр;
			ДекорацияПараметрИменования.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Возвращает структуру, содержащую информацию о параметрах правила именования. 
//
// Параметры:
//	ВидНоменклатуры - СправочникСсылка.ВидНоменклатуры - вид номенклатуры, для которого задано правило именования.
//	ОписаниеДополнительныхРеквизитов - ДанныеФормыКоллекция - содержит описание дополнительных реквизитов формы.
//	ПропускатьВидНоменклатуры - Булево - истина, если необходимо пропустить параметр "Номенклатура.ВидНоменклатуры".
//
Функция ПолучитьСтруктуруПараметровПравилаИменования(ВидНоменклатуры,ОписаниеДополнительныхРеквизитов = Неопределено,ПропускатьВидНоменклатуры = Ложь) Экспорт
	
	ПравилоИменования = ВидНоменклатуры.ПравилоИменования;
	
	ИспользоватьДополнительныеРеквизитыИСведения = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	
	СтруктураПараметровПравила = Новый Структура;
	СтруктураПараметровПравила.Вставить("Правило",ПравилоИменования.Правило);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Правило",ПравилоИменования);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПараметрыПравила.ИмяПараметра КАК ИмяПараметра,
	               |	ПараметрыПравила.ПутьКДанным КАК ПутьКДанным
	               |ПОМЕСТИТЬ ВТ_ПараметрыПравила
	               |ИЗ
	               |	Справочник.ПравилаИменованияНоменклатуры.ПараметрыПравила КАК ПараметрыПравила
	               |ГДЕ
	               |	ПараметрыПравила.Ссылка = &Правило
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ПараметрыПравила.ИмяПараметра КАК ИмяПараметра,
	               |	ВТ_ПараметрыПравила.ПутьКДанным КАК ПутьКДанным,
	               |	ЕСТЬNULL(ДополнительныеРеквизитыИСведения.Ссылка, НЕОПРЕДЕЛЕНО) КАК Свойство,
	               |	НЕ ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение КАК ЭтоДопРеквизит,
	               |	ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение КАК ЭтоДопСведение,
	               |	ДополнительныеРеквизитыИСведения.ДополнительныеЗначенияИспользуются КАК ДополнительныеЗначенияИспользуются,
	               |	ДополнительныеРеквизитыИСведения.ВладелецДополнительныхЗначений КАК ВладелецДополнительныхЗначений,
	               |	ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения
	               |ИЗ
	               |	ВТ_ПараметрыПравила КАК ВТ_ПараметрыПравила
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	               |		ПО ВТ_ПараметрыПравила.ПутьКДанным = ДополнительныеРеквизитыИСведения.Имя";
	
			
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	ПараметрыПравила = Новый Массив;
	
	ИмяЭлементаНачало = "ПараметрИменования_"  + СтрЗаменить(ВРег(ВидНоменклатуры.УникальныйИдентификатор()), "-", "x") + "_";
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПутьКДанным = "Номенклатура.ВидНоменклатуры" И ПропускатьВидНоменклатуры Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяЭлемента = ИмяЭлементаНачало;
		
		Если Выборка.Свойство <> Неопределено Тогда		
			
			
			Если Не ИспользоватьДополнительныеРеквизитыИСведения Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПараметра = Новый Структура;
			
			ИмяЭлемента = ИмяЭлемента + СтрЗаменить(ВРег(Выборка.Свойство.УникальныйИдентификатор()), "-", "x");
			ПутьКДанным = ИмяЭлемента;
			Если ОписаниеДополнительныхРеквизитов <> Неопределено Тогда 
				СтрокиДопР = ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Свойство",Выборка.Свойство)); 
				Если СтрокиДопР.Количество() > 0 Тогда
					ПутьКДанным = СтрокиДопР[0].ИмяРеквизитаЗначение;
				КонецЕсли;
			КонецЕсли;
			
			ТипРеквизита = Выборка.ТипЗначения;
			СтрокаПараметра.Вставить("ТипРеквизита",ТипРеквизита);
			
			СтрокаПараметра.Вставить("ДополнительныеЗначенияИспользуются",Выборка.ДополнительныеЗначенияИспользуются);
			Если ЗначениеЗаполнено(Выборка.ВладелецДополнительныхЗначений) Тогда
				СтрокаПараметра.Вставить("ВладелецДопЗначений",Выборка.ВладелецДополнительныхЗначений);
			Иначе
				СтрокаПараметра.Вставить("ВладелецДопЗначений",Выборка.Свойство);
			КонецЕсли;
			СтрокаПараметра.Вставить("ЭтоДопРеквизит",	Выборка.ЭтоДопРеквизит);
			СтрокаПараметра.Вставить("ЭтоДопСведение",	Выборка.ЭтоДопСведение);
			СтрокаПараметра.Вставить("Свойство",Выборка.Свойство);
		Иначе 
			
			СтрокаПараметра = Новый Структура;
			
			ИмяЭлемента = ИмяЭлемента + СтрЗаменить(ВРег(Новый УникальныйИдентификатор), "-", "x");
			ИмяРеквизитаНоменклатуры = Прав(Выборка.ПутьКДанным,СтрДлина(Выборка.ПутьКДанным) - 13);
			ТипРеквизита = Метаданные.Справочники.Номенклатура.Реквизиты[ИмяРеквизитаНоменклатуры].Тип;
			ПутьКДанным  = ИмяРеквизитаНоменклатуры;
			
			СтрокаПараметра.Вставить("ТипРеквизита",ТипРеквизита);
			СтрокаПараметра.Вставить("ДополнительныеЗначенияИспользуются",Ложь); 			
			СтрокаПараметра.Вставить("ЭтоДопРеквизит",	Ложь);
			СтрокаПараметра.Вставить("ЭтоДопСведение",	Ложь);
			
		КонецЕсли;
		
		СтрокаПараметра.Вставить("ИмяПараметра",			Выборка.ИмяПараметра);
		СтрокаПараметра.Вставить("ИмяЭлемента",	 			ИмяЭлемента);
		СтрокаПараметра.Вставить("ПутьКДанным",	 			ПутьКДанным);
		СтрокаПараметра.Вставить("ДанныеПараметраСтрокой",	"");
		
		ПараметрыПравила.Добавить(СтрокаПараметра);
		
	КонецЦикла;
	
	СтруктураПараметровПравила.Вставить("ПараметрыПравилаИменования",ПараметрыПравила);
	
	Возврат СтруктураПараметровПравила;
	
КонецФункции

// Возвращает структуру для поиска позиций номенклатур.
//
// Параметры:
//	Форма - УправляемаяФорма - содержит заполненные параметры именования.
//	ЭтоПоиск - Булево - истина, если вызывается из форм поиска.
//
Функция ПолучитьСтруктуруПоискаНоменклатуры(Форма,ЭтоПоиск = Ложь) Экспорт
	
	МассивРеквизитов	= Новый Массив;
	МассивДопРеквизитов = Новый Массив;
	МассивДопСведений	= Новый Массив;
	РеквизитыЗаполнены	= Истина;
	
	Для Каждого Строка Из Форма.ПараметрыПравилаИменования Цикл
		
		Если Не ЭтоПоиск Тогда
			ИспользоватьВПоиске = Ложь;
		Иначе
			ИспользоватьВПоиске = Строка.ИспользоватьВПоиске;
			Если Не ИспользоватьВПоиске Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Массив = СтрРазделить(Строка.ПутьКДанным,".",Ложь);
		ДанныеЗначение = Форма;
		Для Каждого ЭлементМасс из Массив Цикл
			ДанныеЗначение = ДанныеЗначение[ЭлементМасс];	
		КонецЦикла;
		
		Если (ДанныеЗначение = "" Или ДанныеЗначение = 0) И Строка.ДанныеПараметраСтрокой <> "" Тогда
			ДанныеЗначение = Строка.ДанныеПараметраСтрокой;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеЗначение) Или ИспользоватьВПоиске Тогда 
			Если Строка.ЭтоДопРеквизит Тогда
				Структура = Новый Структура;
				Структура.Вставить("Свойство",Строка.Свойство);
				Структура.Вставить("Значение",ДанныеЗначение);
				МассивДопРеквизитов.Добавить(Структура);				
			ИначеЕсли Строка.ЭтоДопСведение Тогда				
				Структура = Новый Структура;
				Структура.Вставить("Свойство",Строка.Свойство);
				Структура.Вставить("Значение",ДанныеЗначение);
				МассивДопСведений.Добавить(Структура);				
			Иначе	
				Структура = Новый Структура;
				Структура.Вставить("Реквизит",Строка.ПутьКДанным);
				Структура.Вставить("Значение",ДанныеЗначение);
				МассивРеквизитов.Добавить(Структура);
			КонецЕсли;		
		Иначе
			РеквизитыЗаполнены = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("РеквизитыЗаполнены",	РеквизитыЗаполнены);
	СтруктураПоиска.Вставить("МассивРеквизитов",	МассивРеквизитов);
	СтруктураПоиска.Вставить("МассивДопРеквизитов",	МассивДопРеквизитов);
	СтруктураПоиска.Вставить("МассивДопСведений",	МассивДопСведений);
	
	Возврат СтруктураПоиска;

КонецФункции

// Выполняет поиск позиций номенклатуры по заданным правилам и параметрам.
//
// Параметры:
//	СтруктураПоиска - Структура - см. РаботаСПравиламиИменования.ПолучитьСтруктуруПоискаНоменклатуры. 
//	Номенклатура - СправочникСсылка.Номенклатура - позиция номенклатуры, для которой редактируются параметры именования.
//
Функция ПоискНоменклатуры(СтруктураПоиска,Номенклатура = Неопределено) Экспорт
		
	//Отбор по основным реквизитам номенклатуры
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Номенклатура
	               |ПОМЕСТИТЬ ВТ_Номенклатура
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
	               |	И Номенклатура.Ссылка <> &Номенклатура
	               |	И НЕ Номенклатура.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Номенклатура",?(Номенклатура = Неопределено, Справочники.Номенклатура.ПустаяСсылка(), Номенклатура));
	Запрос.УстановитьПараметр("ВидНоменклатуры",СтруктураПоиска.ВидНоменклатуры);
	
	Для Каждого Реквизит Из СтруктураПоиска.МассивРеквизитов Цикл
		ИндексТочка = СтрНайти(Реквизит.Реквизит,".");
		РеквизитСтр = Прав(Реквизит.Реквизит,СтрДлина(Реквизит.Реквизит) - ИндексТочка);
		Запрос.Текст = Запрос.Текст + Символы.ПС + "	И Номенклатура." + РеквизитСтр + " = &" + РеквизитСтр;
		Запрос.УстановитьПараметр(РеквизитСтр,Реквизит.Значение);
	КонецЦикла;
	
	Запрос.Выполнить();
	
	//Отбор по дополнительным значениям номенклатуры
	
	Сч = 0;
	Для Каждого ЭлементМассива Из СтруктураПоиска.МассивДопРеквизитов Цикл
		
		Сч = Сч + 1;
		
		Если ЗначениеЗаполнено(ЭлементМассива.Значение) Тогда	
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МВТ;
			Запрос.Текст = "ВЫБРАТЬ
			               |	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура
			               |ПОМЕСТИТЬ ВТ_ДопРеквизит
			               |ИЗ
			               |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
			               |ГДЕ
			               |	НоменклатураДополнительныеРеквизиты.Свойство = &Свойство
			               |	И НоменклатураДополнительныеРеквизиты.Значение = &Значение
			               |	И НоменклатураДополнительныеРеквизиты.Ссылка.ВидНоменклатуры = &ВидНоменклатуры
						   |
						   |ОБЪЕДИНИТЬ ВСЕ
						   |
						   |ВЫБРАТЬ
			               |	Номенклатура.Ссылка КАК Номенклатура
						   |ИЗ
			               |	Справочник.Номенклатура КАК Номенклатура
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
			               |		ПО Номенклатура.Ссылка = НоменклатураДополнительныеРеквизиты.Ссылка
			               |			И (НоменклатураДополнительныеРеквизиты.Свойство = &Свойство)
			               |ГДЕ
			               |	Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
						   |	И НоменклатураДополнительныеРеквизиты.Значение ЕСТЬ NULL 
			               |	И ЕСТЬNULL(НоменклатураДополнительныеРеквизиты.Значение,&ПустоеЗначение) = &Значение";

			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВТ_ДопРеквизит","ВТ_ДопРеквизит" + Сч);
			Запрос.УстановитьПараметр("Свойство",ЭлементМассива.Свойство);
			Запрос.УстановитьПараметр("Значение",ЭлементМассива.Значение);
			Запрос.УстановитьПараметр("ПустоеЗначение",ЭлементМассива.Свойство.ТипЗначения.ПривестиЗначение());
			Запрос.УстановитьПараметр("ВидНоменклатуры",СтруктураПоиска.ВидНоменклатуры);	
		Иначе
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МВТ;			
			Запрос.Текст = "ВЫБРАТЬ
			               |	Номенклатура.Ссылка КАК Номенклатура
						   |ПОМЕСТИТЬ ВТ_ДопРеквизит
						   |ИЗ
			               |	Справочник.Номенклатура КАК Номенклатура
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
			               |		ПО Номенклатура.Ссылка = НоменклатураДополнительныеРеквизиты.Ссылка
			               |			И (НоменклатураДополнительныеРеквизиты.Свойство = &Свойство)
			               |ГДЕ
			               |	Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
			               |	И НоменклатураДополнительныеРеквизиты.Значение ЕСТЬ NULL";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВТ_ДопРеквизит","ВТ_ДопРеквизит" + Сч);
			Запрос.УстановитьПараметр("Свойство",ЭлементМассива.Свойство);
			Запрос.УстановитьПараметр("ВидНоменклатуры",СтруктураПоиска.ВидНоменклатуры);
		КонецЕсли;
	
		Запрос.Выполнить();
			
	КонецЦикла;
	
	КоличествоДопР = СтруктураПоиска.МассивДопРеквизитов.Количество();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Номенклатура.Номенклатура КАК Номенклатура
				   |ПОМЕСТИТЬ ВТ_Номенклатура_ДопРеквизиты
	               |ИЗ
	               |	ВТ_Номенклатура КАК ВТ_Номенклатура";
	Для Сч = 1 По КоличествоДопР Цикл
		Запрос.Текст = Запрос.Текст + "
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДопРеквизит" + Сч + " КАК ВТ_ДопРеквизит" + Сч + "
	               |		ПО ВТ_Номенклатура.Номенклатура = ВТ_ДопРеквизит" + Сч + ".Номенклатура";
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить();
	
	//Отбор по дополнительным сведениям	
	
	Сч = 0;
	Для Каждого ЭлементМассива Из СтруктураПоиска.МассивДопСведений Цикл
		
		Сч = Сч + 1;
		
		Если ЗначениеЗаполнено(ЭлементМассива.Значение) Тогда
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МВТ;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ДополнительныеСведения.Объект КАК Номенклатура
			               |ПОМЕСТИТЬ ВТ_ДопСведение
			               |ИЗ
			               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			               |ГДЕ
			               |	ДополнительныеСведения.Объект ССЫЛКА Справочник.Номенклатура
			               |	И ДополнительныеСведения.Свойство = &Свойство
			               |	И ДополнительныеСведения.Значение = &Значение
			               |	И ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Номенклатура).ВидНоменклатуры = &ВидНоменклатуры
						   |
						   |ОБЪЕДИНИТЬ ВСЕ
						   |
						   |ВЫБРАТЬ
			               |	Номенклатура.Ссылка КАК Номенклатура
						   |ИЗ
			               |	Справочник.Номенклатура КАК Номенклатура
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			               |		ПО Номенклатура.Ссылка = ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Номенклатура)
			               |			И (ДополнительныеСведения.Свойство = &Свойство)
						   |			И ДополнительныеСведения.Объект ССЫЛКА Справочник.Номенклатура
			               |ГДЕ
			               |	Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
			               |	И ДополнительныеСведения.Значение ЕСТЬ NULL
						   |	И ЕСТЬNULL(ДополнительныеСведения.Значение,&ПустоеЗначение) = &Значение";

			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВТ_ДопСведение","ВТ_ДопСведение" + Сч);
			Запрос.УстановитьПараметр("Свойство",ЭлементМассива.Свойство);
			Запрос.УстановитьПараметр("Значение",ЭлементМассива.Значение);
			Запрос.УстановитьПараметр("ПустоеЗначение",ЭлементМассива.Свойство.ТипЗначения.ПривестиЗначение());
			Запрос.УстановитьПараметр("ВидНоменклатуры",СтруктураПоиска.ВидНоменклатуры);
		Иначе
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МВТ;			
			Запрос.Текст = "ВЫБРАТЬ
			               |	Номенклатура.Ссылка КАК Номенклатура
						   |ПОМЕСТИТЬ ВТ_ДопСведение
						   |ИЗ
			               |	Справочник.Номенклатура КАК Номенклатура
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			               |		ПО Номенклатура.Ссылка = ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Номенклатура)
			               |			И (ДополнительныеСведения.Свойство = &Свойство)
						   |			И ДополнительныеСведения.Объект ССЫЛКА Справочник.Номенклатура
			               |ГДЕ
			               |	Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
			               |	И ДополнительныеСведения.Значение ЕСТЬ NULL";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВТ_ДопСведение","ВТ_ДопСведение" + Сч);
			Запрос.УстановитьПараметр("Свойство",ЭлементМассива.Свойство);
			Запрос.УстановитьПараметр("ВидНоменклатуры",СтруктураПоиска.ВидНоменклатуры);
		КонецЕсли;
		
		Запрос.Выполнить();
		
	КонецЦикла;
	
	КоличествоДопСведений = СтруктураПоиска.МассивДопСведений.Количество();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = "УНИЧТОЖИТЬ ВТ_Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////";
	Для Сч = 1 По КоличествоДопР Цикл
		Запрос.Текст = Запрос.Текст + " 
				   |УНИЧТОЖИТЬ ВТ_ДопРеквизит" + Сч + "
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////";
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + " 
	               |ВЫБРАТЬ
	               |	ВТ_Номенклатура.Номенклатура КАК Номенклатура
	               |ИЗ
	               |	ВТ_Номенклатура_ДопРеквизиты КАК ВТ_Номенклатура";
	
	
	Для Сч = 1 По КоличествоДопСведений Цикл
		Запрос.Текст = Запрос.Текст + "
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДопСведение" + Сч + " КАК ВТ_ДопСведение" + Сч + "
	               |		ПО ВТ_Номенклатура.Номенклатура = ВТ_ДопСведение" + Сч + ".Номенклатура";
		
	КонецЦикла;
		
	Возврат Запрос.Выполнить();
	
КонецФункции

// Добавляет запись в регистр сведений НоменклатураКПереименованию по тем видам номенклатуры, в которых указано данное правило.
//
// Параметры:
//	ПравилоИменования - СправочникСсылка.ПравилаИменованияНоменклатуры - правило, указанное в видах номенклатуры.
//
Процедура ОбработатьВидыНоменклатурыПоПравилуИменования(ПравилоИменования) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПравилоИменования",ПравилоИменования);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыНоменклатуры.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	               |ГДЕ
	               |	ВидыНоменклатуры.ПравилоИменования = &ПравилоИменования
	               |	И НЕ ВидыНоменклатуры.ПометкаУдаления";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДобавитьНоменклатуруКПереименованию(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет запись в регистр сведений НоменклатураКПереименованию.
//
// Параметры:
//	ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - по которому необходимо будет переименовать позиции номенклатуры.
//
Процедура ДобавитьНоменклатуруКПереименованию(ВидНоменклатуры) Экспорт
	
	ПозицияНоменклатуры = Справочники.Номенклатура.НайтиПоРеквизиту("ВидНоменклатуры",ВидНоменклатуры);
	Если ПозицияНоменклатуры.Пустая() Тогда
		Возврат;
	КонецЕсли;
	МЗ = РегистрыСведений.НоменклатураКПереименованию.СоздатьМенеджерЗаписи();
	МЗ.ВидНоменклатуры = ВидНоменклатуры;
	МЗ.Записать();
	
КонецПроцедуры

// Удаляет запись из регистра сведений НоменклатураКПереименованию.
//
// Параметры:
//	ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - по которому необходимо будет переименовать позиции номенклатуры.
//
Процедура УдалитьНоменклатуруКПереименованию(ВидНоменклатуры) Экспорт
	
	МЗ = РегистрыСведений.НоменклатураКПереименованию.СоздатьМенеджерЗаписи();
	МЗ.ВидНоменклатуры = ВидНоменклатуры;
	МЗ.Удалить();
	
КонецПроцедуры

// Заполняет имена элементов плана видов характеристик ДополнительныеРеквизитыИСведения.
//
Процедура ЗаполнитьИменаДополнительныхРеквизитовИСведений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаборРеквизитовИСведений",Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК Свойство,
	               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.Заголовок КАК Заголовок
	               |ИЗ
	               |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	               |ГДЕ
	               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка.Родитель = &НаборРеквизитовИСведений
	               |	И НЕ НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.ПометкаУдаления
	               |	И НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.Имя = """"
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство,
	               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.Заголовок
	               |ИЗ
	               |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
	               |ГДЕ
	               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка.Родитель = &НаборРеквизитовИСведений
	               |	И НЕ НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.ПометкаУдаления
	               |	И НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.Имя = """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИмяЭлемента = "";
		ЗаголовокЭлемента = Выборка.Заголовок;
		РаботаСПравиламиИменованияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениПараметра(ЗаголовокЭлемента, "");
		ЗаголовокЭлементаЧастями = СтрРазделить(ЗаголовокЭлемента, " ", Ложь);
		Для Каждого ЧастьЗаголовка Из ЗаголовокЭлементаЧастями Цикл
			ИмяЭлемента = ИмяЭлемента + ВРег(Лев(ЧастьЗаголовка, 1)) + Сред(ЧастьЗаголовка, 2);
		КонецЦикла;
		
		УИД = Новый УникальныйИдентификатор();
		СтрокаУИД = СтрЗаменить(Строка(УИД), "-", "");
		ИмяЭлемента = ИмяЭлемента + "_" + СтрокаУИД;

		Буквы = "abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя";
		ПервыйСимволБуква = СтрНайти(Буквы,НРег(Лев(ИмяЭлемента,1)));
		Если ПервыйСимволБуква = 0 Тогда
			ИмяЭлемента = "а" + ИмяЭлемента;
		КонецЕсли;

		ЭлементОбъект = Выборка.Свойство.ПолучитьОбъект();
		ЭлементОбъект.Имя = ИмяЭлемента;
		ЭлементОбъект.Записать();
		
	КонецЦикла;

КонецПроцедуры 

// Возвращает значения параметров именования номенклатуры.
//
// Параметры:
//	ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - Вид номенклатуры для выборки данных.
//	ПараметрыПравилаИменования - ДанныеформыКоллекция - содержит таблицу параметров именования. 
//	Номенклатура - СправочникСсылка.Номенклатура - Номенклатура по которой выбираются данные. Если Неопределено, то данные выбираются по всему виду номенклатуры.
//
Функция ПолучитьЗначенияПараметровНоменклатуры(ВидНоменклатуры,ПараметрыПравилаИменования,Номенклатура = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВидНоменклатуры",ВидНоменклатуры);
	Запрос.УстановитьПараметр("Номенклатура",?(Номенклатура = Неопределено,Справочники.Номенклатура.ПустаяСсылка(),Номенклатура));
	Запрос.УстановитьПараметр("ОтборПоНоменклатуре",?(Номенклатура = Неопределено, Ложь, Истина));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСервисРаботаСНоменклатурой") Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	СправочникНоменклатура.Ссылка КАК Номенклатура
		               |ПОМЕСТИТЬ ВТ_Номенклатура
		               |ИЗ
		               |	Справочник.Номенклатура КАК СправочникНоменклатура
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыРаботаСНоменклатурой КАК СоответствиеНоменклатурыРаботаСНоменклатурой
		               |		ПО СправочникНоменклатура.Ссылка = СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура
		               |ГДЕ
		               |	СправочникНоменклатура.ВидНоменклатуры = &ВидНоменклатуры
		               |	И НЕ СправочникНоменклатура.ПометкаУдаления
		               |	И ВЫБОР
		               |			КОГДА &ОтборПоНоменклатуре
		               |				ТОГДА СправочникНоменклатура.Ссылка = &Номенклатура
		               |			ИНАЧЕ ИСТИНА
		               |		КОНЕЦ
		               |	И СоответствиеНоменклатурыРаботаСНоменклатурой.Номенклатура ЕСТЬ NULL
					   |;
					   |
					   |////////////////////////////////////////////////////////////////////////////////";
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
		               |	СправочникНоменклатура.Ссылка КАК Номенклатура
		               |ПОМЕСТИТЬ ВТ_Номенклатура
		               |ИЗ
		               |	Справочник.Номенклатура КАК СправочникНоменклатура
		               |ГДЕ
		               |	СправочникНоменклатура.ВидНоменклатуры = &ВидНоменклатуры
					   |	И НЕ СправочникНоменклатура.ПометкаУдаления
		               |	И ВЫБОР
		               |			КОГДА &ОтборПоНоменклатуре
		               |				ТОГДА СправочникНоменклатура.Ссылка = &Номенклатура
		               |			ИНАЧЕ ИСТИНА
		               |		КОНЕЦ
					   |;
					   |
					   |////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;
	
	Текст_ИтоговаяТаблицаНачало			=	"
											|ВЫБРАТЬ
											|	ВТ_Номенклатура.Номенклатура КАК Номенклатура,
											|	ВТ_Номенклатура.Номенклатура.Наименование КАК НоменклатураНаименование";
	
	Текст_ИтоговаяТаблицаОкончание 		=	"							
											|ИЗ
											|	ВТ_Номенклатура КАК ВТ_Номенклатура";
	
	Текст_УничтожитьВременныеТаблицы	=	"УНИЧТОЖИТЬ ВТ_Номенклатура
											|;
											|
											|////////////////////////////////////////////////////////////////////////////////";
	
	Для Каждого СтрокаПараметр из ПараметрыПравилаИменования Цикл
		
		Если Не (СтрокаПараметр.ЭтоДопРеквизит Или СтрокаПараметр.ЭтоДопСведение) Тогда			
			Текст_ИтоговаяТаблицаНачало	= Текст_ИтоговаяТаблицаНачало + ",
										|	ВТ_Номенклатура.Номенклатура." + СтрокаПараметр.ПутьКДанным + " КАК " + СтрокаПараметр.ИмяЭлемента;		
		Иначе			
			Если СтрокаПараметр.ЭтоДопРеквизит Тогда
				ТекстПараметра	=	"
									|ВЫБРАТЬ
									|	ВТ_Номенклатура.Номенклатура КАК Номенклатура,
									|	ЕСТЬNULL(НоменклатураДополнительныеРеквизиты.Значение,&ПараметрПустоеЗначение) КАК Параметр
									|ПОМЕСТИТЬ ВТ_Параметр	
									|ИЗ
									|	ВТ_Номенклатура КАК ВТ_Номенклатура
									|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
									|	    ПО ВТ_Номенклатура.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка
									|			И НоменклатураДополнительныеРеквизиты.Свойство = &Параметр 
									|;
									|
									|////////////////////////////////////////////////////////////////////////////////";	
			Иначе
				ТекстПараметра	=	"
									|ВЫБРАТЬ
									|	ВТ_Номенклатура.Номенклатура КАК Номенклатура,
									|	ЕСТЬNULL(ДополнительныеСведения.Значение,&ПараметрПустоеЗначение) КАК Параметр
									|ПОМЕСТИТЬ ВТ_Параметр
									|ИЗ
									|	ВТ_Номенклатура КАК ВТ_Номенклатура
									|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
									|	    ПО ВТ_Номенклатура.Номенклатура = ДополнительныеСведения.Объект
									|			И ДополнительныеСведения.Свойство = &Параметр
									|			И ДополнительныеСведения.Объект ССЫЛКА Справочник.Номенклатура
									|;
									|
									|////////////////////////////////////////////////////////////////////////////////";
			КонецЕсли;
			
			Запрос.УстановитьПараметр(СтрокаПараметр.ИмяЭлемента,СтрокаПараметр.Свойство);
			Запрос.УстановитьПараметр(СтрокаПараметр.ИмяЭлемента + "ПустоеЗначение",СтрокаПараметр.Свойство.ТипЗначения.ПривестиЗначение());
			ТекстПараметра	= СтрЗаменить(ТекстПараметра,"Параметр",СтрокаПараметр.ИмяЭлемента);
			ТекстЗапроса	= ТекстЗапроса + ТекстПараметра;
			
			Текст_ИтоговаяТаблицаНачало 		= Текст_ИтоговаяТаблицаНачало + ",
												|	ВТ_" + СтрокаПараметр.ИмяЭлемента + "." + СтрокаПараметр.ИмяЭлемента+ " КАК " + СтрокаПараметр.ИмяЭлемента;
			
			Текст_ИтоговаяТаблицаОкончание		= Текст_ИтоговаяТаблицаОкончание + "
												|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_" + СтрокаПараметр.ИмяЭлемента + " КАК ВТ_" + СтрокаПараметр.ИмяЭлемента + " 
												|	ПО ВТ_Номенклатура.Номенклатура = ВТ_" + СтрокаПараметр.ИмяЭлемента + ".Номенклатура";	
			
			Текст_УничтожитьВременныеТаблицы	=  Текст_УничтожитьВременныеТаблицы + "
												|УНИЧТОЖИТЬ ВТ_" + СтрокаПараметр.ИмяЭлемента + "
												|;
												|
												|////////////////////////////////////////////////////////////////////////////////";
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса =	ТекстЗапроса + 
					Текст_ИтоговаяТаблицаНачало +
					Текст_ИтоговаяТаблицаОкончание;
	
	Запрос.Текст =	ТекстЗапроса;
	Результат	 =  Запрос.Выполнить();
	
	Запрос.Текст = Текст_УничтожитьВременныеТаблицы;
	Запрос.Выполнить();
	
	Возврат Результат;

КонецФункции

// Возвращает значения списков выбора параметров именования номенклатуры. 
//
// Параметры:
//	Форма - УправляемаяФорма - содержит значения параметров поиска и таблицу ПараметрыПравилаИменования.
//	ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - содержит правило именования.
//
Функция ПолучитьСпискиВыбораПараметровПоиска(Форма, ВидНоменклатуры) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
					|	Номенклатура.Ссылка КАК Ссылка
					|ПОМЕСТИТЬ ВТ_Номенклатура
					|ИЗ
					|	Справочник.Номенклатура КАК Номенклатура
					|ГДЕ
					|	Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
					|	И НЕ Номенклатура.ПометкаУдаления
					|;
					|////////////////////////////////////////////////////////////////////////////////";

	ПараметрыЗапроса	= Новый Массив;
	ПараметрыЗапроса.Добавить(Новый Структура("ИмяПараметра,ЗначениеПараметра","ВидНоменклатуры",ВидНоменклатуры));
	
	ВременныеТаблицы = Новый Массив;
	
	Для Каждого СтрокаПараметр из Форма.ПараметрыПравилаИменования Цикл
				
		Если СтрокаПараметр.ЭтоДопРеквизит Тогда
			
			Если Не СтрокаПараметр.ИспользоватьВПоиске Тогда
				Продолжить;
			КонецЕсли;

			ЗначениеЭлемента = Форма[СтрокаПараметр.ПутьКДанным];  
			
			Если ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
				Текст = "
						|ВЫБРАТЬ
						|	НоменклатураДополнительныеРеквизиты.Ссылка КАК Ссылка
						|ПОМЕСТИТЬ ВТ_ИмяПараметра
						|ИЗ
						|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
						|ГДЕ
						|	НоменклатураДополнительныеРеквизиты.Свойство = &ИмяПараметра
						|	И НоменклатураДополнительныеРеквизиты.Значение = &ИмяПараметраЗначение
						|	И НоменклатураДополнительныеРеквизиты.Ссылка.ВидНоменклатуры = &ВидНоменклатуры
						|	И НЕ НоменклатураДополнительныеРеквизиты.Ссылка.ПометкаУдаления
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
			            |	Номенклатура.Ссылка КАК Ссылка
						|ИЗ
			            |	Справочник.Номенклатура КАК Номенклатура
			            |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
			            |		ПО Номенклатура.Ссылка = НоменклатураДополнительныеРеквизиты.Ссылка
			            |			И (НоменклатураДополнительныеРеквизиты.Свойство = &ИмяПараметра)
			            |ГДЕ
			            |	Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
			            |	И НоменклатураДополнительныеРеквизиты.Значение ЕСТЬ NULL
						|	И ЕСТЬNULL(НоменклатураДополнительныеРеквизиты.Значение,&ИмяПараметраПустоеЗначение) = &ИмяПараметраЗначение
						|	И НЕ Номенклатура.ПометкаУдаления
						|
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////";
				
				ПараметрыЗапроса.Добавить(Новый Структура("ИмяПараметра,ЗначениеПараметра",СтрокаПараметр.ПутьКДанным + "ПустоеЗначение",СтрокаПараметр.Свойство.ТипЗначения.ПривестиЗначение()));

			Иначе
				Текст = "
						|ВЫБРАТЬ
			            |	Номенклатура.Ссылка КАК Ссылка
						|ПОМЕСТИТЬ ВТ_ИмяПараметра
						|ИЗ
			            |	Справочник.Номенклатура КАК Номенклатура
			            |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
			            |		ПО Номенклатура.Ссылка = НоменклатураДополнительныеРеквизиты.Ссылка
			            |			И (НоменклатураДополнительныеРеквизиты.Свойство = &ИмяПараметра)
			            |ГДЕ
			            |	Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
			            |	И НоменклатураДополнительныеРеквизиты.Значение ЕСТЬ NULL
						|	И НЕ Номенклатура.ПометкаУдаления
						|
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////";
			КонецЕсли;
			
			Текст = СтрЗаменить(Текст,"ИмяПараметра",СтрокаПараметр.ПутьКДанным);
			ТекстЗапроса = ТекстЗапроса + Текст;
			
			ПараметрыЗапроса.Добавить(Новый Структура("ИмяПараметра,ЗначениеПараметра",СтрокаПараметр.ПутьКДанным + "Значение",ЗначениеЭлемента));

			ВременныеТаблицы.Добавить("ВТ_" + СтрокаПараметр.ПутьКДанным);
	
		ИначеЕсли СтрокаПараметр.ЭтоДопСведение Тогда
			
			Если Не СтрокаПараметр.ИспользоватьВПоиске Тогда
				Продолжить;
			КонецЕсли;

			ЗначениеЭлемента = Форма[СтрокаПараметр.ПутьКДанным];  
			
			Если ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
				Текст =	"
						|ВЫБРАТЬ
						|	ДополнительныеСведения.Объект КАК Ссылка
						|ПОМЕСТИТЬ ВТ_ИмяПараметра
						|ИЗ
						|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
						|ГДЕ
						|	ДополнительныеСведения.Свойство = &ИмяПараметра
						|	И ДополнительныеСведения.Значение = &ИмяПараметраЗначение
						|	И ДополнительныеСведения.Объект ССЫЛКА Справочник.Номенклатура
						|	И ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Номенклатура).ВидНоменклатуры = &ВидНоменклатуры
						|	И НЕ ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Номенклатура).ПометкаУдаления
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
			            |	Номенклатура.Ссылка КАК Ссылка
						|ИЗ
			            |	Справочник.Номенклатура КАК Номенклатура
			            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			            |		ПО Номенклатура.Ссылка = ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Номенклатура)
			            |			И (ДополнительныеСведения.Свойство = &ИмяПараметра)
						|			И ДополнительныеСведения.Объект ССЫЛКА Справочник.Номенклатура
			            |ГДЕ
			            |	Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
			            |	И ДополнительныеСведения.Значение ЕСТЬ NULL
						|	И ЕСТЬNULL(ДополнительныеСведения.Значение,&ИмяПараметраПустоеЗначение) = &ИмяПараметраЗначение
						|	И НЕ Номенклатура.ПометкаУдаления
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////";
				
				ПараметрыЗапроса.Добавить(Новый Структура("ИмяПараметра,ЗначениеПараметра",СтрокаПараметр.ПутьКДанным + "ПустоеЗначение",СтрокаПараметр.Свойство.ТипЗначения.ПривестиЗначение()));
			Иначе
				Текст = "
						|ВЫБРАТЬ
			            |	Номенклатура.Ссылка КАК Ссылка
						|ПОМЕСТИТЬ ВТ_ИмяПараметра
						|ИЗ
			            |	Справочник.Номенклатура КАК Номенклатура
			            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			            |		ПО Номенклатура.Ссылка = ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Номенклатура)
			            |			И (ДополнительныеСведения.Свойство = &ИмяПараметра)
						|			И ДополнительныеСведения.Объект ССЫЛКА Справочник.Номенклатура
			            |ГДЕ
			            |	Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
			            |	И ДополнительныеСведения.Значение ЕСТЬ NULL
						|	И НЕ Номенклатура.ПометкаУдаления
						|
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////";
				
			КонецЕсли;
			
			Текст = СтрЗаменить(Текст,"ИмяПараметра",СтрокаПараметр.ПутьКДанным);
			ТекстЗапроса = ТекстЗапроса + Текст;

			ПараметрыЗапроса.Добавить(Новый Структура("ИмяПараметра,ЗначениеПараметра",СтрокаПараметр.ПутьКДанным + "Значение",ЗначениеЭлемента));
			ВременныеТаблицы.Добавить("ВТ_" + СтрокаПараметр.ПутьКДанным);

		Иначе 			
			
			Если Не СтрокаПараметр.ИспользоватьВПоиске Тогда
				Продолжить;
			КонецЕсли;

			ЗначениеЭлемента = Форма[СтрокаПараметр.ПутьКДанным];
			
			Текст = "
					|ВЫБРАТЬ
					|	Номенклатура.Ссылка КАК Ссылка
					|ПОМЕСТИТЬ ВТ_ИмяПараметра
					|ИЗ
					|	Справочник.Номенклатура КАК Номенклатура
					|ГДЕ
					|	&НоменклатураИмяПараметра = &ИмяПараметра
					|	И Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
					|	И НЕ Номенклатура.ПометкаУдаления
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////";
			
			Текст = СтрЗаменить(Текст,"&НоменклатураИмяПараметра","Номенклатура." + СтрокаПараметр.ПутьКДанным);
			Текст = СтрЗаменить(Текст,"ИмяПараметра",СтрокаПараметр.ПутьКДанным);
			ТекстЗапроса = ТекстЗапроса + Текст;
			
			ПараметрыЗапроса.Добавить(Новый Структура("ИмяПараметра,ЗначениеПараметра",СтрокаПараметр.ПутьКДанным,ЗначениеЭлемента));				
			ВременныеТаблицы.Добавить("ВТ_" + СтрокаПараметр.ПутьКДанным);
			
		КонецЕсли;

	КонецЦикла;
	
	ТекстИтоговойВыборки = "";
	Для Каждого СтрокаПараметр Из Форма.ПараметрыПравилаИменования Цикл
		
		Если СтрокаПараметр.ЭтоДопРеквизит Тогда
			
			Текст =  "
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	НоменклатураДополнительныеРеквизиты.Значение КАК ЗначениеПараметра
					|ИЗ
					|	ВТ_Номенклатура КАК ВТ_Номенклатура
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
					|		ПО ВТ_Номенклатура.Ссылка = НоменклатураДополнительныеРеквизиты.Ссылка";
			
			Для Каждого ЭлементВТ Из ВременныеТаблицы Цикл
				Если ЭлементВТ = "ВТ_" + СтрокаПараметр.ПутьКДанным Тогда
					Продолжить;
				КонецЕсли;
				ТекстВТ =	"		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
							|		ПО ВТ_Номенклатура.Ссылка = ВременнаяТаблица.Ссылка";
				ТекстВТ =	СтрЗаменить(ТекстВТ,"ВременнаяТаблица",ЭлементВТ);
				
				Текст	=	Текст + ТекстВТ;
			КонецЦикла;
			
			Текст = Текст + "
							|ГДЕ
							|	НоменклатураДополнительныеРеквизиты.Свойство = &ИмяПараметра
							|	И НоменклатураДополнительныеРеквизиты.Ссылка.ВидНоменклатуры = &ВидНоменклатуры";
			
			Текст = Текст + "
							|
							|ОБЪЕДИНИТЬ
							|
							|ВЫБРАТЬ ПЕРВЫЕ 1
							|	&ИмяПараметраПустоеЗначение
							|ИЗ
							|	ВТ_Номенклатура КАК ВТ_Номенклатура
							|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
							|		ПО ВТ_Номенклатура.Ссылка = НоменклатураДополнительныеРеквизиты.Ссылка
							|			И НоменклатураДополнительныеРеквизиты.Свойство = &ИмяПараметра";
						
			Для Каждого ЭлементВТ Из ВременныеТаблицы Цикл
				Если ЭлементВТ = "ВТ_" + СтрокаПараметр.ПутьКДанным Тогда
					Продолжить;
				КонецЕсли;
				ТекстВТ =	"		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
							|		ПО ВТ_Номенклатура.Ссылка = ВременнаяТаблица.Ссылка";
				ТекстВТ =	СтрЗаменить(ТекстВТ,"ВременнаяТаблица",ЭлементВТ);
				
				Текст	=	Текст + ТекстВТ;
			КонецЦикла;

			Текст = Текст + "
							|ГДЕ
							|	НоменклатураДополнительныеРеквизиты.Значение ЕСТЬ NULL";

			Текст = Текст + "
							|;
							|
							|////////////////////////////////////////////////////////////////////////////////";
						
			Текст = СтрЗаменить(Текст,"ИмяПараметра",СтрокаПараметр.ПутьКДанным);
			
			ТекстИтоговойВыборки = ТекстИтоговойВыборки + Текст;
			
			ПараметрыЗапроса.Добавить(Новый Структура("ИмяПараметра,ЗначениеПараметра",СтрокаПараметр.ПутьКДанным,СтрокаПараметр.Свойство));
			ПараметрыЗапроса.Добавить(Новый Структура("ИмяПараметра,ЗначениеПараметра",СтрокаПараметр.ПутьКДанным + "ПустоеЗначение",СтрокаПараметр.Свойство.ТипЗначения.ПривестиЗначение()));

		ИначеЕсли СтрокаПараметр.ЭтоДопСведение Тогда
			
			Текст =  "
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ДополнительныеСведения.Значение КАК ЗначениеПараметра
					|ИЗ
					|	ВТ_Номенклатура КАК ВТ_Номенклатура
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ПО ВТ_Номенклатура.Ссылка = ДополнительныеСведения.Объект";
			
			Для Каждого ЭлементВТ Из ВременныеТаблицы Цикл
				Если ЭлементВТ = "ВТ_" + СтрокаПараметр.ПутьКДанным Тогда
					Продолжить;
				КонецЕсли;
				ТекстВТ =	"		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
							|		ПО ВТ_Номенклатура.Ссылка = ВременнаяТаблица.Ссылка";
				ТекстВТ =	СтрЗаменить(ТекстВТ,"ВременнаяТаблица",ЭлементВТ);
				
				Текст	=	Текст + ТекстВТ;
			КонецЦикла;
			
			Текст = Текст + "
							|ГДЕ
							|	ДополнительныеСведения.Свойство = &ИмяПараметра
							|	И ДополнительныеСведения.Объект ССЫЛКА Справочник.Номенклатура
							|	И ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Номенклатура).ВидНоменклатуры = &ВидНоменклатуры
							|	И НЕ ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Номенклатура).ПометкаУдаления";
			
			Текст = Текст + "
							|
							|ОБЪЕДИНИТЬ
							|
							|ВЫБРАТЬ ПЕРВЫЕ 1
							|	&ИмяПараметраПустоеЗначение
							|ИЗ
							|	ВТ_Номенклатура КАК ВТ_Номенклатура
							|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
							|		ПО ВТ_Номенклатура.Ссылка = ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.Номенклатура)
							|			И ДополнительныеСведения.Свойство = &ИмяПараметра
							|			И ДополнительныеСведения.Объект ССЫЛКА Справочник.Номенклатура";
			
						
			Для Каждого ЭлементВТ Из ВременныеТаблицы Цикл
				Если ЭлементВТ = "ВТ_" + СтрокаПараметр.ПутьКДанным Тогда
					Продолжить;
				КонецЕсли;
				ТекстВТ =	"		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
							|		ПО ВТ_Номенклатура.Ссылка = ВременнаяТаблица.Ссылка";
				ТекстВТ =	СтрЗаменить(ТекстВТ,"ВременнаяТаблица",ЭлементВТ);
				
				Текст	=	Текст + ТекстВТ;
			КонецЦикла;

			Текст = Текст + "
							|ГДЕ
							|	ДополнительныеСведения.Значение ЕСТЬ NULL";

			Текст = Текст + "
							|;
							|
							|////////////////////////////////////////////////////////////////////////////////";
			
			Текст = СтрЗаменить(Текст,"ИмяПараметра",СтрокаПараметр.ПутьКДанным);
			
			ТекстИтоговойВыборки = ТекстИтоговойВыборки + Текст;
			
			ПараметрыЗапроса.Добавить(Новый Структура("ИмяПараметра,ЗначениеПараметра",СтрокаПараметр.ПутьКДанным,СтрокаПараметр.Свойство));
			ПараметрыЗапроса.Добавить(Новый Структура("ИмяПараметра,ЗначениеПараметра",СтрокаПараметр.ПутьКДанным + "ПустоеЗначение",СтрокаПараметр.Свойство.ТипЗначения.ПривестиЗначение()));

		Иначе			
			Текст =  "
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	&НоменклатураИмяПараметра КАК ЗначениеПараметра
					|ИЗ
					|	ВТ_Номенклатура КАК ВТ_Номенклатура";
			
			Для Каждого ЭлементВТ Из ВременныеТаблицы Цикл
				Если ЭлементВТ = "ВТ_" + СтрокаПараметр.ПутьКДанным Тогда
					Продолжить;
				КонецЕсли;
				ТекстВТ =	"		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
							|		ПО ВТ_Номенклатура.Ссылка = ВременнаяТаблица.Ссылка";
				ТекстВТ =	СтрЗаменить(ТекстВТ,"ВременнаяТаблица",ЭлементВТ);
				
				Текст	=	Текст + ТекстВТ;
			КонецЦикла;
			
			
			Текст = Текст + "
							|;
							|
							|////////////////////////////////////////////////////////////////////////////////";
			
			Текст = СтрЗаменить(Текст,"&НоменклатураИмяПараметра","ВТ_Номенклатура.Ссылка." + СтрокаПараметр.ПутьКДанным);
			
			ТекстИтоговойВыборки = ТекстИтоговойВыборки + Текст;

		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса + ТекстИтоговойВыборки;
	
	Для Каждого ПараметрЗапроса из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.ИмяПараметра,ПараметрЗапроса.ЗначениеПараметра);
	КонецЦикла;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТекстЗапроса =	"УНИЧТОЖИТЬ ВТ_Номенклатура
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////";
	
	Для Каждого ЭлементВТ из ВременныеТаблицы Цикл
		ТекстЗапроса = ТекстЗапроса +	"
										|УНИЧТОЖИТЬ " + ЭлементВТ + "
										|;
										|
										|////////////////////////////////////////////////////////////////////////////////";
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();

	Возврат Результат;
	
КонецФункции

// Заполняет таблицу остатков и цен товаров.
//
// Параметры:
//	ОстаткиТоваров - ДанныеФормыКоллекция - таблица, которую необходимо заполнить.
//	Номенклатура - СправочникСсылка.Номенклатура - позиция номенклатуры, по которой заполняется таблица ОстаткиТоваров.
//	Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика, по которой заполняется таблица ОстаткиТоваров.
//	Магазин - СправочникСсылка.Магазины - Магазин, по которому определяются настройки.
//	ВыводитьТолькоВНаличии - Булево - заполнять таблицу только теми строками, в которых количество не равно нулю.
//
Процедура ЗаполнитьОстаткиИЦены(ОстаткиТоваров, Номенклатура, Характеристика, Магазин, ВыводитьТолькоВНаличии = Ложь) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
		
	ОстаткиТоваров.Очистить();
	
	РеквизитыНоменклатуры = РеквизитыНоменклатуры(Номенклатура);
	Если РеквизитыНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Магазин);
	ЦеныВАссортименте = ИспользоватьАссортимент И ПолучитьФункциональнуюОпцию("УстанавливатьВидыЦенВАссортименте");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЦеныВАссортименте", ЦеныВАссортименте);
	Запрос.УстановитьПараметр("Период", Дата('00010101'));
	Запрос.УстановитьПараметр("ПериодАссортимента", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ЦеноваяГруппа", РеквизитыНоменклатуры.ЦеноваяГруппа);
	Запрос.УстановитьПараметр("Номинал", РеквизитыНоменклатуры.Номинал);
	Запрос.УстановитьПараметр("Характеристика",Характеристика);
		
	Если РеквизитыНоменклатуры.ЭтоПодарочныйСертификат Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Магазины.Ссылка КАК Магазин,
			|	&Номинал КАК Цена
			|ПОМЕСТИТЬ ТаблицаЦенПоМагазинам
			|ИЗ
			|	Справочник.Магазины КАК Магазины
			|ГДЕ
			|	НЕ Магазины.СкладУправляющейСистемы";
			
	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Магазины.Ссылка КАК Магазин,
			|	Магазины.ПравилоЦенообразования КАК ПравилоЦенообразования
			|ПОМЕСТИТЬ ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования
			|ИЗ
			|	Справочник.Магазины КАК Магазины
			|ГДЕ
			|	НЕ(Магазины.КонтролироватьАссортимент
			|				И &ЦеныВАссортименте)
			|	И НЕ Магазины.ИспользоватьПрименениеЦен
			|	И НЕ Магазины.СкладУправляющейСистемы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПравилаЦенообразования.Ссылка КАК ПравилоЦенообразования,
			|	ЕСТЬNULL(УточненияПоЦеновымГруппам.ВидЦен, ПравилаЦенообразования.ВидЦен) КАК ВидЦен
			|ПОМЕСТИТЬ ТаблицаПравилЦенообразованияИВидовЦен
			|ИЗ
			|	Справочник.ПравилаЦенообразования КАК ПравилаЦенообразования
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ПравилаЦенообразованияЦеновыеГруппы.Ссылка КАК ПравилоЦенообразования,
			|			ПравилаЦенообразованияЦеновыеГруппы.ВидЦен КАК ВидЦен
			|		ИЗ
			|			Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ПравилаЦенообразованияЦеновыеГруппы
			|		ГДЕ
			|			ПравилаЦенообразованияЦеновыеГруппы.ЦеноваяГруппа = &ЦеноваяГруппа) КАК УточненияПоЦеновымГруппам
			|		ПО (УточненияПоЦеновымГруппам.ПравилоЦенообразования = ПравилаЦенообразования.Ссылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования.Магазин,
			|	ТаблицаПравилЦенообразованияИВидовЦен.ВидЦен
			|ПОМЕСТИТЬ ТаблицаМагазиновЦеныНоменклатуры
			|ИЗ
			|	ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования КАК ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПравилЦенообразованияИВидовЦен КАК ТаблицаПравилЦенообразованияИВидовЦен
			|		ПО ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования.ПравилоЦенообразования = ТаблицаПравилЦенообразованияИВидовЦен.ПравилоЦенообразования
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Магазины.ФорматМагазина КАК ФорматМагазина,
			|	Магазины.Ссылка КАК Магазин
			|ПОМЕСТИТЬ ТаблицаМагазиновЦеныПоАссортименту
			|ИЗ
			|	Справочник.Магазины КАК Магазины
			|ГДЕ
			|	Магазины.КонтролироватьАссортимент
			|	И &ЦеныВАссортименте
			|	И НЕ Магазины.ИспользоватьПрименениеЦен
			|	И НЕ Магазины.СкладУправляющейСистемы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Магазины.Магазин КАК Магазин,
			|	Ассортимент.ВидЦен КАК ВидЦен
			|ПОМЕСТИТЬ втАссортимент
			|ИЗ
			|	РегистрСведений.Ассортимент.СрезПоследних(
			|			КОНЕЦПЕРИОДА(&ПериодАссортимента, ДЕНЬ),
			|			Номенклатура = &Номенклатура
			|				И ОбъектПланирования В
			|					(ВЫБРАТЬ
			|						Т.ФорматМагазина
			|					ИЗ
			|						ТаблицаМагазиновЦеныПоАссортименту КАК Т)) КАК Ассортимент
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновЦеныПоАссортименту КАК Магазины
			|		ПО (Магазины.ФорматМагазина = Ассортимент.ОбъектПланирования)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ВидЦен,
			|	Магазин
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Магазины.Ссылка КАК Магазин
			|ПОМЕСТИТЬ ТаблицаМагазиновДействующиеЦены
			|ИЗ
			|	Справочник.Магазины КАК Магазины
			|ГДЕ
			|	Магазины.ИспользоватьПрименениеЦен
			|	И НЕ Магазины.СкладУправляющейСистемы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Магазины.Ссылка КАК Магазин,
			|	Магазины.ВидМинимальныхЦенПродажи КАК ВидМинимальныхЦенПродажи
			|ПОМЕСТИТЬ ТаблицаМагазиновСМинимальнымиЦенами
			|ИЗ
			|	Справочник.Магазины КАК Магазины
			|ГДЕ
			|	НЕ Магазины.ВидМинимальныхЦенПродажи = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
			|	И НЕ Магазины.СкладУправляющейСистемы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаМагазиновЦеныНоменклатуры.Магазин,
			|	ТаблицаМагазиновЦеныНоменклатуры.ВидЦен
			|ПОМЕСТИТЬ ТаблицаМагазиновПоВидамЦен
			|ИЗ
			|	ТаблицаМагазиновЦеныНоменклатуры КАК ТаблицаМагазиновЦеныНоменклатуры
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	втАссортимент.Магазин,
			|	втАссортимент.ВидЦен
			|ИЗ
			|	втАссортимент КАК втАссортимент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.ВидЦены,
			|	ВложенныйЗапрос.Номенклатура,
			|	ВложенныйЗапрос.Характеристика,
			|	ВложенныйЗапрос.Цена,
			|	ВложенныйЗапрос.Упаковка
			|ПОМЕСТИТЬ ТаблицаЦенПоВидамЦен
			|ИЗ
			|	(ВЫБРАТЬ
			|		ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
			|		ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
			|		ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
			|		ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
			|		ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка
			|	ИЗ
			|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|				&Период,
			|				Номенклатура = &Номенклатура
			|					И Характеристика = &Характеристика
			|					И ВидЦены В
			|						(ВЫБРАТЬ
			|							ТаблицаМагазиновПоВидамЦен.ВидЦен КАК ВидЦены
			|						ИЗ
			|							ТаблицаМагазиновПоВидамЦен КАК ТаблицаМагазиновПоВидамЦен)) КАК ЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Цена,
			|	ВложенныйЗапрос.Магазин,
			|	ВложенныйЗапрос.Упаковка
			|ПОМЕСТИТЬ ЦеныБезПриведенияКУпаковке
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТаблицаЦенПоВидамЦен.Цена КАК Цена,
			|		ТаблицаМагазиновПоВидамЦен.Магазин КАК Магазин,
			|		ТаблицаЦенПоВидамЦен.Упаковка КАК Упаковка
			|	ИЗ
			|		ТаблицаЦенПоВидамЦен КАК ТаблицаЦенПоВидамЦен
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновПоВидамЦен КАК ТаблицаМагазиновПоВидамЦен
			|			ПО ТаблицаЦенПоВидамЦен.ВидЦены = ТаблицаМагазиновПоВидамЦен.ВидЦен) КАК ВложенныйЗапрос
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.Цена,
			|	ВложенныйЗапрос.Магазин,
			|	ВложенныйЗапрос.Упаковка
			|ИЗ
			|	(ВЫБРАТЬ
			|		ДействующиеЦеныНоменклатурыСрезПоследних.ОбъектЦенообразования КАК Магазин,
			|		ДействующиеЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
			|		ДействующиеЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка
			|	ИЗ
			|		РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
			|				&Период,
			|				Номенклатура = &Номенклатура
			|					И Характеристика = &Характеристика
			|					И ОбъектЦенообразования В
			|						(ВЫБРАТЬ
			|							ТаблицаМагазинов.Магазин
			|						ИЗ
			|							ТаблицаМагазиновДействующиеЦены КАК ТаблицаМагазинов)) КАК ДействующиеЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЦеныБезПриведенияКУпаковке.Магазин,
			|	ЦеныБезПриведенияКУпаковке.Цена / ВЫБОР
			|		КОГДА ЦеныБезПриведенияКУпаковке.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА 1
			|		КОГДА ЦеныБезПриведенияКУпаковке.Упаковка.Коэффициент = 0
			|			ТОГДА 1
			|		ИНАЧЕ ЦеныБезПриведенияКУпаковке.Упаковка.Коэффициент
			|	КОНЕЦ КАК Цена
			|ПОМЕСТИТЬ ЦеныБезПриведенияКМинимальнымВидамЦен
			|ИЗ
			|	ЦеныБезПриведенияКУпаковке КАК ЦеныБезПриведенияКУпаковке
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Цена / ВЫБОР
			|		КОГДА ВложенныйЗапрос.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА 1
			|		КОГДА ВложенныйЗапрос.Упаковка.Коэффициент = 0
			|			ТОГДА 1
			|		ИНАЧЕ ВложенныйЗапрос.Упаковка.Коэффициент
			|	КОНЕЦ КАК Цена,
			|	ТаблицаМагазиновСМинимальнымиЦенами.Магазин
			|ПОМЕСТИТЬ ТаблицаЦенПоМинимальнымВидамЦен
			|ИЗ
			|	(ВЫБРАТЬ
			|		ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
			|		ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
			|		ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка
			|	ИЗ
			|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|				&Период,
			|				Номенклатура = &Номенклатура
			|					И Характеристика = &Характеристика
			|					И ВидЦены В
			|						(ВЫБРАТЬ
			|							ТаблицаМагазиновСМинимальнымиЦенами.ВидМинимальныхЦенПродажи КАК ВидЦены
			|						ИЗ
			|							ТаблицаМагазиновСМинимальнымиЦенами КАК ТаблицаМагазиновСМинимальнымиЦенами)) КАК ЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновСМинимальнымиЦенами КАК ТаблицаМагазиновСМинимальнымиЦенами
			|		ПО ВложенныйЗапрос.ВидЦены = ТаблицаМагазиновСМинимальнымиЦенами.ВидМинимальныхЦенПродажи
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЦеныБезПриведенияКМинимальнымВидамЦен.Магазин,
			|	ВЫБОР
			|		КОГДА ТаблицаЦенПоМинимальнымВидамЦен.Цена ЕСТЬ NULL 
			|			ТОГДА ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ЕСТЬNULL(ТаблицаЦенПоМинимальнымВидамЦен.Цена, 0) > ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
			|					ТОГДА ЕСТЬNULL(ТаблицаЦенПоМинимальнымВидамЦен.Цена, 0)
			|				ИНАЧЕ ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
			|			КОНЕЦ
			|	КОНЕЦ КАК Цена
			|ПОМЕСТИТЬ ТаблицаЦенПоМагазинам
			|ИЗ
			|	ЦеныБезПриведенияКМинимальнымВидамЦен КАК ЦеныБезПриведенияКМинимальнымВидамЦен
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦенПоМинимальнымВидамЦен КАК ТаблицаЦенПоМинимальнымВидамЦен
			|		ПО ЦеныБезПриведенияКМинимальнымВидамЦен.Магазин = ТаблицаЦенПоМинимальнымВидамЦен.Магазин";
		
	КонецЕсли;
		
	Запрос.Текст = Запрос.Текст + "
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТоварыНаСкладахОстатки.Склад.Магазин КАК Магазин,
			|	ТоварыНаСкладахОстатки.Склад,
			|	ТоварыНаСкладахОстатки.КоличествоОстаток,
			|	ТоварыНаСкладахОстатки.РезервОстаток,
			|	ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыНаСкладахОстатки.РезервОстаток КАК СвободныйОстаток
			|ПОМЕСТИТЬ ТаблицаОстаткиНоменклатуры
			|ИЗ
			|	РегистрНакопления.ТоварыНаСкладах.Остатки(
			|			&Период,
			|			Номенклатура = &Номенклатура
			|				И (Характеристика = &Характеристика
			|					ИЛИ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))) КАК ТоварыНаСкладахОстатки
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(ТаблицаОстаткиНоменклатуры.Магазин, ТаблицаЦенПоМагазинам.Магазин) КАК Магазин,
			|	ЕСТЬNULL(ТаблицаОстаткиНоменклатуры.Склад, Значение(Справочник.Склады.ПустаяСсылка)) КАК МестоХранения,
			|	ЕСТЬNULL(ТаблицаОстаткиНоменклатуры.КоличествоОстаток, 0) КАК Количество,
			|	ЕСТЬNULL(ТаблицаОстаткиНоменклатуры.РезервОстаток, 0) КАК Резерв,
			|	ЕСТЬNULL(ТаблицаОстаткиНоменклатуры.СвободныйОстаток, 0) КАК ВНаличии,
			|	ЕСТЬNULL(ТаблицаЦенПоМагазинам.Цена, 0) КАК Цена
			|ИЗ
			|	ТаблицаОстаткиНоменклатуры КАК ТаблицаОстаткиНоменклатуры
			|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаЦенПоМагазинам КАК ТаблицаЦенПоМагазинам
			|		ПО ТаблицаОстаткиНоменклатуры.Магазин = ТаблицаЦенПоМагазинам.Магазин
			|ИТОГИ
			|	СУММА(Количество),
			|	СУММА(Резерв),
			|	СУММА(ВНаличии),
			|	МАКСИМУМ(Цена)
			|ПО
			|	Магазин";
				
	Результат = Запрос.Выполнить();
	
	ВыборкаПоМагазинам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоМагазинам.Следующий() Цикл
		
		Если ВыводитьТолькоВНаличии и ВыборкаПоМагазинам.ВНаличии = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы = ОстаткиТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаПоМагазинам);
		СтрокаТаблицы.МестоХранения = ВыборкаПоМагазинам.Магазин;
		СтрокаТаблицы.ЭтоМагазин = Истина;
		Выборка = ВыборкаПоМагазинам.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.МестоХранения)  Тогда
				Если ВыводитьТолькоВНаличии и Выборка.ВНаличии = 0 Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТаблицы = ОстаткиТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено 
		И ПараметрыСеанса.ИспользуемыеПланыОбмена.Найти("ПоМагазину") <> Неопределено
		И ПланыОбмена.ПоМагазину.ЭтотУзел().Магазины.Количество() <> 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
						"ВЫБРАТЬ
						|	ИнформативныеОстаткиТоваровПоМагазинам.Магазин КАК МестоХранения,
						|	СУММА(ИнформативныеОстаткиТоваровПоМагазинам.Количество) КАК Количество,
						|	СУММА(ИнформативныеОстаткиТоваровПоМагазинам.Резерв) КАК Резерв,
						|	СУММА(ИнформативныеОстаткиТоваровПоМагазинам.Количество - ИнформативныеОстаткиТоваровПоМагазинам.Резерв) КАК ВНаличии
						|ИЗ
						|	РегистрСведений.ИнформативныеОстаткиТоваровПоМагазинам КАК ИнформативныеОстаткиТоваровПоМагазинам
						|ГДЕ
						|	ИнформативныеОстаткиТоваровПоМагазинам.Номенклатура = &Номенклатура
						|	И ИнформативныеОстаткиТоваровПоМагазинам.Магазин В
						|			(ВЫБРАТЬ
						|				Магазины.Ссылка
						|			ИЗ
						|				Справочник.Магазины КАК Магазины
						|			ГДЕ
						|				НЕ Магазины.Ссылка В
						|						(ВЫБРАТЬ
						|							ПланОбменаПоМагазинуМагазины.Магазин
						|						ИЗ
						|							ПланОбмена.ПоМагазину.Магазины КАК ПланОбменаПоМагазинуМагазины
						|						ГДЕ
						|							ПланОбменаПоМагазинуМагазины.Ссылка = &Узел))
						|
						|СГРУППИРОВАТЬ ПО
						|	ИнформативныеОстаткиТоваровПоМагазинам.Магазин";
		
		Запрос.УстановитьПараметр("Номенклатура"  , Номенклатура);
		Запрос.УстановитьПараметр("Узел"          , ПланыОбмена.ПоМагазину.ЭтотУзел());
		
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ВыводитьТолькоВНаличии и Выборка.ВНаличии = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы = ОстаткиТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
			
		КонецЦикла;
		
	ИначеЕсли ПланыОбмена.ГлавныйУзел() <> Неопределено 
		И ПланыОбмена.ПоРабочемуМесту.ЭтоРабочееМесто() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
					"ВЫБРАТЬ
					|	ИнформативныеОстаткиТоваровПоСкладам.Склад КАК МестоХранения,
					|	СУММА(ИнформативныеОстаткиТоваровПоСкладам.Количество) КАК Количество,
					|	СУММА(ИнформативныеОстаткиТоваровПоСкладам.Резерв) КАК Резерв,
					|	СУММА(ИнформативныеОстаткиТоваровПоСкладам.Количество - ИнформативныеОстаткиТоваровПоСкладам.Резерв) КАК ВНаличии
					|ИЗ
					|	РегистрСведений.ИнформативныеОстаткиТоваровПоСкладам КАК ИнформативныеОстаткиТоваровПоСкладам
					|ГДЕ
					|	ИнформативныеОстаткиТоваровПоСкладам.Номенклатура = &Номенклатура
					|
					|СГРУППИРОВАТЬ ПО
					|	ИнформативныеОстаткиТоваровПоСкладам.Склад";
		
		Запрос.УстановитьПараметр("Номенклатура"  , Номенклатура);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ВыводитьТолькоВНаличии и Выборка.ВНаличии = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы = ОстаткиТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
			
		КонецЦикла;
		
	КонецЕсли
		
КонецПроцедуры

// Заполняет таблицу характеристик номенклатуры.
//
// Параметры:
//	ТаблицаХарактеристик - ДанныеФормыКоллекция - таблица, которую необходимо заполнить.
//	Номенклатура - СправочникСсылка.Номенклатура - позиция номенклатуры, по которой заполняется таблица ТаблицаХарактеристик.
//
Процедура ЗаполнитьТаблицуХарактеристикНоменклатуры(ТаблицаХарактеристик, Номенклатура) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СправочникХарактеристики.Ссылка КАК Характеристика
	               |ИЗ
	               |	Справочник.Номенклатура КАК СправочникНоменклатура
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СправочникХарактеристики
	               |		ПО (СправочникХарактеристики.Владелец = СправочникНоменклатура.Ссылка
	               |				ИЛИ СправочникХарактеристики.Владелец = СправочникНоменклатура.ВидНоменклатуры)
	               |ГДЕ
	               |	СправочникНоменклатура.Ссылка = &Номенклатура
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СправочникХарактеристики.Наименование";
	
	Результат = Запрос.Выполнить();
	ТаблицаХарактеристик.Загрузить(Результат.Выгрузить());

КонецПроцедуры

// Выполняет изменения в правилах именования, если в ПВХ изменилось имя для разработчиков.
//
// Параметры:
//	Источник - ПланВидовХарактеристикОбъект.ДополнительныеРеквизитыИСведения
//	Отказ - Булево
//
Процедура ДополнительныеРеквизитыИСведенияПередЗаписью(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяПредыдущее = Источник.Ссылка.Имя;
	ИмяТекущее = Источник.Имя;
	Если ИмяТекущее <> ИмяПредыдущее Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИмяПараметра",ИмяПредыдущее);
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПравилаИменованияНоменклатурыПараметрыПравила.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПравилаИменованияНоменклатуры.ПараметрыПравила КАК ПравилаИменованияНоменклатурыПараметрыПравила
		|ГДЕ
		|	ПравилаИменованияНоменклатурыПараметрыПравила.ПутьКДанным = &ИмяПараметра";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Правило = СпрОбъект.Правило;
			МассивСтрокПараметр = СпрОбъект.ПараметрыПравила.НайтиСтроки(Новый Структура("ПутьКДанным",ИмяПредыдущее));
			Для Каждого Строка Из МассивСтрокПараметр Цикл
				Правило = СтрЗаменить(Правило,"[" + Строка.ИмяПараметра + "]","[" + Источник.Заголовок + "]");
				Строка.ИмяПараметра = Источник.Заголовок;
				Строка.ПутьКДанным = ИмяТекущее;
			КонецЦикла;
			СпрОбъект.Правило = Правило;
			СпрОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
			
КонецПроцедуры

// Обновляет правила именования с учетом нового набора свойств.
//
// Параметры:
//	НаборСвойствДляОбновления - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - набор свойств для тиражирования в существующие правила именования.
//
Процедура ОбновитьПравилаИменованияПоНаборуСвойств(НаборСвойствДляОбновления) Экспорт
	
	НаборыСвойств = Новый СписокЗначений;
	ЗаполнитьНаборыСвойств(НаборыСвойств);
	
	ТаблицаДоступныхПараметров = ПолучитьДоступныеПараметры();
	
	Выборка = Справочники.ПравилаИменованияНоменклатуры.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.НаборыСвойств.Найти(НаборСвойствДляОбновления,"Набор") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатПроверкиПравила = ПроверитьИспользованиеПравилаИменования(Выборка,ТаблицаДоступныхПараметров);
		Если РезультатПроверкиПравила.ЕстьОшибки Тогда
			Продолжить;
		КонецЕсли;
		
		НаборыСвойствТекущий = Новый СписокЗначений;
		НаборыСвойствТекущий.ЗагрузитьЗначения(НаборыСвойств.ВыгрузитьЗначения());
		
		Для Каждого СтрокаПараметр Из Выборка.ПараметрыПравила Цикл	
			МассивСтрок = ТаблицаДоступныхПараметров.НайтиСтроки(Новый Структура("ПутьКДанным",СтрокаПараметр.ПутьКДанным));
			Если МассивСтрок.Количество() > 0 Тогда
				Если ЗначениеЗаполнено(МассивСтрок[0].НаборСвойств) Тогда
					РаботаСПравиламиИменованияКлиентСервер.ОбновитьНаборыСвойств(СтрокаПараметр.ПутьКДанным,НаборыСвойствТекущий,ТаблицаДоступныхПараметров);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НаборыСвойствТекущий.НайтиПоЗначению(НаборСвойствДляОбновления) <> Неопределено Тогда
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СтрокаНабор = СпрОбъект.НаборыСвойств.Добавить();
			СтрокаНабор.Набор = НаборСвойствДляОбновления;			
			СпрОбъект.НаборыСвойств.Сортировать("Набор Возр");			
			СпрОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Проверяет заполненную структуру правила именования на сервере.
//
// Параметры:
//	СтруктураПравила - Структура - см. РаботаСПравиламиИменованияКлиентСервер.ПолучитьПустуюСтруктуруПравилаИменования	
//
Процедура ПроверитьСтруктуруПравилаИменованияСервер(СтруктураПравила) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") И СтруктураПравила.НаборыСвойств.Количество() = 0 Тогда
		Для Каждого Параметр Из СтруктураПравила.ПараметрыПравила Цикл
			Если СтруктураПравила.ЕстьОшибки Тогда
				Прервать;
			КонецЕсли;
			СтруктураПоиска = Новый Структура("ПутьКДанным",Параметр.ПутьКДанным);
			СтрокиДоступныхПараметров = СтруктураПравила.ТаблицаДоступныхПараметров.НайтиСтроки(СтруктураПоиска);
			Если СтрокиДоступныхПараметров.Количество() > 0 Тогда
				Для Каждого СтрокаТаблицы из СтрокиДоступныхПараметров Цикл
					Если ЗначениеЗаполнено(СтрокаТаблицы.НаборСвойств) Тогда
						СтруктураПравила.ЕстьОшибки = Истина;
						ТекстОшибки = НСтр("ru = 'Пути к данным, по которым строится правило именования, принадлежат разным наборам свойств;'");	
						СтруктураПравила.ОписаниеОшибок.Добавить(ТекстОшибки);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе 
		ТаблицаПроверка = Новый ТаблицаЗначений;
		ТаблицаПроверка.Колонки.Добавить("ПутьКДанным");
		ТаблицаПроверка.Колонки.Добавить("ЧислоВхождений");
		Для Каждого СтрокаПараметр Из СтруктураПравила.ПараметрыПравила Цикл
			СтрокаПроверка = ТаблицаПроверка.Добавить();
			СтрокаПроверка.ПутьКДанным = СтрокаПараметр.ПутьКДанным;
			СтрокаПроверка.ЧислоВхождений = 1;
		КонецЦикла;
		ТаблицаПроверка.Свернуть("ПутьКДанным","ЧислоВхождений");
		ТекстСообщения = "";
		Для Каждого СтрокаПроверка Из ТаблицаПроверка Цикл
			Если СтрокаПроверка.ЧислоВхождений > 1 Тогда
				СтруктураПравила.ЕстьОшибки = Истина;
				СтруктураПравила.ОписаниеОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Путь к данным ""%1"" входит в правило более одного раза;'"),СтрокаПроверка.ПутьКДанным));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Определяет, используется ли формирование наименования по правилу для позиции номенклатуры.
//
// Параметры:
//	ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - вид, для которого проверяется использование формирования наименования по правилу. 
//	Номенклатура - СправочникСсылка.Номенклатура - позиция, для которой проверяется использование формирования наименования по правилу. 
//
Функция ИспользоватьИменованиеНоменклатурыПоПравилу(ВидНоменклатуры,Номенклатура = Неопределено) Экспорт
	
	ПравилоИменования = ВидНоменклатуры.ПравилоИменования;
	
	Если Не (ПолучитьФункциональнуюОпцию("ИспользоватьПравилаИменованияНоменклатуры") И ЗначениеЗаполнено(ПравилоИменования)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИспользоватьИменованиеНоменклатурыПоПравилу = Истина;
	
	Если Номенклатура <> Неопределено И ПолучитьФункциональнуюОпцию("ИспользоватьСервисРаботаСНоменклатурой") Тогда
		НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыРаботаСНоменклатурой.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		НаборЗаписей.Прочитать();
		Если Не НаборЗаписей.Количество() = 0 Тогда
			ИспользоватьИменованиеНоменклатурыПоПравилу = Ложь;
		КонецЕсли;
	КонецЕсли;
		
	Возврат ИспользоватьИменованиеНоменклатурыПоПравилу;
	
КонецФункции

// Выполняет проверку заполнения и использования правила именования.
//
// Параметры:
//	ПравилоИменования - СправочникСсылка.ПравилаИменованияНоменклатуры - правило, которое требуется проверить.
//	ТаблицаДоступныхПараметров - ТаблицаЗначений - см. РаботаСПравиламиИменования.ПолучитьДоступныеПараметры 
//	НаборСвойств - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - набор, для которого требуется проверить возможность использования данного правила. 
//
Функция ПроверитьИспользованиеПравилаИменования(ПравилоИменования,ТаблицаДоступныхПараметров = Неопределено,НаборСвойств = Неопределено) Экспорт
	
	Если ТаблицаДоступныхПараметров = Неопределено Тогда
		ТаблицаДоступныхПараметров = ПолучитьДоступныеПараметры();
	КонецЕсли;
	
	ТекущееПравило = ПравилоИменования.Правило;
	Для Каждого Строка Из ПравилоИменования.ПараметрыПравила Цикл
		ТекущееПравило = СтрЗаменить(ТекущееПравило,"[" + Строка.ИмяПараметра + "]","[" + Строка.ПутьКДанным + "]");
	КонецЦикла;
	
	СтруктураПравила = РаботаСПравиламиИменованияКлиентСервер.ПолучитьСтруктуруПравилаИменования(ТекущееПравило,ПравилоИменования.НаборыСвойств,ТаблицаДоступныхПараметров);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЕстьОшибки",СтруктураПравила.ЕстьОшибки);
	Если НаборСвойств <> Неопределено Тогда
		Если СтруктураПравила.НаборыСвойств.НайтиПоЗначению(НаборСвойств) = Неопределено Тогда
			СтруктураВозврата.Вставить("ПравилоНельзяИспользоватьДляНабора",Истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;

КонецФункции

//	Формирует таблицу доступных параметров правила именования.
//
Функция ПолучитьДоступныеПараметры() Экспорт
	
	ТаблицаДоступныхПараметров = Новый ТаблицаЗначений;
	ТаблицаДоступныхПараметров.Колонки.Добавить("ИмяПараметра",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	ТаблицаДоступныхПараметров.Колонки.Добавить("ПутьКДанным", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(300)));
	ТаблицаДоступныхПараметров.Колонки.Добавить("НаборСвойств",Новый ОписаниеТипов("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений"));
	
	Для Каждого Реквизит Из Метаданные.Справочники.Номенклатура.Реквизиты Цикл
		
		Если Реквизит.Использование = ИспользованиеГруппИЭлементов.Группы Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = Реквизит.Имя;
		Если Не РеквизитИспользуется(ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПараметра = Реквизит.Синоним;
		
		СтрокаПараметров = ТаблицаДоступныхПараметров.Добавить();
		СтрокаПараметров.ИмяПараметра = ИмяПараметра;
		СтрокаПараметров.ПутьКДанным = "Номенклатура." + ИмяРеквизита;	
		
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка КАК НаборСвойств,
		               |	2 КАК ИндексКартинки,
		               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.Заголовок КАК ИмяПараметра,
		               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.Имя КАК ПутьКДанным
					   |ИЗ
		               |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
		               |ГДЕ
		               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка.Родитель = &НаборРеквизитовИСведений
		               |	И НЕ НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.ПометкаУдаления
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка,
		               |	3,
		               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.Заголовок,
		               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.Имя
		               |ИЗ
		               |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
		               |ГДЕ
		               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка.Родитель = &НаборРеквизитовИСведений
		               |	И НЕ НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.ПометкаУдаления
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НаборСвойств,
		               |	ИмяПараметра";
		
		
		Запрос.УстановитьПараметр("НаборРеквизитовИСведений",Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ОбщийНабор = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие;
		
		Пока Выборка.Следующий() Цикл
			СтрокаПараметров = ТаблицаДоступныхПараметров.Добавить();
			СтрокаПараметров.ИмяПараметра = Выборка.ИмяПараметра;
			СтрокаПараметров.ПутьКДанным  = Выборка.ПутьКДанным;
			Если Выборка.НаборСвойств <> ОбщийНабор Тогда	
				СтрокаПараметров.НаборСвойств = Выборка.НаборСвойств;
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаДоступныхПараметров;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует пустое дерево операторов.
// 
Функция ПолучитьПустоеДеревоОператоров()
	
	Дерево = Новый ДеревоЗначений();
	Дерево.Колонки.Добавить("ИндексКартинки");
	Дерево.Колонки.Добавить("ИмяПараметра");
	Дерево.Колонки.Добавить("ПутьКДанным");
	Дерево.Колонки.Добавить("ЭтоГруппаДерева");
	Дерево.Колонки.Добавить("НаборСвойств");
	
	Возврат Дерево;
	
КонецФункции

// Добавляет группу операторов в строки дерева.
// 
Функция ДобавитьГруппуОператоров(Дерево, ИмяПараметра)
	
	НоваяГруппа = Дерево.Строки.Добавить();
	НоваяГруппа.ИмяПараметра = ИмяПараметра;
	НоваяГруппа.ЭтоГруппаДерева = Истина;
	
	Возврат НоваяГруппа;
	
КонецФункции

// Добавляет оператор в строки дерева.
//
Функция ДобавитьОператор(Дерево, Родитель, ИндексКартинки, ИмяПараметра, ПутьКДанным, НаборСвойств = Неопределено)
	
	НоваяСтрока = ?(Родитель <> Неопределено, Родитель.Строки.Добавить(), Дерево.Строки.Добавить());
	НоваяСтрока.ИндексКартинки = ИндексКартинки;
	НоваяСтрока.ИмяПараметра   = ИмяПараметра;
	НоваяСтрока.ПутьКДанным	   = ПутьКДанным;
	Если НаборСвойств <> Неопределено Тогда
		НоваяСтрока.НаборСвойств = НаборСвойств;
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Возвращает реквизиты позиции номенклатуры.
//
// Параметры:
//	Номенклатура - СправочникСсылка.Номенклатура - позиция, по которой собираются значения реквизитов.
//
Функция РеквизитыНоменклатуры(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.ТипНоменклатуры,
	|	Номенклатура.ЦеноваяГруппа,
	|	Номенклатура.Номинал,
	|	ВЫБОР
	|		КОГДА Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПодарочныйСертификат
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить();
	ТаблицаНоменклатуры = Результат.Выгрузить();
	
	Если ТаблицаНоменклатуры.Количество() > 0 Тогда
		
		СтруктураНоменклатуры = Новый Структура;
		Для каждого КолонкаТаблицы Из ТаблицаНоменклатуры.Колонки Цикл
			СтруктураНоменклатуры.Вставить(КолонкаТаблицы.Имя);
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(СтруктураНоменклатуры, ТаблицаНоменклатуры[0]);
		
		Возврат СтруктураНоменклатуры;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Проверяет использование реквизита номенклатуры в информационной базе.
//
// Параметры:
//	ИмяРеквизита - Строка - имя реквизита справочника "Номенклатура".
//
Функция РеквизитИспользуется(ИмяРеквизита)
	
	Если ИмяРеквизита = "НаименованиеПолное" 
		Или ИмяРеквизита = "ТипНоменклатуры"
		Или ИмяРеквизита = "ФайлКартинки" Тогда
		Возврат Ложь;
	ИначеЕсли Лев(ИмяРеквизита,7) = "Удалить" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИмяРеквизита = "ДоговорПлатежногоАгента"
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьАгентскиеПлатежиИРазделениеВыручки") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИмяРеквизита = "ТоварнаяКатегория"
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьТоварныеКатегорииИКвотыАссортимента") Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если ИмяРеквизита = "НаборУпаковок"
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИмяРеквизита = "ЦеноваяГруппа"
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрНайти(ИмяРеквизита,"ГИСМ") <> 0
		И Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		Если ИмяРеквизита = "ВидАлкогольнойПродукцииЕГАИС"
			Или ИмяРеквизита = "ОбъемДАЛ"
			Или ИмяРеквизита = "Крепость"
			Или ИмяРеквизита = "ПроизводительИмпортерАлкогольнойПродукции" 
			Или ИмяРеквизита = "ИмпортнаяАлкогольнаяПродукция" Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

#КонецОбласти