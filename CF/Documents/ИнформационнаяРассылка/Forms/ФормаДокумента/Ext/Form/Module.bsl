
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбработкаФормулыМЖ(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка")
		И ЗначениеЗаполнено(Результат) Тогда
		ИнформационныеРассылкиКлиент.ОбработатьВставкуПараметра(Элементы.ТекстСообщения, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатыТекстСообщенияЗавершениеНачалаВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
		ПроверитьПараметрыШаблона(Результат, ТекущаяСтрока.НомерСтроки);
		ИдентификаторСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
		ТекущаяСтрока.ТекстСообщения = НовыйТекстПерсональногоСообщенияДляСтроки(ИдентификаторСтроки, Результат);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГруппеПолучателейСкидкиПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ОчищатьАдресатов = Ложь;
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчищатьАдресатов = Истина;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ОчищатьАдресатов = Ложь;
	Иначе
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ОчищатьАдресатов", ОчищатьАдресатов);
	ОбработчикОповещения = Новый ОписаниеОповещения(
									"ЗаполнитьПоГруппеПолучателейСкидкиЗавершение",
									ЭтотОбъект,
									ДополнительныеПараметры);
	ОткрытьФорму(
		"Справочник.ГруппыПолучателейСкидки.ФормаВыбора",
		,
		ЭтаФорма,
		,
		,
		,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГруппеПолучателейСкидкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ДополнительныеПараметры.ОчищатьАдресатов Тогда
			Объект.Адресаты.Очистить();
		КонецЕсли;
		ЗаполнитьПоГруппеПолучателейСкидкиНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПерезаполнитьПоОснованиюСервер();
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	Если СтрокаРезультата.Свойство("Карта") Тогда
		Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
			ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		Иначе
			Если ТипЗнч(СтрокаРезультата.ВладелецКарты) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ИдентификаторСтроки = ДобавитьНайденнуюКарту(СтрокаРезультата);
				Если ИдентификаторСтроки <> Неопределено Тогда
					СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
				КонецЕсли;
			Иначе
				ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена дисконтная карта, не связанная с физическим лицом.'");
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураРезультат.ДанныеПО);
				СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найден номер подарочного сертификата. Обработка сертификатов в документе не предусмотрена'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураРезультат.ДанныеПО);
		СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		
	Иначе // Номенклатура.
		
		ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена номенклатура. Обработка номенклатуры в документе не предусмотрена'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураРезультат.ДанныеПО);
		СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТВызовСервера.ОбработатьДанныеПоДисконтнымКартамИзТСДСервер(ЭтотОбъект, СтруктураПараметров);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденнуюКарту(СтрокаРезультата) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Контакт", СтрокаРезультата.ВладелецКарты);
	НайденныеСтроки = Объект.Адресаты.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ИдентификаторСтроки = НайденныеСтроки[0].ПолучитьИдентификатор();
	Иначе
		Модифицированность = Истина;
		НоваяСтрока = Объект.Адресаты.Добавить();
		НоваяСтрока.Контакт = СтрокаРезультата.ВладелецКарты;
		ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
		АдресатыКонтактПриИзмененииНаСервере(ИдентификаторСтроки);
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(
		Объект,
		КартинкаСостоянияДокумента,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		РазрешеноПроведение);
	
	
	Если Объект.Ссылка.Пустая() Тогда
		ОбновлениеВидимостиИДоступностиРеквизитов();
		ОбновитьНазванияКоманд();
		ОбновитьЦветСостояния();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МассивКомандПО = Новый Массив;
	МассивКомандПО.Добавить("АдресатыЗагрузитьДанныеИзТСД");
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект, МассивКомандПО);
	ПараметрыСобытийПО = Новый Структура;
	ПараметрыСобытийПО.Вставить("РегистрацияНовойКарты", Истина);
	// Конец ПодключаемоеОборудование
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(
		Объект,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение);
		
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ОбновлениеВидимостиИДоступностиРеквизитов();
	ОбновитьНазванияКоманд();
	ОбновитьЦветСостояния();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(
		Объект,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение);
		
	// &ЗамерПроизводительности	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьНазванияКоманд();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности 
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
	                                            "Документ.УстановкаСебестоимости.ФормаДокумента.Запись",
                                                          Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАдресаты

&НаКлиенте
Процедура АдресатыКонтактПриИзменении(Элемент)
	ИдентификаторСтроки = Элементы.Адресаты.ТекущиеДанные.ПолучитьИдентификатор();
	АдресатыКонтактПриИзмененииНаСервере(ИдентификаторСтроки);
КонецПроцедуры

&НаКлиенте
Процедура АдресатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "АдресатыТекстОшибки" Тогда
		ТекущаяСтрока = Объект.Адресаты.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ТекущаяСтрока <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрока.ТекстОшибки) Тогда
				ТекстОшибки = ТекущаяСтрока.ТекстОшибки;
				ПоказатьПредупреждение(, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресатыНомерТелефонаПриИзменении(Элемент)
	ТекущаяСтрока = Объект.Адресаты.НайтиПоИдентификатору(Элементы.Адресаты.ТекущиеДанные.ПолучитьИдентификатор());
	Если ЗначениеЗаполнено(ТекущаяСтрока.НомерТелефона) Тогда
		НомерДляОтправки = ТекущаяСтрока.НомерТелефона;
		НомерДляОтправки = СтрЗаменить(НомерДляОтправки, "+", "");
		НомерДляОтправки = СтрЗаменить(НомерДляОтправки, "-", "");
		НомерДляОтправки = СтрЗаменить(НомерДляОтправки, "(", "");
		НомерДляОтправки = СтрЗаменить(НомерДляОтправки, ")", "");
		НомерДляОтправки = СтрЗаменить(НомерДляОтправки, " ", "");
		ТекущаяСтрока.НомерДляОтправки = НомерДляОтправки;
	Иначе
		ТекущаяСтрока.НомерДляОтправки = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресатыТекстСообщенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Документ.ИнформационнаяРассылка.Форма.ФормаРедактированияСообщения.Открытие");
             
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", Элементы.Адресаты.ТекущиеДанные);
	ОбработчикОповещения = Новый ОписаниеОповещения(
									"АдресатыТекстСообщенияЗавершениеНачалаВыбора",
									ЭтотОбъект,
									ДополнительныеПараметры);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТекстСообщения", Элемент.ТекстРедактирования);
	ОткрытьФорму(
		"Документ.ИнформационнаяРассылка.Форма.ФормаРедактированияСообщения",
		ПараметрыОткрытия,
		ЭтаФорма,
		,
		,
		,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоГруппеПолучателейСкидки(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	Если Объект.Адресаты.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Очистить табличную часть ""Адресаты"" перед заполнением?'");
		ОбработчикОповещения = Новый ОписаниеОповещения(
										"ЗаполнитьПоГруппеПолучателейСкидкиПродолжение",
										ЭтотОбъект,
										ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена)
	Иначе
		ЗаполнитьПоГруппеПолучателейСкидкиПродолжение(КодВозвратаДиалога.Нет, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	Если ПроверитьПометкуУдаления() Тогда
		Возврат;
	КонецЕсли;
	КоличествоОтправленных = ОтправитьНаСервере();
	Если НЕ КоличествоОтправленных > 0 Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
	Записать(ПараметрыЗаписи);
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьТолькоОшибочные(Команда)
	Если ПроверитьПометкуУдаления() Тогда
		Возврат;
	КонецЕсли;
	КоличествоОтправленных = ОтправитьНаСервере(Истина);
	Если НЕ КоличествоОтправленных > 0 Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
	Записать(ПараметрыЗаписи);
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрСообщения(Команда)
	ТекущаяСтрока = Элементы.Адресаты.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		ИдентификаторСтроки = -1;
	Иначе
		ИдентификаторСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	ПредварительныйТекстСообщения = ПредварительныйПросмотрСообщенияНаСервере(ИдентификаторСтроки);
	ПараметрыОткрытияПросмотра = Новый Структура;
	
	ПараметрыОткрытияПросмотра.Вставить("ТипРассылки", Объект.ТипРассылки);
	ПараметрыОткрытияПросмотра.Вставить("ОтправлятьВТранслите", Объект.ОтправлятьВТранслите);
	ПараметрыОткрытияПросмотра.Вставить("ТекстСообщения", ПредварительныйТекстСообщения);
	ОткрытьФорму("Документ.ИнформационнаяРассылка.Форма.ФормаПредварительногоПросмотра", ПараметрыОткрытияПросмотра);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСообщенияПоШаблону(Команда)
	
	ПроверитьПараметрыШаблона();
	СформироватьСообщенияПоШаблонуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ДополнительныеПараметры = Новый Структура;
		ТекстВопроса = НСтр("ru = 'Перезаполнить документ по данным основания?'");
		ОбработчикОповещения = Новый ОписаниеОповещения(
										"ПерезаполнитьПоОснованиюЗавершение",
										ЭтотОбъект,
										ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ТекстСообщения = НСтр("ru = 'Основание не указано.'");
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьПараметр(Команда)
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработкаФормулыМЖ", ЭтотОбъект);
	ИнформационныеРассылкиКлиент.ВставитьПараметр(Элементы.ТекстСообщения, ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	РазвернутьСвернутьТЧНаСервере();
КонецПроцедуры

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЕстьКоличество", Ложь);
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД СЕРВЕР

&НаСервере
Процедура АдресатыКонтактПриИзмененииНаСервере(ИдентификаторСтроки)
	ТекущаяСтрока = Объект.Адресаты.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ТекущаяСтрока <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(Подзапрос.Фамилия), """") КАК Фамилия,
		|	ЕСТЬNULL(МАКСИМУМ(Подзапрос.Имя), """") 
		|		+ "" "" + ЕСТЬNULL(МАКСИМУМ(Подзапрос.Отчество), """") КАК ПредставлениеКонтакта,
		|	ЕСТЬNULL(МАКСИМУМ(Подзапрос.АдресЭП), """") КАК АдресEMailДляОтправки,
		|	ЕСТЬNULL(МАКСИМУМ(Подзапрос.НомерТелефона), """") КАК НомерДляОтправки,
		|	ЕСТЬNULL(МАКСИМУМ(Подзапрос.Представление), """") КАК НомерТелефона
		|ИЗ
		|	(ВЫБРАТЬ
		|		"""" КАК Фамилия,
		|		"""" КАК Имя,
		|		"""" КАК Отчество,
		|		ФизическиеЛицаКонтактнаяИнформация.АдресЭП КАК АдресЭП,
		|		"""" КАК НомерТелефона,
		|		"""" КАК Представление
		|	ИЗ
		|		Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|	ГДЕ
		|		ФизическиеЛицаКонтактнаяИнформация.Ссылка = &ФизЛицо
		|		И ФизическиеЛицаКонтактнаяИнформация.Тип = &АдресЭлектроннойПочты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		"""",
		|		"""",
		|		"""",
		|		"""",
		|		ФизическиеЛицаКонтактнаяИнформация.НомерТелефона,
		|		ФизическиеЛицаКонтактнаяИнформация.Представление
		|	ИЗ
		|		Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|	ГДЕ
		|		ФизическиеЛицаКонтактнаяИнформация.Ссылка = &ФизЛицо
		|		И ФизическиеЛицаКонтактнаяИнформация.Тип = &Телефон
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ФИОФизЛицСрезПоследних.Фамилия,
		|		ФИОФизЛицСрезПоследних.Имя,
		|		ФИОФизЛицСрезПоследних.Отчество,
		|		"""",
		|		"""",
		|		""""
		|	ИЗ
		|		РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛицСрезПоследних
		|	ГДЕ
		|		ФИОФизЛицСрезПоследних.ФизЛицо = &ФизЛицо) КАК Подзапрос";
		Запрос.УстановитьПараметр("ФизЛицо", ТекущаяСтрока.Контакт);
		Запрос.УстановитьПараметр("Телефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
		Запрос.УстановитьПараметр("АдресЭлектроннойПочты", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОтправитьНаСервере(ТолькоОшибочные = Ложь)
	КоличествоОтправленных = 0;
	Если НЕ ЭтаФорма.ПроверитьЗаполнение() Тогда
		Возврат КоличествоОтправленных;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если Объект.ТипРассылки = Перечисления.ТипыИнформационныхРассылок.SMS Тогда
		Если Не ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выполнены настройки отправки SMS.'"), , "Объект");
			Возврат КоличествоОтправленных;
		КонецЕсли;
	ИначеЕсли Объект.ТипРассылки = Перечисления.ТипыИнформационныхРассылок.EMail Тогда
		УчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	КонецЕсли;
		
	Для Каждого СтрокаАдресата Из Объект.Адресаты Цикл
		Если ТолькоОшибочные И СостояниеСчитаетсяОтправленным(СтрокаАдресата.СостояниеСообщения) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = ТекстИтоговогоСообщения(СтрокаАдресата);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		
			Если Объект.ТипРассылки = Перечисления.ТипыИнформационныхРассылок.SMS Тогда
				МассивНомеров = Новый Массив;
				МассивНомеров.Добавить(СтрокаАдресата.НомерДляОтправки);
				РезультатОтправки = ОтправкаSMS.ОтправитьSMS(МассивНомеров, ТекстСообщения, Неопределено, Объект.ОтправлятьВТранслите);
				СтрокаАдресата.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.ПустаяСсылка();
				Если РезультатОтправки.ОтправленныеСообщения.Количество() = 0 Тогда
					СтрокаАдресата.ИдентификаторСообщения = "";
					СтрокаАдресата.СостояниеСообщения     = Перечисления.СостоянияСообщенияSMS.НеУдалосьПередатьПровайдеру;
				Иначе
					
					Для Каждого ОтправленноеСообщение Из РезультатОтправки.ОтправленныеСообщения Цикл
						СтрокаАдресата.ИдентификаторСообщения = ОтправленноеСообщение.ИдентификаторСообщения;
						СтрокаАдресата.СостояниеСообщения     = Перечисления.СостоянияСообщенияSMS.ОтправляетсяПровайдером;
					КонецЦикла;
				КонецЕсли;
				Если РезультатОтправки.Свойство("ОписаниеОшибки")
					И ЗначениеЗаполнено(РезультатОтправки.ОписаниеОшибки) Тогда
					СтрокаАдресата.ТекстОшибки = РезультатОтправки.ОписаниеОшибки;
					СтрокаАдресата.ИдентификаторСообщения = "";
					Если НЕ ЗначениеЗаполнено(СтрокаАдресата.СостояниеСообщения) Тогда
						СтрокаАдресата.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.НеУдалосьПередатьПровайдеру;
					КонецЕсли;
				КонецЕсли;
				КоличествоОтправленных = КоличествоОтправленных + РезультатОтправки.ОтправленныеСообщения.Количество();
			Иначе
				ПараметрыПисьма = Новый Структура;
				
				ПараметрыПисьма.Вставить("Кому", СтрокаАдресата.АдресEMailДляОтправки);
				ПараметрыПисьма.Вставить("Тема", Объект.Тема);
				ПараметрыПисьма.Вставить("Тело", ТекстСообщения);
				Попытка
					ИдентификаторСообщения = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
					СтрокаАдресата.ИдентификаторСообщения = ИдентификаторСообщения;
					СтрокаАдресата.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.ОтправленоПровайдером;
					СтрокаАдресата.ТекстОшибки = "";
					КоличествоОтправленных = КоличествоОтправленных + 1;
				Исключение
					СтрокаАдресата.ТекстОшибки = ОписаниеОшибки();
					СтрокаАдресата.ИдентификаторСообщения = "";
					СтрокаАдресата.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.НеУдалосьПередатьПровайдеру;
				КонецПопытки;
			КонецЕсли;
		Иначе
			СтрокаСообщенияПользователю = НСтр("ru = 'Не удалось сформировать текст сообщения для строки %1'");
			СтрокаСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияПользователю, СтрокаАдресата.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрокаСообщенияПользователю,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Адресаты", СтрокаАдресата.НомерСтроки, "ТекстСообщения"),
				"Объект");
		КонецЕсли;
	КонецЦикла;
	Объект.Состояние = СостояниеДокументаСообщениеSMS();
	ОбновитьЦветСостояния();
	ОбновитьНазванияКоманд();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат КоличествоОтправленных;
КонецФункции

&НаСервере
Процедура ОбновлениеВидимостиИДоступностиРеквизитов()
	
	ВидимостьSMS = Объект.ТипРассылки = Перечисления.ТипыИнформационныхРассылок.SMS;
	Элементы.Тема.Видимость = НЕ ВидимостьSMS;
	Элементы.ОтправлятьВТранслите.Видимость = ВидимостьSMS;
	Элементы.Состояние.Видимость = ЗначениеЗаполнено(Объект.Состояние);
	Элементы.АдресатыГруппаТелефон.Видимость = ВидимостьSMS;
	Элементы.АдресатыГруппаПочта.Видимость = НЕ ВидимостьSMS;
	Элементы.АдресатыПерезаполнитьПоОснованию.Доступность = ЗначениеЗаполнено(Объект.ДокументОснование);
	Элементы.ДокументОснование.Видимость = ЗначениеЗаполнено(Объект.ДокументОснование);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоГруппеПолучателейСкидкиНаСервере(ВыбраннаяГруппа)
	Запрос = Новый Запрос;
	ДополнительныйТекст = Документы.ИнформационнаяРассылка.ТекстЗапросаДляЗаполненияРассылки();
	Запрос.Текст = "ВЫБРАТЬ
	|	СоставГруппПолучателейСкидки.Получатель КАК Получатель
	|ПОМЕСТИТЬ СоставГруппы
	|ИЗ
	|	РегистрСведений.СоставГруппПолучателейСкидки КАК СоставГруппПолучателейСкидки
	|ГДЕ
	|	СоставГруппПолучателейСкидки.ГруппаПолучателейСкидки = &ВыбраннаяГруппа
	|	И НЕ СоставГруппПолучателейСкидки.Получатель В (&МассивПолучателей)
	|;" + ДополнительныйТекст;
	
	Запрос.УстановитьПараметр("ВыбраннаяГруппа", ВыбраннаяГруппа);
	Запрос.УстановитьПараметр("МассивПолучателей", Объект.Адресаты.Выгрузить(, "Контакт").ВыгрузитьКолонку("Контакт"));
	Запрос.УстановитьПараметр("Телефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("АдресЭлектроннойПочты", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("Пробел", " ");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Адресаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СостояниеДокументаСообщениеSMS()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Адресаты.СостояниеСообщения КАК Состояние
	|ПОМЕСТИТЬ Состояния
	|ИЗ
	|	&Адресаты КАК Адресаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Состояния.Состояние
	|ИЗ
	|	Состояния КАК Состояния";
	
	Запрос.УстановитьПараметр("Адресаты", Объект.Адресаты.Выгрузить());
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Перечисления.СостоянияДокументаСообщениеSMS.Черновик;
	КонецЕсли;
	
	ТекущийСтатус = Неопределено;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.Исходящее Тогда
			
			Возврат  Перечисления.СостоянияДокументаСообщениеSMS.Исходящее;
			
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.Черновик Тогда
			
			Возврат Перечисления.СостоянияСообщенияSMS.Черновик;
			
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.НеУдалосьПередатьПровайдеру Тогда
			
			Если ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено Тогда
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.ЧастичноДоставлено;
			Иначе
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.НеДоставлено;
			КонецЕсли;
			
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.ОтправляетсяПровайдером 
			ИЛИ Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.ОшибкаПолученияСтатусаУПровайдера
			ИЛИ Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.НеОтправленоПровайдером Тогда
			
			Возврат Перечисления.СостоянияДокументаСообщениеSMS.Доставляется;
			
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.Доставлено
			ИЛИ Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.ОтправленоПровайдером Тогда
			
			Если ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено
				 ИЛИ ТекущийСтатус = Неопределено Тогда
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено;
			Иначе
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.ЧастичноДоставлено;
			КонецЕсли;
			
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.НеДоставлено Тогда
			
			Если ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено Тогда
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.ЧастичноДоставлено;
			Иначе
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.НеДоставлено;
			КонецЕсли;
			
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.НеОпознаноПровайдером Тогда
			
			Если ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено Тогда
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.ЧастичноДоставлено;
			Иначе
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.НеДоставлено;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТекущийСтатус;

КонецФункции

&НаСервере
Функция ПредварительныйПросмотрСообщенияНаСервере(ИдентификаторСтроки)
	
	НовыйТекст = Объект.ТекстСообщения;
	Если ИдентификаторСтроки >= 0 Тогда
		ТекущаяСтрока = Объект.Адресаты.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущаяСтрока <> Неопределено Тогда
			НовыйТекст = ТекстИтоговогоСообщения(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ТипРассылки = Перечисления.ТипыИнформационныхРассылок.SMS И Объект.ОтправлятьВТранслите Тогда
		НовыйТекст = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(НовыйТекст);
	КонецЕсли;
	
	Возврат НовыйТекст;
КонецФункции

&НаСервере
Процедура СформироватьСообщенияПоШаблонуНаСервере()
	
	Для Каждого СтрокаСообщения Из Объект.Адресаты Цикл
		СтрокаСообщения.ТекстСообщения = ТекстПерсональногоСообщения(СтрокаСообщения);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер()
	
	Объект.Адресаты.Очистить();
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	Элементы.ГруппаОбщиеПараметры.Видимость = ВидимостьЭлементов;
	Элементы.ГруппаИнформация.Видимость               = ВидимостьЭлементов;
	
	Если ВидимостьЭлементов Тогда
		ЭтаФорма.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Авто;
		Картинка = БиблиотекаКартинок.РазвернутьТабличнуюЧасть
	Иначе
		ЭтаФорма.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
		Картинка = БиблиотекаКартинок.СвернутьТабличнуюЧасть;
	КонецЕсли;
	Элементы.АдресатыРазвернутьСвернутьТЧ.Картинка = Картинка;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ СЛУЖЕБНЫЕ

&НаСервере
Процедура ОбновитьНазванияКоманд()
	Если ЗначениеЗаполнено(Объект.Состояние)
		И НЕ Объект.Состояние = Перечисления.СостоянияДокументаСообщениеSMS.Черновик Тогда
		Элементы.ФормаОтправить.Заголовок = НСтр("ru = 'Отправить повторно'");
	Иначе
		Элементы.ФормаОтправить.Заголовок = НСтр("ru = 'Отправить'");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЦветСостояния()
	Если Объект.Состояние = Перечисления.СостоянияДокументаСообщениеSMS.ЧастичноДоставлено
		ИЛИ Объект.Состояние = Перечисления.СостоянияДокументаСообщениеSMS.НеДоставлено Тогда
		Элементы.Состояние.ЦветТекста = Новый Цвет(255, 0, 0);
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено
		ИЛИ Объект.Состояние = Перечисления.СостоянияДокументаСообщениеSMS.Доставляется Тогда
		Элементы.Состояние.ЦветТекста = Новый Цвет(0, 128, 0);
	Иначе
		Элементы.Состояние.ЦветТекста = Новый Цвет();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СостояниеСчитаетсяОтправленным(СостояниеСообщения)
	Результат = (СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.Доставлено
					ИЛИ СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.ОтправленоПровайдером
					ИЛИ СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.ОтправляетсяПровайдером);
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПроверитьПометкуУдаления()
	
	Результат = Ложь;
	
	Если Объект.ПометкаУдаления Тогда
		ТекстПредупреждения = НСтр("ru = 'Помеченный на удаление документ не может быть отправлен'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Модифицированность = Ложь;
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НовыйТекстПерсональногоСообщенияДляСтроки(ИдентификаторСтрокиАдресата, ТекстСообщения)
	СтрокаАдресата = Объект.Адресаты.НайтиПоИдентификатору(ИдентификаторСтрокиАдресата);
	Если СтрокаАдресата <> Неопределено Тогда
		НовыйТекстСообщения = ТекстПерсональногоСообщения(СтрокаАдресата, ТекстСообщения);
	КонецЕсли;
	Возврат НовыйТекстСообщения;
КонецФункции

&НаСервере
Функция ТекстПерсональногоСообщения(СтрокаАдресата, ТекстСообщения = Неопределено)
	
	Если ТекстСообщения = Неопределено Тогда
		ОставшийсяТекст = Объект.ТекстСообщения;
	Иначе
		ОставшийсяТекст = ТекстСообщения;
	КонецЕсли;
	НачалоПараметра = Найти(ОставшийсяТекст, "[");
	Пока НачалоПараметра > 0 Цикл
		ДлинаТекста = СтрДлина(ОставшийсяТекст);
		ТекстСОстаткомПараметра = Прав(ОставшийсяТекст, ДлинаТекста - НачалоПараметра);
		КонецПараметра = Найти(ТекстСОстаткомПараметра, "]");
		Если КонецПараметра = 0 Тогда
			Прервать;
		Иначе
			КонецПараметра = КонецПараметра + НачалоПараметра;
			ТекстДоПараметра = Лев(ОставшийсяТекст, НачалоПараметра - 1);
			Параметр = Сред(ОставшийсяТекст, НачалоПараметра, КонецПараметра - НачалоПараметра + 1);
			ОставшийсяТекст = Прав(ОставшийсяТекст, ДлинаТекста - КонецПараметра);
			ТекстПараметра = ЗначениеПараметраСообщения(Параметр, СтрокаАдресата);
			ОставшийсяТекст = ТекстДоПараметра + ТекстПараметра + ОставшийсяТекст;
			НачалоПараметра = Найти(ОставшийсяТекст, "[");
		КонецЕсли;
	КонецЦикла;
	ТекстСообщения = ОставшийсяТекст;
	
	Возврат ТекстСообщения;
	
КонецФункции

&НаСервере
Функция ТекстИтоговогоСообщения(СтрокаАдресата)
	
	Если ЗначениеЗаполнено(СтрокаАдресата.ТекстСообщения) Тогда
		
		ИтоговыйТекст = СтрокаАдресата.ТекстСообщения;
		
	Иначе
		
		ИтоговыйТекст = ТекстПерсональногоСообщения(СтрокаАдресата);
		
	КонецЕсли;
	
	Возврат ИтоговыйТекст;
	
КонецФункции

&НаСервере
Функция ЗначениеПараметраСообщения(ИмяПараметра, СтрокаАдресата)
	
	ЗначениеПараметра = "";
	Если НРег(ИмяПараметра) = "[представлениеконтакта]" Тогда
		
		ЗначениеПараметра = СтрокаАдресата.ПредставлениеКонтакта;
		
	ИначеЕсли НРег(ИмяПараметра) = "[накопленнаясуммапродаж]" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ПродажиПоДисконтнымКартамОбороты.Сумма), 0) КАК Сумма,
		|	ЕСТЬNULL(СУММА(ПродажиПоДисконтнымКартамОбороты.Количество), 0) КАК Количество
		|ИЗ
		|	РегистрНакопления.ПродажиПоДисконтнымКартам КАК ПродажиПоДисконтнымКартамОбороты
		|ГДЕ ПродажиПоДисконтнымКартамОбороты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ПродажиПоДисконтнымКартамОбороты.ВладелецДисконтнойКарты = &ВладелецДисконтнойКарты
		|";
		Запрос.УстановитьПараметр("ДатаНачала", Дата(1, 1, 1, 0, 0, 0));
		Запрос.УстановитьПараметр("ДатаОкончания", Объект.Дата);
		Запрос.УстановитьПараметр("ВладелецДисконтнойКарты", СтрокаАдресата.Контакт);
		Результат = Запрос.Выполнить();
		Сумма = 0;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Сумма = Сумма + Выборка.Сумма;
		КонецЦикла;
		ЗначениеПараметра = Сумма;
		
	ИначеЕсли НРег(ИмяПараметра) = "[остатокбаллов]" Тогда
		
		СтруктураКарты = ПараметрыКартыПоВладельцу(СтрокаАдресата.Контакт);
		Если ЗначениеЗаполнено(СтруктураКарты.ДисконтнаяКарта)
			И ЗначениеЗаполнено(СтруктураКарты.БонуснаяПрограммаЛояльности) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИнформационныеКарты.Ссылка КАК ДисконтнаяКарта,
			|	ИнформационныеКарты.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности
			|ПОМЕСТИТЬ КартыИПрограммы
			|ИЗ
			|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
			|ГДЕ
			|	ИнформационныеКарты.Ссылка В(&ДисконтныеКарты)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЕСТЬNULL(СУММА(БонусныеБаллы.НачисленоОстаток), 0) - ВЫБОР
			|		КОГДА ЕСТЬNULL(СУММА(БонусныеБаллы.КСписаниюОстаток), 0) < 0
			|			ТОГДА 0
			|		ИНАЧЕ ЕСТЬNULL(СУММА(БонусныеБаллы.КСписаниюОстаток), 0)
			|	КОНЕЦ КАК КоличествоБаллов
			|ИЗ
			|	РегистрНакопления.БонусныеБаллы.Остатки(
			|			&ДатаЗапроса,
			|			(ДисконтнаяКарта, БонуснаяПрограммаЛояльности) В
			|				(ВЫБРАТЬ
			|					КартыИПрограммы.ДисконтнаяКарта,
			|					КартыИПрограммы.БонуснаяПрограммаЛояльности
			|				ИЗ
			|					КартыИПрограммы КАК КартыИПрограммы)) КАК БонусныеБаллы";
			ДисконтныеКарты = МаркетинговыеАкцииСервер.ПолучитьИсториюДисконтнойКарты(Объект.Дата, СтруктураКарты.ДисконтнаяКарта, Истина);
			Запрос.УстановитьПараметр("ДисконтныеКарты", ДисконтныеКарты);
			Запрос.УстановитьПараметр("ДатаЗапроса", Объект.Дата);
			
			Результат = Запрос.Выполнить();
			
			КоличествоБаллов = 0;
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				КоличествоБаллов = КоличествоБаллов + Выборка.КоличествоБаллов;
			КонецЦикла;
			ЗначениеПараметра = КоличествоБаллов;
		КонецЕсли;
		
	ИначеЕсли НРег(ИмяПараметра) = "[начисленобаллов]" Тогда
		
		СтруктураКарты = ПараметрыКартыПоВладельцу(СтрокаАдресата.Контакт);
		ЗначениеПараметра = СтруктураКарты.НачисленоБаллов - СтруктураКарты.СписаноБаллов;
		
	ИначеЕсли Найти(ИмяПараметра, "[ВыборМЖ(") > 0 Тогда
		
		НоваяСтрока = СтрЗаменить(ИмяПараметра, "[ВыборМЖ(", "");
		НоваяСтрока = СтрЗаменить(НоваяСтрока, ")]", "");
		ПозицияРазделителя = Найти(НоваяСтрока, ";");
		Если ПозицияРазделителя > 0 Тогда
			ДлинаВсейСтроки = СтрДлина(НоваяСтрока);
			МужскаяСтрока = СокрЛП(Лев(НоваяСтрока, ПозицияРазделителя - 1));
			ЖенскаяСтрока = СокрЛП(Прав(НоваяСтрока, ДлинаВсейСтроки - ПозицияРазделителя));
		Иначе
			МужскаяСтрока = НоваяСтрока;
			ЖенскаяСтрока = НоваяСтрока;
		КонецЕсли;
		ПолАдресата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаАдресата.Контакт, "Пол");
		Если ПолАдресата = Перечисления.ПолФизическогоЛица.Женский Тогда
			ЗначениеПараметра = ЖенскаяСтрока;
		Иначе
			ЗначениеПараметра = МужскаяСтрока;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

&НаСервере
Функция ПараметрыКартыПоВладельцу(ВладелецКарты)
	
	СтруктураКарты = Новый Структура;
	СтруктураКарты.Вставить("ДисконтнаяКарта", Справочники.ИнформационныеКарты.ПустаяСсылка());
	СтруктураКарты.Вставить("БонуснаяПрограммаЛояльности", Справочники.БонусныеПрограммыЛояльности.ПустаяСсылка());
	СтруктураКарты.Вставить("НачисленоБаллов", 0);
	СтруктураКарты.Вставить("СписаноБаллов", 0);
	
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.НачислениеИСписаниеБонусныхБаллов") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВЫБОР
		|		КОГДА Начисление.ДисконтнаяКарта.КартаДляНакоплений = &ПустаяКарта
		|			ТОГДА Начисление.ДисконтнаяКарта
		|		ИНАЧЕ Начисление.ДисконтнаяКарта.КартаДляНакоплений
		|	КОНЕЦ КАК ДисконтнаяКарта,
		|	Начисление.Ссылка.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	Начисление.Баллы КАК НачисленоБаллов,
		|	0 КАК СписаноБаллов
		|ИЗ
		|	Документ.НачислениеИСписаниеБонусныхБаллов.Начисление КАК Начисление
		|ГДЕ
		|	Начисление.Ссылка = &Ссылка
		|	И Начисление.ДисконтнаяКарта.ВладелецКарты = &ВладелецКарты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Списание.ДисконтнаяКарта.КартаДляНакоплений = &ПустаяКарта
		|			ТОГДА Списание.ДисконтнаяКарта
		|		ИНАЧЕ Списание.ДисконтнаяКарта.КартаДляНакоплений
		|	КОНЕЦ,
		|	Списание.Ссылка.БонуснаяПрограммаЛояльности,
		|	0,
		|	Списание.Баллы
		|ИЗ
		|	Документ.НачислениеИСписаниеБонусныхБаллов.Списание КАК Списание
		|ГДЕ
		|	Списание.Ссылка = &Ссылка
		|	И Списание.ДисконтнаяКарта.ВладелецКарты = &ВладелецКарты";
		Запрос.УстановитьПараметр("Ссылка", Объект.ДокументОснование);
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВЫБОР
		|		КОГДА ИнформационныеКарты.КартаДляНакоплений = &ПустаяКарта
		|			ТОГДА ИнформационныеКарты.Ссылка
		|		ИНАЧЕ ИнформационныеКарты.КартаДляНакоплений
		|	КОНЕЦ КАК ДисконтнаяКарта,
		|	ВЫБОР
		|		КОГДА ИнформационныеКарты.КартаДляНакоплений = &ПустаяКарта
		|			ТОГДА ИнформационныеКарты.БонуснаяПрограммаЛояльности
		|		ИНАЧЕ ИнформационныеКарты.КартаДляНакоплений.БонуснаяПрограммаЛояльности
		|	КОНЕЦ КАК БонуснаяПрограммаЛояльности
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|ГДЕ
		|	ИнформационныеКарты.ВладелецКарты = &ВладелецКарты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИнформационныеКарты.Ссылка УБЫВ";
		
	КонецЕсли;
	Запрос.УстановитьПараметр("ВладелецКарты", ВладелецКарты);
	Запрос.УстановитьПараметр("ПустаяКарта", Справочники.ИнформационныеКарты.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураКарты, Выборка);
	КонецЕсли;
	
	Возврат СтруктураКарты;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПараметрыШаблона(Шаблон = Неопределено, НомерСтроки = Неопределено)
	
	Если Шаблон = Неопределено Тогда
		Шаблон = Объект.ТекстСообщения;
	КонецЕсли;
	Если НомерСтроки = Неопределено Тогда
		ПутьКПолюОшибки = "Объект.ТекстСообщения";
	Иначе
		ПутьКПолюОшибки = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Адресаты", НомерСтроки, "ТекстСообщения");
	КонецЕсли;
	Если Найти(НРег(Шаблон), "[начисленобаллов]") > 0
		И НЕ (ЗначениеЗаполнено(Объект.ДокументОснование)
				И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.НачислениеИСписаниеБонусныхБаллов")) Тогда
		СтрокаСообщения = НСтр("ru = 'Начисленные баллы можно определить только при вводе на основании начисления бонусных баллов.'")
			+ " " + НСтр("ru = 'Рекомендуется исключить параметр [НачисленоБаллов] из шаблона сообщения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрокаСообщения,
			,
			ПутьКПолюОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента, "Адресаты");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
