&НаКлиенте
Перем КэшированныеЗначения;

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоНаименованию(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ЗавершитьОбработкуДанныхПоКодуКлиент(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		
	Иначе // Номенклатура.
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	СтруктураПараметров.Вставить("СворачиватьУпаковки", Истина);
	Результат = ПодключаемоеОборудованиеРТВызовСервера.ОбработатьДанныеПоНоменклатуреИзТСДСервер(ЭтотОбъект, СтруктураПараметров);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	
	ДобавленаСтрока = Ложь;
	КоличествоУпаковок = 1;
	СтруктураПараметров.Свойство("Количество", КоличествоУпаковок);
	
	ОбновитьКоличество = Ложь;
	Если СтруктураПараметров.Свойство("ОбновитьКоличество") Тогда
		ОбновитьКоличество = Истина;
	КонецЕсли;

	СтруктураПоиска = Новый Структура;
	
	СтруктураПоиска.Вставить("Номенклатура", СтруктураПараметров.Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", СтруктураПараметров.Характеристика);
	МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	
	Если МассивСтрок.Количество() > 0 Тогда 
		
		ДобавленаСтрока = Ложь;
		ТекущаяСтрока = МассивСтрок[0];
		
		УстановитьКоличество = ОбновитьКоличество;
		Если УстановитьКоличество Тогда
			ТекущаяСтрока.КоличествоУпаковокФакт = КоличествоУпаковок;
			ТекущаяСтрока.КоличествоФакт = ТекущаяСтрока.КоличествоУпаковокФакт;
		Иначе
			Если СтруктураПараметров.Упаковка = ТекущаяСтрока.Упаковка Тогда
				КоэффициентПересчета = 1;
			Иначе
				КоэффициентУпаковкиПоиска = 1;
				Если ЗначениеЗаполнено(СтруктураПараметров.Упаковка) Тогда
					КоэффициентУпаковкиПоиска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Упаковка, "Коэффициент");
					Если КоэффициентУпаковкиПоиска <= 0 Тогда
						КоэффициентУпаковкиПоиска = 1;
					КонецЕсли;
				КонецЕсли;
				
				КоэффициентУпаковкиСтроки = 1;
				Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
					КоэффициентУпаковкиПоиска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Упаковка, "Коэффициент");
					Если КоэффициентУпаковкиСтроки <= 0 Тогда
						КоэффициентУпаковкиСтроки = 1;
					КонецЕсли;
				КонецЕсли;
			
				КоэффициентПересчета = КоэффициентУпаковкиПоиска / КоэффициентУпаковкиСтроки;
			КонецЕсли;
			
			ТекущаяСтрока.КоличествоУпаковокФакт = ТекущаяСтрока.КоличествоУпаковокФакт + КоличествоУпаковок * КоэффициентПересчета;
			ТекущаяСтрока.КоличествоФакт = ТекущаяСтрока.КоличествоУпаковокФакт;
		КонецЕсли;
		
	Иначе
		
		ДобавленаСтрока = Истина;
		ТекущаяСтрока = Объект.Товары.Добавить();
		ТекущаяСтрока.Номенклатура = СтруктураПараметров.Номенклатура;
		ТекущаяСтрока.Характеристика = СтруктураПараметров.Характеристика;
		ТекущаяСтрока.Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
		КоэффициентУпаковкиПоиска = 1;
		Если ЗначениеЗаполнено(СтруктураПараметров.Упаковка) Тогда
			КоэффициентУпаковкиПоиска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Упаковка, "Коэффициент");
			Если КоэффициентУпаковкиПоиска <= 0 Тогда
				КоэффициентУпаковкиПоиска = 1;
			КонецЕсли;
		КонецЕсли;
		ТекущаяСтрока.КоличествоУпаковокФакт = КоличествоУпаковок * КоэффициентУпаковкиПоиска;
		ТекущаяСтрока.КоличествоФакт = ТекущаяСтрока.КоличествоУпаковокФакт;
		
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуФакт");
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ЗавершениеОбработкиСтрокиТоваров(ЭтотОбъект, ТекущаяСтрока, СтруктураДействий);
	
	ОбновитьДанныеСтрокиТЧТовары(ТекущаяСтрока);
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ДобавитьНоменклатуруПоСерийномуНомеру(ЭтотОбъект, СтруктураНомера);
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьВесЗавершение(Результат, Параметры) Экспорт
	
	Если Результат Тогда
		ТоварыКоличествоУпаковокФактПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданиеИВыборНовойХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.Получить(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ТекущаяСтрока.Характеристика = Результат;
	ТоварыХарактеристикаПриИзменении(Неопределено);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект, КартинкаСостоянияДокумента, Элементы.КартинкаСостоянияДокумента.Подсказка, РазрешеноПроведение);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбновитьДанныеТЧТовары();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ДокументОснование.ПравилаОтбораТоваровИнвентаризации) Тогда
		СхемаКомпоновкиДанных = Неопределено;
	Иначе
		СхемаИНастройки = Справочники.ПравилаОтбораТоваров.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(Объект.ДокументОснование.ПравилаОтбораТоваровИнвентаризации, Объект.ДокументОснование.ПравилаОтбораТоваровИнвентаризации.СхемаКомпоновкиДанных);
		
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаИНастройки = Справочники.ПравилаОтбораТоваров.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(Объект.ДокументОснование.ПравилаОтбораТоваровИнвентаризации, "ПолнаяИнвентаризация");
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	КонецЕсли;
	
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	
	ОтборПересчетаТоваров.Инициализировать(ИсточникНастроек);
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекНастройки = ТекОбъект.ОтборПересчетаТоваров.Получить();
	Если ТекНастройки = Неопределено Тогда
		ОтборПересчетаТоваров.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		ОтборПересчетаТоваров.Настройки.Отбор.Элементы.Очистить();
	Иначе
		ОтборПересчетаТоваров.ЗагрузитьНастройки(ТекНастройки);
	КонецЕсли;
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	УправлениеЭлементамиФормыНаСервере();
	УстановитьДоступностьКомандБуфераОбмена();
	НастроитьФормуПоДополнительнымПравам();
	
	Элементы.Склад.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Магазин);
	ЭтаФорма.ТолькоПросмотр = Объект.ДокументОснование.Статус = Перечисления.СтатусыПриказовНаПроведениеИнвентаризацийТоваров.Закрыт;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
  	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен()
		И НЕ Элементы.Товары.ТолькоПросмотр Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ДокументОснование.ПравилаОтбораТоваровИнвентаризации) Тогда
		СхемаКомпоновкиДанных = Неопределено;
	Иначе
		СхемаИНастройки = Справочники.ПравилаОтбораТоваров.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(Объект.ДокументОснование.ПравилаОтбораТоваровИнвентаризации, Объект.ДокументОснование.ПравилаОтбораТоваровИнвентаризации.СхемаКомпоновкиДанных);
		
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаИНастройки = Справочники.ПравилаОтбораТоваров.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(Объект.ДокументОснование.ПравилаОтбораТоваровИнвентаризации, "ПолнаяИнвентаризация");
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	КонецЕсли;
	
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	
	ОтборПересчетаТоваров.Инициализировать(ИсточникНастроек);
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекНастройки = ТекОбъект.ОтборПересчетаТоваров.Получить();
	Если ТекНастройки = Неопределено Тогда
		ОтборПересчетаТоваров.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		ОтборПересчетаТоваров.Настройки.Отбор.Элементы.Очистить();
	Иначе
		ОтборПересчетаТоваров.ЗагрузитьНастройки(ТекНастройки);
	КонецЕсли;
	
	ОбновитьДанныеТЧТовары();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Модифицированность И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И НЕ Объект.УчетныеДанныеЗаполнены 
		И Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='При проведении будет перезаполнено учетное количество во всех строках табличной части. Продолжить?'");
		
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПередЗаписью", ЭтотОбъект, ПараметрыЗаписи);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК);
		
	КонецЕсли;
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
	                                            "Документ.ПересчетТоваров.ФормаДокумента.Запись",
                                                          Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.ОтборПересчетаТоваров = Новый ХранилищеЗначения(ОтборПересчетаТоваров.Настройки, Новый СжатиеДанных(9));
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьДанныеТЧТовары();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Или ИмяСобытия = "ВставкаСтрокИзБуфераОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбмена();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) 
		И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПриИзмененииСклада();
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОчиститьКоличествоУчет", Новый Структура("НеобходимоОбработатьВсюТЧ", Истина));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, , СтруктураДействий, КэшированныеЗначения);
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
	ОбновитьДанныеТЧТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		ПриИзмененииМагазина();
	КонецЕсли;
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовПоСтатусу();

КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницФакт", "Факт");
	СтруктураДействий.Вставить("ОчиститьКоличествоУчет");
	СтруктураДействий.Вставить("ПересчитатьСуммуФакт");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
	ОбновитьПоказателиТЧТоварыКлиент(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
		
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтаФорма, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокФактПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницФакт","Факт");
	СтруктураДействий.Вставить("ПересчитатьСуммуФакт"); 

	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьПоказателиТЧТоварыКлиент(ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуФакт");

	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьПоказателиТЧТоварыКлиент(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаФактПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеФакт");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьПоказателиТЧТоварыКлиент(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования
		И НоваяСтрока Тогда
		
		Объект.УчетныеДанныеЗаполнены = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		Элементы.Товары.ТекущиеДанные.Количество = 0;
		Элементы.Товары.ТекущиеДанные.КоличествоФакт = 0;
		Элементы.Товары.ТекущиеДанные.КоличествоУпаковок = 0;
		Элементы.Товары.ТекущиеДанные.КоличествоУпаковокФакт = 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьПодвалКлиент();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УчитыватьСерийныеНомераПриСвертке", Ложь);
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоНаименованию(Команда)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Магазин",Объект.Магазин);
	РаботаСПравиламиИменованияКлиент.ПоискПоНаименованию(ЭтаФорма,ПараметрыПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ОповещенияПриПолученииВеса = Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект);
	ПодключаемоеОборудованиеРТКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ОповещенияПриПолученииВеса, ЭтаФорма, , Истина);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьЦеныПоРозничнымЦенам(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.Магазин) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныПоРозничнымЦенамСервер();
			ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоРозничнымЦенам(ЦеныРассчитаны, Объект.Магазин);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦен(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
	Иначе
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
		
		Обработчик = Новый ОписаниеОповещения("ОбработчикЗаполнитьЦеныПоВидуЦен", ЭтотОбъект);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.ВидыЦен.Форма.ФормаВыбора", СтруктураПараметров, ЭтаФорма,,,, Обработчик, Режим);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСебестоимости(Команда)
	
	ЦеныРассчитаны = ЗаполнитьЦеныПоСебестоимостиСервер();
	ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСебестоимости(ЦеныРассчитаны);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'списание товаров'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	ПараметрыФормы.Вставить("РежимПодбораБезУслуг", Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуВвестиСерийныеНомера", Истина);
	ПараметрыФормы.Вставить("ИспользоватьОтборПоТипамНоменклатуры", Истина);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСУчетомОтбора(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиВозможностиЗаполнения", ЭтотОбъект);
	ОбщегоНазначенияРТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(ЭтаФорма, Объект.Товары, Новый Структура, Истина, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактПоУчету(Команда)
	
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.КоличествоФакт         = СтрокаТЧ.Количество;
		СтрокаТЧ.КоличествоУпаковокФакт = СтрокаТЧ.КоличествоУпаковок;
	КонецЦикла;
	
	ОбновитьДанныеТЧТовары();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчетноеКоличество(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Текст = НСтр("ru = 'Поле ""Дата"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.Дата",,);
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		Текст = НСтр("ru = 'Поле ""Склад"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.Склад",,);
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ЗаполнитьУчетноеКоличествоСервер();
		ОбновитьДанныеТЧТовары();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоРасхождения(Команда)
	
	ТолькоРасхождения = Не ТолькоРасхождения;
	
	Если ТолькоРасхождения Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Расхождение",Истина);
		Элементы.ТоварыТолькоРасхождения.Пометка = Истина;
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
		Элементы.ТоварыТолькоРасхождения.Пометка = Ложь;
	КонецЕсли;

КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	РазвернутьСвернутьТЧНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)

	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	ПолучитьСтрокиИзБуфераОбмена();
	КоличествоВставленных = Объект.Товары.Количество() - КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеПроверкиВозможностиЗаполнения(ЗаполнятьТабличнуюЧасть, ДополнительныеПараметры) Экспорт
	
	Если ЗаполнятьТабличнуюЧасть Тогда
		ЗаполнитьПоСхемеИнвентаризацииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПередЗаписью(Ответ, ПараметрыЗаписи) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Модифицированность = Ложь;
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗаполнитьЦеныПоВидуЦен(ВидЦены, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦены) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(ВидЦены);
		ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦены);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	ЭтаФорма.ПоложениеКоманднойПанели                 = ?(ВидимостьЭлементов, ПоложениеКоманднойПанелиФормы.Авто, ПоложениеКоманднойПанелиФормы.Нет);
	Элементы.ГруппаОснование.Видимость                = ВидимостьЭлементов;
	Элементы.Шапка.Видимость                          = ВидимостьЭлементов;
	Элементы.СтраницаКомментарий.Видимость            = ВидимостьЭлементов;
	Элементы.УсловияПересчетаТоваров.Видимость        = ВидимостьЭлементов;
	Элементы.ГруппаОтветственный.Видимость            = ВидимостьЭлементов;
	Элементы.ГруппаОтклонения.Видимость               = ВидимостьЭлементов;
	Элементы.СтраницаГлавное.Видимость                = ВидимостьЭлементов;
	
	Элементы.РазвернутьСвернутьТЧ.Картинка = ?(ВидимостьЭлементов, БиблиотекаКартинок.РазвернутьТабличнуюЧасть, БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Элементы.Магазин.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Магазин);
		Элементы.Склад.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Склад);
		Элементы.Организация.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Организация);
		
		ОписаниеПравил = Документы.ПриказНаПроведениеИнвентаризацииТоваров.ОписаниеПравилОтбораТоваров(Объект.ДокументОснование);
	Иначе
		
		Элементы.ГруппаОснование.Видимость = Ложь;
		Элементы.Магазин.ТолькоПросмотр = Ложь;
		Элементы.Склад.ТолькоПросмотр = Ложь;
		Элементы.Организация.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если Объект.Магазин.СкладУправляющейСистемы ИЛИ НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		
		Элементы.Склад.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСхемеИнвентаризацииСервер()
	
	ОтборИзХранилища = ОтборПересчетаТоваров;
	
	Документы.ПересчетТоваров.ЗаполнитьСУчетомОтбора(Объект, ОтборИзХранилища.ПолучитьНастройки());
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	
	ОбновитьДанныеТЧТовары();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеКартинкиДвижения(ОтклонениеПоКоличеству)

	Если ОтклонениеПоКоличеству = 0 Тогда
		Возврат -1;
	ИначеЕсли ОтклонениеПоКоличеству > 0 Тогда
		Возврат 0;
	Иначе
		Возврат 2;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ОбновитьПодвалСервер()
	
	ИтогОтклонениеПоСумме   = Объект.Товары.Итог("ОтклонениеПоСумме");
	
	ИтогИзлишкиПоПозициям   = Объект.Товары.Итог("ИзлишкиПозиция");
	ИтогИзлишкиПоСумме      = Объект.Товары.Итог("ИзлишкиПоСумме");
	ИтогИзлишкиПоКоличеству = Объект.Товары.Итог("ИзлишкиПоКоличеству");
	
	ИтогНедостачиПоПозициям   = Объект.Товары.Итог("НедостачаПозиция");
	ИтогНедостачиПоСумме      = Объект.Товары.Итог("НедостачиПоСумме");
	ИтогНедостачиПоКоличеству = Объект.Товары.Итог("НедостачиПоКоличеству");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодвалКлиент()
	
	ИтогОтклонениеПоСумме   = Объект.Товары.Итог("ОтклонениеПоСумме");
	
	ИтогИзлишкиПоПозициям   = Объект.Товары.Итог("ИзлишкиПозиция");
	ИтогИзлишкиПоСумме      = Объект.Товары.Итог("ИзлишкиПоСумме");
	ИтогИзлишкиПоКоличеству = Объект.Товары.Итог("ИзлишкиПоКоличеству");
	
	ИтогНедостачиПоПозициям   = Объект.Товары.Итог("НедостачаПозиция");
	ИтогНедостачиПоСумме      = Объект.Товары.Итог("НедостачиПоСумме");
	ИтогНедостачиПоКоличеству = Объект.Товары.Итог("НедостачиПоКоличеству");
	
КонецПроцедуры

// Рассчитывает показатели в ТЧ "Товары".
//
&НаКлиенте
Процедура ОбновитьПоказателиТЧТоварыКлиент(ТекущаяСтрока)
	
	ТекущаяСтрока.ОтклонениеПоСумме      = ТекущаяСтрока.СуммаФакт - ТекущаяСтрока.Сумма;
	ТекущаяСтрока.ОтклонениеПоКоличеству = ТекущаяСтрока.КоличествоУпаковокФакт - ТекущаяСтрока.КоличествоУпаковок; 
	ТекущаяСтрока.Расхождение            = ТекущаяСтрока.ОтклонениеПоКоличеству <> 0 ИЛИ ТекущаяСтрока.Количество <> ТекущаяСтрока.КоличествоФакт;
	ТекущаяСтрока.КартинкаДвижения       = ЗначениеКартинкиДвижения(ТекущаяСтрока.ОтклонениеПоКоличеству);
	
	Если ТекущаяСтрока.ОтклонениеПоКоличеству > 0 Тогда
		ТекущаяСтрока.НедостачиПоСумме      = 0;
		ТекущаяСтрока.НедостачаПозиция      = 0;
		ТекущаяСтрока.НедостачиПоКоличеству = 0;
		ТекущаяСтрока.ИзлишкиПоСумме        = ТекущаяСтрока.ОтклонениеПоСумме;
		ТекущаяСтрока.ИзлишкиПозиция        = 1;
		ТекущаяСтрока.ИзлишкиПоКоличеству   = ТекущаяСтрока.ОтклонениеПоКоличеству;
	ИначеЕсли ТекущаяСтрока.ОтклонениеПоКоличеству < 0 Тогда
		ТекущаяСтрока.НедостачиПоСумме      = - ТекущаяСтрока.ОтклонениеПоСумме;
		ТекущаяСтрока.НедостачаПозиция      = 1;
		ТекущаяСтрока.НедостачиПоКоличеству = - ТекущаяСтрока.ОтклонениеПоКоличеству;
		ТекущаяСтрока.ИзлишкиПоСумме        = 0;
		ТекущаяСтрока.ИзлишкиПозиция        = 0;
		ТекущаяСтрока.ИзлишкиПоКоличеству   = 0;
	Иначе
		ТекущаяСтрока.НедостачиПоСумме      = 0;
		ТекущаяСтрока.НедостачаПозиция      = 0;
		ТекущаяСтрока.НедостачиПоКоличеству = 0;
		ТекущаяСтрока.ИзлишкиПоСумме        = 0;
		ТекущаяСтрока.ИзлишкиПозиция        = 0;
		ТекущаяСтрока.ИзлишкиПоКоличеству   = 0;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет организацию при изменении склада.
//
&НаСервере
Процедура ПриИзмененииСклада()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		                                              
		Объект.Организация = Объект.Склад.Организация;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет склад при изменении магазина.
//
&НаСервере
Процедура ПриИзмененииМагазина()
	
	Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Объект.Магазин,,Объект.Склад, Пользователи.ТекущийПользователь());
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПриИзмененииСклада();
	КонецЕсли;	
	
КонецПроцедуры

// Функция заполняет цену по себестоимости в ТЧ Товары.
// Возвращаемое значение - Булево - Цены рассчитаны.
&НаСервере
Функция ЗаполнитьЦеныПоСебестоимостиСервер()
	
	ЦеныРассчитаны  = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоСебестоимости(Объект, "Товары", Элементы.Товары.ВыделенныеСтроки, ЗапасыСервер.ДатаДляЦенообразованияДляДокумента(Объект));
	
	Если ЦеныРассчитаны Тогда
		ОбновитьДанныеТЧТовары();
	КонецЕсли;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Функция заполняет цену по розничным ценам в ТЧ Товары.
// Возвращаемое значение - Булево - Цены рассчитаны.
&НаСервере
Функция ЗаполнитьЦеныПоРозничнымЦенамСервер()
	
	СтруктураПараметров                           = ЗапасыСервер.СтруктураПараметровЗаполненияПоРозничнымЦенам();
	СтруктураПараметров.Объект                    = Объект;
	СтруктураПараметров.ИмяТабличнойЧасти         = "Товары";
	СтруктураПараметров.Магазин                   = Объект.Магазин;
	СтруктураПараметров.ВыделенныеСтроки          = Элементы.Товары.ВыделенныеСтроки;
	СтруктураПараметров.Дата                      = ЗапасыСервер.ДатаДляЦенообразованияДляДокумента(Объект);
	СтруктураПараметров.ЕстьНДС                   = Ложь;
	
	ЦеныРассчитаны  = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенам(СтруктураПараметров);
	
	Если ЦеныРассчитаны Тогда
		ОбновитьДанныеТЧТовары();
	КонецЕсли;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Функция заполняет цену по виду цен в ТЧ Товары.
// Возвращаемое значение - Булево - Цены рассчитаны.
&НаСервере
Функция ЗаполнитьЦеныПоВидуЦенСервер(ВидЦены)
	
	СтруктураПараметров                   = ЗапасыСервер.СтруктураПараметровЗаполненияПоВидуЦен();
	СтруктураПараметров.Объект            = Объект;
	СтруктураПараметров.ИмяТабличнойЧасти = "Товары";
	СтруктураПараметров.ВидЦен            = ВидЦены;
	СтруктураПараметров.ВыделенныеСтроки  = Элементы.Товары.ВыделенныеСтроки;
	СтруктураПараметров.Дата              = ЗапасыСервер.ДатаДляЦенообразованияДляДокумента(Объект);
	СтруктураПараметров.ЕстьНДС           = Ложь;
	
	ЦеныРассчитаны = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(СтруктураПараметров);
		
	Если ЦеныРассчитаны Тогда
		ОбновитьДанныеТЧТовары();
	КонецЕсли;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеТЧТовары(НомерСтроки = 0)
	Если НомерСтроки = 0 Тогда
		Для каждого СтрокаТЧ Из Объект.Товары Цикл
			ОбновитьДанныеСтрокиТЧТовары(СтрокаТЧ);
		КонецЦикла;
	Иначе
		СтрокаТЧ = Объект.Товары[НомерСтроки - 1];
		ОбновитьДанныеСтрокиТЧТовары(СтрокаТЧ);
	КонецЕсли;
	
	ОбновитьПодвалСервер();
КонецПроцедуры

// Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора.
// Параметры:
//	Отказ - Булево
&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин"" не заполнено'"), Объект, "Объект.Магазин",,Отказ);
	КонецЕсли;
		
КонецПроцедуры

// Процедура заполняет товары из подбора.
// Параметры: 
//	ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		СтруктураСтроки.Вставить("Характеристика", СтрокаТовара.Характеристика);
		СтруктураСтроки.Вставить("Упаковка", СтрокаТовара.Упаковка);
		СтруктураСтроки.Вставить("Количество", СтрокаТовара.КоличествоУпаковок);
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтруктураСтроки);
		
		Если НЕ ИдентификаторСтроки = Неопределено Тогда
			ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницФакт","Факт");
			КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.УчетныеДанныеЗаполнены = Ложь;
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()

	ИзменятьЦену = ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену;
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыЦена.ТолькоПросмотр, ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСуммаФакт.ТолькоПросмотр, ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	Элементы.Склад.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Магазин);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента);
	Если ИдентификаторСтроки <> Неопределено Тогда
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		ОбновитьПоказателиТЧТоварыКлиент(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСтрокиТЧТовары(СтрокаТЧ)
		СтрокаТЧ.СуммаФакт              = СтрокаТЧ.Цена * СтрокаТЧ.КоличествоУпаковокФакт;
		СтрокаТЧ.ОтклонениеПоСумме      = СтрокаТЧ.СуммаФакт - СтрокаТЧ.Сумма; 
		СтрокаТЧ.ОтклонениеПоКоличеству = СтрокаТЧ.КоличествоУпаковокФакт - СтрокаТЧ.КоличествоУпаковок; 
		СтрокаТЧ.Расхождение            = СтрокаТЧ.ОтклонениеПоКоличеству <> 0 ИЛИ СтрокаТЧ.Количество <> СтрокаТЧ.КоличествоФакт;
		СтрокаТЧ.КартинкаДвижения       = ЗначениеКартинкиДвижения(СтрокаТЧ.ОтклонениеПоКоличеству);
		
		Если СтрокаТЧ.ОтклонениеПоКоличеству > 0 Тогда
			СтрокаТЧ.НедостачиПоСумме      = 0;
			СтрокаТЧ.НедостачаПозиция      = 0;
			СтрокаТЧ.НедостачиПоКоличеству = 0;
			СтрокаТЧ.ИзлишкиПоСумме        = СтрокаТЧ.ОтклонениеПоСумме;
			СтрокаТЧ.ИзлишкиПозиция        = 1;
			СтрокаТЧ.ИзлишкиПоКоличеству   = СтрокаТЧ.ОтклонениеПоКоличеству;
		ИначеЕсли СтрокаТЧ.ОтклонениеПоКоличеству < 0 Тогда
			СтрокаТЧ.НедостачиПоСумме      = - СтрокаТЧ.ОтклонениеПоСумме;
			СтрокаТЧ.НедостачаПозиция      = 1;
			СтрокаТЧ.НедостачиПоКоличеству = - СтрокаТЧ.ОтклонениеПоКоличеству;
			СтрокаТЧ.ИзлишкиПоСумме        = 0;
			СтрокаТЧ.ИзлишкиПозиция        = 0;
			СтрокаТЧ.ИзлишкиПоКоличеству   = 0;
		Иначе
			СтрокаТЧ.НедостачиПоСумме      = 0;
			СтрокаТЧ.НедостачаПозиция      = 0;
			СтрокаТЧ.НедостачиПоКоличеству = 0;
			СтрокаТЧ.ИзлишкиПоСумме        = 0;
			СтрокаТЧ.ИзлишкиПозиция        = 0;
			СтрокаТЧ.ИзлишкиПоКоличеству   = 0;
		КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУчетноеКоличествоСервер()
	
	ОбъектЗнач = РеквизитФормыВЗначение("Объект");
	ОбъектЗнач.ЗаполнитьКоличествоПоУчету(Объект.Товары.Выгрузить());
	ЗначениеВРеквизитФормы(ОбъектЗнач, "Объект");
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	Если Объект.Статус = Перечисления.СтатусыПересчетовТоваров.Выполнено Тогда
		Элементы.Товары.ТолькоПросмотр 						= Истина;
		Элементы.Склад.ТолькоПросмотр 						= Истина;
		Элементы.Дата.ТолькоПросмотр 						= Истина;
		Элементы.ОтборПересчетаТоваровНастройкиОтбор.ТолькоПросмотр = Истина;
		Элементы.ТоварыЗаполнить.Доступность 				= Ложь;
		Элементы.ТоварыЦены.Доступность 					= Ложь;
		Элементы.ТоварыПоискПоШтрихкоду.Доступность 		= Ложь;
		Элементы.ТоварыПоискПоНаименованию.Доступность 		= Ложь;
		Элементы.ТоварыЗагрузитьДанныеИзТСД.Доступность 	= Ложь;
		Элементы.ТоварыПолучитьВес.Доступность 				= Ложь;
	Иначе
		Элементы.Товары.ТолькоПросмотр 						= Ложь;
		Элементы.Склад.ТолькоПросмотр 						= Ложь;
		Элементы.Дата.ТолькоПросмотр 						= Ложь;
		Элементы.ОтборПересчетаТоваровНастройкиОтбор.ТолькоПросмотр = Ложь;
		Элементы.ТоварыЗаполнить.Доступность 				= Истина;
		Элементы.ТоварыЦены.Доступность 					= Истина;
		Элементы.ТоварыПоискПоШтрихкоду.Доступность 		= Истина;
		Элементы.ТоварыПоискПоНаименованию.Доступность 		= Истина;
		Элементы.ТоварыЗагрузитьДанныеИзТСД.Доступность 	= Истина;
		Элементы.ТоварыПолучитьВес.Доступность 				= Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовПоСтатусу()
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.Выполнено") Тогда
		Элементы.Товары.ТолькоПросмотр 						= Истина;
		Элементы.Склад.ТолькоПросмотр 						= Истина;
		Элементы.Дата.ТолькоПросмотр 						= Истина;
		Элементы.ОтборПересчетаТоваровНастройкиОтбор.ТолькоПросмотр = Истина;
		Элементы.ТоварыЗаполнить.Доступность 				= Ложь;
		Элементы.ТоварыЦены.Доступность 					= Ложь;
		Элементы.ТоварыПоискПоШтрихкоду.Доступность 		= Ложь;
		Элементы.ТоварыПоискПоНаименованию.Доступность 		= Ложь;
		Элементы.ТоварыЗагрузитьДанныеИзТСД.Доступность 	= Ложь;
		Элементы.ТоварыПолучитьВес.Доступность 				= Ложь;
	Иначе
		Элементы.Товары.ТолькоПросмотр 						= Ложь;
		Элементы.Склад.ТолькоПросмотр 						= Ложь;
		Элементы.Дата.ТолькоПросмотр 						= Ложь;
		Элементы.ОтборПересчетаТоваровНастройкиОтбор.ТолькоПросмотр = Ложь;
		Элементы.ТоварыЗаполнить.Доступность 				= Истина;
		Элементы.ТоварыЦены.Доступность 					= Истина;
		Элементы.ТоварыПоискПоШтрихкоду.Доступность 		= Истина;
		Элементы.ТоварыПоискПоНаименованию.Доступность 		= Истина;
		Элементы.ТоварыЗагрузитьДанныеИзТСД.Доступность 	= Истина;
		Элементы.ТоварыПолучитьВес.Доступность 				= Истина;
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСБуферомОбмена
	
&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", МассивТиповНоменклатуры);
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницФакт", "Факт");
		СтруктураДействий.Вставить("ОчиститьКоличествоУчет");
		СтруктураДействий.Вставить("ПересчитатьСуммуФакт");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);		
		
	КонецЦикла;
	
	КопированиеСтрокСервер.ОчиститьБуферОбмена();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти
