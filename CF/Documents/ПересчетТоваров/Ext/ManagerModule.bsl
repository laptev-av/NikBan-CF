#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// ИНВ-19 (Сличительная ведомость).
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИНВ19";
	КомандаПечати.Представление = НСтр("ru = 'ИНВ-19 (Сличительная ведомость)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

	// ИНВ-3 (Инвентаризационная опись товаров пустая).
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИНВ3";
	КомандаПечати.Представление = НСтр("ru = 'ИНВ-3 (Инвентаризационная опись товаров пустая)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("Пустографка", Истина);
	
	// ИНВ-3 (Инвентаризационная опись товаров).
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИНВ3";
	КомандаПечати.Представление = НСтр("ru = 'ИНВ-3 (Инвентаризационная опись товаров)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("Пустографка", Ложь);
	
	// Инвентаризация товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПересчетТоваров";
	КомандаПечати.Представление = НСтр("ru = 'Инвентаризация товаров'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("Пустографка", Ложь);
	
	// Инвентаризация товаров (пустая).
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПересчетТоваров";
	КомандаПечати.Представление = НСтр("ru = 'Инвентаризация товаров (пустая)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("Пустографка", Истина);
	
КонецПроцедуры

// Заполняет  табличную часть "Товары" в соответствии с правилом отбора товаров.
Процедура ЗаполнитьСУчетомОтбора(Объект, НастройкиПересчета = Неопределено) Экспорт
	
	ДокументОснование = Объект.ДокументОснование;
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) 
		ИЛИ НЕ ЗначениеЗаполнено(ДокументОснование.ПравилаОтбораТоваровИнвентаризации) Тогда
		СхемаИНастройки = Справочники.ПравилаОтбораТоваров.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(Объект.ДокументОснование.ПравилаОтбораТоваровИнвентаризации, "ПолнаяИнвентаризация");
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
		НастройкиКомпоновкиДанныхПоПриказу = Неопределено;
		НастройкиКомпоновкиДанныхПоСхеме   = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Иначе
		ХранилищеНастроекКомпоновкиДанных = ДокументОснование.ПравилаОтбораТоваровИнвентаризации.ХранилищеНастроекКомпоновкиДанных;
		ХранилищеНастроекКомпоновкиДанныхПоПриказу = ДокументОснование.НастройкиКомпоновкиДанных;
		
		СхемаИНастройки = Справочники.ПравилаОтбораТоваров.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(ДокументОснование.ПравилаОтбораТоваровИнвентаризации, ДокументОснование.ПравилаОтбораТоваровИнвентаризации.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
		НастройкиКомпоновкиДанныхПоПриказу = ХранилищеНастроекКомпоновкиДанныхПоПриказу.Получить();
		НастройкиКомпоновкиДанныхПоСхеме   = ХранилищеНастроекКомпоновкиДанных.Получить();
	КонецЕсли;
	
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапасыСервер.ПроверитьСхемуКомпоновкиДанных(СхемаКомпоновкиДанных, СтрЗаменить(НСтр("ru='Правила отбора товаров ""%ПравилаОтбораТоваров%""'"), "%ПравилаОтбораТоваров%", ДокументОснование.ПравилаОтбораТоваровИнвентаризации)) Тогда
		
		// Заполнение набора данных ТаблицаНоменклатуры.
		ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ИспользоватьТоварныеКатегорииИКвотыАссортимента = ПолучитьФункциональнуюОпцию("ИспользоватьТоварныеКатегорииИКвотыАссортимента");
		
		// Подготовка компоновщика макета компоновки данных, загрузка настроек.
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		
		
		Если НастройкиПересчета = Неопределено Тогда
			Если НастройкиКомпоновкиДанныхПоПриказу <> Неопределено Тогда
				КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанныхПоПриказу);
				КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
			ИначеЕсли НастройкиКомпоновкиДанныхПоСхеме <> Неопределено Тогда
				КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанныхПоСхеме);
				КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
			Иначе
				КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			КонецЕсли;
		Иначе
			Если НастройкиКомпоновкиДанныхПоПриказу <> Неопределено Тогда
				КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанныхПоПриказу);
			ИначеЕсли НастройкиКомпоновкиДанныхПоСхеме <> Неопределено Тогда
				КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанныхПоСхеме);
			Иначе
				КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			КонецЕсли;
			ОбщегоНазначенияРТКлиентСервер.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Отбор, НастройкиПересчета.Отбор,,Ложь);
			КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
		КонецЕсли;
		
		// Заполнение структуры отчета и выбранных полей.
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		
		ГруппировкаДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаДетальныеЗаписи.Использование = Истина;
		
		КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Номенклатура");
		
		Если ИспользоватьХарактеристикиНоменклатуры Тогда
			ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Характеристика");
		КонецЕсли;
		
		Если ИспользоватьТоварныеКатегорииИКвотыАссортимента Тогда
			ПараметрАссортимента = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ИспользоватьАссортимент");
			Если ПараметрАссортимента <> Неопределено Тогда
				ПараметрАссортимента.Значение = Истина;
				ПараметрАссортимента.Использование = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Количество");
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "КоличествоУпаковок");
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "КоличествоФакт");
		ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "КоличествоУпаковокФакт");
		
		// Компоновка макета и исполнение запроса.
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("Период");
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = Объект.Дата;
		КонецЕсли;
		
		Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("КонецПериода");
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = Объект.Дата;
		КонецЕсли;
		
		Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("Склад");
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = Объект.Склад;
		КонецЕсли;
		
		Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ФорматМагазина");
		Если Параметр <> Неопределено Тогда
			ФорматМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Склад, Новый Структура("ФорматМагазина", "Магазин.ФорматМагазина")).ФорматМагазина;
			Параметр.Значение = ФорматМагазина;
		КонецЕсли;
		
		Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ДокументОснование");
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = Объект.ДокументОснование;
		КонецЕсли;
		
		Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ПересчетТоваров");
		Если Параметр <> Неопределено Тогда
			Параметр.Значение = Объект.Ссылка;
		КонецЕсли;
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ДанныеОтчета = Новый ТаблицаЗначений();
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		Объект.Товары.Загрузить(ДанныеОтчета);
		Объект.УчетныеДанныеЗаполнены = Истина;
		
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура заполняет табличную часть "Товары" по остаткам.
//
Процедура ЗаполнитьПоОстаткамНаСкладе(Объект) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.Номенклатура КАК Номенклатура,
	|	Остатки.Характеристика КАК Характеристика,
	|	Остатки.КоличествоОстаток КАК КоличествоФакт,
	|	Остатки.КоличествоОстаток КАК Количество,
	|	Остатки.КоличествоОстаток КАК КоличествоУпаковокФакт,
	|	Остатки.КоличествоОстаток КАК КоличествоУпаковок
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&Период, Склад = &Склад) КАК Остатки
	|ГДЕ
	|	Остатки.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Остатки.Номенклатура.Наименование");
	
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	Объект.УчетныеДанныеЗаполнены = Истина;
	
КонецПроцедуры

// Инициализирует таблицы значений, содержащие данные документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПересчетТоваров.Дата КАК Период,
	|	ПересчетТоваров.Ссылка КАК Ссылка,
	|	ПересчетТоваров.Склад КАК Склад,
	|	ПересчетТоваров.Магазин.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач КАК ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач,
	|	ПересчетТоваров.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.ПересчетТоваров КАК ПересчетТоваров
	|ГДЕ
	|	ПересчетТоваров.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Реквизиты = РезультатЗапроса.Выбрать();
	Реквизиты.Следующий(); 
	
	ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВПараметрыЗапроса(РезультатЗапроса, Реквизиты, Запрос);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПересчетТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПересчетТоваровТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|			ТОГДА СУММА(ПересчетТоваровТовары.КоличествоФакт - ПересчетТоваровТовары.Количество)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КОформлениюОрдеров,
	|	ВЫБОР
	|		КОГДА &ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(ПересчетТоваровТовары.КоличествоФакт - ПересчетТоваровТовары.Количество)
	|	КОНЕЦ КАК КОформлениюАктов,
	|	&Период КАК Период,
	|	&Склад КАК Склад,
	|	&ДокументОснование КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	МАКСИМУМ(ПересчетТоваровТовары.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.ПересчетТоваров.Товары КАК ПересчетТоваровТовары
	|ГДЕ
	|	ПересчетТоваровТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПересчетТоваровТовары.Номенклатура,
	|	ПересчетТоваровТовары.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПересчетТоваровТовары.КоличествоФакт - ПересчетТоваровТовары.Количество) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПересчетТоваровТовары.Номенклатура,
	|	ПересчетТоваровТовары.Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|			ТОГДА -СУММА(ПересчетТоваровТовары.КоличествоФакт - ПересчетТоваровТовары.Количество)
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	|			ТОГДА 0
	|		ИНАЧЕ -СУММА(ПересчетТоваровТовары.КоличествоФакт - ПересчетТоваровТовары.Количество)
	|	КОНЕЦ,
	|	&Период,
	|	&Склад,
	|	&ДокументОснование,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	МАКСИМУМ(ПересчетТоваровТовары.НомерСтроки)
	|ИЗ
	|	Документ.ПересчетТоваров.Товары КАК ПересчетТоваровТовары
	|ГДЕ
	|	ПересчетТоваровТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПересчетТоваровТовары.Номенклатура,
	|	ПересчетТоваровТовары.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПересчетТоваровТовары.КоличествоФакт - ПересчетТоваровТовары.Количество) < 0";
	
	Результат = Запрос.ВыполнитьПакет();

	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаТоварыКОформлениюИзлишковНедостач", Результат[0].Выгрузить());

КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПересчетТоваров") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПересчетТоваров", 
			НСтр("ru = 'Инвентаризация товаров'") + ?(ПараметрыПечати["Пустографка"], " " + НСтр("ru = 'пустая'"), ""),
			ПечатьИнвентаризацияТоваров(МассивОбъектов, ОбъектыПечати,ПараметрыПечати["Пустографка"]));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИНВ3") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИНВ3",
			НСтр("ru = 'ИНВ-3 (Инвентаризационная опись товаров'") + ?(ПараметрыПечати["Пустографка"], " " + НСтр("ru = 'пустая'"), "") + ")",
			ПечатьИНВ3(МассивОбъектов, ОбъектыПечати, ПараметрыПечати["Пустографка"]));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИНВ19") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИНВ19",
			НСтр("ru = 'ИНВ-19 (Сличительная ведомость)'"),
			ПечатьИНВ19(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
		
КонецПроцедуры

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет выбранное поле схемы компоновки данных.
//
// Параметры:
// ГруппировкаКомпоновкиДанных - ГруппировкаКомпоновкиДанных
// Поле - Строка
//
Процедура ДобавитьВыбранноеПолеСКД(ГруппировкаКомпоновкиДанных, Поле)
	
	ВыбранноеПоле               = ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных(Поле);
	ВыбранноеПоле.Использование = Истина;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Печать

Функция ПечатьИнвентаризацияТоваров(МассивОбъектов, ОбъектыПечати, Пустографка = Ложь)
	
	КолонкаКодов       = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	ВыводитьКоды       = НЕ ПустаяСтрока(КолонкаКодов);
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Инвентаризация товаров'");

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПересчетТоваров_ПересчетТоваров";
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Организация КАК Организация,
	|	Документ.Склад КАК Склад,
	|	Документ.Ответственный.ФизическоеЛицо КАК Ответственный,
	|	Документ.Склад.Организация.Префикс КАК Префикс,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Склад) КАК СкладПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Магазин) КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ОрганизацияПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Ответственный.ФизическоеЛицо) КАК ОтветственныйПредставление
	|ИЗ
	|	Документ.ПересчетТоваров КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка                                                     КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура                                               КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное                            КАК ТоварНаименование,
	|	" + ?(ВыводитьКоды, "ВложенныйЗапрос.Номенклатура." + КолонкаКодов +" КАК КолонкаКодов,", "") + "
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                             КАК ЕдиницаИзмеренияПредставление,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                                           КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Характеристика                                             КАК Характеристика,
	|	ВложенныйЗапрос.Цена                                                       КАК Цена,
	|	ВЫБОР
	|			КОГДА &БезФактическихДанных ТОГДА 0
	|			ИНАЧЕ ВложенныйЗапрос.Количество
	|	КОНЕЦ                                                                      КАК Количество,
	|	ВЫБОР
	|			КОГДА &БезФактическихДанных ТОГДА 0
	|			ИНАЧЕ ВложенныйЗапрос.КоличествоУчет
	|	КОНЕЦ                                                                      КАК КоличествоУчет,
	|	ВЫБОР
	|			КОГДА &БезФактическихДанных ТОГДА 0
	|			ИНАЧЕ ВложенныйЗапрос.Сумма
	|	КОНЕЦ                                                                      КАК Сумма,
	|	ВЫБОР
	|			КОГДА &БезФактическихДанных ТОГДА 0
	|			ИНАЧЕ ВложенныйЗапрос.СуммаУчет
	|	КОНЕЦ                                                                      КАК СуммаУчет,
	|	ВложенныйЗапрос.НомерСтроки                                                КАК НомерСтроки,
	|   ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.Номенклатура)                                КАК НоменклатураПредставление,
	|   ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.Характеристика)                              КАК ХарактеристикаПредставление
	|ИЗ (
	|	ВЫБРАТЬ
	|		Товары.Ссылка КАК Ссылка,
	|		Товары.Номенклатура КАК Номенклатура,
	|		ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ
	|			Товары.Упаковка.ЕдиницаИзмерения
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		Товары.Характеристика     КАК Характеристика,
	|		ВЫБОР
	|			КОГДА
	|				Товары.КоличествоУпаковок = 0
	|			ТОГДА
	|				Товары.Цена
	|			ИНАЧЕ
	|				Товары.Сумма / Товары.КоличествоУпаковок
	|		КОНЕЦ КАК Цена,
	|		Товары.КоличествоФакт     КАК Количество,
	|       Товары.Количество         КАК КоличествоУчет,
	|		Товары.СуммаФакт          КАК Сумма,
	|		Товары.Сумма              КАК СуммаУчет,
	|		Товары.НомерСтроки        КАК НомерСтроки
	|	ИЗ
	|		Документ.ПересчетТоваров.Товары КАК Товары
	|	ГДЕ
	|		Товары.Ссылка В (&МассивОбъектов)
	|		И Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	НомерСтроки
	|
	|ИТОГИ ПО
	|	Ссылка
	|");
	

	Запрос.УстановитьПараметр("МассивОбъектов"      , МассивОбъектов);
	Запрос.УстановитьПараметр("БезФактическихДанных", Пустографка);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПересчетТоваров.ПФ_MXL_ПересчетТоваров" + ?(Пустографка, "Пустая", ""));
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка     = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	
	ОбластьШапкаТаблицыНачало  = Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
	ОбластьСтрокаТаблицыНачало = Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
	ОбластьПодвалТаблицыНачало = Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
	
	ОбластьШапкаТаблицыКолонкаКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьСтрокаТаблицыКолонкаКодов = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
	ОбластьПодвалТаблицыКолонкаКодов = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
	
	ОбластьШапкаТаблицыКолонкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов; 
	
	ОбластьКолонкаТоваров = Макет.Область("КолонкаТоваров");
	
	Если НЕ ВыводитьКоды Тогда
		
		ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		
	КонецЕсли;
	
	ОбластьШапкаТаблицыКолонкаТоваров  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
	ОбластьСтрокаТаблицыКолонкаТоваров = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
	ОбластьПодвалТаблицыКолонкаТоваров = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
	
	ОбластьШапкаТаблицыКонец  = Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	ОбластьСтрокаТаблицыКонец = Макет.ПолучитьОбласть("СтрокаТаблицы|КонецСтроки");
	ОбластьПодвалТаблицыКонец = Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");
	
	ОбластьПодписей      = Макет.ПолучитьОбласть("Подписи");
	ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
	
	ОбластьИтогоНачалоСтроки   = Макет.ПолучитьОбласть("Итого|НачалоСтроки");
	ОбластьИтогоКолонкаКодов   = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьИтогоКолонкаТоваров = Макет.ПолучитьОбласть("Итого|КолонкаТоваров");
	ОбластьИтогоКонецСтроки    = Макет.ПолучитьОбласть("Итого|КонецСтроки");
	
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	
	ВыборкаПоТабличнымЧастям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// ЗАГОЛОВОК
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// ШАПКА
		ОбластьШапка.Параметры.Заполнить(ВыборкаПоДокументам);	
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаКодов);
			
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров);
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);
		ВсегоНаименований  = 0;
		Итого              = 0;
		ИтогоУчет          = 0;
		
		// СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
			
			Если ВыводитьКоды Тогда
				
				ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Артикул = ВыборкаПоСтрокамТЧ["КолонкаКодов"];
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
				
			КонецЕсли;
			
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
			
			ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);	
			
			ВсегоНаименований = ВсегоНаименований + 1;
			Итого             = Итого + ВыборкаПоСтрокамТЧ.Сумма;
			ИтогоУчет         = ИтогоУчет + ВыборкаПоСтрокамТЧ.СуммаУчет;
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаКодов);
			
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
		
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
		
		// ИТОГО
		Если НЕ Пустографка Тогда
			ОбластьИтогоКонецСтроки.Параметры.Итого     = Итого;
			ОбластьИтогоКонецСтроки.Параметры.ИтогоУчет = ИтогоУчет;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьИтогоНачалоСтроки);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьИтогоКолонкаКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьИтогоКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьИтогоКонецСтроки);
		
		// СУММА ПРОПИСЬЮ
		
		Если НЕ Пустографка Тогда
			ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%, на сумму %Итого%'");
			СуммаКПрописи = Итого;
			
			ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
			ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%", ФормированиеПечатныхФормСервер.ФорматСумм(СуммаКПрописи));
			
			ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
			ОбластьСуммаПрописью.Параметры.СуммаПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(СуммаКПрописи);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		// ПОДПИСИ
		ОбластьПодписей.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьПодписей.Параметры.ОтветственныйПредставление = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьИНВ3(МассивОбъектов, ОбъектыПечати, Пустографка = Ложь)
	
	КолонкаКодов = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	
	Если ПустаяСтрока(КолонкаКодов) Тогда
		
		КолонкаКодов = "Код";
		
	КонецЕсли;
         	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Документ.Ссылка                                       КАК Ссылка,
		|	Документ.Номер                                        КАК Номер,
		|	Документ.Дата                                         КАК Дата,
		|	Документ.Дата                                         КАК ДатаДокумента,
		|	Документ.Дата                                         КАК ДатаСнятияОстатков,
		|	Документ.Организация                                  КАК Организация,
		|	Документ.Организация.Префикс                          КАК Префикс,
		|	ПРЕДСТАВЛЕНИЕ(Документ.Склад)                         КАК СкладПредставление,
		|	ПРЕДСТАВЛЕНИЕ(Документ.Магазин)                       КАК Подразделение,
		|	ПРЕДСТАВЛЕНИЕ(Документ.Организация)                   КАК ОрганизацияПредставление
		|ИЗ
		|	Документ.ПересчетТоваров КАК Документ
		|
		|ГДЕ
		|	Документ.Ссылка В (&МассивДокументов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|;
		|
		|
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка                                                     КАК Ссылка,
		|	ВложенныйЗапрос.Номенклатура                                               КАК Номенклатура,
		|   ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.Номенклатура)                                КАК НоменклатураПредставление,
		|   ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.Характеристика)                              КАК ХарактеристикаПредставление,
		|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное                            КАК ТоварНаименование,
		|	ВложенныйЗапрос.Номенклатура." + КолонкаКодов + "                          КАК ТоварКод,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                             КАК ЕдиницаИзмеренияПредставление,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Код                                       КАК ЕдиницаИзмеренияКодПоОКЕИ,
		|	ВЫБОР
	    |			КОГДА &БезФактическихДанных ТОГДА 0
	    |			ИНАЧЕ ВложенныйЗапрос.Количество
	    |	КОНЕЦ                                                                      КАК Количество,
		|	ВЫБОР
	    |			КОГДА &БезФактическихДанных ТОГДА 0
	    |			ИНАЧЕ ВложенныйЗапрос.Сумма
	    |	КОНЕЦ                                                                      КАК Сумма,
		|   ВложенныйЗапрос.КоличествоУчет                                             КАК КоличествоУчет,
		|	ВложенныйЗапрос.Характеристика                                             КАК Характеристика,
		|	ВложенныйЗапрос.Цена                                                       КАК Цена,
		|	ВложенныйЗапрос.СуммаУчет                                                  КАК СуммаУчет,
		|	ВложенныйЗапрос.НомерСтроки                                                КАК НомерСтроки
		|ИЗ (
		|	ВЫБРАТЬ
		|		Документ.Ссылка                                                        КАК Ссылка,
		|		Документ.Номенклатура                                                  КАК Номенклатура,
		|		ВЫБОР КОГДА Документ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
		|			Документ.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ
		|			Документ.Упаковка.ЕдиницаИзмерения
		|		КОНЕЦ                                                                  КАК ЕдиницаИзмерения,
		|		Документ.Характеристика                                                КАК Характеристика,
		|		ВЫБОР
		|			КОГДА
		|				Документ.КоличествоУпаковок = 0
		|			ТОГДА
		|				Документ.Цена
		|			ИНАЧЕ
		|				Документ.Сумма / Документ.КоличествоУпаковок
		|		КОНЕЦ                                                                  КАК Цена,
		|		Документ.КоличествоФакт                                                КАК Количество,
		|		Документ.Количество                                                    КАК КоличествоУчет,
		|		Документ.СуммаФакт                                                     КАК Сумма,
		|		Документ.Сумма                                                         КАК СуммаУчет,
		|		Документ.НомерСтроки                                                   КАК НомерСтроки
		|	ИЗ
		|		Документ.ПересчетТоваров.Товары КАК Документ
		|	ГДЕ
		|		Документ.Ссылка В (&МассивДокументов)
		|		И Документ.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|
		|	) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки
		|
		|ИТОГИ ПО
		|	Ссылка
		|");
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
		Запрос.УстановитьПараметр("БезФактическихДанных", Пустографка);
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПересчетТоваров_ИНВ3";
				
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		// Зададим параметры макета
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		ДанныеПечати      = МассивРезультатов[0].Выбрать();
		ВыборкаПоДокументам = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ИНВ3");
		
		ПервыйДокумент = Истина;
		
		Пока ДанныеПечати.Следующий() Цикл
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
						
			// Выводим общие реквизиты шапки.
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			
			СведенияОбОрганизации    = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Организация,      ДанныеПечати.ДатаДокумента);
			 			
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			ОбластьМакета.Параметры.НомерДокумента           = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер, Ложь, Истина);
			ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации);
			ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
									
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			НомерСтраницы = 2;
			
			ИтоговыеСуммы = Новый Структура;
			
			// Инициализация итогов по странице.
			
			ИтоговыеСуммы.Вставить("ИтогоКоличествоНаСтранице", 0);
			ИтоговыеСуммы.Вставить("ИтогоКоличествоУчетНаСтранице", 0);
			ИтоговыеСуммы.Вставить("ИтогоСуммаНаСтранице", 0);
			ИтоговыеСуммы.Вставить("ИтогоСуммаУчетНаСтранице", 0);
			ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровНаСтранице",0);
			
			// Инициализация итогов по документу.
			ИтоговыеСуммы.Вставить("ИтогоКоличество", 0);
			ИтоговыеСуммы.Вставить("ИтогоКоличествоУчет", 0);
			ИтоговыеСуммы.Вставить("ИтогоСумма", 0);
			ИтоговыеСуммы.Вставить("ИтогоСуммаУчет", 0);
			ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", 0);
			ИтоговыеСуммы.Вставить("СуммаПрописью", "");
			
			ДанныеСтроки = Новый Структура;
			ДанныеСтроки.Вставить("Номер", 0);
			ДанныеСтроки.Вставить("КоличествоУчет", 0);
			ДанныеСтроки.Вставить("Количество", 0);
			ДанныеСтроки.Вставить("Цена", 0);
			ДанныеСтроки.Вставить("Сумма", 0);
			ДанныеСтроки.Вставить("СуммаУчет", 0);
						
			// Создаем массив для проверки вывода.
			МассивВыводимыхОбластей = Новый Массив;
			
			// Выводим многострочную часть документа.
			ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ПодвалСтраницы");
			ОбластьПодвала          = Макет.ПолучитьОбласть("ПодвалОписи");
			
			СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
			ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
			
			КоличествоСтрок = ВыборкаПоДокументам.Количество();
			
			СтрокаТовары = ВыборкаПоДокументам.Выбрать();
			Пока СтрокаТовары.Следующий() Цикл
				
				ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
				
				ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
				ОбластьМакета.Параметры.ТоварНаименование = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
				СтрокаТовары.ТоварНаименование,
				СтрокаТовары.Характеристика);
				
				ДанныеСтроки.КоличествоУчет = СтрокаТовары.КоличествоУчет;
				ДанныеСтроки.Количество     = СтрокаТовары.Количество;
				ДанныеСтроки.Сумма          = СтрокаТовары.Сумма;
				ДанныеСтроки.СуммаУчет      = СтрокаТовары.СуммаУчет;
				ДанныеСтроки.Цена           = СтрокаТовары.Цена;								
								
				ОбластьМакета.Параметры.Заполнить(ДанныеСтроки);
							
				Если ДанныеСтроки.Номер = 1 Тогда // первая строка
					
					ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
					ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
					
				Иначе
					
					МассивВыводимыхОбластей.Очистить();
					МассивВыводимыхОбластей.Добавить(ОбластьМакета);
					МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
					
					Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
						
						МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
						
					КонецЕсли;
					
					Если ДанныеСтроки.Номер <> 1 И Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
						
						ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
						
						ОбластьИтоговПоСтранице.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью = ЧислоПрописью(ИтоговыеСуммы.КоличествоПорядковыхНомеровНаСтранице, ,",,,,,,,,0");
						
						Если НЕ Пустографка Тогда
							
							ОбластьИтоговПоСтранице.Параметры.КоличествоНаСтраницеПрописью = ФормированиеПечатныхФормСервер.КоличествоПрописью(ИтоговыеСуммы.ИтогоКоличествоНаСтранице);
							ОбластьИтоговПоСтранице.Параметры.СуммаНаСтраницеПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоСуммаНаСтранице);
							
						КонецЕсли;
						
						ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
						
						// Очистим итоги по странице.
					    ИтоговыеСуммы.ИтогоКоличествоНаСтранице             = 0;
						ИтоговыеСуммы.ИтогоКоличествоУчетНаСтранице         = 0;
						ИтоговыеСуммы.ИтогоСуммаУчетНаСтранице              = 0;
						ИтоговыеСуммы.ИтогоСуммаНаСтранице                  = 0;
						ИтоговыеСуммы.КоличествоПорядковыхНомеровНаСтранице = 0;
												
						НомерСтраницы = НомерСтраницы + 1;
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
						ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
						
					КонецЕсли;
					
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				// Увеличим итоги по странице.
			
				ИтоговыеСуммы.ИтогоКоличествоНаСтранице      = ИтоговыеСуммы.ИтогоКоличествоНаСтранице + ДанныеСтроки.Количество;
				ИтоговыеСуммы.ИтогоКоличествоУчетНаСтранице  = ИтоговыеСуммы.ИтогоКоличествоУчетНаСтранице  + ДанныеСтроки.КоличествоУчет;
				ИтоговыеСуммы.ИтогоСуммаНаСтранице           = ИтоговыеСуммы.ИтогоСуммаНаСтранице  + ДанныеСтроки.Сумма;
				ИтоговыеСуммы.ИтогоСуммаУчетНаСтранице       = ИтоговыеСуммы.ИтогоСуммаУчетНаСтранице  + ДанныеСтроки.СуммаУчет;
				ИтоговыеСуммы.КоличествоПорядковыхНомеровНаСтранице = ИтоговыеСуммы.КоличествоПорядковыхНомеровНаСтранице + 1;
				
				// Увеличим итоги по документу.
				
				ИтоговыеСуммы.ИтогоКоличество      = ИтоговыеСуммы.ИтогоКоличество  + ДанныеСтроки.Количество;
				ИтоговыеСуммы.ИтогоКоличествоУчет  = ИтоговыеСуммы.ИтогоКоличествоУчет  + ДанныеСтроки.КоличествоУчет;
				ИтоговыеСуммы.ИтогоСумма           = ИтоговыеСуммы.ИтогоСумма + ДанныеСтроки.Сумма;
				ИтоговыеСуммы.ИтогоСуммаУчет       = ИтоговыеСуммы.ИтогоСуммаУчет + ДанныеСтроки.СуммаУчет;
				ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписейПрописью = ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписейПрописью  + 1;
								
			КонецЦикла;
			
			// Выводим итоги по последней странице.
			ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
			
			ОбластьИтоговПоСтранице.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью = ЧислоПрописью(ИтоговыеСуммы.КоличествоПорядковыхНомеровНаСтранице, ,",,,,,,,,0");
			
			Если НЕ Пустографка Тогда
				
				ОбластьИтоговПоСтранице.Параметры.КоличествоНаСтраницеПрописью = ФормированиеПечатныхФормСервер.КоличествоПрописью(ИтоговыеСуммы.ИтогоКоличествоНаСтранице);
				ОбластьИтоговПоСтранице.Параметры.СуммаНаСтраницеПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоСуммаНаСтранице);
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			НомерСтраницы = НомерСтраницы + 1;
			
			// Выводим подвал документа
			ОбластьПодвала.Параметры.Заполнить(ДанныеПечати);
			ОбластьПодвала.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ОбластьПодвала.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью =  ЧислоПрописью(ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписейПрописью, ,",,,,,,,,0");
			
			Если НЕ Пустографка Тогда
				
				ОбластьПодвала.Параметры.ИтогоКоличествоПрописью = ФормированиеПечатныхФормСервер.КоличествоПрописью(ИтоговыеСуммы.ИтогоКоличество);
				ОбластьПодвала.Параметры.ИтогоСуммаПрописью = ЧислоПрописью(Цел(ИтоговыеСуммы.ИтогоСумма),,",,,,,,,,0");
				ОбластьПодвала.Параметры.ИтогоСуммаКопейки  = (ИтоговыеСуммы.ИтогоСумма - Цел(ИтоговыеСуммы.ИтогоСумма))*100;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьПодвала);
						
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
			
		КонецЦикла;
				
		Возврат ТабличныйДокумент;
	
	
КонецФункции

Функция ПечатьИНВ19(МассивОбъектов, ОбъектыПечати)
	
	КолонкаКодов = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	
	Если ПустаяСтрока(КолонкаКодов) Тогда
		
		КолонкаКодов = "Код";
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка                                       КАК Ссылка,
	|	Документ.Номер                                        КАК Номер,
	|	Документ.Дата                                         КАК Дата,
	|	Документ.Дата                                         КАК ДатаДокумента,
	|	Документ.Дата                                         КАК ДатаНачалаИнвентаризации,
	|	Документ.Организация                                  КАК Организация,
	|	Документ.Организация                                  КАК Руководители,
	|	Документ.Организация.Префикс                          КАК Префикс,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Магазин)                       КАК ПредставлениеПодразделения,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Склад)                         КАК СкладПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация)                   КАК ОрганизацияПредставление
	|ИЗ
	|	Документ.ПересчетТоваров КАК Документ
	|
	|ГДЕ
	|	Документ.Ссылка В (&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка                                                     КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура                                               КАК Номенклатура,
	|   ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.Номенклатура)                                КАК НоменклатураПредставление,
	|   ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.Характеристика)                              КАК ХарактеристикаПредставление,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное                            КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + КолонкаКодов + "                          КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                             КАК ЕдиницаИзмеренияПредставление,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Код                                       КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	ВложенныйЗапрос.Характеристика                                             КАК Характеристика,
	|	ВложенныйЗапрос.РезультатНедостачаКолво                                    КАК РезультатНедостачаКолво,
	|	ВложенныйЗапрос.РезультатНедостачаСумма                                    КАК РезультатНедостачаСумма,
	|	ВложенныйЗапрос.РезультатИзлишекКолво                                      КАК РезультатИзлишекКолво,
	|	ВложенныйЗапрос.РезультатИзлишекСумма                                      КАК РезультатИзлишекСумма,
	|	ВложенныйЗапрос.НомерСтроки                                                КАК НомерСтроки
	|ИЗ (
	|	ВЫБРАТЬ
	|		Документ.Ссылка                                                        КАК Ссылка,
	|		Документ.Номенклатура                                                  КАК Номенклатура,
	|		ВЫБОР КОГДА Документ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
	|			Документ.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ
	|			Документ.Упаковка.ЕдиницаИзмерения
	|		КОНЕЦ                                                                  КАК ЕдиницаИзмерения,
	|		Документ.Характеристика                                                КАК Характеристика,
	|		Документ.НомерСтроки                                                   КАК НомерСтроки,
	|       ВЫБОР 
	|           КОГДА 
	|               (Документ.КоличествоФакт - Документ.Количество) < 0 
	|             И (Документ.СуммаФакт - Документ.Сумма) < 0 
	|           ТОГДА
	|             -(Документ.КоличествоФакт - Документ.Количество)
	|           КОГДА 
	|               (Документ.КоличествоФакт - Документ.Количество) < 0 
	|             И (Документ.СуммаФакт - Документ.Сумма) >= 0 
	|           ТОГДА
	|             -(Документ.КоличествоФакт - Документ.Количество)
	|           ИНАЧЕ
	|             0
	|       КОНЕЦ КАК РезультатНедостачаКолво,
	|       ВЫБОР 
	|           КОГДА 
	|               (Документ.КоличествоФакт - Документ.Количество) < 0 
	|             И (Документ.СуммаФакт - Документ.Сумма) < 0 
	|           ТОГДА
	|             -(Документ.СуммаФакт - Документ.Сумма)
	|           КОГДА 
	|               (Документ.КоличествоФакт - Документ.Количество) < 0 
	|             И (Документ.СуммаФакт - Документ.Сумма) >= 0 
	|           ТОГДА
	|             (Документ.СуммаФакт - Документ.Сумма)
	|           ИНАЧЕ
	|             0
	|       КОНЕЦ КАК РезультатНедостачаСумма,
	|       ВЫБОР 
	|           КОГДА 
	|               (Документ.КоличествоФакт - Документ.Количество) < 0 
	|             И (Документ.СуммаФакт - Документ.Сумма) < 0 
	|           ТОГДА
	|             0
	|           КОГДА 
	|               (Документ.КоличествоФакт - Документ.Количество) < 0 
	|             И (Документ.СуммаФакт - Документ.Сумма) >= 0 
	|           ТОГДА
	|             0
	|           ИНАЧЕ
	|             (Документ.КоличествоФакт - Документ.Количество)
	|       КОНЕЦ КАК РезультатИзлишекКолво,
	|       ВЫБОР 
	|           КОГДА 
	|               (Документ.КоличествоФакт - Документ.Количество) < 0 
	|             И (Документ.СуммаФакт - Документ.Сумма) < 0 
	|           ТОГДА
	|             0
	|           КОГДА 
	|               (Документ.КоличествоФакт - Документ.Количество) < 0 
	|             И (Документ.СуммаФакт - Документ.Сумма) >= 0 
	|           ТОГДА
	|             0
	|           ИНАЧЕ
	|             (Документ.СуммаФакт - Документ.Сумма)
	|       КОНЕЦ КАК РезультатИзлишекСумма
	|	ИЗ
	|		Документ.ПересчетТоваров.Товары КАК Документ
	|	ГДЕ
	|		Документ.Ссылка В (&МассивДокументов)
	|		И Документ.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|       И Документ.КоличествоФакт-Документ.Количество <> 0
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|
	|ИТОГИ ПО
	|	Ссылка
	|");
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПересчетТоваров_ИНВ19";
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ДанныеПечати      = МассивРезультатов[0].Выбрать();
	ВыборкаПоДокументам = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ИНВ19");
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим общие реквизиты шапки.
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
		СведенияОбОрганизации    = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Организация,      ДанныеПечати.ДатаДокумента);
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ОбластьМакета.Параметры.НомерДокумента           = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер, Ложь, Истина);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации);
		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
				
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		НомерСтраницы = 2;
		
		ИтоговыеСуммы = Новый Структура;
		
		// Инициализация итогов по странице.
		
		ИтоговыеСуммы.Вставить("ИтогоРезультатНедостачаКолвоНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоРезультатНедостачаСуммаНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоРезультатИзлишекКолвоНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоРезультатИзлишекСуммаНаСтранице", 0);
		
		// Инициализация итогов по документу.
		ИтоговыеСуммы.Вставить("ИтогоРезультатНедостачаКолво", 0);
		ИтоговыеСуммы.Вставить("ИтогоРезультатНедостачаСумма", 0);
		ИтоговыеСуммы.Вставить("ИтогоРезультатИзлишекКолво", 0);
		ИтоговыеСуммы.Вставить("ИтогоРезультатИзлишекСумма", 0);
		
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("Номер", 0);
		ДанныеСтроки.Вставить("РезультатНедостачаКолво", 0);
		ДанныеСтроки.Вставить("РезультатНедостачаСумма", 0);
		ДанныеСтроки.Вставить("РезультатИзлишекКолво", 0);
		ДанныеСтроки.Вставить("РезультатИзлишекСумма", 0);
		
		
		// Создаем массив для проверки вывода.
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть документа.
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьМакета           = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
		ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		КоличествоСтрок = ВыборкаПоДокументам.Количество();
		
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		Пока СтрокаТовары.Следующий() Цикл
			
			ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
			
			ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
			ОбластьМакета.Параметры.ТоварНаименование = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
			СтрокаТовары.ТоварНаименование,
			СтрокаТовары.Характеристика);
			
			ДанныеСтроки.РезультатНедостачаКолво = СтрокаТовары.РезультатНедостачаКолво;
			ДанныеСтроки.РезультатНедостачаСумма = СтрокаТовары.РезультатНедостачаСумма;
			ДанныеСтроки.РезультатИзлишекКолво   = СтрокаТовары.РезультатИзлишекКолво;
			ДанныеСтроки.РезультатИзлишекСумма   = СтрокаТовары.РезультатИзлишекСумма;
			
			ОбластьМакета.Параметры.Заполнить(ДанныеСтроки);
			
			Если ДанныеСтроки.Номер = 1 Тогда // первая строка
				
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			Иначе
				
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьМакета);
				МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
				
				Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
					
					МассивВыводимыхОбластей.Добавить(ОбластьВсего);
					МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
					
				КонецЕсли;
				
				Если ДанныеСтроки.Номер <> 1 И Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
					
					ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
					
					ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
					
					// Очистим итоги по странице.
					ИтоговыеСуммы.ИтогоРезультатНедостачаКолвоНаСтранице = 0;
					ИтоговыеСуммы.ИтогоРезультатНедостачаСуммаНаСтранице = 0;
					ИтоговыеСуммы.ИтогоРезультатИзлишекКолвоНаСтранице   = 0;
					ИтоговыеСуммы.ИтогоРезультатИзлишекСуммаНаСтранице   = 0;
					
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
					ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Увеличим итоги по странице.
			
			ИтоговыеСуммы.ИтогоРезультатНедостачаКолвоНаСтранице = ИтоговыеСуммы.ИтогоРезультатНедостачаКолвоНаСтранице + ДанныеСтроки.РезультатНедостачаКолво;
			ИтоговыеСуммы.ИтогоРезультатНедостачаСуммаНаСтранице = ИтоговыеСуммы.ИтогоРезультатНедостачаСуммаНаСтранице + ДанныеСтроки.РезультатНедостачаСумма;
			ИтоговыеСуммы.ИтогоРезультатИзлишекКолвоНаСтранице   = ИтоговыеСуммы.ИтогоРезультатИзлишекКолвоНаСтранице   + ДанныеСтроки.РезультатИзлишекКолво;
			ИтоговыеСуммы.ИтогоРезультатИзлишекСуммаНаСтранице   = ИтоговыеСуммы.ИтогоРезультатИзлишекСуммаНаСтранице   + ДанныеСтроки.РезультатИзлишекСумма;
			
			// Увеличим итоги по документу.
			
			ИтоговыеСуммы.ИтогоРезультатНедостачаКолво  = ИтоговыеСуммы.ИтогоРезультатНедостачаКолво + ДанныеСтроки.РезультатНедостачаКолво;
			ИтоговыеСуммы.ИтогоРезультатНедостачаСумма  = ИтоговыеСуммы.ИтогоРезультатНедостачаСумма + ДанныеСтроки.РезультатНедостачаСумма;
			ИтоговыеСуммы.ИтогоРезультатИзлишекКолво    = ИтоговыеСуммы.ИтогоРезультатИзлишекКолво   + ДанныеСтроки.РезультатИзлишекКолво;
			ИтоговыеСуммы.ИтогоРезультатИзлишекСумма    = ИтоговыеСуммы.ИтогоРезультатИзлишекСумма   + ДанныеСтроки.РезультатИзлишекСумма;
			
		КонецЦикла;
		
		Если ДанныеСтроки.Номер = 0 Тогда // шапка не выводилась
			
			ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
			
		КонецЕсли;
		
		
		// Выводим итоги по последней странице.
		ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
		
		ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом.
		
		ОбластьВсего.Параметры.Заполнить(ИтоговыеСуммы);
		
		ТабличныйДокумент.Вывести(ОбластьВсего);
		
		// Выводим подвал документа
		ОбластьПодвала.Параметры.Заполнить(ДанныеПечати);
		
		Руководители = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(ДанныеПечати.Руководители, ДанныеПечати.Дата);
		ОбластьПодвала.Параметры.ФИОБухгалтера       = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(Руководители.ГлавныйБухгалтер);
		
		ТабличныйДокумент.Вывести(ОбластьПодвала);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецЕсли
