#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	ОбщегоНазначенияРТ.ПроверитьИспользованиеОрганизации(,,Организация);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.ЗаказПокупателя.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПродажиСервер.ОтразитьЗаказыПокупателей(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	ДополнительныеСвойства.Вставить("Отказ", Отказ);
	
	Если НЕ Отказ Тогда
		СкидкиНаценкиСерверПереопределяемый.ПогаситьОднократныеСкидки(ЭтотОбъект);
	КонецЕсли;

	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;

	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, "Товары");
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, "Подарки");
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ,Новый Структура("ИмяТЧ","Подарки"));
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьСоответствиеФлагаРезервированиеИТипаНоменклатуры(
		ЭтотОбъект,
		"Товары",
		Отказ
	);
	
	Если Статус = Перечисления.СтатусыЗаказовПокупателей.НеСогласован 
		ИЛИ Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Магазин");
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
		МассивНепроверяемыхРеквизитов.Добавить("Организация");
	ИначеЕсли ЗначениеЗаполнено(Магазин) Тогда
		АссортиментСервер.ПроверитьАссортиментТаблицыТоваровДокументаПродажи(
			ЭтотОбъект,
			Отказ,
			Истина,
			,
			,
			"КонтролироватьАссортиментВЗаказеПокупателя");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ПричинаОтмены");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПокупателей") Тогда
		Для ТекИндекс = 0 По Товары.Количество()-1 Цикл
			
			АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Товары""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Товары[ТекИндекс].НомерСтроки);
			
			// Причина отмены обязательна для заполнения в строках без признака Отменено.
			Если Товары[ТекИндекс].Отменено 
				И НЕ ЗначениеЗаполнено(Товары[ТекИндекс].ПричинаОтмены) Тогда
				
				ТекстОшибки = НСтр("ru='Необходимо указать причину отмены'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "ПричинаОтмены"),
					,
					Отказ
					);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Статус = Перечисления.СтатусыЗаказовПокупателей.Закрыт Тогда
		МаркетинговыеАкцииСервер.ПроверитьОкончаниеАбсолютныхСроковДействияСертификатов(
			ЭтотОбъект,
			"Товары",
			Отказ,
		);
	КонецЕсли;
	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = Константы.КонтрагентРозничныйПокупатель.Получить();
	КонецЕсли;
	
	РозничныеПродажиСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Товары");
	
	ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
		ЭтотОбъект,
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС),
		"СуммаДокумента");
		
	ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
		ЭтотОбъект,
		РозничныеПродажиСервер.НаличиеНеЗарезервированныхСтрок(Товары),
		"НаличиеНеЗарезервированныхСтрок");
		
	ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
		ЭтотОбъект,
		РозничныеПродажиСервер.ВсеСтрокиОтменены(ЭтотОбъект, "Товары", "Отменено"),
		"Отменено");
		
	ДополнительныеСвойства.Вставить("Отказ", Отказ);

КонецПроцедуры

// Процедура - обработчик события "ПриКопировании".
//
Процедура ПриКопировании(ОбъектКопирования)
	
	СкидкиРассчитаны = Ложь;
	СкидкиНаценкиСервер.ОтменитьСкидки(ЭтотОбъект, "Товары");
	
	Статус = Перечисления.СтатусыЗаказовПокупателей.Согласован;
	
	Подарки.Очистить();
	БонусныеБаллыКНачислению.Очистить();
	ПредъявленныеКодыОднократныхСкидок.Очистить();
	
	МаксимальныйКодСтроки = 0;
	
	Для каждого ЭлементТовары Из Товары Цикл
		
		ЭлементТовары.Отменено      = Ложь;
		ЭлементТовары.Резервировать = Ложь;
		ЭлементТовары.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовПокупателей.ПустаяСсылка();
		ЭлементТовары.КодСтроки     = 0;
	КонецЦикла;
	
	УчетНДС.СкорректироватьНДСВТЧДокумента(ЭтотОбъект, Товары);
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Инициализирует документ
//
Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
		Если ДанныеЗаполнения.Свойство("Магазин")
			И НЕ ЗначениеЗаполнено(Магазин) Тогда
			Склад  = ЗначениеНастроекПовтИсп.ПолучитьСкладПродажиПоУмолчанию(ДанныеЗаполнения.Магазин,,Склад, Ответственный);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("Организация")
			И НЕ ЗначениеЗаполнено(Организация) Тогда
			БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ДанныеЗаполнения.Организация,,БанковскийСчетОрганизации);
		КонецЕсли;
	КонецЕсли;
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Магазин       = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Магазин);
	Организация   = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация,Ответственный);
	Склад         = ЗначениеНастроекПовтИсп.ПолучитьСкладПродажиПоУмолчанию(Магазин,,Склад, Ответственный);
	БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация,,БанковскийСчетОрганизации);
	Продавец      = ЗначениеНастроекПовтИсп.ПолучитьПродавцаПоУмолчанию(Ответственный, Продавец);
	

КонецПроцедуры

// Процедура формирует массив имен регистров для контроля проведения.
//
Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;
	
	// При проведении выполняется контроль превышения остатков на складах.
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И НЕ ДополнительныеСвойства.Свойство("ЗагрузкаДанныхИзРабочегоМеста") Тогда
		
		Массив.Добавить(Движения.ТоварыНаСкладах);
		Массив.Добавить(Движения.ЗаказыПокупателей);
		
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

#КонецОбласти

#КонецЕсли
