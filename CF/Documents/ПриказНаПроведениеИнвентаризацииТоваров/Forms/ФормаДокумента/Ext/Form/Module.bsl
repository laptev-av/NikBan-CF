
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,Элементы.КартинкаСостоянияДокумента.Подсказка,РазрешеноПроведение);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбновитьДанныеПриИзмененииПравилОтбораТоваровИнвентаризации(Истина);
		СкладПриИзмененииСервер();
	Иначе
		ЗначениеНастройкиКомпоновкиДанных = Объект.Ссылка.НастройкиКомпоновкиДанных.Получить();
		Если ЗначениеНастройкиКомпоновкиДанных = Неопределено Тогда
			ОбновитьДанныеПриИзмененииПравилОтбораТоваровИнвентаризации(Истина);
		Иначе
			НастройкиКомпоновкиДанных = Объект.Ссылка.НастройкиКомпоновкиДанных.Получить();
			ОбновитьДанныеПриИзмененииПравилОтбораТоваровИнвентаризации(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.НастройкиКомпоновкиДанных = Новый ХранилищеЗначения(НастройкиКомпоновкиДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	// &ЗамерПроизводительности	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности	
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
	                                            "Документ.ПриказНаПроведениеИнвентаризацииТоваров.ФормаДокумента.Запись",
                                                           Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	МагазинПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОтбораТоваровИнвентаризацииПриИзменении(Элемент)
	
	ОбновитьДанныеПриИзмененииПравилОтбораТоваровИнвентаризации(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОтбораТоваровИнвентаризацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Справочник.ПравилаОтбораТоваров.Форма.ФормаВыбора.Открытие");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьИнтервалВыполнить()
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.ДатаНачала    = Объект.ДатаНачала;
	Диалог.Период.ДатаОкончания = Объект.ДатаОкончания;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьПериод", ЭтотОбъект);
	Диалог.Показать(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройки(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПравилаОтбораТоваровИнвентаризации) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Редактировать настройки невозможно. Не выбраны правила отбора товаров'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.ПравилаОтбораТоваровИнвентаризации = ПредопределенноеЗначение("Справочник.ПравилаОтбораТоваров.ПолнаяИнвентаризация") Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Редактировать настройки невозможно. Выбрана полная инвентаризация'"));
		Возврат;
	ИначеЕсли Объект.ПравилаОтбораТоваровИнвентаризации = ПредопределенноеЗначение("Справочник.ПравилаОтбораТоваров.ИнвентаризацияЗапрещенныхКПродаже") Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Редактировать настройки невозможно. Выбрана инвентаризация запрещенных к продаже'"));
		Возврат;
	ИначеЕсли Объект.ПравилаОтбораТоваровИнвентаризации = ПредопределенноеЗначение("Справочник.ПравилаОтбораТоваров.ИнвентаризацияАлкогольнойПродукции") Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Редактировать настройки невозможно. Выбрана инвентаризация алкогольной продукции'"));
		Возврат;
	КонецЕсли;
	
	// Открыть редактор настроек схемы компоновки данных.
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru = 'Настройка параметров схемы инвентаризации ""%1""'");
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = СтрЗаменить(ЗаголовокФормыНастройкиСхемыКомпоновкиДанных, "%1", Объект.ПравилаОтбораТоваровИнвентаризации);
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("НеПомещатьНастройкиВСхемуКомпоновкиДанных", Истина);
	ПараметрыФормы.Вставить("НеРедактироватьСхемуКомпоновкиДанных",      Истина);
	ПараметрыФормы.Вставить("НеНастраиватьУсловноеОформление",           Истина);
	ПараметрыФормы.Вставить("НеНастраиватьВыбор",                        Истина);
	ПараметрыФормы.Вставить("НеНастраиватьПорядок",                      Истина);
	ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных",                АдресСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("АдресНастроекКомпоновкиДанных",             АдресНастройкиКомпоновкиДанных);
	ПараметрыФормы.Вставить("УникальныйИдентификатор",                   УникальныйИдентификатор);
	ПараметрыФормы.Вставить("Заголовок",                                 ЗаголовокФормыНастройкиСхемыКомпоновкиДанных);
	
	Обработчик = Новый ОписаниеОповещения("ОбработчикУстановитьНастройкиКомпоновкиДанных", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных", ПараметрыФормы,,,,, Обработчик);
	
КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура МагазинПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Объект.Магазин,,Объект.Склад, Пользователи.ТекущийПользователь());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериод(Период, ДополнительныеПараметры) Экспорт
	
	Если НЕ Период = Неопределено Тогда
		Объект.ДатаНачала    = Период.ДатаНачала;
		Объект.ДатаОкончания = Период.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикУстановитьНастройкиКомпоновкиДанных(АдресХранилищаНастройкиКомпоновщика, ДополнительныеПараметры) Экспорт
	
	Если АдресХранилищаНастройкиКомпоновщика <> Неопределено Тогда
		
		УстановитьНастройкиКомпоновкиДанных(АдресСхемыКомпоновкиДанных, АдресХранилищаНастройкиКомпоновщика);
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Склад)  Тогда
		Объект.Магазин     = Объект.Склад.Магазин;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.Склад)
		И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Объект.Склад.Организация;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПриИзмененииПравилОтбораТоваровИнвентаризации(ПерезаполнятьНастройкиКомпоновкиДанных)
	
	Элементы.ДекорацияОписаниеПараметров.Заголовок = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.ПравилаОтбораТоваровИнвентаризации) Тогда
		Элементы.РедактироватьНастройки.Доступность = Ложь;
		Элементы.ДекорацияОписаниеПараметров.Заголовок = НСтр("ru = '<Произвольный список товаров>'");
		Возврат;
	КонецЕсли;
	
	Если Объект.ПравилаОтбораТоваровИнвентаризации = Справочники.ПравилаОтбораТоваров.ПолнаяИнвентаризация Тогда
		СхемаИНастройки = Справочники.ПравилаОтбораТоваров.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(Объект.ПравилаОтбораТоваровИнвентаризации, "ПолнаяИнвентаризация");
		Элементы.РедактироватьНастройки.Доступность = Ложь;
	ИначеЕсли Объект.ПравилаОтбораТоваровИнвентаризации = Справочники.ПравилаОтбораТоваров.ИнвентаризацияЗапрещенныхКПродаже Тогда
		СхемаИНастройки = Справочники.ПравилаОтбораТоваров.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(Объект.ПравилаОтбораТоваровИнвентаризации, "ИнвентаризацияЗапрещенныхКПродаже");
		Элементы.РедактироватьНастройки.Доступность = Ложь;
	ИначеЕсли Объект.ПравилаОтбораТоваровИнвентаризации = Справочники.ПравилаОтбораТоваров.ИнвентаризацияАлкогольнойПродукции Тогда
		СхемаИНастройки = Справочники.ПравилаОтбораТоваров.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(Объект.ПравилаОтбораТоваровИнвентаризации, "ИнвентаризацияАлкогольнойПродукции");
		Элементы.РедактироватьНастройки.Доступность = Ложь;
	Иначе
		СхемаИНастройки = Справочники.ПравилаОтбораТоваров.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(Объект.ПравилаОтбораТоваровИнвентаризации, Объект.ПравилаОтбораТоваровИнвентаризации.СхемаКомпоновкиДанных);
		Элементы.РедактироватьНастройки.Доступность = Истина;
	КонецЕсли; 
	
	СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	Если ПерезаполнятьНастройкиКомпоновкиДанных Тогда
		Если Не ЗначениеЗаполнено(СхемаИНастройки.НастройкиКомпоновкиДанных) Тогда
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			УстановитьПривилегированныйРежим(Истина);
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
			УстановитьПривилегированныйРежим(Ложь);
			КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			
			НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
		Иначе
			НастройкиКомпоновкиДанных = СхемаИНастройки.НастройкиКомпоновкиДанных;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьОписаниеПараметровНастройки(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных);
	АдресНастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОписаниеПараметровНастройки(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных)
	
	ОписаниеПараметров = КомпоновкаДанныхСервер.ОписаниеПараметровНастройки(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных);
	
	Элементы.ДекорацияОписаниеПараметров.Заголовок = ОписаниеПараметров;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиКомпоновкиДанных(АдресСхемыКомпоновкиДанных, АдресХранилищаНастройкиКомпоновщика)
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	НастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновщика);
	ОбновитьОписаниеПараметровНастройки(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных);
	АдресНастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти
