#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.СборкаТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	Если ДополнительныеСвойства.ИспользуетсяКомиссионнаяТорговля Тогда
		ЗапасыСервер.ОтразитьТоварыКОформлениюОтчетовКомитенту(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	ЗапасыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияСебестоимостьНоменклатуры(ДополнительныеСвойства, Движения, Отказ);
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
		
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	
	ОбщегоНазначенияРТ.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект,Документы.СборкаТоваров.ПараметрыУказанияСерий(ЭтотОбъект));
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	// Очистка доли стоимости если она не нужна.
	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			Если СтрокаТЧ.ДоляСтоимости <> 0 Тогда
				
				СтрокаТЧ.ДоляСтоимости = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПроверитьСебестоимостьНоменклатуры(РежимЗаписи);
	
	// ЕГАИС
	Если ИнтеграцияЕГАИСРТ.ЕстьПереданныеЧекиЕГАИС(Ссылка) Тогда
		СообщениеПользователю = НСтр("ru = 'Документ передан в ЕГАИС, изменения невозможны'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю,,,, Отказ);
	КонецЕсли;
	// Конец ЕГАИС
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПроизводственнаяОперацияВЕТИС") Тогда
		
		ИнтеграцияВЕТИСРТ.ЗаполнитьСборкуТоваровНаОснованииПроизводственнойОперацииВЕТИС(
			ЭтотОбъект,
			ДанныеЗаполнения,
			ТекстЗаполнения,
			СтандартнаяОбработка);
			
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	ОбщегоНазначенияРТ.ПроверитьИспользованиеОрганизации(,,Организация);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ОшибкаСебестоимости = 0;
	Серии.Очистить();
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
	
	Если Магазин.СкладУправляющейСистемы Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры")
		И Не Справочники.Номенклатура.ПроверитьИспользованиеХарактеристик(Номенклатура) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ДоляСтоимости");
	Иначе
		ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеДолейСтоимости(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
		ПроверитьАлкогольнуюПродукцию(Отказ);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	ПараметрыУказанияСерий = Документы.СборкаТоваров.ПараметрыУказанияСерий(ЭтотОбъект);
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,ПараметрыУказанияСерий.ТЧ,Отказ);
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеСерийВШапке(ЭтотОбъект,ПараметрыУказанияСерий.Шапка,Отказ);
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеТЧПриНаличииОбменаСУправлениемТорговлей(
		ЭтотОбъект,
		Отказ);
		
		
	ПроверитьУслуги(Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Инициализирует документ
//
Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
		Если ДанныеЗаполнения.Свойство("Склад")
			И НЕ ЗначениеЗаполнено(Склад) Тогда
			Если ЗначениеЗаполнено(Магазин) Тогда
				Если НЕ Справочники.Склады.ПроверитьПринадлежностьСкладаМагазину(Магазин, ДанныеЗаполнения.Склад) Тогда
					ДанныеЗаполнения.Склад = Справочники.Склады.ПустаяСсылка();
				КонецЕсли;
			Иначе
				Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Склад, "Магазин");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Ответственный = Пользователи.ТекущийПользователь();
	Магазин       = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Магазин);
	Склад         = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Магазин,,Склад, Ответственный);
	Если ЗначениеЗаполнено(Склад) Тогда
		Организация = Склад.Организация;
	КонецЕсли;
	Организация   = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация,Ответственный);
	
КонецПроцедуры

// Формирует массив с именами регистров для контроля.
//
Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

	// При проведении выполняется контроль превышения остатков на складах.
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Массив.Добавить(Движения.ТоварыНаСкладах);
		
	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Процедура ПроверитьСебестоимостьНоменклатуры(РежимЗаписи)
	
	Если НЕ РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОшибкаСебестоимости = 0;
		Возврат;
	КонецЕсли;
	
	НастройкаСпособаУчета = ЗапасыСервер.ПолучитьСпособУчетаСебестоимости(ЭтотОбъект.Дата);
	Если НЕ НастройкаСпособаУчета.СпособУчета = Перечисления.СпособыУчетаСебестоимости.АвтономныйУчет Тогда
		ОшибкаСебестоимости = 0;
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация Тогда
		
		ТаблицаТовары = Товары.Выгрузить(, "Номенклатура, Характеристика, НомерСтроки");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Товары",  ТаблицаТовары);
		Запрос.УстановитьПараметр("Период",  Дата);
		Запрос.УстановитьПараметр("Магазин", Магазин);
		Запрос.УстановитьПараметр("Ссылка",  Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СборкаТоваровТовары.Номенклатура,
		|	СборкаТоваровТовары.Характеристика
		|ПОМЕСТИТЬ ТЧТовары
		|ИЗ
		|	&Товары КАК СборкаТоваровТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Себестоимость.Номенклатура, СебестоимостьПустойМагазин.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(Себестоимость.Характеристика, СебестоимостьПустойМагазин.Характеристика) КАК Характеристика,
		|	ВЫБОР
		|		КОГДА Себестоимость.Период ЕСТЬ НЕ NULL 
		|				И СебестоимостьПустойМагазин.Период ЕСТЬ НЕ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА Себестоимость.Период >= СебестоимостьПустойМагазин.Период
		|						ТОГДА Себестоимость.Цена
		|					ИНАЧЕ СебестоимостьПустойМагазин.Цена
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА Себестоимость.Период ЕСТЬ НЕ NULL 
		|					ТОГДА Себестоимость.Цена
		|				ИНАЧЕ СебестоимостьПустойМагазин.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК Себестоимость
		|ПОМЕСТИТЬ СебестоимостьТоваров
		|ИЗ
		|	РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(
		|			&Период,
		|			Магазин = &Магазин
		|				И НЕ Регистратор = &Ссылка) КАК Себестоимость
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(
		|				&Период,
		|				Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|					И НЕ Регистратор = &Ссылка) КАК СебестоимостьПустойМагазин
		|		ПО Себестоимость.Номенклатура = СебестоимостьПустойМагазин.Номенклатура
		|			И Себестоимость.Характеристика = СебестоимостьПустойМагазин.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧТовары.Номенклатура,
		|	ТЧТовары.Характеристика,
		|	ЕСТЬNULL(СебестоимостьТоваров.Себестоимость, 0) КАК Себестоимость
		|ИЗ
		|	ТЧТовары КАК ТЧТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ СебестоимостьТоваров КАК СебестоимостьТоваров
		|		ПО ТЧТовары.Характеристика = СебестоимостьТоваров.Характеристика
		|			И ТЧТовары.Номенклатура = СебестоимостьТоваров.Номенклатура
		|ГДЕ
		|	ЕСТЬNULL(СебестоимостьТоваров.Себестоимость, 0) = 0";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ОшибкаСебестоимости = 1;
		Иначе
			ОшибкаСебестоимости = 0;
		КонецЕсли;
		
	Иначе // Разукомплектация
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(Себестоимость.Номенклатура, СебестоимостьПустойМагазин.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(Себестоимость.Характеристика, СебестоимостьПустойМагазин.Характеристика) КАК Характеристика,
		|	ВЫБОР
		|		КОГДА Себестоимость.Период ЕСТЬ НЕ NULL 
		|				И СебестоимостьПустойМагазин.Период ЕСТЬ НЕ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА Себестоимость.Период >= СебестоимостьПустойМагазин.Период
		|						ТОГДА Себестоимость.Цена
		|					ИНАЧЕ СебестоимостьПустойМагазин.Цена
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА Себестоимость.Период ЕСТЬ НЕ NULL 
		|					ТОГДА Себестоимость.Цена
		|				ИНАЧЕ СебестоимостьПустойМагазин.Цена
		|			КОНЕЦ
		|	КОНЕЦ КАК Себестоимость
		|ИЗ
		|	РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(
		|			&Период,
		|			Магазин = &Магазин
		|				И Номенклатура = &Номенклатура
		|				И Характеристика = &Характеристика
		|				И НЕ Регистратор = &Ссылка) КАК Себестоимость
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(
		|				&Период,
		|				Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|					И Номенклатура = &Номенклатура
		|					И Характеристика = &Характеристика
		|					И НЕ Регистратор = &Ссылка) КАК СебестоимостьПустойМагазин
		|		ПО Себестоимость.Номенклатура = СебестоимостьПустойМагазин.Номенклатура
		|			И Себестоимость.Характеристика = СебестоимостьПустойМагазин.Характеристика";
		
		Запрос.УстановитьПараметр("Период",         Дата);
		Запрос.УстановитьПараметр("Магазин",        Магазин);
		Запрос.УстановитьПараметр("Номенклатура",   Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
		Запрос.УстановитьПараметр("Ссылка",         Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Если НЕ Выборка.Следующий() Тогда
			ОшибкаСебестоимости = 2;
		Иначе
			ОшибкаСебестоимости = 0;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьУслуги(Отказ)
	
	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(,"Номенклатура"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ НЕ Товары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	РезультатЗапроса.Выгрузить().Количество();
	
	
	Если РезультатЗапроса.Выгрузить().Количество() = Товары.Количество() Тогда
		
		ТекстСообщения = НСтр("ru = 'Сборка товаров не может быть только из услуг.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстСообщения,
		,
		"Товары",
		"Объект",
		Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьАлкогольнуюПродукцию(Отказ)
	
	Если ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация
		ИЛИ НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "АлкогольнаяПродукция") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = Товары.Выгрузить(, "НомерСтроки,Номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТаблицаТоваров.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	НЕ СпрНоменклатура.ВидНоменклатуры.ПродаетсяВРозлив";
	
	ШаблонСообщения = НСтр("ru='В строке %1 должна быть выбрана алкогольная продукция, продаваемая в розлив'");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.НомерСтроки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "Номенклатура"),
			"Объект",
			Отказ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
