&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор;

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		Если ТекущийЭлемент.Имя = "Номенклатура" Тогда
			ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найден подарочный сертификат. Сборка сертификата не возможна.'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураРезультат.ДанныеПО);
			СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		Иначе
			ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
			ОбновитьИнформациюОСебестоимости(ИдентификаторСтроки);
		КонецЕсли;
	Иначе // Номенклатура.
		
		Если ТекущийЭлемент.Имя = "Номенклатура" Тогда
			Объект.Номенклатура = СтрокаРезультата.Номенклатура;
			Объект.Характеристика = СтрокаРезультата.Характеристика;
			Объект.Упаковка = СтрокаРезультата.Упаковка;
			ИдентификаторСтроки = Неопределено;
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("Номенклатура",               Объект.Номенклатура);
			СтруктураСтроки.Вставить("Характеристика",             Объект.Характеристика);
			СтруктураСтроки.Вставить("Упаковка",                   Объект.Упаковка);
			СтруктураСтроки.Вставить("ХарактеристикиИспользуются", ХарактеристикиИспользуются);
			СтруктураСтроки.Вставить("Количество",                 Объект.Количество);
			СтруктураСтроки.Вставить("КоличествоУпаковок",         Объект.КоличествоУпаковок);
			
			КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			ОбработкаТабличнойЧастиТоварыВызовСервера.ПриИзмененииРеквизитовВТЧСервер(СтруктураСтроки, СтруктураДействий, КэшированныеЗначения);
			ЗаполнитьЗначенияСвойств(Объект, СтруктураСтроки);
			ХарактеристикиИспользуются = СтруктураСтроки.ХарактеристикиИспользуются;
			Элементы.Характеристика.ТолькоПросмотр = НЕ ХарактеристикиИспользуются;
			ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Шапка, Неопределено, Неопределено);
			Модифицированность = Истина;
		Иначе
			ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		КонецЕсли;
		ОбновитьИнформациюОСебестоимости(ИдентификаторСтроки);
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТВызовСервера.ОбработатьДанныеПоНоменклатуреИзТСДСервер(ЭтотОбъект, СтруктураПараметров);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	
	ДобавленаСтрока = Ложь;
	ТекущаяСтрока = ПодключаемоеОборудованиеРТВызовСервера.ИнициализацияСтрокиТоваров(ЭтотОбъект, СтруктураПараметров, ДобавленаСтрока);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ЗавершениеОбработкиСтрокиТоваров(
							ЭтотОбъект,
							ТекущаяСтрока,
							СтруктураДействий,
							"Товары",
							ПараметрыУказанияСерий.ТЧ);
		
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ДобавитьНоменклатуруПоСерийномуНомеру(ЭтотОбъект, СтруктураНомера);
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьВесЗавершение(Результат, Параметры) Экспорт
	
	Если Результат Тогда
		КоличествоУпаковокПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОповещениеПоискаПоНаименованию(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ЗавершитьОбработкуДанныхПоКодуКлиент(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданиеИВыборНовойХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИмяТЧ = "Шапка" Тогда
		Объект.Характеристика = Результат;
		ХарактеристикаПриИзменении(Неопределено);
	Иначе
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
		ТекущаяСтрока.Характеристика = Результат;
		ТоварыХарактеристикаПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,Элементы.КартинкаСостоянияДокумента.Подсказка,РазрешеноПроведение);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.СборкаТоваров.ПараметрыУказанияСерий(Объект));
	УстановитьВидимостьЭлементовСерий();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ХарактеристикиИспользуются = Справочники.Номенклатура.ПроверитьИспользованиеХарактеристик(Объект.Номенклатура);
		Элементы.Характеристика.ТолькоПросмотр = НЕ ХарактеристикиИспользуются;
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ТЧ);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Шапка);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
		ЭтоСборка = Объект.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация;
		
		НастройкаСпособаУчета = ЗапасыСервер.ПолучитьСпособУчетаСебестоимости(Объект.Дата);
		СпособУчетаСебестоимостиУпрощенный = НастройкаСпособаУчета.СпособУчета = Перечисления.СпособыУчетаСебестоимости.АвтономныйУчет;
		ОбновитьИнформациюОСебестоимости();
		Если НЕ ЭтоСборка Тогда
			// ИнтеграцияЕГАИС
			СформироватьТекстДокументаЕГАИС();
			// Конец ИнтеграцияЕГАИС
		Иначе 
			// ИнтеграцияИС
			// ИнтеграцияИС.ПриСозданииНаСервереВФормеДокументаОснования(ЭтотОбъект, Объект);
			// Конец ИнтеграцияИС
			
		КонецЕсли;
	КонецЕсли;
	
	УправлениеЭлементамиФормыНаСервере();
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	НастроитьФормуПоДополнительнымПравам();
	
	УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов();
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Или ИмяСобытия = "ВставкаСтрокИзБуфераОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбмена();
	КонецЕсли;
	
	// ИнтеграцияЕГАИС
	Если (ИмяСобытия = "Запись_ЧекЕГАИС" ИЛИ ИмяСобытия = "Запись_АктСписанияЕГАИС")
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменЕГАИС"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусЕГАИСВФормахДокументов)) Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	// Конец ИнтеграцияЕГАИС
	
	// ИнтеграцияИС
	//ИнтеграцияИСКлиент.ОбработкаОповещенияВФормеДокументаОснования(
	//	ЭтотОбъект,
	//	Объект,
	//	ИмяСобытия,
	//	Параметр,
	//	Источник);
	// Конец ИнтеграцияИС
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.СборкаТоваров.ПараметрыУказанияСерий(Объект));
	УстановитьВидимостьЭлементовСерий();
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ХарактеристикиИспользуются = Справочники.Номенклатура.ПроверитьИспользованиеХарактеристик(Объект.Номенклатура);
	Элементы.Характеристика.ТолькоПросмотр = НЕ ХарактеристикиИспользуются;
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ЭтоСборка = Объект.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация;
	
	НастройкаСпособаУчета = ЗапасыСервер.ПолучитьСпособУчетаСебестоимости(Объект.Дата);
	СпособУчетаСебестоимостиУпрощенный = НастройкаСпособаУчета.СпособУчета = Перечисления.СпособыУчетаСебестоимости.АвтономныйУчет;
	ОбновитьИнформациюОСебестоимости();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если НЕ ЭтоСборка Тогда
		// ИнтеграцияЕГАИС
		СформироватьТекстДокументаЕГАИС();
		// Конец ИнтеграцияЕГАИС
	Иначе
		// ИнтеграцияИС
		//ИнтеграцияИС.ПриЧтенииНаСервереВФормеДокументаОснования(ЭтотОбъект, Объект);
		// Конец ИнтеграцияИС
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ОбновитьИнформациюОСебестоимости();
	Если НЕ ЭтоСборка Тогда
		// ИнтеграцияЕГАИС
		СформироватьТекстДокументаЕГАИС();
		// Конец ИнтеграцияЕГАИС
	Иначе
		// ИнтеграцияИС
		//ИнтеграцияИС.ПослеЗаписиНаСервереВФормеДокументаОснования(ЭтотОбъект, ТекущийОбъект);
		// Конец ИнтеграцияИС
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	// &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности 	
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
	                                            "Документ.СборкаТоваров.ФормаДокумента.Запись",
                                                           Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект, Объект, СтруктураДействий, КэшированныеЗначения);

	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусСерийВШапке(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка) Тогда
		ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Неопределено, Объект, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусСерийВШапке(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка) Тогда
		ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтаФорма, Элемент, СтандартнаяОбработка, Объект);

КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("Номенклатура", Объект.Номенклатура);
	ТекущаяСтрока.Вставить("Характеристика", Объект.Характеристика);
	ТекущаяСтрока.Вставить("ИдентификаторТекущейСтроки", 0);
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(ЭтотОбъект, 
																		  Элемент, 
																		  СтандартнаяОбработка, 
																		  ТекущаяСтрока,
																		  "Шапка");
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",               Объект.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу",            Объект.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("Номенклатура",               Объект.Номенклатура);
	СтруктураСтроки.Вставить("Характеристика",             Объект.Характеристика);
	СтруктураСтроки.Вставить("Упаковка",                   Объект.Упаковка);
	СтруктураСтроки.Вставить("ХарактеристикиИспользуются", ХарактеристикиИспользуются);
	СтруктураСтроки.Вставить("Количество",                 Объект.Количество);
	СтруктураСтроки.Вставить("КоличествоУпаковок",         Объект.КоличествоУпаковок);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Неопределено, СтруктураСтроки, СтруктураДействий, КэшированныеЗначения);

	ЗаполнитьЗначенияСвойств(Объект, СтруктураСтроки);
	ХарактеристикиИспользуются = СтруктураСтроки.ХарактеристикиИспользуются;
	Элементы.Характеристика.ТолькоПросмотр = НЕ ХарактеристикиИспользуются;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусСерийВШапке(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка) Тогда
		ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка);	
	КонецЕсли;
	
	ОбновитьИнформациюОСебестоимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)
	
	ОбновитьИнформациюОСебестоимости();
	Если НЕ ЭтоСборка Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("Номенклатура",               Объект.Номенклатура);
	СтруктураСтроки.Вставить("Характеристика",             Объект.Характеристика);
	СтруктураСтроки.Вставить("Упаковка",                   Объект.Упаковка);
	СтруктураСтроки.Вставить("ХарактеристикиИспользуются", ХарактеристикиИспользуются);
	СтруктураСтроки.Вставить("Количество",                 Объект.Количество);
	СтруктураСтроки.Вставить("КоличествоУпаковок",         Объект.КоличествоУпаковок);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Неопределено, СтруктураСтроки, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьЗначенияСвойств(Объект, СтруктураСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Объект);

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ПараметрыУказанияСерий.ТЧ.ИспользоватьСерииНоменклатуры
		Или ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры Тогда
		ПерезаполнитьПараметрыПолитикиИОбновитьСтатусыУказанияСерий();
	КонецЕсли;
	
	ЭтоСборка = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКомплектацияНоменклатуры.Комплектация");
	Объект.ОшибкаСебестоимости = 0;
	ОбновитьИнформациюОСебестоимости();
	Если ЭтоСборка Тогда
		ТекстДокументаЕГАИС = "";
	Иначе
		СформироватьТекстДокументаЕГАИС();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) 
		И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПриИзмененииСклада();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		ПриИзмененииМагазина();
	Иначе
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий.Шапка);
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ЗаполнитьСтрануПроисхождения");
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий.ТЧ) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения,ПараметрыУказанияСерий.ТЧ);
		
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущаяСтрока);
	ОбновитьИнформациюОСебестоимости(Элементы.Товары.ТекущаяСтрока);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ОбновитьИнформациюОСебестоимости(Элементы.Товары.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
			Отказ = Истина;
			УказатьСерии("КоличествоУпаковок");
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыУпаковка 
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕдиницаИзмерения Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
			Отказ = Истина;
			УказатьСерии("Упаковка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)

	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ТЧ);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
		ТекущаяСтрока.КлючСвязи = 0;
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ТЧ,Копирование);
				
	РедактированиеТЧТовары = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ТЧ) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ТЧ);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущиеДанные);
	
	РедактированиеТЧТовары = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ТЧ);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ОбновитьИнформациюОСебестоимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтаФорма, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)

	ПриИзмененииУпаковки(Элементы.Товары.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ПриИзмененииКоличестваУпаковок(Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если РедактированиеТЧТовары Тогда
		Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок Тогда
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
				Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				
				УказатьСерии("КоличествоУпаковок");
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыУпаковка 
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕдиницаИзмерения Тогда
			
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			
			Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
				Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				УказатьСерии("Упаковка");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ИнтеграцияИС

// ИнтеграцияИС

&НаКлиенте
Процедура Подключаемый_ПолеИнтеграцииИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		ЭтотОбъект,
		Объект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(ДополнительныеПараметры)
	
	ИнтеграцияИС.ОбновитьПолеИнтеграцииВФормеДокументаОснования(ЭтотОбъект, Объект, ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ИнтеграцияИС

#КонецОбласти

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ОповещенияПриПолученииВеса = Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект);
	ПодключаемоеОборудованиеРТКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ОповещенияПриПолученииВеса, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УчитыватьСерийныеНомераПриСвертке", Ложь);
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьКомплектующие(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеЗаполнитьКомплектующие", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Перед заполнением табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьНаСервере();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'сборку товаров'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	ПараметрыФормы.Вставить("РежимПодбораБезУслуг", Ложь);
	ПараметрыФормы.Вставить("РежимПодбораБезСертификатов", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерииВШапке(Команда)
	
	ВводСерийРазрешен = Истина;
	ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма, ПараметрыУказанияСерий.Шапка, ВводСерийРазрешен);
	Если НЕ ВводСерийРазрешен Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий = ПолучитьПараметрыФормыУказанияСерий(Неопределено, Истина);
	ПараметрыФормыУказанияСерий.Вставить("СборкаТоваровШапка", Истина);
	
	ОбработчикУказанияСерий = Новый ОписаниеОповещения("ОбработатьУказаниеСерийШапка", ЭтотОбъект, ПараметрыФормыУказанияСерий);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, ПараметрыФормыУказанияСерий, ЭтаФорма,,,, ОбработчикУказанияСерий, РежимБлокировки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	РазвернутьСвернутьТЧНаСервере();
КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияЕГАИС
&НаКлиенте
Процедура ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСКлиент.ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец ИнтеграцияЕГАИС

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)

	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	ПолучитьСтрокиИзБуфераОбмена();
	КоличествоВставленных = Объект.Товары.Количество() - КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоНаименованию(Команда)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Магазин",Объект.Магазин);
	РаботаСПравиламиИменованияКлиент.ПоискПоНаименованию(ЭтаФорма,ПараметрыПоиска);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьУказаниеСерийТовары(ЗначениеВозврата, ПараметрыФормыУказанияСерий) Экспорт
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("ЗначениеВозврата", ЗначениеВозврата);
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, Ложь);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУказаниеСерийШапка(ЗначениеВозврата, ПараметрыФормыУказанияСерий) Экспорт
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполнитьКомплектующие(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	ЭтаФорма.ПоложениеКоманднойПанели      = ?(ВидимостьЭлементов, ПоложениеКоманднойПанелиФормы.Авто, ПоложениеКоманднойПанелиФормы.Нет);
	Элементы.Шапка.Видимость               = ВидимостьЭлементов;
	Элементы.Комплект.Видимость            = ВидимостьЭлементов;
	Элементы.СтраницаКомментарий.Видимость = ВидимостьЭлементов;
	Элементы.Подвал.Видимость              = ВидимостьЭлементов;
	
	Элементы.РазвернутьСвернутьТЧ.Картинка = ?(ВидимостьЭлементов, БиблиотекаКартинок.РазвернутьТабличнуюЧасть, БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОСебестоимости(ТекущаяСтрока = Неопределено)
	
	Если ЭтоСборка Тогда
		
		Элементы.ДекорацияДекорацияНеУстановленаСебестоимостьКомплект.Видимость = Ложь;
		Элементы.ДекорацияОшибкаПроведенияКомплект.Видимость = Ложь;
		
		Если НЕ СпособУчетаСебестоимостиУпрощенный Тогда
			Элементы.ДекорацияНеУстановленаСебестоимость.Видимость = Ложь;
			Элементы.ДекорацияОшибкаПроведения.Видимость = Ложь;
			Для Каждого Строка Из Объект.Товары Цикл
				Строка.НеУстановленаСебестоимость = Ложь;
			КонецЦикла;
			
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Если ТекущаяСтрока = Неопределено Тогда
			ТаблицаТовары = Объект.Товары.Выгрузить(, "Номенклатура, Характеристика, НомерСтроки");
		Иначе
			МассивСтрок = Новый Массив;
			СтрокаТоваров = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
			
			Если ИспользоватьХарактеристикиНоменклатуры И СтрокаТоваров.ХарактеристикиИспользуются
				И НЕ ЗначениеЗаполнено(СтрокаТоваров.Характеристика) Тогда
				Возврат;
			КонецЕсли;
			
			МассивСтрок.Добавить(СтрокаТоваров);
			ТаблицаТовары = Объект.Товары.Выгрузить(МассивСтрок, "Номенклатура, Характеристика, НомерСтроки");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
		Запрос.УстановитьПараметр("Период", Объект.Дата);
		Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СборкаТоваровТовары.Номенклатура,
		|	СборкаТоваровТовары.Характеристика,
		|	СборкаТоваровТовары.НомерСтроки
		|ПОМЕСТИТЬ ТЧТовары
		|ИЗ
		|	&Товары КАК СборкаТоваровТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СебестоимостьНоменклатурыСрезПоследних.Номенклатура,
		|	СебестоимостьНоменклатурыСрезПоследних.Характеристика,
		|	СебестоимостьНоменклатурыСрезПоследних.Период КАК ПериодПоМагазину,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодБезМагазина,
		|	СебестоимостьНоменклатурыСрезПоследних.Цена КАК ЦенаПоМагазину,
		|	NULL КАК ЦенаБезМагазина
		|ПОМЕСТИТЬ втСебестоимость
		|ИЗ
		|	РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(
		|			&Период,
		|			Магазин = &Магазин
		|				И НЕ Регистратор = &Ссылка
		|				И Номенклатура В
		|					(ВЫБРАТЬ
		|						ТЧТовары.Номенклатура
		|					ИЗ
		|						ТЧТовары)) КАК СебестоимостьНоменклатурыСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СебестоимостьНоменклатурыСрезПоследних.Номенклатура,
		|	СебестоимостьНоменклатурыСрезПоследних.Характеристика,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	СебестоимостьНоменклатурыСрезПоследних.Период,
		|	NULL,
		|	СебестоимостьНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(
		|			&Период,
		|			Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|				И НЕ Регистратор = &Ссылка
		|				И Номенклатура В
		|					(ВЫБРАТЬ
		|						ТЧТовары.Номенклатура
		|					ИЗ
		|						ТЧТовары)) КАК СебестоимостьНоменклатурыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСебестоимость.Номенклатура,
		|	втСебестоимость.Характеристика,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(втСебестоимость.ПериодПоМагазину) < МАКСИМУМ(втСебестоимость.ПериодБезМагазина)
		|			ТОГДА МАКСИМУМ(втСебестоимость.ЦенаБезМагазина)
		|		ИНАЧЕ МАКСИМУМ(втСебестоимость.ЦенаПоМагазину)
		|	КОНЕЦ КАК Себестоимость
		|ПОМЕСТИТЬ втПоследняяСебестоимость
		|ИЗ
		|	втСебестоимость КАК втСебестоимость
		|
		|СГРУППИРОВАТЬ ПО
		|	втСебестоимость.Номенклатура,
		|	втСебестоимость.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧТовары.Номенклатура,
		|	ТЧТовары.Характеристика,
		|	ЕСТЬNULL(СебестоимостьТоваров.Себестоимость, 0) КАК Себестоимость
		|ИЗ
		|	ТЧТовары КАК ТЧТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоследняяСебестоимость КАК СебестоимостьТоваров
		|		ПО ТЧТовары.Характеристика = СебестоимостьТоваров.Характеристика
		|			И ТЧТовары.Номенклатура = СебестоимостьТоваров.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТЧТовары.НомерСтроки";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если ТекущаяСтрока = Неопределено Тогда
			ТаблицаРезультат = РезультатЗапроса.Выгрузить();
			Индекс = 0;
			СкрыватьПодсказку = Истина;
			Для Каждого Строка Из Объект.Товары Цикл
				
				Если Строка.ХарактеристикиИспользуются И НЕ ЗначениеЗаполнено(Строка.Характеристика) Тогда
					Продолжить;
				КонецЕсли;
				
				НеУстановленаСебестоимость = ТаблицаРезультат[Индекс].Себестоимость = 0;
				Строка.НеУстановленаСебестоимость = НеУстановленаСебестоимость;
				Индекс = Индекс + 1;
				
				Если НеУстановленаСебестоимость Тогда
					СкрыватьПодсказку = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Элементы.ДекорацияНеУстановленаСебестоимость.Видимость = НЕ СкрыватьПодсказку;
			
			Если СкрыватьПодсказку И Объект.ОшибкаСебестоимости = 1 Тогда
				Элементы.ДекорацияОшибкаПроведения.Видимость = Истина;
			Иначе
				Элементы.ДекорацияОшибкаПроведения.Видимость = Ложь;
			КонецЕсли;
			
		Иначе
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Если НЕ ЗначениеЗаполнено(Выборка.Себестоимость) Тогда
				СтрокаТоваров.НеУстановленаСебестоимость = Истина;
				СкрыватьПодсказку = Ложь;
				
				Элементы.ДекорацияНеУстановленаСебестоимость.Видимость = НЕ СкрыватьПодсказку;
				
				Если СкрыватьПодсказку И Объект.ОшибкаСебестоимости = 1 Тогда
					Элементы.ДекорацияОшибкаПроведения.Видимость = Истина;
				Иначе
					Элементы.ДекорацияОшибкаПроведения.Видимость = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // Разборка на комплектующие
		
		Элементы.ДекорацияНеУстановленаСебестоимость.Видимость = Ложь;
		Элементы.ДекорацияОшибкаПроведения.Видимость = Ложь;

		Если НЕ СпособУчетаСебестоимостиУпрощенный Тогда
			Элементы.ДекорацияДекорацияНеУстановленаСебестоимостьКомплект.Видимость = Ложь;
			Элементы.ДекорацияОшибкаПроведенияКомплект.Видимость = Ложь;
			Возврат;
		КонецЕсли;
		
		Если ХарактеристикиИспользуются И НЕ ЗначениеЗаполнено(Объект.Характеристика) Тогда
			Элементы.ДекорацияДекорацияНеУстановленаСебестоимостьКомплект.Видимость = Ложь;
			НеУстановленаСебестоимостьКомплекта = Ложь;
			Элементы.ДекорацияОшибкаПроведенияКомплект.Видимость = Ложь;
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СебестоимостьНоменклатурыСрезПоследних.Номенклатура,
		|	СебестоимостьНоменклатурыСрезПоследних.Характеристика,
		|	СебестоимостьНоменклатурыСрезПоследних.Период КАК ПериодПоМагазину,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодБезМагазина,
		|	СебестоимостьНоменклатурыСрезПоследних.Цена КАК ЦенаПоМагазину,
		|	NULL КАК ЦенаБезМагазина
		|ПОМЕСТИТЬ втСебестоимость
		|ИЗ
		|	РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(
		|			&Период,
		|			Магазин = &Магазин
		|				И Номенклатура = &Номенклатура
		|				И Характеристика = &Характеристика
		|				И НЕ Регистратор = &Ссылка) КАК СебестоимостьНоменклатурыСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СебестоимостьНоменклатурыСрезПоследних.Номенклатура,
		|	СебестоимостьНоменклатурыСрезПоследних.Характеристика,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	СебестоимостьНоменклатурыСрезПоследних.Период,
		|	NULL,
		|	СебестоимостьНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(
		|			&Период,
		|			Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
		|				И Номенклатура = &Номенклатура
		|				И Характеристика = &Характеристика
		|				И НЕ Регистратор = &Ссылка) КАК СебестоимостьНоменклатурыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСебестоимость.Номенклатура,
		|	втСебестоимость.Характеристика,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(втСебестоимость.ПериодПоМагазину) < МАКСИМУМ(втСебестоимость.ПериодБезМагазина)
		|			ТОГДА МАКСИМУМ(втСебестоимость.ЦенаБезМагазина)
		|		ИНАЧЕ МАКСИМУМ(втСебестоимость.ЦенаПоМагазину)
		|	КОНЕЦ КАК Себестоимость
		|ИЗ
		|	втСебестоимость КАК втСебестоимость
		|
		|СГРУППИРОВАТЬ ПО
		|	втСебестоимость.Номенклатура,
		|	втСебестоимость.Характеристика";
		
		Запрос.УстановитьПараметр("Период", Объект.Дата);
		Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
		Запрос.УстановитьПараметр("Номенклатура", Объект.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Объект.Характеристика);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			НеУстановленаСебестоимостьКомплекта = Выборка.Себестоимость = 0;
		Иначе
			НеУстановленаСебестоимостьКомплекта = Истина;
		КонецЕсли;
		
		Элементы.ДекорацияДекорацияНеУстановленаСебестоимостьКомплект.Видимость = НеУстановленаСебестоимостьКомплекта;
		
		Если НЕ НеУстановленаСебестоимостьКомплекта И Объект.ОшибкаСебестоимости = 2 Тогда
			Элементы.ДекорацияОшибкаПроведенияКомплект.Видимость = Истина;
		Иначе
			Элементы.ДекорацияОшибкаПроведенияКомплект.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	НастройкаСпособаУчета = ЗапасыСервер.ПолучитьСпособУчетаСебестоимости(Объект.Дата);
	СпособУчетаСебестоимостиУпрощенный = НастройкаСпособаУчета.СпособУчета = Перечисления.СпособыУчетаСебестоимости.АвтономныйУчет;
	ОбновитьИнформациюОСебестоимости();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов()
	
	Если НЕ ПараметрыУказанияСерий.ТЧ.ИспользоватьСерииНоменклатуры И НЕ Справочники.Номенклатура.ИспользуютсяПодарочныеСертификаты() Тогда
		Элементы.ТоварыСтатусыСерийИПодарочныхСертификатов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(ТекущееПоле)
	
	ВводСерийРазрешен = Истина;
	ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма, ПараметрыУказанияСерий.ТЧ, ВводСерийРазрешен);
	Если НЕ ВводСерийРазрешен Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыФормыУказанияСерий = ПолучитьПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, Ложь);
	ПараметрыФормыУказанияСерий.Вставить("ТекущееПоле", ТекущееПоле);
	
	ОбработчикУказанияСерий = Новый ОписаниеОповещения("ОбработатьУказаниеСерийТовары", ЭтотОбъект, ПараметрыФормыУказанияСерий);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, ПараметрыФормыУказанияСерий, ЭтаФорма,,,, ОбработчикУказанияСерий, РежимБлокировки);
	
КонецПроцедуры

// Процедура заполняет табличную часть Комплектующих из регистра сведений
// КомплектующиеНоменклатуры.
//
&НаСервере
Процедура ЗаполнитьНаСервере()
    
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	КомплектующиеНоменклатуры.Комплектующая КАК Номенклатура,
	|	КомплектующиеНоменклатуры.ХарактеристикаКомплектующей КАК Характеристика,
	|	КомплектующиеНоменклатуры.Количество * &Количество КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА КомплектующиеНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА КомплектующиеНоменклатуры.Количество * &Количество
	|		ИНАЧЕ КомплектующиеНоменклатуры.Количество * &Количество * КомплектующиеНоменклатуры.Упаковка.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	КомплектующиеНоменклатуры.Упаковка,
	|	КомплектующиеНоменклатуры.ДоляСтоимости,
	|	КомплектующиеНоменклатуры.Упаковка КАК Упаковка,
	|	КомплектующиеНоменклатуры.Комплектующая.ТипНоменклатуры КАК ТипНоменклатуры
	|ИЗ
	|	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
	|ГДЕ
	|	КомплектующиеНоменклатуры.Номенклатура = &Номенклатура
	|	И КомплектующиеНоменклатуры.Характеристика = &Характеристика");

	Запрос.УстановитьПараметр("Номенклатура", Объект.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Объект.Характеристика);
	Запрос.УстановитьПараметр("Количество", Объект.Количество);
	
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ТЧ);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ОбновитьИнформациюОСебестоимости();
	
	Для каждого ТекущаяСтрока Из Объект.Товары Цикл
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет организацию при изменении склада.
//
&НаСервере
Процедура ПриИзмененииСклада()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Организация");
	КонецЕсли;	
	
КонецПроцедуры

// Процедура заполняет склад при изменении магазина.
//
&НаСервере
Процедура ПриИзмененииМагазина()
	
	Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Объект.Магазин,,Объект.Склад, Пользователи.ТекущийПользователь());
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПриИзмененииСклада();
	КонецЕсли;
	
	ПерезаполнитьПараметрыПолитикиИОбновитьСтатусыУказанияСерий();
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ОбновитьИнформациюОСебестоимости();
КонецПроцедуры

// Управляет видимостью и доступностью элементов формы на сервере.
//
&НаСервере
Процедура УправлениеЭлементамиФормыНаСервере()
	
	Если Объект.Магазин.СкладУправляющейСистемы ИЛИ НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Склад","ТолькоПросмотр",Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	Элементы.Склад.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Магазин);
	
КонецПроцедуры

// Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора.
// Параметры:
//	Отказ - Булево
&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин"" не заполнено'"), Объект, "Объект.Магазин",,Отказ);
	КонецЕсли;
		
КонецПроцедуры

// Процедура заполняет товары из подбора.
// Параметры: 
//	ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ЗаполнитьСтрануПроисхождения");
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, Упаковка, КоличествоУпаковок");
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ТЧ);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ОбновитьИнформациюОСебестоимости();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ТоварыУпаковка".
//
&НаКлиенте
Процедура ПриИзмененииУпаковки(ТекущаяСтрока)

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "КоличествоУпаковок".
//
&НаКлиенте
Процедура ПриИзмененииКоличестваУпаковок(ТекущаяСтрока)

	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента);
	
КонецПроцедуры

#Область Серии

&НаСервере
Функция ПолучитьПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ТоварВШапке)
	
	Если ТоварВШапке Тогда
		Возврат ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий.Шапка, ТекущиеДанныеИдентификатор, ЭтаФорма);
	Иначе
		Возврат ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий.ТЧ, ТекущиеДанныеИдентификатор, ЭтаФорма);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(КэшированныеЗначения)

	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(Объект, 
				ПараметрыУказанияСерий.Шапка, КэшированныеЗначения);

КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, ТоварВШапке)
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);

	Если ТоварВШапке Тогда
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий.Шапка,ПараметрыФормыУказанияСерий,СтруктураДействий);
	Иначе
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий.ТЧ,ПараметрыФормыУказанияСерий,СтруктураДействий);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.УказатьСерииВШапке.Видимость          = ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры;
	Элементы.СтатусУказанияСерий.Видимость         = ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры;

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПараметрыПолитикиИОбновитьСтатусыУказанияСерий()

	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.СборкаТоваров.ПараметрыУказанияСерий(Объект));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.ТЧ);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Шапка);
	УстановитьВидимостьЭлементовСерий();
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)

	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий.ТЧ, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура СформироватьТекстДокументаЕГАИС()
	
	ИнтеграцияЕГАИСРТ.СформироватьТекстДокументаЕГАИС(ЭтотОбъект);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗапросПодчиненные = Новый Запрос;
		ЗапросПодчиненные.Текст = "ВЫБРАТЬ
		|	ЧекЕГАИС.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЧекЕГАИС КАК ЧекЕГАИС
		|ГДЕ
		|	ЧекЕГАИС.ДокументОснование = &ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АктСписанияЕГАИС.Ссылка
		|ИЗ
		|	Документ.АктСписанияЕГАИС КАК АктСписанияЕГАИС
		|ГДЕ
		|	АктСписанияЕГАИС.ДокументОснование = &ДокументОснование";
		ЗапросПодчиненные.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
		Выборка = ЗапросПодчиненные.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЭтотОбъект.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСБуферомОбмена
	
&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
		
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьКэшированныеЗначенияДляУчетаСерий(ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий.ТЧ, Ложь);
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);		
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
			ПараметрыУказанияСерий.ТЧ, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьКэшированныеЗначенияДляУчетаСерий(ТекущаяСтрока,
			КэшированныеЗначения,ПараметрыУказанияСерий.ТЧ,Ложь);
			
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатовВСтроке(ТекущаяСтрока);
		ОбновитьИнформациюОСебестоимости(Элементы.Товары.ТекущаяСтрока);
		
	КонецЦикла;
	
	КопированиеСтрокСервер.ОчиститьБуферОбмена();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти
