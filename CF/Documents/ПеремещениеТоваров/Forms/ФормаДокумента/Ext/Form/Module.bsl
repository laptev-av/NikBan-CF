&НаКлиенте
Перем КэшированныеЗначения;

// Используется для передачи текущей строки в обработчик ожидания.
&НаКлиенте
Перем ТекущиеДанныеИдентификатор;

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
		ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
		ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		
	Иначе // Номенклатура.
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТВызовСервера.ОбработатьДанныеПоНоменклатуреИзТСДСервер(ЭтотОбъект, СтруктураПараметров);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	
	ДобавленаСтрока = Ложь;
	ТекущаяСтрока = ПодключаемоеОборудованиеРТВызовСервера.ИнициализацияСтрокиТоваров(ЭтотОбъект, СтруктураПараметров, ДобавленаСтрока);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	Если ДобавленаСтрока Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" , СтруктураЗаполненияЦеныСервер());
		СтруктураСправки = Новый Структура;
		СтруктураСправки.Вставить("Дата", Объект.Дата);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаСправкиНаАлкоголь", СтруктураСправки);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	

	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ЗавершениеОбработкиСтрокиТоваров(ЭтотОбъект, ТекущаяСтрока, СтруктураДействий);
	
	Если Не ЕстьАлкогольнаяПродукцияЕГАИС И ТекущаяСтрока.НеобходимостьВводаСправкиНаАлкоголь Тогда
		ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
		УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ДобавитьНайденныеСерийныеНомера(ЭтотОбъект, СтруктураНомера);
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьВесЗавершение(Результат, Параметры) Экспорт
	
	Если Результат Тогда
		ТоварыКоличествоУпаковокПриИзменении(ЭтотОбъект);
		ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданиеИВыборНовойХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ТекущаяСтрока.Характеристика = Результат;
	ТоварыХарактеристикаПриИзменении(Неопределено);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОповещениеПоискаПоНаименованию(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ЗавершитьОбработкуДанныхПоКодуКлиент(Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.ТТНИсходящаяЕГАИС) Тогда 
		Элементы.ФормаСоздатьНаОснованииТТНИсходящаяЕГАИС.Видимость = Ложь;	
	КонецЕсли;
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,Элементы.КартинкаСостоянияДокумента.Подсказка,РазрешеноПроведение);
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ПеремещениеТоваров.ПараметрыУказанияСерий(Объект));
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.ДокументОснование.Видимость = Ложь;
		Элементы.ПредставлениеДокументаОснования.Видимость = Ложь;
	Иначе
		
		ОснованиеОбъект = Объект.ДокументОснование.ПолучитьОбъект();
		
		Если ОснованиеОбъект = Неопределено Тогда
			Элементы.ДокументОснование.Видимость = Ложь;
		Иначе
			Элементы.ПредставлениеДокументаОснования.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТипУслуга = Перечисления.ТипыНоменклатуры.Услуга;
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		
		УстановитьСостояниеОтклонениеПриПеремещении();
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
		ОбновитьИтоговыеПоказатели(ЭтотОбъект);
		
		// ИнтеграцияЕГАИС
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаСправкиНаАлкоголь(Объект.Товары);
		
		ЕстьАлкогольнаяПродукцияЕГАИС = Ложь;
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если СтрокаТовары.НеобходимостьВводаСправкиНаАлкоголь Тогда
				ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// Конец ИнтеграцияЕГАИС
		
		УправлениеЭлементамиФормыНаСервере();
		
	КонецЕсли;
	
	// ИнтеграцияЕГАИС
	СформироватьТекстДокументаЕГАИС();
	// Конец ИнтеграцияЕГАИС
	
	// ИнтеграцияИС
	ИнтеграцияИС.ПриСозданииНаСервереВФормеДокументаОснования(ЭтотОбъект, Объект);
	// Конец ИнтеграцияИС
	
	ИспользоватьПередачиТоваровМеждуОрганизациями = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИспользоватьПередачиТоваровМеждуОрганизациями") 
		И ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями");
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	НастроитьФормуПоДополнительнымПравам();
	
	УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов();
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ПроверитьВыводНапоминанияЕГАИС();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ТипУслуга = Перечисления.ТипыНоменклатуры.Услуга;
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	СтруктураСправки = Новый Структура;
	СтруктураСправки.Вставить("Дата", Объект.Дата);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаСправкиНаАлкоголь(Объект.Товары, СтруктураСправки);
	
	// ИнтеграцияЕГАИС
	ЕстьАлкогольнаяПродукцияЕГАИС = Ложь;
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если СтрокаТовары.НеобходимостьВводаСправкиНаАлкоголь Тогда
			ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СформироватьТекстДокументаЕГАИС();
	// Конец ИнтеграцияЕГАИС
	
	УправлениеЭлементамиФормыНаСервере();
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	УстановитьСостояниеОтклонениеПриПеремещении();
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	ДанныеТранспортногоРаздела = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ДанныеТранспортногоРаздела").Получить();
	
	// ИнтеграцияИС
	ИнтеграцияИС.ПриЧтенииНаСервереВФормеДокументаОснования(ЭтотОбъект, Объект);
	// Конец ИнтеграцияИС
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДанныеТранспортногоРаздела = Новый ХранилищеЗначения(ДанныеТранспортногоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	УстановитьСостояниеОтклонениеПриПеремещении();
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	// ИнтеграцияЕГАИС
	СтруктураСправки = Новый Структура;
	СтруктураСправки.Вставить("Дата", Объект.Дата);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаСправкиНаАлкоголь(Объект.Товары, СтруктураСправки);
	УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
	
	СформироватьТекстДокументаЕГАИС();
	// Конец ИнтеграцияЕГАИС
	
		// ИнтеграцияИС
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеДокументаОснования(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтеграцияИС

	ДанныеТранспортногоРаздела = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ДанныеТранспортногоРаздела").Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);

	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Или ИмяСобытия = "ВставкаСтрокИзБуфераОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбмена();
	КонецЕсли;
	
	// ИнтеграцияЕГАИС
	Если ИмяСобытия = "Запись_ВозвратИзРегистра2ЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ПередачаВРегистр2ЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ТТНВходящаяЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
		Если НЕ Модифицированность Тогда
			Прочитать();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ТТНИсходящаяЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
		Если НЕ Модифицированность Тогда
			Прочитать();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменЕГАИС"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусЕГАИСВФормахДокументов)) Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	// Конец ИнтеграцияЕГАИС
	
	// ИнтеграцияИС
	ИнтеграцияИСКлиент.ОбработкаОповещенияВФормеДокументаОснования(
		ЭтотОбъект,
		Объект,
		ИмяСобытия,
		Параметр,
		Источник);
	// Конец ИнтеграцияИС
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
	                                            "Документ.ПеремещениеТоваров.ФормаДокумента.Запись",
                                                           Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура МагазинОтправительПриИзменении(Элемент)
	
	ПриИзмененииМагазина("Отправитель");
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПолучательПриИзменении(Элемент)
	
	ПриИзмененииМагазина("Получатель");
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительПриИзменении(Элемент)
	
	ПриИзмененииСклада("Отправитель");
	
	ПроверитьВыводНапоминанияЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательПриИзменении(Элемент)
	
	ПриИзмененииСклада("Получатель");
	
	ПроверитьВыводНапоминанияЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТТНИсходящаяЕГАИСНажатие(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.ТТНИсходящаяЕГАИС) Тогда
		ПоказатьЗначение(, Объект.ТТНИсходящаяЕГАИС);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТТНВходящаяЕГАИСНажатие(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.ТТНВходящаяЕГАИС) Тогда
		ПоказатьЗначение(, Объект.ТТНВходящаяЕГАИС);
	КонецЕсли;
КонецПроцедуры

// ИнтеграцияЕГАИС
&НаКлиенте
Процедура ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЕстьОшибки = Ложь;
	
	ПроверитьВозможностьВводаНаОсновании(Объект.Ссылка, ЕстьОшибки);
	
	Если Не ЕстьОшибки Тогда 
		ИнтеграцияЕГАИСКлиент.ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры
// Конец ИнтеграцияЕГАИС

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено И (ТекущиеДанные.ИспользоватьСерийныеНомера ИЛИ НЕ ТекущиеДанные.СтатусУказанияСерий = 0) Тогда
			Отказ = Истина;
			Если ТекущиеДанные.ИспользоватьСерийныеНомера Тогда
				ВвестиПодарочныеСертификаты();
			Иначе
				УказатьСерии("КоличествоУпаковок");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыУпаковка 
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕдиницаИзмерения Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
			Отказ = Истина;
			УказатьСерии("Упаковка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
	ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦеныКлиент());
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	СтруктураСправки = Новый Структура;
	СтруктураСправки.Вставить("Дата", Объект.Дата);
	СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаСправкиНаАлкоголь", СтруктураСправки);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущаяСтрока);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	
	Если Не ЕстьАлкогольнаяПродукцияЕГАИС И ТекущаяСтрока.НеобходимостьВводаСправкиНаАлкоголь Тогда
		ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
		УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
	КонецЕсли;
	
	ПроверитьВыводНапоминанияЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" , СтруктураЗаполненияЦеныКлиент());
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" , СтруктураЗаполненияЦеныКлиент());
	КонецЕсли;
		
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ПриИзмененииТоварыКоличестваУпаковок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
			
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
	УдаляемыйКлючСвязи = Элементы.Товары.ТекущиеДанные.КлючСвязи;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		ТекущаяСтрока                          = Элементы.Товары.ТекущиеДанные;
		ТекущаяСтрока.КлючСвязиСерийныхНомеров = 0;
		
		Если ТекущаяСтрока.ИспользоватьСерийныеНомера Тогда
			ТекущаяСтрока.КоличествоУпаковок = 0;
			ТекущаяСтрока.Количество = 0;
		КонецЕсли;
		
		ТекущаяСтрока.КлючСвязи = 0;
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);
	
	РедактированиеТЧТовары = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущиеДанные);
	
	РедактированиеТЧТовары = Ложь;
	
	Если НоваяСтрока Тогда
		ПроверитьВыводНапоминанияЕГАИС();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ТоварыПослеУдаленияСервер();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	// ИнтеграцияЕГАИС
	Если ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		ЕстьАлкогольнаяПродукцияЕГАИС = Ложь;
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если СтрокаТовары.НеобходимостьВводаСправкиНаАлкоголь Тогда
				ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтеграцияЕГАИС
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если РедактированиеТЧТовары Тогда
		Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок Тогда
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			Если НЕ ТекущиеДанные = Неопределено И (ТекущиеДанные.ИспользоватьСерийныеНомера ИЛИ НЕ ТекущиеДанные.СтатусУказанияСерий = 0) Тогда
				Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				Если ТекущиеДанные.ИспользоватьСерийныеНомера Тогда
					ВвестиПодарочныеСертификаты();
				Иначе
					УказатьСерии("КоличествоУпаковок");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыУпаковка 
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕдиницаИзмерения Тогда
			
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			
			Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
				Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				УказатьСерии("Упаковка");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ИнтеграцияИС

// ИнтеграцияИС

&НаКлиенте
Процедура Подключаемый_ПолеИнтеграцииИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		ЭтотОбъект,
		Объект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(ДополнительныеПараметры)
	
	ИнтеграцияИС.ОбновитьПолеИнтеграцииВФормеДокументаОснования(ЭтотОбъект, Объект, ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ИнтеграцияИС

#КонецОбласти

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ОповещенияПриПолученииВеса = Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект);
	ПодключаемоеОборудованиеРТКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ОповещенияПриПолученииВеса, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоискПоНаименованию(Команда)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Магазин",Объект.МагазинОтправитель);
	РаботаСПравиламиИменованияКлиент.ПоискПоНаименованию(ЭтаФорма,ПараметрыПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоРозничнымЦенам(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.МагазинОтправитель) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенамСервер();
			ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоРозничнымЦенам(ЦеныРассчитаны, Объект.МагазинОтправитель);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦен(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	Иначе
		
		СтруктураПараметров = Новый Структура;
		СтруктураОтбора     = Новый Структура;
		Если ИспользоватьПередачиТоваровМеждуОрганизациями Тогда
			СтруктураОтбора.Вставить("ИспользоватьПриПередачеМеждуОрганизациями", Истина);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
		СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
		
		Обработчик = Новый ОписаниеОповещения("ОбработчикЗаполнитьЦеныПоВидуЦен", ЭтотОбъект);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.ВидыЦен.Форма.ФормаВыбора", СтруктураПараметров, ЭтотОбъект,,,, Обработчик, Режим);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.МагазинОтправитель) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'перемещение товаров'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.МагазинОтправитель);
	ПараметрыФормы.Вставить("РежимПодбораБезУслуг", Ложь);
	ПараметрыФормы.Вставить("ИспользоватьОтборПоТипамНоменклатуры", Истина);
	ПараметрыФормы.Вставить("Склад", Объект.СкладОтправитель);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если НЕ ЕстьПравоИзменятьЦену() Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

#Область КомандыЕГАИС

&НаКлиенте
Процедура ПодобратьСправки2(Команда)
	
	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.МагазинОтправитель) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин отправитель"" не заполнено'"), 
			Объект, 
			"Объект.МагазинОтправитель",
			,
			Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Организация отправитель"" не заполнено'"), 
			Объект, 
			"Объект.Организация",
			,
			Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПодобратьСправки2НаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОснованииТТНИсходящаяЕГАИС(Команда)
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("СоздатьНаОснованииТТНИсходящаяЕГАИСПослеЗаписиПеремещенияТоваров", ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные еще не записаны.
				|Выполнение действия ""%1"" возможно только после записи данных.
				|Данные будут записаны.'"),
			НСтр("ru='Товарно-транспортная накладная ЕГАИС (исходящая): создать на основании'"));
			
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеПродолжения", ОповещениеПродолжения);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьПеремещениеТоваровПодтверждениеЗаписи", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеПродолжения);
	
КонецПроцедуры

#КонецОбласти
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура РедактироватьДанныеТранспортногоРаздела(Команда)
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("РедактироватьДанныеТранспортногоРазделаПослеЗаписиПеремещенияТоваров", ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные еще не записаны.
				|Выполнение действия ""%1"" возможно только после записи данных.
				|Данные будут записаны.'"),
			НСтр("ru='Редактирование транспортного раздела'"));
			
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеПродолжения", ОповещениеПродолжения);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьПеремещениеТоваровПодтверждениеЗаписи", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	ПолучитьСтрокиИзБуфераОбмена();
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере("Товары");
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработчикЗаполнитьЦеныПоВидуЦен(ВидЦены, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦены) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦены);
		ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦены);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов()
	
	Если НЕ ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры И НЕ Справочники.Номенклатура.ИспользуютсяПодарочныеСертификаты() Тогда
		Элементы.ТоварыСтатусыСерийИПодарочныхСертификатов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПодарочныеСертификаты()
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиСерийныеНомераНоменклатурыВТЧ(ЭтотОбъект, Объект.СерийныеНомера, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодбораПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры) Экспорт
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПослеВводаНомеровПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры);
	
	ПересчетКоличества = ДополнительныеПараметры.ПересчетКоличества;
	
	Если ПересчетКоличества Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
		ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(ТекущееПоле)
	
	ВводСерийРазрешен = Истина;
	ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий, ВводСерийРазрешен);
	Если НЕ ВводСерийРазрешен Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	ПараметрыФормыУказанияСерий.Вставить("ТекущееПоле", ТекущееПоле);
	ПараметрыФормыУказанияСерий.Вставить("КоличествоЕдиницДоПересчета");
	
	ОбработчикУказанияСерий = Новый ОписаниеОповещения("ОбработатьУказаниеСерий", ЭтотОбъект, ПараметрыФормыУказанияСерий);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, ПараметрыФормыУказанияСерий, ЭтотОбъект,,,, ОбработчикУказанияСерий, РежимБлокировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУказаниеСерий(ЗначениеВозврата, ПараметрыФормыУказанияСерий) Экспорт
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("ЗначениеВозврата", ЗначениеВозврата);
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

// Функция заполняет цену выделенных строк по розничным ценам в ТЧ Товары.
// Возвращаемое значение - Булево - Цены рассчитаны.
&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенамСервер()
	
	СтруктураПараметров                           = ЗапасыСервер.СтруктураПараметровЗаполненияПоРозничнымЦенам();
	СтруктураПараметров.Объект                    = Объект;
	СтруктураПараметров.ИмяТабличнойЧасти         = "Товары";
	СтруктураПараметров.Магазин                   = Объект.МагазинОтправитель;
	СтруктураПараметров.ВыделенныеСтроки          = Элементы.Товары.ВыделенныеСтроки;
	СтруктураПараметров.Дата                      = ЗапасыСервер.ДатаДляЦенообразованияДляДокумента(Объект);
	СтруктураПараметров.ЕстьНДС                   = Ложь;
	
	ЦеныРассчитаны = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенам(СтруктураПараметров);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Функция заполняет цену выделенных строк по виду цен в ТЧ Товары.
// Возвращаемое значение - Булево - Цены рассчитаны.
&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦены)
	
	СтруктураПараметров                   = ЗапасыСервер.СтруктураПараметровЗаполненияПоВидуЦен();
	СтруктураПараметров.Объект            = Объект;
	СтруктураПараметров.ИмяТабличнойЧасти = "Товары";
	СтруктураПараметров.ВидЦен            = ВидЦены;
	СтруктураПараметров.ВыделенныеСтроки  = Элементы.Товары.ВыделенныеСтроки;
	СтруктураПараметров.Дата              = ЗапасыСервер.ДатаДляЦенообразованияДляДокумента(Объект);
	СтруктураПараметров.ЕстьНДС           = Ложь;
	
	ЦеныРассчитаны = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(СтруктураПараметров);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора.
// Параметры:
//	Отказ - Булево
&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.МагазинОтправитель) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин отправитель"" не заполнено'"), Объект, "Объект.МагазинОтправитель",,Отказ);
	КонецЕсли;
		
КонецПроцедуры

// Процедура заполняет товары из подбора.
// Параметры: 
//	ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	ТаблицаСерийныхНомеров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресСерийныхНомеровВХранилище);
	ЕстьСерийныеНомера = ТаблицаСерийныхНомеров.Количество() > 0;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура,
															  |Характеристика,
															  |Упаковка,
															  |Цена,
															  |КоличествоУпаковок,
															  |ХарактеристикиИспользуются,
															  |ИспользоватьСерийныеНомера");
		Если ЕстьСерийныеНомера Тогда
			МассивСерийныхНомеров = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(СтрокаТовара.КлючСвязиСерийныхНомеров , ТаблицаСерийныхНомеров);
			ТекущаяСтрока.КлючСвязиСерийныхНомеров = ОбработкаТабличнойЧастиТоварыСервер.ДобавитьСерийныеНомераВТабличнуюЧасть(Объект.СерийныеНомера, МассивСерийныхНомеров, 0);
		КонецЕсли;
		Если СтрокаТовара.ИспользоватьСерийныеНомера Тогда
			Если ЕстьСерийныеНомера Тогда
				ТекущаяСтрока.КоличествоУпаковок = МассивСерийныхНомеров.Количество();
			Иначе
				ТекущаяСтрока.КоличествоУпаковок = 0;
			КонецЕсли;
		КонецЕсли;
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		СтруктураСправки = Новый Структура;
		СтруктураСправки.Вставить("Дата", Объект.Дата);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаСправкиНаАлкоголь", СтруктураСправки);
	
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ЗаполнитьСтатусыУказанияСерийСервер();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ОбновитьИтоговыеПоказатели(ЭтотОбъект);
	
	Если Не ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		ЕстьАлкогольнаяПродукцияЕГАИС = Ложь;
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если СтрокаТовары.НеобходимостьВводаСправкиНаАлкоголь Тогда
				ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыЦена.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСумма.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);

КонецПроцедуры

// Процедура управляет видимостью и доступностью элементов формы на сервере.
//
&НаСервере
Процедура УправлениеЭлементамиФормыНаСервере()
	
	Если Объект.МагазинОтправитель.СкладУправляющейСистемы Тогда
		Элементы.СкладОтправитель.ТолькоПросмотр = Истина;
		Элементы.СкладОтправитель.КнопкаВыбора = Ложь;
	Иначе
		Элементы.СкладОтправитель.КнопкаВыбора = Истина;
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СкладОтправитель", "ТолькоПросмотр", НЕ ЗначениеЗаполнено(Объект.МагазинОтправитель));
		
	КонецЕсли;
	
	Если Объект.МагазинПолучатель.СкладУправляющейСистемы Тогда
		Элементы.СкладПолучатель.ТолькоПросмотр = Истина;
		Элементы.СкладПолучатель.КнопкаВыбора = Ложь;
	Иначе
		Элементы.СкладПолучатель.КнопкаВыбора = Истина;
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СкладПолучатель", "ТолькоПросмотр", НЕ ЗначениеЗаполнено(Объект.МагазинПолучатель));
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
	
КонецПроцедуры

// Процедура заполняет склад при изменении магазина.
// Параметры:
// ИмяРеквизита - Тип: Строка, "Отправитель" или "Получатель".
&НаСервере
Процедура ПриИзмененииМагазина(ИмяРеквизита)
	
	Если ЗначениеЗаполнено(Объект["Магазин" + ИмяРеквизита]) Тогда
		Объект["Склад" + ИмяРеквизита] = ЗначениеНастроекПовтИсп.ПолучитьСкладПродажиПоУмолчанию(Объект["Магазин" + ИмяРеквизита],,, Пользователи.ТекущийПользователь());
	Иначе
		Объект["Склад" + ИмяРеквизита] = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	ПриИзмененииСклада(ИмяРеквизита);
	
	УправлениеЭлементамиФормыНаСервере();
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ПеремещениеТоваров.ПараметрыУказанияСерий(Объект));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	СтруктураВозврата = ОпределитьОтправителяИПолучателя(Объект.МагазинОтправитель, Объект.МагазинПолучатель);
	
	ЭтоУзелОтправитель = СтруктураВозврата.ЭтоУзелОтправитель;
	ЭтоУзелПолучатель = СтруктураВозврата.ЭтоУзелПолучатель;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСклада(ИмяРеквизита)
	
	Склад = Объект["Склад" + ИмяРеквизита];
	Если ЗначениеЗаполнено(Склад) Тогда
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "Организация");
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если ИмяРеквизита = "Отправитель" Тогда
		Объект.Организация = Организация;
	Иначе
		Объект.ОрганизацияПолучатель = Организация;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает изменение количества упаковок.
//
// Параметры:
//  Нет;
//
&НаКлиенте
Процедура ПриИзмененииТоварыКоличестваУпаковок()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

Функция ЕстьПравоИзменятьЦену()
	
	Возврат УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
	
КонецФункции

&НаСервере
Процедура УстановитьСостояниеОтклонениеПриПеремещении()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыКОтгрузкеОстаткиИОбороты.ДокументОснование,
	|	ТоварыКОтгрузкеОстаткиИОбороты.Номенклатура,
	|	ТоварыКОтгрузкеОстаткиИОбороты.Характеристика,
	|	ТоварыКОтгрузкеОстаткиИОбороты.КоличествоПриход КАК КОтгрузке,
	|	ТоварыКОтгрузкеОстаткиИОбороты.КоличествоРасход КАК Отгружено,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузкеОстаткиИОбороты.КоличествоКонечныйОстаток > 0
	|			ТОГДА ТоварыКОтгрузкеОстаткиИОбороты.КоличествоКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Недорасход,
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузкеОстаткиИОбороты.КоличествоКонечныйОстаток < 0
	|			ТОГДА -ТоварыКОтгрузкеОстаткиИОбороты.КоличествоКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Перерасход
	|ПОМЕСТИТЬ ТоварыКОтгрузке
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(, , , , ДокументОснование = &ДокументОснование) КАК ТоварыКОтгрузкеОстаткиИОбороты
	|ГДЕ
	|	НЕ ТоварыКОтгрузкеОстаткиИОбороты.КоличествоОборот = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКПоступлениюОстаткиИОбороты.ДокументОснование,
	|	ТоварыКПоступлениюОстаткиИОбороты.Номенклатура,
	|	ТоварыКПоступлениюОстаткиИОбороты.Характеристика,
	|	ТоварыКПоступлениюОстаткиИОбороты.КоличествоПриход КАК КПоступлению,
	|	ТоварыКПоступлениюОстаткиИОбороты.КоличествоРасход КАК Поступило,
	|	ВЫБОР
	|		КОГДА ТоварыКПоступлениюОстаткиИОбороты.КоличествоКонечныйОстаток > 0
	|			ТОГДА ТоварыКПоступлениюОстаткиИОбороты.КоличествоКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Недопоставка,
	|	ВЫБОР
	|		КОГДА ТоварыКПоступлениюОстаткиИОбороты.КоличествоКонечныйОстаток < 0
	|			ТОГДА -ТоварыКПоступлениюОстаткиИОбороты.КоличествоКонечныйОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Перепоставка
	|ПОМЕСТИТЬ ТоварыКПриемке
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.ОстаткиИОбороты(, , , , ДокументОснование = &ДокументОснование) КАК ТоварыКПоступлениюОстаткиИОбороты
	|ГДЕ
	|	НЕ ТоварыКПоступлениюОстаткиИОбороты.КоличествоОборот = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(ТоварыКОтгрузке.ДокументОснование, ТоварыКПриемке.ДокументОснование) КАК ДокументОснование,
	|	ЕСТЬNULL(ТоварыКОтгрузке.Номенклатура, ТоварыКПриемке.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ТоварыКОтгрузке.Характеристика, ТоварыКПриемке.Характеристика) КАК Характеристика,
	|	ТоварыКОтгрузке.КОтгрузке,
	|	ТоварыКОтгрузке.Отгружено,
	|	ТоварыКОтгрузке.Недорасход,
	|	ТоварыКОтгрузке.Перерасход,
	|	ТоварыКПриемке.КПоступлению,
	|	ТоварыКПриемке.Поступило,
	|	ТоварыКПриемке.Недопоставка,
	|	ТоварыКПриемке.Перепоставка
	|ИЗ
	|	ТоварыКПриемке КАК ТоварыКПриемке
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|		ПО ТоварыКПриемке.ДокументОснование = ТоварыКОтгрузке.ДокументОснование
	|			И ТоварыКПриемке.Номенклатура = ТоварыКОтгрузке.Номенклатура
	|			И ТоварыКПриемке.Характеристика = ТоварыКОтгрузке.Характеристика";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		КартинкаСостоянияОтклонениеПриПеремещении = 1;
	Иначе
		КартинкаСостоянияОтклонениеПриПеремещении = 0;
	КонецЕсли;
	
	Элементы.КартинкаСостоянияОтклонениеПриПеремещении.Видимость = КартинкаСостоянияОтклонениеПриПеремещении = 0;
	
КонецПроцедуры

#Область Серии

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку");
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоговыеПоказатели(Форма)
	
	ТоварыСумма = 0;
	УслугиСумма = 0;
	
	Для Каждого Строка Из Форма.Объект.Товары Цикл
		
		Если Не ЗначениеЗаполнено(Строка.ТипНоменклатуры) И ЗначениеЗаполнено(Строка.Номенклатура) Тогда 	
			Строка.ТипНоменклатуры = ПолучитьТипНоменклатуры(Строка.Номенклатура);	
		КонецЕсли;
		
		Если Строка.ТипНоменклатуры = Форма.ТипУслуга Тогда
			УслугиСумма = УслугиСумма + Строка.Сумма;
		Иначе
			ТоварыСумма = ТоварыСумма + Строка.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.СуммаТоваров = ТоварыСумма;
	Форма.СуммаУслуг = УслугиСумма;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТипНоменклатуры(Номенклатура)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ТипНоменклатуры");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция СтруктураЗаполненияЦеныКлиент()
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата", Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("ОбъектЦенообразования", Объект.МагазинОтправитель);
	СтруктураЗаполненияЦены.Вставить("ПриводитьКМинимальнойЦене", Ложь);
	Возврат СтруктураЗаполненияЦены;
КонецФункции // СтруктураЗаполненияЦены()

&НаСервере
Функция СтруктураЗаполненияЦеныСервер()
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата", Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("ОбъектЦенообразования", Объект.МагазинОтправитель);
	СтруктураЗаполненияЦены.Вставить("ПриводитьКМинимальнойЦене", Ложь);
	Возврат СтруктураЗаполненияЦены;
КонецФункции // СтруктураЗаполненияЦены()

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	РазвернутьСвернутьТЧНаСервере();
КонецПроцедуры

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	ПоложениеКоманднойПанели               = ?(ВидимостьЭлементов, ПоложениеКоманднойПанелиФормы.Авто, ПоложениеКоманднойПанелиФормы.Нет);
	Элементы.ГруппаОснование.Видимость     = ВидимостьЭлементов;
	Элементы.Шапка.Видимость               = ВидимостьЭлементов;
	Элементы.ГруппаОтветственный.Видимость = ВидимостьЭлементов;
	Элементы.РазвернутьСвернутьТЧ.Картинка = ?(ВидимостьЭлементов, БиблиотекаКартинок.РазвернутьТабличнуюЧасть, БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияСервер()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеСерийныеНомера(ЭтотОбъект);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", УдаляемыйКлючСвязи);
	
	ЕстьУдаляемыеСтроки = УдаляемыйКлючСвязи > 0;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Справки 1 и 2
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыСправка2НомерСправки1");
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыСправка2");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НеобходимостьВводаСправкиНаАлкоголь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<только для алкогольной продукции>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	СтруктураСправки = Новый Структура;
	СтруктураСправки.Вставить("Дата", Объект.Дата);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаСправкиНаАлкоголь(Объект.Товары, СтруктураСправки);
	
	УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
	
КонецПроцедуры

#Область СлужебныеЕГАИС

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьИДоступностьЕГАИС(Форма)
	
	ПараметрыВидимости = ПараметрыВидимостиЭлементовЕГАИС(Форма.Объект.Дата, Форма.Объект.МагазинОтправитель, Форма.Объект.МагазинПолучатель);
	
	УчетАлкоголя = ПараметрыВидимости.НужноРаботатьСЕГАИС И Форма.ЕстьАлкогольнаяПродукцияЕГАИС;
	
	Форма.ЭтоУзелОтправитель = ПараметрыВидимости.ЭтоУзелОтправитель;
	Форма.ЭтоУзелПолучатель = ПараметрыВидимости.ЭтоУзелПолучатель;
	
	Если ЗначениеЗаполнено(Форма.Объект.МагазинОтправитель) Тогда
		Форма.Элементы.ТоварыПодобратьСправки2.Видимость     = УчетАлкоголя И НЕ ПараметрыВидимости.ОтправительУправляющаяСистема;
		Форма.Элементы.ТоварыСправка2НомерСправки1.Видимость = УчетАлкоголя И НЕ ПараметрыВидимости.ОтправительУправляющаяСистема;
		Форма.Элементы.ТоварыСправка2.Видимость              = УчетАлкоголя И НЕ ПараметрыВидимости.ОтправительУправляющаяСистема;
	Иначе
		Форма.Элементы.ТоварыПодобратьСправки2.Видимость     = УчетАлкоголя;
		Форма.Элементы.ТоварыСправка2НомерСправки1.Видимость = УчетАлкоголя;
		Форма.Элементы.ТоварыСправка2.Видимость              = УчетАлкоголя;
	КонецЕсли;
	
	Форма.Элементы.ТТНВходящаяЕГАИС.Видимость = УчетАлкоголя
		И Форма.ЭтоУзелПолучатель
		И ЗначениеЗаполнено(Форма.Объект.ТТНВходящаяЕГАИС);
		
	Форма.Элементы.ТТНИсходящаяЕГАИС.Видимость = УчетАлкоголя
		И Форма.ЭтоУзелОтправитель
		И ЗначениеЗаполнено(Форма.Объект.ТТНИсходящаяЕГАИС);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьВременныеДанныеТранспортногоРаздела(РезультатОповещения)
	
	ДанныеТранспортногоРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РезультатОповещения);
	
	РезультатЗаписи = Ложь;
	Попытка
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	Исключение
		СтрокаОшибки = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru = 'Не удалось сохранить транспортный раздел ТТН по причине:'") + Символы.ПС + СтрокаОшибки.Описание;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьСправки2НаСервере()
	
	ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(Объект.Организация, Объект.МагазинОтправитель);
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
		ВызватьИсключение НСтр("ru='Не найдена сопоставленная организация ЕГАИС'");
	КонецЕсли;
	
	ТаблицаТоваров = Объект.Товары.Выгрузить();
	
	Если НЕ ИнтеграцияЕГАИСРТ.ПроверитьКоэффициентПересчетаВДАЛ(ЭтотОбъект, ТаблицаТоваров) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НачальныйНомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	ТаблицаТоваров.Справка2 КАК Справка2,
	|	ТаблицаТоваров.КоличествоУпаковок КАК Количество,
	|	ТаблицаТоваров.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НачальныйНомерСтроки КАК НачальныйНомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	ТаблицаТоваров.Справка2 КАК Справка2,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.КоличествоУпаковок КАК КоличествоУпаковок,
	|	МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция) КАК АлкогольнаяПродукция,
	|	СоответствиеНоменклатурыЕГАИС.Серия КАК Серия
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО ТаблицаТоваров.Номенклатура = СоответствиеНоменклатурыЕГАИС.Номенклатура
	|			И ТаблицаТоваров.Характеристика = СоответствиеНоменклатурыЕГАИС.Характеристика
	|			И (СоответствиеНоменклатурыЕГАИС.Порядок = 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.НачальныйНомерСтроки,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.КоличествоУпаковок,
	|	ТаблицаТоваров.Количество,
	|	СоответствиеНоменклатурыЕГАИС.Серия,
	|	ТаблицаТоваров.Справка2";
	
	ДатаОстатков = ?(ЗначениеЗаполнено(Объект.Ссылка), Новый Граница(Объект.Дата, ВидГраницы.Исключая), Неопределено);
	
	ТаблицаРаспределения = Запрос.Выполнить().Выгрузить();
	
	СтруктураПересчетаСуммы = ИнтеграцияЕГАИСКлиентСервер.СтруктураПересчетаСуммы("КоличествоУпаковок");
	ИнтеграцияЕГАИС.ПодобратьСправки2ДляСписанияИзРегистра1(ТаблицаРаспределения, ОрганизацияЕГАИС, ДатаОстатков, СтруктураПересчетаСуммы);
	
	ИсходныеТовары = Объект.Товары.Выгрузить();
	ИсходныеТовары.Колонки.Добавить("НачальныйНомерСтроки", Новый ОписаниеТипов("Число"));
	Для Каждого Стр Из ИсходныеТовары Цикл
		Стр.НачальныйНомерСтроки = Стр.НомерСтроки;
	КонецЦикла;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для Каждого СтрокаРаспределения Из ТаблицаРаспределения Цикл
		
		Если СтрокаРаспределения.Справка2.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаИсходныеТовары = ИсходныеТовары.Найти(СтрокаРаспределения.НачальныйНомерСтроки, "НачальныйНомерСтроки");
		Если СтрокаИсходныеТовары = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТовары = ИсходныеТовары.Вставить(ИсходныеТовары.Индекс(СтрокаИсходныеТовары) + 1);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаИсходныеТовары);
		
		НоваяСтрокаТовары.Справка2 = СтрокаРаспределения.Справка2;
		НоваяСтрокаТовары.КоличествоУпаковок = Мин(СтрокаРаспределения.Количество, СтрокаИсходныеТовары.КоличествоУпаковок);
		НоваяСтрокаТовары.Сумма = (НоваяСтрокаТовары.КоличествоУпаковок/СтрокаИсходныеТовары.КоличествоУпаковок) * СтрокаИсходныеТовары.Сумма;
		
		СтрокаИсходныеТовары.КоличествоУпаковок = СтрокаИсходныеТовары.КоличествоУпаковок - НоваяСтрокаТовары.КоличествоУпаковок;
		СтрокаИсходныеТовары.Сумма = СтрокаИсходныеТовары.Сумма - НоваяСтрокаТовары.Сумма;
		
		Если СтрокаИсходныеТовары.КоличествоУпаковок = 0 Тогда
			НоваяСтрокаТовары.Сумма = НоваяСтрокаТовары.Сумма + СтрокаИсходныеТовары.Сумма;
			ИсходныеТовары.Удалить(СтрокаИсходныеТовары);
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(НоваяСтрокаТовары, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	Объект.Товары.Очистить();
	Объект.Товары.Загрузить(ИсходныеТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыводНапоминанияЕГАИС()
	
	Если НапоминаниеЕГАИСВыведено < ТекущаяДата() - 3*60 Тогда
		ПодключитьОбработчикОжидания("ПроверитьВыводНапоминанияЕГАИСОбработчикОжидания", 3, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыводНапоминанияЕГАИСОбработчикОжидания()
	
	ТекстНапоминания = ПолучитьТекстНапоминания();
	
	Если ЗначениеЗаполнено(ТекстНапоминания) Тогда
		ПоказатьОповещениеПользователя("Обмен данными с ЕГАИС:",, ТекстНапоминания, БиблиотекаКартинок.Изменить);
		НапоминаниеЕГАИСВыведено = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстНапоминания()
	
	Возврат ИнтеграцияЕГАИСРТ.ПолучитьНапоминаниеЕГАИС(Объект);
	
КонецФункции

&НаКлиенте
Процедура ТоварыСправка2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
        
        ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
		ПараметрыОткрытия.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
		ОткрытьФорму("Справочник.Справки2ЕГАИС.ФормаВыбора",
			ПараметрыОткрытия,
			Элемент,
			,
			,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьОтправителяИПолучателя(МагазинОтправитель, МагазинПолучатель)
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоУзелОтправитель", Ложь);
	Результат.Вставить("ЭтоУзелПолучатель", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""Отправитель"" КАК ТипТочки
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО НастройкиОбменаЕГАИС.ИдентификаторФСРАР = КлассификаторОрганизацийЕГАИС.Код
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект = &МагазинОтправитель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Получатель""
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО НастройкиОбменаЕГАИС.ИдентификаторФСРАР = КлассификаторОрганизацийЕГАИС.Код
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект = &МагазинПолучатель";
	Запрос.УстановитьПараметр("МагазинОтправитель", МагазинОтправитель);
	Запрос.УстановитьПараметр("МагазинПолучатель", МагазинПолучатель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипТочки = "Отправитель" Тогда
			Результат.ЭтоУзелОтправитель = Истина;
		ИначеЕсли Выборка.ТипТочки = "Получатель" Тогда
			Результат.ЭтоУзелПолучатель = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыВидимостиЭлементовЕГАИС(Дата, МагазинОтправитель, МагазинПолучатель)
	
	Результат = Новый Структура;
	Результат.Вставить("НужноРаботатьСЕГАИС"          , Ложь);
	Результат.Вставить("ЭтоУзелОтправитель"           , Ложь);
	Результат.Вставить("ЭтоУзелПолучатель"            , Ложь);
	Результат.Вставить("ОтправительУправляющаяСистема", Ложь);
	
	Результат.НужноРаботатьСЕГАИС = ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(Дата);
	
	СтруктураВозврата = ОпределитьОтправителяИПолучателя(МагазинОтправитель, МагазинПолучатель);
	ЗаполнитьЗначенияСвойств(Результат, СтруктураВозврата);
	
	Если ЗначениеЗаполнено(МагазинОтправитель) Тогда
		Результат.ОтправительУправляющаяСистема = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МагазинОтправитель, "СкладУправляющейСистемы");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПроверитьВозможностьВводаНаОсновании(ДокументОснование, ЕстьОшибки)
	
	ИННОтправителя 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование.Организация, "ИНН");
	ИННПолучателя 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование.ОрганизацияПолучатель, "ИНН");

	Если Не ИННОтправителя = ИННПолучателя Тогда
		СтрокаОшибки = НСтр("ru = 'ИНН отправителя ""%1"" не совпадает с ИНН получателя ""%2"".
						|Передача перемещения в ЕГАИС допускается только для обособленных подразделений одной организации.'");
		СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОшибки,  ИННОтправителя, ИННПолучателя);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрокаОшибки,
			ДокументОснование,
			"Объект.ОрганизацияПолучатель");
			
		ЕстьОшибки = Истина;
		
	КонецЕсли;
			
	ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДокументОснование);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПеремещениеТоваровПодтверждениеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОснованииТТНИсходящаяЕГАИСПослеЗаписиПеремещенияТоваров(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	ЕстьОшибки = Ложь;
	
	ПроверитьВозможностьВводаНаОсновании(Объект.Ссылка, ЕстьОшибки);
	
	Если Не ЕстьОшибки Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
		
		ОткрытьФорму("Документ.ТТНИсходящаяЕГАИС.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДанныеТранспортногоРазделаЗавершение(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатОповещения) = Тип("Структура") Тогда
		
		ЕстьИзменения = Ложь;
		
		Если ТипЗнч(ДанныеТранспортногоРаздела) = Тип("Структура") Тогда
			Для Каждого КлючЗначение Из РезультатОповещения Цикл
				Если ДанныеТранспортногоРаздела.Свойство(КлючЗначение.Ключ) И СокрЛП(ДанныеТранспортногоРаздела[КлючЗначение.Ключ]) <> СокрЛП(КлючЗначение.Значение) Тогда
					ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			СохранитьВременныеДанныеТранспортногоРаздела(РезультатОповещения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТекстДокументаЕГАИС()
	
	ИнтеграцияЕГАИСРТ.СформироватьТекстДокументаЕГАИС(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура РедактироватьДанныеТранспортногоРазделаПослеЗаписиПеремещенияТоваров(РезультатОповещения, ДополнительныеПараметры) Экспорт
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Обработка.ПечатьТТН.Форма.Форма.Открытие");
             
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("Редактирование", Истина);
	
	ОткрытьФорму("Обработка.ПечатьТТН.Форма",
				ПараметрыФормы,
				ЭтотОбъект,
				УникальныйИдентификатор,,,
				Новый ОписаниеОповещения("РедактироватьДанныеТранспортногоРазделаЗавершение", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#Область РаботаСБуферомОбмена

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
		
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена();
	
	ПараметрыСерий = Документы.ПеремещениеТоваров.ПараметрыУказанияСерий(Объект);
	ПараметрыСерий.ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		СтруктураСправки = Новый Структура;
		СтруктураСправки.Вставить("Дата", Объект.Дата);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаСправкиНаАлкоголь", СтруктураСправки);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьКэшированныеЗначенияДляУчетаСерий(ТекущаяСтрока, КэшированныеЗначения, ПараметрыСерий, Ложь);
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);		
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
			ПараметрыСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьКэшированныеЗначенияДляУчетаСерий(ТекущаяСтрока,
			КэшированныеЗначения,ПараметрыСерий,Ложь);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатовВСтроке(ТекущаяСтрока);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
	КонецЦикла;
	
	КопированиеСтрокСервер.ОчиститьБуферОбмена();
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТабличнойЧасти)
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки, Объект[ИмяТабличнойЧасти]);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти
