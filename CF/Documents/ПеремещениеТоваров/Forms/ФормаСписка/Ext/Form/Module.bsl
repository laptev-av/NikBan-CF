
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.ТТНИсходящаяЕГАИС) Тогда 
		Элементы.ФормаСоздатьНаОснованииТТНИсходящаяЕГАИС.Видимость = Ложь;	
	КонецЕсли;
	
	ОбщегоНазначенияРТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список", "Дата");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Документ.ПеремещениеТоваров.Форма.ФормаСписка.Открытие");

	УстановитьДоступностьСкладаОтправителя();
	УстановитьДоступностьСкладаПолучателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РаспределениеТоваровПоСкладамВыполнено" Тогда
		
		Элементы.Список.Обновить();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	МагазинОтправитель   = Настройки.Получить("МагазинОтправитель");
	МагазинПолучатель    = Настройки.Получить("МагазинПолучатель");
	СкладОтправитель     = Настройки.Получить("СкладОтправитель");
	СкладПолучатель      = Настройки.Получить("СкладПолучатель");
	УстановитьОтборДинамическогоСписка("МагазинОтправитель");
	УстановитьОтборДинамическогоСписка("МагазинПолучатель");
	УстановитьОтборДинамическогоСписка("СкладОтправитель");
	УстановитьОтборДинамическогоСписка("СкладПолучатель");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                 Истина, "Документ.ПеремещениеТоваров.Форма.ФормаДокумента.Открытие");
        
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборМагазинОтправительПриИзменении(Элемент)
	
	УстановитьОтборыМагазинСклад("Отправитель");
	УстановитьДоступностьСкладаОтправителя();
КонецПроцедуры

&НаКлиенте
Процедура ОтборСкладОтправительПриИзменении(Элемент)
	
	УстановитьОтборДинамическогоСписка("СкладОтправитель");

КонецПроцедуры

&НаКлиенте
Процедура ОтборМагазинПолучательПриИзменении(Элемент)
	
	УстановитьОтборыМагазинСклад("Получатель");
	УстановитьДоступностьСкладаПолучателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСкладПолучательПриИзменении(Элемент)
	
	УстановитьОтборДинамическогоСписка("СкладПолучатель");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры
    
&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Документ.ПеремещениеТоваров.Форма.ФормаДокумента.СозданиеНового");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура СоздатьНаОснованииТТНИсходящаяЕГАИС(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Команда не может быть выполнена для указанного объекта!'");
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ПроверитьВозможностьВводаНаОсновании(ТекущиеДанные.Ссылка, ЕстьОшибки);
	
	Если Не ЕстьОшибки Тогда 
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ТекущиеДанные.Ссылка);
		
		ОткрытьФорму("Документ.ТТНИсходящаяЕГАИС.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтборыМагазинСклад(ИмяРеквизита)
	
	УстановитьОтборДинамическогоСписка("Магазин" + ИмяРеквизита);
	УстановитьОтборДинамическогоСписка("Склад" + ИмяРеквизита);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическогоСписка(ИмяРеквизита)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		Список, 
		ИмяРеквизита, 
		ЭтаФорма[ИмяРеквизита], 
		ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизита]));
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСкладаОтправителя()
	
	Элементы.ОтборСкладОтправитель.ТолькоПросмотр = НЕ ЗначениеЗаполнено(МагазинОтправитель);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСкладаПолучателя()
	
	Элементы.ОтборСкладПолучатель.ТолькоПросмотр = НЕ ЗначениеЗаполнено(МагазинПолучатель);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВозможностьВводаНаОсновании(ДокументОснование, ЕстьОшибки)
	
	ИННОтправителя 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование.Организация, "ИНН");
	ИННПолучателя 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование.ОрганизацияПолучатель, "ИНН");
	
	Если Не ИННОтправителя = ИННПолучателя Тогда
		СтрокаОшибки = НСтр("ru = 'ИНН отправителя ""%1"" не совпадает с ИНН получателя ""%2"".
						|Передача перемещения в ЕГАИС допускается только для обособленных подразделений одной организации.'");
		СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОшибки,  ИННОтправителя, ИННПолучателя);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрокаОшибки,
			ДокументОснование);
			
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДокументОснование);
	
КонецФункции


#КонецОбласти
