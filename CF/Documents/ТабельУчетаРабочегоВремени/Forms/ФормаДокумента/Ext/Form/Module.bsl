#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,Элементы.КартинкаСостоянияДокумента.Подсказка,РазрешеноПроведение);
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);

	Если Объект.ПериодРегистрации <= '19000101' Тогда
		Объект.ПериодРегистрации = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	СоответствиеОписаниеВидовВремени = Новый Соответствие;
	СоответствиеОписаниеВидовВремени.Вставить("Я",ПредопределенноеЗначение("Перечисление.ВидыИспользованияРабочегоВремени.Явка"));
	СоответствиеОписаниеВидовВремени.Вставить("Б",ПредопределенноеЗначение("Перечисление.ВидыИспользованияРабочегоВремени.Больничный"));
	СоответствиеОписаниеВидовВремени.Вставить("Н",ПредопределенноеЗначение("Перечисление.ВидыИспользованияРабочегоВремени.НочныеЧасы"));
	СоответствиеОписаниеВидовВремени.Вставить("О",ПредопределенноеЗначение("Перечисление.ВидыИспользованияРабочегоВремени.Отпуск"));
	
	ОписаниеВидовВремени = Новый ФиксированноеСоответствие(СоответствиеОписаниеВидовВремени);
	
	УстановитьУсловноеОформление();
	
	МесяцРегистрацииСтрокой = ПолучитьПредставлениеМесяца(Объект.ПериодРегистрации);
	
	ТабельУстановитьВидимостьКолонокДнейПериода();
	
	Документы.ТабельУчетаРабочегоВремени.ОформитьПоляТаблицыДнейМесяца(Элементы, НачалоМесяца(Объект.ПериодРегистрации), "ДанныеОВремениВремя%1");
	
	ТабельДанныеВРеквизит();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);

	ПослеЗаписиНаСервере(ПараметрыЗаписи);
	
	// &ЗамерПроизводительности 
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ПараметрыЗаписи)
	ТабельДанныеВРеквизит();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(
		Объект,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение);

	
	СоответствиеОписаниеВидовВремени = Новый Соответствие;
	СоответствиеОписаниеВидовВремени.Вставить("Я",ПредопределенноеЗначение("Перечисление.ВидыИспользованияРабочегоВремени.Явка"));
	СоответствиеОписаниеВидовВремени.Вставить("Б",ПредопределенноеЗначение("Перечисление.ВидыИспользованияРабочегоВремени.Больничный"));
	СоответствиеОписаниеВидовВремени.Вставить("Н",ПредопределенноеЗначение("Перечисление.ВидыИспользованияРабочегоВремени.НочныеЧасы"));
	СоответствиеОписаниеВидовВремени.Вставить("О",ПредопределенноеЗначение("Перечисление.ВидыИспользованияРабочегоВремени.Отпуск"));
	
	ОписаниеВидовВремени = Новый ФиксированноеСоответствие(СоответствиеОписаниеВидовВремени);

	УстановитьУсловноеОформление();
	
	МесяцРегистрацииСтрокой = ПолучитьПредставлениеМесяца(Объект.ПериодРегистрации);
	
	ТабельУстановитьВидимостьКолонокДнейПериода();
	
	Документы.ТабельУчетаРабочегоВремени.ОформитьПоляТаблицыДнейМесяца(Элементы, НачалоМесяца(Объект.ПериодРегистрации), "ДанныеОВремениВремя%1");
	
	ТабельДанныеВРеквизит();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.Ответственный.Пустая() Тогда
		ТекущийОбъект.Ответственный = Пользователи.ТекущийПользователь()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности 
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
	                                            "Документ.ТабельУчетаРабочегоВремени.ФормаДокумента.Запись",
                                                          Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МесяцНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	Если Объект.ПериодРегистрации <= '19000101' Тогда
		Объект.ПериодРегистрации = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("МесяцНачалоВыбораПередЗавершением", ЭтотОбъект);
	ОбщегоНазначенияРТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		ЭтаФорма,
		Неопределено,
		Новый Структура("ПериодРегистрации", Объект.ПериодРегистрации), 
		Истина,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура МесяцНачалоВыбораПередЗавершением(ЗаполнятьТабличнуюЧасть, ДополнительныеПараметры) Экспорт
	
	Если ЗаполнятьТабличнуюЧасть Тогда
		Оповещение = Новый ОписаниеОповещения("МесяцНачалоВыбораЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.ТабельУчетаРабочегоВремени.Форма.ВыборПериода", 
			Новый Структура("Значение", Объект.ПериодРегистрации),	ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачалоВыбораЗавершение(ВыбранноеЗначение, Параметр = Неопределено) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда 
		Если Объект.ДанныеОВремени.Количество() > 0 Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВопросаОчисткиТЧ", ЭтотОбъект, Новый Структура);
			ОписаниеОповещения.ДополнительныеПараметры.Вставить("Месяц", ВыбранноеЗначение);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Табличная часть будет очищена, продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Иначе
			Объект.ПериодРегистрации = ВыбранноеЗначение;
			МесяцРегистрацииСтрокой = ПолучитьПредставлениеМесяца(ВыбранноеЗначение);
			
			ПериодРегистрацииИзменениеНаСервере();
			
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Если Объект.ДанныеОВремени.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВопросаОчисткиТЧ", ЭтотОбъект, Новый Структура);
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Направление", Направление);
		ТекстВопроса = НСтр("ru = 'Табличная часть будет очищена, %1'");
		Если Объект.Проведен Тогда
			ВтораяЧастьВопроса = НСтр("ru = 'а проведение документа отменено, продолжить?'");
		Иначе
			ВтораяЧастьВопроса = НСтр("ru = 'продолжить?'");
		КонецЕсли;
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ВтораяЧастьВопроса);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		Если Объект.ПериодРегистрации <= '19000101' Тогда
			Объект.ПериодРегистрации = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
		КонецЕсли;
		
		Объект.ПериодРегистрации = ДобавитьМесяц(Объект.ПериодРегистрации, Направление);
		МесяцРегистрацииСтрокой = ПолучитьПредставлениеМесяца(Объект.ПериодРегистрации);
		
		ПериодРегистрацииИзменениеНаСервере();
		
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПериодРегистрацииИзменениеНаСервере()
	
	ТабельУстановитьВидимостьКолонокДнейПериода();
	
	Документы.ТабельУчетаРабочегоВремени.ОформитьПоляТаблицыДнейМесяца(Элементы, НачалоМесяца(Объект.ПериодРегистрации), "ДанныеОВремениВремя%1");

КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

//

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура МагазинНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("МагазинНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияРТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		ЭтаФорма,
		Неопределено,
		Новый Структура("Магазин", Объект.Магазин), 
		Истина,
		ОписаниеОповещения);

	КонецПроцедуры
	
&НаКлиенте
Процедура МагазинНачалоВыбораЗавершение(ЗаполнятьТабличнуюЧасть, ДополнительныеПараметры) Экспорт
	
	Если ЗаполнятьТабличнуюЧасть И Объект.ДанныеОВремени.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВопросаОчисткиТЧ", ЭтотОбъект, Новый Структура);
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Магазин");
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Табличная часть будет очищена, продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗначениеОтбора = Новый Структура("СкладУправляющейСистемы", Ложь);
		ПараметрыФормыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
		ОткрытьФорму("Справочник.Магазины.ФормаВыбора", ПараметрыФормыВыбора, Элементы.Магазин);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросаОчисткиТЧ(РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ДанныеОВремени.Очистить();

		Если ДополнительныеПараметры.Свойство("Магазин") Тогда
			ЗначениеОтбора = Новый Структура("СкладУправляющейСистемы", Ложь);
			ПараметрыФормыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
			ОткрытьФорму("Справочник.Магазины.ФормаВыбора", ПараметрыФормыВыбора, Элементы.Магазин);
			
		ИначеЕсли ДополнительныеПараметры.Свойство("Месяц") Тогда
			Объект.ПериодРегистрации = ДополнительныеПараметры.Месяц;
			МесяцРегистрацииСтрокой = ПолучитьПредставлениеМесяца(ДополнительныеПараметры.Месяц);
			ПериодРегистрацииИзменениеНаСервере();
			
		ИначеЕсли ДополнительныеПараметры.Свойство("Направление") Тогда
			Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения)) Тогда
				ПоказатьПредупреждение(,НСтр("ru = 'Не удалось отменить проведение документа'"));
				Возврат;
			КонецЕсли;
			Объект.ПериодРегистрации = ДобавитьМесяц(Объект.ПериодРегистрации, ДополнительныеПараметры.Направление);
			МесяцРегистрацииСтрокой = ПолучитьПредставлениеМесяца(Объект.ПериодРегистрации);
			ПериодРегистрацииИзменениеНаСервере();
		ИначеЕсли ДополнительныеПараметры.Свойство("Заполнить") Тогда
			ЗаполнитьНаСервере();
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыДанныеОВремени

&НаКлиенте
Процедура ДанныеОВремениПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Модифицированность = Истина;
	
	ИдентификаторТекущейСтроки = Элемент.ТекущаяСтрока;
	ДобавленныеСтроки = Новый Массив;
		
	ДанныеНовойСтроки = Объект.ДанныеОВремени.Добавить();
	ДанныеНовойСтроки.ИстинаКогдаЭтоНоваяСтрока = Истина;
	ДобавленныеСтроки.Добавить(ДанныеНовойСтроки);
	
	ИдентификаторНовойСтроки = ДанныеНовойСтроки.ПолучитьИдентификатор();
	ИндексНовойСтроки = Объект.ДанныеОВремени.Индекс(ДанныеНовойСтроки);
	
	Если ИндексНовойСтроки = 0 Тогда
		НомерСтрокиПредыдущегоСотрудника = 0;
	Иначе
		НомерСтрокиПредыдущегоСотрудника = Объект.ДанныеОВремени[ИндексНовойСтроки - 1].НомерСтрокиСотрудник;
	КонецЕсли;
	
	ДанныеНовойСтроки.НомерСтрокиСотрудник = НомерСтрокиПредыдущегоСотрудника + 1;
	
	ВтораяСтрокаПоСотруднику = Объект.ДанныеОВремени.Добавить();
	ВтораяСтрокаПоСотруднику.Сотрудник = ДанныеНовойСтроки.Сотрудник;
	ВтораяСтрокаПоСотруднику.НомерСтрокиСотрудник = ДанныеНовойСтроки.НомерСтрокиСотрудник;
	ДобавленныеСтроки.Добавить(ВтораяСтрокаПоСотруднику);
	
	Если Копирование Тогда
		
		СтрокиИсточникиДанных = Объект.ДанныеОВремени.НайтиСтроки(Новый Структура ("НомерСтрокиСотрудник", ИдентификаторТекущейСтроки));
		НезаполянемыеСвойства = "НомерСтрокиСотрудник, Сотрудник, ИстинаКогдаЭтоНоваяСтрока";

		Для Индекс = 0 По СтрокиИсточникиДанных.Количество() - 1 Цикл 		
			СтрокаПриемник = ДобавленныеСтроки[Индекс]; 
			ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокиИсточникиДанных[Индекс], ,НезаполянемыеСвойства);
		КонецЦикла;		
	КонецЕсли;	
	
	Элементы.ДанныеОВремени.ТекущаяСтрока = ИдентификаторНовойСтроки;	
	Элементы.ДанныеОВремени.ТекущийЭлемент = Элементы.ДанныеОВремениСотрудник;
	Элементы.ДанныеОВремени.ИзменитьСтроку();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОВремениПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	УдалитьСтрокиПоСотруднику(Элементы.ДанныеОВремени.ВыделенныеСтроки);

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект);
	ОбщегоНазначенияРТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		ЭтаФорма,
		Неопределено,
		Новый Структура("Проведен", Объект.Проведен), 
		Истина,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(ЗаполнятьТабличнуюЧасть, ДополнительныеПараметры) Экспорт
	Если ЗаполнятьТабличнуюЧасть И Объект.ДанныеОВремени.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВопросаОчисткиТЧ", ЭтотОбъект, Новый Структура);
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("Заполнить");
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Табличная часть будет очищена, продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		Объект.ДанныеОВремени.Очистить();
		ЗаполнитьНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	ТабельЗаполнитьДанныеПоСотрудникам();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьПредставлениеМесяца(Значение)
	
	Возврат Формат(Значение, "ДФ='ММММ гггг'");

КонецФункции

&НаСервере
Процедура УдалитьСтрокиПоСотруднику(Знач УдаляемыеСтроки)
	
	Для Каждого ИдентификаторУдаляемойСтроки Из УдаляемыеСтроки Цикл
		
		ТекущаяСтрока = Объект.ДанныеОВремени.НайтиПоИдентификатору(ИдентификаторУдаляемойСтроки);
		
		Если ТекущаяСтрока <> Неопределено Тогда
			
			НомерПредыдущейСтроки = ТекущаяСтрока.НомерСтрокиСотрудник;
			
			ИндексОбрабатываемойСтроки = Объект.ДанныеОВремени.Индекс(ТекущаяСтрока);
			
			УдаляемыеСтроки = Документы.ТабельУчетаРабочегоВремени.ТабельСтрокиПоСотруднику(Объект.ДанныеОВремени, ТекущаяСтрока.НомерСтрокиСотрудник);
			
			Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл  
				Если УдаляемаяСтрока.НомерСтроки % 2 = 1 Тогда
					ИндексОбрабатываемойСтроки = Объект.ДанныеОВремени.Индекс(УдаляемаяСтрока);	
				КонецЕсли;	
			КонецЦикла;	
			
			Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл  
				Объект.ДанныеОВремени.Удалить(Объект.ДанныеОВремени.Индекс(УдаляемаяСтрока));
			КонецЦикла;	
			
			ОбщееКоличествоСтрок = Объект.ДанныеОВремени.Количество();
			
			Если ИндексОбрабатываемойСтроки < ОбщееКоличествоСтрок Тогда
				ДанныеТекущейСтроки = Объект.ДанныеОВремени[ИндексОбрабатываемойСтроки];
				ДанныеТекущейСтроки.НомерСтрокиСотрудник = НомерПредыдущейСтроки;
				НомерПредыдущейСтроки = ДанныеТекущейСтроки.НомерСтрокиСотрудник;
				ИндексОбрабатываемойСтроки = ИндексОбрабатываемойСтроки + 1;
				Элементы.ДанныеОВремени.ТекущаяСтрока = ДанныеТекущейСтроки.ПолучитьИдентификатор();
			КонецЕсли;	
			
			Пока ИндексОбрабатываемойСтроки < ОбщееКоличествоСтрок Цикл 
				ДанныеТекущейСтроки = Объект.ДанныеОВремени[ИндексОбрабатываемойСтроки];
				
				Если ДанныеТекущейСтроки.НомерСтроки % 2 = 1 Тогда
					ДанныеТекущейСтроки.НомерСтрокиСотрудник = НомерПредыдущейСтроки + 1;
					НомерПредыдущейСтроки = ДанныеТекущейСтроки.НомерСтрокиСотрудник;
				Иначе
					ДанныеТекущейСтроки.НомерСтрокиСотрудник = НомерПредыдущейСтроки;
				КонецЕсли;	
				ИндексОбрабатываемойСтроки = ИндексОбрабатываемойСтроки + 1;
			КонецЦикла;	
			
			Модифицированность = Истина;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОВремениСотрудникПриИзменении(Элемент)
	ДанныеОВремениСотрудникПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДанныеОВремениСотрудникПриИзмененииНаСервере()
	
	ГоловнаяСтрокаСотрудника = Объект.ДанныеОВремени.НайтиПоИдентификатору(Элементы.ДанныеОВремени.ТекущаяСтрока);
	
	Если ГоловнаяСтрокаСотрудника.ИстинаКогдаЭтоНоваяСтрока Тогда
		
		ГоловнаяСтрокаСотрудника.ИстинаКогдаЭтоНоваяСтрока = Ложь;
		
		Сотрудник = ГоловнаяСтрокаСотрудника.Сотрудник;
		
		МассивСтрокПоСотруднику = Документы.ТабельУчетаРабочегоВремени.ТабельСтрокиПоСотруднику(Объект.ДанныеОВремени, ГоловнаяСтрокаСотрудника.НомерСтрокиСотрудник);
		
		Для Каждого СтрокаТабеля Из МассивСтрокПоСотруднику Цикл
			СтрокаТабеля.Сотрудник = Сотрудник;	
		КонецЦикла;	
	Иначе	
		МассивСтрокПоСотруднику = Документы.ТабельУчетаРабочегоВремени.ТабельСтрокиПоСотруднику(Объект.ДанныеОВремени, ГоловнаяСтрокаСотрудника.НомерСтрокиСотрудник);
	
		ТабельОчиститьСтрокиСотрудника(МассивСтрокПоСотруднику);
		
		СписокСотрудников = Новый Массив;
		СписокСотрудников.Добавить(ГоловнаяСтрокаСотрудника.Сотрудник);
		
		СтрокиПоСотрудникам = Новый Соответствие;
		СтрокиПоСотрудникам.Вставить(ГоловнаяСтрокаСотрудника.Сотрудник, МассивСтрокПоСотруднику);
				
		ТабельЗаполнитьДанныеПоСотрудникам(СписокСотрудников, СтрокиПоСотрудникам);
	КонецЕсли;		

КонецПроцедуры

&НаСервере
Процедура ТабельОчиститьСтрокиСотрудника(СтрокиПоСотруднику)
	Для Каждого СтрокаДанныхОВремени Из СтрокиПоСотруднику Цикл
		СтрокаДанныхОВремени.ВремяИтог = "";
		Для НомерДня = 1 По 31 Цикл
			СтрокаДанныхОВремени["Часов" + НомерДня] = 0;      
			СтрокаДанныхОВремени["ВидВремени" + НомерДня] = Перечисления.ВидыИспользованияРабочегоВремени.ПустаяСсылка();
			СтрокаДанныхОВремени["Время" + НомерДня] = "";
		КонецЦикла;	
	КонецЦикла;		
КонецПроцедуры	

Процедура ТабельЗаполнитьДанныеПоСотрудникам(СписокСотрудников = Неопределено, СтрокиПоСотрудникам = Неопределено)
	
	ВыборкаДанныхОВремени = Документы.ТабельУчетаРабочегоВремени.ДанныеОВремениСотрудников(Объект, СписокСотрудников);
	
	ТекущийСотрудник = Неопределено;
	ДанныеОВремениПоСотруднику = Новый Массив;
	НомерСтрокиСотрудник = 1;
	
	ДанныеОВремениПоСотруднику = Новый ТаблицаЗначений;
	ДанныеОВремениПоСотруднику.Колонки.Добавить("Сотрудник");
	ДанныеОВремениПоСотруднику.Колонки.Добавить("ВидВремени");
	ДанныеОВремениПоСотруднику.Колонки.Добавить("Дата");
	ДанныеОВремениПоСотруднику.Колонки.Добавить("Дни");
	ДанныеОВремениПоСотруднику.Колонки.Добавить("Часы");
	
	Пока ВыборкаДанныхОВремени.СледующийПоЗначениюПоля("Сотрудник") Цикл
		ДанныеОВремениПоСотруднику.Очистить();
	
		Пока ВыборкаДанныхОВремени.Следующий() Цикл
			СтрокаТаблицыДанныхОВремени = ДанныеОВремениПоСотруднику.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДанныхОВремени, ВыборкаДанныхОВремени);
		КонецЦикла;	

		Если СтрокиПоСотрудникам = Неопределено Тогда
			МассивСтрокПоСотруднику = ТабельНоваяСтрокаДанныхОВремени(Объект.ДанныеОВремени, ВыборкаДанныхОВремени.Сотрудник, НомерСтрокиСотрудник);
		Иначе					
			МассивСтрокПоСотруднику = СтрокиПоСотрудникам[ВыборкаДанныхОВремени.Сотрудник];
		КонецЕсли;	
	
		ТабельЗаполнитьСтрокиПоСотруднику(
			ДанныеОВремениПоСотруднику, 
			МассивСтрокПоСотруднику);
			
		НомерСтрокиСотрудник = НомерСтрокиСотрудник + 1;	
		
	КонецЦикла;	
	
	ТабельЗаполнитьИтогиПоСотрудникамДокумента();
	УстановитьУсловноеОформление();
	
КонецПроцедуры	

&НаСервере
Процедура ТабельДанныеВРеквизит()
	
	ТекущийСотрудник = Неопределено;
	ТекущийНомерСтроки = 0;
	
	СоответствиеСотрудниковСтрокам = Новый Соответствие;
	
	ВысотаСтрокПоСотрудникам = Новый Соответствие;
	
	Для Каждого СтрокаДанныхОВремени Из Объект.ДанныеОВремени Цикл
		Если СтрокаДанныхОВремени.Сотрудник <> ТекущийСотрудник Тогда
			ТекущийНомерСтроки = ТекущийНомерСтроки + 1;
			СоответствиеСотрудниковСтрокам.Вставить(СтрокаДанныхОВремени.Сотрудник, СтрокаДанныхОВремени);
		КонецЕсли;
		
		СтрокаДанныхОВремени.НомерСтрокиСотрудник = ТекущийНомерСтроки;
		
		Для НомерДня = 1 По 31 Цикл
			ОбозначениеВремени = ВРег(Лев(СтрокаДанныхОВремени["ВидВремени" + НомерДня],1));
			Часы = СтрокаДанныхОВремени["Часов" + НомерДня];
			СтрокаДанныхОВремени["Время" + НомерДня] = ТабельПредставлениеВремениПоВиду(ОбозначениеВремени, Часы);
		КонецЦикла;	
		
		ТекущийСотрудник = СтрокаДанныхОВремени.Сотрудник;
	КонецЦикла;		
	
	Для Каждого ГоловнаяСтрока Из СоответствиеСотрудниковСтрокам Цикл
		МассивСтрок = Документы.ТабельУчетаРабочегоВремени.ТабельСтрокиПоСотруднику(Объект.ДанныеОВремени, ГоловнаяСтрока.Значение.НомерСтрокиСотрудник);
		ВысотаСтроки = Макс(2, МассивСтрок.Количество());
		ВысотаСтрокПоСотрудникам.Вставить(ГоловнаяСтрока.Значение, МассивСтрок.Количество());
	КонецЦикла;	
	
	ТабельЗаполнитьИтогиПоСотрудникамДокумента();
	
КонецПроцедуры

Процедура ТабельУстановитьВидимостьКолонокДнейПериода()
	ПервыйДеньПериода = День(НачалоМесяца(Объект.ПериодРегистрации));
	ПоследнийДеньПериода = День(КонецМесяца(Объект.ПериодРегистрации));
	
	Для НомерДня = 1 По ПервыйДеньПериода - 1 Цикл
		Элементы["ДанныеОВремениВремя" + НомерДня].Видимость = Ложь;		
	КонецЦикла;	
	
	Для НомерДня = ПервыйДеньПериода По ПоследнийДеньПериода Цикл
		Элементы["ДанныеОВремениВремя" + НомерДня].Видимость = Истина;		
	КонецЦикла;	
	
	Для НомерДня = ПоследнийДеньПериода + 1 По 31 Цикл
		Элементы["ДанныеОВремениВремя" + НомерДня].Видимость = Ложь;		
	КонецЦикла;		
КонецПроцедуры	

Процедура УстановитьУсловноеОформление()
	
	Для Каждого СтрокаТаблицы Из Объект.ДанныеОВремени Цикл
		Если СтрокаТаблицы.НомерСтроки % 2 = 0 Тогда
			
			Для каждого ПодчиненныйЭлемент Из Элементы Цикл
				
				Если СтрНайти(ПодчиненныйЭлемент.Имя,"Сотрудник") > 0 
					И ТипЗнч(ПодчиненныйЭлемент) = Тип("ПолеФормы")
					Тогда
					ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
					ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
					ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
					ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
					
					//отбор для оформления по условию
					ЭлементУсловия                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ДанныеОВремени.НомерСтроки");
					ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
					ЭлементУсловия.ПравоеЗначение = СтрокаТаблицы.НомерСтроки;
					ЭлементУсловия.Использование  = Истина;
					//что оформляем
					ОформляемоеПоле      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
					ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПодчиненныйЭлемент.Имя);
				КонецЕсли
			КонецЦикла;
		КонецЕсли
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НомерДня = ТабельНомерДняПоИмениЭлемента(Элемент.Имя);
	ВидВремени = Элементы.ДанныеОВремени.ТекущиеДанные["ВидВремени" + НомерДня];
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе, ТекущаяСтрока");
	ПараметрыФормы.ЗакрыватьПриВыборе = Истина;
	ПараметрыФормы.ТекущаяСтрока = ВидВремени;
	
	ОткрытьФорму("Перечисление.ВидыИспользованияРабочегоВремени.Форма.ФормаВыбора", ПараметрыФормы, Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОВремениОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда	
		НомерДня = ТабельНомерДняПоИмениЭлемента(Элемент.Имя);
		ДанныеТекущейСтроки = Элементы.ДанныеОВремени.ТекущиеДанные;
		
		СтандартнаяОбработка = Ложь;
			Если ДанныеТекущейСтроки <> Неопределено Тогда
			
				ИмяТекущегоРеквизита = "Время" + НомерДня; 
				
				ДанныеОВремени = ТабельРазобратьСтрокуВремени(ДанныеТекущейСтроки[ИмяТекущегоРеквизита]);
				
				ОписаниеВидаВремени = ОписаниеВидовВремени.Получить(ДанныеОВремени.БуквенноеОбозначение);
				
				Если Не ВыбранноеЗначение.Свойство("Часы") Тогда
					ВыбранноеЗначение.Вставить("Часы", 0);
				КонецЕсли;	
				Если ВыбранноеЗначение.Часы = 0
					И ДанныеОВремени <> Неопределено
					И ОписаниеВидаВремени <> Неопределено Тогда
					
					ВыбранноеЗначение.Часы = ДанныеОВремени.Часы;
				КонецЕсли;
				
				ДанныеОВремени = ПолучитьДанныеОВремени(ВыбранноеЗначение);

				Если ДанныеОВремени = Неопределено Тогда
					Отказ = Истина;
				КонецЕсли;
				
				ТабельВводДанныхОВремениЗаДень(ДанныеОВремени, ДанныеТекущейСтроки, НомерДня)
			КонецЕсли;			
	КонецЕсли;			
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТабельВводДанныхОВремениЗаДень(ДанныеОВремени, ДанныеТекущейСтроки, НомерДня)
	Если ДанныеОВремени.Часы <> 0 Тогда
		Часы = ДанныеОВремени.Часы;
	ИначеЕсли ДанныеОВремени.ВидВремени = ПредопределенноеЗначение("Перечисление.ВидыИспользованияРабочегоВремени.Явка") Тогда
		Часы = 8;
	Иначе
		Часы = 0;
	КонецЕсли;	
	
	ДанныеТекущейСтроки["ВидВремени" + НомерДня] = ДанныеОВремени.ВидВремени;
	ДанныеТекущейСтроки["Часов" + НомерДня] = Часы;             
	ДанныеТекущейСтроки["Время" + НомерДня] = ТабельПредставлениеВремениПоВиду(ДанныеОВремени.БуквенноеОбозначение, Часы);	
КонецПроцедуры

Функция ТабельНомерДняПоИмениЭлемента(ИмяПоля) Экспорт
	
	ОбрабатываемыйТекст = СтрЗаменить(ИмяПоля, "ДанныеОВремениВремя", "");
	
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ОбрабатываемыйТекст) Тогда
		Возврат Число(ОбрабатываемыйТекст);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ТабельРазобратьСтрокуВремени(Знач ПредставлениеДанныхОВремени, Отказ = Ложь) Экспорт
	
	Если ПустаяСтрока(ПредставлениеДанныхОВремени) Тогда
		Возврат Новый Структура("ВидВремени, БуквенноеОбозначение, Часы", Перечисления.ВидыИспользованияРабочегоВремени.ПустаяСсылка(), "", 0);
	КонецЕсли;
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПредставлениеДанныхОВремени, " ");
	
	Если МассивПодстрок.Количество() > 2 Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	ЕстьПробел = СтрНайти(ПредставлениеДанныхОВремени, " ") > 0;
	
	Часы = 0;
	ЕстьБуквенноеОбозначение = Ложь;
	БуквенноеОбозначение = "";
	Для Каждого Подстрока Из МассивПодстрок Цикл
		СтрокаБезРазделителей = СтрЗаменить(Подстрока, ".", "");
		СтрокаБезРазделителей = СтрЗаменить(СтрокаБезРазделителей, ",", "");
		Если ПустаяСтрока(СтрокаБезРазделителей) Тогда
			Продолжить;
		КонецЕсли;
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаБезРазделителей)
			И СтрДлина(Подстрока) <= СтрДлина(СтрокаБезРазделителей) + 1 Тогда
			Часы = Число(СтрЗаменить(Подстрока, ".", ","));
		Иначе
			Если ЕстьБуквенноеОбозначение Тогда
				Отказ = Истина;
				Возврат Неопределено;
			КонецЕсли;
			
			БуквенноеОбозначение = ВРег(Подстрока); 
			ЕстьБуквенноеОбозначение = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("БуквенноеОбозначение, Часы, ЕстьРазделитель", БуквенноеОбозначение, Часы, ЕстьБуквенноеОбозначение И ЕстьПробел);
	
КонецФункции

Функция ТабельПредставлениеВремениПоВиду(ОбозначениеВремени, КоличествоЧасов) Экспорт 
	
	Если Не ПустаяСтрока(ОбозначениеВремени) Или КоличествоЧасов <> 0 Тогда
		Возврат ОбозначениеВремени + " " + Формат(КоличествоЧасов, "ЧГ=");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДанныеОВремениОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Отказ = Ложь;
	ДанныеТекущейСтроки = Элементы.ДанныеОВремени.ТекущиеДанные;
	НомерДня = ТабельНомерДняПоИмениЭлемента(Элемент.Имя);
	//ДанныеОВремени = ТабельРазобратьСтрокуВремени(Текст, Отказ);
	
	ДанныеОВремени = ТабельДанныеОВремениИзПредставления(Текст, ДанныеТекущейСтроки, НомерДня, Отказ);

	Если Отказ Тогда		
		ПоказатьПредупреждение(, НСтр("ru = 'В поле введены некорректные данные.'"));
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ДанныеТекущейСтроки["Время" + НомерДня]);
	Иначе 	
		ТабельВводДанныхОВремениЗаДень(ДанныеОВремени, ДанныеТекущейСтроки, НомерДня);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДанныеОВремениАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Не ПустаяСтрока(Текст) Тогда
		ДанныеОВремени = ТабельРазобратьСтрокуВремени(Текст);
		
		СтандартнаяОбработка = Ложь;
		
		ДанныеВыбора = Новый СписокЗначений;
		
		Если ДанныеОВремени = Неопределено Тогда
			Возврат;
		КонецЕсли;	

		БуквенноеОбозначение = ДанныеОВремени.БуквенноеОбозначение;	

		Для Каждого ОписаниеВидаВремени Из ОписаниеВидовВремени Цикл
			Если ВРег(ОписаниеВидаВремени.Ключ) = ВРег(БуквенноеОбозначение) Тогда
				ЗначениеВыбора = Новый Структура;
				ЗначениеВыбора.Вставить("БуквенноеОбозначение", ОписаниеВидаВремени.Ключ);
				ЗначениеВыбора.Вставить("Часы", ДанныеОВремени.Часы);
				ЧасыСтрока = ?(ДанныеОВремени.Часы = 0, "", " " + Формат(ДанныеОВремени.Часы, "ЧГ="));
				ПредставлениеЗначенияВыбора = Строка(ОписаниеВидаВремени.Значение)+" (" + ОписаниеВидаВремени.Ключ + ")" + ЧасыСтрока;
				
				ДанныеВыбора.Добавить(ЗначениеВыбора, ПредставлениеЗначенияВыбора);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ТабельДанныеОВремениИзПредставления(Знач ПредставлениеДанныхОВремени, ДанныеТекущейСтроки, НомерДня, Отказ = Ложь)
	
	ДанныеОВремени = ТабельРазобратьСтрокуВремени(ПредставлениеДанныхОВремени);

	Если ДанныеОВремени = Неопределено Или ДанныеОВремени.БуквенноеОбозначение = "" И ДанныеОВремени.Часы = 0  Тогда 
		Возврат Новый Структура("ВидВремени, БуквенноеОбозначение, Часы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Перечисление.ВидыИспользованияРабочегоВремени.ПустаяСсылка"), "", 0);
	ИначеЕсли ДанныеОВремени.БуквенноеОбозначение = "" Тогда 
		Если ПустаяСтрока(ДанныеТекущейСтроки["ВидВремениПоУмолчаниюОбозначение" + НомерДня]) Тогда 
			Возврат Новый Структура("ВидВремени, БуквенноеОбозначение, Часы",  ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Перечисления.ВидыИспользованияРабочегоВремени.Явка"), "Я", ДанныеОВремени.Часы);
		ИначеЕсли ДанныеТекущейСтроки.ЭтоПерваяСтрокаПоСотруднику Тогда
			ОписаниеВидаВремени = ОписаниеВидовВремени.Получить(ДанныеТекущейСтроки["ВидВремениПоУмолчаниюОбозначение" + НомерДня]);
			Возврат Новый Структура("ВидВремени, БуквенноеОбозначение, Часы",  ОписаниеВидаВремени.ВидВремени, ДанныеТекущейСтроки["ВидВремениПоУмолчаниюОбозначение" + НомерДня], ДанныеОВремени.Часы);
		Иначе
			Возврат Новый Структура("ВидВремени, БуквенноеОбозначение, Часы",   ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Перечисление.ВидыИспользованияРабочегоВремени.ПустаяСсылка"), "", ДанныеОВремени.Часы);	
		КонецЕсли;	
	Иначе	
		ОписаниеВидаВремени = ОписаниеВидовВремени.Получить(ДанныеОВремени.БуквенноеОбозначение);
		Если ОписаниеВидаВремени = Неопределено Тогда
			Отказ = Истина;
			Возврат Неопределено;
		Иначе			
			Возврат Новый Структура("ВидВремени, БуквенноеОбозначение, Часы", ОписаниеВидаВремени.ВидВремени, ДанныеОВремени.БуквенноеОбозначение, ДанныеОВремени.Часы);			
		КонецЕсли;
	КонецЕсли;
КонецФункции
Функция ПолучитьДанныеОВремени(ДанныеОВремени)
	
	ВидВремени = ОписаниеВидовВремени.Получить(ДанныеОВремени.БуквенноеОбозначение);
	Если ВидВремени <> Неопределено Тогда
		Возврат Новый Структура("ВидВремени, БуквенноеОбозначение, Часы", ВидВремени, ДанныеОВремени.БуквенноеОбозначение, ДанныеОВремени.Часы);			
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ДанныеОВремениПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ДанныеОВремениПередОкончаниемРедактированияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДанныеОВремениПередОкончаниемРедактированияНаСервере()
	
	ТекущаяСтрокаСотрудника = Объект.ДанныеОВремени.НайтиПоИдентификатору(Элементы.ДанныеОВремени.ТекущаяСтрока);
	
	Если ТекущаяСтрокаСотрудника.НомерСтроки % 2 = 1 Тогда
		ГоловнаяСтрокаСотрудника = ТекущаяСтрокаСотрудника;
	Иначе
		ГоловнаяСтрокаСотрудникаМассив = Документы.ТабельУчетаРабочегоВремени.ТабельСтрокиПоСотруднику(Объект.ДанныеОВремени, ТекущаяСтрокаСотрудника.НомерСтрокиСотрудник);
		ГоловнаяСтрокаСотрудника = ГоловнаяСтрокаСотрудникаМассив[0];
	КонецЕсли;
	
	МассивСтрокПоСотруднику = Документы.ТабельУчетаРабочегоВремени.ТабельСтрокиПоСотруднику(Объект.ДанныеОВремени, ГоловнаяСтрокаСотрудника.НомерСтрокиСотрудник);

	ТабельЗаполнитьИтогиПоСотруднику(МассивСтрокПоСотруднику, ОписаниеВидовВремени);
	
КонецПроцедуры

Функция ТабельПредставлениеИтогаПоВидуВремени(ВидВремени, ИтогиПоВидамВремени, ОписаниеВидовВремени)
	ПредставлениеИтогаПоВидуВремени = "";
	
	ОписаниеВидаВремени = Строка(ОписаниеВидовВремени.Получить(Лев(ВидВремени,1)));
	
	БуквенноеОбозначение = ?(ОписаниеВидаВремени = Неопределено, "", ОписаниеВидаВремени);
	
	ИтогиПоВидуВремени = ИтогиПоВидамВремени.Получить(ВидВремени);
	
	Если ОписаниеВидаВремени <> "" Тогда
	
		ПредставлениеИтогаПоВидуВремени = БуквенноеОбозначение + ?(БуквенноеОбозначение = "", "" , " ") 
										+ Строка(ИтогиПоВидуВремени.Дни) + НСтр("ru = ' д.'") 
										+ ?(ИтогиПоВидуВремени.Часы > 0, " " + Строка(ИтогиПоВидуВремени.Часы) + НСтр("ru = ' ч.'") , "");
	КонецЕсли;										
									
	Возврат ПредставлениеИтогаПоВидуВремени;								
КонецФункции

&НаСервере
Процедура ТабельЗаполнитьИтогиПоСотрудникамДокумента()
	
	СтрокиПоСотруднику = Новый Массив;	
	ТекущийСотрудник = Неопределено;
	Для Каждого СтрокаДанныхОВремени Из Объект.ДанныеОВремени Цикл
		Если СтрокаДанныхОВремени.Сотрудник <> ТекущийСотрудник 
			И СтрокиПоСотруднику.Количество() > 0 Тогда
		
			ТабельЗаполнитьИтогиПоСотруднику(СтрокиПоСотруднику, ОписаниеВидовВремени);	
			
			СтрокиПоСотруднику = Новый Массив;
			СтрокиПоСотруднику.Добавить(СтрокаДанныхОВремени);
			
			ТекущийСотрудник = СтрокаДанныхОВремени.Сотрудник;
		Иначе	
			СтрокиПоСотруднику.Добавить(СтрокаДанныхОВремени);
			ТекущийСотрудник = СтрокаДанныхОВремени.Сотрудник;
		КонецЕсли;		
	КонецЦикла;	
	
	Если СтрокиПоСотруднику.Количество() > 0 Тогда
		ТабельЗаполнитьИтогиПоСотруднику(СтрокиПоСотруднику, ОписаниеВидовВремени);	
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Процедура ТабельЗаполнитьИтогиПоСотруднику(МассивСтрокПоСотруднику, ОписаниеВидовВремени)
	
	КоличествоСтрокПоСотруднику = МассивСтрокПоСотруднику.Количество();

	Если КоличествоСтрокПоСотруднику = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ИтогиПоВидамВремени = Новый Соответствие;
	
	МаксимальноеКоличествоДней = 0;
	Для Каждого СтрокаПоСотруднику Из МассивСтрокПоСотруднику Цикл
		Для НомерДня = 1 По 31 Цикл
			ВидВремени = СтрокаПоСотруднику["ВидВремени" + НомерДня];
			Если ЗначениеЗаполнено(ВидВремени) Тогда
				Если ИтогиПоВидамВремени.Количество() = 0 Тогда
					ПервыйВидВремени = ВидВремени;
				КонецЕсли;
				Часы = СтрокаПоСотруднику["Часов" + НомерДня];
				ИтогиПоВидуВремени = ИтогиПоВидамВремени.Получить(ВидВремени);
				Если ИтогиПоВидуВремени = Неопределено Тогда
					ИтогиПоВидамВремени.Вставить(ВидВремени, Новый Структура("Часы, Дни", Часы, 1));
				Иначе
					ИтогиПоВидуВремени.Часы = ИтогиПоВидуВремени.Часы + Часы;
					ИтогиПоВидуВремени.Дни = ИтогиПоВидуВремени.Дни + 1;
					Если ИтогиПоВидуВремени.Дни > МаксимальноеКоличествоДней Тогда
						МаксимальноеКоличествоДней = ИтогиПоВидуВремени.Дни;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	МассивСтрокПоСотруднику[0].ВремяИтог =  ТабельПредставлениеИтогаПоВидуВремени(ПервыйВидВремени, ИтогиПоВидамВремени, ОписаниеВидовВремени);
	
	ПоследняяСтрокаПоСотруднику = МассивСтрокПоСотруднику[0];
	
	ДополнениеИтогаКПоследнейСтроке = "";
	
	НомерСтроки = 2;
	Для Каждого КлючЗначение Из ИтогиПоВидамВремени Цикл
		Если КлючЗначение.Ключ <> ПервыйВидВремени Тогда  
			
			ПредставлениеИтогаПоВидуВремени = ТабельПредставлениеИтогаПоВидуВремени(КлючЗначение.Ключ, ИтогиПоВидамВремени, ОписаниеВидовВремени);
			
			Если НомерСтроки <= КоличествоСтрокПоСотруднику Тогда 
				ОбрабатываемаяСтрока = МассивСтрокПоСотруднику[НомерСтроки - 1];
				
				ОбрабатываемаяСтрока.ВремяИтог = ПредставлениеИтогаПоВидуВремени;
				
				Если ОбрабатываемаяСтрока.НомерСтроки > ПоследняяСтрокаПоСотруднику.НомерСтроки Тогда
					ПоследняяСтрокаПоСотруднику = ОбрабатываемаяСтрока;
				КонецЕсли;	
		
				НомерСтроки = НомерСтроки + 1;
			Иначе
				ДополнениеИтогаКПоследнейСтроке = ДополнениеИтогаКПоследнейСтроке + "
					|" + ПредставлениеИтогаПоВидуВремени; 
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	ПоследняяСтрокаПоСотруднику.ВремяИтог = ПоследняяСтрокаПоСотруднику.ВремяИтог + ДополнениеИтогаКПоследнейСтроке;

КонецПроцедуры

Процедура ТабельЗаполнитьСтрокиПоСотруднику(ДанныеОВремениПоСотруднику, МассивСтрокПоСотруднику)
	
	ОбрабатываемаяДата = '00010101';	

	Для Каждого СтрокаДанныхОВремени Из ДанныеОВремениПоСотруднику Цикл
		
		Если СтрокаДанныхОВремени.Дата <> ОбрабатываемаяДата Тогда 
			НомерДня = День(СтрокаДанныхОВремени.Дата);	
			НомерВидаВремениНаДату = 1;
		Иначе
			НомерВидаВремениНаДату = НомерВидаВремениНаДату + 1;
		КонецЕсли;

		Если НомерВидаВремениНаДату > МассивСтрокПоСотруднику.Количество() Тогда
			СтрокаТабеля = ТабельНоваяСтрокаПоСотруднику(Объект.ДанныеОВремени, МассивСтрокПоСотруднику[0]);	
			МассивСтрокПоСотруднику.Добавить(СтрокаТабеля);
		Иначе
			СтрокаТабеля = МассивСтрокПоСотруднику[НомерВидаВремениНаДату - 1];		
		КонецЕсли;	
		
		СтрокаТабеля["ВидВремени" + НомерДня] = СтрокаДанныхОВремени.ВидВремени;
		СтрокаТабеля["Часов" + НомерДня] = СтрокаДанныхОВремени.Часы;
		БуквенноеОбозначение = Лев(Строка(СтрокаДанныхОВремени.ВидВремени),1);
		
		СтрокаТабеля["Время" + НомерДня] = ТабельПредставлениеВремениПоВиду(БуквенноеОбозначение, СтрокаДанныхОВремени.Часы);  
		
		ОбрабатываемаяДата = СтрокаДанныхОВремени.Дата;
		
	КонецЦикла;	
	
	КоличествоСтрокПоСотруднику = МассивСтрокПоСотруднику.Количество();
	
	Сотрудник = МассивСтрокПоСотруднику[0].Сотрудник;
	
	Для Каждого СтрокаПоСотруднику Из МассивСтрокПоСотруднику Цикл
		СтрокаПоСотруднику.Сотрудник = Сотрудник;		
	КонецЦикла;	
		
КонецПроцедуры

Функция ТабельНоваяСтрокаДанныхОВремени(ДанныеОВремени, Сотрудник, НомерСтрокиСотрудник)
	СтрокиПоСотруднику = Новый Массив;
	
	НоваяСтрока = ДанныеОВремени.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.НомерСтрокиСотрудник = НомерСтрокиСотрудник;
	
	СтрокиПоСотруднику.Добавить(НоваяСтрока);
	
	ВтораяНоваяСтрока = ДанныеОВремени.Добавить();
	ВтораяНоваяСтрока.Сотрудник = Сотрудник;
	ВтораяНоваяСтрока.НомерСтрокиСотрудник = НомерСтрокиСотрудник;
	
	СтрокиПоСотруднику.Добавить(ВтораяНоваяСтрока);
	
	Возврат СтрокиПоСотруднику;
КонецФункции

Функция ТабельНоваяСтрокаПоСотруднику(ДанныеОВремени, ГоловнаяСтрокаПоСотруднику) Экспорт 
	
	ИндексГоловнойСтроки = ДанныеОВремени.Индекс(ГоловнаяСтрокаПоСотруднику);
	
	ОбщееКоличествоСтрок = ДанныеОВремени.Количество();
	
	СтруктураПоиска = Новый Структура("НомерСтрокиСотрудник", ГоловнаяСтрокаПоСотруднику.НомерСтрокиСотрудник + 1);
	
	СтрокиСледующегоСотрудника = ДанныеОВремени.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиСледующегоСотрудника.Количество() > 0 Тогда
		ИндексДобавляемойСтроки = ДанныеОВремени.Индекс(СтрокиСледующегоСотрудника[0]); 
		НоваяСтрока = ДанныеОВремени.Вставить(ИндексДобавляемойСтроки);
	Иначе
		НоваяСтрока = ДанныеОВремени.Добавить();
	КонецЕсли;
	
	НоваяСтрока.НомерСтрокиСотрудник = ГоловнаяСтрокаПоСотруднику.НомерСтрокиСотрудник;
	НоваяСтрока.Сотрудник = ГоловнаяСтрокаПоСотруднику.Сотрудник;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Процедура МагазинОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Объект.Магазин = ВыбранноеЗначение;
КонецПроцедуры


#КонецОбласти
