
#Область КлиентскиеПеременные

&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ДобавитьХарактеристику;

&НаКлиенте
Перем СтараяНоменклатура; // Используется в механизмах обработчиков событий табличной части Товары.

&НаКлиенте
Перем СтараяХарактеристика; // Используется в механизмах обработчиков событий табличной части Товары.

&НаКлиенте
Перем ИзмененаЦена; // Используется в механизмах обработчиков событий табличной части Товары.

#КонецОбласти

#Область СерверныеПеременные

&НаСервере
Перем ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров; // Кэш, используемый для быстрого поиска строки дерева по
                                                           // номенклатуре.

&НаСервере
Перем СоответствиеВидовЦенИменамКолонокТаблицыТоваров; // Кэш имен колонок видов цен

&НаСервере
Перем СправочникВидовЦен;

&НаСервере
Перем КурсыВалют;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ВыгрузитьДанныеВТСДЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(
			ЭтаФорма,
			Истина,
			Новый Структура("ВидЦены", Результат.Значение));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоНаименованию(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ЗавершитьОбработкуДанныхПоКодуКлиент(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		
	Иначе // Номенклатура.
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТВызовСервера.ОбработатьДанныеПоНоменклатуреИзТСДСервер(ЭтотОбъект, СтруктураПараметров);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	
	ИдентификаторСтроки = Неопределено;
	Номенклатура = СтруктураПараметров.Номенклатура;
	Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Если СтруктураПараметров.Свойство("Характеристика")
		И ЗначениеЗаполнено(СтруктураПараметров.Характеристика) Тогда
		Характеристика = СтруктураПараметров.Характеристика;
	КонецЕсли;
	
	СтрокаНоменклатуры = Неопределено;
	ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
	Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		Если ЭлементНоменклатура.Номенклатура = Номенклатура Тогда
			Если ЗначениеЗаполнено(Характеристика) Тогда
				ПодчиненныеНоменклатуре = ЭлементНоменклатура.ПолучитьЭлементы();
				Для Каждого ЭлементХарактеристика Из ПодчиненныеНоменклатуре Цикл
					Если ЭлементХарактеристика.Характеристика = Характеристика Тогда
						ИдентификаторСтроки = ЭлементХарактеристика.ПолучитьИдентификатор();
						Возврат ИдентификаторСтроки;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ИдентификаторСтроки = ЭлементНоменклатура.ПолучитьИдентификатор();
				Возврат ИдентификаторСтроки;
			КонецЕсли;
			СтрокаНоменклатуры = ЭлементНоменклатура;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаНоменклатуры = Неопределено Тогда
		СтрокаНоменклатуры = ЭлементыНоменклатура.Добавить();
	КонецЕсли;
	
	СтрокаНоменклатуры.Номенклатура = Номенклатура;
	СтрокаНоменклатуры.ИндексКартинки = 0;
	
	Если ЗначениеЗаполнено(Характеристика) Тогда
		НоваяПодчиненнаяСтрока = СтрокаНоменклатуры.ПолучитьЭлементы().Добавить();
		НоваяПодчиненнаяСтрока.Номенклатура = Номенклатура;
		НоваяПодчиненнаяСтрока.Характеристика = Характеристика;
		НоваяПодчиненнаяСтрока.ИндексКартинки = 2;
		ИдентификаторСтроки = НоваяПодчиненнаяСтрока.ПолучитьИдентификатор();
	Иначе
		ИдентификаторСтроки = СтрокаНоменклатуры.ПолучитьИдентификатор();
	КонецЕсли;
	
	ДобавитьНоменклатуруСервер(ИдентификаторСтроки);
			
	ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = Неопределено;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ДобавитьНоменклатуруПоСерийномуНомеру(ЭтотОбъект, СтруктураНомера);
	Возврат ИдентификаторСтроки;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ДобавитьТоварыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ДополнительныеПараметры.РежимДобавления = "ДобавитьТоварыПоЦеновойГруппе" Тогда
			
			ДобавитьНоменклатуруЦеновойГруппы(Результат);
			
		ИначеЕсли ДополнительныеПараметры.РежимДобавления = "ЗаполнитьТоварыПоЦеновойГруппе" Тогда
			
			ДеревоЦен.ПолучитьЭлементы().Очистить();
			ДобавитьНоменклатуруЦеновойГруппы(Результат);
			
		ИначеЕсли ДополнительныеПараметры.РежимДобавления = "ДобавитьТоварыПоОтбору" Тогда
			
			Если ЗначениеЗаполнено(Результат) Тогда
				ДобавитьТоварыПоОтборуНаСервере(Результат);
			КонецЕсли;
			
		ИначеЕсли ДополнительныеПараметры.РежимДобавления = "ДобавитьНоменклатуру" Тогда
			
			ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
			Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
				Если ЭлементНоменклатура.Номенклатура = Результат Тогда
					Элементы.ДеревоЦен.ТекущаяСтрока = ЭлементНоменклатура.ПолучитьИдентификатор();
					ПоказатьПредупреждение(, НСтр("ru = 'Такая номенклатура уже введена.'"));
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
			НоваяСтрока = ЭлементыНоменклатура.Добавить();
			Элементы.ДеревоЦен.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			
			НоваяСтрока.Номенклатура = Результат;
			
			ЗаполнитьИндексКартинкиСтрокиДереваЦен(НоваяСтрока);
			ДобавитьНоменклатуруСервер(Элементы.ДеревоЦен.ТекущаяСтрока);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьХарактеристикуЗавершение(Характеристика, ДополнительныеПараметры) Экспорт
	
	Если Характеристика <> Неопределено Тогда
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		
		ЭлементыХарактеристики = ДеревоЦен.НайтиПоИдентификатору(Элементы.ДеревоЦен.ТекущаяСтрока);
		Если ЭлементыХарактеристики.ПолучитьРодителя() = Неопределено Тогда
			ЭлементыХарактеристики = ЭлементыХарактеристики.ПолучитьЭлементы();
		Иначе
			ЭлементыХарактеристики = ЭлементыХарактеристики.ПолучитьРодителя().ПолучитьЭлементы();
		КонецЕсли;
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			Если ЭлементХарактеристика.Характеристика = Характеристика Тогда
				Элементы.ДеревоЦен.ТекущаяСтрока = ЭлементХарактеристика.ПолучитьИдентификатор();;
				ПоказатьПредупреждение(, НСтр("ru = 'Такая характеристика уже введена.'"));
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
		Если ТекущийРодитель = Неопределено Тогда
			ТекущийРодитель = ТекущиеДанные;
		КонецЕсли;
		НоваяСтрока = ТекущийРодитель.ПолучитьЭлементы().Добавить();
		Элементы.ДеревоЦен.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
		Если ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийРодитель, , "Характеристика");
		Иначе
			ЗаполнитьЗначенияСвойств(
				НоваяСтрока, 
				ТекущийРодитель,
				"Номенклатура, ХарактеристикиИспользуются, ЦеноваяГруппа, ЕдиницаИзмерения");
		КонецЕсли;
		НоваяСтрока.Характеристика = Характеристика;
		
		ЗаполнитьИндексКартинкиСтрокиДереваЦен(НоваяСтрока);
		ДеревоЦенХарактеристикаПриИзмененииСервер(Элементы.ДеревоЦен.ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоЦеновойГруппеПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры.Вставить("РежимДобавления", "ЗаполнитьТоварыПоЦеновойГруппе");
		ПараметрыОткрытия = Новый Структура("МножественныйВыбор", Истина);
		ОбработчикОповещения = Новый ОписаниеОповещения("ДобавитьТоварыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму(
			"Справочник.ЦеновыеГруппы.ФормаВыбора",
			ПараметрыОткрытия,
			ЭтаФорма,
			,
			,
			,
			ОбработчикОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ТекущиеДанные = Элементы.ВыбранныеЦены.ТекущиеДанные;
		ВыбранныеЦеныИзменены = Истина;
		СтруктураДанных = УстановитьНастройкиКомпоновкиДанныхДляВидаЦены(ТекущиеДанные.Ссылка,
							Результат,
							АдресХранилищаНастройкиКомпоновкиДанных,
							АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен);
		
		ТекущиеДанные.Параметры = СтруктураДанных.ОписаниеПараметров;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЦеныНаПроцентЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОчиститьСообщения();
		ИзменитьЦеныНаПроцентНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьРасчетЦенЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		РассчитатьЦены(Результат);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПерезаполнитьПоОснованиюСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПереходеКУстановкеЦенЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПереформироватьТаблицуЦен(Истина);
	Иначе
		ПереформироватьТаблицуЦен(Ложь);
	КонецЕсли;
	ВыбранныеЦеныИзменены = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамСУчетомНаценкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЗаполнитьПоОстаткамСУчетомНаценкиНаСервере(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданиеИВыборНовойХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДеревоЦен.Строки.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ТекущаяСтрока.Характеристика = Результат;
	ДеревоЦенХарактеристикаПриИзменении(Неопределено);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ФлагОткрытияФормы = Истина;
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ЦеныЗагруженыПередОткрытием") Тогда
		ЦеныЗагруженыПередОткрытием = Параметры.ЦеныЗагруженыПередОткрытием;
	КонецЕсли;
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,СостояниеДокумента,РазрешеноПроведение);
	
	ИспользоватьЦеновыеГруппы              = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры       = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	ПустаяУпаковка                         = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	ПустаяХарактеристика                   = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ПустаяЕдиницаИзмерения                 = Справочники.БазовыеЕдиницыИзмерения.ПустаяСсылка();
	
	СпособЗаданияЦеныВручную = Перечисления.СпособыЗаданияЦен.ЗадаватьВручную;
	СпособЗаданияЦеныПоДаннымИБ = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ;
	СпособЗаданияЦеныПоДаннымИБПриПоступлении = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении;
	
	ЗагрузитьКурсыВалют();
	
	// Таблица настроек СКД для видов цен с алгоритмом расчета цены "Заполнять по данным ИБ".
	ТаблицаНастройкиКомпоновкиДанных = ЗагрузитьТаблицуНастройкиКомпоновкиДанных();
	ЗагрузитьСправочникВидовЦен(ТаблицаНастройкиКомпоновкиДанных);
	
	ИнициализироватьВыбранныеЦены(ТаблицаНастройкиКомпоновкиДанных);
	
	АдресХранилищаНастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(
												ТаблицаНастройкиКомпоновкиДанных,
												УникальныйИдентификатор);
	
	ОтображатьВлияющиеЦены = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
								"",
								"УстановкаЦенНоменклатурыОтображатьВлияющиеЦены");
	
	ЗаполнитьДокумент();
	
	УстановитьРассчитыватьАвтоматически(Истина);
	УстановитьЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре(Истина);
	ЗафиксироватьКолонкуНоменклатура(Истина);
	УстановитьДоступностьКомандБуфераОбмена();
	
	ИспользуютсяВалюты = ЦенообразованиеПереопределяемый.ИспользуютсяВалюты();
	
	Если НЕ ИспользуютсяВалюты Тогда
		
		Элементы.ВыбранныеЦеныВалюта.Видимость = Ложь;
		Элементы.ВыбранныеЦеныВалюта.Доступность = Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьДоступностьЭлементовСервер();
		ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.Основание.Видимость = Истина;
		Элементы.ПерезаполнитьПоОснованию.Видимость = Истина;
	Иначе
		Элементы.Основание.Видимость = Ложь;
		Элементы.ПерезаполнитьПоОснованию.Видимость = Ложь;
	КонецЕсли;
	
	Для Каждого ЭлементФормы Из Элементы Цикл
		Если Найти(ЭлементФормы.Имя, "ПроцентНаценкиВидЦен") > 0 Тогда
			Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы") Тогда
				ЭлементФормы.Видимость = ОтображатьВлияющиеЦены;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ОтображениеТаблицыЦен = Настройки.Получить("ОтображениеТаблицыЦен");
	
	Если ЗначениеЗаполнено(ОтображениеТаблицыЦен) Тогда
		Если ОтображениеТаблицыЦен = "Дерево" Тогда
			Элементы.ДеревоЦен.Отображение = ОтображениеТаблицы.Дерево;
		ИначеЕсли ОтображениеТаблицыЦен = "ИерархическийСписок" Тогда
			Элементы.ДеревоЦен.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		ИначеЕсли ОтображениеТаблицыЦен = "Список" Тогда
			Элементы.ДеревоЦен.Отображение = ОтображениеТаблицы.Список;
		КонецЕсли;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УстановитьРассчитыватьАвтоматически(Ложь);
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДеревоЦенРассчитыватьАвтоматически",
			"Видимость",
			Ложь);
		
	#Иначе
		РассчитыватьАвтоматически = Настройки.Получить("РассчитыватьАвтоматически");
		УстановитьРассчитыватьАвтоматически(РассчитыватьАвтоматически);
		
	#КонецЕсли
	
	ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре = Настройки.Получить("ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре");
	УстановитьЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре(ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре);
	
	ЗафиксироватьКолонкуНоменклатура = Настройки.Получить("ЗафиксироватьКолонкуНоменклатура");
	ЗафиксироватьКолонкуНоменклатура(ЗафиксироватьКолонкуНоменклатура);
	
	ОтображатьВлияющиеЦены = Настройки.Получить("ОтображатьВлияющиеЦены");
	Элементы.ДеревоЦенПереключательОтображатьВлияющиеЦены.Пометка = ОтображатьВлияющиеЦены;
	
	АвтоматическиДобавлятьХарактеристики = Настройки.Получить("АвтоматическиДобавлятьХарактеристики");
	УстановитьАвтоматическиДобавлятьХарактеристики(АвтоматическиДобавлятьХарактеристики);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Если Настройки.Получить("ОтображениеТаблицыЦен") <> Неопределено Тогда
		ОтображениеТаблицыЦен = Строка(Элементы.ДеревоЦен.Отображение);
		Настройки["ОтображениеТаблицыЦен"] = ОтображениеТаблицыЦен;
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"",
		"УстановкаЦенНоменклатурыОтображатьВлияющиеЦены",
		ОтображатьВлияющиеЦены);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ВыбранныеЦеныИзменены И ДеревоЦен.ПолучитьЭлементы().Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Состав цен изменился. Необходимо перейти к установке цен.'"));
		Отказ = Истина;
	КонецЕсли;
	
	// &ЗамерПроизводительности 
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
	                                            "Документ.УстановкаЦенНоменклатуры.ФормаДокумента.Запись",
                                                           Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоместитьВидыЦенВТабличнуюЧасть(ТекущийОбъект);
		ПоместитьЦеныВТабличнуюЧасть(ТекущийОбъект, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ДеревоЦен.ПолучитьЭлементы().Количество() = 0 Тогда
	
		ТекстОшибки = НСтр("ru = 'НЕ введено ни одной строки в список ""Товары"".'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Объект.Ссылка,
			"ДеревоЦен",
			,
			Отказ);
		
	Иначе
		
		ПроверитьКорректностьЗаполненияДокумента(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	Если ФлагОткрытияФормы = Истина Тогда
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			НомерВПределахДня = ДатаДокументаСервер(Объект.Дата) - НачалоДня(ДатаДокументаСервер(Объект.Дата)) + 1;
		Иначе
			НомерВПределахДня = РассчитатьНомерВПределахДня(ДатаДокументаСервер(Объект.Дата), Объект.Ссылка);
			Объект.Дата = РассчитатьДатуДокумента(ДатаДокументаСервер(Объект.Дата), НомерВПределахДня);
		КонецЕсли;
		
		// Таблица настроек СКД для видов цен с алгоритмом расчета цены "Заполнять по данным ИБ".
		ТаблицаНастройкиКомпоновкиДанных = ЗагрузитьТаблицуНастройкиКомпоновкиДанных();
		
		ИнициализироватьВыбранныеЦены(ТаблицаНастройкиКомпоновкиДанных);
		
		ЗаполнитьДокумент();
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовСервер();
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(
		Объект,
		СостояниеДокумента,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение);
		
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.Основание.Видимость = Истина;
		Элементы.ПерезаполнитьПоОснованию.Видимость = Истина;
	Иначе
		Элементы.Основание.Видимость = Ложь;
		Элементы.ПерезаполнитьПоОснованию.Видимость = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьЭлементовСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(
		Объект,
		СостояниеДокумента,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение);
		
	// &ЗамерПроизводительности 	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если РассчитыватьАвтоматически
		И (НЕ ЦеныЗагруженыПередОткрытием)
		И Объект.Ссылка.Пустая()
		И Объект.Товары.Количество() > 0 Тогда
		
		МассивВидовЦен = ВыбранныеВидыЦен();
		
		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("ЗагрузкаСтарыхЦен",      Ложь);
		ПараметрыРасчета.Вставить("ОкруглениеРучныхЦен",    Ложь);
		ПараметрыРасчета.Вставить("ВидыЦен",                МассивВидовЦен);
		ПараметрыРасчета.Вставить("ТолькоВыделенныеСтроки", Ложь);
		ПараметрыРасчета.Вставить("ТолькоНезаполненные",    Ложь);
		
		РассчитатьЦены(ПараметрыРасчета);
		
	КонецЕсли;
	
	Если ОтображатьВлияющиеЦены Тогда
		ПереформироватьТаблицуЦен(Ложь);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен()
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУстановкаЦен
		И НЕ Объект.Согласован Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Или ИмяСобытия = "ВставкаСтрокИзБуфераОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбмена();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаУстановкаЦен Тогда
		
		ПриПереходеКУстановкеЦен();
		ВыбранныеЦеныИзменены = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоЦен

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	Элементы.ГруппаОснование.Видимость  = ВидимостьЭлементов;
	Элементы.ГруппаШапка.Видимость      = ВидимостьЭлементов;
	Элементы.УстановкаЦенПанельМастера.Видимость = ВидимостьЭлементов;
	Элементы.ГруппаПодвал.Видимость     = ВидимостьЭлементов;
	
	Если ВидимостьЭлементов Тогда
		ЭтаФорма.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Авто;
		Картинка = БиблиотекаКартинок.РазвернутьТабличнуюЧасть
	Иначе
		ЭтаФорма.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
		Картинка = БиблиотекаКартинок.СвернутьТабличнуюЧасть;
	КонецЕсли;
	Элементы.РазвернутьСвернутьТЧ.Картинка = Картинка;
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломДобавления" таблицы " ДеревоЦен".
//
&НаКлиенте
Процедура ДеревоЦенПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если НЕ Копирование Тогда
		ДобавитьНоменклатуру(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные.Номенклатура <> СтараяНоменклатура Тогда
		
		ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
		Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
			Если ЭлементНоменклатура.Номенклатура = ТекущиеДанные.Номенклатура Тогда
				Если ТекущиеДанные.ПолучитьИдентификатор() <> ЭлементНоменклатура.ПолучитьИдентификатор() Тогда
					Если НЕ ОтменаРедактирования Тогда
						ПоказатьПредупреждение(, НСтр("ru = 'Такая номенклатура уже введена.'"));
						Элементы.ДеревоЦен.ЗакончитьРедактированиеСтроки(Истина);
					Иначе
						ТекущиеДанные.Номенклатура = СтараяНоменклатура;
						ТекущиеДанные.Характеристика = СтараяХарактеристика;
					КонецЕсли;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДеревоЦенНоменклатураПриИзмененииСервер(Элементы.ДеревоЦен.ТекущиеДанные.ПолучитьИдентификатор(), НЕ ИзмененаЦена);
		
	КонецЕсли;
	
	Если ТекущиеДанные.Характеристика <> СтараяХарактеристика Тогда
		
		ЭлементыХарактеристики = ДеревоЦен.НайтиПоИдентификатору(Элементы.ДеревоЦен.ТекущаяСтрока);
		
		Если ЭлементыХарактеристики.ПолучитьРодителя() = Неопределено Тогда
			ЭлементыХарактеристики = ЭлементыХарактеристики.ПолучитьЭлементы();
		Иначе
			ЭлементыХарактеристики = ЭлементыХарактеристики.ПолучитьРодителя().ПолучитьЭлементы();
		КонецЕсли;
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			Если ЭлементХарактеристика.Характеристика = ТекущиеДанные.Характеристика Тогда
				Если ТекущиеДанные.ПолучитьИдентификатор() <> ЭлементХарактеристика.ПолучитьИдентификатор() Тогда
					Если НЕ ОтменаРедактирования Тогда
						ПоказатьПредупреждение(, НСтр("ru = 'Такая характеристика уже введена.'"));
						Элементы.ДеревоЦен.ЗакончитьРедактированиеСтроки(Истина);
					Иначе
						ТекущиеДанные.Номенклатура = СтараяНоменклатура;
						ТекущиеДанные.Характеристика = СтараяХарактеристика;
					КонецЕсли;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДеревоЦенХарактеристикаПриИзмененииСервер(Элементы.ДеревоЦен.ТекущиеДанные.ПолучитьИдентификатор(), НЕ ИзмененаЦена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	СтараяНоменклатура = ТекущиеДанные.Номенклатура;
	СтараяХарактеристика = ТекущиеДанные.Характеристика;
	ИзмененаЦена = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииЯчейки" таблицы "ДеревоЦен".
//
&НаКлиенте
Процедура ДеревоЦенПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
		ИЛИ Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ДеревоЦенХарактеристика" Тогда
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		Иначе
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ДеревоЦенНоменклатура" Тогда
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		Иначе
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля "ДеревоЦенХарактеристика".
//
&НаКлиенте
Процедура ДеревоЦенХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(
		ЭтаФорма,
		Элемент,
		СтандартнаяОбработка,
		Элементы.ДеревоЦен.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.ДеревоЦен.ТекущиеДанные, "ДеревоЦен");
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля "ДеревоЦенУпаковка".
//
&НаКлиенте
Процедура Подключаемый_ДеревоЦенУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(
		ДанныеВыбора,
		СтандартнаяОбработка,
		Элементы.ДеревоЦен.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДеревоЦенУпаковкаПриИзменении(Элемент)

	ДеревоЦенУпаковкаПриИзмененииКлиент(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенНоменклатураПриИзменении(Элемент)
	
	ДеревоЦенНоменклатураПриИзмененииСервер(Элементы.ДеревоЦен.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ДеревоЦенХарактеристика".
//
&НаКлиенте
Процедура ДеревоЦенХарактеристикаПриИзменении(Элемент)
	
	ДеревоЦенХарактеристикаПриИзмененииСервер(Элементы.ДеревоЦен.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыбранныеЦены

// Процедура - обработчик события "ПриИзменении" поля "ВыбранныеЦеныВыбрана".
//
&НаКлиенте
Процедура ВыбранныеЦеныВыбранаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыбранныеЦены.ТекущиеДанные;
	Если ТекущиеДанные.ЗапрещенныйВидЦены Тогда
		ТекущиеДанные.Выбрана = Ложь;
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Нет прав на установку цен по данному виду цены'"),
			Объект.Ссылка,
			"ВыбранныеЦены[" + Формат(ТекущиеДанные.ПолучитьИдентификатор(), "ЧН=0; ЧГ=0") + "].Ссылка");
		Возврат;
	КонецЕсли;
	
	ПроставитьФлагиВлияетЗависитНаКлиенте();
	ВыбранныеЦеныИзменены = Истина;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля "ВыбранныеЦеныСсылка".
//
&НаКлиенте
Процедура ВыбранныеЦеныСсылкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля "ВыбранныеЦеныСсылка".
//
&НаКлиенте
Процедура ВыбранныеЦеныСсылкаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "Выбор" таблицы "ВыбранныеЦены".
//
&НаКлиенте
Процедура ВыбранныеЦеныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВыбранныеЦены.ТекущиеДанные;
	Если ТекущиеДанные.ЗапрещенныйВидЦены Тогда
		ТекущиеДанные.Выбрана = Ложь;
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Нет прав на установку цен по данному виду цены'"),
			Объект.Ссылка,
			"ВыбранныеЦены[" + Формат(ТекущиеДанные.ПолучитьИдентификатор(), "ЧН=0; ЧГ=0") + "].Ссылка");
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		Если Поле = Элементы.ВыбранныеЦеныВлияющиеЦены Тогда
			Если Элемент.ТекущиеДанные.ВлияющиеЦены.Количество() > 0 Тогда
				ПоказатьЗначение(, Элемент.ТекущиеДанные.ВлияющиеЦены);
			КонецЕсли;
		ИначеЕсли Поле = Элементы.ВыбранныеЦеныЗависимыеЦены Тогда
			Если Элемент.ТекущиеДанные.ЗависимыеЦены.Количество() > 0 Тогда
				ПоказатьЗначение(, Элемент.ТекущиеДанные.ЗависимыеЦены);
			КонецЕсли;
		ИначеЕсли Поле = Элементы.ВыбранныеЦеныПараметры Тогда
			
			РедактироватьНастройки(Команды["РедактироватьНастройки"]);
			
		Иначе
			ПоказатьЗначение(, Элемент.ТекущиеДанные.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Изменить(Команда)
	
	Если Объект.Согласован Тогда
		Объект.Согласован = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоЦеновойГруппе(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РежимДобавления", "ДобавитьТоварыПоЦеновойГруппе");
	ОбработчикОповещения = Новый ОписаниеОповещения("ДобавитьТоварыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОткрытия = Новый Структура("МножественныйВыбор", Истина);
	ОткрытьФорму(
		"Справочник.ЦеновыеГруппы.ФормаВыбора",
		ПараметрыОткрытия,
		ЭтаФорма,
		,
		,
		,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоОтбору(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РежимДобавления", "ДобавитьТоварыПоОтбору");
	ОбработчикОповещения = Новый ОписаниеОповещения("ДобавитьТоварыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму(
		"Обработка.ПодборТоваровПоОтбору.Форма.Форма",
		,
		ЭтаФорма,
		,
		,
		,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоЦеновойГруппе(Команда)
	
	ОчищатьТаблицу = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	Если ДеревоЦен.ПолучитьЭлементы().Количество() > 0 Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения(
										"ЗаполнитьТоварыПоЦеновойГруппеПродолжение",
										ЭтотОбъект,
										ДополнительныеПараметры);
		ПоказатьВопрос(
			ОбработчикОповещения,
			НСтр("ru = 'Таблица цен будет очищена. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьТоварыПоЦеновойГруппеПродолжение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамСУчетомНаценки(Команда)
	
	ВидыЦен = Новый Массив;
	Для Каждого СтрокаЦен Из ВыбранныеЦены Цикл
		Если СтрокаЦен.Выбрана 
			И СтрокаЦен.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.РассчитыватьПоДругимВидамЦен") Тогда
			ВидыЦен.Добавить(СтрокаЦен.Ссылка);
			Для Каждого ВлияющаяЦена Из СтрокаЦен.НепосредственноВлияющиеЦены Цикл
				Если ВидыЦен.Найти(ВлияющаяЦена.Значение) = Неопределено Тогда
					ВидыЦен.Добавить(ВлияющаяЦена.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ВидыЦен.Количество() > 0 Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВидыЦен", ВидыЦен);
		ДополнительныеПараметры.Вставить("РежимДобавления", "ДобавитьТоварыПоОтбору");
		ОбработчикОповещения = Новый ОписаниеОповещения(
										"ЗаполнитьПоОстаткамСУчетомНаценкиЗавершение",
										ЭтотОбъект,
										ДополнительныеПараметры);
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Подбор товаров по отбору с отклонением наценки'"));
		ОткрытьФорму(
			"Обработка.ПодборТоваровПоОтбору.Форма.Форма",
			ПараметрыОткрытия,
			ЭтаФорма,
			,
			,
			,
			ОбработчикОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одного вида цен, рассчитываемого от других.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСтарыеЦены(Команда)
	
	ЗапуститьРасчетЦен(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкруглитьРучныеЦены(Команда)
	
	ЗапуститьРасчетЦен(Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЦеныНаПроцент(Команда)
	
	ПараметрыОткрытия = ПараметрыОткрытияФормыВыбораПараметровРасчета(Ложь, Истина);
	ДополнительныеПараметры = Новый Структура;
	ОбработчикОповещения = Новый ОписаниеОповещения(
									"ИзменитьЦеныНаПроцентЗавершение",
									ЭтотОбъект,
									ДополнительныеПараметры);
	ОткрытьФорму(
		"Документ.УстановкаЦенНоменклатуры.Форма.ИзменениеЦенНаПроцент",
		ПараметрыОткрытия,
		ЭтаФорма,
		,
		,
		,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуЦен(Команда)
	
	ПереформироватьТаблицуЦен(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКРедактированиюСпискаВидовЦен(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаВидыЦен;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКУстановкеЦен(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаУстановкаЦен;
	ПриПереходеКУстановкеЦен();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательРассчитыватьАвтоматически(Команда)
	
	УстановитьРассчитыватьАвтоматическиНаКлиенте(НЕ РассчитыватьАвтоматически);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре(Команда)
	
	УстановитьЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуреНаКлиенте(НЕ ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательАвтоматическиДобавлятьХарактеристики(Команда)
	
	УстановитьАвтоматическиДобавлятьХарактеристикиНаКлиенте(НЕ АвтоматическиДобавлятьХарактеристики);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательЗафиксироватьКолонкуНоменклатура(Команда)
	
	ЗафиксироватьКолонкуНоменклатураНаКлиенте(НЕ ЗафиксироватьКолонкуНоменклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтображатьВлияющиеЦены(Команда)
	
	ОтображатьВлияющиеЦены = НЕ ОтображатьВлияющиеЦены;
	
	Элементы.ДеревоЦенПереключательОтображатьВлияющиеЦены.Пометка = ОтображатьВлияющиеЦены;
	
	ПереформироватьТаблицуЦен(Ложь);
	
	Для Каждого ЭлементФормы Из Элементы Цикл
		Если Найти(ЭлементФормы.Имя, "ПроцентНаценкиВидЦен") > 0 Тогда
			Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы") Тогда
				ЭлементФормы.Видимость = ОтображатьВлияющиеЦены;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	ЗапуститьРасчетЦен();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеВидыЦен(Команда)
	
	Для Каждого СтрокаТаблицы Из ВыбранныеЦены Цикл
		Если НЕ СтрокаТаблицы.Выбрана И НЕ СтрокаТаблицы.ЗапрещенныйВидЦены Тогда
			СтрокаТаблицы.Выбрана = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ВыбранныеЦеныИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьВсеВидыЦен(Команда)
	
	Для Каждого СтрокаТаблицы Из ВыбранныеЦены Цикл
		Если СтрокаТаблицы.Выбрана Тогда
			СтрокаТаблицы.Выбрана = Ложь;
		КонецЕсли;
	КонецЦикла;

	ВыбранныеЦеныИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеЗависимые(Команда)
	
	ВыбратьВсеЗависимыеЦены();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеВлияющие(Команда)
	
	ВыбратьВсеВлияющиеЦены();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьХарактеристику(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Текст = НСтр("ru = 'Для того, чтобы выбрать характеристику Вам необходимо предварительно выбрать номенклатуру.'");
		ПоказатьПредупреждение(, Текст);
		Возврат;
	КонецЕсли;
	
	ВладелецХарактеристики = Неопределено;
	РезультатПроверки = ЦенообразованиеВызовСервера.ПроверитьИспользованиеХарактеристик(
							ТекущиеДанные.Номенклатура,
							ВладелецХарактеристики);
	Если РезультатПроверки Тогда
		Если ВладелецХарактеристики = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для данной номенклатуры характеристики не заданы.'"));
			Возврат;
		Иначе
			
			ПараметрыФормыВыбора = Новый Структура;
			ПараметрыФормыВыбора.Вставить("ТекущийЭлемент"  , ТекущиеДанные.Характеристика);
			ПараметрыФормыВыбора.Вставить("ПараметрВладелец", ВладелецХарактеристики);
			ПараметрыФормыВыбора.Вставить("Номенклатура"    , ТекущиеДанные.Номенклатура);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
			ОбработчикОповещения = Новый ОписаниеОповещения(
											"ДобавитьХарактеристикуЗавершение",
											ЭтотОбъект,
											ДополнительныеПараметры);
			ОткрытьФорму(
				"Справочник.ХарактеристикиНоменклатуры.ФормаВыбора",
				ПараметрыФормыВыбора,
				ЭтаФорма,
				,
				,
				,
				ОбработчикОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Для данной номенклатуры отключено использование характеристик.'"));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуру(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РежимДобавления", "ДобавитьНоменклатуру");
	ОбработчикОповещения = Новый ОписаниеОповещения("ДобавитьТоварыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму(
		"Справочник.Номенклатура.ФормаВыбора",
		,
		ЭтаФорма,
		,
		,
		,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройки(Команда)
	
	ТекущиеДанные = Элементы.ВыбранныеЦены.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Редактировать настройки невозможно. НЕ выбран вид цены'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Согласован Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТекущиеДанные.СпособЗаданияЦены
				<> ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ")
			И ТекущиеДанные.СпособЗаданияЦены 
				<> ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении") )
		ИЛИ НЕ ТекущиеДанные.Выбрана Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Редактировать настройки схемы компоновки можно только для выбранных видов цен
			                          |со способом задания цены ""Заполнять по данным ИБ""'"));
		Возврат;
	КонецЕсли;
	
	// Открыть редактор настроек схемы компоновки данных.
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru = 'Настройка параметров для вида цены ""%1""'");
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = СтрЗаменить(
													ЗаголовокФормыНастройкиСхемыКомпоновкиДанных,
													"%1",
													Строка(ТекущиеДанные.Ссылка));
													
	АдресНастроекКомпоновкиДанных = АдресНастроекКомпоновкиДанныхДляВидаЦены(
										ТекущиеДанные.Ссылка,
										АдресХранилищаНастройкиКомпоновкиДанных,
										УникальныйИдентификатор);
	
	ДополнительныеПараметры = Новый Структура;
	ОбработчикОповещения = Новый ОписаниеОповещения(
									"РедактироватьНастройкиЗавершение",
									ЭтотОбъект,
									ДополнительныеПараметры);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("НеПомещатьНастройкиВСхемуКомпоновкиДанных", Истина);
	ПараметрыОткрытия.Вставить("НеРедактироватьСхемуКомпоновкиДанных", Истина);
	ПараметрыОткрытия.Вставить("НеНастраиватьУсловноеОформление", Истина);
	ПараметрыОткрытия.Вставить("НеНастраиватьВыбор", Истина);
	ПараметрыОткрытия.Вставить("НеНастраиватьПорядок", Истина);
	ПараметрыОткрытия.Вставить("АдресСхемыКомпоновкиДанных", ТекущиеДанные.АдресСхемыКомпоновкиДанных);
	ПараметрыОткрытия.Вставить("АдресНастроекКомпоновкиДанных", АдресНастроекКомпоновкиДанных);
	ПараметрыОткрытия.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("Заголовок", ЗаголовокФормыНастройкиСхемыКомпоновкиДанных);
	
	ОткрытьФорму(
		"ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных",
		ПараметрыОткрытия,
		ЭтаФорма,
		,
		,
		,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиПоУмолчанию(Команда)
	
	ТекущиеДанные = Элементы.ВыбранныеЦены.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Редактировать настройки невозможно. НЕ выбран вид цены'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Согласован Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТекущиеДанные.СпособЗаданияЦены
				<> ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ")
			И ТекущиеДанные.СпособЗаданияЦены
				<> ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении"))
		ИЛИ НЕ ТекущиеДанные.Выбрана Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Редактировать настройки схемы компоновки можно только для выбранных видов цен
			                          |со способом задания цены ""Заполнять по данным ИБ""'"));
		Возврат;
	КонецЕсли;
	
	АдресХранилищаНастройкиКомпоновщика = НастройкиСхемыКомпоновкиДанныхПоУмолчанию(
											ТекущиеДанные.Ссылка,
											ТекущиеДанные.АдресСхемыКомпоновкиДанных);
	
	Если АдресХранилищаНастройкиКомпоновщика <> Неопределено Тогда
		ВыбранныеЦеныИзменены = Истина;
		СтруктураДанных = УстановитьНастройкиКомпоновкиДанныхДляВидаЦены(
							ТекущиеДанные.Ссылка,
							АдресХранилищаНастройкиКомпоновщика,
							АдресХранилищаНастройкиКомпоновкиДанных,
							АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен);
		ТекущиеДанные.Параметры = СтруктураДанных.ОписаниеПараметров;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru = 'Перезаполнить документ по данным основания?'");
		ДополнительныеПараметры = Новый Структура;
		ОбработчикОповещения = Новый ОписаниеОповещения(
										"ПерезаполнитьПоОснованиюЗавершение",
										ЭтотОбъект,
										ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ТекстСообщения = НСтр("ru = 'Основание не указано.'");
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'установка цен номенклатуры'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИспользоватьОтборПоТипамНоменклатуры", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуЗапрашиватьКоличество", Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуОстаткиНаСкладах", Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуВвестиСерийныеНомера", Истина);
	ПараметрыФормы.Вставить("ЗапрашиватьКоличество", Ложь);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	РазвернутьСвернутьТЧНаСервере();
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	ПолучитьСтрокиИзБуфераОбмена();
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.ДеревоЦен.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.ДеревоЦен.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("ПострочнаяЗагрузка", Ложь);
	ПараметрыЗагрузки.Вставить("ЕстьКоличество", Ложь);
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтаФорма, ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	МассивЦен = ВыбранныеВидыЦен();
	СписокДляВыбора = Новый СписокЗначений;
	СписокДляВыбора.ЗагрузитьЗначения(МассивЦен);
	Если СписокДляВыбора.Количество() = 1 Тогда
		ВыгрузитьДанныеВТСДЗавершение(СписокДляВыбора[0], ДополнительныеПараметры);
	Иначе
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ВыгрузитьДанныеВТСДЗавершение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		СписокДляВыбора.ПоказатьВыборЭлемента(
			ОбработчикОповещения,
			НСтр("ru = 'Выберите вид цены'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоНаименованию(Команда)
	
	ПараметрыПоиска = Новый Структура;
	
	РаботаСПравиламиИменованияКлиент.ПоискПоНаименованию(ЭтаФорма,ПараметрыПоиска);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента, "ДеревоЦен");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресНастроекКомпоновкиДанныхДляВидаЦены(
			ВидЦены,
			АдресХранилищаНастройкиКомпоновкиДанных,
			УникальныйИдентификатор)
	
	ТаблицаНастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновкиДанных);
	
	НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Найти(ВидЦены, "ВидЦены");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ПоместитьВоВременноеХранилище(НайденнаяСтрока.НастройкиКомпоновкиДанных, УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

// Процедура - обработчик события "ПриИзменении" поля "ДеревоЦенНоменклатура".
//
&НаСервере
Процедура ДеревоЦенНоменклатураПриИзмененииСервер(ИдентификаторСтроки, РассчитатьЦены = Истина)
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекущаяСтрока.ПолучитьРодителя() = Неопределено Тогда
		Характеристики = ТекущаяСтрока.ПолучитьЭлементы();
		Если Характеристики.Количество() > 0 Тогда
			Если Характеристики[0].Номенклатура <> ТекущаяСтрока.Номенклатура Тогда
				ТекущаяСтрока.ПолучитьЭлементы().Очистить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВидыЦен = ВыбранныеСтрокиТаблицыВидовЦен();
	Для Каждого ВидЦены Из ВидыЦен Цикл
		
		ИмяКолонки         = ВидЦены.ИмяКолонки;
		ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока[ИмяКолонки]) И РассчитатьЦены Тогда
			ТекущаяСтрока[ИмяКолонки] = 0;
		КонецЕсли;
		
		Если ИспользоватьУпаковкиНоменклатуры И ЗначениеЗаполнено(ТекущаяСтрока[ИмяКолонкиУпаковка]) Тогда
			ТекущаяСтрока[ИмяКолонкиУпаковка] = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СправочникНоменклатура.ЦеноваяГруппа    КАК ЦеноваяГруппа,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры) ТОГДА ИСТИНА
		|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры) ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ХарактеристикиИспользуются
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|ГДЕ
		|	СправочникНоменклатура.Ссылка = &Номенклатура
		|");
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|;
			|ВЫБРАТЬ
			|	ЦеныНоменклатуры.Характеристика  КАК Характеристика,
			|	ЦеныНоменклатуры.ВидЦены         КАК ВидЦены,
			|	ЦеныНоменклатуры.Упаковка        КАК Упаковка
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента,
			|													Номенклатура = &Номенклатура
			|													И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|													И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры
			|";
			
			Запрос.УстановитьПараметр("ВидыЦен",       ВыбранныеВидыЦен());
			Запрос.УстановитьПараметр("ДатаДокумента", ДатаДляЗапросаЦенНоменклатуры());
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		ВыборкаНоменклатура = МассивРезультатов[0].Выбрать();
		
		Если ВыборкаНоменклатура.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВыборкаНоменклатура);
		КонецЕсли;
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			ВыборкаУпаковки = МассивРезультатов[1].Выбрать();
			Пока ВыборкаУпаковки.Следующий() Цикл
				ТекущаяСтрока["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены)] = ВыборкаУпаковки.Упаковка;
			КонецЦикла;
		КонецЕсли;
		
		Если АвтоматическиДобавлятьХарактеристики
			И ИспользоватьХарактеристикиНоменклатуры
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
			ЗаполнитьХарактеристикиНоменклатуры(
				ТекущаяСтрока,
				НЕ РассчитатьЦены И ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре);
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока.ЕдиницаИзмерения = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
		ТекущаяСтрока.ЦеноваяГруппа    = Справочники.ЦеновыеГруппы.ПустаяСсылка();
		
	КонецЕсли;
	
	
	// Загрузка старых цен и процента изменения.
	ТаблицаЗначений = ПустаяТаблицаТовары();
	Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
		
		Если СтрокаВидЦены.Выбрана ИЛИ СтрокаВидЦены.Влияет Тогда
			
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
			
			НоваяСтрока = ТаблицаЗначений.Добавить();
			НоваяСтрока.Номенклатура   = ТекущаяСтрока.Номенклатура;
			НоваяСтрока.Характеристика = ТекущаяСтрока.Характеристика;
			НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
			НоваяСтрока.Цена           = ТекущаяСтрока[ИмяКолонки];
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
			КонецЕсли;
			
			Для Каждого ПодчиненнаяСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
				
				НоваяСтрока = ТаблицаЗначений.Добавить();
				НоваяСтрока.Номенклатура   = ПодчиненнаяСтрока.Номенклатура;
				НоваяСтрока.Характеристика = ПодчиненнаяСтрока.Характеристика;
				НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
				НоваяСтрока.Цена           = ПодчиненнаяСтрока[ИмяКолонки];
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагрузитьСтарыеЦеныНоменклатуры(ТаблицаЗначений);
	
	Если РассчитатьЦены Тогда
		РассчитатьЦеныПоИдентификаторуСтроки(ИдентификаторСтроки, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ДеревоЦенУпаковка".
//
&НаКлиенте
Процедура ДеревоЦенУпаковкаПриИзмененииКлиент(Элемент)
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущейКолонки = СтрЗаменить(Элемент.Имя, "ДеревоЦен", "");

	Если ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре Тогда
		
		ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
		
		Если ТекущаяСтрока.ПолучитьРодителя() = Неопределено Тогда
			
			ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
			ТекущееЗначение   = ТекущиеДанные[ИмяТекущейКолонки];
			
			Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				Если ЭлементХарактеристика[ИмяТекущейКолонки] <> ТекущееЗначение Тогда
					ЭлементХарактеристика[ИмяТекущейКолонки] = ТекущееЗначение;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДеревоЦенУпаковкаПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), ИмяТекущейКолонки);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЦенУпаковкаПриИзмененииНаСервере(ИдентификаторСтроки, ИмяТекущейКолонки)
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	// Загрузка старых цен и процента изменения.
	ТаблицаЗначений = ПустаяТаблицаТовары();
	Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
		
		Если СтрокаВидЦены.Выбрана ИЛИ СтрокаВидЦены.Влияет Тогда
			
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
			
			НоваяСтрока = ТаблицаЗначений.Добавить();
			НоваяСтрока.Номенклатура   = ТекущаяСтрока.Номенклатура;
			НоваяСтрока.Характеристика = ТекущаяСтрока.Характеристика;
			НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
			НоваяСтрока.Цена           = ТекущаяСтрока[ИмяКолонки];
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
			КонецЕсли;
			
			Для Каждого ПодчиненнаяСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
				
				НоваяСтрока = ТаблицаЗначений.Добавить();
				НоваяСтрока.Номенклатура   = ПодчиненнаяСтрока.Номенклатура;
				НоваяСтрока.Характеристика = ПодчиненнаяСтрока.Характеристика;
				НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
				НоваяСтрока.Цена           = ПодчиненнаяСтрока[ИмяКолонки];
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагрузитьСтарыеЦеныНоменклатуры(ТаблицаЗначений);
	
	РассчитатьЦеныПоИдентификаторуСтроки(ИдентификаторСтроки, , ИмяТекущейКолонки);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ДеревоЦенХарактеристика".
//
&НаСервере
Процедура ДеревоЦенХарактеристикаПриИзмененииСервер(ИдентификаторСтроки, РассчитатьЦены = Истина)
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			ВидыЦен = ВыбранныеВидыЦен();
			ТаблицаУпаковок = ПоследниеУпаковкиЦен(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика, ВидыЦен);
			
			Для Каждого ТекСтрока Из ТаблицаУпаковок Цикл
				ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонкиПоВидуЦены(ТекСтрока.ВидЦены);
				Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
					ТекущаяСтрока[ИмяКолонкиУпаковка] = ТекСтрока.Упаковка;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	// Загрузка старых цен и процента изменения.
	ТаблицаЗначений = ПустаяТаблицаТовары();
	Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
		
		Если СтрокаВидЦены.Выбрана ИЛИ СтрокаВидЦены.Влияет Тогда
			
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
			
			НоваяСтрока = ТаблицаЗначений.Добавить();
			НоваяСтрока.Номенклатура   = ТекущаяСтрока.Номенклатура;
			НоваяСтрока.Характеристика = ТекущаяСтрока.Характеристика;
			НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
			НоваяСтрока.Цена           = ТекущаяСтрока[ИмяКолонки];
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
			КонецЕсли;
			
			Для Каждого ПодчиненнаяСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
				
				НоваяСтрока = ТаблицаЗначений.Добавить();
				НоваяСтрока.Номенклатура   = ПодчиненнаяСтрока.Номенклатура;
				НоваяСтрока.Характеристика = ПодчиненнаяСтрока.Характеристика;
				НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
				НоваяСтрока.Цена           = ПодчиненнаяСтрока[ИмяКолонки];
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагрузитьСтарыеЦеныНоменклатуры(ТаблицаЗначений);
	
	Если РассчитатьЦены Тогда
		РассчитатьЦеныПоИдентификаторуСтроки(ИдентификаторСтроки, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенЦенаПриИзменении(Элемент)
	
	ИзмененаЦена = Истина;
	ДеревоЦенЦенаПриИзмененииКлиент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенЦенаПриИзмененииКлиент(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущейКолонки  = СтрЗаменить(Элемент.Имя, "ДеревоЦен", "");
	Если Найти(ИмяТекущейКолонки, "ПроцентИзмененияВидЦены") Тогда
		ИмяТекущейКолонки = СтрЗаменить(ИмяТекущейКолонки, "ПроцентИзмененияВидЦены", "ВидЦены");
		ТекущиеДанные[ИмяТекущейКолонки] = Окр(ТекущиеДанные["СтараяЦена" + ИмяТекущейКолонки]
												* ((ТекущиеДанные["ПроцентИзменения" + ИмяТекущейКолонки] / 100) + 1),
											15, 2);
	КонецЕсли;
	
	ИмяКолонкиУпаковка = СтрЗаменить(
							СтрЗаменить(Элемент.Имя, "ПроцентИзмененияВидЦены", "ВидЦены"),
							"ДеревоЦенВидЦены",
							"УпаковкаВидЦены");
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
	
	ТекущиеДанные["ИзмененаВручную" + ИмяТекущейКолонки] = Истина;
	
	Если ТекущиеДанные["СтараяЦена" + ИмяТекущейКолонки] <> 0 Тогда
		ТекущиеДанные["ПроцентИзменения" + ИмяТекущейКолонки] = Окр(100
				* (ТекущиеДанные[ИмяТекущейКолонки]
					- ТекущиеДанные["СтараяЦена" + ИмяТекущейКолонки])
				/ ТекущиеДанные["СтараяЦена" + ИмяТекущейКолонки],
			5,2);
	Иначе
		ТекущиеДанные["ПроцентИзменения" + ИмяТекущейКолонки] = 0;
	КонецЕсли;
	
	Если ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре Тогда
		
		МассивУпаковок = Новый Массив();
		СоответствиеУпаковок = Неопределено;
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			ТекущееЗначениеУпаковки = ТекущиеДанные[ИмяКолонкиУпаковка];
			Если ЗначениеЗаполнено(ТекущееЗначениеУпаковки) Тогда
				МассивУпаковок.Добавить(ТекущееЗначениеУпаковки);
			КонецЕсли;
			
			ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
			Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				
				ЗначениеКолонкиУпаковка = ЭлементХарактеристика[ИмяКолонкиУпаковка];
				Если ЗначениеЗаполнено(ЗначениеКолонкиУпаковка) И МассивУпаковок.Найти(ЗначениеКолонкиУпаковка) = Неопределено Тогда
					МассивУпаковок.Добавить(ЗначениеКолонкиУпаковка);
				КонецЕсли;
				
			КонецЦикла;
		
			Если МассивУпаковок.Количество() > 0 Тогда
				СоответствиеУпаковок = КоэффициентыУпаковокНоменклатуры(МассивУпаковок);
			КонецЕсли;
			
		КонецЕсли;
		
		// Определим коэффициент упаковки текущей цены.
		КоэффициентУпаковкиЦеныИсточника = 1;
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			Если ЗначениеЗаполнено(ТекущееЗначениеУпаковки) И СоответствиеУпаковок <> Неопределено Тогда
				НайденноеЗначение = СоответствиеУпаковок.Получить(ТекущееЗначениеУпаковки);
				Если НайденноеЗначение <> Неопределено Тогда
					КоэффициентУпаковкиЦеныИсточника = НайденноеЗначение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТекущееЗначение = ТекущиеДанные[ИмяТекущейКолонки];
		ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				
				ЗначениеКолонкиУпаковка = ЭлементХарактеристика[ИмяКолонкиУпаковка];
				Если ТекущееЗначениеУпаковки = ЗначениеКолонкиУпаковка
					И ЭлементХарактеристика[ИмяТекущейКолонки] <> ТекущееЗначение Тогда
					
					ЭлементХарактеристика[ИмяТекущейКолонки] = ТекущееЗначение;
					ЭлементХарактеристика["ИзмененаВручную" + ИмяТекущейКолонки] = Истина;
					
					Если ЭлементХарактеристика["СтараяЦена" + ИмяТекущейКолонки] <> 0 Тогда
						ЭлементХарактеристика["ПроцентИзменения" + ИмяТекущейКолонки] = Окр(100
								* (ЭлементХарактеристика[ИмяТекущейКолонки]
									- ЭлементХарактеристика["СтараяЦена" + ИмяТекущейКолонки])
								/ ЭлементХарактеристика["СтараяЦена" + ИмяТекущейКолонки],
							5,2);
					Иначе
						ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
					КонецЕсли;
					
				Иначе
					
					// Определим коэффициент упаковки влияющей цены.
					КоэффициентУпаковкиЦеныНазначения = 1;
					
					Если ЗначениеЗаполнено(ЗначениеКолонкиУпаковка) И СоответствиеУпаковок <> Неопределено Тогда
						НайденноеЗначение = СоответствиеУпаковок.Получить(ЗначениеКолонкиУпаковка);
						Если НайденноеЗначение <> Неопределено Тогда
							КоэффициентУпаковкиЦеныНазначения = НайденноеЗначение;
						КонецЕсли;
					КонецЕсли;
					
					Если КоэффициентУпаковкиЦеныИсточника = КоэффициентУпаковкиЦеныНазначения Тогда
						НоваяЦена = ТекущееЗначение;
					Иначе
						НоваяЦена = ТекущееЗначение / КоэффициентУпаковкиЦеныИсточника * КоэффициентУпаковкиЦеныНазначения;
					КонецЕсли;
					
					Если ЭлементХарактеристика[ИмяТекущейКолонки] <> НоваяЦена Тогда
						
						ЭлементХарактеристика[ИмяТекущейКолонки] = НоваяЦена;
						ЭлементХарактеристика["ИзмененаВручную" + ИмяТекущейКолонки] = Истина;
						
						Если ЭлементХарактеристика["СтараяЦена" + ИмяТекущейКолонки] <> 0 Тогда
							ЭлементХарактеристика["ПроцентИзменения" + ИмяТекущейКолонки] = Окр(100 
									* (ЭлементХарактеристика[ИмяТекущейКолонки]
										- ЭлементХарактеристика["СтараяЦена" + ИмяТекущейКолонки])
									/ ЭлементХарактеристика["СтараяЦена" + ИмяТекущейКолонки],
								5,2);
						Иначе
							ЭлементХарактеристика["ПроцентИзменения" + ИмяТекущейКолонки] = 0;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				НоваяЦена = ТекущееЗначение;
				
				Если ЭлементХарактеристика[ИмяТекущейКолонки] <> НоваяЦена Тогда
					
					ЭлементХарактеристика[ИмяТекущейКолонки] = НоваяЦена;
					ЭлементХарактеристика["ИзмененаВручную" + ИмяТекущейКолонки] = Истина;
					
					Если ЭлементХарактеристика["СтараяЦена" + ИмяТекущейКолонки] <> 0 Тогда
						ЭлементХарактеристика["ПроцентИзменения" + ИмяТекущейКолонки] = Окр(100 
								* (ЭлементХарактеристика[ИмяТекущейКолонки]
									- ЭлементХарактеристика["СтараяЦена" + ИмяТекущейКолонки])
								/ ЭлементХарактеристика["СтараяЦена" + ИмяТекущейКолонки],
							5,2);
					Иначе
						ЭлементХарактеристика["ПроцентИзменения" + ИмяТекущейКолонки] = 0;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РассчитатьЦеныПоИдентификаторуСтроки(ТекущиеДанные.ПолучитьИдентификатор(), , ИмяТекущейКолонки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенПроцентНаценкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоЦен.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ИмяКолонки = СтрЗаменить(Элемент.Имя, "ДеревоЦен", "");
		ИмяКолонкиЦены = СтрЗаменить(ИмяКолонки, "ПроцентНаценки", "");
		Процент = ТекущаяСтрока[ИмяКолонки];
		ИдентификаторСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
		ПроцентНаценкиПриИзменении(ИдентификаторСтроки, ИмяКолонкиЦены, Процент)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроцентНаценкиПриИзменении(ИдентификаторСтроки, ИмяКолонки, Процент)
	
	Если ТипЗнч(ИдентификаторСтроки) = Тип("Число") Тогда
		СтрокаТаблицы = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	Иначе
		СтрокаТаблицы = ИдентификаторСтроки;
	КонецЕсли;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяКолонки", ИмяКолонки);
	СтрокиВидаЦен = ВыбранныеЦены.НайтиСтроки(СтруктураПоиска);
	
	ПересчитатьКолонку = Ложь;
	ПересчитатьВсеЦены = Ложь;
	ПересчитатьВсеПроценты = Ложь;
	Если СтрокиВидаЦен.Количество() > 0 Тогда
		СтрокаВидаЦен = СтрокиВидаЦен[0];
		Если СтрокаВидаЦен.Выбрана Тогда
			Если СтрокаВидаЦен.НепосредственноВлияющиеЦены.Количество() <> 1 Тогда
				СтрокаТаблицы["ПроцентНаценки" + ИмяКолонки] = 0;
				Возврат;
			КонецЕсли;
			Если СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоДругимВидамЦен Тогда
				ПересчитатьКолонку = Истина;
				Если СтрокаВидаЦен.ЗависимыеЦены.Количество() > 0 Тогда
					ПересчитатьВсеЦены = РассчитыватьАвтоматически;
					ПересчитатьВсеПроценты = НЕ РассчитыватьАвтоматически;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПересчитатьКолонку Тогда
		СтруктураЦеноваяГруппа = Новый Структура("ЦеноваяГруппа", СтрокаТаблицы.ЦеноваяГруппа);
			
		ЦеновыеГруппыАлгоритмов = СтрокаВидаЦен.ЦеновыеГруппы.НайтиСтроки(СтруктураЦеноваяГруппа);
		Если ЦеновыеГруппыАлгоритмов.Количество() > 0 Тогда
			АлгоритмРасчетаЦены = ЦеновыеГруппыАлгоритмов[0].АлгоритмРасчетаЦены;
		Иначе
			АлгоритмРасчетаЦены = СтрокаВидаЦен.АлгоритмРасчетаЦены;
		КонецЕсли;
		
		ЗначениеБазовойЦены = 0;
		ПроцентНаценки = 0;
		
		Если ЗначениеЗаполнено(АлгоритмРасчетаЦены) Тогда
			СоответствиеУпаковок = Неопределено;
			
			СтрокаБазовойЦены = НайтиСтрокуВидаЦен(СтрокаВидаЦен.НепосредственноВлияющиеЦены[0].Значение);
			
			Если СтрокаБазовойЦены.Выбрана Тогда
				ЗначениеБазовойЦены = СтрокаТаблицы[СтрокаБазовойЦены.ИмяКолонки];
			Иначе
				ЗначениеБазовойЦены = СтрокаТаблицы["СтараяЦена" + СтрокаБазовойЦены.ИмяКолонки];
			КонецЕсли;
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				ПересчитатьБазовуюЦенуСУчетомУпаковок(СтрокаТаблицы, СтрокаВидаЦен, СтрокаБазовойЦены, ЗначениеБазовойЦены);
			КонецЕсли;
			
			Если ЗначениеБазовойЦены <> 0 Тогда
				СтараяЦена = СтрокаТаблицы["СтараяЦена" + СтрокаВидаЦен.ИмяКолонки];
				СтрокаТаблицы["ПроцентНаценки" + СтрокаВидаЦен.ИмяКолонки] = Процент;
				НоваяЦена = ЗначениеБазовойЦены * (100 + Процент) / 100;
				СтрокаТаблицы[СтрокаВидаЦен.ИмяКолонки] = ОкруглитьЦену(НоваяЦена, СтрокаВидаЦен);
				ПроцентИзменения = 0;
				Если СтараяЦена <> 0 Тогда
					ПроцентИзменения = Окр((НоваяЦена - СтараяЦена) * 100 / СтараяЦена, 15, 2);
				КонецЕсли;
				СтрокаТаблицы["ПроцентИзменения" + ИмяКолонки] = ПроцентИзменения;
				Если ПересчитатьВсеПроценты Тогда
					ВыбранныеСтроки = ВыбранныеСтрокиТаблицыВидовЦен();
					Для Каждого СтрокаВидаЦен Из ВыбранныеСтроки Цикл
						Если СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоДругимВидамЦен Тогда
							ПересчитатьПроцентНаценкиВКолонке(СтрокаТаблицы, СтрокаВидаЦен, СтруктураЦеноваяГруппа);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ПересчитатьВсеЦены Тогда
					
					ТаблицаНоменклатуры = СоздатьПустуюТаблицуНоменклатуры();
					НоваяСтрока                = ТаблицаНоменклатуры.Добавить();
					НоваяСтрока.ИдентификаторСтроки = 0;
					НоваяСтрока.Номенклатура   = СтрокаТаблицы.Номенклатура;
					НоваяСтрока.Характеристика = СтрокаТаблицы.Характеристика;
					
					ВидыЦен = ЗависимыеОтВидаЦеныВидыЦен(СтрокаВидаЦен);
					РассчитатьВычисляемыеЦены(ТаблицаНоменклатуры, ВидыЦен, Ложь);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьПроцентНаценкиВСтроке(ИдентификаторСтроки, ИмяТекущейКолонки = "")
	
	ПересчитатьВсеКолонки = Ложь;
	ПересчитатьЗависимыеКолонки = Ложь;
	ПересчитатьТекущуюКолонку = Ложь;
	Если ЗначениеЗаполнено(ИмяТекущейКолонки) Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИмяКолонки", ИмяТекущейКолонки);
		СтрокиВидаЦен = ВыбранныеЦены.НайтиСтроки(СтруктураПоиска);
		Если СтрокиВидаЦен.Количество() > 0 Тогда
			СтрокаВидаЦен = СтрокиВидаЦен[0];
			Если СтрокаВидаЦен.Выбрана Тогда
				Если СтрокаВидаЦен.ЗависимыеЦены.Количество() > 0 Тогда
					ПересчитатьЗависимыеКолонки = НЕ РассчитыватьАвтоматически;
				КонецЕсли;
				Если СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоДругимВидамЦен Тогда
					ПересчитатьТекущуюКолонку = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПересчитатьВсеКолонки = НЕ РассчитыватьАвтоматически;
	КонецЕсли;
	Если ПересчитатьЗависимыеКолонки
		ИЛИ ПересчитатьТекущуюКолонку
		ИЛИ ПересчитатьВсеКолонки Тогда
		Если ТипЗнч(ИдентификаторСтроки) = Тип("Число") Тогда
			СтрокаТаблицыЦен = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
		Иначе
			СтрокаТаблицыЦен = ИдентификаторСтроки;
		КонецЕсли;
		СтруктураЦеноваяГруппа = Новый Структура("ЦеноваяГруппа", СтрокаТаблицыЦен.ЦеноваяГруппа);
		
		Если ПересчитатьТекущуюКолонку Тогда
			ПересчитатьПроцентНаценкиВКолонке(СтрокаТаблицыЦен, СтрокаВидаЦен, СтруктураЦеноваяГруппа);
		КонецЕсли;
		Если ПересчитатьЗависимыеКолонки Тогда
			ВыбранныеСтроки = ЗависимыеОтВидаЦеныВидыЦен(СтрокаВидаЦен);
			Для Каждого СтрокаВидаЦен Из ВыбранныеСтроки Цикл
				Если СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоДругимВидамЦен Тогда
					ПересчитатьПроцентНаценкиВКолонке(СтрокаТаблицыЦен, СтрокаВидаЦен, СтруктураЦеноваяГруппа);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ПересчитатьВсеКолонки Тогда
			ВыбранныеСтроки = ВыбранныеВидыЦен();
			Для Каждого СтрокаВидаЦен Из ВыбранныеСтроки Цикл
				Если СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоДругимВидамЦен Тогда
					ПересчитатьПроцентНаценкиВКолонке(СтрокаТаблицыЦен, СтрокаВидаЦен, СтруктураЦеноваяГруппа);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьПроцентНаценкиВКолонке(СтрокаТаблицыЦен, СтрокаВидаЦен, СтруктураЦеноваяГруппа)
	
	Если СтрокаВидаЦен.НепосредственноВлияющиеЦены.Количество() <> 1 Тогда
		СтрокаТаблицыЦен["ПроцентНаценки" + СтрокаВидаЦен.ИмяКолонки] = 0;
		Возврат;
	КонецЕсли;
	
	ТекущаяЦена = СтрокаТаблицыЦен[СтрокаВидаЦен.ИмяКолонки];
		
	ЦеновыеГруппыАлгоритмов = СтрокаВидаЦен.ЦеновыеГруппы.НайтиСтроки(СтруктураЦеноваяГруппа);
	Если ЦеновыеГруппыАлгоритмов.Количество() > 0 Тогда
		АлгоритмРасчетаЦены = ЦеновыеГруппыАлгоритмов[0].АлгоритмРасчетаЦены;
	Иначе
		АлгоритмРасчетаЦены = СтрокаВидаЦен.АлгоритмРасчетаЦены;
	КонецЕсли;
	
	ЗначениеБазовойЦены = 0;
	ПроцентНаценки = 0;
	
	Если ЗначениеЗаполнено(АлгоритмРасчетаЦены) Тогда
		СоответствиеУпаковок = Неопределено;
			
		СтрокаБазовойЦены = НайтиСтрокуВидаЦен(СтрокаВидаЦен.НепосредственноВлияющиеЦены[0].Значение);
		
		Если СтрокаБазовойЦены.Выбрана Тогда
			ЗначениеБазовойЦены = СтрокаТаблицыЦен[СтрокаБазовойЦены.ИмяКолонки];
		Иначе
			ЗначениеБазовойЦены = СтрокаТаблицыЦен["СтараяЦена" + СтрокаБазовойЦены.ИмяКолонки];
		КонецЕсли;
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			ПересчитатьБазовуюЦенуСУчетомУпаковок(СтрокаТаблицыЦен, СтрокаВидаЦен, СтрокаБазовойЦены, ЗначениеБазовойЦены);
		КонецЕсли;
		
		Если ЗначениеБазовойЦены <> 0 Тогда
			ПроцентНаценки = Окр((ТекущаяЦена - ЗначениеБазовойЦены) * 100 / ЗначениеБазовойЦены, 2);
		КонецЕсли;
		СтрокаТаблицыЦен["ПроцентНаценки" + СтрокаВидаЦен.ИмяКолонки] = ПроцентНаценки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруСервер(ИдентификаторСтроки)
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Если ТекущаяСтрока.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик <> Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать Тогда
			ТекущаяСтрока.ХарактеристикиИспользуются = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ДеревоЦенНоменклатураПриИзмененииСервер(ИдентификаторСтроки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИменаРазрешенныхПараметров()
	
	РазрешенныеИмена = Новый Массив;
	РазрешенныеИмена.Добавить("ДатаДокумента");
	РазрешенныеИмена.Добавить("ЭтоВводНаОсновании");
	РазрешенныеИмена.Добавить("ВидЦены");
	РазрешенныеИмена.Добавить("Основание");
	
	Возврат РазрешенныеИмена;
	
КонецФункции

&НаСервере
Функция НастройкиСхемыКомпоновкиДанныхПоУмолчанию(ВидЦены, АдресСхемыКомпоновкиДанных)
	
	НастройкиКомпоновкиДанных = ВидЦены.ХранилищеНастроекКомпоновкиДанных.Получить();
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	Если НЕ ЗначениеЗаполнено(НастройкиКомпоновкиДанных) Тогда
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		УстановитьПривилегированныйРежим(Истина);
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		УстановитьПривилегированныйРежим(Ложь);
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
		Возврат ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), УникальныйИдентификатор);
		
	Иначе
		Возврат ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеПараметров(ВидЦены, НастройкиКомпоновкиДанных, ПараметрыСхемКомпоновкиДанныхВидовЦен)
	
	РазрешенныеИмена = ИменаРазрешенныхПараметров();
	
	Для Каждого Элемент Из НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы Цикл
		НайденныеСтроки = ПараметрыСхемКомпоновкиДанныхВидовЦен.НайтиСтроки(
							Новый Структура("Имя, ВидЦены",
									Строка(Элемент.Параметр),
									ВидЦены));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.Значение = Элемент.Значение;
		КонецЦикла;
	КонецЦикла;
	
	ОписаниеПараметров = "";
	Для Каждого Параметр Из ПараметрыСхемКомпоновкиДанныхВидовЦен.НайтиСтроки(Новый Структура("ВидЦены", ВидЦены)) Цикл
		
		ЗначениеПараметра = Неопределено;
		Если Параметр.ДоступныеЗначения = Неопределено Тогда
			ЗначениеПараметра = Параметр.Значение;
		Иначе
			ДоступноеЗначение = Параметр.ДоступныеЗначения.НайтиПоЗначению(Параметр.Значение);
			Если ДоступноеЗначение <> Неопределено Тогда
				ЗначениеПараметра = ?(ЗначениеЗаполнено(ДоступноеЗначение.Представление),
														ДоступноеЗначение.Представление,
														Параметр.Значение);
			Иначе
				ЗначениеПараметра = Параметр.Значение;
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеПараметров = ?(ЗначениеЗаполнено(ОписаниеПараметров),
								ОписаниеПараметров,
								НСтр("ru = 'Параметры:'") + " ")
									+ ?(НЕ ЗначениеЗаполнено(ОписаниеПараметров), "", ", ")
									+ Параметр.Заголовок + " = "
									+ ?(ЗначениеЗаполнено(ЗначениеПараметра), Строка(ЗначениеПараметра), НСтр("ru = '<не заполнен>'"));
	КонецЦикла;
	
	ОписаниеПараметров = ОписаниеПараметров
							+ ?(ЗначениеЗаполнено(Строка(НастройкиКомпоновкиДанных.Отбор)), 
													" " + НСтр("ru = 'Отбор:'") + " " + Строка(НастройкиКомпоновкиДанных.Отбор),"");
	
	Возврат Новый Структура("ОписаниеПараметров", ОписаниеПараметров);
	
КонецФункции

&НаКлиенте
Процедура ПроставитьФлагиВлияетЗависитНаКлиенте()
	
	Для Каждого Цена Из ВыбранныеЦены Цикл
		
		Цена.Зависит = Ложь;
		Цена.Влияет  = Ложь;
		
	КонецЦикла;
	
	Для Каждого Цена Из ВыбранныеЦены Цикл
		
		Если Цена.Выбрана Тогда 
			
			Для Каждого ЗависимаяЦена Из Цена.ЗависимыеЦены Цикл
				
				СтрокаЗависимойЦены         = НайтиСтрокуВидаЦенНаКлиенте(ВыбранныеЦены, ЗависимаяЦена.Значение);
				СтрокаЗависимойЦены.Зависит = НЕ СтрокаЗависимойЦены.Выбрана;
				
			КонецЦикла;
			
			Для Каждого ВлияющаяЦена Из Цена.ВлияющиеЦены Цикл
				
				СтрокаВыбраннойЦены        = НайтиСтрокуВидаЦенНаКлиенте(ВыбранныеЦены, ВлияющаяЦена.Значение);
				СтрокаВыбраннойЦены.Влияет = НЕ СтрокаВыбраннойЦены.Выбрана;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьНастройкиКомпоновкиДанныхДляВидаЦены(
			ВидЦены,
			АдресНастроекВоВременномХранилище,
			АдресХранилищаНастройкиКомпоновкиДанных,
			АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен)
	
	НастройкиКомпоновкиДанных        = ПолучитьИзВременногоХранилища(АдресНастроекВоВременномХранилище);
	ТаблицаНастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновкиДанных);
	
	НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Найти(ВидЦены, "ВидЦены");
	Если НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Добавить();
		НайденнаяСтрока.ВидЦены = ВидЦены;
	КонецЕсли;
	НайденнаяСтрока.НастройкиКомпоновкиДанных = НастройкиКомпоновкиДанных;
	
	ПоместитьВоВременноеХранилище(ТаблицаНастройкиКомпоновкиДанных, АдресХранилищаНастройкиКомпоновкиДанных);
	
	ПараметрыСхемКомпоновкиДанныхВидовЦен = ПолучитьИзВременногоХранилища(АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен);
	Возврат ОписаниеПараметров(ВидЦены, НастройкиКомпоновкиДанных, ПараметрыСхемКомпоновкиДанныхВидовЦен);
	
КонецФункции

&НаСервере
Процедура УстановитьПризнакРучногоИзмененияВычисляемыхЦен(ТаблицаНоменклатуры, ИзмененноеПоле = Неопределено)
	
	СтрокаИзмененныйВидЦены = СтрокаВидаЦеныПоИмениПоля(ВыбранныеЦены, ИзмененноеПоле);
	Если СтрокаИзмененныйВидЦены <> Неопределено Тогда
	
		МассивСтрокЗависимыхВидовЦен = ЗависимыеОтВидаЦеныВидыЦен(СтрокаИзмененныйВидЦены);
		УстановитьПризнакРучногоИзмененияДляВидовЦен(ТаблицаНоменклатуры, МассивСтрокЗависимыхВидовЦен);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакРучногоИзмененияДляВидовЦен(ТаблицаНоменклатуры, МассивСтрокЗависимыхВидовЦен)
	
	Для Каждого ПозицияНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		СтрокаТаблицыЦен = НайтиСтрокуДереваЦен(ПозицияНоменклатуры);
		
		Для Каждого СтрокаВидЦены Из МассивСтрокЗависимыхВидовЦен Цикл
			
			Если СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоДругимВидамЦен Тогда
				СтрокаТаблицыЦен["ИзмененаВручную" + СтрокаВидЦены.ИмяКолонки] = Истина;;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВыбранныеВидыЦен()
	
	ВидыЦен = Новый Массив;
	
	Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
		Если ТекСтрока.Выбрана Тогда
			ВидыЦен.Добавить(ТекСтрока.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыЦен;
	
КонецФункции

&НаСервере
Функция ВыбранныеСтрокиТаблицыВидовЦен()
	
	ВидыЦен = Новый Массив();
	
	Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
		Если ТекСтрока.Выбрана Тогда
			ВидыЦен.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыЦен;
	
КонецФункции

// Заполняет значения цен, рассчитываемым по данным информационной базы.
//
// Параметры:
//  ТаблицаНоменклатуры - ТаблицаЗначений
//  ВидЦены - СправочникСсылка.ВидыЦен
//  ТолькоНезаполненные - Указывает на необходимость вычисления только незаполненных цен.
//
&НаСервере
Процедура ВычислитьЗначенияЦеныПоДаннымИБ(
			ТаблицаНоменклатуры,
			СтрокаВидЦены,
			ТолькоНезаполненные = Ложь,
			НастройкиКомпоновкиДанных = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТаблицаНоменклатуры.Количество() > 0 Тогда
		
		Если СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
			ИЛИ СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении Тогда
			
			// Копирование схемы компоновки данных.
			Схема = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаВидЦены.АдресСхемыКомпоновкиДанных));
			СхемаКомпоновкиДанных = Схема.Получить();
			
			ТекстОшибкиПриПроверке = СтрЗаменить(НСтр("ru='Вид цены ""%ВидЦены%""'"), "%ВидЦены%", СтрокаВидЦены.Ссылка);
			Если Ценообразование.ПроверитьСхемуКомпоновкиДанных(СхемаКомпоновкиДанных, ТекстОшибкиПриПроверке) Тогда
				
				// Заполнение набора данных ТаблицаНоменклатуры.
				РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
				
				НаборДанныхНоменклатура = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
				НаборДанныхНоменклатура.Имя = "ТаблицаНоменклатуры";
				НаборДанныхНоменклатура.ИмяОбъекта = "ТаблицаНоменклатуры";
				НаборДанныхНоменклатура.ИсточникДанных = РабочийНаборДанных.ИсточникДанных;
				
				ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "ИдентификаторСтроки", "Строка");
				ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "Номенклатура", "СправочникСсылка.Номенклатура");
				Если ИспользоватьХарактеристикиНоменклатуры Тогда
					ДобавитьПолеНабораДанныхСКД(
						НаборДанныхНоменклатура,
						"Характеристика",
						"СправочникСсылка.ХарактеристикиНоменклатуры");
				КонецЕсли;
				
				СхемаКомпоновкиДанных.СвязиНаборовДанных.Очистить();
				ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "Номенклатура");
				
				Если ИспользоватьХарактеристикиНоменклатуры Тогда
					ДобавитьСвязьНаборовДанныхСКД(
						СхемаКомпоновкиДанных,
						НаборДанныхНоменклатура,
						РабочийНаборДанных,
						"Характеристика");
				КонецЕсли;
				
				
				// Подготовка компоновщика макета компоновки данных, загрузка настроек.
				КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
				КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
				
				Если НастройкиКомпоновкиДанных <> Неопределено Тогда
					КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
					КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
				Иначе
					КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
				КонецЕсли;
				
				
				// Заполнение структуры отчета и выбранных полей.
				КомпоновщикНастроек.Настройки.Структура.Очистить();
				
				ГруппировкаДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
				ГруппировкаДетальныеЗаписи.Использование = Истина;
				
				КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "ИдентификаторСтроки");
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Номенклатура");
				
				Если ИспользоватьХарактеристикиНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Характеристика");
				КонецЕсли;
				
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Упаковка");
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Коэффициент");
				КонецЕсли;
				
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Цена");
				
				
				// Компоновка макета и исполнение запроса.
				КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
				МакетКомпоновки = КомпоновщикМакета.Выполнить(
									СхемаКомпоновкиДанных,
									КомпоновщикНастроек.Настройки,
									,
									,
									Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
				
				Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("Основание");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = Объект.ДокументОснование;
				КонецЕсли;
				Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ДатаДокумента");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = ДатаДляЗапросаЦенНоменклатуры();
				КонецЕсли;
				Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ВидЦены");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = СтрокаВидЦены.Ссылка;
				КонецЕсли;
				Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ЭтоВводНаОсновании");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = ЗначениеЗаполнено(Объект.ДокументОснование);
				КонецЕсли;
				
				ВнешниеНаборыДанных = Новый Структура;
				ВнешниеНаборыДанных.Вставить(
					"ТаблицаНоменклатуры",
					ТаблицаНоменклатуры.Скопировать(, "Номенклатура, Характеристика, ИдентификаторСтроки"));
				
				ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
				ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

				ДанныеОтчета = Новый ТаблицаЗначений();
				ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
				ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
				
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					СоответствиеУпаковок = КоэффициентыУпаковокНоменклатурыДереваТоваров(ТаблицаНоменклатуры);
				Иначе
					СоответствиеУпаковок = Неопределено;
				КонецЕсли;

				ЗагрузитьЦеныИзТаблицыЗначений(
					ДанныеОтчета,
					СоответствиеУпаковок,
					СтрокаВидЦены,
					СтрокаВидЦены.Валюта,
					ТолькоНезаполненные,
					Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вычисляет цены, рассчитываемые по данным информационной базы.
//
// Параметры:
//  ТаблицаНоменклатуры - ТаблицаЗначений - Таблица, в которой необходимо заполнить цены.
//  ВидЦены - Массив - виды цен, для которых необходимо вычислить цены.
//  ТолькоНезаполненные - Булево - указывает на необходимость вычисления только незаполненных цен.
//
&НаСервере
Процедура ВычислитьЦеныПоДаннымИБ(ТаблицаНоменклатуры, МассивСтрокВидовЦен = Неопределено, ТолькоНезаполненные = Ложь)
	
	Если МассивСтрокВидовЦен = Неопределено Тогда
		
		ВидыЦенПоДаннымИБ = Новый Массив();
		Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
			Если СтрокаВидЦены.Выбрана 
					И (СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
						ИЛИ СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении) Тогда
				ВидыЦенПоДаннымИБ.Добавить(СтрокаВидЦены);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ВидыЦенПоДаннымИБ = Новый Массив();
		Для Каждого СтрокаВидЦены Из МассивСтрокВидовЦен Цикл
			
			НайденнаяСтрока = Неопределено;
			Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
				НайденнаяСтрока = ТекСтрока;
				Если ТекСтрока.Ссылка = СтрокаВидЦены.Ссылка Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НайденнаяСтрока <> Неопределено Тогда
				Если НайденнаяСтрока.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
					ИЛИ НайденнаяСтрока.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении Тогда
					ВидыЦенПоДаннымИБ.Добавить(СтрокаВидЦены);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ТолькоНезаполненные Тогда
		ОчиститьЦены(ТаблицаНоменклатуры, ВидыЦенПоДаннымИБ);
	КонецЕсли;
	
	ТаблицаНастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновкиДанных);
	
	Для Каждого ВидЦеныПоДаннымИБ Из ВидыЦенПоДаннымИБ Цикл
		НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Найти(ВидЦеныПоДаннымИБ.Ссылка);
		ВычислитьЗначенияЦеныПоДаннымИБ(
			ТаблицаНоменклатуры,
			ВидЦеныПоДаннымИБ,
			ТолькоНезаполненные,
			?(НайденнаяСтрока <> Неопределено, НайденнаяСтрока.НастройкиКомпоновкиДанных, Неопределено));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДатаДляЗапросаЦенНоменклатуры()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДатаДляЗапроса = ДатаДокументаСервер(Объект.Дата) - 1;
	Иначе
		ДатаСеанса = ТекущаяДатаСеанса();
		Если ЗначениеЗаполнено(Объект.Дата) И НачалоДня(Объект.Дата) <> НачалоДня(ДатаСеанса) Тогда
			ДатаДляЗапроса = КонецДня(Объект.Дата);
		Иначе
			ДатаДляЗапроса = ДатаСеанса;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДатаДляЗапроса;
	
КонецФункции

&НаКлиенте
Функция ДатаДокумента(Дата)
	
	Возврат ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());
	
КонецФункции

&НаСервереБезКонтекста
Функция ДатаДокументаСервер(Дата)
	
	Возврат ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	
КонецФункции

// Добавляет товары из ценовой группы в таблицу цен.
//
// Параметры:
//  ЦеновыеГруппы - Массив
//
&НаСервере
Процедура ДобавитьНоменклатуруЦеновойГруппы(ЦеновыеГруппы)
	
	ВидыЦен = ВыбранныеВидыЦен();
	
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникНоменклатура.Ссылка КАК Номенклатура,
		|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик
		|			= ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
		|			ТОГДА ИСТИНА
		|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик
		|			= ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка,
		|				ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (ХарактеристикиНоменклатуры.Владелец = СправочникНоменклатура.Ссылка
		|				ИЛИ ХарактеристикиНоменклатуры.Владелец = СправочникНоменклатура.ВидНоменклатуры)
		|ГДЕ
		|	СправочникНоменклатура.ЦеноваяГруппа В(&ЦеновыеГруппы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СправочникНоменклатура.ЦеноваяГруппа
		|ИТОГИ ПО
		|	Номенклатура");
			
	Иначе
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СправочникНоменклатура.Ссылка           КАК Номенклатура,
			|	СправочникНоменклатура.ЦеноваяГруппа 	КАК ЦеноваяГруппа,
			|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ВЫБОР
			|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик 
			|			= ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры) 
			|		ТОГДА ИСТИНА
			|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик
			|			= ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры) 
			|		ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ХарактеристикиИспользуются
			|ИЗ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|ГДЕ
			|	СправочникНоменклатура.ЦеноваяГруппа В (&ЦеновыеГруппы)
			|УПОРЯДОЧИТЬ ПО
			|	СправочникНоменклатура.ЦеноваяГруппа
			|ИТОГИ ПО
			|	Номенклатура
			|");
		
	КонецЕсли;
		
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
		|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
		|	ЦеныНоменклатуры.ВидЦены КАК ВидЦены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&Дата,
		|			Номенклатура.ЦеноваяГруппа В (&ЦеновыеГруппы)
		|				И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры";
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ЦеновыеГруппы", ЦеновыеГруппы);
	Запрос.УстановитьПараметр("ВидыЦен",       ВидыЦен);
	Запрос.УстановитьПараметр("Дата",          ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаНоменклатура = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		ВыборкаУпаковки = РезультатЗапроса[1].Выбрать();
	КонецЕсли;
	
	ДеревоЦенЗначение = РеквизитФормыВЗначение("ДеревоЦен", Тип("ДеревоЗначений"));
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура("Номенклатура", ВыборкаНоменклатура.Номенклатура);
		НайденныеСтроки = ДеревоЦенЗначение.Строки.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЭлементНоменклатура = НайденныеСтроки[0];
		Иначе
			ЭлементНоменклатура = ДеревоЦенЗначение.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементНоменклатура, ВыборкаНоменклатура);
			ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементНоменклатура);
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				
				ПараметрыПоиска = Новый Структура("Номенклатура", ЭлементНоменклатура.Номенклатура);
				
				Пока ВыборкаУпаковки.НайтиСледующий(ПараметрыПоиска) Цикл
					ЭлементНоменклатура[ПолучитьИмяКолонкиУпаковки(ВыборкаУпаковки.ВидЦены)] = ВыборкаУпаковки.Упаковка;
				КонецЦикла;
				
				ВыборкаУпаковки.Сбросить();
				
			КонецЕсли;
				
		КонецЕсли;
		
		Если ИспользоватьХарактеристикиНоменклатуры Тогда
			
			ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаХарактеристики.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
					
					ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика",
												ВыборкаХарактеристики.Номенклатура,
												ВыборкаХарактеристики.Характеристика);
					НайденныеСтроки = ЭлементНоменклатура.Строки.НайтиСтроки(ПараметрыОтбора);
					
					Если НайденныеСтроки.Количество() > 0 Тогда
						ЭлементХарактеристика = НайденныеСтроки[0];
					Иначе
						ЭлементХарактеристика = ЭлементНоменклатура.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
						ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
						
						Если ИспользоватьУпаковкиНоменклатуры Тогда
							
							ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика",
														ЭлементХарактеристика.Номенклатура,
														ЭлементХарактеристика.Характеристика);
							
							Пока ВыборкаУпаковки.НайтиСледующий(ПараметрыПоиска) Цикл
								ЭлементХарактеристика[ПолучитьИмяКолонкиУпаковки(ВыборкаУпаковки.ВидЦены)] = ВыборкаУпаковки.Упаковка;
							КонецЦикла;
							
							ВыборкаУпаковки.Сбросить();
							
						КонецЕсли;
							
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

	ЗначениеВРеквизитФормы(ДеревоЦенЗначение, "ДеревоЦен");
	ПереформироватьТаблицуЦен(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТоварыПоОтборуНаСервере(АдресВоВременномХранилище)
	
	ВидыЦен = ВыбранныеВидыЦен();
	
	Если ТипЗнч(АдресВоВременномХранилище) = Тип("ТаблицаЗначений") Тогда
		ТаблицаТовары = АдресВоВременномХранилище;
	Иначе
		ТаблицаТовары = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатура.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ТаблицаНоменклатура.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	&ПоказательХарактеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатура.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик
	|			= ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	|       ТОГДА ИСТИНА
	|		КОГДА ТаблицаНоменклатура.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик
	|			= ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
	|       ТОГДА ИСТИНА
	|   	ИНАЧЕ ЛОЖЬ 
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК ТаблицаДокумента
	|	ПО ТаблицаДокумента.Номенклатура = ТаблицаНоменклатура.Номенклатура
	|		И ТаблицаДокумента.Характеристика = ТаблицаНоменклатура.Характеристика
	|ГДЕ
	|	ТаблицаДокумента.Номенклатура ЕСТЬ NULL
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНоменклатура.Номенклатура.Наименование
	|ИТОГИ ПО
	|	Номенклатура
	|";
	
	// Упаковки нужно выбирать только те.
	// В которых коэффициент отличен от 1
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
		|	ЦеныНоменклатуры.ВидЦены КАК ВидЦены
		|ИЗ
		|	ТаблицаНоменклатура КАК Товары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦен
		|		ПО (ВидыЦен.Ссылка В (&ВидыЦен))
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО (ЦеныНоменклатуры.ВидЦены = ВидыЦен.Ссылка)
		|			И (ЦеныНоменклатуры.Характеристика = Товары.Характеристика)
		|			И (ЦеныНоменклатуры.Номенклатура = Товары.Номенклатура)
		|			И (ЦеныНоменклатуры.Период В
		|				(ВЫБРАТЬ
		|					МАКСИМУМ(Цены.Период)
		|				ИЗ
		|					РегистрСведений.ЦеныНоменклатуры КАК Цены
		|				ГДЕ
		|					Цены.ВидЦены = ВидыЦен.Ссылка
		|					И Цены.Номенклатура = Товары.Номенклатура
		|					И Цены.Характеристика = Товары.Характеристика
		|					И Цены.Период <= &Дата))
		|ГДЕ
		|	ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0) <> 1
		|	И ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 0) <> 0
		|";
	КонецЕсли;
	
	ПодстрокаЗамены = "";
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		ПодстрокаЗамены = "ЕСТЬNULL(ТаблицаНоменклатура.Характеристика, &ПустаяХарактеристика) КАК Характеристика,";
		Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоказательХарактеристика,", ПодстрокаЗамены);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Таблица", ТаблицаТовары);
	Запрос.УстановитьПараметр("ТаблицаДокумента", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ВидыЦен", ВидыЦен);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДатаСеанса()));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаНоменклатура = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		ВыборкаУпаковки = РезультатЗапроса[3].Выбрать();
		КоличествоУпаковок = ВыборкаУпаковки.Количество();
	КонецЕсли;
	
	ДеревоЦенЗначение = РеквизитФормыВЗначение("ДеревоЦен", Тип("ДеревоЗначений"));
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ЭлементНоменклатура = ДеревоЦенЗначение.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементНоменклатура, ВыборкаНоменклатура);
		ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементНоменклатура);
		Если ИспользоватьУпаковкиНоменклатуры
			И КоличествоУпаковок > 0 Тогда
			ПараметрыПоиска = Новый Структура("Номенклатура", ЭлементНоменклатура.Номенклатура);
			Пока ВыборкаУпаковки.НайтиСледующий(ПараметрыПоиска) Цикл
				ЭлементНоменклатура[ПолучитьИмяКолонкиУпаковки(ВыборкаУпаковки.ВидЦены)] = ВыборкаУпаковки.Упаковка;
			КонецЦикла;
			ВыборкаУпаковки.Сбросить();
		КонецЕсли;
			
		Если ИспользоватьХарактеристикиНоменклатуры Тогда
			
			ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаХарактеристики.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
					
					ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика",
												ВыборкаХарактеристики.Номенклатура,
												ВыборкаХарактеристики.Характеристика);
					НайденныеСтроки = ЭлементНоменклатура.Строки.НайтиСтроки(ПараметрыОтбора);
 
					Если НайденныеСтроки.Количество() > 0 Тогда
						ЭлементХарактеристика = НайденныеСтроки[0];
					Иначе
						ЭлементХарактеристика = ЭлементНоменклатура.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
						ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
						
						Если ИспользоватьУпаковкиНоменклатуры
							И КоличествоУпаковок > 0 Тогда
							
							ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика",
														ЭлементХарактеристика.Номенклатура,
														ЭлементХарактеристика.Характеристика);
							Пока ВыборкаУпаковки.НайтиСледующий(ПараметрыПоиска) Цикл
								ЭлементХарактеристика[ПолучитьИмяКолонкиУпаковки(ВыборкаУпаковки.ВидЦены)] = ВыборкаУпаковки.Упаковка;
							КонецЦикла;
							ВыборкаУпаковки.Сбросить();
						КонецЕсли;
							
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЦенЗначение, "ДеревоЦен");
	ПереформироватьТаблицуЦен(РассчитыватьАвтоматически);
	 	
КонецПроцедуры

// Осуществляет загрузку базовых цен в таблицу цен.
//
&НаСервере
Процедура ЗагрузитьБазовыеЦены()
	
	ТаблицаНоменклатуры = СоздатьПустуюТаблицуНоменклатуры();
	ЗаполнитьТаблицуНоменклатурыПоДеревуЦен(ТаблицаНоменклатуры);
	Если ТаблицаНоменклатуры.Количество() > 0 Тогда
		ЗагрузитьЗначенияБазовыхЦен(ТаблицаНоменклатуры, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Загружает значения базовых цен в таблицу.
//
// Параметры:
//  ТаблицаНоменклатуры - ТаблицаЗначений - Таблица, в которую будут загружены значения цен.
//  ВидыЦен - Массив - виды цен, для которых необходимо загрузить значения цен.
//  Дата - Дата загрузки цен
//  ПроцентИзмененияЦены - Число - Процент, на который необходимо изменить цену.
//  ПрименятьОкругление - Булево - Указывает на необходимость применения округления.
//
&НаСервере
Процедура ЗагрузитьЗначенияБазовыхЦен(
			ТаблицаНоменклатуры,
			МассивСтрокВидовЦен,
			ДатаДокумента = Неопределено,
			ПроцентИзмененияЦены = 0,
			ПрименятьОкругление = Ложь)
	
	Если МассивСтрокВидовЦен = Неопределено Тогда
		
		МассивСтрокВидовЦен = Новый Массив();
		Для Каждого ВидЦены Из ВыбранныеЦены Цикл
			Если ВидЦены.Влияет Тогда
				МассивСтрокВидовЦен.Добавить(ВидЦены);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОчиститьЦены(ТаблицаНоменклатуры, МассивСтрокВидовЦен);
	
	Если МассивСтрокВидовЦен.Количество() > 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ТаблицаНоменклатуры.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	ТаблицаНоменклатуры.Номенклатура   КАК Номенклатура,
			|	ТаблицаНоменклатуры.Характеристика КАК Характеристика
			|ПОМЕСТИТЬ ТаблицаНоменклатуры
			|ИЗ
			|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
			|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика
			|;
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Товары.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
			|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
			|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
			|	ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 1) КАК Коэффициент,
			|	ЦеныНоменклатуры.ВидЦены КАК ВидЦены,
			|	ЦеныНоменклатуры.Цена + ЦеныНоменклатуры.Цена * &ПроцентИзмененияЦены / 100 КАК Цена
			|ИЗ
			|	ТаблицаНоменклатуры КАК Товары
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
			|	ПО ЦеныНоменклатуры.ВидЦены В(&ВидыЦен)
			|		И ЦеныНоменклатуры.Характеристика = Товары.Характеристика
			|		И ЦеныНоменклатуры.Номенклатура = Товары.Номенклатура
			|		И ЦеныНоменклатуры.Период В
			|			(ВЫБРАТЬ
			|				МАКСИМУМ(Цены.Период)
			|			ИЗ
			|				РегистрСведений.ЦеныНоменклатуры КАК Цены
			|			ГДЕ
			|				Цены.ВидЦены В(&ВидыЦен)
			|				И Цены.Номенклатура = Товары.Номенклатура
			|				И Цены.Характеристика = Товары.Характеристика
			|				И Цены.Период <= &ДатаДокумента)
			|");
		
		Запрос.УстановитьПараметр("ТаблицаНоменклатуры",  ТаблицаНоменклатуры);
		
		ВидыЦен = Новый Массив;
		Для Каждого СтрокаВидЦены Из МассивСтрокВидовЦен Цикл
			ВидыЦен.Добавить(СтрокаВидЦены.Ссылка);
		КонецЦикла;
		Запрос.УстановитьПараметр("ВидыЦен", ВидыЦен);
		Запрос.УстановитьПараметр("ПроцентИзмененияЦены", ПроцентИзмененияЦены);
		ДатаЗапроса = ?(ДатаДокумента = Неопределено, ДатаДляЗапросаЦенНоменклатуры(), ДатаДокумента);
		Запрос.УстановитьПараметр("ДатаДокумента", ДатаЗапроса);
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			СоответствиеУпаковок = КоэффициентыУпаковокНоменклатурыДереваТоваров(ТаблицаНоменклатуры);
		Иначе
			СоответствиеУпаковок = Неопределено;
		КонецЕсли;
		
		ЗагрузитьЦеныИзТаблицыЗначений(Выгрузка, СоответствиеУпаковок, Неопределено, Неопределено, Ложь, ПрименятьОкругление);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьСправочникВидовЦен(НастройкиКомпоновкиДанных)
	
	ЗапросРазрешенныеВидыЦен = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыЦен.Ссылка
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен");
	
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыЦен.Ссылка                       КАК Ссылка,
	|	ВидыЦен.Наименование                 КАК Наименование,
	|	ВидыЦен.ПометкаУдаления              КАК ПометкаУдаления,
	|	ВидыЦен.РеквизитДопУпорядочивания    КАК РеквизитДопУпорядочивания,
	|	ВидыЦен.СпособЗаданияЦены            КАК СпособЗаданияЦены,
	|	ВидыЦен.Идентификатор                КАК Идентификатор,
	|	ВидыЦен.ПорогСрабатывания            КАК ПорогСрабатывания,
	|	ВидыЦен.АлгоритмРасчетаЦены          КАК АлгоритмРасчетаЦены,
	|	ВидыЦен.СхемаКомпоновкиДанных        КАК СхемаКомпоновкиДанных,
	|	
	|	ВЫБОР КОГДА ВидыЦен.Ссылка НЕ В (&РазрешенныеВидыЦен) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЗапрещенныйВидЦены,
	|	
	|	ВидыЦен.ЦеновыеГруппы.(
	|		ЦеноваяГруппа                 КАК ЦеноваяГруппа,
	|		АлгоритмРасчетаЦены           КАК АлгоритмРасчетаЦены
	|	),
	|	
	|	ВидыЦен.ПорогиСрабатывания.(
	|		ЦеноваяГруппа                 КАК ЦеноваяГруппа,
	|		ПорогСрабатывания             КАК ПорогСрабатывания
	|	),
	|	
	|	ВидыЦен.ВлияющиеВидыЦен.(
	|		ВлияющийВидЦен                КАК ВлияющийВидЦен
	|	),
	|	
	|	ВидыЦен.ПравилаОкругленияЦены.(
	|		НижняяГраницаДиапазонаЦен     КАК НижняяГраницаДиапазонаЦен,
	|		ТочностьОкругления            КАК ТочностьОкругления,
	|		ПсихологическоеОкругление     КАК ПсихологическоеОкругление
	|	),
	|	
	|	ВидыЦен.ОкруглятьВБольшуюСторону  КАК ОкруглятьВБольшуюСторону
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|УПОРЯДОЧИТЬ ПО
	|	ВидыЦен.РеквизитДопУпорядочивания");

	Запрос.Параметры.Вставить(
		"РазрешенныеВидыЦен",
		ЗапросРазрешенныеВидыЦен.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаВидовЦен = Запрос.Выполнить().Выгрузить();
	
	ТаблицаВидовЦен.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
	ТаблицаВидовЦен.Колонки.Добавить("ВлияющиеЦены", Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаВидовЦен.Колонки.Добавить("НепосредственноВлияющиеЦены",  Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаВидовЦен.Колонки.Добавить("ЗависимыеЦены", Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаВидовЦен.Колонки.Добавить("ИмяКолонки", Новый ОписаниеТипов("Строка"));
	
	// Служебные колонки для работы с настройками СКД.
	ТаблицаВидовЦен.Колонки.Добавить("АдресСхемыКомпоновкиДанных",   Новый ОписаниеТипов("Строка"));
	ТаблицаВидовЦен.Колонки.Добавить("НайденыОбязательныеПараметры", Новый ОписаниеТипов("Булево"));
	ТаблицаВидовЦен.Колонки.Добавить("Параметры",                    Новый ОписаниеТипов("Строка"));
	// Индексирование
	ТаблицаВидовЦен.Индексы.Добавить("Ссылка");
	
	ПараметрыСхемКомпоновкиДанныхВидовЦен = Новый ТаблицаЗначений;
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("ВидЦены");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("Имя");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("Заголовок");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("Значение");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("ДоступныеЗначения");
	
	МассивУдаляемыхВидовЦен = Новый Массив();
	
	Для Каждого СтрокаВидаЦен Из ТаблицаВидовЦен Цикл
		
		НайтиЗависящиеИВлияющиеЦены(ТаблицаВидовЦен, СтрокаВидаЦен.Ссылка);
		
		СтрокаВидаЦен.ИмяКолонки = ИмяКолонкиПоВидуЦены(СтрокаВидаЦен.Ссылка);
		
		Если СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
			ИЛИ СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении Тогда
			
			СхемаИНастройки = Справочники.ВидыЦен.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(
								СтрокаВидаЦен.Ссылка,
								СтрокаВидаЦен.СхемаКомпоновкиДанных);
			
			СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
			
			СтрокаВидаЦен.АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(
														СхемаКомпоновкиДанных,
														УникальныйИдентификатор);
			
			РазрешенныеИмена = ИменаРазрешенныхПараметров();
			Для Каждого ПараметрДанных Из СхемаКомпоновкиДанных.Параметры Цикл
				
				Если РазрешенныеИмена.Найти(ПараметрДанных.Имя) = Неопределено Тогда
					Если Найти(СхемаКомпоновкиДанных.НаборыДанных[0].Запрос,"&"+ПараметрДанных.Имя) Тогда
						СтрокаВидаЦен.НайденыОбязательныеПараметры = Истина;
					КонецЕсли;
				Иначе
					ПараметрДанных.ОграничениеИспользования = Истина;
					ПараметрДанных.ВключатьВДоступныеПоля   = Ложь;
				КонецЕсли;
				
				НайденныеСтроки = ПараметрыСхемКомпоновкиДанныхВидовЦен.НайтиСтроки(
									Новый Структура("Имя, ВидЦены",
											ПараметрДанных.Имя,
											СтрокаВидаЦен.Ссылка));
				Если НайденныеСтроки.Количество() = 0
					И РазрешенныеИмена.Найти(ПараметрДанных.Имя) = Неопределено
					И НЕ ПараметрДанных.ОграничениеИспользования Тогда
					
					НовыйПараметр = ПараметрыСхемКомпоновкиДанныхВидовЦен.Добавить();
					НовыйПараметр.ВидЦены           = СтрокаВидаЦен.Ссылка;
					НовыйПараметр.Имя               = ПараметрДанных.Имя;
					НовыйПараметр.Заголовок         = ПараметрДанных.Заголовок;
					НовыйПараметр.Значение          = ПараметрДанных.Значение;
					НовыйПараметр.ДоступныеЗначения = ПараметрДанных.ПолучитьДоступныеЗначения();
					
				КонецЕсли;
				
			КонецЦикла;
			
			ПользовательскаяНастройка = НастройкиКомпоновкиДанных.Найти(СтрокаВидаЦен.Ссылка, "ВидЦены");
			Если ПользовательскаяНастройка = Неопределено
				И СтрокаВидаЦен.НайденыОбязательныеПараметры Тогда
				
				ПользовательскаяНастройка = НастройкиКомпоновкиДанных.Добавить();
				ПользовательскаяНастройка.ВидЦены                   = СтрокаВидаЦен.Ссылка;
				
				Если НЕ ЗначениеЗаполнено(СхемаИНастройки.НастройкиКомпоновкиДанных) Тогда
					КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
					УстановитьПривилегированныйРежим(Истина);
					КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
					УстановитьПривилегированныйРежим(Ложь);
					КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
					
					ПользовательскаяНастройка.НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
				Иначе
					ПользовательскаяНастройка.НастройкиКомпоновкиДанных = СхемаИНастройки.НастройкиКомпоновкиДанных;
				КонецЕсли;
				
				СтруктураДанных = ОписаниеПараметров(
									СтрокаВидаЦен.Ссылка,
									ПользовательскаяНастройка.НастройкиКомпоновкиДанных,
									ПараметрыСхемКомпоновкиДанныхВидовЦен);
				
			ИначеЕсли ПользовательскаяНастройка = Неопределено
				И НЕ СтрокаВидаЦен.НайденыОбязательныеПараметры Тогда
				
				СтруктураДанных = ОписаниеПараметров(
									СтрокаВидаЦен.Ссылка,
									СхемаКомпоновкиДанных.НастройкиПоУмолчанию,
									ПараметрыСхемКомпоновкиДанныхВидовЦен);
				
			Иначе
				
				СтруктураДанных = ОписаниеПараметров(
									СтрокаВидаЦен.Ссылка,
									ПользовательскаяНастройка.НастройкиКомпоновкиДанных,
									ПараметрыСхемКомпоновкиДанныхВидовЦен);
				
			КонецЕсли;
			
			СтрокаВидаЦен.Параметры = СтруктураДанных.ОписаниеПараметров;
			
		КонецЕсли;
		
	КонецЦикла;
	
	АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен = ПоместитьВоВременноеХранилище(
														ПараметрыСхемКомпоновкиДанныхВидовЦен,
														УникальныйИдентификатор);
	
	Для Каждого СтрокаВидаЦен Из ТаблицаВидовЦен Цикл
		НайтиЗависящиеИВлияющиеЦены(ТаблицаВидовЦен, СтрокаВидаЦен.Ссылка);
	КонецЦикла;
	
	АдресХранилищаСправочникаВидовЦен = ПоместитьВоВременноеХранилище(ТаблицаВидовЦен, УникальныйИдентификатор);
	
	Возврат ТаблицаВидовЦен;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьСтарыеЦеныНоменклатуры(ТаблицаНоменклатуры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Цена                           КАК Цена,
	|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка
	|ПОМЕСТИТЬ
	|	ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК ВременнаяТаблицаТовары
	|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика, ВидЦены
	|;
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Цена КАК Цена,
	|	
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|			ТОГДА ЦеныНоменклатуры.Цена
	|		ИНАЧЕ ЦеныНоменклатуры.Цена / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 1)
	|				* ЕСТЬNULL(ВременнаяТаблицаТовары.Упаковка.Коэффициент, 1)
	|	КОНЕЦ КАК ДействующаяЦена,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЦеныНоменклатуры.Цена <> 0
	|				ТОГДА 100 * (ВременнаяТаблицаТовары.Цена - ВЫБОР
	|						КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|							ТОГДА ЦеныНоменклатуры.Цена
	|						ИНАЧЕ ЦеныНоменклатуры.Цена / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 1)
	|								* ЕСТЬNULL(ВременнаяТаблицаТовары.Упаковка.Коэффициент, 1)
	|					КОНЕЦ) / ВЫБОР
	|						КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка
	|							ТОГДА ЦеныНоменклатуры.Цена
	|						ИНАЧЕ ЦеныНоменклатуры.Цена / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 1)
	|								* ЕСТЬNULL(ВременнаяТаблицаТовары.Упаковка.Коэффициент, 1)
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(19, 2)) КАК Процент,
	|	
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаДокумента,
	|				(Номенклатура, Характеристика, ВидЦены) В (ВЫБРАТЬ
	|																Т.Номенклатура,
	|																Т.Характеристика,
	|																Т.ВидЦены
	|															ИЗ ВременнаяТаблицаТовары КАК Т)) КАК ЦеныНоменклатуры
	|			ПО ЦеныНоменклатуры.Номенклатура   = ВременнаяТаблицаТовары.Номенклатура
	|			 И ЦеныНоменклатуры.Характеристика = ВременнаяТаблицаТовары.Характеристика
	|			 И ЦеныНоменклатуры.ВидЦены        = ВременнаяТаблицаТовары.ВидЦены
	|	
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика
	|");
	
	Запрос.УстановитьПараметр("Товары",        ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДляЗапросаЦенНоменклатуры());
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристики.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
				
				ЭлементХарактеристика = НайтиСтрокуДереваЦен(ВыборкаХарактеристики);
		
				ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВидыЦен.Следующий() Цикл
					
					Если НЕ ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
						Продолжить;
					КонецЕсли;
					
					ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены);
					
					ЭлементХарактеристика["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
					ЭлементХарактеристика["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
					
				КонецЦикла;
				
			Иначе
				
				ЭлементНоменклатура = НайтиСтрокуДереваЦен(ВыборкаХарактеристики);
				
				Если ЭлементНоменклатура <> Неопределено Тогда
					ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаВидыЦен.Следующий() Цикл
						
						Если НЕ ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
							Продолжить;
						КонецЕсли;
						
						ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены);
						
						ЭлементНоменклатура["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
						ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
						
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьТаблицуНастройкиКомпоновкиДанных()
	
	ТаблицаНастройкиКомпоновкиДанных = Новый ТаблицаЗначений;
	ТаблицаНастройкиКомпоновкиДанных.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТаблицаНастройкиКомпоновкиДанных.Колонки.Добавить("НастройкиКомпоновкиДанных");
	ТаблицаНастройкиКомпоновкиДанных.Колонки.Добавить("ПараметрыКомпоновкиДанных");
	// Для существующего документа - загрузить настройки схем компоновки.
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УстановкаЦенНоменклатурыВидыЦен.ВидЦены                   КАК ВидЦены,
		|	УстановкаЦенНоменклатурыВидыЦен.НастройкиКомпоновкиДанных КАК НастройкиКомпоновкиДанных
		|ИЗ
		|	Документ.УстановкаЦенНоменклатуры.ВидыЦен КАК УстановкаЦенНоменклатурыВидыЦен
		|ГДЕ
		|	УстановкаЦенНоменклатурыВидыЦен.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НастройкиКомпоновкиДанных = Выборка.НастройкиКомпоновкиДанных.Получить();
			Если НастройкиКомпоновкиДанных <> Неопределено Тогда
				НоваяСтрока = ТаблицаНастройкиКомпоновкиДанных.Добавить();
				НоваяСтрока.ВидЦены                   = Выборка.ВидЦены;
				НоваяСтрока.НастройкиКомпоновкиДанных = НастройкиКомпоновкиДанных;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаНастройкиКомпоновкиДанных;
	
КонецФункции

// Осуществляет загрузку цен для всех строк табличной части товары.
//
&НаСервере
Процедура ЗагрузитьТабличнуюЧастьТовары()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = СоздатьПустуюТаблицуНоменклатуры();
	ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Колонки.Добавить("СтрокаДереваЦен");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Индекс                         КАК Индекс,
	|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Цена                           КАК Цена,
	|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка,
	|	ВременнаяТаблицаТовары.ЦенаИзмененаВручную            КАК ЦенаИзмененаВручную
	|ПОМЕСТИТЬ
	|	ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК ВременнаяТаблицаТовары
	|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика, ВидЦены
	|;
	|ВЫБРАТЬ
	|	Товары.Индекс КАК Индекс,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры)
	|			ТОГДА ИСТИНА
	|		КОГДА Товары.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	Товары.ВидЦены КАК ВидЦены,
	|	Товары.Цена КАК Цена,
	|	Товары.ЦенаИзмененаВручную КАК ЦенаИзмененаВручную,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатуры.Упаковка = Товары.Упаковка
	|			ТОГДА ЦеныНоменклатуры.Цена
	|		ИНАЧЕ ЦеныНоменклатуры.Цена / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 1) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 1)
	|	КОНЕЦ КАК ДействующаяЦена,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЦеныНоменклатуры.Цена <> 0
	|				ТОГДА 100 * (Товары.Цена - ВЫБОР
	|						КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, &ПустаяУпаковка) = Товары.Упаковка
	|							ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
	|						ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 1) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 1)
	|					КОНЕЦ) / ВЫБОР
	|						КОГДА ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, &ПустаяУпаковка) = Товары.Упаковка
	|							ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
	|						ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 1) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 1)
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(19, 2)) КАК Процент,
	|	Товары.Упаковка КАК Упаковка
	|ИЗ
	|	ВременнаяТаблицаТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ПО (ЦеныНоменклатуры.ВидЦены = Товары.ВидЦены)
	|			И (ЦеныНоменклатуры.Характеристика = Товары.Характеристика)
	|			И (ЦеныНоменклатуры.Номенклатура = Товары.Номенклатура)
	|			И (ЦеныНоменклатуры.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(Цены.Период)
	|				ИЗ
	|					РегистрСведений.ЦеныНоменклатуры КАК Цены
	|				ГДЕ
	|					Цены.ВидЦены = Товары.ВидЦены
	|					И Цены.Номенклатура = Товары.Номенклатура
	|					И Цены.Характеристика = Товары.Характеристика
	|					И Цены.Период <= &Дата))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Индекс
	|ИТОГИ
	|	МИНИМУМ(ЕдиницаИзмерения)
	|ПО
	|	Номенклатура,
	|	Характеристика
	|");
	
	ТаблицаТоваров =  Объект.Товары.Выгрузить();
	ОбщегоНазначенияРТ.ПронумероватьТаблицуЗначений(ТаблицаТоваров, "Индекс");
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	Запрос.УстановитьПараметр("ПустаяУпаковка", Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("Дата",   ДатаДляЗапросаЦенНоменклатуры());
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЭлементыДереваЦен = ДеревоЦен.ПолучитьЭлементы();
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
	
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			ЭлементНоменклатура = ЭлементыДереваЦен.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементНоменклатура, ВыборкаНоменклатура);
			ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементНоменклатура);
			
			НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			НоваяСтрокаТЗ.Номенклатура = ВыборкаНоменклатура.Номенклатура;
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			
			ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристики.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
					
					ЭлементХарактеристика = ЭлементНоменклатура.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
					ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
					
					НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
					НоваяСтрокаТЗ.Номенклатура    = ВыборкаХарактеристики.Номенклатура;
					НоваяСтрокаТЗ.Характеристика  = ВыборкаХарактеристики.Характеристика;
					НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементХарактеристика;
					
					ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаВидыЦен.Следующий() Цикл
						
						Если НЕ ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
							Продолжить;
						КонецЕсли;
						
						ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены);
						
						ЭлементХарактеристика[                     ИмяКолонки] = ВыборкаВидыЦен.Цена;
						ЭлементХарактеристика["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
						ЭлементХарактеристика["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
						ЭлементХарактеристика["ИзмененаВручную"  + ИмяКолонки] = ВыборкаВидыЦен.ЦенаИзмененаВручную;
						ЭлементХарактеристика["Упаковка"         + ИмяКолонки] = ВыборкаВидыЦен.Упаковка;
						Если ОтображатьВлияющиеЦены Тогда
							ПересчитатьПроцентНаценкиВСтроке(ЭлементХарактеристика, ИмяКолонки);
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаВидыЦен.Следующий() Цикл
						
						Если НЕ ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
							Продолжить;
						КонецЕсли;
						
						ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены);
						
						ЭлементНоменклатура[                     ИмяКолонки] = ВыборкаВидыЦен.Цена;
						ЭлементНоменклатура["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
						ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
						ЭлементНоменклатура["ИзмененаВручную"  + ИмяКолонки] = ВыборкаВидыЦен.ЦенаИзмененаВручную;
						ЭлементНоменклатура["Упаковка"         + ИмяКолонки] = ВыборкаВидыЦен.Упаковка;
						Если ОтображатьВлияющиеЦены Тогда
							ПересчитатьПроцентНаценкиВСтроке(ЭлементНоменклатура, ИмяКолонки);
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
	
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			ЭлементНоменклатура = ЭлементыДереваЦен.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементНоменклатура, ВыборкаНоменклатура);
			ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементНоменклатура);
			
			НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			НоваяСтрокаТЗ.Номенклатура = ВыборкаНоменклатура.Номенклатура;
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			
			ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристики.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
					
					ЭлементХарактеристика = ЭлементНоменклатура.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
					ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
					
					НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
					НоваяСтрокаТЗ.Номенклатура    = ВыборкаХарактеристики.Номенклатура;
					НоваяСтрокаТЗ.Характеристика  = ВыборкаХарактеристики.Характеристика;
					НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементХарактеристика;
					
					ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаВидыЦен.Следующий() Цикл
						
						Если НЕ ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
							Продолжить;
						КонецЕсли;
						
						ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены);
						
						ЭлементХарактеристика[                     ИмяКолонки] = ВыборкаВидыЦен.Цена;
						ЭлементХарактеристика["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
						ЭлементХарактеристика["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
						ЭлементХарактеристика["ИзмененаВручную"  + ИмяКолонки] = ВыборкаВидыЦен.ЦенаИзмененаВручную;
						Если ОтображатьВлияющиеЦены Тогда
							ПересчитатьПроцентНаценкиВСтроке(ЭлементХарактеристика, ИмяКолонки);
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаВидыЦен.Следующий() Цикл
						
						Если НЕ ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
							Продолжить;
						КонецЕсли;
						
						ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены);
						
						ЭлементНоменклатура[                     ИмяКолонки] = ВыборкаВидыЦен.Цена;
						ЭлементНоменклатура["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
						ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
						ЭлементНоменклатура["ИзмененаВручную"  + ИмяКолонки] = ВыборкаВидыЦен.ЦенаИзмененаВручную;
						Если ОтображатьВлияющиеЦены Тогда
							ПересчитатьПроцентНаценкиВСтроке(ЭлементНоменклатура, ИмяКолонки);
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Индексы.Добавить("Номенклатура, Характеристика");
	
КонецПроцедуры

// Загружает цены в таблицу цен из переданной таблицы.
//
// Параметры:
//  ДеревоЦенИсточник - ТаблицаЗначений - Таблица, из которой необходимо загрузить цены.
//  СоответствиеУпаковок - Соответствие - содержит упаковки и их коэффициенты.
//  ВидЦены - СправочникСсылка.ВидыЦен
//  ВалютаЦены - СправочникСсылка.Валюта
//  ТолькоНезаполненные - Булево - указывает на необходимость вычисления только незаполненных цен.
//  ПрименитьОкругление - Булево - указывает на необходимость применения округления к ценам.
//
&НаСервере
Процедура ЗагрузитьЦеныИзТаблицыЗначений(
			Таблица,
			СоответствиеУпаковок,
			СтрокаЗагружаемыйВидЦены,
			ВалютаЦены,
			ТолькоНезаполненные = Ложь,
			ПрименитьОкругление = Ложь,
			ЗагружатьУпаковку = Ложь)
			
	//ЕстьИдентификатор = Таблица.Колонки.Найти("ИдентификаторСтроки") <> Неопределено;
	Для Каждого СтрокаИсточник Из Таблица Цикл
		
		//Если ЕстьИдентификатор Тогда
			СтрокаТаблицыЦен = ДеревоЦен.НайтиПоИдентификатору(СтрокаИсточник.ИдентификаторСтроки);
		//Иначе
		//	СтруктураПоиска = 
		//	СтрокаТаблицыЦен = 
		//КонецЕсли;

		Если СтрокаТаблицыЦен <> Неопределено Тогда
			Если СтрокаЗагружаемыйВидЦены = Неопределено Тогда
				СтрокаВидЦены = НайтиСтрокуВидаЦен(СтрокаИсточник.ВидЦены);
			Иначе
				СтрокаВидЦены = СтрокаЗагружаемыйВидЦены;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("ЦеноваяГруппа", СтрокаТаблицыЦен.ЦеноваяГруппа);
			ЦеновыеГруппыПорогов = СтрокаВидЦены.ПорогиСрабатывания.НайтиСтроки(СтруктураПоиска);
			Если ЦеновыеГруппыПорогов.Количество() > 0 Тогда
				ПорогСрабатывания = ЦеновыеГруппыПорогов[0].ПорогСрабатывания;
			Иначе
				ПорогСрабатывания = СтрокаВидЦены.ПорогСрабатывания;
			КонецЕсли;
			
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			
			Если (СтрокаТаблицыЦен[ИмяКолонки] = 0 ИЛИ НЕ ТолькоНезаполненные) И СтрокаИсточник.Цена <> Null Тогда
				
				Цена = СтрокаИсточник.Цена;
				
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					
					Если СоответствиеУпаковок <> Неопределено Тогда
						
						ТекущаяУпаковка = СтрокаТаблицыЦен["Упаковка" + ИмяКолонки];
						ТекущийКоэффициент = 1;
						
						Если ЗначениеЗаполнено(СтрокаИсточник.Коэффициент)
							И (ЗначениеЗаполнено(СтрокаИсточник.Упаковка) ИЛИ ЗначениеЗаполнено(ТекущаяУпаковка)) Тогда
							
							Если ЗначениеЗаполнено(ТекущаяУпаковка) Тогда
								
								НайденноеЗначение = СоответствиеУпаковок.Получить(ТекущаяУпаковка);
								Если НайденноеЗначение <> Неопределено Тогда
									ТекущийКоэффициент = НайденноеЗначение;
								КонецЕсли;
								
							КонецЕсли;
							
							Цена = Цена / СтрокаИсточник.Коэффициент * ТекущийКоэффициент;
							
						КонецЕсли;
						
					ИначеЕсли ЗагружатьУпаковку Тогда
						СтрокаТаблицыЦен["Упаковка" + ИмяКолонки] = СтрокаИсточник.Упаковка;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ИспользуютсяВалюты 
					И ВалютаЦены <> Неопределено 
					И СтрокаИсточник.Валюта <> Null Тогда
					Цена = ПересчитатьВалюту(СтрокаИсточник.Валюта, ВалютаЦены, Цена);
				КонецЕсли;
				
				Если ПрименитьОкругление Тогда
					Цена = ОкруглитьЦену(Цена, СтрокаВидЦены);
				КонецЕсли;
				
				Если СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки] <> 0 Тогда
					ПроцентИзменения = Окр(100 * (Цена - СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки])
											/ СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки],
												10, 2);
				Иначе
					ПроцентИзменения = 0;
				КонецЕсли;
				
				Если    ПорогСрабатывания = 0
					ИЛИ СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки] = 0
					ИЛИ ?(ПроцентИзменения > 0, ПроцентИзменения >= ПорогСрабатывания, -ПроцентИзменения >= ПорогСрабатывания) Тогда
					
					СтрокаТаблицыЦен[ИмяКолонки] = Цена;
					Если СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки] <> 0 Тогда
						СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] = ПроцентИзменения;
					Иначе
						СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] = 0;
					КонецЕсли;
					
				Иначе
					СтрокаТаблицыЦен[ИмяКолонки] = СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки];
					СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] = 0;
				КонецЕсли;
				
				СтрокаТаблицыЦен["ИзмененаВручную" + ИмяКолонки] = Ложь;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокумент()
	
	Если Объект.ВидыЦен.Количество() > 0 ИЛИ Объект.Товары.Количество() > 0 Тогда
		
		Если ВыбранныеСтрокиТаблицыВидовЦен().Количество() > 0 Тогда
			ПостроитьДеревоЦен();
			ЗагрузитьТабличнуюЧастьТовары();
			ЗагрузитьБазовыеЦены();
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУстановкаЦен;
		Иначе
			
			// Документ вводится на основании Поступления товаров и услуг.
			// Необходимо выбрать цены, рассчитываемые по документу поступления и переформировать таблицу цен.
			Если ЗначениеЗаполнено(Объект.ДокументОснование)
				И НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
					Если ТекСтрока.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении Тогда
						ТекСтрока.Выбрана = Истина;
						НоваяСтрока = Объект.ВидыЦен.Добавить();
						НоваяСтрока.ВидЦены = ТекСтрока.Ссылка;
					КонецЕсли;
				КонецЦикла;
				
				ВыбратьВсеЗависимыеЦены();
				ВыбранныеЦеныИзменены = Ложь;
				
				ВидыЗагружаемыхСтарыхЦен = Новый Массив();
				Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
					Если ТекСтрока.Выбрана И (ТекСтрока.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗадаватьВручную) Тогда
						ВидыЗагружаемыхСтарыхЦен.Добавить(ТекСтрока.Ссылка);
					КонецЕсли;
				КонецЦикла;
				
				ПостроитьДеревоЦен();
				ЗагрузитьТабличнуюЧастьТовары();
				
				ПоместитьВидыЦенВТабличнуюЧасть(Объект);
				ПоместитьЦеныВТабличнуюЧасть(Объект, Ложь);
				ОбновитьСтарыеЦеныНоменклатуры();
				
				ТаблицаНоменклатуры = СоздатьТаблицуНоменклатурыПоДеревуЦен();
				ЗагрузитьЗначенияБазовыхЦен(ТаблицаНоменклатуры, ВидыЗагружаемыхСтарыхЦен, , 0, Истина);
				
				Если ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанныхНаСервере(Ложь) Тогда
					
					ВычислитьЦеныПоДаннымИБ(ТаблицаНоменклатуры);
					РассчитатьВычисляемыеЦены(ТаблицаНоменклатуры);
					
					Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУстановкаЦен;
					
				Иначе
					ПроверитьЗаполнениеПараметровПриОткрытии = Истина;
				КонецЕсли;
				
			Иначе
				
				ПостроитьДеревоЦен();
				ЗагрузитьТабличнуюЧастьТовары();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИндексКартинкиСтрокиДереваЦен(СтрокаДереваЦен)
	
	Если ТипЗнч(СтрокаДереваЦен) = Тип("ДанныеФормыЭлементДерева") Тогда
		Если СтрокаДереваЦен.ПолучитьРодителя() = Неопределено Тогда
			СтрокаДереваЦен.ИндексКартинки = 0;
		Иначе
			СтрокаДереваЦен.ИндексКартинки = 2;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СтрокаДереваЦен) = Тип("СтрокаДереваЗначений") Тогда
		Если СтрокаДереваЦен.Родитель = Неопределено Тогда
			СтрокаДереваЦен.ИндексКартинки = 0;
		Иначе
			СтрокаДереваЦен.ИндексКартинки = 2;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Копирует в таблицу значений номенклатуру с характеристикой из дерева цен.
//
// Возвращаемое значение:
// ТаблицаЗначений
//
&НаСервере
Процедура ЗаполнитьТаблицуНоменклатурыПоДеревуЦен(ТаблицаНоменклатуры)

	ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
		
	Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
			
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементНоменклатура);
		НоваяСтрока.ИдентификаторСтроки = ЭлементНоменклатура.ПолучитьИдентификатор();
			
		ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
			
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				
			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементХарактеристика);
			НоваяСтрока.ИдентификаторСтроки = ЭлементХарактеристика.ПолучитьИдентификатор();
				
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

// Получает все характеристики номенклатуры.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура, для которой необходимо получить характеристики.
//
&НаСервере
Процедура ЗаполнитьХарактеристикиНоменклатуры(Знач ТекущаяСтрока, СкопироватьЦеныИзТекущейСтроки = Ложь)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка           КАК Номенклатура,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.ЦеноваяГруппа    КАК ЦеноваяГруппа,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры) ТОГДА ИСТИНА
	|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры) ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ХарактеристикиНоменклатуры.Ссылка       КАК Характеристика
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|	ПО (ХарактеристикиНоменклатуры.Владелец = СправочникНоменклатура.Ссылка
	|		ИЛИ ХарактеристикиНоменклатуры.Владелец = СправочникНоменклатура.ВидНоменклатуры)
	|ГДЕ
	|	СправочникНоменклатура.Ссылка = &Номенклатура
	|	И ХарактеристикиНоменклатуры.Ссылка ЕСТЬ НЕ NULL
	|УПОРЯДОЧИТЬ ПО
	|	ХарактеристикиНоменклатуры.Ссылка
	|");
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|;
			|ВЫБРАТЬ
			|	ЦеныНоменклатуры.Характеристика  КАК Характеристика,
			|	ЦеныНоменклатуры.ВидЦены         КАК ВидЦены,
			|	ЦеныНоменклатуры.Упаковка        КАК Упаковка
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|		&ДатаДокумента,
			|			Номенклатура = &Номенклатура
			|			И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры
			|";
			
		Запрос.УстановитьПараметр("ВидыЦен",       ВыбранныеВидыЦен());
		Запрос.УстановитьПараметр("ДатаДокумента", ДатаДляЗапросаЦенНоменклатуры());
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		Упаковки = МассивРезультатов[1].Выгрузить();
		Упаковки.Индексы.Добавить("Характеристика");
	КонецЕсли;
	
	ВидыЦен = ВыбранныеВидыЦен();
	
	ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
	ВыборкаХарактеристики = МассивРезультатов[0].Выбрать();
	Пока ВыборкаХарактеристики.Следующий() Цикл
		
		ЭлементХарактеристика = ЭлементыХарактеристики.Добавить();
		
		ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
		ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			ПараметрыПоиска = Новый Структура("Характеристика", ЭлементХарактеристика.Характеристика);
			
			НайденныеСтроки = Упаковки.НайтиСтроки(ПараметрыПоиска);
			Для Каждого ВыборкаУпаковки Из НайденныеСтроки Цикл
				ЭлементХарактеристика["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены)] = ВыборкаУпаковки.Упаковка;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СкопироватьЦеныИзТекущейСтроки Тогда
		
		МассивУпаковок = Новый Массив();
		СоответствиеУпаковок = Неопределено;
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			Для Каждого ВидЦены Из ВидыЦен Цикл
				ИмяКолонки = ИмяКолонкиПоВидуЦены(ВидЦены);
				
				Если ЗначениеЗаполнено(ТекущаяСтрока["Упаковка" + ИмяКолонки]) Тогда
					МассивУпаковок.Добавить(ТекущаяСтрока["Упаковка" + ИмяКолонки]);
				КонецЕсли;
				
				ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
				Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
					
					Упаковка = ЭлементХарактеристика["Упаковка" + ИмяКолонки];
					Если ЗначениеЗаполнено(Упаковка) И МассивУпаковок.Найти(Упаковка) = Неопределено Тогда
						МассивУпаковок.Добавить(Упаковка);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если МассивУпаковок.Количество() > 0 Тогда
				СоответствиеУпаковок = КоэффициентыУпаковокНоменклатуры(МассивУпаковок);
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого ВидЦены Из ВидыЦен Цикл
			ИмяКолонки = ИмяКолонкиПоВидуЦены(ВидЦены);
			
			Если ТекущаяСтрока["ИзмененаВручную" + ИмяКолонки] Тогда
				
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					
					// Определим коэффициент упаковки текущей цены.
					КоэффициентУпаковкиЦеныИсточника = 1;
					Если ИспользоватьУпаковкиНоменклатуры Тогда
						Упаковка = ТекущаяСтрока["Упаковка" + ИмяКолонки];
						Если ЗначениеЗаполнено(Упаковка) И СоответствиеУпаковок <> Неопределено Тогда
							НайденноеЗначение = СоответствиеУпаковок.Получить(Упаковка);
							Если НайденноеЗначение <> Неопределено Тогда
								КоэффициентУпаковкиЦеныИсточника = НайденноеЗначение;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
					
					ЭлементХарактеристика["ИзмененаВручную" + ИмяКолонки] = Истина;
					
					Если НЕ ИспользоватьУпаковкиНоменклатуры
						ИЛИ ТекущаяСтрока["Упаковка" + ИмяКолонки] = ЭлементХарактеристика["Упаковка" + ИмяКолонки] Тогда
						ЭлементХарактеристика[ИмяКолонки] = ТекущаяСтрока[ИмяКолонки];
					Иначе
						
						// Определим коэффициент упаковки влияющей цены.
						КоэффициентУпаковкиЦеныНазначения = 1;
						
						Упаковка = ЭлементХарактеристика["Упаковка" + ИмяКолонки];
						Если ЗначениеЗаполнено(Упаковка) И СоответствиеУпаковок <> Неопределено Тогда
							НайденноеЗначение = СоответствиеУпаковок.Получить(Упаковка);
							Если НайденноеЗначение <> Неопределено Тогда
								КоэффициентУпаковкиЦеныНазначения = НайденноеЗначение;
							КонецЕсли;
						КонецЕсли;
						
						Если КоэффициентУпаковкиЦеныИсточника = КоэффициентУпаковкиЦеныНазначения Тогда
							ЭлементХарактеристика[ИмяКолонки] = ТекущаяСтрока[ИмяКолонки];
						Иначе
							ЭлементХарактеристика[ИмяКолонки] = ТекущаяСтрока[ИмяКолонки]
																/ КоэффициентУпаковкиЦеныИсточника * КоэффициентУпаковкиЦеныНазначения;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает цены в таблице цен.
//
// Параметры:
// ЗагрузкаСтарыхЦен - Булево - Указывает на необходимость загрузки старых значений ручных цен.
// ОкруглениеРучныхЦен - Булево - Указывает на необходимость округления ручных цен.
//
&НаКлиенте
Процедура ЗапуститьРасчетЦен(ЗагрузкаСтарыхЦен = Ложь, ОкруглениеРучныхЦен = Ложь)
	
	ПараметрыОткрытия = ПараметрыРасчетаЦены(ЗагрузкаСтарыхЦен, ОкруглениеРучныхЦен);
	ДополнительныеПараметры = Новый Структура;
	ОбработчикОповещения = Новый ОписаниеОповещения("ЗапуститьРасчетЦенЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму(
		"Документ.УстановкаЦенНоменклатуры.Форма.ВыборПараметровРасчетаЦен",
		ПараметрыОткрытия,
		ЭтаФорма,
		,
		,
		,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Устанавливает признак фиксации колонки "Номенклатура".
//
// Параметры:
// НовоеЗначение - Булево
//
&НаКлиенте
Процедура ЗафиксироватьКолонкуНоменклатураНаКлиенте(НовоеЗначение)
	
	ЗафиксироватьКолонкуНоменклатура = НовоеЗначение;
	
	Если ЗафиксироватьКолонкуНоменклатура Тогда
		Элементы.ДеревоЦенНоменклатура.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
		Элементы.ДеревоЦенХарактеристика.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
	Иначе
		Элементы.ДеревоЦенНоменклатура.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
		Элементы.ДеревоЦенХарактеристика.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
	КонецЕсли;
	
	Элементы.ДеревоЦенПереключательЗафиксироватьКолонкуНоменклатура.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Возвращает таблицу с колонками Упаковка и Коэффициент.
//
// Параметры:
//  МассивУпаковок - Массив - содержит упаковки номенклатуры, для которых необходимо получить коэффициенты.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
&НаСервереБезКонтекста
Функция КоэффициентыУпаковокНоменклатуры(МассивУпаковок)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	УпаковкиНоменклатуры.Ссылка      КАК Упаковка,
		|	УпаковкиНоменклатуры.Коэффициент КАК Коэффициент
		|ИЗ
		|	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Ссылка В(&МассивУпаковок)");
		
	Запрос.УстановитьПараметр("МассивУпаковок", МассивУпаковок);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеУпаковок = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		СоответствиеУпаковок.Вставить(Выборка.Упаковка, Выборка.Коэффициент);
	КонецЦикла;
	
	Возврат СоответствиеУпаковок;
	
КонецФункции

// Возвращает таблицу с колонками Упаковка и Коэффициент.
//
// Параметры:
// СтрокаТаблицы - строка таблицаЗначений.
//
// Возвращаемое значение:
// ТаблицаЗначений
//
&НаСервере
Функция КоэффициентыУпаковокНоменклатурыДереваТоваров(ТаблицаНоменклатуры)
	
	МассивВидовЦен = Новый Массив();
		
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		Если ВидЦены.Выбрана Тогда
			МассивВидовЦен.Добавить(ВидЦены.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	МассивИменУпаковок = Новый Массив;
	Для Каждого ВидЦен Из МассивВидовЦен Цикл
		ИмяКолонки = ПолучитьИмяКолонкиУпаковки(ВидЦен);
		МассивИменУпаковок.Добавить(ИмяКолонки);
	КонецЦикла;
	
	МассивУпаковок = Новый Массив();
	
	ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
		
	Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		ЕстьУпаковки = Ложь;
		Для Каждого ИмяКолонки Из МассивИменУпаковок Цикл
			Если ЭлементНоменклатура.Свойство(ИмяКолонки) Тогда
				Упаковка = ЭлементНоменклатура[ИмяКолонки];
				Если ЗначениеЗаполнено(Упаковка) Тогда
					МассивУпаковок.Добавить(Упаковка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
		
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			ЕстьУпаковки = Ложь;
			Для Каждого ИмяКолонки Из МассивИменУпаковок Цикл
				Если ЭлементХарактеристика.Свойство(ИмяКолонки) Тогда
					Упаковка = ЭлементХарактеристика[ИмяКолонки];
					Если ЗначениеЗаполнено(Упаковка) Тогда
						МассивУпаковок.Добавить(Упаковка);
						КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
		
	Возврат КоэффициентыУпаковокНоменклатуры(МассивУпаковок);
	
КонецФункции

// Осуществляет поиск строки с определенным видом цен в таблице.
//
// Параметры:
//  ТаблицаВидовЦен - ДанныеФормыКоллекция - Таблица, в которой осуществляется поиск.
//  ВидЦен - СправочникСсылка.ВидыЦен - Ссылка на вид цен, который необходимо найти.
//
// Возвращаемое значение:
//  ДанныеФормыЭлементКоллекции - найденный вид цен.
//
&НаСервере
Функция НайтиСтрокуВидаЦен(ВидЦены)
	
	Возврат ВыбранныеЦены.НайтиСтроки(Новый Структура("Ссылка", ВидЦены.Ссылка))[0];
	
КонецФункции

// Осуществляет поиск строки с определенным видом цен в таблице.
//
// Параметры:
//  ТаблицаВидовЦен - ДанныеФормыКоллекция - Таблица, в которой осуществляется поиск.
//  ВидЦен - СправочникСсылка.ВидыЦен - Ссылка на вид цен, который необходимо найти.
//
// Возвращаемое значение:
//  ДанныеФормыЭлементКоллекции - найденный вид цен.
//
&НаКлиенте
Функция НайтиСтрокуВидаЦенНаКлиенте(Таблица, ВидЦены)
	
	Возврат Таблица.НайтиСтроки(Новый Структура("Ссылка", ВидЦены))[0];
	
КонецФункции

// Осуществляет поиск строк в таблице по полям строки.
//
// Параметры:
// Таблица - ДанныеФормыКоллекция - Таблица, в которой необходимо найти строки.
// СтрокаКлюч - ДанныеФормыЭлементКоллекции - Строка, по полям которой должен
// осуществляться поиск.
//
// Возвращаемое значение:
// Массив найденных строк таблицы.
//
&НаСервере
Функция НайтиСтрокуДереваЦен(СтрокаНоменклатуры)
	
	Если ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = Неопределено Тогда
		ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = ТаблицаСоответствия();
	КонецЕсли;
	
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		Отбор = Новый Структура("Номенклатура, Характеристика",
						СтрокаНоменклатуры.Номенклатура,
						СтрокаНоменклатуры.Характеристика);
	Иначе
		Отбор = Новый Структура("Номенклатура, Характеристика",
						СтрокаНоменклатуры.Номенклатура,
						Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	МассивСтрок = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.НайтиСтроки(Отбор);
	Для Каждого СтрокаТЗ Из МассивСтрок Цикл
		Возврат СтрокаТЗ.СтрокаДереваЦен;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Осуществляет округление цены в соответствии с правилами округления для вида цен.
//
// Параметры:
//  ЗначениеЦены - Число - значение цены, которое необходимо округлить.
//  СтрокаСправочникаВидовЦен - СтрокаТаблицыЗначений - вид цены, в соответствии с которым необходимо округлить цену.
//
// Возвращаемое значение:
//  Число - Округленное значение цены.
//
&НаСервере
Функция ОкруглитьЦену(ЗначениеЦены, СтрокаСправочникаВидовЦен)
	
	КоличествоСтрок = СтрокаСправочникаВидовЦен.ПравилаОкругленияЦены.Количество();
	
	Для Индекс = 1 По КоличествоСтрок Цикл
		
		ПравилаОкругления = СтрокаСправочникаВидовЦен.ПравилаОкругленияЦены[КоличествоСтрок - Индекс];
		
		Если ПравилаОкругления.НижняяГраницаДиапазонаЦен <= ЗначениеЦены Тогда
			
			Если ЗначениеЗаполнено(ПравилаОкругления.ТочностьОкругления) Тогда
				ЗначениеЦены = Ценообразование.ОкруглитьЦену(
								ЗначениеЦены,
								ПравилаОкругления.ТочностьОкругления,
								СтрокаСправочникаВидовЦен.ОкруглятьВБольшуюСторону);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПравилаОкругления.ПсихологическоеОкругление) Тогда
				ЗначениеЦены = ЦенообразованиеКлиентСервер.ПрименитьПсихологическоеОкругление(
								ЗначениеЦены,
								ПравилаОкругления.ПсихологическоеОкругление);
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеЦены = Окр(ЗначениеЦены, 2);
	
	Возврат ЗначениеЦены;
	
КонецФункции

// Обнуляет цены в таблице
//
// Параметры:
//  ТаблицаНоменклатуры - ТаблицаЗначений - Таблица, в которой необходимо очистить цены.
//  ВидЦены - Массив - виды цен, для которых необходимо очистить цены.
//
&НаСервере
Процедура ОчиститьЦены(ТаблицаНоменклатуры, МассивСтрокВидовЦен)
	
	Для Каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		СтрокаДереваЦен = НайтиСтрокуДереваЦен(СтрокаНоменклатуры);
		Если СтрокаДереваЦен <> Неопределено Тогда
			Для Каждого СтрокаВидЦены Из МассивСтрокВидовЦен Цикл
				СтрокаДереваЦен[СтрокаВидЦены.ИмяКолонки] = 0;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для расчета цен.
//
// Параметры:
// ЗагрузкаСтарыхЦен - Булево - Указывает на необходимость загрузки старых значений ручных цен.
// ОкруглениеРучныхЦен - Булево - Указывает на необходимость округления ручных цен.
//
// Возвращаемое значение:
// Структура
// Ключи структуры:
// ЗагрузкаСтарыхЦен - Булево
// ОкруглениеРучныхЦен - Булево
// ВидыЦен - Массив
//
&НаКлиенте
Функция ПараметрыРасчетаЦены(ЗагрузкаСтарыхЦен = Ложь, ОкруглениеРучныхЦен = Ложь)
	
	ВидыЦен = Новый Массив();
	
	Для Каждого Цена Из ВыбранныеЦены Цикл
		
		Если Цена.Выбрана Тогда
			Если ОкруглениеРучныхЦен И Цена.СпособЗаданияЦены = СпособЗаданияЦеныВручную Тогда
				ВидыЦен.Добавить(Цена.Ссылка);
			ИначеЕсли ЗагрузкаСтарыхЦен
				И (Цена.СпособЗаданияЦены = СпособЗаданияЦеныВручную
					ИЛИ Цена.СпособЗаданияЦены = СпособЗаданияЦеныПоДаннымИБ
					ИЛИ Цена.СпособЗаданияЦены = СпособЗаданияЦеныПоДаннымИБПриПоступлении) Тогда
				ВидыЦен.Добавить(Цена.Ссылка);
			ИначеЕсли (НЕ ЗагрузкаСтарыхЦен) И (НЕ ОкруглениеРучныхЦен) Тогда
				ВидыЦен.Добавить(Цена.Ссылка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("ЗагрузкаСтарыхЦен", ЗагрузкаСтарыхЦен);
	СтруктураРезультат.Вставить("ОкруглениеРучныхЦен", ОкруглениеРучныхЦен);
	СтруктураРезультат.Вставить("ВидыЦен", ВидыЦен);
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Формирует таблицу цен на форме.
//
// Параметры:
//  ПересчитатьЦены - Булево - Указывает на необходимость перерасчета цен.
//
&НаСервере
Процедура ПереформироватьТаблицуЦен(ПересчитатьЦены)
	
	ПоместитьЦеныВТабличнуюЧасть(Объект);
	ПостроитьДеревоЦен();
	ЗагрузитьТабличнуюЧастьТовары();
	
	Если ПересчитатьЦены Тогда
		РассчитатьВсеЦены();
	Иначе
		ЗагрузитьБазовыеЦены();
	КонецЕсли;
	
КонецПроцедуры

// Формирует уникальное имя колонки таблицы.
//
&НаСервереБезКонтекста
Функция ПолучитьИмяКолонкиУпаковки(ВидЦены)
	
	Возврат "УпаковкаВидЦены" + СтрЗаменить(ВидЦены.УникальныйИдентификатор(), "-", "");
	
КонецФункции

// Копирует виды цен из таблицы формы ВыбранныеЦены в табличную часть ВидыЦен объекта.
//
&НаСервере
Процедура ПоместитьВидыЦенВТабличнуюЧасть(ТекущийОбъект)
	
	ТекущийОбъект.ВидыЦен.Очистить();
	
	Для Каждого Цена Из ВыбранныеЦены Цикл
		
		Если Цена.Выбрана Тогда
			
			НоваяСтрока         = ТекущийОбъект.ВидыЦен.Добавить();
			НоваяСтрока.ВидЦены = Цена.Ссылка;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Копирует цены по всем видам из таблицы формы ДеревоЦен в строку табличной части Товары объекта.
//
// Параметры:
//  Товары           - табличная часть, в которую необходимо поместить строку с ценами.
//  СохранятьБазовые - Булево -указывает на необходимость помещения в табличную часть базовых видов цен.
//
&НаСервере
Процедура ПоместитьСтрокуЦенВТабличнуюЧасть(МассивСтрокЦен, Товары, СтрокаЦен, СохранятьБазовые = Истина)
	
	Для Каждого ВидЦены Из МассивСтрокЦен Цикл
		
		НоваяСтрока                = Товары.Добавить();
		НоваяСтрока.Номенклатура   = СтрокаЦен.Номенклатура;
		НоваяСтрока.Характеристика = СтрокаЦен.Характеристика;
		НоваяСтрока.ВидЦены        = ВидЦены.Ссылка;
		
		ИмяКолонки = ВидЦены.ИмяКолонки;
		Если СтрокаЦен.Свойство(ИмяКолонки) Тогда
			НоваяСтрока.Цена = СтрокаЦен[ИмяКолонки];
			НоваяСтрока.ЦенаИзмененаВручную = СтрокаЦен["ИзмененаВручную" + ИмяКолонки];
		КонецЕсли;
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			ИмяКолонки = "Упаковка" + ИмяКолонки;
			Если СтрокаЦен.Свойство(ИмяКолонки) Тогда
				НоваяСтрока.Упаковка = СтрокаЦен[ИмяКолонки];
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

// Копирует цены из таблицы формы ДеревоЦен в табличную часть Товары объекта.
//
// Параметры:
// ТекущийОбъект    - объект, в табличную часть которого необходимо поместить цены.
// СохранятьБазовые - Булево -указывает на необходимость помещения в табличную часть базовых видов цен.
//
&НаСервере
Процедура ПоместитьЦеныВТабличнуюЧасть(ТекущийОбъект, СохранятьБазовые = Истина)
	
	ТекущийОбъект.Товары.Очистить();
	МассивСтрокЦен = Новый Массив;
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		
		Если ВидЦены.Выбрана ИЛИ СохранятьБазовые И ВидЦены.Влияет Тогда
			
			МассивСтрокЦен.Добавить(ВидЦены);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
	
	Для Каждого ТекЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		
		ПоместитьСтрокуЦенВТабличнуюЧасть(МассивСтрокЦен, ТекущийОбъект.Товары, ТекЭлементНоменклатура, СохранятьБазовые);
		
		ЭлементыХарактеристики = ТекЭлементНоменклатура.ПолучитьЭлементы();
		
		Для Каждого ТекЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			ПоместитьСтрокуЦенВТабличнуюЧасть(МассивСтрокЦен, ТекущийОбъект.Товары, ТекЭлементХарактеристика, СохранятьБазовые);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает упаковки, на которые ранее были установлены цены номенклатуре
// для подстановки в документы при изменении номенклатуры.
//
// Параметры:
// Номенклатура - СправочникСсылка.Номенклатура - Ссылка на номенклатуру, для которой необходимо получить упаковку цен.
//
// Возвращаемое значение:
// ТаблицаЗначений
//
&НаСервереБезКонтекста
Функция ПоследниеУпаковкиЦен(Знач Номенклатура, Знач Характеристика, Знач ВидыЦен, Знач Дата = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЦеныНоменклатуры.ВидЦены КАК ВидЦены,
	|	ЦеныНоменклатуры.Упаковка КАК Упаковка
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры";
	
	Запрос.УстановитьПараметр("Номенклатура",   Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("ВидыЦен",        ВидыЦен);
	Запрос.УстановитьПараметр("Дата",           ?(Дата = Неопределено, ТекущаяДатаСеанса(), Дата));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ПостроитьДеревоЦен()
	
	ДобавляемыеКолонкиТаблицыЦен = Новый Массив;
	УдаляемыеКолонкиТаблицыЦен   = Новый Массив;
	УдаляемыеЭлементы            = Новый Массив;
	УсловныеОформления           = Новый Массив;
	
	ДеревоЗначений = СоздатьПустоеДеревоНоменклатуры();
	
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		
		Если ВидЦены.Выбрана ИЛИ ВидЦены.Влияет Тогда
			
			ИмяКолонки = ВидЦены.ИмяКолонки;
			
			ДеревоЗначений.Колонки.Добавить(
				ИмяКолонки,
				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)),
				ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить(
				"СтараяЦена" + ИмяКолонки,
				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)),
				ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить(
				"ПроцентИзменения" + ИмяКолонки,
				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(05, 2, ДопустимыйЗнак.Любой)),
				ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить(
				"ПроцентНаценки" + ИмяКолонки,
				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)),
				ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить(
				"ИзмененаВручную" + ИмяКолонки,
				Новый ОписаниеТипов("Булево"),
				ВидЦены.Наименование);
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				ДеревоЗначений.Колонки.Добавить(
					"Упаковка" + ИмяКолонки,
					Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"),
					"Упаковка");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	РеквизитыТаблицыЦен = ПолучитьРеквизиты("ДеревоЦен");
	Для Каждого Реквизит Из РеквизитыТаблицыЦен Цикл
		Если Найти(Реквизит.Имя, "ВидЦены") Тогда
			УдаляемыеКолонкиТаблицыЦен.Добавить("ДеревоЦен." + Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
		Если Найти(Колонка.Имя, "ВидЦены") Тогда
			УдаляемаяКолонка = УдаляемыеКолонкиТаблицыЦен.Найти("ДеревоЦен." + Колонка.Имя);
			Если УдаляемаяКолонка <> Неопределено Тогда
				УдаляемыеКолонкиТаблицыЦен.Удалить(УдаляемаяКолонка);
			Иначе
				ДобавляемыеКолонкиТаблицыЦен.Добавить(
					Новый РеквизитФормы(
							Колонка.Имя,
							Колонка.ТипЗначения,
							"ДеревоЦен",
							Колонка.Заголовок,
							Истина));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если УдаляемыеКолонкиТаблицыЦен.Количество() > 0 ИЛИ ДобавляемыеКолонкиТаблицыЦен.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеКолонкиТаблицыЦен, УдаляемыеКолонкиТаблицыЦен);
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из Элементы.ДеревоЦен.ПодчиненныеЭлементы Цикл
		Если Найти(ТекЭлемент.Имя, "ВидЦены") Тогда
			УдаляемыеЭлементы.Добавить(ТекЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Для Каждого Оформление Из ЭтаФорма.УсловноеОформление.Элементы Цикл
		Если Оформление.Представление = "СозданоПрограммно" Тогда
			УсловныеОформления.Добавить(Оформление);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Оформление Из УсловныеОформления Цикл
		УсловноеОформление.Элементы.Удалить(Оформление);
	КонецЦикла;
	
	МассивДоступныхЦен = МассивВсехДоступныхЦен();
	
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		
		ИмяКолонки = ВидЦены.ИмяКолонки;
		ВидимостьКолонки = Ложь;
		Если ВидЦены.Выбрана ИЛИ (ОтображатьВлияющиеЦены И ВидЦены.Влияет) Тогда
			
			Если МассивДоступныхЦен.Найти(ВидЦены.Ссылка) <> Неопределено Тогда
				Если ВидЦены.Выбрана Тогда
					ВидимостьКолонки = Истина;
				ИначеЕсли ВидЦены.Влияет Тогда
					Для Каждого ЗависимаяЦена Из ВидЦены.ЗависимыеЦены Цикл
						Если МассивДоступныхЦен.Найти(ЗависимаяЦена.Значение) <> Неопределено Тогда
							СтрокаЗависимойЦены = НайтиСтрокуВидаЦен(ЗависимаяЦена.Значение);
							Если СтрокаЗависимойЦены.Выбрана
								ИЛИ СтрокаЗависимойЦены.Влияет Тогда
								Если СтрокаЗависимойЦены.НепосредственноВлияющиеЦены.НайтиПоЗначению(ВидЦены.Ссылка) <> Неопределено Тогда
									ВидимостьКолонки = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			ЦветЗаголовка = Неопределено;
			ЦветФона      = Неопределено;
			КартинкаШапки = Неопределено;
			
			ОтображатьНаценку = Ложь;
			ВидимостьНаценки = Ложь;
			
			Если ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗадаватьВручную Тогда
				
				КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенЗадаватьВручную;
				
			ИначеЕсли ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
				ИЛИ ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении Тогда
				
				ЦветФона      = Метаданные.ЭлементыСтиля.КолонкаЦенЗаполнятьПоДаннымИБ.Значение;
				КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенЗаполнятьПоДаннымИБ;
				
			ИначеЕсли ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоДругимВидамЦен Тогда
				
				ЦветФона      = Метаданные.ЭлементыСтиля.КолонкаЦенРассчитыватьПоДругимВидамЦен.Значение;
				КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенРассчитыватьПоДругимВидамЦен;
				ОтображатьНаценку = Истина;
				Если ВидЦены.НепосредственноВлияющиеЦены.Количество() = 1 Тогда
					Если МассивДоступныхЦен.Найти(ВидЦены.НепосредственноВлияющиеЦены[0].Значение) <> Неопределено Тогда
						ВидимостьНаценки = ОтображатьВлияющиеЦены;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяГруппа = ДобавитьГруппуФормы(
							"ГруппаЦены" + ИмяКолонки,
							Строка(ВидЦены.Ссылка) + ", " + Строка(ВидЦены.Валюта),
							Истина,
							КартинкаШапки,
							ГруппировкаКолонок.Горизонтальная);
							
			НоваяГруппа.Видимость = ВидимостьКолонки;
			
			ЗаголовокКолонкиСтараяЦена = ?(ВидЦены.Выбрана, НСтр("ru='Старая цена'"), НСтр("ru='Цена'"));
			
			СвойстваПоля = СтруктураСвойствПоля();
			СвойстваПоля.Имя = "СтараяЦена" + ИмяКолонки;
			СвойстваПоля.Заголовок = ЗаголовокКолонкиСтараяЦена;
			СвойстваПоля.ШиринаПоля = 12;
			СвойстваПоля.ЦветФона = ЦветФона;
			СвойстваПоля.ЦветФонаЗаголовка = ЦветЗаголовка;
			СвойстваПоля.Родитель = НоваяГруппа;
			
			НовоеПоле = ДобавитьПолеФормы(СвойстваПоля);
			НовоеПоле.ЦветТекста = WebЦвета.Серый;
			
			Если ВидЦены.Выбрана Тогда
				
				СвойстваПоля = СтруктураСвойствПоля();
				СвойстваПоля.Имя = "ПроцентИзменения" + ИмяКолонки;
				СвойстваПоля.Заголовок = НСтр("ru = '% изменения'");
				СвойстваПоля.ШиринаПоля = 6;
				СвойстваПоля.ТолькоПросмотрПоля = Ложь;
				СвойстваПоля.ЦветФона = ЦветФона;
				СвойстваПоля.ЦветФонаЗаголовка = ЦветЗаголовка;
				СвойстваПоля.Родитель = НоваяГруппа;
				СвойстваПоля.ОбработчикПриИзменении = "ДеревоЦенЦенаПриИзменении";
				
				НовоеПоле = ДобавитьПолеФормы(СвойстваПоля);
				НовоеПоле.ЦветТекста = WebЦвета.Серый;
				НовоеПоле.ВыделятьОтрицательные = Истина;
				НовоеПоле.Подсказка = НСтр("ru = 'Процент изменения стоимости'");
				
				Если ОтображатьНаценку Тогда
					СвойстваПоля = СтруктураСвойствПоля();
					СвойстваПоля.Имя = "ПроцентНаценки" + ИмяКолонки;
					СвойстваПоля.Заголовок = НСтр("ru = '% наценки'");
					СвойстваПоля.ШиринаПоля = 6;
					СвойстваПоля.ТолькоПросмотрПоля = Ложь;
					СвойстваПоля.ЦветФона = ЦветФона;
					СвойстваПоля.ЦветФонаЗаголовка = ЦветЗаголовка;
					СвойстваПоля.Родитель = НоваяГруппа;
					СвойстваПоля.ОбработчикПриИзменении = "ДеревоЦенПроцентНаценкиПриИзменении";
					
					НовоеПоле = ДобавитьПолеФормы(СвойстваПоля);
					НовоеПоле.Видимость = ВидимостьНаценки;
					НовоеПоле.ЦветТекста = WebЦвета.Серый;
					НовоеПоле.ВыделятьОтрицательные = Истина;
					НовоеПоле.Подсказка = НСтр("ru = 'Процент наценки на влияющую цену'");
				КонецЕсли;
				
				СвойстваПоля = СтруктураСвойствПоля();
				СвойстваПоля.Имя = ИмяКолонки;
				СвойстваПоля.Заголовок = НСтр("ru = 'Новая цена'");
				СвойстваПоля.ШиринаПоля = 12;
				СвойстваПоля.ТолькоПросмотрПоля = Ложь;
				СвойстваПоля.ЦветФона = ЦветФона;
				СвойстваПоля.ЦветФонаЗаголовка = ЦветЗаголовка;
				СвойстваПоля.Родитель = НоваяГруппа;
				СвойстваПоля.ОбработчикПриИзменении = "ДеревоЦенЦенаПриИзменении";
				
				НовоеПоле = ДобавитьПолеФормы(СвойстваПоля);
				
				СвойстваПоля = СтруктураСвойствПоля();
				СвойстваПоля.Имя = "ИзмененаВручную" + ИмяКолонки;
				СвойстваПоля.Заголовок = НСтр("ru = 'Изм.'");
				СвойстваПоля.ШиринаПоля = 6;
				СвойстваПоля.ТолькоПросмотрПоля = Истина;
				СвойстваПоля.ТолькоПросмотрПоля = Ложь;
				СвойстваПоля.ЦветФона = ЦветФона;
				СвойстваПоля.ЦветФонаЗаголовка = ЦветЗаголовка;
				СвойстваПоля.Родитель = НоваяГруппа;
				
				
				НовоеПоле = ДобавитьПолеФормы(СвойстваПоля);
				НовоеПоле.ЦветТекста = WebЦвета.Серый;
				НовоеПоле.Видимость  = Ложь;
				
			КонецЕсли;
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяГруппаУпаковка = ДобавитьГруппуФормы(
										"ГруппаУпаковки" + ИмяКолонки,
										НСтр("ru='Упаковка, ед. изм.'"),
										Ложь,
										Неопределено,
										ГруппировкаКолонок.ВЯчейке,
										НоваяГруппа);
										
				НоваяГруппаУпаковка.Видимость = ВидимостьКолонки;
				
				НоваяСвязь = Новый СвязьПараметраВыбора(
									"Номенклатура",
									"Элементы.ДеревоЦен.ТекущиеДанные.Номенклатура",
									РежимИзмененияСвязанногоЗначения.НеИзменять);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НоваяСвязь);
				НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);

				СвойстваПоля = СтруктураСвойствПоля();
				СвойстваПоля.Имя = "Упаковка" + ИмяКолонки;
				СвойстваПоля.Заголовок = НСтр("ru = 'Упаковка'");
				СвойстваПоля.ШиринаПоля = 12;
				СвойстваПоля.ТолькоПросмотрПоля = Ложь;
				СвойстваПоля.ЦветФона = ЦветФона;
				СвойстваПоля.ЦветФонаЗаголовка = ЦветЗаголовка;
				СвойстваПоля.Родитель = НоваяГруппаУпаковка;
				СвойстваПоля.СвязиПараметровВыбора = НовыеСвязи;
				СвойстваПоля.ОбработчикПриИзменении = "Подключаемый_ДеревоЦенУпаковкаПриИзменении";
				СвойстваПоля.ОбработчикНачалоВыбора = "Подключаемый_ДеревоЦенУпаковкаНачалоВыбора";
				
				НовоеПоле = ДобавитьПолеФормы(СвойстваПоля);
				
				СвойстваПоля = СтруктураСвойствПоля();
				СвойстваПоля.Имя = "ЕдиницаИзмерения" + ИмяКолонки;
				СвойстваПоля.Заголовок = НСтр("ru = 'Ед. изм.'");
				СвойстваПоля.ШиринаПоля = 8;
				СвойстваПоля.ЦветФона = ЦветФона;
				СвойстваПоля.ЦветФонаЗаголовка = ЦветЗаголовка;
				СвойстваПоля.Родитель = НоваяГруппаУпаковка;
				СвойстваПоля.ПутьКДанным = "ДеревоЦен.ЕдиницаИзмерения";
				
				НовоеПоле = ДобавитьПолеФормы(СвойстваПоля);
			Иначе
				СвойстваПоля = СтруктураСвойствПоля();
				СвойстваПоля.Имя = "ЕдиницаИзмерения" + ИмяКолонки;
				СвойстваПоля.Заголовок = НСтр("ru = 'Ед. изм.'");
				СвойстваПоля.ШиринаПоля = 8;
				СвойстваПоля.ЦветФона = ЦветФона;
				СвойстваПоля.ЦветФонаЗаголовка = ЦветЗаголовка;
				СвойстваПоля.Родитель = НоваяГруппа;
				СвойстваПоля.ПутьКДанным = "ДеревоЦен.ЕдиницаИзмерения";
				
				НовоеПоле = ДобавитьПолеФормы(СвойстваПоля);
			КонецЕсли;
			
			// Условное оформление цен, измененных вручную.
			НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
			НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
			НовыйЭлементУсловногоОформления.Использование = Истина;
			
			ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.ИзмененаВручную" + ИмяКолонки);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Истина;
			
			НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
			НовоеПоле.Использование = Истина;
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЦен" + ИмяКолонки);
			
			НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоЦенЗначение = РеквизитФормыВЗначение("ДеревоЦен");
	ДеревоЦенЗначение.Колонки.Очистить();
	
	Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
		ДеревоЦенЗначение.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЦенЗначение, "ДеревоЦен");
	
КонецПроцедуры

&НаСервере
Функция СтруктураСвойствПоля()
	
	СвойстваПоля = Новый Структура;
	СвойстваПоля.Вставить("Имя", "");
	СвойстваПоля.Вставить("Заголовок", "");
	СвойстваПоля.Вставить("ШиринаПоля", 0);
	СвойстваПоля.Вставить("ЦветФона", Неопределено);
	СвойстваПоля.Вставить("ЦветФонаЗаголовка", Неопределено);
	СвойстваПоля.Вставить("Родитель", Неопределено);
	СвойстваПоля.Вставить("КартинкаШапки", Неопределено);
	СвойстваПоля.Вставить("ПутьКДанным", Неопределено);
	СвойстваПоля.Вставить("ТолькоПросмотрПоля", Истина);
	СвойстваПоля.Вставить("СвязиПараметровВыбора", Неопределено);
	СвойстваПоля.Вставить("ОбработчикПриИзменении", "");
	СвойстваПоля.Вставить("ОбработчикНачалоВыбора", "");
	
	Возврат СвойстваПоля;
КонецФункции

// Округляет ручные цены в таблице.
//
// Параметры:
//  ТаблицаНоменклатуры - ТаблицаЗначений - Таблица, в которой применяется округление.
//  ВидыЦен - Массив - виды цен, для которых необходимо применить округление.
//
&НаСервере
Процедура ПрименитьОкруглениеКРучнымЦенам(ТаблицаНоменклатуры, ВидыЦен)
	
	Для Каждого СтрокаТаблицыНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		СтрокаТаблицыЦен = НайтиСтрокуДереваЦен(СтрокаТаблицыНоменклатуры);
		
		Для Каждого СтрокаВидЦены Из ВидыЦен Цикл
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			СтрокаТаблицыЦен[ИмяКолонки] = ОкруглитьЦену(СтрокаТаблицыЦен[ИмяКолонки], СтрокаВидЦены);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет необходимые действия при переходе к странице установки цен.
//
&НаКлиенте
Процедура ПриПереходеКУстановкеЦен()
	
	ЕстьВыбранныеЦены = Ложь;
	
	Для Каждого Цена Из ВыбранныеЦены Цикл
		
		Если Цена.Выбрана Тогда
			
			ЕстьВыбранныеЦены = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьВыбранныеЦены Тогда
		
		Если ВыбранныеЦеныИзменены Тогда
			
			Если ДеревоЦен.ПолучитьЭлементы().Количество() > 0 Тогда
				ТекстВопроса = НСтр("ru = 'Состав цен изменился. Пересчитать цены?'");
				ДополнительныеПараметры = Новый Структура;
				ОбработчикОповещения = Новый ОписаниеОповещения(
												"ПриПереходеКУстановкеЦенЗавершение",
												ЭтотОбъект,
												ДополнительныеПараметры);
				ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Иначе
				ПереформироватьТаблицуЦен(Истина);
				ВыбранныеЦеныИзменены = Ложь;
			КонецЕсли;
			
			
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Для перехода к установке цен, необходимо выбрать один или несколько видов цен'"));
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВидыЦен;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность заполнения документа установки цен.
//
// Параметры:
// Отказ = Булево - признак отказа от записи документа.
//
&НаСервере
Процедура ПроверитьКорректностьЗаполненияДокумента(Отказ)
	
	// Для корректного построения таблицы цен по тч Товары не должно быть дублей товаров и пустых строк.
	ДеревоЦенДляПроверки = СоздатьПустуюТаблицуНоменклатуры();
	ДеревоЦенДляПроверки.Колонки.Добавить("НомерСтроки",    Новый ОписаниеТипов("Число"));
	ДеревоЦенДляПроверки.Колонки.Добавить("ЭтоГруппа",      Новый ОписаниеТипов("Булево"));
	
	ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
	НомерСтроки = 1;
	
	Для Каждого ТекЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		
		СтрокаТаблицы = ДеревоЦенДляПроверки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТекЭлементНоменклатура);
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		СтрокаТаблицы.ЭтоГруппа   = Истина;
		
		ЭлементыХарактеристики = ТекЭлементНоменклатура.ПолучитьЭлементы();
		
		НомерСтроки = НомерСтроки + 1;
		
		Если ТекЭлементНоменклатура.ХарактеристикиИспользуются Тогда
	
			ДобавленыХарактеристики = Ложь;
			
			Для Каждого ТекЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				
				СтрокаТаблицы = ДеревоЦенДляПроверки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТекЭлементХарактеристика);
				СтрокаТаблицы.НомерСтроки = НомерСтроки;
				СтрокаТаблицы.ЭтоГруппа   = Ложь;
				
				НомерСтроки = НомерСтроки + 1;
				ДобавленыХарактеристики = Истина;
				
			КонецЦикла;
			
			Если НЕ ДобавленыХарактеристики Тогда
				ТекстОшибки = НСтр("ru = 'Для номенклатуры ""%1"" в строке ""%2"" списка ""Таблица цен"" включено использование характеристик. Но ни одной характеристики не указано. Добавьте характеристики и укажите их цены или удалите данную номенклатуру из списка.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ТекстОшибки,
								СтрокаТаблицы.Номенклатура,
								СтрокаТаблицы.НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
					Объект.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоЦен", СтрокаТаблицы.НомерСтроки, "Номенклатура"),
					,
					Отказ);
			КонецЕсли;
			
		КонецЕсли; 		
		
	КонецЦикла;
	
	Если ДеревоЦенДляПроверки.Количество() = 0 Тогда
		
		ТекстОшибки = НСтр("ru='НЕ введено ни одной строки в список ""Товары"".'");
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Объект,
			"ДеревоЦен",
			,
			Отказ);
			
	Иначе
		
		Ценообразование.ПроверитьКорректностьЗаполненияДокументаУстановкиЦенНоменклатуры(
			Объект,
			ДеревоЦенДляПроверки,
			ВыбранныеВидыЦен(),
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПустаяТаблицаТовары()
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	
	ТаблицаЗначений.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗначений.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаЗначений.Колонки.Добавить("ВидЦены",        Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТаблицаЗначений.Колонки.Добавить("Цена",           Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("Упаковка",       Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Осуществляет расчет базовых, заполняемых по данным информационной базы и рассчитываемых цен.
//
&НаСервере
Процедура РассчитатьВсеЦены()
	
	ТаблицаНоменклатуры = СоздатьПустуюТаблицуНоменклатуры();
	ЗаполнитьТаблицуНоменклатурыПоДеревуЦен(ТаблицаНоменклатуры);
	
	ЗагрузитьЗначенияБазовыхЦен(ТаблицаНоменклатуры, Неопределено);
	
	ВычислитьЦеныПоДаннымИБ(ТаблицаНоменклатуры);
	РассчитатьВычисляемыеЦены(ТаблицаНоменклатуры);
	
КонецПроцедуры

// Осуществляет расчет вычисляемых цен.
//
// Параметры:
//  ТаблицаНоменклатуры - ДанныеФормыКоллекция - Таблица, в которой осуществляется расчет цен.
//  ВидыЦен - Массив - Виды цен, которые необходимо рассчитать.
//  ТолькоНезаполненные - Указывает на необходимость расчета ранее заполненных цен.
//
&НаСервере
Процедура РассчитатьВычисляемыеЦены(
			ТаблицаНоменклатуры,
			ВидыЦен = Неопределено,
			ТолькоНезаполненные = Ложь,
			ИзмененноеПоле = Неопределено)
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		СоответствиеУпаковок = КоэффициентыУпаковокНоменклатурыДереваТоваров(ТаблицаНоменклатуры);
	Иначе
		СоответствиеУпаковок = Неопределено;
	КонецЕсли;
	
	Если ВидыЦен = Неопределено Тогда
		Если ИзмененноеПоле = Неопределено Тогда
			ВидыЦен = ВыбранныеСтрокиТаблицыВидовЦен();
		Иначе
			СтрокаИзмененныйВидЦены = СтрокаВидаЦеныПоИмениПоля(ВыбранныеЦены, ИзмененноеПоле);
			Если СтрокаИзмененныйВидЦены <> Неопределено Тогда
				ВидыЦен = ЗависимыеОтВидаЦеныВидыЦен(СтрокаИзмененныйВидЦены);
			Иначе
				ВидыЦен = ВыбранныеСтрокиТаблицыВидовЦен();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ПозицияНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		СтрокаТаблицыЦен = НайтиСтрокуДереваЦен(ПозицияНоменклатуры);
		СтруктураЦеноваяГруппа = Новый Структура("ЦеноваяГруппа", СтрокаТаблицыЦен.ЦеноваяГруппа);
		
		Для Каждого ВидЦены Из ВидыЦен Цикл
			
			Если ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоДругимВидамЦен Тогда
				
				Если НЕ ТолькоНезаполненные Тогда
					СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] = 0;
				КонецЕсли;
				
				ТекущаяЦена = СтрокаТаблицыЦен[ВидЦены.ИмяКолонки];
				Если ТекущаяЦена = 0 ИЛИ НЕ ТолькоНезаполненные Тогда
					
					ЦеновыеГруппыАлгоритмов = ВидЦены.ЦеновыеГруппы.НайтиСтроки(СтруктураЦеноваяГруппа);
					Если ЦеновыеГруппыАлгоритмов.Количество() > 0 Тогда
						АлгоритмРасчетаЦены = ЦеновыеГруппыАлгоритмов[0].АлгоритмРасчетаЦены;
					Иначе
						АлгоритмРасчетаЦены = ВидЦены.АлгоритмРасчетаЦены;
					КонецЕсли;
					
					ЦеновыеГруппыПорогов = ВидЦены.ПорогиСрабатывания.НайтиСтроки(СтруктураЦеноваяГруппа);
					Если ЦеновыеГруппыПорогов.Количество() > 0 Тогда
						ПорогСрабатывания = ЦеновыеГруппыПорогов[0].ПорогСрабатывания;
					Иначе
						ПорогСрабатывания = ВидЦены.ПорогСрабатывания;
					КонецЕсли;
					
					ЗначениеБазовойЦены = 0;
					ПроцентНаценки = 0;
					
					Если ЗначениеЗаполнено(АлгоритмРасчетаЦены) Тогда
						
						НужнаНаценка = ВидЦены.НепосредственноВлияющиеЦены.Количество() = 1;
						
						Для Каждого БазоваяЦена Из ВидЦены.НепосредственноВлияющиеЦены Цикл
							
							СтрокаБазовойЦены = НайтиСтрокуВидаЦен(БазоваяЦена.Значение);
							
							СтрокаПересчетаВалюты   = СтрокаПересчетаВалюты(СтрокаБазовойЦены.Валюта, ВидЦены.Валюта);
							СтрокаПересчетаУпаковок = СтрокаПересчетаУпаковок(
														СтрокаТаблицыЦен,
														СтрокаБазовойЦены,
														ВидЦены,
														СоответствиеУпаковок);
														
							ПрефиксЦеныАлгоритма = "";
							Если СтрокаБазовойЦены.Выбрана Тогда
								ЗначениеБазовойЦены = СтрокаТаблицыЦен[СтрокаБазовойЦены.ИмяКолонки];
							Иначе
								ЗначениеБазовойЦены = СтрокаТаблицыЦен["СтараяЦена" + СтрокаБазовойЦены.ИмяКолонки];
								ПрефиксЦеныАлгоритма = "СтараяЦена";
							КонецЕсли;
							СтрокаЗамены = " СтрокаТаблицыЦен."
											+ ПрефиксЦеныАлгоритма
											+ СтрокаБазовойЦены.ИмяКолонки
											+ " " + СтрокаПересчетаУпаковок
											+ СтрокаПересчетаВалюты;
											
							СтрокаПоиска = "[" + СтрокаБазовойЦены.Идентификатор + "]";
							АлгоритмРасчетаЦены = СтрЗаменить(АлгоритмРасчетаЦены, СтрокаПоиска, СтрокаЗамены);
							
							Если ИспользоватьУпаковкиНоменклатуры Тогда
								ПересчитатьБазовуюЦенуСУчетомУпаковок(СтрокаТаблицыЦен, ВидЦены, СтрокаБазовойЦены, ЗначениеБазовойЦены);
							КонецЕсли;
						КонецЦикла;
						
						Попытка
							
							УстановитьБезопасныйРежим(Истина);
							ЗначениеЦены = ОкруглитьЦену(Вычислить(АлгоритмРасчетаЦены), ВидЦены);
							
							Если СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки] <> 0 Тогда
								ПроцентИзменения = Окр(100 *(ЗначениеЦены - СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки])
														/СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки],
														5, 2);
							Иначе
								ПроцентИзменения = 0;
							КонецЕсли;
							
							Если НужнаНаценка И ЗначениеБазовойЦены <> 0 Тогда
								ПроцентНаценки = Окр((ЗначениеЦены - ЗначениеБазовойЦены) * 100 / ЗначениеБазовойЦены, 2);
							Иначе
								ПроцентНаценки = 0;
							КонецЕсли;
							
							Если ПорогСрабатывания = 0
								ИЛИ СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки] = 0
								ИЛИ ?(ПроцентИзменения > 0,
											ПроцентИзменения >= ПорогСрабатывания,
											-ПроцентИзменения >= ПорогСрабатывания) Тогда
								
								СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] = ЗначениеЦены;
								
								Если СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки] <> 0 Тогда
									СтрокаТаблицыЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] = ПроцентИзменения;
								Иначе
									СтрокаТаблицыЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] = 0;
								КонецЕсли;
								
								СтрокаТаблицыЦен["ПроцентНаценки" + ВидЦены.ИмяКолонки] = ПроцентНаценки;
								
							Иначе
								СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] = СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки];
								СтрокаТаблицыЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] = 0;
							КонецЕсли;
							
							СтрокаТаблицыЦен["ИзмененаВручную" + ВидЦены.ИмяКолонки] = Ложь;
							
						Исключение
							
							Если ЗначениеЗаполнено(СтрокаТаблицыЦен.Характеристика) Тогда
								ТекстСообщения = НСтр("ru='Для номенклатуры ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не рассчитана цена по виду цен ""%ВидЦены%"" по причине: %ОписаниеОшибки%'");
							Иначе
								ТекстСообщения = НСтр("ru='Для номенклатуры ""%Номенклатура%"" не рассчитана цена по виду цен ""%ВидЦены%"" по причине: %ОписаниеОшибки%'");
							КонецЕсли;
							
							ТекстСообщения = СтрЗаменить(
												ТекстСообщения,
												"%ВидЦены%",
												ВидЦены.Ссылка);
							
							ТекстСообщения = СтрЗаменить(
												ТекстСообщения,
												"%Номенклатура%",
												СтрокаТаблицыЦен.Номенклатура);
							
							ТекстСообщения = СтрЗаменить(
												ТекстСообщения,
												"%Характеристика%",
												СтрокаТаблицыЦен.Характеристика);
							
							ТекстСообщения = СтрЗаменить(
												ТекстСообщения,
												"%ОписаниеОшибки%",
												КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								ТекстСообщения,
								Объект.Ссылка,
								"ДеревоЦен");
							
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьДатуДокумента(ДатаДокумента, НомерВПределахДня)
	
	Возврат НачалоДня(ДатаДокумента) + НомерВПределахДня - 1;
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьНомерВПределахДня(ДатаДокумента, Ссылка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(УстановкаЦенНоменклатуры.Дата) КАК Дата
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
	|ГДЕ
	|	УстановкаЦенНоменклатуры.Ссылка <> &Ссылка
	|	И УстановкаЦенНоменклатуры.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаДокумента, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаДокумента, ДЕНЬ)");
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() И Выборка.Дата <> Null Тогда
		Возврат Выборка.Дата - НачалоДня(ДатаДокумента) + 2;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

// Рассчитывает цены в таблице цен.
//
// Параметры:
//  ПараметрыРасчета - Структура
//
&НаСервере
Процедура РассчитатьЦены(ПараметрыРасчета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивВидовЦен = Новый Массив;
	Для Каждого ВидЦены Из ПараметрыРасчета.ВидыЦен Цикл
		МассивВидовЦен.Добавить(НайтиСтрокуВидаЦен(ВидЦены));
	КонецЦикла;
	
	Если НЕ ПараметрыРасчета.ТолькоВыделенныеСтроки Тогда
		
		ТаблицаНоменклатуры = СоздатьПустуюТаблицуНоменклатуры();
		ЗаполнитьТаблицуНоменклатурыПоДеревуЦен(ТаблицаНоменклатуры);
		
	Иначе
		
		ТаблицаНоменклатуры = СоздатьПустуюТаблицуНоменклатуры();
		
		Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
			
			СтрокаТаблицыЦен           = ДеревоЦен.НайтиПоИдентификатору(ВыделеннаяСтрока);
			НоваяСтрока                = ТаблицаНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура   = СтрокаТаблицыЦен.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаТаблицыЦен.Характеристика;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыРасчета.ЗагрузкаСтарыхЦен Тогда
		ЗагрузитьЗначенияБазовыхЦен(
			ТаблицаНоменклатуры,
			МассивВидовЦен,
			ПараметрыРасчета.ДатаСтарыхЦен,
			ПараметрыРасчета.ПроцентИзмененияЦены,
			ПараметрыРасчета.ПрименятьОкругление);
	КонецЕсли;
	
	Если ПараметрыРасчета.ОкруглениеРучныхЦен Тогда
		ПрименитьОкруглениеКРучнымЦенам(ТаблицаНоменклатуры, МассивВидовЦен);
	КонецЕсли;
	
	Если НЕ ПараметрыРасчета.ЗагрузкаСтарыхЦен
		И НЕ ПараметрыРасчета.ОкруглениеРучныхЦен 
		ИЛИ РассчитыватьАвтоматически Тогда
		
		ЗагрузитьЗначенияБазовыхЦен(ТаблицаНоменклатуры, Неопределено);
		
		Если НЕ ПараметрыРасчета.ЗагрузкаСтарыхЦен И НЕ ПараметрыРасчета.ОкруглениеРучныхЦен Тогда 
			ВычислитьЦеныПоДаннымИБ(ТаблицаНоменклатуры, МассивВидовЦен, ПараметрыРасчета.ТолькоНезаполненные);
		КонецЕсли;
		
		РассчитатьВычисляемыеЦены(
			ТаблицаНоменклатуры,
			?(НЕ ПараметрыРасчета.ЗагрузкаСтарыхЦен, МассивВидовЦен, Неопределено),
			ПараметрыРасчета.ТолькоНезаполненные);
	Иначе
		Если ОтображатьВлияющиеЦены Тогда
			СтрокиВидовЦен = ВыбранныеСтрокиТаблицыВидовЦен();
			СтрокиДерева = ДеревоЦен.ПолучитьЭлементы();
			
			Для Каждого ВидЦены Из СтрокиВидовЦен Цикл		
				Если ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоДругимВидамЦен Тогда
					Если ПараметрыРасчета.ТолькоВыделенныеСтроки Тогда
						Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
							СтрокаДерева = ДеревоЦен.НайтиПоИдентификатору(ВыделеннаяСтрока);
							СтруктураЦеноваяГруппа = Новый Структура("ЦеноваяГруппа", СтрокаДерева.ЦеноваяГруппа);
							ПересчитатьПроцентНаценкиВКолонке(СтрокаДерева, ВидЦены, СтруктураЦеноваяГруппа);
						КонецЦикла;
					Иначе
						Для Каждого СтрокаДерева Из СтрокиДерева Цикл
							СтруктураЦеноваяГруппа = Новый Структура("ЦеноваяГруппа", СтрокаДерева.ЦеноваяГруппа);
							ПересчитатьПроцентНаценкиВКолонке(СтрокаДерева, ВидЦены, СтруктураЦеноваяГруппа);
							ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
							Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
								ПересчитатьПроцентНаценкиВКолонке(СтрокаДерева, ВидЦены, СтруктураЦеноваяГруппа);
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет расчет цен в строке по идентификатору.
//
// Параметры:
//  ИдентификаторСтроки - Число
//  ЗагружатьЦеныИзИБ - Булево - Указывает на необходимость загрузки цен из информационной базы.
//  ИзмененноеПоле - Строка - поле, в котором изменена цена.
//
&НаСервере
Процедура РассчитатьЦеныПоИдентификаторуСтроки(
			ИдентификаторСтроки,
			ЗагружатьЦеныИзИБ = Ложь,
			ИзмененноеПоле = Неопределено)
	
	СтрокаТаблицыЦен = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ТаблицаНоменклатуры = СоздатьПустуюТаблицуНоменклатуры();
	НоваяСтрока = ТаблицаНоменклатуры.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыЦен, "Номенклатура, Характеристика");
	НоваяСтрока = СтрокаТаблицыЦен.ПолучитьИдентификатор();
	
	ЭлементыХарактеристики = СтрокаТаблицыЦен.ПолучитьЭлементы();
	
	Если ИспользоватьХарактеристикиНоменклатуры И ЭлементыХарактеристики.Количество() > 0 Тогда
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементХарактеристика, "Номенклатура, Характеристика");
			НоваяСтрока = ЭлементХарактеристика.ПолучитьИдентификатор();
		КонецЦикла;
	КонецЕсли;
	
	Если РассчитыватьАвтоматически Тогда
		
		Если ЗагружатьЦеныИзИБ Тогда
			ЗагрузитьЗначенияБазовыхЦен(ТаблицаНоменклатуры, Неопределено);
			ВычислитьЦеныПоДаннымИБ(ТаблицаНоменклатуры);
		КонецЕсли;
		
		РассчитатьВычисляемыеЦены(ТаблицаНоменклатуры,,,ИзмененноеПоле);
		
	Иначе
		
		УстановитьПризнакРучногоИзмененияВычисляемыхЦен(ТаблицаНоменклатуры, ИзмененноеПоле);
		
	КонецЕсли;
	Если ОтображатьВлияющиеЦены 
		И ЗначениеЗаполнено(ИзмененноеПоле) Тогда
		ПолеДляНаценки = СтрЗаменить(ИзмененноеПоле, "Упаковка", "");
		СтрокаТаблицыЦен = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
		ПересчитатьПроцентНаценкиВСтроке(СтрокаТаблицыЦен, ПолеДляНаценки);
		Если ОтображатьВлияющиеЦены
			И ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре Тогда
			ПодчиненныеСтроки = СтрокаТаблицыЦен.ПолучитьЭлементы();
			Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
				ПересчитатьПроцентНаценкиВСтроке(ПодчиненнаяСтрока, ПолеДляНаценки);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует дерево значений с колонками Номенклатура, Характеристика, ИндексКартинки.
//
// Возвращаемое значение:
// ДеревоЗначений
//
&НаСервереБезКонтекста
Функция СоздатьПустоеДеревоНоменклатуры()
	
	ДеревоЗначений = Новый ДеревоЗначений();
	
	ДеревоЗначений.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДеревоЗначений.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ДеревоЗначений.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число"));
	ДеревоЗначений.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.БазовыеЕдиницыИзмерения"));
	ДеревоЗначений.Колонки.Добавить("ЦеноваяГруппа", Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"));
	ДеревоЗначений.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
	
	Возврат ДеревоЗначений;
	
КонецФункции

// Формирует таблицу значений с колонками Номенклатура, Характеристика.
//
// Возвращаемое значение:
// ТаблицаЗначений
//
&НаСервереБезКонтекста
Функция СоздатьПустуюТаблицуНоменклатуры()
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	
	ТаблицаЗначений.Колонки.Добавить("ИдентификаторСтроки", ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповЧисла(10, 0));
	ТаблицаЗначений.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗначений.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Копирует в таблицу значений номенклатуру с характеристикой из дерева цен.
//
// Возвращаемое значение:
// ТаблицаЗначений
//
&НаСервере
Функция СоздатьТаблицуНоменклатурыПоДеревуЦен()
	
	ТаблицаНоменклатуры = СоздатьПустуюТаблицуНоменклатуры();
	
	ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
	
	Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементНоменклатура);
		
		ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
		
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			
			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементХарактеристика);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВидаЦеныПоИмениПоля(ВыбранныеЦены, Знач ИзмененноеПоле)
	
	СтрокаИзмененныйВидЦены = Неопределено;
	Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
		Если СтрокаВидЦены.ИмяКолонки = ИзмененноеПоле
			ИЛИ "Упаковка" + СтрокаВидЦены.ИмяКолонки = ИзмененноеПоле
			ИЛИ "СтараяЦена" + СтрокаВидЦены.ИмяКолонки = ИзмененноеПоле
			ИЛИ "ПроцентИзменения" + СтрокаВидЦены.ИмяКолонки = ИзмененноеПоле Тогда
			СтрокаИзмененныйВидЦены = СтрокаВидЦены;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаИзмененныйВидЦены;
	
КонецФункции

// Возвращает строку для пересчета цен из упаковки в упаковку.
//
// Параметры:
// СтрокаТаблицыЦен       - ДанныеФормыЭлементКоллекции - строка таблицы.
// ВидЦеныИсточник        - СправочникСсылка.ВидыЦен - вид цен, из которого необходимо пересчитать.
// ВидЦеныНазначение      - СправочникСсылка.ВидыЦен - вид цен, в который необходимо пересчитать.
// СоответствиеУпаковок   - Соответствие - таблица, в которой можно найти коэффициент упаковки.
//
// Возвращаемое значение:
// Строка, выражение для пересчета цены из упаковки в упаковку.
//
&НаСервере
Функция СтрокаПересчетаУпаковок(СтрокаТаблицыЦен, ВидЦеныИсточник, ВидЦеныНазначение, СоответствиеУпаковок)
	
	СтрокаПересчетаУпаковок = "";
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		
		// Определение коэффициента упаковки текущей цены.
		УпаковкаЦеныИсточника = СтрокаТаблицыЦен["Упаковка" + ВидЦеныИсточник.ИмяКолонки];
		КоэффициентУпаковкиЦеныИсточника = 1;
		Если ЗначениеЗаполнено(УпаковкаЦеныИсточника) Тогда
			
			Если СоответствиеУпаковок = Неопределено Тогда
				КоэффициентУпаковкиЦеныНазначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УпаковкаЦеныИсточника, "Коэффициент");
			Иначе
				НайденноеЗначение = СоответствиеУпаковок.Получить(УпаковкаЦеныИсточника);
				Если НайденноеЗначение = Неопределено Тогда
					КоэффициентУпаковкиЦеныИсточника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УпаковкаЦеныИсточника, "Коэффициент");
				Иначе
					КоэффициентУпаковкиЦеныИсточника = НайденноеЗначение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Определение коэффициента упаковки влияющей цены.
		УпаковкаЦеныНазначения = СтрокаТаблицыЦен["Упаковка" + ВидЦеныНазначение.ИмяКолонки];
		КоэффициентУпаковкиЦеныНазначения = 1;
		Если ЗначениеЗаполнено(УпаковкаЦеныНазначения) Тогда
			
			Если СоответствиеУпаковок = Неопределено Тогда
				КоэффициентУпаковкиЦеныНазначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УпаковкаЦеныНазначения, "Коэффициент");
			Иначе
				НайденноеЗначение = СоответствиеУпаковок.Получить(УпаковкаЦеныНазначения);
				Если НайденноеЗначение = Неопределено Тогда
					КоэффициентУпаковкиЦеныНазначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УпаковкаЦеныНазначения, "Коэффициент");
				Иначе
					КоэффициентУпаковкиЦеныНазначения = НайденноеЗначение;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоэффициентУпаковкиЦеныИсточника <> КоэффициентУпаковкиЦеныНазначения Тогда
			СтрокаПересчетаУпаковок = "*" + Строка(Формат(КоэффициентУпаковкиЦеныНазначения, "ЧРД=.; ЧН=0; ЧГ=0"))
										+ "/" + Строка(Формат(КоэффициентУпаковкиЦеныИсточника, "ЧРД=.; ЧН=0; ЧГ=0"));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПересчетаУпаковок;
	
КонецФункции

// Устанавливает признак автозаполнения цен характеристик по номенклатуре.
//
// Параметры:
// НовоеЗначение - Булево
//
&НаКлиенте
Процедура УстановитьАвтоматическиДобавлятьХарактеристикиНаКлиенте(НовоеЗначение)
	
	АвтоматическиДобавлятьХарактеристики = НовоеЗначение;
	Элементы.ДеревоЦенПереключательАвтоматическиДобавлятьХарактеристики.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Изменяет доступность элементов в соответствии с признаком согласованности документа.
//
&НаСервере
Процедура УстановитьДоступностьЭлементовСервер()
	
	ТолькоПросмотрЭлементов = Объект.Согласован;
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("Ответственный");
	МассивЭлементов.Добавить("Номер");
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("ВыбранныеЦены");
	МассивЭлементов.Добавить("ДеревоЦен");
	
	Для Каждого ИмяЭлемента Из МассивЭлементов Цикл
		
		Элементы[ИмяЭлемента].ТолькоПросмотр = ТолькоПросмотрЭлементов;
		
	КонецЦикла;
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ДеревоЦенОткрытьПодбор");
	МассивЭлементов.Добавить("ДеревоЦенДобавитьТоварыПоЦеновойГруппе");
	МассивЭлементов.Добавить("ДеревоЦенДобавитьТоварыПоОтбору");
	МассивЭлементов.Добавить("ДеревоЦенДобавитьНоменклатуру");
	МассивЭлементов.Добавить("ДеревоЦенДобавитьХарактеристику");
	МассивЭлементов.Добавить("ДеревоЦенЗагрузитьСтарыеЦены");
	МассивЭлементов.Добавить("ДеревоЦенРассчитать");
	МассивЭлементов.Добавить("ДеревоЦенОкруглитьРучныеЦены");
	МассивЭлементов.Добавить("ДеревоЦенИзменитьЦеныНаПроцент");
	МассивЭлементов.Добавить("КонтекстноеМенюДеревоЦенДобавитьХарактеристику");
	МассивЭлементов.Добавить("КонтекстноеМенюДеревоЦенДобавитьНоменклатуру");
	МассивЭлементов.Добавить("ВыбранныеЦеныИсключитьВсеВидыЦен");
	МассивЭлементов.Добавить("ВыбранныеЦеныВыбратьВсеВидыЦен");
	МассивЭлементов.Добавить("ПерезаполнитьПоОснованию");
	МассивЭлементов.Добавить("ДеревоЦенОбновитьТаблицуЦен");
	МассивЭлементов.Добавить("ДеревоЦенЗаполнитьПоОстаткамСУчетомНаценки");
	
	МассивЭлементов.Добавить("ДеревоЦенПоискПоНаименованию");
	МассивЭлементов.Добавить("ДеревоЦенПоискПоШтрихкоду");
	МассивЭлементов.Добавить("ДеревоЦенПоискПоМагнитномуКоду");
	МассивЭлементов.Добавить("ТоварыЗагрузитьДанныеИзТСД");
	
	Для Каждого ИмяЭлемента Из МассивЭлементов Цикл
		Элементы[ИмяЭлемента].Доступность = НЕ ТолькоПросмотрЭлементов;
	КонецЦикла;
	
	Элементы.Изменить.Доступность = ТолькоПросмотрЭлементов;
	
КонецПроцедуры

// Устанавливает признак автозаполнения цен характеристик по номенклатуре.
//
// Параметры:
// НовоеЗначение - Булево
//
&НаКлиенте
Процедура УстановитьЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуреНаКлиенте(НовоеЗначение)
	
	ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре = НовоеЗначение;
	Элементы.ДеревоЦенПереключательЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак автоматического перерасчета цен.
//
// Параметры:
// НовоеЗначение - Булево
//
&НаКлиенте
Процедура УстановитьРассчитыватьАвтоматическиНаКлиенте(НовоеЗначение)
	
	РассчитыватьАвтоматически = НовоеЗначение;
	Элементы.ДеревоЦенПереключательРассчитыватьАвтоматически.Пометка = НовоеЗначение;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер()
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоместитьВидыЦенВТабличнуюЧасть(Объект);
		ПоместитьЦеныВТабличнуюЧасть(Объект, Ложь);
	КонецЕсли;
	ЦенообразованиеПереопределяемый.ОбработкаЗаполненияУстановкиЦенНоменклатуры(Объект, Объект.ДокументОснование, Истина);
	// Таблица настроек СКД для видов цен с алгоритмом расчета цены "Заполнять по данным ИБ".
	ТаблицаНастройкиКомпоновкиДанных = ЗагрузитьТаблицуНастройкиКомпоновкиДанных();
	ИнициализироватьВыбранныеЦены(ТаблицаНастройкиКомпоновкиДанных);
	ЗаполнитьДокумент();
	ПереформироватьТаблицуЦен(Ложь);
	
КонецПроцедуры

// Процедура заполняет товары из подбора.
// Параметры: 
//  	ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение.АдресТоваровВХранилище) Тогда
		ДобавитьТоварыПоОтборуНаСервере(ВыбранноеЗначение.АдресТоваровВХранилище);
	КонецЕсли;
	
КонецПроцедуры


// Устанавливает признак автоматического перерасчета цен.
//
// Параметры:
// НовоеЗначение - Булево
//
&НаСервере
Процедура УстановитьРассчитыватьАвтоматически(НовоеЗначение)
	
	РассчитыватьАвтоматически = НовоеЗначение;
	Элементы.ДеревоЦенПереключательРассчитыватьАвтоматически.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак автозаполнения цен характеристик по номенклатуре.
//
// Параметры:
// НовоеЗначение - Булево
//
&НаСервере
Процедура УстановитьЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре(НовоеЗначение)
	
	ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре = НовоеЗначение;
	Элементы.ДеревоЦенПереключательЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак фиксации колонок "Номенклатура" и "Характеристика" слева.
//
// Параметры:
// НовоеЗначение - Булево
//
&НаСервере
Процедура ЗафиксироватьКолонкуНоменклатура(НовоеЗначение)
	
	ЗафиксироватьКолонкуНоменклатура = НовоеЗначение;
	
	Если ЗафиксироватьКолонкуНоменклатура Тогда
		Элементы.ДеревоЦенНоменклатура.ФиксацияВТаблице 	= ФиксацияВТаблице.Лево;
		Элементы.ДеревоЦенХарактеристика.ФиксацияВТаблице 	= ФиксацияВТаблице.Лево;
	Иначе
		Элементы.ДеревоЦенНоменклатура.ФиксацияВТаблице 	= ФиксацияВТаблице.Нет;
		Элементы.ДеревоЦенХарактеристика.ФиксацияВТаблице 	= ФиксацияВТаблице.Нет;
	КонецЕсли;
	
	Элементы.ДеревоЦенПереключательЗафиксироватьКолонкуНоменклатура.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак автозаполнения цен характеристик по номенклатуре.
//
// Параметры:
// НовоеЗначение - Булево
//
&НаСервере
Процедура УстановитьАвтоматическиДобавлятьХарактеристики(НовоеЗначение)
	
	Если НовоеЗначение = Неопределено Тогда
		НовоеЗначение = Истина;
	КонецЕсли;
	
	АвтоматическиДобавлятьХарактеристики = НовоеЗначение;
	Элементы.ДеревоЦенПереключательАвтоматическиДобавлятьХарактеристики.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Заполняет флаг Выбрана в таблице выбранных цен.
//
&НаСервере
Процедура ИнициализироватьВыбранныеЦены(ТаблицаНастройкиКомпоновкиДанных)
	
	ВыбранныеЦены.Очистить();
	
	Таблица = ЗагрузитьСправочникВидовЦен(ТаблицаНастройкиКомпоновкиДанных);
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		НоваяСтрока = ВыбранныеЦены.Добавить();
		
		НоваяСтрока.АлгоритмРасчетаЦены          = СтрокаТЧ.АлгоритмРасчетаЦены;
		НоваяСтрока.Идентификатор                = СтрокаТЧ.Идентификатор;
		НоваяСтрока.ИмяКолонки                   = СтрокаТЧ.ИмяКолонки;
		НоваяСтрока.Наименование                 = СтрокаТЧ.Наименование;
		НоваяСтрока.ОкруглятьВБольшуюСторону     = СтрокаТЧ.ОкруглятьВБольшуюСторону;
		НоваяСтрока.ПорогСрабатывания            = СтрокаТЧ.ПорогСрабатывания;
		НоваяСтрока.РеквизитДопУпорядочивания    = СтрокаТЧ.РеквизитДопУпорядочивания;
		НоваяСтрока.СпособЗаданияЦены            = СтрокаТЧ.СпособЗаданияЦены;
		НоваяСтрока.Ссылка                       = СтрокаТЧ.Ссылка;
		НоваяСтрока.Уровень                      = СтрокаТЧ.Уровень;
		НоваяСтрока.ЗапрещенныйВидЦены           = СтрокаТЧ.ЗапрещенныйВидЦены;
		
		// Служебные поля для работы с настройками СКД.
		НоваяСтрока.АдресСхемыКомпоновкиДанных   = СтрокаТЧ.АдресСхемыКомпоновкиДанных;
		НоваяСтрока.НайденыОбязательныеПараметры = СтрокаТЧ.НайденыОбязательныеПараметры;
		НоваяСтрока.Параметры                    = СтрокаТЧ.Параметры;
		
		НоваяСтрока.ПорогиСрабатывания.Загрузить(СтрокаТЧ.ПорогиСрабатывания);
		НоваяСтрока.ПравилаОкругленияЦены.Загрузить(СтрокаТЧ.ПравилаОкругленияЦены);
		НоваяСтрока.ПравилаОкругленияЦены.Сортировать("НижняяГраницаДиапазонаЦен");
		НоваяСтрока.ЦеновыеГруппы.Загрузить(СтрокаТЧ.ЦеновыеГруппы);
		НоваяСтрока.ВлияющиеВидыЦен.Загрузить(СтрокаТЧ.ВлияющиеВидыЦен);
		Для Каждого ЭлементСписка Из СтрокаТЧ.ВлияющиеЦены Цикл
			НоваяСтрока.ВлияющиеЦены.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		Для Каждого ЭлементСписка Из СтрокаТЧ.НепосредственноВлияющиеЦены Цикл
			НоваяСтрока.НепосредственноВлияющиеЦены.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		Для Каждого ЭлементСписка Из СтрокаТЧ.ЗависимыеЦены Цикл
			НоваяСтрока.ЗависимыеЦены.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
	КонецЦикла;
	ВыбранныеЦены.Сортировать("Уровень");
	
	Для Каждого СтрокаТЧ Из Объект.ВидыЦен Цикл
		СтрокаВидаЦен = НайтиСтрокуВидаЦен(СтрокаТЧ.ВидЦены);
		СтрокаВидаЦен.Выбрана = Истина;
	КонецЦикла;
	
	// Заполнить флаги "Влияет" и "Зависит".
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		ВидЦены.Зависит = Ложь;
		ВидЦены.Влияет  = Ложь;
	КонецЦикла;
	
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		
		Если ВидЦены.Выбрана Тогда
			
			Для Каждого ЗависимаяЦена Из ВидЦены.ЗависимыеЦены Цикл
				СтрокаЗависимойЦены         = НайтиСтрокуВидаЦен(ЗависимаяЦена.Значение);
				СтрокаЗависимойЦены.Зависит = НЕ СтрокаЗависимойЦены.Выбрана;
			КонецЦикла;
			
			Для Каждого ВлияющаяЦена Из ВидЦены.ВлияющиеЦены Цикл
				СтрокаВыбраннойЦены        = НайтиСтрокуВидаЦен(ВлияющаяЦена.Значение);
				СтрокаВыбраннойЦены.Влияет = НЕ СтрокаВыбраннойЦены.Выбрана;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьВсеЗависимыеЦены()
	
	Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
		ТекСтрока.Зависит  = Ложь;
	КонецЦикла;
	
	Заполнять = Истина;
	Пока Заполнять Цикл
		
		Заполнять = Ложь;
		Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
			
			Если ТекСтрока.Выбрана Тогда 
				
				Для Каждого ЗависимаяЦена Из ТекСтрока.ЗависимыеЦены Цикл
					СтрокаЗависимойЦены = НайтиСтрокуВидаЦен(ЗависимаяЦена.Значение);
					Если НЕ СтрокаЗависимойЦены.Выбрана И НЕ СтрокаЗависимойЦены.ЗапрещенныйВидЦены Тогда
						СтрокаЗависимойЦены.Выбрана = Истина;
						ВыбранныеЦеныИзменены = Истина;
						Заполнять = Истина;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьВсеВлияющиеЦены()
	
	Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
		ТекСтрока.Влияет  = Ложь;
	КонецЦикла;
	
	Заполнять = Истина;
	Пока Заполнять Цикл
		
		Заполнять = Ложь;
		Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
			
			Если ТекСтрока.Выбрана Тогда 
				
				Для Каждого ВлияющаяЦена Из ТекСтрока.ВлияющиеЦены Цикл
					СтрокаВыбраннойЦены = НайтиСтрокуВидаЦен(ВлияющаяЦена.Значение);
					Если НЕ СтрокаВыбраннойЦены.Выбрана И НЕ СтрокаВыбраннойЦены.ЗапрещенныйВидЦены Тогда
						СтрокаВыбраннойЦены.Выбрана = Истина;
						ВыбранныеЦеныИзменены = Истина;
						Заполнять = Истина;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗависимыеОтВидаЦеныВидыЦен(СтрокаВидЦены)
	
	ЗависимыеВидыЦен = Новый Массив;
	Для Каждого ЗависимаяЦена Из СтрокаВидЦены.ЗависимыеЦены Цикл
		СтрокаЗависимойЦены = НайтиСтрокуВидаЦен(ЗависимаяЦена.Значение);
		Если СтрокаЗависимойЦены.Выбрана Тогда
			ЗависимыеВидыЦен.Добавить(СтрокаЗависимойЦены);
		КонецЕсли;
	КонецЦикла;
	
	Заполнять = Истина;
	Пока Заполнять Цикл
		
		Заполнять = Ложь;
		Для Каждого ТекСтрока Из ЗависимыеВидыЦен Цикл
			
			Для Каждого ЗависимаяЦена Из ТекСтрока.ЗависимыеЦены Цикл
				СтрокаЗависимойЦены = НайтиСтрокуВидаЦен(ЗависимаяЦена.Значение);
				Если СтрокаЗависимойЦены.Выбрана И ЗависимыеВидыЦен.Найти(СтрокаЗависимойЦены) = Неопределено Тогда
					ЗависимыеВидыЦен.Добавить(СтрокаЗависимойЦены);
					Заполнять = Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЗависимыеВидыЦен;
	
КонецФункции

// Осуществляет поиск влияющих и зависящих видов цен в таблице видов цен.
//
// Параметры:
// ТаблицаВидовЦен - ТаблицаЗначений - таблица, в которой осуществляется поиск.
// ТекущаяЦена - Ссылка на вид цен, для которого осуществляется поиск.
// Стек - Массив - Массив для кэширования.
//
// Возвращаемое значение:
// Число
//
&НаСервере
Функция НайтиЗависящиеИВлияющиеЦены(ТаблицаВидовЦен, ТекущаяЦена, Стек = Неопределено)
	
	СтрокаСправочника = ТаблицаВидовЦен.Найти(ТекущаяЦена, "Ссылка");
	Уровень= 0;
	НепосредственнаяЦена = Ложь;
	Если Стек = Неопределено Тогда
		НепосредственнаяЦена = Истина;
	КонецЕсли;
	
	Для Каждого БазоваяЦена Из СтрокаСправочника.ВлияющиеВидыЦен Цикл
		
		СтрокаБазовойЦены  = ТаблицаВидовЦен.Найти(БазоваяЦена.ВлияющийВидЦен, "Ссылка");
		Если СтрокаБазовойЦены = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'В видах цен не найдена влияющая цена для вида цен ""%1""'")
								+ Символы.ПС + НСтр("ru = 'Следует исправить формулу расчета в виде цен ""%1""'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущаяЦена);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;

		УровеньБазовойЦены = СтрокаБазовойЦены.Уровень;
		
		Если Стек = Неопределено Тогда
			Стек = Новый Массив;
		КонецЕсли;
		
		Стек.Добавить(СтрокаСправочника);
			УровеньБазовойЦены = НайтиЗависящиеИВлияющиеЦены(ТаблицаВидовЦен, БазоваяЦена.ВлияющийВидЦен, Стек);
		
		Если УровеньБазовойЦены > Уровень Тогда
			Уровень = УровеньБазовойЦены;
		КонецЕсли;
		
		Для Каждого ЭлементСтека Из Стек Цикл
			
			Если ЭлементСтека.ВлияющиеЦены.НайтиПоЗначению(СтрокаБазовойЦены.Ссылка) = Неопределено Тогда
				ЭлементСписка = ЭлементСтека.ВлияющиеЦены.Добавить(СтрокаБазовойЦены.Ссылка);
				Если СтрокаБазовойЦены.ЗапрещенныйВидЦены Тогда
					ЭлементСписка.Представление = НСтр("ru = '<объект запрещен к просмотру>'");
				КонецЕсли;
			КонецЕсли;
			
			Если НепосредственнаяЦена Тогда
				Если ЭлементСтека.НепосредственноВлияющиеЦены.НайтиПоЗначению(СтрокаБазовойЦены.Ссылка) = Неопределено Тогда
					ЭлементСписка = ЭлементСтека.НепосредственноВлияющиеЦены.Добавить(СтрокаБазовойЦены.Ссылка);
					Если СтрокаБазовойЦены.ЗапрещенныйВидЦены Тогда
						ЭлементСписка.Представление = НСтр("ru = '<объект запрещен к просмотру>'");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаБазовойЦены.ЗависимыеЦены.НайтиПоЗначению(ЭлементСтека.Ссылка) = Неопределено Тогда
				ЭлементСписка = СтрокаБазовойЦены.ЗависимыеЦены.Добавить(ЭлементСтека.Ссылка);
				
				СтрокаСтека = ТаблицаВидовЦен.Найти(ЭлементСтека.Ссылка, "Ссылка");
				Если НЕ СтрокаСтека = Неопределено И СтрокаСтека.ЗапрещенныйВидЦены Тогда
					ЭлементСписка.Представление = НСтр("ru = '<объект запрещен к просмотру>'");
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Стек.Удалить(Стек.Количество() - 1);
		
	КонецЦикла;
	
	Уровень                   = Уровень + 1;
	СтрокаСправочника.Уровень = Уровень;
	
	Возврат Уровень;
	
КонецФункции

&НаСервере
Процедура ОбновитьСтарыеЦеныНоменклатуры()
	
	Если ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = Неопределено Тогда
		ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = ТаблицаСоответствия();
	КонецЕсли;
	
	// Загрузка старых цен и процента изменения.
	ТаблицаЗначений = ПустаяТаблицаТовары();
	Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
		
		Если СтрокаВидЦены.Выбрана ИЛИ СтрокаВидЦены.Влияет Тогда
			
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			ИмяКолонкиУпаковка = "Упаковка" + СтрокаВидЦены.ИмяКолонки;
			
			Для Каждого СтрокаТЗ Из ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров Цикл
				
				СтрокаДереваЦен = СтрокаТЗ.СтрокаДереваЦен;
				
				НоваяСтрока = ТаблицаЗначений.Добавить();
				НоваяСтрока.Номенклатура   = СтрокаДереваЦен.Номенклатура;
				НоваяСтрока.Характеристика = СтрокаДереваЦен.Характеристика;
				НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
				НоваяСтрока.Цена           = СтрокаДереваЦен[ИмяКолонки];
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					НоваяСтрока.Упаковка   = СтрокаДереваЦен[ИмяКолонкиУпаковка];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагрузитьСтарыеЦеныНоменклатуры(ТаблицаЗначений);
	
КонецПроцедуры

&НаСервере
// Формирует уникальное имя колонки таблицы.
//
Функция ИмяКолонкиПоВидуЦены(ВидЦены)
	
	Значение = СоответствиеВидовЦенИменамКолонокТаблицыТоваров.Получить(ВидЦены);
	Если Значение = Неопределено Тогда
		Значение = "ВидЦены" + СтрЗаменить(ВидЦены.УникальныйИдентификатор(), "-", "");
		СоответствиеВидовЦенИменамКолонокТаблицыТоваров.Вставить(ВидЦены, Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Помещает последние курсы валют во временное хранилище.
//
&НаСервере
Процедура ЗагрузитьКурсыВалют()
	
	Если ИспользуютсяВалюты Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
		|	КурсыВалютСрезПоследних.Курс      КАК Курс,
		|	КурсыВалютСрезПоследних.Кратность КАК Кратность
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютСрезПоследних";
		
		Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		АдресХранилищаКурсовВалют = ПоместитьВоВременноеХранилище(Выгрузка, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает таблицу курсов валют из временного хранилища.
//
// Возвращаемое значение:
// ТаблицаЗначений
//
&НаСервере
Функция ПолучитьКурсыВалют()
	Если КурсыВалют = Неопределено Тогда
		КурсыВалют = ПолучитьИзВременногоХранилища(АдресХранилищаКурсовВалют);
	КонецЕсли;
	
	Возврат КурсыВалют;
	
КонецФункции

// Осуществляет поиск курса валюты в таблице курсов валют.
//
// Параметры:
// Валюта - СправочникСсылка.Валюты - ссылка на валюту, курсы которой необходимо получить.
//
// Возвращаемое значение:
// СтрокаТаблицыЗначений - если курс найден, Неопределено в противном случае.
//
&НаСервере
Функция НайтиСтрокуВалюты(Валюта)
	
	Строки = ПолучитьКурсыВалют().НайтиСтроки(Новый Структура("Валюта", Валюта));
	
	Если Строки.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru='НЕ установлен курс валюты: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Валюта);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
		
	Иначе
		Возврат Строки[0];
	КонецЕсли;
	
КонецФункции

// Осуществляет пересчет цены из валюты в валюту.
//
// Параметры:
// ВалютаИсточник - СправочникСсылка.Валюты - валюта, из которой необходимо пересчитать.
// ВалютаНазначение - СправочникСсылка.Валюты - валюта, в которую необходимо пересчитать.
// Цена - Число - цена, которую необходимо пересчитать из валюты в валюту.
//
// Возвращаемое значение:
// Цена в новой валюте
//
&НаСервере
Функция ПересчитатьВалюту(ВалютаИсточник, ВалютаНазначение, Цена)
	
	Если ВалютаИсточник <> ВалютаНазначение Тогда
		
		СтрокаВалютыИсточника  = НайтиСтрокуВалюты(ВалютаИсточник);
		СтрокаВалютыНазначения = НайтиСтрокуВалюты(ВалютаНазначение);
		
		Если СтрокаВалютыИсточника <> Неопределено И СтрокаВалютыНазначения <> Неопределено Тогда
			Возврат (Цена * СтрокаВалютыИсточника.Курс * СтрокаВалютыНазначения.Кратность) / (СтрокаВалютыНазначения.Курс * СтрокаВалютыИсточника.Кратность);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции

// Возвращает строку для пересчета цен из валюты в валюту.
//
// Параметры:
// ВалютаИсточник - СправочникСсылка.Валюты - валюта, из которой необходимо пересчитать.
// ВалютаНазначение - СправочникСсылка.Валюты - валюта, в которую необходимо пересчитать.
//
// Возвращаемое значение:
// Строка, выражение для пересчета цены из валюты в валюту.
//
&НаСервере
Функция СтрокаПересчетаВалюты(ВалютаИсточник, ВалютаНазначение)
	
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьЗаполненностьОбязательныхПараметровСхемыКомпоновкиДанных(
			ВыбранныеЦены,
			АдресХранилищаНастройкиКомпоновкиДанных,
			АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен)
	
	Ошибки = Новый Массив;
	
	РазрешенныеИмена = ИменаРазрешенныхПараметров();
	
	ПараметрыСхемКомпоновкиДанныхВидовЦен = ПолучитьИзВременногоХранилища(АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен);
	ТаблицаНастройкиКомпоновкиДанных      = ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновкиДанных);
	
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Найти(ВидЦены, "ВидЦены");
		Если НайденнаяСтрока = Неопределено Тогда
			Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'НЕ заполнены обязательные параметры для вида цены ""%1""'"),
						Строка(ВидЦены));
			Ошибки.Добавить(Новый Структура("ВидЦены, Описание", ВидЦены, Описание));
		Иначе
			
			НайденныеСтроки = ПараметрыСхемКомпоновкиДанныхВидовЦен.НайтиСтроки(Новый Структура("ВидЦены", ВидЦены));
			Для Каждого ПараметрДанных Из НайденныеСтроки Цикл
				Если НЕ ЗначениеЗаполнено(ПараметрДанных.Значение)
					И РазрешенныеИмена.Найти(ПараметрДанных.Имя) = Неопределено Тогда
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'НЕ заполнено значение параметра ""%1"" для вида цены ""%2""'"),
								ПараметрДанных.Заголовок,
								Строка(ВидЦены));
					Ошибки.Добавить(Новый Структура("ВидЦены, Описание", ВидЦены, Описание));
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ошибки;
	
КонецФункции

&НаСервере
Функция ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанныхНаСервере(СообщатьПользователюОбОшибках = Истина)
	
	ВидыЦен = Новый Массив;
	Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
		Если СтрокаВидЦены.Выбрана И СтрокаВидЦены.НайденыОбязательныеПараметры Тогда
			ВидыЦен.Добавить(СтрокаВидЦены.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Ошибки = ПроверитьЗаполненностьОбязательныхПараметровСхемыКомпоновкиДанных(
				ВидыЦен,
				АдресХранилищаНастройкиКомпоновкиДанных,
				АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен);
	Если СообщатьПользователюОбОшибках Тогда
		Для Каждого СтруктураОшибки Из Ошибки Цикл
			СтрокаВидЦены = НайтиСтрокуВидаЦен(СтруктураОшибки.ВидЦены);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтруктураОшибки.Описание,
				Объект.Ссылка,
				"ВыбранныеЦены[" + ВыбранныеЦены.Индекс(СтрокаВидЦены) + "].Параметры");
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ошибки.Количество() = 0;
	
КонецФункции

// Добавляет колонку на форму
//
// Параметры:
// Имя - Строка - имя колонки на форме.
// Заголовок - Строка - заголовок колонки на форме.
// ОбработчикПриИзменении - Строка - путь к обработчику поля ПриИзменении().
// ОбработчикНачалоВыбора - Строка - путь к обработчику поля НачалоВыбора().
// ЦветФона - Цвет - цвет фона поля.
// ЦветФонаЗаголовка - Цвет - цвет фона заголовка поля.
//
// Возвращаемое значение:
// ПолеФормы
//
&НаСервере
Функция ДобавитьПолеФормы(СвойстваПоля)
	
	Если СвойстваПоля.Родитель = Неопределено Тогда
		РодительЭлемента = Элементы.ДеревоЦен;
	Иначе
		РодительЭлемента = СвойстваПоля.Родитель;
	КонецЕсли;
	НовоеПоле                     = Элементы.Добавить("ДеревоЦен" + СвойстваПоля.Имя, Тип("ПолеФормы"), РодительЭлемента);
	НовоеПоле.ПутьКДанным         = ?(ЗначениеЗаполнено(СвойстваПоля.ПутьКДанным), СвойстваПоля.ПутьКДанным, "ДеревоЦен." + СвойстваПоля.Имя);
	НовоеПоле.Заголовок           = ?(ЗначениеЗаполнено(СвойстваПоля.Заголовок), СвойстваПоля.Заголовок, СвойстваПоля.Имя);
	НовоеПоле.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	НовоеПоле.Вид                 = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ТолькоПросмотр      = СвойстваПоля.ТолькоПросмотрПоля;
	НовоеПоле.Ширина              = СвойстваПоля.ШиринаПоля;
	
	Если СвойстваПоля.СвязиПараметровВыбора <> Неопределено Тогда
		НовоеПоле.СвязиПараметровВыбора = СвойстваПоля.СвязиПараметровВыбора;
	КонецЕсли;
	
	Если СвойстваПоля.ЦветФонаЗаголовка <> Неопределено Тогда
		НовоеПоле.ЦветФонаЗаголовка = СвойстваПоля.ЦветФонаЗаголовка;
	КонецЕсли;
	
	Если СвойстваПоля.ЦветФона <> Неопределено Тогда
		НовоеПоле.ЦветФона = СвойстваПоля.ЦветФона;
	КонецЕсли;
		
	Если СвойстваПоля.КартинкаШапки <> Неопределено Тогда
		НовоеПоле.КартинкаШапки = СвойстваПоля.КартинкаШапки;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СвойстваПоля.ОбработчикПриИзменении) Тогда
		НовоеПоле.УстановитьДействие("ПриИзменении", СвойстваПоля.ОбработчикПриИзменении);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвойстваПоля.ОбработчикНачалоВыбора) Тогда
		НовоеПоле.УстановитьДействие("НачалоВыбора", СвойстваПоля.ОбработчикНачалоВыбора);
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции

// Добавляет колонку на форму
//
// Параметры:
// Имя - Строка - имя колонки на форме.
// Заголовок - Строка - заголовок колонки на форме.
// ОбработчикПриИзменении - Строка - путь к обработчику поля ПриИзменении().
// ОбработчикНачалоВыбора - Строка - путь к обработчику поля НачалоВыбора().
// ЦветФона - Цвет - цвет фона поля.
// ЦветФонаЗаголовка - Цвет - цвет фона заголовка поля.
//
// Возвращаемое значение:
// ПолеФормы
//
&НаСервере
Функция ДобавитьГруппуФормы(
			Имя,
			Заголовок,
			ОтображатьВШапке,
			КартинкаШапки,
			ГруппировкаКолонок,
			Родитель = Неопределено)
	
	Если Родитель = Неопределено Тогда
		РодительЭлемента = Элементы.ДеревоЦен;
	Иначе
		РодительЭлемента = Родитель;
	КонецЕсли;
	НоваяГруппа					 = Элементы.Добавить("ДеревоЦен" + Имя, Тип("ГруппаФормы"), РодительЭлемента);
	НоваяГруппа.Заголовок		 = ?(ЗначениеЗаполнено(Заголовок), Заголовок, Имя);
	НоваяГруппа.Вид				 = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппа.Группировка		 = ГруппировкаКолонок;
	НоваяГруппа.ОтображатьВШапке = ОтображатьВШапке;
	
	Если ОтображатьВШапке И КартинкаШапки <> Неопределено Тогда
		НоваяГруппа.КартинкаШапки = КартинкаШапки;
	КонецЕсли;
	
	Возврат НоваяГруппа;
	
КонецФункции

// Добавляет поле набора данных схемы компоновки данных.
//
// Параметры:
// НаборДанных - НаборДанныхОбъектСхемыКомпоновкиДанных
// ИмяПоля - Строка
// ТипЗначения - Произвольный
//
&НаСервере
Процедура ДобавитьПолеНабораДанныхСКД(НаборДанных, ИмяПоля, ТипЗначения)
	
	ПолеНабораДанных             = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораДанных.Поле        = ИмяПоля;
	ПолеНабораДанных.ПутьКДанным = ИмяПоля;
	ПолеНабораДанных.ТипЗначения = Новый ОписаниеТипов(ТипЗначения);
	
КонецПроцедуры

// Добавляет связь наборов данных схемы компоновки данных.
//
// Параметры:
// СКД - СхемаКомпоновкиДанных
// НаборДанныхНоменклатура - НаборДанныхОбъектСхемыКомпоновкиДанных
// РабочийНаборДанных - НаборДанныхОбъектСхемыКомпоновкиДанных
// Поле - Строка
//
&НаСервере
Процедура ДобавитьСвязьНаборовДанныхСКД(СКД, НаборДанныхНоменклатура, РабочийНаборДанных, Поле)
	
	Связь                     = СКД.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = НаборДанныхНоменклатура.Имя;
	Связь.НаборДанныхПриемник = РабочийНаборДанных.Имя;
	Связь.ВыражениеИсточник   = Поле;
	Связь.ВыражениеПриемник   = Поле;
	Связь.Обязательная        = Истина;
	
КонецПроцедуры

// Добавляет выбранное поле схемы компоновки данных.
//
// Параметры:
// ГруппировкаКомпоновкиДанных - ГруппировкаКомпоновкиДанных
// Поле - Строка
//
&НаСервере
Процедура ДобавитьВыбранноеПолеСКД(ГруппировкаКомпоновкиДанных, Поле)
	
	ВыбранноеПоле               = ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных(Поле);
	ВыбранноеПоле.Использование = Истина;
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для расчета цен.
//
// Параметры:
// ЗагрузкаСтарыхЦен - Булево - Указывает на необходимость загрузки старых значений ручных цен.
// ОкруглениеРучныхЦен - Булево - Указывает на необходимость округления ручных цен.
//
// Возвращаемое значение:
// Структура
// Ключи структуры:
// ЗагрузкаСтарыхЦен - Булево
// ОкруглениеРучныхЦен - Булево
// ВидыЦен - Массив
//
&НаКлиенте
Функция ПараметрыОткрытияФормыВыбораПараметровРасчета(ЗагрузкаСтарыхЦен = Ложь, ОкруглениеРучныхЦен = Ложь)
	
	РучныеВидыЦен = Новый Массив();
	
	Для Каждого СтрокаВидыЦены Из ВыбранныеЦены Цикл
		Если СтрокаВидыЦены.Выбрана
			И ((СтрокаВидыЦены.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.ЗадаватьВручную"))
				= (ЗагрузкаСтарыхЦен ИЛИ ОкруглениеРучныхЦен)) Тогда
			РучныеВидыЦен.Добавить(СтрокаВидыЦены.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ТолькоВыделенные = Элементы.ДеревоЦен.ВыделенныеСтроки.Количество() > 1;
	
	ДатаДокумента = ДатаДокумента(Объект.Дата);
	ВыбранныеВидыЦен = ВыбранныеВидыЦен();
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("ЗагрузкаСтарыхЦен", ЗагрузкаСтарыхЦен);
	СтруктураРезультат.Вставить("ОкруглениеРучныхЦен", ОкруглениеРучныхЦен);
	СтруктураРезультат.Вставить("РучныеВидыЦен", РучныеВидыЦен);
	СтруктураРезультат.Вставить("ДатаДокумента", ДатаДокумента);
	СтруктураРезультат.Вставить("ТолькоВыделенные", ТолькоВыделенные);
	СтруктураРезультат.Вставить("ВсеВидыЦен", ВыбранныеВидыЦен);
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Изменяет цены на процент
//
// Параметры:
// ПараметрыРасчета - Структура
//
&НаСервере
Процедура ИзменитьЦеныНаПроцентНаСервере(ПараметрыРасчета)
	
	ВидыЦен = Новый Массив;
	Для Каждого СтрокаМассива Из ПараметрыРасчета.ВидыЦен Цикл
		ВидыЦен.Добавить(НайтиСтрокуВидаЦен(СтрокаМассива.ВидЦены));
	КонецЦикла;
	
	Если НЕ ПараметрыРасчета.ТолькоВыделенныеСтроки Тогда
		
		ТаблицаНоменклатуры = СоздатьТаблицуНоменклатурыПоДеревуЦен();
		
		Для Каждого СтрокаМассива Из ПараметрыРасчета.ВидыЦен Цикл
			
			ИмяКолонки = ИмяКолонкиПоВидуЦены(СтрокаМассива.ВидЦены);
			
			ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
			Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
				
				ОбработатьСтрокуПриИзмененииЦеныНаПроцентНаСервере(
					ЭлементНоменклатура,
					СтрокаМассива,
					ИмяКолонки,
					ПараметрыРасчета);
				
				ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
				Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
					
					ОбработатьСтрокуПриИзмененииЦеныНаПроцентНаСервере(
						ЭлементХарактеристика,
						СтрокаМассива,
						ИмяКолонки,
						ПараметрыРасчета);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаНоменклатуры = СоздатьПустуюТаблицуНоменклатуры();
		Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
			СтрокаТаблицыЦен           = ДеревоЦен.НайтиПоИдентификатору(ВыделеннаяСтрока);
			НоваяСтрока                = ТаблицаНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура   = СтрокаТаблицыЦен.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаТаблицыЦен.Характеристика;
		КонецЦикла;
		
		Для Каждого СтрокаМассива Из ПараметрыРасчета.ВидыЦен Цикл
			
			ИмяКолонки = ИмяКолонкиПоВидуЦены(СтрокаМассива.ВидЦены);
			Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
				
				СтрокаТаблицыЦен = ДеревоЦен.НайтиПоИдентификатору(ВыделеннаяСтрока);
				ОбработатьСтрокуПриИзмененииЦеныНаПроцентНаСервере(СтрокаТаблицыЦен, СтрокаМассива, ИмяКолонки, ПараметрыРасчета);
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыРасчета.ПрименятьОкругление Тогда
		ПрименитьОкруглениеКРучнымЦенам(ТаблицаНоменклатуры, ВидыЦен);
	КонецЕсли;
	
	// Список видов цен, которые, которые зависят от изменяемых.
	ЗависимыеЦены = Новый Массив;
	Для Каждого ВидЦены Из ВидыЦен Цикл
		МассивСтрокЗависимыхЦен = ЗависимыеОтВидаЦеныВидыЦен(ВидЦены);
		Для Каждого СтрокаВидЦены Из МассивСтрокЗависимыхЦен Цикл
			Если ЗависимыеЦены.Найти(СтрокаВидЦены) = Неопределено
				И ВидыЦен.Найти(СтрокаВидЦены) = Неопределено Тогда
				ЗависимыеЦены.Добавить(СтрокаВидЦены);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Автоматически рассчитывать нужно только те цены, по которым процент изменения которых не изменяется
	// и которые зависят от изменяемых.
	ВидыЦенДляРасчета = Новый Массив;
	ВыбранныеСтрокиВидовЦен = ВыбранныеСтрокиТаблицыВидовЦен();
	Для Каждого ВидЦены Из ВыбранныеСтрокиВидовЦен Цикл
		Если ЗависимыеЦены.Найти(ВидЦены) <> Неопределено Тогда
			ВидыЦенДляРасчета.Добавить(ВидЦены);
		КонецЕсли;
	КонецЦикла;
	
	Если РассчитыватьАвтоматически Тогда
		РассчитатьВычисляемыеЦены(ТаблицаНоменклатуры, ВидыЦенДляРасчета, Ложь);
	Иначе
		УстановитьПризнакРучногоИзмененияДляВидовЦен(ТаблицаНоменклатуры, ВидыЦенДляРасчета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтрокуПриИзмененииЦеныНаПроцентНаСервере(СтрокаТаблицы, СтрокаМассива, ИмяКолонки, ПараметрыРасчета)
	
	Если ПараметрыРасчета.ВариантИзменения = 1 Тогда
		// К старой цене.
		Если СтрокаТаблицы["СтараяЦена" + ИмяКолонки] <> 0 Тогда
			СтрокаТаблицы["ПроцентИзменения" + ИмяКолонки] = СтрокаМассива.ПроцентИзменения;
			СтрокаТаблицы[ИмяКолонки] = Окр(СтрокаТаблицы["СтараяЦена" + ИмяКолонки] 
				* (СтрокаТаблицы["ПроцентИзменения" + ИмяКолонки] / 100 + 1),
				15, 2);
		Иначе
			СтрокаТаблицы["ПроцентИзменения" + ИмяКолонки] = 0;
			СтрокаТаблицы[ИмяКолонки] = 0;
		КонецЕсли;
		ПересчитатьПроцентНаценкиВСтроке(СтрокаТаблицы, ИмяКолонки);
	ИначеЕсли ПараметрыРасчета.ВариантИзменения = 2 Тогда
		// К влияющей цене.
		ПроцентНаценкиПриИзменении(СтрокаТаблицы, ИмяКолонки, СтрокаМассива.ПроцентИзменения);
	Иначе
		// К новой цене
		ЦенаДляИзменения = СтрокаТаблицы[ИмяКолонки];
		СтрокаТаблицы[ИмяКолонки] = Окр(ЦенаДляИзменения * (100 + СтрокаМассива.ПроцентИзменения) / 100, 15, 2);
		Если СтрокаТаблицы["СтараяЦена" + ИмяКолонки] <> 0 Тогда
			СтрокаТаблицы["ПроцентИзменения" + ИмяКолонки] = Окр(
				100
				* (СтрокаТаблицы[ИмяКолонки] - СтрокаТаблицы["СтараяЦена" + ИмяКолонки])
				/ СтрокаТаблицы["СтараяЦена" + ИмяКолонки],
				15, 2);
		Иначе
			СтрокаТаблицы["ПроцентИзменения" + ИмяКолонки] = 0;
		КонецЕсли;
		ПересчитатьПроцентНаценкиВСтроке(СтрокаТаблицы, ИмяКолонки);
	КонецЕсли;
	СтрокаТаблицы["ИзмененаВручную" + ИмяКолонки] = Истина;
	
КонецПроцедуры

&НаСервере
Функция МассивВсехДоступныхЦен()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыЦен.Ссылка КАК ВидЦены
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|";
	МассивЦен = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидЦены");
	
	Возврат МассивЦен;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоОстаткамСУчетомНаценкиНаСервере(АдресТаблицыТоваров, ДополнительныеПараметры)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(АдресТаблицыТоваров);
	ВидыЦен = ДополнительныеПараметры.ВидыЦен;
	ДатаЗапросов = ДатаДляЗапросаЦенНоменклатуры();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТаблицаТовары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Товары.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(Цены.ВидЦены, &ПустойВидЦен) КАК ВидЦены,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Цены.Упаковка.Коэффициент, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ Цены.Упаковка.Коэффициент
	|	КОНЕЦ КАК КоэффициентУпаковки,
	|	ЕСТЬNULL(Цены.Цена, 0) КАК Цена
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, ВидЦены В (&ВидыЦен)) КАК Цены
	|		ПО Товары.Номенклатура = Цены.Номенклатура
	|			И Товары.Характеристика = Цены.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.Номенклатура.Наименование,
	|	Товары.Характеристика.Наименование
	|ИТОГИ
	|	МАКСИМУМ(ВидЦены),
	|	МАКСИМУМ(Цена)
	|ПО
	|	Номенклатура,
	|	Характеристика";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	Запрос.УстановитьПараметр("ПустойВидЦен", Справочники.ВидыЦен.ПустаяСсылка());
	Запрос.УстановитьПараметр("Период", ДатаЗапросов);
	Запрос.УстановитьПараметр("ВидыЦен", ВидыЦен);
	ВременноеДеревоЦен = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Для Каждого СтрокаНоменклатуры Из ВременноеДеревоЦен.Строки Цикл
		
		Для Каждого СтрокаХарактеристики Из СтрокаНоменклатуры.Строки Цикл
			
			Для Каждого СтрокаВидаЦен Из СтрокаХарактеристики.Строки Цикл
				
				НайденныеСтроки = ВыбранныеЦены.НайтиСтроки(Новый Структура("Ссылка", СтрокаВидаЦен.ВидЦены));
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтрокаВыбраннойЦены = НайденныеСтроки[0];
					Если СтрокаВыбраннойЦены.Выбрана 
						И СтрокаВыбраннойЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоДругимВидамЦен Тогда
						
						РасчетнаяЦена = 0;
						Если СтрокаВыбраннойЦены.НепосредственноВлияющиеЦены.Количество() = 1 Тогда
						
							СтруктураЦеноваяГруппа = Новый Структура("ЦеноваяГруппа", СтрокаВидаЦен.ЦеноваяГруппа);
							ЦеновыеГруппыАлгоритмов = СтрокаВыбраннойЦены.ЦеновыеГруппы.НайтиСтроки(СтруктураЦеноваяГруппа);
							Если ЦеновыеГруппыАлгоритмов.Количество() > 0 Тогда
								Формула = ЦеновыеГруппыАлгоритмов[0].АлгоритмРасчетаЦены;
							Иначе
								Формула = СтрокаВыбраннойЦены.АлгоритмРасчетаЦены;
							КонецЕсли;
							
							ЦеновыеГруппыПорогов = СтрокаВыбраннойЦены.ПорогиСрабатывания.НайтиСтроки(СтруктураЦеноваяГруппа);
							Если ЦеновыеГруппыПорогов.Количество() > 0 Тогда
								ПорогСрабатывания = ЦеновыеГруппыПорогов[0].ПорогСрабатывания;
							Иначе
								ПорогСрабатывания = СтрокаВыбраннойЦены.ПорогСрабатывания;
							КонецЕсли;
							
							Если ЗначениеЗаполнено(Формула) Тогда
								ЦеновыеГруппыПорогов = СтрокаВыбраннойЦены.ПорогиСрабатывания.НайтиСтроки(СтруктураЦеноваяГруппа);
								Если ЦеновыеГруппыПорогов.Количество() > 0 Тогда
									ПорогСрабатывания = ЦеновыеГруппыПорогов[0].ПорогСрабатывания;
								Иначе
									ПорогСрабатывания = СтрокаВыбраннойЦены.ПорогСрабатывания;
								КонецЕсли;
								
								
								СтрокаБазовойЦены = НайтиСтрокуВидаЦен(СтрокаВыбраннойЦены.НепосредственноВлияющиеЦены[0].Значение);
								ЗначениеБазовойЦены = 0;
								УпаковкаБазовойЦены = 1;
								
								БазоваяСтрокаДерева = СтрокаХарактеристики.Строки.Найти(СтрокаВыбраннойЦены.НепосредственноВлияющиеЦены[0].Значение, "ВидЦены");
								Если БазоваяСтрокаДерева <> Неопределено Тогда
									ЗначениеБазовойЦены = БазоваяСтрокаДерева.Цена;
									УпаковкаБазовойЦены = БазоваяСтрокаДерева.КоэффициентУпаковки;
								КонецЕсли;
								
								Если ИспользоватьУпаковкиНоменклатуры Тогда
									СтрокаПересчетаУпаковок = "* " + Формат(СтрокаВидаЦен.КоэффициентУпаковки / УпаковкаБазовойЦены, "ЧРД=.; ЧН=0; ЧГ=0");
								Иначе
									СтрокаПересчетаУпаковок = "";
								КонецЕсли;
								СтрокаЗамены = " " + Формат(ЗначениеБазовойЦены, "ЧРД=.; ЧН=0; ЧГ=0") + " " + СтрокаПересчетаУпаковок + " ";
								Формула = СтрЗаменить(Формула, "[" + СтрокаБазовойЦены.Идентификатор + "]", СтрокаЗамены);
									
								
								Попытка
									УстановитьБезопасныйРежим(Истина);
									РасчетнаяЦена = ОкруглитьЦену(Вычислить(Формула), СтрокаВыбраннойЦены.НепосредственноВлияющиеЦены[0].Значение);
								Исключение
									ИнформацияОбОшибке = ИнформацияОбОшибке();
								КонецПопытки;
							КонецЕсли;
						КонецЕсли;
						
						Если РасчетнаяЦена <> 0
							И РасчетнаяЦена <> СтрокаВидаЦен.Цена Тогда
							ПроцентИзменения = ?(СтрокаВидаЦен.Цена = 0, 0, (РасчетнаяЦена - СтрокаВидаЦен.Цена) * 100 / СтрокаВидаЦен.Цена);
							Если ПорогСрабатывания = 0
								ИЛИ (ПроцентИзменения >= 0 И ПроцентИзменения >= ПорогСрабатывания) 
								ИЛИ (ПроцентИзменения < 0 И -ПроцентИзменения >= ПорогСрабатывания) Тогда
									НоваяСтрока = ТаблицаТоваров.Добавить();
									НоваяСтрока.Номенклатура = СтрокаВидаЦен.Номенклатура;
									НоваяСтрока.Характеристика = СтрокаВидаЦен.Характеристика;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ДобавитьТоварыПоОтборуНаСервере(ТаблицаТоваров);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьБазовуюЦенуСУчетомУпаковок(СтрокаТаблицы, СтрокаВидаЦен, СтрокаБазовойЦены, ЗначениеБазовойЦены)
	
	УпаковкаЦены = СтрокаТаблицы["Упаковка" + СтрокаВидаЦен.ИмяКолонки];
	УпаковкаБазовойЦены = СтрокаТаблицы["Упаковка" + СтрокаБазовойЦены.ИмяКолонки];
	Если ЗначениеЗаполнено(УпаковкаЦены) ИЛИ ЗначениеЗаполнено(УпаковкаБазовойЦены) Тогда
		Если УпаковкаЦены <> УпаковкаБазовойЦены Тогда
			КоэффициентУпаковкиЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УпаковкаЦены, "Коэффициент");
			КоэффициентУпаковкиБазовойЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УпаковкаБазовойЦены, "Коэффициент");
			Если НЕ ЗначениеЗаполнено(КоэффициентУпаковкиЦены) Тогда
				КоэффициентУпаковкиЦены = 1;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(КоэффициентУпаковкиБазовойЦены) Тогда
				КоэффициентУпаковкиБазовойЦены = 1;
			КонецЕсли;
			Если КоэффициентУпаковкиЦены <> КоэффициентУпаковкиБазовойЦены Тогда
				ЗначениеБазовойЦены = Окр(ЗначениеБазовойЦены * КоэффициентУпаковкиЦены / КоэффициентУпаковкиБазовойЦены, 2);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

&НаСервере
Функция ТаблицаСоответствия()
	
	ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = СоздатьПустуюТаблицуНоменклатуры();
	ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Колонки.Добавить("СтрокаДереваЦен");
	
	ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
	
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		
		Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
			
			НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			НоваяСтрокаТЗ.Номенклатура    = ЭлементНоменклатура.Номенклатура;
			НоваяСтрокаТЗ.Характеристика  = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			
			ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
			Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				
				НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
				НоваяСтрокаТЗ.Номенклатура    = ЭлементХарактеристика.Номенклатура;
				НоваяСтрокаТЗ.Характеристика  = ЭлементХарактеристика.Характеристика;
				НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементХарактеристика;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
			
			НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			НоваяСтрокаТЗ.Номенклатура    = ЭлементНоменклатура.Номенклатура;
			НоваяСтрокаТЗ.Характеристика  = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Индексы.Добавить("Номенклатура, Характеристика");
	
	Возврат ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров;
	
КонецФункции

#Область РаботаСБуферомОбмена

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена();
	
	ДобавитьТоварыПоОтборуНаСервере(ТаблицаТоваров);
	
	КопированиеСтрокСервер.ОчиститьБуферОбмена();
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопируемыеТовары = Новый ТаблицаЗначений;
	КопируемыеТовары.Колонки.Добавить("Номенклатура",           Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КопируемыеТовары.Колонки.Добавить("Характеристика",         Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КопируемыеТовары.Колонки.Добавить("ЕдиницаИзмерения",       Новый ОписаниеТипов("СправочникСсылка.БазовыеЕдиницыИзмерения"));
	
	Для Каждого ТекСтрока Из Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
		
		ТекЭлементНоменклатура = ДеревоЦен.НайтиПоИдентификатору(ТекСтрока);
		
		НоваяСтрока                		= КопируемыеТовары.Добавить();
		НоваяСтрока.Номенклатура   		= ТекЭлементНоменклатура.Номенклатура;
		
		ДочерниеЭлементы = ТекЭлементНоменклатура.ПолучитьЭлементы();
		Для Каждого Элемент Из ДочерниеЭлементы Цикл 
			
			НоваяСтрока.Характеристика 		= Элемент.Характеристика;
			НоваяСтрока.ЕдиницаИзмерения 	= Элемент.ЕдиницаИзмерения;	
			
		КонецЦикла;
	
	КонецЦикла;
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Неопределено, КопируемыеТовары);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ДеревоЦенВставитьСтроки");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнициализацияПеременных

ДобавитьХарактеристику = Ложь;
СоответствиеВидовЦенИменамКолонокТаблицыТоваров = Новый Соответствие;

#КонецОбласти
