#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос(
	// 0 ТаблицаЦеныНоменклатуры
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	ТаблицаТовары.ВидЦены КАК ВидЦены,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.ВидЦены.ВалютаЦены КАК Валюта,
	|	ТаблицаТовары.Ссылка.Дата КАК Период
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И (ТаблицаТовары.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать)
	|			ИЛИ ТаблицаТовары.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик <> ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.НеИспользовать)
	|				И ТаблицаТовары.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|	И (НЕ ТаблицаТовары.Цена = 0)");

	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результат = Запрос.ВыполнитьПакет();

	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЦеныНоменклатуры", Результат[0].Выгрузить());

КонецПроцедуры

// Процедура печати документа.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
			
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УстановкаЦенНоменклатуры") Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				"УстановкаЦенНоменклатуры",
				НСтр("ru = 'Установка цен номенклатуры'"),
				ПечатьУстановкаЦенНоменклатуры(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПереоценкаТоваров") Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				"ПереоценкаТоваров",
				НСтр("ru = 'Переоценка товаров'"),
				СформироватьПечатнуюФормуПереоценкиТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой установки цен номенклатуры.
//
// Возвращаемое значение:
//  Табличный документ.
//
Функция ПечатьУстановкаЦенНоменклатуры(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УстановкаЦенНоменклатуры";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.УстановкаЦенНоменклатуры.ПФ_MXL_УстановкаЦенНоменклатуры");
	
	ВидыЦен = Новый Массив;
	ДеревоНастроек = ПолучитьИзВременногоХранилища(ПараметрыПечати.ДеревоНастроек);
	Для Каждого СтрокаДерева Из ДеревоНастроек.Строки Цикл
		Если СтрокаДерева.ВыводитьНаПечать Тогда
			ВидыЦен.Добавить(СтрокаДерева.Параметр);
		КонецЕсли;
	КонецЦикла;
	
	ПервыйДокумент = Истина;
	Для Каждого УстановкаЦенНоменклатуры Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УстановкаЦенНоменклатуры.Ссылка       КАК Ссылка,
		|	УстановкаЦенНоменклатуры.Ссылка.Номер КАК Номер,
		|	УстановкаЦенНоменклатуры.Ссылка.Дата  КАК Дата,
		|   УстановкаЦенНоменклатуры.Ответственный.ФизическоеЛицо КАК Ответственный
		|ИЗ
		|	Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
		|ГДЕ
		|	УстановкаЦенНоменклатуры.Ссылка = &УстановкаЦенНоменклатуры
		|;
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Товары.НомерСтроки                       КАК НомерСтроки,
		|	Товары.Номенклатура                      КАК Номенклатура,
		|	Товары.Характеристика                    КАК Характеристика,
		|	Товары.Упаковка                          КАК Упаковка,
		|	Товары.Цена                              КАК Цена,
		|	Товары.ВидЦены                           КАК ВидЦены,
		|	
		|	ВЫБОР КОГДА ЦеныНоменклатурыСрезПоследних.Упаковка = Товары.Упаковка ТОГДА
		|		ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
		|	ИНАЧЕ
		|		ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент, 1) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 1)
		|	КОНЕЦ КАК ДействующаяЦена,
		|	
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) <> 0
		|				ТОГДА 100 * (Товары.Цена - ВЫБОР
		|						КОГДА ЦеныНоменклатурыСрезПоследних.Упаковка = Товары.Упаковка
		|							ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
		|						ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент, 1) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 1)
		|					КОНЕЦ) / ВЫБОР
		|						КОГДА ЦеныНоменклатурыСрезПоследних.Упаковка = Товары.Упаковка
		|							ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
		|						ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент, 1) * ЕСТЬNULL(Товары.Упаковка.Коэффициент, 1)
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(19, 2)) КАК ПроцентИзменения
		|	
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	Документ.УстановкаЦенНоменклатуры.Товары КАК Товары
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаСреза, (Номенклатура, Характеристика, ВидЦены) В (ВЫБРАТЬ Т.Номенклатура, Т.Характеристика, Т.ВидЦены ИЗ Документ.УстановкаЦенНоменклатуры.Товары КАК Т ГДЕ Т.Ссылка = &УстановкаЦенНоменклатуры И Т.ВидЦены В (&ВидыЦен))) КАК ЦеныНоменклатурыСрезПоследних
		|
		|		ПО Товары.Номенклатура      = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И Товары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|			И Товары.ВидЦены        = ЦеныНоменклатурыСрезПоследних.ВидЦены
		|
		|ГДЕ
		|	Товары.Ссылка = &УстановкаЦенНоменклатуры
		|	И Товары.ВидЦены В (&ВидыЦен)
		|;
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Товары.ВидЦены КАК ВидЦены
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	Товары.ВидЦены В (&ВидыЦен)
		|	И (Товары.ПроцентИзменения <> 0 ИЛИ Товары.ДействующаяЦена = 0) ИЛИ &Все
		|УПОРЯДОЧИТЬ ПО
		|	Товары.ВидЦены.РеквизитДопУпорядочивания
		|;
		|
		|ВЫБРАТЬ
		|	Товары.Номенклатура                      КАК Номенклатура,
		|	Товары.Характеристика                    КАК Характеристика,
		|	Товары.Номенклатура.НаименованиеПолное   КАК ПолноеНаименованиеНоменклатуры,
		|	Товары.Характеристика.Наименование       КАК ПолноеНаименованиеХарактеристики,
		|	Товары.Номенклатура.Код                  КАК Код,
		|	Товары.Номенклатура.Артикул              КАК Артикул,
		|	Товары.Упаковка                          КАК Упаковка,
		|	Товары.Номенклатура.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
		|	Товары.Цена                              КАК Цена,
		|	Товары.ВидЦены                           КАК ВидЦены,
		|	Товары.ДействующаяЦена                   КАК СтараяЦена,
		|	Товары.ПроцентИзменения                  КАК ПроцентИзменения
		|	
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	(Товары.ПроцентИзменения <> 0 ИЛИ Товары.ДействующаяЦена = 0) ИЛИ &Все
		|УПОРЯДОЧИТЬ ПО
		|	Товары.НомерСтроки
		|
		|ИТОГИ ПО
		|	Номенклатура, Характеристика");
		
		Запрос.УстановитьПараметр("УстановкаЦенНоменклатуры", УстановкаЦенНоменклатуры);
		Запрос.УстановитьПараметр("ДатаСреза",                УстановкаЦенНоменклатуры.Дата - 1);
		Запрос.УстановитьПараметр("ВидыЦен",                  ВидыЦен);
		Запрос.УстановитьПараметр("Все",                      Не ПараметрыПечати.ПечататьТолькоИзмененныеЦены);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		
		Шапка = РезультатЗапроса[0].Выбрать();
		Шапка.Следующий();
		
		Если ПараметрыПечати.ВыводитьШапку Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.ТекстЗаголовка = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Установка цен номенклатуры'"));
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Шапка таблицы
		КолонкаКодов = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
		ВыводитьКоды = ?(ЗначениеЗаполнено(КолонкаКодов),Истина, Ложь);
		
		ШапкаНомера  = Макет.ПолучитьОбласть("ШапкаТаблицы|ОбластьНомера");
		ШапкаКодов   = Макет.ПолучитьОбласть("ШапкаТаблицы|ОбластьКодов");
		ШапкаТовар   = Макет.ПолучитьОбласть("ШапкаТаблицы|ОбластьТовар");
		ШапкаВидЦены = Макет.ПолучитьОбласть("ШапкаТаблицы|ОбластьВидЦены" + ?(Не ПараметрыПечати.ВыводитьШапку,"УникальныйИдентификатор",""));
		ШапкаУникальныеИдентификаторы = Макет.ПолучитьОбласть("ШапкаТаблицы|УникальныеИдентификаторы");
		
		ТабДокумент.Вывести(ШапкаНомера);
		Если ВыводитьКоды Тогда
			ШапкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ТабДокумент.Присоединить(ШапкаКодов);
		КонецЕсли;
		Если Не ПараметрыПечати.ВыводитьШапку Тогда
			ТабДокумент.Присоединить(ШапкаУникальныеИдентификаторы);
		КонецЕсли;
		ТабДокумент.Присоединить(ШапкаТовар);
		
		
		Табл = Новый ТаблицаЗначений;
		Табл.Колонки.Добавить("ВидЦены");
		Табл.Колонки.Добавить("МакетОбласти");
				
		ВыборкаПоВидамЦен = РезультатЗапроса[2].Выбрать();
		Пока ВыборкаПоВидамЦен.Следующий() Цикл
			
			Новая                          = Табл.Добавить();
			Новая.ВидЦены                  = ВыборкаПоВидамЦен.ВидЦены;
		
					
			ШапкаВидЦены       = Макет.ПолучитьОбласть("ШапкаТаблицы|ОбластьВидЦены" + ?(Не ПараметрыПечати.ВыводитьШапку,"УникальныйИдентификатор",""));
			Новая.МакетОбласти = Макет.ПолучитьОбласть("Строка|ОбластьВидЦены" + ?(Не ПараметрыПечати.ВыводитьШапку,"УникальныйИдентификатор",""));
						
			ШапкаВидЦены.Параметры.ВидЦены = ВыборкаПоВидамЦен.ВидЦены;
			ТабДокумент.Присоединить(ШапкаВидЦены);
			
		КонецЦикла;		
		
		ОбластьНомера = Макет.ПолучитьОбласть("Строка|ОбластьНомера");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|ОбластьКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("Строка|ОбластьТовар");
		ОбластьУникальныеИдентификаторы = Макет.ПолучитьОбласть("Строка|УникальныеИдентификаторы");
		
		НомерСтроки = 0;
		ВыборкаПоНоменклатуре = РезультатЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоНоменклатуре.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаПоНоменклатуре.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			
				НомерСтроки = НомерСтроки + 1;
				
				ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
				ТабДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					
					Если КолонкаКодов = "Артикул" Тогда
						ОбластьКодов.Параметры.Артикул = ВыборкаПоНоменклатуре.Артикул;
					Иначе
						ОбластьКодов.Параметры.Артикул = ВыборкаПоНоменклатуре.Код;
					КонецЕсли;
					
					ТабДокумент.Присоединить(ОбластьКодов);
					
				КонецЕсли;
				
				Если Не ПараметрыПечати.ВыводитьШапку Тогда
					ОбластьУникальныеИдентификаторы.Параметры.УникальныйИдентификаторНоменклатура   = ВыборкаПоХарактеристикам.Номенклатура.УникальныйИдентификатор();
					ОбластьУникальныеИдентификаторы.Параметры.УникальныйИдентификаторХарактеристика = ВыборкаПоХарактеристикам.Характеристика.УникальныйИдентификатор();
					ТабДокумент.Присоединить(ОбластьУникальныеИдентификаторы);
				КонецЕсли;
				
				ОбластьТовар.Параметры.Заполнить(ВыборкаПоХарактеристикам);
				ОбластьТовар.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоХарактеристикам.ПолноеНаименованиеНоменклатуры, ВыборкаПоХарактеристикам.ПолноеНаименованиеХарактеристики);
				ТабДокумент.Присоединить(ОбластьТовар);
				
				ВыборкаПоВидамЦен = ВыборкаПоХарактеристикам.Выбрать();
				Для Каждого СтрокаТЗ Из Табл Цикл
					
					ВыборкаПоВидамЦен.Сбросить();
					Если ВыборкаПоВидамЦен.НайтиСледующий(Новый Структура("ВидЦены", СтрокаТЗ.ВидЦены)) Тогда
						
						ОбластьВидЦены = СтрокаТЗ.МакетОбласти;
						ОбластьВидЦены.Параметры.Цена = ВыборкаПоВидамЦен.Цена;											
						
						Если ЗначениеЗаполнено(ВыборкаПоВидамЦен.Упаковка) Тогда
							ОбластьВидЦены.Параметры.ЕдиницаИзмерения = ВыборкаПоВидамЦен.Упаковка;
						Иначе
							ОбластьВидЦены.Параметры.ЕдиницаИзмерения = ВыборкаПоВидамЦен.ЕдиницаИзмерения;
						КонецЕсли;
						
						Если Не ПараметрыПечати.ВыводитьШапку Тогда
							ОбластьВидЦены.Параметры.УникальныйИдентификаторЕдиницаИзмерения = ВыборкаПоВидамЦен.Упаковка.УникальныйИдентификатор();
						КонецЕсли;
						
					Иначе
						
						ОбластьВидЦены = СтрокаТЗ.МакетОбласти;
						ОбластьВидЦены.Параметры.Цена = 0;																		
						ОбластьВидЦены.Параметры.ЕдиницаИзмерения = Неопределено;
						
						Если Не ПараметрыПечати.ВыводитьШапку Тогда
							ОбластьВидЦены.Параметры.УникальныйИдентификаторЕдиницаИзмерения = Справочники.УпаковкиНоменклатуры.ПустаяСсылка().УникальныйИдентификатор();
						КонецЕсли;
						
					КонецЕсли;
					
					ТабДокумент.Присоединить(ОбластьВидЦены);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ПараметрыПечати.ВыводитьШапку Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
			ОбластьМакета.Параметры.ОтветственныйПредставление = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(Шапка.Ответственный);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, УстановкаЦенНоменклатуры);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Установка цен номенклатуры
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "УстановкаЦенНоменклатуры";
	КомандаПечати.Представление = НСтр("ru = 'Установка цен номенклатуры'");
	КомандаПечати.Обработчик = "УправлениеПечатьюРТКлиент.ОбработкаКомандыПечатиУстановкиЦен";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 75;
	
	// Переоценка товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПереоценкаТоваров";
	КомандаПечати.Представление = НСтр("ru = 'Переоценка товаров'");
	КомандаПечати.Обработчик = "УправлениеПечатьюРТКлиент.ОбработкаКомандыПечатиПереоценкиТоваров";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 75;
	
	ДоступнаПечатьЭтикетокИЦенников = ПравоДоступа("Использование", Метаданные.Обработки.ПечатьЭтикетокИЦенников);
	
	Если ДоступнаПечатьЭтикетокИЦенников Тогда
		
		ПараметрыПечатиЦенников = УправлениеПечатьюРТ.СтруктураПараметровПечатиЦенниковИЭтикеток();
		ПараметрыПечатиЦенников.ИмяПроцедурыПодготовкиСтруктурыДанных = "УправлениеПечатьюРТВызовСервера.ПодготовитьСтруктуруДанныхЦенниковИЭтикетокДляУстановкиЦен";
		ПараметрыПечатиЦенников.ИмяДокумента = "УстановкаЦенНоменклатуры";
		ПараметрыПечатиЦенников.УстановитьРежим = "ПечатьЦенников";
		
		ПараметрыПечатиЭтикеток = УправлениеПечатьюРТ.СтруктураПараметровПечатиЦенниковИЭтикеток();
		ПараметрыПечатиЭтикеток.ИмяПроцедурыПодготовкиСтруктурыДанных = "УправлениеПечатьюРТВызовСервера.ПодготовитьСтруктуруДанныхЦенниковИЭтикетокДляУстановкиЦен";
		ПараметрыПечатиЭтикеток.ИмяДокумента = "УстановкаЦенНоменклатуры";
		ПараметрыПечатиЭтикеток.УстановитьРежим = "ПечатьЭтикеток";
		
		// Ценники
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Ценники";
		КомандаПечати.Представление = НСтр("ru = 'Ценники'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Обработчик = "УправлениеПечатьюРТКлиент.ОбработкаКомандыПечатиЦенниковИЭтикеток";
		КомандаПечати.ДополнительныеПараметры.Вставить("ПараметрыПечатиЦенниковИЭтикеток", ПараметрыПечатиЦенников);
		КомандаПечати.Порядок = 85;
		
		// Этикетки
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Этикетки";
		КомандаПечати.Представление = НСтр("ru = 'Этикетки'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Обработчик = "УправлениеПечатьюРТКлиент.ОбработкаКомандыПечатиЦенниковИЭтикеток";
		КомандаПечати.ДополнительныеПараметры.Вставить("ПараметрыПечатиЦенниковИЭтикеток", ПараметрыПечатиЭтикеток);
		КомандаПечати.Порядок = 85;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

///////////////////////////////////////////////////////////////////////////////
// Печать

// Функция формирует табличный документ с печатной формой переоценки в рознице.
//
// Возвращаемое значение:
//  Табличный документ.
//
Функция СформироватьПечатнуюФормуПереоценкиТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПереоценкаТоваров_ПереоценкаТоваров";
	
	ФормированиеПечатныхФормСервер.СформироватьПечатнуюФормуПереоценкиТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ТабДокумент);
	
	Возврат ТабДокумент;
	
КонецФункции

#КонецОбласти

#КонецЕсли
