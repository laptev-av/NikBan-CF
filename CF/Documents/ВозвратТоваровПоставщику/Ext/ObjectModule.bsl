#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.ВозвратТоваровПоставщику.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияСерийныхНомеров(ДополнительныеСвойства, Движения, Отказ);
	ЗакупкиСервер.ОтразитьЗакупкиТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.СерийныеНомера.ОчиститьВДокументеНеиспользуемыеСерийныеНомера(Товары, СерийныеНомера);
	
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбщегоНазначенияРТ.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект,
														Документы.ВозвратТоваровПоставщику.ПараметрыУказанияСерий(ЭтотОбъект));
	
	ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
		ЭтотОбъект,
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС),
		"СуммаДокумента");
		
	// ИнтеграцияГИСМ
	ЕстьМаркируемаяПродукцияГИСМ = ИнтеграцияГИСМ_РТ.ЕстьМаркируемаяПродукцияГИСМ(Товары);
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
			
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		
		ЗаполнитьЗначенияСвойств(
			ЭтотОбъект, 
			ДанныеЗаполнения,
			"Склад, Магазин, Организация, УчитыватьНДС, ЦенаВключаетНДС, 
			|Контрагент, Договор, БанковскийСчетКонтрагента, БанковскийСчетОрганизации");
			
		ДокументОснование = ДанныеЗаполнения;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровТовары.Номенклатура,
		|	ПоступлениеТоваровТовары.Характеристика,
		|	ПоступлениеТоваровТовары.НомерГТД,
		|	ПоступлениеТоваровТовары.Количество,
		|	ПоступлениеТоваровТовары.Цена,
		|	ПоступлениеТоваровТовары.Сумма,
		|	ПоступлениеТоваровТовары.СтавкаНДС,
		|	ПоступлениеТоваровТовары.СуммаНДС,
		|	ПоступлениеТоваровТовары.КлючСвязиСерийныхНомеров,
		|	ПоступлениеТоваровТовары.Упаковка,
		|	ПоступлениеТоваровТовары.КоличествоУпаковок,
		|	ЕСТЬNULL(ТТН.Справка2, ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)) КАК Справка2
		|ИЗ
		|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС.Товары КАК ТТН
		|		ПО (ТТН.Ссылка = &ТТН)
		|			И ПоступлениеТоваровТовары.ИдентификаторСтроки = ТТН.ИдентификаторСтроки
		|ГДЕ
		|	ПоступлениеТоваровТовары.Ссылка = &Ссылка
		|	И НЕ ПоступлениеТоваровТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		Запрос.УстановитьПараметр("ТТН", ДанныеЗаполнения.ТТНВходящаяЕГАИС);
		
		Результат = Запрос.Выполнить();
		
		Товары.Загрузить(Результат.Выгрузить());
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") 
			И НЕ ДанныеЗаполнения.Магазин.ИспользоватьОрдернуюСхемуПриОтгрузке Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПоступлениеТоваровСерии.Серия,
			|	ПоступлениеТоваровСерии.Количество,
			|	ПоступлениеТоваровСерии.Номенклатура,
			|	ПоступлениеТоваровСерии.Характеристика,
			|	ПоступлениеТоваровСерии.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
			|ПОМЕСТИТЬ ТаблицаСерий
			|ИЗ
			|	Документ.ПоступлениеТоваров.Серии КАК ПоступлениеТоваровСерии
			|ГДЕ
			|	ПоступлениеТоваровСерии.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаСерий.ВидНоменклатуры
			|ПОМЕСТИТЬ ТаблицаВидовНоменклатуры
			|ИЗ
			|	ТаблицаСерий КАК ТаблицаСерий
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВидыНоменклатурыПолитикиУчетаСерий.Ссылка КАК ВидНоменклатуры,
			|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеПоВозвратуПоставщику КАК УказыватьСерии
			|ПОМЕСТИТЬ ТаблицаПолитик
			|ИЗ
			|	Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
			|ГДЕ
			|	ВидыНоменклатурыПолитикиУчетаСерий.Ссылка В
			|			(ВЫБРАТЬ
			|				ТаблицаСерий.ВидНоменклатуры КАК ВидНоменклатуры
			|			ИЗ
			|				ТаблицаСерий КАК ТаблицаСерий)
			|	И ВидыНоменклатурыПолитикиУчетаСерий.Магазин = &Магазин
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаСерий.Серия,
			|	ТаблицаСерий.Количество,
			|	ТаблицаСерий.Номенклатура,
			|	ТаблицаСерий.Характеристика
			|ИЗ
			|	ТаблицаСерий КАК ТаблицаСерий
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПолитик КАК ТаблицаПолитик
			|		ПО ТаблицаСерий.ВидНоменклатуры = ТаблицаПолитик.ВидНоменклатуры
			|ГДЕ
			|	ЕСТЬNULL(ТаблицаПолитик.УказыватьСерии, ЛОЖЬ)";
			
			Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
			Запрос.УстановитьПараметр("Магазин", ДанныеЗаполнения.Магазин);
			
			Результат = Запрос.Выполнить();
			
			Серии.Загрузить(Результат.Выгрузить());
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеЗаполнения.СерийныеНомера, СерийныеНомера);
	
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ВозвратИзРегистра2ЕГАИС") Тогда
			
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратИзРегистра2ЕГАИС.Организация КАК Организация,
		|	ВозвратИзРегистра2ЕГАИС.ТорговыйОбъект КАК Магазин,
		|	ВозвратИзРегистра2ЕГАИС.ТорговыйОбъект.СкладПоступления КАК Склад
		|ИЗ
		|	Документ.ВозвратИзРегистра2ЕГАИС КАК ВозвратИзРегистра2ЕГАИС
		|ГДЕ
		|	ВозвратИзРегистра2ЕГАИС.Ссылка = &Ссылка";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Шапка);
			
		ДокументОснование = ДанныеЗаполнения;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратИзРегистра2ЕГАИСТовары.Номенклатура,
		|	ВозвратИзРегистра2ЕГАИСТовары.Характеристика,
		|	ВозвратИзРегистра2ЕГАИСТовары.Количество,
		|	ВозвратИзРегистра2ЕГАИСТовары.Номенклатура.СтавкаНДС КАК СтавкаНДС,
		|	ВозвратИзРегистра2ЕГАИСТовары.Упаковка,
		|	ВозвратИзРегистра2ЕГАИСТовары.КоличествоУпаковок,
		|	ВозвратИзРегистра2ЕГАИСТовары.Справка2 КАК Справка2,
		|	ВозвратИзРегистра2ЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция
		|ИЗ
		|	Документ.ВозвратИзРегистра2ЕГАИС.Товары КАК ВозвратИзРегистра2ЕГАИСТовары
		|ГДЕ
		|	ВозвратИзРегистра2ЕГАИСТовары.Ссылка = &Ссылка";
		
		
		Результат = Запрос.Выполнить();
		
		Товары.Загрузить(Результат.Выгрузить());
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("ОбработкаФормированиеЗаказов") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		ДанныеШапкиДокумента = ДанныеЗаполнения.Реквизиты;
		ДанныеТабличнойЧасти = ДанныеЗаполнения.Товары;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеШапкиДокумента);
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ЗаполнитьТабличнуюЧастьИзОбработкиФормированиеЗаказов(ДанныеТабличнойЧасти, КэшированныеЗначения);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда

		ИнтеграцияВЕТИСРТ.ЗаполнитьВозвратТоваровПоставщикуНаОснованииИсходящейТранспортнойОперацииВЕТИС(ЭтотОбъект, ДанныеЗаполнения,, СтандартнаяОбработка);

	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	ОбщегоНазначенияРТ.ПроверитьИспользованиеОрганизации(,,Организация);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЕстьМаркируемаяПродукцияГИСМ = Ложь;
	
	ДокументОснование = Документы.ПоступлениеТоваров.ПустаяСсылка();
	ТТНИсходящаяЕГАИС = Документы.ТТНИсходящаяЕГАИС.ПустаяСсылка();
	
	Серии.Очистить();
	
	ИнициализироватьДокумент();
	
	УчетНДС.СкорректироватьНДСВТЧДокумента(ЭтотОбъект, Товары);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если Магазин.СкладУправляющейСистемы Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
	ИнтеграцияЕГАИСРТ.ПроверитьЗаполнениеСправок2(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
																Документы.ВозвратТоваровПоставщику.ПараметрыУказанияСерий(ЭтотОбъект),
																Отказ);
																
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеТЧПриНаличииОбменаСУправлениемТорговлей(
		ЭтотОбъект, 
		Отказ); 

	МаркетинговыеАкцииСервер.ПроверитьЗаполнениеТабличнойЧастиСерийныеНомера(
		ЭтотОбъект,
		"Товары",
		"СерийныеНомера",
		Отказ);
	
	МаркетинговыеАкцииСервер.ПроверитьДвиженияСерийныхНомеров(
		ЭтотОбъект,
		"Товары",
		"СерийныеНомера",
		Отказ);
			
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Инициализирует документ
//
Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Ответственный = Пользователи.ТекущийПользователь();
	Магазин       = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Магазин);
	Организация   = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация,Ответственный);
	Склад         = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Магазин,,Склад, Ответственный);
	Контрагент    = ЗначениеНастроекПовтИсп.ПолучитьПоставщикаПоУмолчанию(Ответственный, Контрагент);
	
	БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация,,
																						БанковскийСчетОрганизации);
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент);
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("Контрагент") И НЕ ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
		БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(ДанныеЗаполнения.Контрагент);
	КонецЕсли;

	
	АналитикаХозяйственнойОперации = ЗначениеНастроекПовтИсп.ПолучитьАналитикуХозяйственнойОперацииПоУмолчанию(
																				АналитикаХозяйственнойОперации,
																				Перечисления.ХозяйственныеОперации.ВозвратПоставщику);

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Склад")
			И НЕ ЗначениеЗаполнено(Склад) Тогда
			Если ЗначениеЗаполнено(Магазин) Тогда
				Если НЕ Справочники.Склады.ПроверитьПринадлежностьСкладаМагазину(Магазин, ДанныеЗаполнения.Склад) Тогда
					ДанныеЗаполнения.Склад = Справочники.Склады.ПустаяСсылка();
				КонецЕсли;
			Иначе
				Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Склад, "Магазин");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТТНИсходящаяЕГАИС = Документы.ТТНИсходящаяЕГАИС.ПустаяСсылка();
	
КонецПроцедуры

// Процедура заполнения документа из обработки Анализ продаж и формирование заказов.
//
Процедура ЗаполнитьТабличнуюЧастьИзОбработкиФормированиеЗаказов(ДанныеТабличнойЧасти, КэшированныеЗначения)
	
	Для каждого СтрокаДанных Из ДанныеТабличнойЧасти Цикл
		СтрокаТоваров = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТоваров, СтрокаДанных, "Номенклатура, Характеристика, Цена");
		СтрокаТоваров.КоличествоУпаковок = СтрокаДанных.Количество;
		
		СтруктураДействий = Новый Структура();
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(ЭтотОбъект));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ЭтотОбъект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(СтрокаТоваров, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Товары, Ложь);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Товары, Ложь, СуммаДокумента);

КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

	ИспользуетсяКомиссионнаяТорговля = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
	ИспользуетсяУчетИмпортныхТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьУчетИмпортныхТоваров");

	// При проведении выполняется контроль превышения остатков на складах.
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Массив.Добавить(Движения.ТоварыНаСкладах);
		Массив.Добавить(Движения.ДвиженияСерийныхНомеров);
		
	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

#КонецОбласти

#КонецЕсли
