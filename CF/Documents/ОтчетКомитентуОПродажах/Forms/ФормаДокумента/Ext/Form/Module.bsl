&НаКлиенте
Перем КэшированныеЗначения;

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
			ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		Иначе
			ПодключаемоеОборудованиеРТВызовСервера.УстановитьКонтрагентаПоДисконтнойКарте(ЭтотОбъект, СтруктураРезультат, СтрокаРезультата);
		КонецЕсли;
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиСертификатов(СтруктураРезультат, СтрокаРезультата);
		
	Иначе // Номенклатура.
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	
	ДобавленаСтрока = Ложь;
	ТекущаяСтрока = ПодключаемоеОборудованиеРТВызовСервера.ИнициализацияСтрокиТоваров(ЭтотОбъект, СтруктураПараметров, ДобавленаСтрока);
	
	СтруктураДействий = Новый Структура;
	Если ДобавленаСтрока Тогда
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ЗаполнитьСтрануПроисхождения");
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		
		СтруктураПараметровДействия = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
		СтруктураПараметровДействия.Дата = ТекущаяДатаСеанса();
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия);
		
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуПродажи");
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ЗавершениеОбработкиСтрокиТоваров(ЭтотОбъект, ТекущаяСтрока, СтруктураДействий);
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	КонецЕсли;
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОповещениеПоискаПоНаименованию(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ЗавершитьОбработкуДанныхПоКодуКлиент(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданиеИВыборНовойХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект[ДополнительныеПараметры.ИмяТЧ].НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ТекущаяСтрока[ДополнительныеПараметры.ИмяРеквизита] = Результат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаДокумента"
		Или ИсточникВыбора.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаСписка" Тогда
		
		НастроитьОтображениеРеквизитовСчетаФактуры(ЭтаФорма, ВыбранноеЗначение);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	ИспользоватьУчетИмпортныхТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьУчетИмпортныхТоваров");
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,
	КартинкаСостоянияДокумента,
	Элементы.КартинкаСостоянияДокумента.Подсказка,
	РазрешеноПроведение);
	
	
	УстановитьДоступностьЦенаВключаетНДС();
	ЗаполнитьСистемуНалогообложения(Объект.Дата, Объект.Организация);
	
	НастроитьОтображениеРеквизитовСчетаФактуры(ЭтаФорма,
	ПродажиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	ИспользованиеСПАРКРазрешено = СПАРКРиски.ИспользованиеРазрешено();
	
	Если ИспользованиеСПАРКРазрешено Тогда
		ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Однострочный");
		СПАРКРиски.ПриСозданииНаСервере(ЭтотОбъект,
		Неопределено,
		Объект.Контрагент,
		ПараметрыПроцедуры);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	
	Если Объект.Ссылка.Пустая() Тогда
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		УстановитьТекущуюСтраницуСуммПодвала();
	КонецЕсли;
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец подсистема "ОбменСКонтрагентами".
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	НастроитьОтображениеРеквизитовСчетаФактуры(
	ЭтаФорма,
	ПродажиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
	УстановитьТекущуюСтраницуСуммПодвала();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриОткрытии.
	Если ИспользованиеСПАРКРазрешено Тогда
		СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Неопределено);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриОткрытии.
	
	// Подсистема "ОбменСКонтрагентами"
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец Подсистема "ОбменСКонтрагентами"
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, 
	Объект.Комментарий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, 
	Элементы.КартинкаСостоянияДокумента.Подсказка, 
	КартинкаСостоянияДокумента, 
	РазрешеноПроведение);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)    
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование 
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбработкаОповещения.
	Если ИспользованиеСПАРКРазрешено Тогда
		СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Неопределено, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбработкаОповещения.
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ПараметрыОповещения.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	//ОбновитьИтоговыеПоказатели();
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаСервере
Процедура ЗаполнитьСистемуНалогообложения(ДатаДокумента, Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СистемыНалогообложенияОрганизацийСрезПоследних.СистемаНалогообложения,
	|	СистемыНалогообложенияОрганизацийСрезПоследних.ОбъектНалогообложения
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&ДатаДокумента, Организация = &Организация) КАК СистемыНалогообложенияОрганизацийСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация"  , Организация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
			СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
			ОбъектНалогооблаженияПоУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка();
		Иначе
			СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная;
			
			Если Выборка.ОбъектНалогообложения = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда
				ОбъектНалогооблаженияПоУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы;
			Иначе
				ОбъектНалогооблаженияПоУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
		ОбъектНалогооблаженияПоУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьСистемуНалогообложения(Объект.Дата, Объект.Организация);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"БанковскийСчетОрганизации", "ТолькоПросмотр",
	НЕ ЗначениеЗаполнено(Объект.Организация));
	
	Объект.БанковскийСчетОрганизации = ЗначениеНастроекВызовСервера.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация,,Объект.БанковскийСчетОрганизации);
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	Если ИспользованиеСПАРКРазрешено Тогда
		// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
		ЭтотОбъект.ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
		ОбновитьОтображениеИндексыСПАРК();
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ЗаполнитьПараметрыРасчетаВознагражденияПоДоговору();
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСВознагражденияПриИзменении(Элемент)
	
	Если Объект.СпособРасчетаКомиссионногоВознаграждения = 
		ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Способ не предусматривает расчет'"),,"Внимание!");
		Возврат; 
	КонецЕсли;       
	
	Оповещение = Новый ОписаниеОповещения("ПослеВопросаРассчитатьВознаграждениеЗавершить", ЭтаФорма);
	ПоказатьВопрос(Оповещение,
	НСтр("ru = 'Будет произведен перерасчет вознаграждения, продолжить?'"),
	РежимДиалогаВопрос.ДаНет,,,"Внимание!");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентВознагражденияПриИзменении(Элемент)
	
	Если Объект.СпособРасчетаКомиссионногоВознаграждения = 
		ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Способ не предусматривает расчет'"),,"Внимание!");
		Возврат; 
	КонецЕсли;       
	
	Оповещение = Новый ОписаниеОповещения("ПослеВопросаРассчитатьВознаграждениеЗавершить", ЭтаФорма);
	ПоказатьВопрос(Оповещение,
	НСтр("ru = 'Будет произведен перерасчет вознаграждения, продолжить?'"),
	РежимДиалогаВопрос.ДаНет,,,"Внимание!");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагента(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#Область ВкладкаТовары

#Область ТабличнаяЧастьТовары

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ОчиститьПоказателиТабличнойЧастиТовары(ТекущаяСтрока);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		СтруктураПараметровДействия = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуПродажи");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ОчиститьПоказателиТабличнойЧастиТовары(ТекущаяСтрока);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьСтрануПроисхождения");
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураПараметровДействия = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.Дата = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
		СтруктураПараметровДействия.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия);
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СуммаТоваровПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	ПриИзмененииТоварыКоличестваУпаковок();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСНДСПриИзменении(Элемент)
	СуммаТоваровПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПродажиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуПродажи");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПродажиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПродажиПоСуммеПродажи");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары,
		ТекущаяСтрока,
		СтруктураДействий,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтаФорма, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область ВкладкаЭтапыОплат

#Область ТабличнаяЧастьЭтапыОплат

&НаКлиенте
Процедура ЭтапыОплатПриИзменении(Элемент)
	ОбновитьИтоговыеПоказатели(, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ЗапрашиватьДатуПлатежа = Истина;
	Если Копирование И Элемент.ТекущиеДанные.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Взаимозачет") Тогда
		ЗапрашиватьДатуПлатежа = Ложь;
	КонецЕсли;
	
	СуммаИтого    = Объект.СуммаПродажи;
	СуммаНДСИтого = Объект.Товары.Итог("СуммаНДС");
	СуммаИтого    = СуммаИтого + ?(Объект.ЦенаВключаетНДС, 0, СуммаНДСИтого);
	
	ЗакупкиКлиент.ДобавитьЭтапОплаты(Объект, Элементы, СуммаИтого, Истина, Отказ, Копирование, ЗапрашиватьДатуПлатежа);
	
	ОбновитьИтоговыеПоказатели(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатФормаОплатыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭтапыОплат.ТекущиеДанные;
	
	Если ТекущиеДанные.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Взаимозачет") Тогда
		ТекущиеДанные.ДатаПлатежа     = Дата('00010101');
		ТекущиеДанные.ОтсрочкаПлатежа = 0;
		ТекущиеДанные.ВидПлатежа      = 0;
	Иначе
		ТекущиеДанные.ДокументВзаимозачета 	= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатОтсрочкаПлатежаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭтапыОплат.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВидПлатежа) Тогда
		ТекущаяСтрока.ДатаПлатежа = ?(ЗначениеЗаполнено(Объект.Дата),
		Объект.Дата + ТекущаяСтрока.ОтсрочкаПлатежа * 86400, Дата('00010101'));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатДатаПлатежаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭтапыОплат.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ДатаПлатежа) И ЗначениеЗаполнено(Объект.Дата) Тогда
		
		ТекущаяСтрока.ВидПлатежа      = ПредопределенноеЗначение("Перечисление.ВидПлатежа.Предоплата");
		ТекущаяСтрока.ОтсрочкаПлатежа = 0;
		НачалоДняДатаПлатежа          = НачалоДня(ТекущаяСтрока.ДатаПлатежа);
		НачалоДняПоДокументу          = НачалоДня(Объект.Дата);
		
		Если НачалоДняДатаПлатежа < НачалоДняПоДокументу Тогда			
			ТекущаяСтрока.ОтсрочкаПлатежа = 0;      			
		Иначе 			
			ТекущаяСтрока.ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидПлатежа.ОтсрочкаПлатежа");  			
			ТекущаяСтрока.ОтсрочкаПлатежа = (ТекущаяСтрока.ДатаПлатежа - НачалоДняПоДокументу) / 86400;  						
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатПроцентОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭтапыОплат.ТекущиеДанные;
	ЗакупкиКлиент.ПересчитатьСуммуПроцентОплаты(Объект, СуммаВсего, ТекущаяСтрока, ТекущаяСтрока.ПроцентОплаты, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭтапыОплат.ТекущиеДанные;
	ЗакупкиКлиент.ПересчитатьСуммуПроцентОплаты(Объект, СуммаВсего, ТекущаяСтрока, ТекущаяСтрока.Сумма, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область ВкладкаКомментарий

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

#КонецОбласти

#Область ВкладкаДополнительно

&НаКлиенте
Процедура СпособРасчетаВознагражденияПриИзменении(Элемент)
	
	УправлениеЭлементамиФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьНДСПриИзменении(Элемент)
	
	УстановитьДоступностьЦенаВключаетНДС(Истина); 
	УчитыватьНДСПриИзмененииНаСервере();
	УстановитьТекущуюСтраницуСуммПодвала();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	ЦенаВключаетНДСПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ТекстСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПродажиКлиент.ВвестиСчетФактуру(ЭтаФорма, Объект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСчетовФактурНажатие(Элемент)
	
	СтруктураОтбор = Новый Структура("ДокументОснование, Организация, ПометкаУдаления", Объект.Ссылка, Объект.Организация, Ложь);
	
	ОткрытьФорму(
	"Документ.СчетФактураВыданный.ФормаСписка",
	Новый Структура("Отбор", СтруктураОтбор),
	ЭтаФорма
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиИсправлениеСчетаФактуры(Команда)
	ПродажиКлиент.ВвестиСчетФактуру(ЭтаФорма, Объект, Ложь, Истина); 
КонецПроцедуры

#КонецОбласти 

#Область СПАРКРиски

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

// ИнтернетПоддержкаПользователей.СПАРКРиски
&НаКлиенте
Процедура ДекорацияСПАРКПодробноНажатие(Элемент)
	
	СПАРКРискиКлиент.ПоказатьЗначенияИндексовКонтрагента(ИндексыСПАРКРиски, ЭтотОбъект);
	
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

#КонецОбласти

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.ДатаНачала    = Объект.НачалоПериода;
	Диалог.Период.ДатаОкончания = Объект.КонецПериода;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьПериод", ЭтотОбъект);
	Диалог.Показать(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	РазвернутьСвернутьТЧНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭтапыОплатПоГрафикуКонтрагента(Команда)
	
	НачатьЗаполнениеЭтаповОплат();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭтапыПоГрафикуИзСписка(Команда)
	
	НачатьЗаполнениеЭтаповОплат(Истина);            
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВознаграждение(Команда)
	
	Если Объект.СпособРасчетаКомиссионногоВознаграждения = 
		ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Способ не предусматривает расчет'"),,"Внимание!");
		Возврат; 
	КонецЕсли;       
	
	Оповещение = Новый ОписаниеОповещения("ПослеВопросаРассчитатьВознаграждениеЗавершить", ЭтаФорма);
	ПоказатьВопрос(Оповещение,
	НСтр("ru = 'Будет произведен перерасчет вознаграждения, продолжить?'"),
	РежимДиалогаВопрос.ДаНет,,,"Внимание!");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВзаимозачет(Команда)
	
	Отказ = НЕ ЗначениеЗаполнено(Объект.Магазин) ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент);
	
	Если Отказ Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	
	СуммаОплаты = Объект.ЭтапыОплат.Итог("Сумма");
	
	Если СуммаВсего <> 0 И СуммаОплаты = СуммаВсего Тогда
		
		ТекстСообщения = НСтр("ru = 'Добавление платежа не требуется сумма оплат %СуммаОплаты% соответствует сумме 
		|поступления товаров %СуммаЗаказа%'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%СуммаОплаты%",СуммаОплаты);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%СуммаЗаказа%",СуммаВсего);
		
		ПоказатьПредупреждение(,ТекстСообщения,,"Внимание!");          
		Отказ = Истина;         
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СуммаКПодбору = 0;	
	СуммаИтого    = СуммаВсего;
	
	ИтогПоЭтапамОплат = Объект.ЭтапыОплат.Итог("Сумма");
	СуммаКПодбору     = СуммаИтого - ИтогПоЭтапамОплат;
	
	АдресХранилищаЭтапаОплат = ПоместитьЭтапыОплатВХранилище();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",                  Объект.Магазин);
	ПараметрыФормы.Вставить("Контрагент",               Объект.Контрагент);
	ПараметрыФормы.Вставить("СуммаКПодбору",            СуммаКПодбору);
	ПараметрыФормы.Вставить("ДокументРасчета",          Объект.Ссылка);
	ПараметрыФормы.Вставить("АдресХранилищаЭтапаОплат", АдресХранилищаЭтапаОплат);
	
	ОткрытьФорму("Обработка.ПодборДокументовВзаимозачета.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьСчетФактуры(Команда)
	
	ОформитьСчетФактурыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРезультатамПродаж(Команда)
	
	ЕстьОшибки = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено начало периода'"), Объект, "НачалоПериода", "Объект", ЕстьОшибки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено окончание периода'"), Объект, "КонецПериода", "Объект", ЕстьОшибки);
	КонецЕсли;   
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена организация'"), Объект, "Организация", "Объект", ЕстьОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен поставщик'"), Объект, "Контрагент", "Объект", ЕстьОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен договор'"), Объект, "Договор", "Объект", ЕстьОшибки);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоРезультатамПродажНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоНаименованию(Команда)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Магазин",Объект.Магазин);
	РаботаСПравиламиИменованияКлиент.ПоискПоНаименованию(ЭтаФорма,ПараметрыПоиска);
	
КонецПроцедуры

// Подсистема "ОбменСКонтрагентами".
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	// Подсистема «Обмен с контрагентами»
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	// Конец Подсистема «Обмен с контрагентами»

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)

	// Подсистема «Обмен с контрагентами»
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	// Конец Подсистема «Обмен с контрагентами»

КонецПроцедуры
// Конец подсистема "ОбменСКонтрагентами".

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	НастроитьОтображениеРеквизитовСчетаФактуры(ЭтаФорма,
	ПродажиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
	
	ПодключаемоеОборудованиеРТ.ЗаполнитьВидНалога(Объект);
	
	ЗаполнитьСистемуНалогообложения(Объект.Дата, Объект.Организация);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеРеквизитовСчетаФактуры(Форма, ПараметрыПредставления)
	
	Форма.ТекстСчетФактура = ПараметрыПредставления.ТекстСчетФактура;
	Форма.Элементы.ТекстСчетФактура.Гиперссылка = ПараметрыПредставления.ГиперссылкаСчетФактура;
	Форма.Элементы.СписокСчетовФактур.Заголовок = ПараметрыПредставления.ТекстСписок;
	Форма.Элементы.СписокСчетовФактур.Гиперссылка = ЗначениеЗаполнено(ПараметрыПредставления.ТекстСписок);
	Форма.Элементы.ВвестиИсправлениеСчетаФактуры.Доступность = ПараметрыПредставления.РазрешеныИсправления;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы(ОчиститьВознаграждение = Ложь)
	
	ЗаполненДоговор = ЗначениеЗаполнено(Объект.Договор);
	
	ПризнакВознаграждения = Объект.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается;
	
	Если ПризнакВознаграждения Тогда
		Если НЕ ЗаполненДоговор Тогда 
			Элементы.ГруппаВознаграждение.ТолькоПросмотр  = ПризнакВознаграждения;
			Элементы.ГруппаНДС.ТолькоПросмотр             = ПризнакВознаграждения;
		КонецЕсли;
	КонецЕсли;
	
	Если ОчиститьВознаграждение Тогда
		Объект.ПроцентКомиссионногоВознаграждения  = 0;
		Объект.СуммаВознаграждения                 = 0;
		Объект.СуммаНДСВознаграждения              = 0;
		Объект.ДатаОплаты                          = Дата('00010101');
	КонецЕсли; 
	
	ПредставлениеСистемыНалогообложения = НСтр("ru = 'ОСН'");
	
	Если СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.Упрощенная") Тогда
		ПредставлениеСистемыНалогообложения        = НСтр("ru = 'УСН'");
	Иначе
		УстановитьДоступностьЦенаВключаетНДС();
	КонецЕсли;
	
	СистемаНалогообложенияСтрокой  = НСтр("ru = 'В организации применяется "+ПредставлениеСистемыНалогообложения+"'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПоставщикаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Договор = Результат;
	
	ЗаполнитьПараметрыРасчетаВознагражденияПоДоговору();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаРассчитатьВознаграждениеЗавершить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПроизвестиРасчетКомиссионногоВознагражденияНаСервере();      
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаполнениеЭтаповОплат(ЗаполнитьПоВыбранномуГрафику = Ложь)
	
	Оповещение = Новый ОписаниеОповещения("ПослеВопросаЭтаповОплат",ЭтаФорма, ЗаполнитьПоВыбранномуГрафику);
	
	ПоказатьВопрос(Оповещение,
	НСтр("ru = 'Табличная часть ""Этапы оплат"" будет очищена, продолжить?';"),
	РежимДиалогаВопрос.ДаНет,,,"Внимание!");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаЭтаповОплат(Результат, ЗаполнитьПоВыбранномуГрафику) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроверки = Новый Структура();
	ПараметрыПроверки.Вставить("ТоварыОтстутствуют", Объект.Товары.Количество() = 0);
	
	Результат = ЗакупкиКлиент.ЕстьВозможностьЗаполнитьПоГрафикуПоставщика(ПараметрыПроверки);
	
	Если Результат.Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстСообщения);
		Возврат;
	КонецЕсли;    
	
	Объект.ЭтапыОплат.Очистить();
	
	Если ЗаполнитьПоВыбранномуГрафику Тогда
		
		Обработчик = Новый ОписаниеОповещения("ЗаполнитьЭтапыОплатНаСервере",ЭтаФорма, ЗаполнитьПоВыбранномуГрафику);
		
		ОткрытьФорму("Справочник.ГрафикиОплаты.Форма.ФормаВыбора",,
		ЭтотОбъект,,,,Обработчик,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ЗаполнитьЭтапыОплатНаСервере(Объект.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериод(Период, ДополнительныеПараметры) Экспорт
	
	Если Период = Неопределено Тогда
		Возврат;          
	КонецЕсли;
	
	Объект.НачалоПериода = Период.ДатаНачала;
	Объект.КонецПериода  = Период.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыРасчетаВознагражденияПоДоговору()
	
	Результат = ПолучитьПараметрыРасчетаВознаграждения(Объект.Договор);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин"" не заполнено'"), Объект, "Объект.Магазин",,Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Поставщик"" не заполнено'"), Объект, "Объект.Контрагент",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоказателиТабличнойЧастиТовары(ТекущаяСтрока)
	
	ТекущаяСтрока.ПоказателиРассчитаны   = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаТоваровПриИзменении()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураПересчета = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме",  "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",     ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары,
	ТекущаяСтрока,
	СтруктураДействий,
	КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТоварыКоличестваУпаковок()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары,
	ТекущаяСтрока,
	СтруктураДействий,
	КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЦенаВключаетНДС(ПриИзменении = Ложь)
	
	Если ПриИзменении И Не Объект.УчитыватьНДС И Объект.ЦенаВключаетНДС Тогда
		Объект.ЦенаВключаетНДС = Ложь;
	ИначеЕсли ПриИзменении И Объект.УчитыватьНДС Тогда
		Объект.ЦенаВключаетНДС = Истина;
	КонецЕсли;
	
	Элементы.ЦенаВключаетНДС.ТолькоПросмотр = Не Объект.УчитыватьНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзмененииНаСервере()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, , СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуПродажи");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыРасчетаВознаграждения(Договор)
	
	РеквизитыРасчетаВознаграждения = Новый Массив;
	РеквизитыРасчетаВознаграждения.Добавить("УслугаКомиссионногоВознаграждения");
	РеквизитыРасчетаВознаграждения.Добавить("ПроцентКомиссионногоВознаграждения");
	РеквизитыРасчетаВознаграждения.Добавить("СпособРасчетаКомиссионногоВознаграждения");
	
	Результат =  ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор,
	РеквизитыРасчетаВознаграждения);
	
	Если Не Результат = Неопределено Тогда
		Если Результат.СпособРасчетаКомиссионногоВознаграждения = Неопределено Тогда
			Результат.Удалить("СпособРасчетаКомиссионногоВознаграждения");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаСервере
Процедура ПроизвестиРасчетКомиссионногоВознагражденияНаСервере()
	
	ЗакупкиСервер.РассчитатьСуммуКомиссионногоВознаграждения(Объект);
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	ЭтаФорма.ПоложениеКоманднойПанели = ?(ВидимостьЭлементов, 
	ПоложениеКоманднойПанелиФормы.Авто, 
	ПоложениеКоманднойПанелиФормы.Нет);
	
	Элементы.Шапка.Видимость          = ВидимостьЭлементов;
	
	Элементы.ТоварыРазвернутьСвернутьТЧ.Картинка = ?(ВидимостьЭлементов, 
	БиблиотекаКартинок.РазвернутьТабличнуюЧасть, 
	БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭтапыОплатНаСервере(Результат, ЗаполнитьПоВыбранномуГрафику = Ложь) Экспорт
	
	Если ЗаполнитьПоВыбранномуГрафику И 
		Результат = Неопределено Тогда
		Возврат;          
	КонецЕсли;
	
	ПараметрыЭтаповОплат = Новый Структура();
	ПараметрыЭтаповОплат.Вставить("ЭтапыОплат",      Объект.ЭтапыОплат);
	ПараметрыЭтаповОплат.Вставить("Результат",       Результат);
	ПараметрыЭтаповОплат.Вставить("ДатаПоступления", Объект.Дата);
	ПараметрыЭтаповОплат.Вставить("СуммаДокумента",  Объект.Товары.Итог("СуммаПродажи"));
	
	ЗакупкиСервер.ДобавитьЭтапОплаты(ПараметрыЭтаповОплат);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьЭтапыОплатВХранилище()
	
	ТаблицаОплат = Объект.ЭтапыОплат.Выгрузить();
	
	Адрес = ПоместитьВоВременноеХранилище(ТаблицаОплат, УникальныйИдентификатор);
	
	Возврат Адрес;
	
КонецФункции

&НаСервере
Процедура ОбновитьИтоговыеПоказатели(ЗапросДанных = Ложь, ПересчитатьВзаимозачет = Ложь)
	
	Если ЗапросДанных Тогда
		
		ИтоговыеПоказатели = ЗакупкиСервер.ОбновитьИтоговыеПоказателиВзаиморасчетовПоДокументу(Объект.Ссылка);
		
		СуммаОплачено                    = ИтоговыеПоказатели.СуммаОплачено;
		ДоступноКВзаимозачету            = ИтоговыеПоказатели.ДоступноКВзаимозачету;
		ВзаимозачетПоДокументу           = ИтоговыеПоказатели.ВзаимозачетПоДокументу;
		ДоступноКВзаимозачетуПоДокументу = ИтоговыеПоказатели.ДоступноКВзаимозачетуПоДокументу;
		
	КонецЕсли;
	
	Если ПересчитатьВзаимозачет И НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		НайденныеСтроки = Объект.ЭтапыОплат.НайтиСтроки(Новый Структура("ФормаОплаты", Перечисления.ФормыОплаты.Взаимозачет));
		СуммаВзаимозачет = 0;
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для каждого Строка Из НайденныеСтроки Цикл
				СуммаВзаимозачет = СуммаВзаимозачет + Строка.Сумма;
			КонецЦикла;
		КонецЕсли;
		
		ЗакупкиСервер.РассчитатьСтатусОплатыПоЭтапамОплаты(Объект);
		
	КонецЕсли;
	
	СуммаКОплате = СуммаВсего - СуммаОплачено;
	
	Объект.СуммаДокумента = СуммаВсего;
	Объект.СуммаПродажи   = Объект.Товары.Итог("СуммаПродажи");
	ПроизвестиРасчетКомиссионногоВознагражденияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьНДСПриИзмененииНаСервере()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуСуммПодвала()
	
	Элементы.СуммаНДС.Видимость = Объект.УчитыватьНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента);
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСчетФактурыНаСервере()
	
	Для Каждого ТекущаяСтрокаТоваров Из Объект.Товары Цикл
		
		Если ТипЗнч(ТекущаяСтрокаТоваров.ДокументРеализации) <> Тип("ДокументСсылка.РеализацияТоваров") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрокаТоваров.СчетФактураВыданный) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСчетаФактуры = Новый Структура;
		ДанныеСчетаФактуры.Вставить("ДокументОснование", ТекущаяСтрокаТоваров.ДокументРеализации);
		ДанныеСчетаФактуры.Вставить("Организация", Объект.Организация);
		ДанныеСчетаФактуры.Вставить("Дата", ТекущаяСтрокаТоваров.ДокументРеализации.Дата);
		
		ДокументОбъект = Документы.СчетФактураВыданный.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеСчетаФактуры);
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		ТекущаяСтрокаТоваров.СчетФактураВыданный = ДокументОбъект.Ссылка;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРезультатамПродажНаСервере()
	
	Если ЗакупкиСервер.НайтиПересекающиесяПериодыОтчетов(Объект, "ОтчетКомитентуОПродажах", "Объект.") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(ТоварыОтчетовКомитенту.Период, ДЕНЬ) КАК ДатаРеализации,
	|	ТоварыОтчетовКомитенту.Поставщик КАК Поставщик,
	|	ТоварыОтчетовКомитенту.Договор КАК Договор,
	|	ТоварыОтчетовКомитенту.Организация КАК Организация,
	|	ТоварыОтчетовКомитенту.Склад КАК Склад,
	|	ТоварыОтчетовКомитенту.Номенклатура КАК Номенклатура,
	|	ТоварыОтчетовКомитенту.Характеристика КАК Характеристика,
	|	ТоварыОтчетовКомитенту.НомерГТД КАК НомерГТД,
	|	ТоварыОтчетовКомитенту.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыОтчетовКомитенту.ВидДвижения = &Приход
	|				ТОГДА ТоварыОтчетовКомитенту.Количество
	|			ИНАЧЕ -ТоварыОтчетовКомитенту.Количество
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыОтчетовКомитенту.ВидДвижения = &Приход
	|				ТОГДА ТоварыОтчетовКомитенту.СуммаПродажи
	|			ИНАЧЕ -ТоварыОтчетовКомитенту.СуммаПродажи
	|		КОНЕЦ) КАК СуммаПродажи
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту КАК ТоварыОтчетовКомитенту
	|ГДЕ
	|	ТоварыОтчетовКомитенту.Период >= &НачалоПериода 
	|	И ТоварыОтчетовКомитенту.Период <= &КонецПериода
	|	И ТоварыОтчетовКомитенту.Поставщик = &Поставщик
	|	И ТоварыОтчетовКомитенту.Организация = &Организация
	|	И ТоварыОтчетовКомитенту.Договор = &Договор
	|	И ТоварыОтчетовКомитенту.Регистратор <> &Ссылка
	|	И ТоварыОтчетовКомитенту.Количество <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КОНЕЦПЕРИОДА(ТоварыОтчетовКомитенту.Период, ДЕНЬ),
	|	ТоварыОтчетовКомитенту.Поставщик,
	|	ТоварыОтчетовКомитенту.Договор,
	|	ТоварыОтчетовКомитенту.Организация,
	|	ТоварыОтчетовКомитенту.Склад,
	|	ТоварыОтчетовКомитенту.Номенклатура,
	|	ТоварыОтчетовКомитенту.Характеристика,
	|	ТоварыОтчетовКомитенту.НомерГТД,
	|	ТоварыОтчетовКомитенту.Номенклатура.СтавкаНДС
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыОтчетовКомитенту.ВидДвижения = &Приход
	|				ТОГДА ТоварыОтчетовКомитенту.Количество
	|			ИНАЧЕ -ТоварыОтчетовКомитенту.Количество
	|		КОНЕЦ) <> 0
	|";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Объект.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Объект.КонецПериода));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Поставщик", Объект.Контрагент);
	Запрос.УстановитьПараметр("Договор", Объект.Договор);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
	СтруктураДействий.Вставить("ПересчитатьСумму");

	КэшированныеЗначения = Новый Структура;
		
	Пока Выборка.Следующий() Цикл
		
		ПараметрыЦеныЗакупки = Новый Структура;
		ПараметрыЦеныЗакупки.Вставить("Дата",            Выборка.ДатаРеализации);
		ПараметрыЦеныЗакупки.Вставить("Контрагент",      Объект.Контрагент);
		ПараметрыЦеныЗакупки.Вставить("Договор",         Объект.Договор); 
		ПараметрыЦеныЗакупки.Вставить("Организация",     Объект.Организация);
		ПараметрыЦеныЗакупки.Вставить("Номенклатура",    Выборка.Номенклатура);
		ПараметрыЦеныЗакупки.Вставить("Характеристика",  Выборка.Характеристика);
		ПараметрыЦеныЗакупки.Вставить("Упаковка",        Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
		
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
		НоваяСтрока.СтавкаНДС = УчетНДС.СкорректироватьСтавкуНДС(НоваяСтрока.СтавкаНДС, Выборка.ДатаРеализации);
		НоваяСтрока.Цена = ЗапасыСервер.ПолучитьЦенуПоследнейЗакупкиПоДоговоруКомиссии(ПараметрыЦеныЗакупки);
		НоваяСтрока.ЦенаПродажи = ?(НоваяСтрока.КоличествоУпаковок = 0, НоваяСтрока.СуммаПродажи, НоваяСтрока.СуммаПродажи / НоваяСтрока.КоличествоУпаковок);
		
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(НоваяСтрока, Объект.ЦенаВключаетНДС);
		
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

#Область ПодключаемыеОбоработчики

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СПАРКРиски

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()
	
	ОбновитьОтображениеИндексыСПАРК();
	
КонецПроцедуры

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()
	
	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Однострочный");
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
	ЭтотОбъект.ИндексыСПАРКРиски,
	Неопределено,
	Объект.Контрагент, // Искать по ссылке
	ЭтотОбъект,
	ПараметрыОтображения,
	Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
