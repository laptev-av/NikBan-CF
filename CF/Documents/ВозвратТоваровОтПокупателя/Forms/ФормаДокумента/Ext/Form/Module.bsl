
#Область ПеременныеМодуля

&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; // Используется для передачи текущей строки в обработчик ожидания.

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
			Объект.Продавец = СтрокаРезультата.ВладелецКарты;
			Модифицированность = Истина;
		Иначе
			Объект.ДисконтнаяКарта = СтрокаРезультата.Карта;
			СтруктураРезультат.Вставить("НайденаДисконтнаяКарта");
			Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		
	//ИначеЕсли СтрокаРезультата.Свойство("ШтрихкодУпаковкиЕГАИС")
	//	И ЗначениеЗаполнено(СтрокаРезультата.ШтрихкодУпаковкиЕГАИС)
	//	И СтрокаРезультата.Свойство("ТипУпаковки")
	//	И СтрокаРезультата.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
	//	
	//	ПодключаемоеОборудованиеРТВызовСервера.ДобавитьВложенныеМарки(ЭтотОбъект, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("Номенклатура") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
		
	Если СтрокаРезультата.Свойство("НеобходимостьВводаАкцизнойМарки") Тогда
		СтруктураРезультат.Вставить("НеобходимостьВводаАкцизнойМарки", СтрокаРезультата.НеобходимостьВводаАкцизнойМарки);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	Если СтруктураПараметровКлиента.Свойство("НайденаДисконтнаяКарта") Тогда
		
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			ДисконтнаяКартаПриИзменении(Неопределено);
		КонецЕсли;
		
	//ИначеЕсли СтруктураПараметровКлиента.Свойство("НеобходимостьВводаАкцизнойМарки")
	//	И СтруктураПараметровКлиента.Свойство("АктивизироватьСтроку") Тогда
	//	
	//	СтрокаТовара = Объект.Товары.НайтиПоИдентификатору(СтруктураПараметровКлиента.АктивизироватьСтроку);
	//	Если СтрокаТовара <> Неопределено Тогда
	//		ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(СтрокаТовара);
	//	КонецЕсли;

	Иначе
		ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	КонецЕсли;
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТВызовСервера.ОбработатьДанныеПоНоменклатуреИзТСДСервер(ЭтотОбъект, СтруктураПараметров);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОбработатьДанныеПослеЗагрузкиИзТСД(СтруктураПараметров) Экспорт
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	// Интерфейс ЕГАИС
	//ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, УчетАлкогольнойПродукции);
	//ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	//ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	
	ИдентификаторСтроки = Неопределено;
	ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ТипНоменклатуры"); 
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		СтруктураПараметров.Вставить("ТекстПредупреждения", НСтр("ru = 'Возврат подарочных сертификатов не возможен.'"));
	Иначе
		ДобавленаСтрока = Ложь;
		ТекущаяСтрока = ПодключаемоеОборудованиеРТВызовСервера.ИнициализацияСтрокиТоваров(ЭтотОбъект, СтруктураПараметров, ДобавленаСтрока);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		Если ДобавленаСтрока Тогда
			СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВШапке(Объект));
			СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента");
			
			Если ТипОборудованияКассыККМ = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ") Тогда
				Если Объект.Товары.Количество() > 1 Тогда
					ТекстСообщенияПриОшибке = НСтр("ru = 'Недопустимо добавлять в один чек товары и услуги по различным договорам платежных агентов'");
					СтруктураПараметровПроверки = Новый Структура();
					СтруктураПараметровПроверки.Вставить("ДоговорПлатежногоАгента", Объект.ДоговорПлатежногоАгента);
					СтруктураПараметровПроверки.Вставить("ТекстСообщения", ТекстСообщенияПриОшибке);
					СтруктураДействий.Вставить("ПроверитьОтличныеДоговорыПлатежныхАгентов", СтруктураПараметровПроверки);
				КонецЕсли;
			КонецЕсли;
			
			СтруктураМарки = Новый Структура;
			СтруктураМарки.Вставить("Дата", Объект.Дата);
			СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураМарки);
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		КонецЕсли;
		
		ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ЗавершениеОбработкиСтрокиТоваров(ЭтотОбъект, ТекущаяСтрока, СтруктураДействий);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		Если ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
			//ИнтеграцияЕГАИСРТ.ОбработатьНеобходимостьВводаАкцизнойМарки(СтруктураПараметров, Объект, ТекущаяСтрока);
			Если НЕ ЕстьАлкогольнаяПродукцияЕГАИС Тогда
				ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
				//УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	СтруктураНомера.Вставить("ТекстПредупреждения", НСтр("ru = 'Возврат подарочных сертификатов не возможен.'"));
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьВесЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ТоварыКоличествоУпаковокПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОповещениеВводДатыЧекаККМ(Дата, ДополнительныеПараметры) Экспорт
	Если НЕ Дата = Неопределено Тогда
        
        // &ЗамерПроизводительности
        ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                 Истина, "Документ.ЧекККМ.Форма.ФормаВыбора.Открытие");
        
        СтруктураПараметрыОтбора = Новый Структура;
		СтруктураПараметрыОтбора.Вставить("Номенклатура"  , ДополнительныеПараметры.Номенклатура);
		СтруктураПараметрыОтбора.Вставить("Характеристика", ДополнительныеПараметры.Характеристика);
		СтруктураПараметрыОтбора.Вставить("Дата"          , Дата);
		СтруктураПараметрыОтбора.Вставить("Магазин"       , Объект.Магазин);
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			СтруктураПараметрыОтбора.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
		КонецЕсли;
		СтруктураПараметрыОтбора.Вставить("ОперацияСДенежнымиСредствами", Ложь);
		
		СтруктураПараметры = Новый Структура("СтруктураПараметрыОтбора", СтруктураПараметрыОтбора);
		СтруктураПараметры.Вставить("РежимВыбора", Истина);
		
		ОткрытьФорму("Документ.ЧекККМ.ФормаВыбора", СтруктураПараметры, ДополнительныеПараметры.Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВводДатыНачалаПоискаДокументов(Дата, ДополнительныеПараметры) Экспорт
	Если НЕ Дата = Неопределено Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Номенклатура"  , ДополнительныеПараметры.Номенклатура);
		СтруктураПараметров.Вставить("Характеристика", ДополнительныеПараметры.Характеристика);
		СтруктураПараметров.Вставить("ДатаС"         , Дата);
		СтруктураПараметров.Вставить("Магазин"       , Объект.Магазин);
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИндексТекущейСтроки);
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СписокДокументов = ЗапасыСерверВызовСервера.ПолучитьСписокДокументовСодержащихНоменклатуру(СтруктураПараметров);
		
		Если СписокДокументов.Количество() = 0 Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Документы продажи данного товара не найдены!'"));
			Возврат;
		ИначеЕсли СписокДокументов.Количество() = 1 Тогда
			Выбор = СписокДокументов[0];
			ЗавершитьВыборДокументаПродажи(Выбор.Значение, ТекущаяСтрока)
		Иначе
			ТекстПодсказки = НСтр("ru = 'Выбор документа продажи:'");
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИндексТекущейСтроки", ТекущаяСтрока.ПолучитьИдентификатор());
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВыборЭлементаДокументПродажи", ЭтотОбъект, ДополнительныеПараметры);
			СписокДокументов.ПоказатьВыборЭлемента(ОбработчикОповещения, ТекстПодсказки);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыборЭлементаДокументПродажи(Выбор, ДополнительныеПараметры) Экспорт
	Если НЕ Выбор = Неопределено Тогда
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИндексТекущейСтроки);
		ЗавершитьВыборДокументаПродажи(Выбор.Значение, ТекущаяСтрока)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораСтрокиДокумента(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИндексТекущейСтроки);
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, РезультатОткрытияФормы, , "Сумма");
		
		Если ОтчетОРозничныхПродажахПоЧекуККМСервер(ТекущаяСтрока.ЧекККМ) = ДополнительныеПараметры.ВыбранныйДокумент Тогда
		
			ТекущаяСтрока.ЧекККМ = ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка");
		
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУказаниеСерий(ЗначениеВозврата, ПараметрыФормыУказанияСерий) Экспорт
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("ЗначениеВозврата", ЗначениеВозврата);
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	// ИнтеграцияЕГАИС
	//ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	//ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	// Конец ИнтеграцияЕГАИС
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеУстановкаКомпонентыСклонения(ДополнительныеПараметры) Экспорт
	ФИОФизЛица = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(ФИОФизЛицаИП, 3);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросПроведениеПередПечатьюЧека(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Попытка
			Если ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
				НапечататьЧекКлиент();
			КонецЕсли;
		Исключение
			ПоказатьПредупреждение(,НСтр("ru = 'Не удалось выполнить проведение документа'"));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоНаименованию(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ЗавершитьОбработкуДанныхПоКодуКлиент(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданиеИВыборНовойХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ТекущаяСтрока.Характеристика = Результат;
	ТоварыХарактеристикаПриИзменении(Неопределено);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента, Элементы.КартинкаСостоянияДокумента.Подсказка, РазрешеноПроведение);

	БезНДС = НСтр("ru = 'Без НДС'");
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	Если НЕ ЗначениеЗаполнено(Объект.АналитикаХозяйственнойОперации) Тогда
		
		Объект.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.ПолучитьОперациюПоУмолчанию(Перечисления.ХозяйственныеОперации.ВозвратОтПокупателя);
		
	КонецЕсли;
		
	Если Параметры.Ключ.Пустая() Тогда
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование)
			И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
			УстановитьПризнакиУчетаНДСПоОснованию(Объект.ДокументОснование);
		КонецЕсли;
		
		УстановитьДоступностьЦенаВключаетНДС();
		
		Если ЗначениеЗаполнено(Объект.Магазин) Тогда
				
			Если Объект.Магазин.СкладУправляющейСистемы Тогда
				
				Объект.Склад = Справочники.Склады.ПустаяСсылка();
				
			ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
				
				Объект.Склад = Объект.Магазин.СкладПродажи;
				
				Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
					
					Объект.Организация = Объект.Склад.Организация;
					ЗаполнитьСистемуНалогооблажения(Объект.Дата, Объект.Организация);
					
				КонецЕсли;
			КонецЕсли;
				
		ИначеЕсли ЗначениеЗаполнено(Объект.Склад) Тогда
			
			Объект.Магазин = Объект.Склад.Магазин;
			
			Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
				
				Объект.Организация = Объект.Склад.Организация;
				ЗаполнитьСистемуНалогооблажения(Объект.Дата, Объект.Организация);
				
			КонецЕсли;
				
		КонецЕсли;
		ПодключаемоеОборудованиеРТ.ЗаполнитьВидНалога(Объект);
		
		НастроитьОтображениеРеквизитовСчетаФактуры(
		ЭтотОбъект,
		ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ВозвратТоваровОтПокупателя.ПараметрыУказанияСерий(Объект));
	
	КонецЕсли;
	
	ЭтоLinuxСервер = ОбщегоНазначенияРТВызовСервера.ЭтоLinuxСервер();
	
	Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		ЗаполнениеФИО();
	КонецЕсли;
	
	УправлениеЭлементамиФормыПриСозданииНаСервере();
	
	ЗаполнитьСтавкиНДС();
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	ПараметрыСобытийПО = Новый Структура;
	//ПараметрыСобытийПО.Вставить("ПоискАкцизнойМарки", Истина);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
		БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект, , , "НомерСтроки");
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары);
		ОбновитьРеквизитыОбменаСГИСМ();
	КонецЕсли;
	УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов();
	УстановитьТекущуюСтраницуСуммПодвала();
	
	НастроитьФормуПоДополнительнымПравам();
	УстановитьДоступностьКомандБуфераОбмена();
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	ЗаполнитьСистемуНалогооблажения(Объект.Дата, Объект.Организация);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(Объект.Товары);
	
	КассаККМ = Объект.КассаККМ;
	КассаККМПриИзмененииСервер();
	
	// ИнтеграцияЕГАИС
	УчетАлкогольнойПродукции = ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(Объект.Дата);
	ЕстьАлкогольнаяПродукцияЕГАИС = Ложь;
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если СтрокаТовары.НеобходимостьВводаАкцизнойМарки Тогда
			ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
	
	СформироватьТекстДокументаЕГАИС();
	// Конец ИнтеграцияЕГАИС
	
	// ИнтеграцияИС
	ИнтеграцияИС.ПриСозданииНаСервереВФормеДокументаОснования(ЭтотОбъект, Объект);
	// Конец ИнтеграцияИС
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ЗначениеЗаполнено(Объект.ФизЛицо) И ЭтоLinuxСервер Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеУстановкаКомпонентыСклонения", ЭтотОбъект);
		Если ОбщегоНазначенияРТКлиент.УстановитьКомпонентуСклонения(ОбработчикОповещения) Тогда
			ФИОФизЛица = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(ФИОФизЛицаИП, 3);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
	УстановитьСистемуНалогообложенияНаФорме();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтеграцияЕГАИС
	//ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	//ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	// Конец ИнтеграцияЕГАИС
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
  	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
		// ИнтеграцияЕГАИС
		//ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
		// Конец ИнтеграцияЕГАИС
		
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокумента"
	 ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаСписка" Тогда
		
		НастроитьОтображениеРеквизитовСчетаФактуры(ЭтотОбъект, ВыбранноеЗначение);

	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Или ИмяСобытия = "ВставкаСтрокИзБуфераОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбмена();
	КонецЕсли;
	
	// ИнтеграцияГИСМ
	Если ИмяСобытия = "Запись_МаркировкаТоваровГИСМ"
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		ОбновитьРеквизитыОбменаСГИСМ();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияГИСМ"
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		ОбновитьРеквизитыОбменаСГИСМ();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменГИСМ"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусГИСМФормахВДокументах)) Тогда
		
		ОбновитьРеквизитыОбменаСГИСМ();
		
	КонецЕсли;
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияЕГАИС
	Если ИмяСобытия = "Запись_АктСписанияЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ЧекЕГАИСВозврат"
		И Параметр.Основание = Объект.Ссылка Тогда
		ЕстьПереданныеЧекиЕГАИС = ЕстьПереданныеЧекиЕГАИС(Объект.Ссылка);
		УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменЕГАИС"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусЕГАИСВФормахДокументов)) Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	// Конец ИнтеграцияЕГАИС
	
	// ИнтеграцияИС
	ИнтеграцияИСКлиент.ОбработкаОповещенияВФормеДокументаОснования(
		ЭтотОбъект,
		Объект,
		ИмяСобытия,
		Параметр,
		Источник);
	// Конец ИнтеграцияИС
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен()
		И НЕ ЕстьПереданныеЧекиЕГАИС Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ПредъявленСчетФактура И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПараметрыЗаписи.Вставить("ДанныеСчетаФактуры",
			ЗакупкиСервер.ДанныеСчетаФактурыСтруктурой(
				Неопределено,
				ТекущийОбъект.Организация,
				ТекущийОбъект.Контрагент,
				ТекущийОбъект.НомерСчетаФактуры,
				ТекущийОбъект.ДатаСчетаФактуры));
		ТекущийОбъект.ПредъявленСчетФактура = Ложь;
	Иначе
		ПараметрыЗаписи.Вставить("ДанныеСчетаФактуры", Неопределено);
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьДоступностьЦенаВключаетНДС();
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	СтруктураМарки = Новый Структура;
	СтруктураМарки.Вставить("Дата", Объект.Дата);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары, СтруктураМарки);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	УстановитьТекущуюСтраницуСуммПодвала();
	ЗаполнитьСистемуНалогооблажения(Объект.Дата, Объект.Организация);
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект, , , "НомерСтроки");
	
	НастроитьОтображениеРеквизитовСчетаФактуры(
		ЭтотОбъект,
		ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
		
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ВозвратТоваровОтПокупателя.ПараметрыУказанияСерий(ТекущийОбъект));
	ОбновитьРеквизитыОбменаСГИСМ();
	
	// ИнтеграцияЕГАИС
	ЕстьПереданныеЧекиЕГАИС = ЕстьПереданныеЧекиЕГАИС(Объект.Ссылка);
	СформироватьТекстДокументаЕГАИС();
	// Конец ИнтеграцияЕГАИС
	
	// ИнтеграцияИС
	ИнтеграцияИС.ПриЧтенииНаСервереВФормеДокументаОснования(ЭтотОбъект, Объект);
	// Конец ИнтеграцияИС
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	СтруктураМарки = Новый Структура;
	СтруктураМарки.Вставить("Дата", Объект.Дата);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары, СтруктураМарки);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект, , , "НомерСтроки");
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
	 И ПараметрыЗаписи.ДанныеСчетаФактуры <> Неопределено Тогда
		
		ДанныеСчетаФактуры = ЗакупкиСервер.ДанныеСчетаФактурыСтруктурой(
			ТекущийОбъект.Ссылка,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Организация,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Контрагент,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Номер,
			ПараметрыЗаписи.ДанныеСчетаФактуры.ДатаСоставления);
		НастроитьОтображениеРеквизитовСчетаФактуры(
			ЭтотОбъект,
			ЗакупкиСервер.ВвестиСчетФактуру(ДанныеСчетаФактуры, Истина));
	ИначеЕсли ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		НастроитьОтображениеРеквизитовСчетаФактуры(
			ЭтотОбъект,
			ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтеграцияГИСМ
	ОбновитьРеквизитыОбменаСГИСМ();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияЕГАИС
	СформироватьТекстДокументаЕГАИС();
	УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
	// Конец ИнтеграцияЕГАИС
	
	// ИнтеграцияИС
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеДокументаОснования(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтеграцияИС
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);

	// ИнтеграцияЕГАИС
	//ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, УчетАлкогольнойПродукции);
	//ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	//ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	// Конец ИнтеграцияЕГАИС
	
	// &ЗамерПроизводительности 
    ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности 
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
								"Документ.ВозвратТоваровОтПокупателя.ФормаДокумента.Запись",
															Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);

КонецПроцедуры

&НаКлиенте
Процедура АналитикаХозяйственнойОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
			Истина, "Справочник.АналитикаХозяйственныхОпераций.Форма.ФормаВыбора.Открытие");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДисконтнаяКартаПриИзменении(Элемент)
	
	ИнформационныеКартыКлиент.ПровестиОпросВладельца(Объект.ДисконтнаяКарта, ОбщегоНазначенияКлиент.ДатаСеанса());
	
	ПриИзмененииДисконтнаяКартаСервер();
	
	Если ЭтоLinuxСервер Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеУстановкаКомпонентыСклонения", ЭтотОбъект);
		Если ОбщегоНазначенияРТКлиент.УстановитьКомпонентуСклонения(ОбработчикОповещения) Тогда
			ФИОФизЛица = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(ФИОФизЛицаИП, 3);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		ПриИзмененииМагазинСервер();
	Иначе
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	КонецЕсли;
		
	УстановитьДоступностьЭлементов();
	
	// ИнтеграцияГИСМ
	ОбновитьРеквизитыОбменаСГИСМ();
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПриИзмененииСкладСервер();
	КонецЕсли;
	
	УстановитьСистемуНалогообложенияНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьНДСПриИзменении(Элемент)
	
	Если Объект.УчитыватьНДС = Ложь Тогда
		
		Объект.ЦенаВключаетНДС = Ложь;
		
	КонецЕсли;

	ПриИзмененииУчитыватьНДССервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, , СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		
КонецПроцедуры

&НаКлиенте
Процедура ПредъявленСчетФактураПриИзменении(Элемент)
	
	НастроитьОтображениеРеквизитовСчетаФактуры(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
	УстановитьСистемуНалогообложенияНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗакупкиКлиент.ВвестиСчетФактуру(ЭтотОбъект, Объект.Организация, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСчетовФактурНажатие(Элемент)
	
	СтруктураОтбор = Новый Структура("ДокументОснование, Организация, ПометкаУдаления", Объект.Ссылка, Объект.Организация, Ложь);
	
	ОткрытьФорму(
		"Документ.СчетФактураПолученный.ФормаСписка",
		Новый Структура("Отбор", СтруктураОтбор),
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	ЗаполнениеФизЛицаСервер();
	
	Если ЭтоLinuxСервер Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеУстановкаКомпонентыСклонения", ЭтотОбъект);
		Если ОбщегоНазначенияРТКлиент.УстановитьКомпонентуСклонения(ОбработчикОповещения) Тогда
			ФИОФизЛица = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(ФИОФизЛицаИП, 3);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	ДатаПриИзмененииНаСервере();
	
	Если Объект.Товары.Количество() > 0 Тогда 
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", 
			ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВШапке(Объект));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, , СтруктураДействий, Неопределено);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ЗаполнитьСтавкиНДС();
	
	// ИнтеграцияЕГАИС
	УчетАлкогольнойПродукции = ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(Объект.Дата);
	// Конец ИнтеграцияЕГАИС
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	Объект.КассаККМ = КассаККМ;
	КассаККМПриИзмененииКлиент();
	
КонецПроцедуры

// ИнтеграцияЕГАИС
&НаКлиенте
Процедура ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСКлиент.ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец ИнтеграцияЕГАИС

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ТоварыВводДополнительнойИнформации(Элемент, Ложь);
	
	// ИнтеграцияЕГАИС
	//Если Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыСтатусУказанияАкцизныхМарок 
	//	И не Элементы.Товары.ТекущиеДанные = Неопределено
	//	и не Элементы.Товары.ТекущиеДанные.СтатусУказанияАкцизныхМарок = 0 Тогда
	//	ИдентификаторСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	//	ВвестиАкцизнуюМарку(ИдентификаторСтроки, Элементы.Товары.ТекущиеДанные, "КоличествоУпаковок");
	//КонецЕсли;
	// Конец ИнтеграцияЕГАИС
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
		ТекущаяСтрока.КлючСвязи = 0;
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);
	
	РедактированиеТЧТовары = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 1 Тогда
		Объект.ДоговорПлатежногоАгента = ТекущиеДанные.ДоговорПлатежногоАгента;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущиеДанные);
	
	РедактированиеТЧТовары = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ТоварыПослеУдаленияСервер();
	
	// ИнтеграцияЕГАИС
	Если ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		ЕстьАлкогольнаяПродукцияЕГАИС = Ложь;
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если СтрокаТовары.НеобходимостьВводаАкцизнойМарки Тогда
				ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтеграцияЕГАИС
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
		// Нужно удалить старые акцизные марки.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязи", ТекущаяСтрока.КлючСвязи);
		
		МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
			Объект.АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураМарки = Новый Структура;
	СтруктураМарки.Вставить("Дата", Объект.Дата);
	СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураМарки);
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВШапке(Объект));
	СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущаяСтрока);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	
	// ИнтеграцияЕГАИС
	Если Не ЕстьАлкогольнаяПродукцияЕГАИС = ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
		Если ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
			ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
			УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
		Иначе
			ЕстьАлкогольнаяПродукцияЕГАИС = Ложь;
			Для Каждого СтрокаТовары Из Объект.Товары Цикл
				Если СтрокаТовары.НеобходимостьВводаАкцизнойМарки Тогда
					ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	// Конец ИнтеграцияЕГАИС
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	// ИнтеграцияЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	// Конец ИнтеграцияЕГАИС
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ПриИзмененииТоварыКоличестваУпаковок();
	
	// ИнтеграцияЕГАИС
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	// Конец ИнтеграцияЕГАИС
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЧекККМПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииТоварыЧекККМСервер(ТекущаяСтрока.ЧекККМ);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьДанныеПоДокументуПродажи", "ЧекККМ");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЧекККМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Перем ДатаС;
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	// Найдем чеки по дате
	
	ТекстПодсказки = НСтр("ru = 'Введите дату чека:'");
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Номенклатура"  , ТекущаяСтрока.Номенклатура);
	ДополнительныеПараметры.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
	ДополнительныеПараметры.Вставить("Элемент"       , Элемент);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВводДатыЧекаККМ", ЭтотОбъект, ДополнительныеПараметры);
	ДатаИсходная = Объект.Дата - 14*24*60*60;
	ЧастьДаты = ЧастиДаты.Дата;
	ПоказатьВводДаты(ОбработчикОповещения, ДатаИсходная, ТекстПодсказки, ЧастьДаты) 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументПродажиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	// Найдем документы оплаты по диапазону.
	
	ТекстПодсказки = НСтр("ru = 'Введите дату начала поиска документов:'");
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Номенклатура"  , ТекущаяСтрока.Номенклатура);
	ДополнительныеПараметры.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
	ДополнительныеПараметры.Вставить("Элемент"       , Элемент);
	
	ДополнительныеПараметры.Вставить("ИндексТекущейСтроки", ТекущаяСтрока.ПолучитьИдентификатор());
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВводДатыНачалаПоискаДокументов", ЭтотОбъект, ДополнительныеПараметры);
	ДатаИсходная = ДобавитьМесяц(Объект.Дата, -1);
	ЧастьДаты = ЧастиДаты.Дата;
	ПоказатьВводДаты(ОбработчикОповещения, ДатаИсходная, ТекстПодсказки, ЧастьДаты) 
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВсегоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураПересчета = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСПоСуммеСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьСуммуПоСуммеСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках", СтруктураПересчета);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если РедактированиеТЧТовары Тогда
		ТоварыВводДополнительнойИнформации(Элемент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ИнтеграцияИС

// ИнтеграцияИС

&НаКлиенте
Процедура Подключаемый_ПолеИнтеграцииИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		ЭтотОбъект,
		Объект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(ДополнительныеПараметры)
	
	ИнтеграцияИС.ОбновитьПолеИнтеграцииВФормеДокументаОснования(ЭтотОбъект, Объект, ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ИнтеграцияИС

#КонецОбласти


&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'возврат товаров от покупателя'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	ПараметрыФормы.Вставить("РежимПодбораБезУслуг", Ложь);
	ПараметрыФормы.Вставить("РежимПодбораБезСертификатов", Истина);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если НЕ ЕстьПравоИзменятьЦену() Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбиратьНенайденные", Ложь);
	ДополнительныеПараметры.Вставить("ОбработатьПослеЗагрузки", Истина);
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ОповещенияПриПолученииВеса = Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект);
	ПодключаемоеОборудованиеРТКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ОповещенияПриПолученииВеса, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	РазвернутьСвернутьТЧНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВвестиИсправлениеСчетаФактуры(Команда)
	
	ЗакупкиКлиент.ВвестиСчетФактуру(ЭтотОбъект, Объект.Организация, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагента(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПробитьЧек(Команда)
	
	Если Объект.ПробитЧек Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросПроведениеПередПечатьюЧека", ЭтотОбъект);
	
	Если ФинансыКлиент.ПроверитьВозможностьПечатиЧека(ОбработчикОповещения, ЭтотОбъект) Тогда
		НапечататьЧекКлиент();
	КонецЕсли;
	
КонецПроцедуры

// ИнтеграцияЕГАИС
&НаКлиенте
Процедура СоздатьНаОснованииЧекЕГАИСВозврат(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные еще не записаны.
				|Выполнение действия ""%1"" возможно только после записи данных.
				|Данные будут записаны.'"),
			НСтр("ru='Чек ЕГАИС на возврат: создать на основании'"));
			
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьНаОснованииЧекЕГАИСВозвратПодтверждениеЗаписи", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	СоздатьЧекЕГАИСВозвратПослеЗаписиВозвратаОтПокупателя();
	
КонецПроцедуры
// Конец ИнтеграцияЕГАИС

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)

	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	ПолучитьСтрокиИзБуфераОбмена();
	КоличествоВставленных = Объект.Товары.Количество() - КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
КонецПроцедуры
// Конец ИнтеграцияЕГАИС

&НаКлиенте
Процедура ПоискПоНаименованию(Команда)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Магазин",Объект.Магазин);
	РаботаСПравиламиИменованияКлиент.ПоискПоНаименованию(ЭтаФорма,ПараметрыПоиска);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	НастроитьОтображениеРеквизитовСчетаФактуры(
			ЭтотОбъект,
			ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
			
			
	ПодключаемоеОборудованиеРТ.ЗаполнитьВидНалога(Объект);
	
	ЗаполнитьСистемуНалогооблажения(Объект.Дата, Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	ПоложениеКоманднойПанели = ?(ВидимостьЭлементов, ПоложениеКоманднойПанелиФормы.Авто, ПоложениеКоманднойПанелиФормы.Нет);
	Элементы.ГруппаОснование.Видимость                = ВидимостьЭлементов;
	Элементы.Шапка.Видимость                          = ВидимостьЭлементов;
	Элементы.ГруппаСчетФактура.Видимость              = ВидимостьЭлементов;
	
	
	Элементы.РазвернутьСвернутьТЧ.Картинка = ?(ВидимостьЭлементов, БиблиотекаКартинок.РазвернутьТабличнуюЧасть, БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(ТекущееПоле)
	
	ВводСерийРазрешен = Истина;
	ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий, ВводСерийРазрешен);
	Если НЕ ВводСерийРазрешен Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	ПараметрыФормыУказанияСерий.Вставить("ТекущееПоле", ТекущееПоле);
	ПараметрыФормыУказанияСерий.Вставить("КоличествоЕдиницДоПересчета");
	
	ОбработчикУказанияСерий = Новый ОписаниеОповещения("ОбработатьУказаниеСерий", ЭтотОбъект, ПараметрыФормыУказанияСерий);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, ПараметрыФормыУказанияСерий, ЭтотОбъект,,,, ОбработчикУказанияСерий, РежимБлокировки);
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецПроцедуры

// Процедура устанавливает доступность.
//
&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()
	
	ИзменятьЦену = ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену;
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыЦена.ТолькоПросмотр, ИзменятьЦену);
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСумма.ТолькоПросмотр, ИзменятьЦену);
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСуммаВсего.ТолькоПросмотр, ИзменятьЦену);
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Продавец.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьПродавца);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыПродавец.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьПродавца);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);

	РазрешитьОформлениеВозвратовОтПокупателяБезДокументовПродажи = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОформлениеВозвратовОтПокупателяБезДокументовПродажи, Ложь);
	
	Элементы.ТоварыДокументПродажи.АвтоОтметкаНезаполненного = НЕ РазрешитьОформлениеВозвратовОтПокупателяБезДокументовПродажи;
	
КонецПроцедуры

// Процедура заполняет товары из подбора.
// Параметры: 
//  ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, Упаковка, Цена, КоличествоУпаковок, Сумма");
		
		СтруктураДействий = Новый Структура;

		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВШапке(Объект));
		СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ЗаполнитьСтатусыУказанияСерийСервер();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	СтруктураМарки = Новый Структура;
	СтруктураМарки.Вставить("Дата", Объект.Дата);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары, СтруктураМарки);
	
	// ИнтеграцияЕГАИС
	Если Не ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если СтрокаТовары.НеобходимостьВводаАкцизнойМарки Тогда
				ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
	КонецЕсли;
	// Конец ИнтеграцияЕГАИС
	
КонецПроцедуры

&НаСервере
Функция ОтчетОРозничныхПродажахПоЧекуККМСервер(ЧекККМ)
	
	Возврат ЧекККМ.ОтчетОРозничныхПродажах
	
КонецФункции

&НаСервере
Процедура ПриИзмененииДисконтнаяКартаСервер()
	
	ВладелецКарты = Объект.ДисконтнаяКарта.ВладелецКарты;
	
	Если ЗначениеЗаполнено(ВладелецКарты) И ТипЗнч(ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") Тогда
	
		Объект.Контрагент = ВладелецКарты;
	
	ИначеЕсли ЗначениеЗаполнено(ВладелецКарты) И ТипЗнч(ВладелецКарты) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
	
		Объект.ФизЛицо = ВладелецКарты;
		ЗаполнениеФизЛицаСервер();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет склад при изменении магазина.
//
&НаСервере
Процедура ПриИзмененииМагазинСервер()
	
	Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПродажиПоУмолчанию(Объект.Магазин,,Объект.Склад, Пользователи.ТекущийПользователь());
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПриИзмененииСкладСервер();
	КонецЕсли;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ВозвратТоваровОтПокупателя.ПараметрыУказанияСерий(Объект));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСкладСервер()

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Объект.Организация = Объект.Склад.Организация;
		
		ПодключаемоеОборудованиеРТ.ЗаполнитьВидНалога(Объект);
		ЗаполнитьСистемуНалогооблажения(Объект.Дата, Объект.Организация);
		
		НастроитьОтображениеРеквизитовСчетаФактуры(
			ЭтотОбъект,
			ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
		
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВШапке(Объект));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
		
		СтруктураТЧ = Новый Структура;
		СтруктураТЧ.Вставить("СтрокиТЧ", Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		
	КонецЕсли;

	ЗаполнитьВидНалога();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидНалога()
	
	ПодключаемоеОборудованиеРТ.ЗаполнитьВидНалога(Объект);
	
КонецПроцедуры

&НаСервере
// Установка дисконтной карты по чеку ККМ.
//
// Параметры:
//  Нет
//
Процедура ПриИзмененииТоварыЧекККМСервер(ЧекККМ)

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ДисконтнаяКарта"        , "ДисконтнаяКарта");
	СтруктураРеквизитов.Вставить("ВладелецДисконтнойКарты", "ВладелецДисконтнойКарты");
	СтруктураРеквизитов.Вставить("ЦенаВключаетНДС"        , "ЦенаВключаетНДС");
	СтруктураРеквизитов.Вставить("Дата"                   , "Дата");
	СтруктураРеквизитов.Вставить("НомерЧекаККМ"           , "НомерЧекаККМ");
	ЗначенияРеквизитов = ОбщегоНазначенияРТ.ПолучитьЗначенияРеквизитовОбъекта(ЧекККМ, СтруктураРеквизитов);
	
	Объект.ДисконтнаяКарта         = ЗначенияРеквизитов.ДисконтнаяКарта;
	Объект.ВладелецДисконтнойКарты = ЗначенияРеквизитов.ВладелецДисконтнойКарты;
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.НомерЧекаККМ) Тогда
		Объект.ЧекНомер = ЗначенияРеквизитов.НомерЧекаККМ;
		Объект.ЧекДата  = ЗначенияРеквизитов.Дата;
	КонецЕсли;

КонецПроцедуры

// Заполняет реквизиты документа по умолчанию в зависимости от выбранного налогообложения НДС.
//
&НаСервере
Процедура ПриИзмененииУчитыватьНДССервер()
	
	УстановитьДоступностьЦенаВключаетНДС(Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВШапке(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	УстановитьТекущуюСтраницуСуммПодвала();
	
КонецПроцедуры

// Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора.
// Параметры:
//  Отказ - Булево
//
&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин"" не заполнено'"), Объект, "Объект.Магазин",,Отказ);
	КонецЕсли;
		
КонецПроцедуры

// Процедура управляет видимостью и доступностью элементов формы на сервере.
//
&НаСервере
Процедура УправлениеЭлементамиФормыПриСозданииНаСервере()
		
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Элементы.Магазин.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Магазин);
		Элементы.Склад.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Склад);
		Элементы.Организация.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Организация);
		
	Иначе
		
		Элементы.ДокументОснование.Видимость = Ложь;
		Элементы.Магазин.ТолькоПросмотр = Ложь;
		Элементы.Склад.ТолькоПросмотр = Ложь;
		Элементы.Организация.ТолькоПросмотр = Ложь;
		
	КонецЕсли;
	
	Если Объект.Магазин.СкладУправляющейСистемы ИЛИ НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		
		Элементы.Склад.ТолькоПросмотр = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

// Устанавливает доступность поля ЦенаВключаетНДС.
//
&НаСервере
Процедура УстановитьДоступностьЦенаВключаетНДС(ПриИзменении = Ложь)

	Если ПриИзменении И Не Объект.УчитыватьНДС И Объект.ЦенаВключаетНДС Тогда
		Объект.ЦенаВключаетНДС = Ложь;
	ИначеЕсли ПриИзменении И Объект.УчитыватьНДС Тогда
		Объект.ЦенаВключаетНДС = Истина;
	КонецЕсли;
	
	Элементы.ЦенаВключаетНДС.ТолькоПросмотр = Не Объект.УчитыватьНДС;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	Элементы.Склад.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Магазин);
	
КонецПроцедуры

// Процедура учитывает изменение параметров налогообложения в документе.
//
&НаСервере
Процедура УстановитьТекущуюСтраницуСуммПодвала()
	
	Если Объект.УчитыватьНДС Тогда
		Элементы.ГруппаПодвалСтраницы.ТекущаяСтраница = Элементы.ГруппаСуммыНДС;		
	Иначе
		Элементы.ГруппаПодвалСтраницы.ТекущаяСтраница = Элементы.ГруппаСуммы;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакиУчетаНДСПоОснованию(Основание)

	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "ЦенаВключаетНДС, УчитыватьНДС");
	
	Объект.УчитыватьНДС 	= РеквизитыОснования.УчитыватьНДС;
	Объект.ЦенаВключаетНДС 	= РеквизитыОснования.ЦенаВключаетНДС;

КонецПроцедуры

&НаСервере
Функция ЕстьПравоИзменятьЦену()
	
	Возврат УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов()
	
	Если НЕ ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры И НЕ Справочники.Номенклатура.ИспользуютсяПодарочныеСертификаты() Тогда
		Элементы.ТоварыСтатусыСерийИПодарочныхСертификатов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеРеквизитовСчетаФактуры(Форма, ПараметрыПредставления = Неопределено)
	
	Если ПараметрыПредставления <> Неопределено Тогда
		
		Если ПараметрыПредставления.РазрешенВводНового Тогда
			Форма.Элементы.ГруппаСтраницыСчетФактура.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаРеквизитыСчетаФактуры;
		Иначе
			Форма.ТекстСчетФактура = ПараметрыПредставления.ТекстСчетФактура;
			Форма.Элементы.ТекстСчетФактура.Гиперссылка = ПараметрыПредставления.ГиперссылкаСчетФактура;
			Форма.Элементы.СписокСчетовФактур.Заголовок = ПараметрыПредставления.ТекстСписок;
			Форма.Элементы.СписокСчетовФактур.Гиперссылка = ЗначениеЗаполнено(ПараметрыПредставления.ТекстСписок);
			Форма.Элементы.ВвестиИсправлениеСчетаФактуры.Доступность = ПараметрыПредставления.РазрешеныИсправления;
			Форма.Элементы.ГруппаСтраницыСчетФактура.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаТекстСчетФактура;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.Элементы.ГруппаСтраницыСчетФактура.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаРеквизитыСчетаФактуры Тогда
		
		ИменаЭлементов = Новый Массив;
		ИменаЭлементов.Добавить("НомерСчетаФактуры");
		ИменаЭлементов.Добавить("ДатаСчетаФактуры");
		ИменаЭлементов.Добавить("ВалютаСчетаФактуры");
		
		Если Форма.Объект.ПредъявленСчетФактура Тогда
			ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "Доступность", Истина);
			ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "АвтоОтметкаНезаполненного", Истина);
		Иначе
			ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "Доступность", Ложь);
			ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "АвтоОтметкаНезаполненного", Ложь);
			ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "ОтметкаНезаполненного", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеФизЛицаСервер()
	
	Если Не ТипЗнч(Объект.ФизЛицо) = Тип("Строка") И ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		
		УдостоверениеЛичности = РегистрыСведений.ДокументыФизическихЛиц.ДокументУдостоверяющийЛичностьФизлица(Объект.Физлицо);
		Объект.ПоДокументу = УдостоверениеЛичности;
		Объект.ДатаРождения = Объект.ФизЛицо.ДатаРождения;
		
	КонецЕсли;
	
	ЗаполнениеФИО();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеФИО()
	
	Если Не ТипЗнч(Объект.ФизЛицо) = Тип("Строка") И ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		ФизЛицоФИО = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(, Новый Структура("ФизЛицо", Объект.ФизЛицо)); 
		ФИОФизЛицаИП = ФизЛицоФИО.Фамилия + " " + ФизЛицоФИО.Имя + " " + ФизЛицоФИО.Отчество;

		Если СокрЛП(ФИОФизЛицаИП) = "" Тогда
			ФИОФизЛицаИП = Объект.ФизЛицо.Наименование;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект.ФизЛицо) = Тип("Строка") Тогда
		ФИОФизЛицаИП = Объект.ФизЛицо;
	Иначе
		ФИОФизЛицаИП = ""
	КонецЕсли;
	Если Не ЭтоLinuxСервер Тогда
		ФИОФизЛица = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(ФИОФизЛицаИП, 3);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Серии

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку");
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьВыборДокументаПродажи(ВыбранныйДокумент, ТекущаяСтрока)
	
	Если ЗначениеЗаполнено(ВыбранныйДокумент)  Тогда
		Если Тип("ДокументСсылка.ОтчетОРозничныхПродажах") = ТипЗнч(ВыбранныйДокумент) Тогда
			МетаданныеНаименование = "ОтчетОРозничныхПродажах";
		Иначе
			МетаданныеНаименование = "РеализацияТоваров";
		КонецЕсли;
		
		РезультатОтбораСтрок = ОбработкаТабличнойЧастиТоварыВызовСервера.ПолучитьСтрокиДокументаПродажиНаКлиента(ВыбранныйДокумент, МетаданныеНаименование, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика, УникальныйИдентификатор);
		
		Если ЗначениеЗаполнено(РезультатОтбораСтрок)  Тогда
			
			ПараметрыФормы = Новый Структура("АдресТаблицы", РезультатОтбораСтрок);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИндексТекущейСтроки", ТекущаяСтрока.ПолучитьИдентификатор());
			ДополнительныеПараметры.Вставить("ВыбранныйДокумент"  , ВыбранныйДокумент);
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораСтрокиДокумента", ЭтотОбъект, ДополнительныеПараметры);
			Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ОткрытьФорму("Обработка.ВозвратТоваровОтРозничногоПокупателя.Форма.ФормаВыбораСтрокиДокумента", ПараметрыФормы,,,,, ОбработчикОповещения, Режим);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияСервер()
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	УдалитьНесвязанныеАкцизы();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНесвязанныеАкцизы()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеАкцизы(ЭтотОбъект);
	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

// Процедура - Отображение результата проверки контрагентов в документе.
//
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

// Процедура - Запуск фонового задания по проверке контрагента.
//
// Параметры:
//  ПараметрыФоновогоЗадания	 - ТаблицаФормы - Если изменения контрагента или даты произошли в табличной части.
//								 - ПолеФормы - Элемент управления, содержащий контрагента или счет-фактуру, в случае, 
//		если произошло изменение в контрагенте, находящегося в шапке или в счете-фактуре, находящегося в подвале.
//								 - Дата - Дата документа, в случае если произошло изменение даты
//								 - Неопределено - если требуется проверка всех контрагентов в документе.
//								 - Булево - если это запуск проверки контрагента при создании на сервере.
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВводДополнительнойИнформации(Элемент, ЗавершатьРедактирование = Истина)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыУпаковка 
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕдиницаИзмерения Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
		
			Если ТекущиеДанные.СтатусУказанияСерий <> 0 Тогда
				Если ЗавершатьРедактирование Тогда
					Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				КонецЕсли;
				Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок Тогда
					УказатьСерии("КоличествоУпаковок");
				Иначе
					УказатьСерии("Упаковка");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТоварыКоличестваУпаковок(ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);

КонецПроцедуры

&НаСервере
Функция ВходящиеДанныеДляФРСервер(РаспределениеВыручкиПоСекциям, НомерЧека)
	
	Возврат Документы.ВозвратТоваровОтПокупателя.ПодготовитьДанныеДляПробитияЧека(Объект.Ссылка, РаспределениеВыручкиПоСекциям, НомерЧека);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСистемуНалогооблажения(ДатаДокумента, Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СистемыНалогообложенияОрганизацийСрезПоследних.СистемаНалогообложения,
	|	СистемыНалогообложенияОрганизацийСрезПоследних.ОбъектНалогообложения
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&ДатаДокумента, Организация = &Организация) КАК СистемыНалогообложенияОрганизацийСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация"  , Организация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
			СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
			ОбъектНалогооблаженияПоУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка();
		Иначе
			СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная;
			
			Если Выборка.ОбъектНалогообложения = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда
				ОбъектНалогооблаженияПоУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы;
			Иначе
				ОбъектНалогооблаженияПоУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
		ОбъектНалогооблаженияПоУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМПриИзмененииКлиент()
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
	КассаККМПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура КассаККМПриИзмененииСервер()
	
	ТипОборудованияКассыККМ = Объект.КассаККМ.ТипОборудования;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиент()
	Перем Отказ, ИдентификаторУстройства, ИспользоватьКассуБезПодключенияОборудования, РаспределениеВыручкиПоСекциям;
	
	ПодготовитьИПроверитьПечатьЧека(Отказ, ИдентификаторУстройства, ИспользоватьКассуБезПодключенияОборудования, РаспределениеВыручкиПоСекциям);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ИспользоватьКассуБезПодключенияОборудования Тогда
		
		Если НомерДокументаКассыККМ[Объект.КассаККМ] <> Неопределено Тогда
			Объект.НомерЧекаККМ  = НомерДокументаКассыККМ[Объект.КассаККМ];
		Иначе
			Объект.НомерЧекаККМ  = ПорядковыйНомерПродажи;
		КонецЕсли;
		Объект.ПробитЧек     = Истина;
		
		Модифицированность = Истина;
		
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
		Если РезультатЗаписи = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;     
	
	Если ИдентификаторУстройства <> Неопределено Тогда
        
        // &ЗамерПроизводительности 
        Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
                                                    "Документ.ВозвратТоваровОтПокупателя.Форма.ФормаДокумента.Команда.ПробитьЧек",
                                                               Ложь);
                                                               
       	ЭтаФорма.Доступность = Ложь;
		
		ПараметрыОперации = Новый Структура("ИдентификаторУстройства, РаспределениеВыручкиПоСекциям, Замер", ИдентификаторУстройства, РаспределениеВыручкиПоСекциям, Замер);
		
		НомерЧека = НомерДокументаКассыККМ[Объект.КассаККМ] + 1;
		ОбщиеПараметры  = ВходящиеДанныеДляФРСервер(ПараметрыОперации.РаспределениеВыручкиПоСекциям, НомерЧека);
		
		Оповещение = Новый ОписаниеОповещения("НапечататьЧекКлиентЗавершение", ЭтотОбъект, ПараметрыОперации);
		
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(Оповещение, 
										УникальныйИдентификатор, 
										ОбщиеПараметры, 
										ПараметрыОперации.ИдентификаторУстройства);
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиентЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Если ЗначениеЗаполнено(РезультатВыполнения.ВыходныеПараметры[1]) Тогда
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		Иначе
			Объект.НомерЧекаККМ = НомерДокументаКассыККМ[Объект.КассаККМ];
		КонецЕсли;
		Объект.ПробитЧек    = Истина;
		Модифицированность  = Истина;
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
		Если РезультатЗаписи = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
									|Чек не напечатан на фискальном устройстве.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
    
    // &ЗамерПроизводительности 
    ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыОперации.Замер);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьИПроверитьПечатьЧека(Отказаться, 
										  ИдентификаторУстройства, 
										  ИспользоватьКассуБезПодключенияОборудования,
										  РаспределениеВыручкиПоСекциям)
	
	Отказаться = Ложь;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ)  Тогда
		ПараметрыКассыККМ       = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(Объект.КассаККМ);
		ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
		
		РаспределениеВыручкиПоСекциям = ПараметрыКассыККМ.РаспределениеВыручкиПоСекциям;
		ИспользоватьКассуБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
		
		КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		
		ТекстОшибки = НСтр("ru='Кассовая смена не открыта!'");
		Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Объект.Дата, ТекстОшибки) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				"Объект.КассаККМ",
				,
				Отказаться);
			
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru='Не выбрана касса ККМ!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект.КассаККМ",
			,
			Отказаться);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСистемуНалогообложенияНаФорме()
	
	Если ЗначениеЗаполнено(Объект.ВидНалога) Тогда
		СистемаНалогообложенияСтрокой = Строка(Объект.ВидНалога);
	ИначеЕсли ЗначениеЗаполнено(ОбъектНалогооблаженияПоУСН)  Тогда
		СистемаНалогообложенияСтрокой = НСтр("ru = 'Упрощенная. '") + Строка(ОбъектНалогооблаженияПоУСН);
	Иначе
		СистемаНалогообложенияСтрокой = Строка(СистемаНалогообложения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтавкиНДС()
	
	УчетНДС.ЗаполнитьСписокВыбораСтавокНДС(Элементы, Объект.Дата);
	
КонецПроцедуры

#Область ЕГАИС

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьИДоступностьЕГАИС(Форма)
	
	Форма.ТолькоПросмотр = Форма.ЕстьПереданныеЧекиЕГАИС ИЛИ Форма.Объект.ПробитЧек;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОснованииЧекЕГАИСВозвратПодтверждениеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьЧекЕГАИСВозвратПослеЗаписиВозвратаОтПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЧекЕГАИСВозвратПослеЗаписиВозвратаОтПокупателя()
	
	Если НЕ ПроверитьВозможностьВводаНаОсновании(Объект.Ссылка) Тогда
		ВызватьИсключение НСтр("ru='На основании документа существуют созданные чеки ЕГАИС'");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ЧекЕГАИСВозврат.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВозможностьВводаНаОсновании(ДокументОснование)
	
	ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДокументОснование);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекЕГАИСВозврат.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекЕГАИСВозврат КАК ЧекЕГАИСВозврат
	|ГДЕ
	|	ЧекЕГАИСВозврат.ДокументОснование = &ДокументОснование
	|	И НЕ ЧекЕГАИСВозврат.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьПереданныеЧекиЕГАИС(ДокументОснование)
	
	Возврат ИнтеграцияЕГАИСРТ.ЕстьПереданныеЧекиЕГАИС(ДокументОснование, Истина);
	
КонецФункции

&НаСервере
Процедура СформироватьТекстДокументаЕГАИС()
	
	ИнтеграцияЕГАИСРТ.СформироватьТекстДокументаЕГАИС(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ГИСМ

&НаСервере
Процедура ОбновитьРеквизитыОбменаСГИСМ()
	СформироватьНадписьМаркировкаПродукции();
	ОбновитьСтатусГИСМ();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусГИСМ()
	
	ВидимостьКомандГИСМ = Объект.ЕстьМаркируемаяПродукцияГИСМ
		И ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
	Элементы.СтатусГИСМ.Видимость = ВидимостьКомандГИСМ;
	Элементы.ФормаОбщаяКомандаПротоколОбменаГИСМ.Видимость = ВидимостьКомандГИСМ;
		
	Если НЕ Объект.ЕстьМаркируемаяПродукцияГИСМ
		ИЛИ НЕ ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтатусГИСМ         = Перечисления.СтатусыИнформированияГИСМ.Черновик;
	ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПустаяСсылка();
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СтатусыИнформированияГИСМ.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Черновик)) КАК СтатусГИСМ,
		|	ВЫБОР
		|		КОГДА СтатусыИнформированияГИСМ.ДальнейшееДействие В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПустаяСсылка)
		|		ИНАЧЕ ЕСТЬNULL(СтатусыИнформированияГИСМ.ДальнейшееДействие, ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные))
		|	КОНЕЦ КАК ДальнейшееДействие
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
		|		ПО (СтатусыИнформированияГИСМ.Документ = ВозвратТоваровОтПокупателя.Ссылка)
		|ГДЕ
		|	ВозвратТоваровОтПокупателя.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияГИСМ.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусГИСМ         = Выборка.СтатусГИСМ;
			ДальнейшееДействие = Выборка.ДальнейшееДействие;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтатусГИСМПредставление = ИнтеграцияГИСМ.ПредставлениеСтатусаГИСМ(
		СтатусГИСМ,
		ДальнейшееДействие,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		СтандартнаяОбработка = Ложь;
		ИнтеграцияГИСМКлиент.ПодготовитьСообщениеКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаДанных"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусГИСМОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусГИСМОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Возврат товаров от покупателя был изменен. Записать?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусГИСМОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Возврат товаров от покупателя не записан. Записать?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусГИСМОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать();
	КонецЕсли;
	
	Если Не Модифицированность И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНадписьМаркировкаПродукции()
	
	Элементы.ТекстМаркировкаТоваров.Видимость = Объект.ЕстьМаркируемаяПродукцияГИСМ И НЕ ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Если НЕ (Объект.ЕстьМаркируемаяПродукцияГИСМ И НЕ ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеМаркировки = Метаданные.Документы.МаркировкаТоваровГИСМ;
	ПравоДобавления      = ПравоДоступа("Добавление", МетаданныеМаркировки);
	ПравоЧтения          = ПравоДоступа("Чтение", МетаданныеМаркировки);

	Если Не ПравоЧтения Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравоДобавления Тогда
		ТекстНадписи = НСтр("ru = 'Оформить маркировку товаров'");
		ИмяКоманды   = "ОформитьМаркировкуТоваров";
	Иначе
		ТекстНадписи = НСтр("ru = 'Маркировка товаров не создана'");
		ИмяКоманды   = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МаркировкаТоваровГИСМ.Ссылка,
	|	СтатусыИнформированияГИСМ.Статус
	|ИЗ
	|	Документ.МаркировкаТоваровГИСМ КАК МаркировкаТоваровГИСМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|		ПО (СтатусыИнформированияГИСМ.Документ = МаркировкаТоваровГИСМ.Ссылка)
	|ГДЕ
	|	МаркировкаТоваровГИСМ.ДокументОснование = &ОснованиеСсылка
	|	И НЕ МаркировкаТоваровГИСМ.ПометкаУдаления";

	Запрос.УстановитьПараметр("ОснованиеСсылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТекстНадписи  = СтрШаблон(НСтр("ru = 'Маркировка товаров: %1'"), НРег (Строка(Выборка.Статус)));
		ИмяКоманды    = "ОткрытьПротоколОбмена";
		
	КонецЕсли;
	
	ТекстМаркировкаТоваров = Новый ФорматированнаяСтрока(
		ТекстНадписи,
		,
		ЦветаСтиля.ЦветГиперссылки,
		,
		ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстМаркировкаТоваровОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПротоколОбмена" Тогда
		
		ИнтеграцияГИСМКлиент.ОткрытьПротоколОбмена(Объект.Ссылка, ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОформитьМаркировкуТоваров" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.МаркировкаТоваровГИСМ.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена
	
&НаСервере
Процедура СкопироватьСтрокиНаСервере()
		
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", МассивТиповНоменклатуры);
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", 			ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , 	ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		СтруктураМарки = Новый Структура;
		СтруктураМарки.Вставить("Дата", Объект.Дата);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураМарки);
		
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВШапке(Объект));
		СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьКэшированныеЗначенияДляУчетаСерий(ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий, Ложь);
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения,ПараметрыУказанияСерий);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
		// ИнтеграцияЕГАИС
		Если Не ЕстьАлкогольнаяПродукцияЕГАИС = ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
			Если ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
				ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
				УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
			Иначе
				ЕстьАлкогольнаяПродукцияЕГАИС = Ложь;
				Для Каждого СтрокаТовары Из Объект.Товары Цикл
					Если СтрокаТовары.НеобходимостьВводаАкцизнойМарки Тогда
						ЕстьАлкогольнаяПродукцияЕГАИС = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				УстановитьВидимостьИДоступностьЕГАИС(ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
		// Конец ИнтеграцияЕГАИС
		
	КонецЦикла;
	
	КопированиеСтрокСервер.ОчиститьБуферОбмена();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти
