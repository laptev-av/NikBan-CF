#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		
		ИспользуетсяКомиссионнаяТорговля = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
		ИспользоватьУчетИмпортныхТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьУчетИмпортныхТоваров");
	
		ЗаполнитьЗначенияСвойств(
			ЭтотОбъект, 
			ДанныеЗаполнения,
			"Склад, Магазин, Контрагент, Организация, УчитыватьНДС, ЦенаВключаетНДС, ДисконтнаяКарта, ВладелецДисконтнойКарты, Продавец");
			
		ДокументОснование = ДанныеЗаполнения;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровТовары.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровТовары.Характеристика КАК Характеристика,
		|	РеализацияТоваровТовары.Количество КАК Количество,
		|	РеализацияТоваровТовары.Упаковка КАК Упаковка,
		|	РеализацияТоваровТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровТовары.КоличествоУпаковок = 0
		|			ТОГДА РеализацияТоваровТовары.Цена
		|		ИНАЧЕ РеализацияТоваровТовары.Сумма / РеализацияТоваровТовары.КоличествоУпаковок
		|	КОНЕЦ КАК Цена,
		|	РеализацияТоваровТовары.Продавец КАК Продавец,
		|	РеализацияТоваровТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	РеализацияТоваровТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	РеализацияТоваровТовары.Сумма КАК Сумма,
		|	РеализацияТоваровТовары.СтавкаНДС КАК СтавкаНДС,
		|	РеализацияТоваровТовары.СуммаНДС КАК СуммаНДС,
		|	РеализацияТоваровТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	РеализацияТоваровТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|	РеализацияТоваровТовары.КлючСвязи КАК КлючСвязи,
		|	РеализацияТоваровТовары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
		|	РеализацияТоваровТовары.Ссылка КАК ДокументПродажи
		|ИЗ
		|	Документ.РеализацияТоваров.Товары КАК РеализацияТоваровТовары
		|ГДЕ
		|	РеализацияТоваровТовары.Ссылка = &Ссылка
		|	И НЕ РеализацияТоваровТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		
		Результат = Запрос.Выполнить();
		
		Товары.Загрузить(Результат.Выгрузить());
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") 
			И НЕ ДанныеЗаполнения.Магазин.ИспользоватьОрдернуюСхемуПриПоступлении Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РеализацияТоваровСерии.Серия,
			|	РеализацияТоваровСерии.Количество,
			|	РеализацияТоваровСерии.Номенклатура,
			|	РеализацияТоваровСерии.Характеристика,
			|	РеализацияТоваровСерии.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
			|ПОМЕСТИТЬ ТаблицаСерий
			|ИЗ
			|	Документ.РеализацияТоваров.Серии КАК РеализацияТоваровСерии
			|ГДЕ
			|	РеализацияТоваровСерии.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаСерий.ВидНоменклатуры
			|ПОМЕСТИТЬ ТаблицаВидовНоменклатуры
			|ИЗ
			|	ТаблицаСерий КАК ТаблицаСерий
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВидыНоменклатурыПолитикиУчетаСерий.Ссылка КАК ВидНоменклатры,
			|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоВозвратуОтКлиента КАК УказыватьСерии
			|ПОМЕСТИТЬ ТаблицаПолитик
			|ИЗ
			|	Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
			|ГДЕ
			|	ВидыНоменклатурыПолитикиУчетаСерий.Ссылка В
			|			(ВЫБРАТЬ
			|				ТаблицаСерий.ВидНоменклатуры КАК ВидНоменклатуры
			|			ИЗ
			|				ТаблицаСерий КАК ТаблицаСерий)
			|	И ВидыНоменклатурыПолитикиУчетаСерий.Магазин = &Магазин
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаСерий.Серия,
			|	ТаблицаСерий.Количество,
			|	ТаблицаСерий.Номенклатура,
			|	ТаблицаСерий.Характеристика
			|ИЗ
			|	ТаблицаСерий КАК ТаблицаСерий
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПолитик КАК ТаблицаПолитик
			|		ПО ТаблицаСерий.ВидНоменклатуры = ТаблицаПолитик.ВидНоменклатры
			|ГДЕ
			|	ЕСТЬNULL(ТаблицаПолитик.УказыватьСерии, ЛОЖЬ)";
			
			Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
			Запрос.УстановитьПараметр("Магазин", ДанныеЗаполнения.Магазин);
			
			Результат = Запрос.Выполнить();
			
			Серии.Загрузить(Результат.Выгрузить());
			
		КонецЕсли;
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		ИнтеграцияВЕТИСРТ.ЗаполнитьВозвратТоваровОтПокупателяНаОснованииВходящейТранспортнойОперацииВЕТИС(ЭтотОбъект, ДанныеЗаполнения, "", СтандартнаяОбработка);
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	ОбщегоНазначенияРТ.ПроверитьИспользованиеОрганизации(,,Организация);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИспользуетсяКомиссионнаяТорговля = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.ВозвратТоваровОтПокупателя.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПродажиСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	ПродажиСервер.ОтразитьПродажиПоДисконтнымКартам(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	БонусныеБаллыСервер.ОтразитьБонусныеБаллы(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	Если ИспользуетсяКомиссионнаяТорговля Тогда
		ЗапасыСервер.ОтразитьТоварыКОформлениюОтчетовКомитенту(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	СформироватьСписокРегистровДляКонтроля();
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	Если НЕ Отказ Тогда
		РезультатОбработкиНакоплений = СкидкиНаценкиВызовСервера.РезультатОбработкиНакопленийВДисконтномСервере(Ссылка);
		Если РезультатОбработкиНакоплений.Свойство("СообщениеПользователю") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатОбработкиНакоплений.СообщениеПользователю);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если Магазин.СкладУправляющейСистемы Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,Документы.ВозвратТоваровОтПокупателя.ПараметрыУказанияСерий(ЭтотОбъект),Отказ);
	
	РазрешитьОформлениеВозвратовОтПокупателяБезДокументовПродажи = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОформлениеВозвратовОтПокупателяБезДокументовПродажи, Ложь);
	
	Если РазрешитьОформлениеВозвратовОтПокупателяБезДокументовПродажи Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ДокументПродажи");
	КонецЕсли;
	
	Если НЕ ПредъявленСчетФактура Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НомерСчетаФактуры");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаСчетаФактуры");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	ПродажиСервер.ПроверитьВозможностьВозвратаОтПокупателя(
		ЭтотОбъект,
		Отказ
	);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Если НЕ Отказ Тогда
		РезультатОбработкиНакоплений = СкидкиНаценкиВызовСервера.РезультатОбработкиНакопленийВДисконтномСервере(Ссылка);
		Если РезультатОбработкиНакоплений.Свойство("СообщениеПользователю") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатОбработкиНакоплений.СообщениеПользователю);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	ОбщегоНазначенияРТ.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект,Документы.ВозвратТоваровОтПокупателя.ПараметрыУказанияСерий(ЭтотОбъект));
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		СкидкиНаценкиСерверПереопределяемый.ПодготовитьСкидкиИОплатуБонусамиКСторнированиюПриВозврате(ЭтотОбъект);
	КонецЕсли;
	
	ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
		ЭтотОбъект,
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС),
		"СуммаДокумента");
		
	// ИнтеграцияГИСМ
	ЕстьМаркируемаяПродукцияГИСМ = ИнтеграцияГИСМ_РТ.ЕстьМаркируемаяПродукцияГИСМ(Товары);
	// Конец ИнтеграцияГИСМ
		
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Серии.Очистить();
	АкцизныеМарки.Очистить();
	БонусныеБаллыКНачислению.Очистить();
	
	ПредъявленСчетФактура = Ложь;
	НомерСчетаФактуры = "";
	ДатаСчетаФактуры = Неопределено;
	
	ПробитЧек = Ложь;
	НомерЧекаККМ = 0;
	
	ИнициализироватьДокумент();
	
	УчетНДС.СкорректироватьНДСВТЧДокумента(ЭтотОбъект, Товары);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Инициализирует документ
//
Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Ответственный = Пользователи.ТекущийПользователь();
	
	Магазин       = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Магазин);
	Организация   = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация,Ответственный);
	Склад         = ЗначениеНастроекПовтИсп.ПолучитьСкладПродажиПоУмолчанию(Магазин,,Склад, Ответственный);
	Контрагент    = ЗначениеНастроекПовтИсп.ПолучитьПокупателяПоУмолчанию(Ответственный, Контрагент);
	АналитикаХозяйственнойОперации = ЗначениеНастроекПовтИсп.ПолучитьАналитикуХозяйственнойОперацииПоУмолчанию(АналитикаХозяйственнойОперации, Перечисления.ХозяйственныеОперации.ВозвратОтПокупателя);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Склад")
			И НЕ ЗначениеЗаполнено(Склад) Тогда
			Если ЗначениеЗаполнено(Магазин) Тогда
				Если НЕ Справочники.Склады.ПроверитьПринадлежностьСкладаМагазину(Магазин, ДанныеЗаполнения.Склад) Тогда
					ДанныеЗаполнения.Склад = Справочники.Склады.ПустаяСсылка();
				КонецЕсли;
			Иначе
				Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Склад, "Магазин");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

#КонецОбласти

#КонецЕсли
