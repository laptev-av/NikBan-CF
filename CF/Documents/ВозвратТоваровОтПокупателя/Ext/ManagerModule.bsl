#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Приходная накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Приходная накладная'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	// Опись номенклатуры
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОписьНоменклатуры";
	КомандаПечати.Представление = НСтр("ru = 'Опись номенклатуры'");
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 52;
	
	// Торг 12
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТОРГ12";
	КомандаПечати.Представление = НСтр("ru = 'ТОРГ-12 (Товарная накладная)'");
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.ДополнительныеПараметры.Вставить("ВыводитьУслуги", Истина);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 55;
	
	// Торг 12 (без услуг)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТОРГ12";
	КомандаПечати.Представление = НСтр("ru = 'ТОРГ-12 (Товарная накладная без услуг)'");
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.ДополнительныеПараметры.Вставить("ВыводитьУслуги", Ложь);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 60;
	
	ЭтоLinuxСервер = ОбщегоНазначенияРТВызовСервера.ЭтоLinuxСервер();
	
	Если ЭтоLinuxСервер И НЕ ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		
		// Заявление на возврат
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ЗаявлениеНаВозврат";
		КомандаПечати.Представление = НСтр("ru = 'Заявление на возврат'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Обработчик = "УправлениеПечатьюРТКлиент.ОбработкаКомандыПечатиЗаявленияПриВозврате";
		КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
		КомандаПечати.Порядок = 75;
		
		// Заявление на утерянный чек
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ЗаявлениеНаУтерянныйЧек";
		КомандаПечати.Представление = НСтр("ru = 'Заявление на утерянный чек'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Обработчик = "УправлениеПечатьюРТКлиент.ОбработкаКомандыПечатиЗаявленияПриВозврате";
		КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
		КомандаПечати.Порядок = 76;
		
		// Заявление об ошибочно пробитом чеке.
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ЗаявлениеОбОшибочноПробитомЧеке";
		КомандаПечати.Представление = НСтр("ru = 'Заявление об ошибочно пробитом чеке'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Обработчик = "УправлениеПечатьюРТКлиент.ОбработкаКомандыПечатиЗаявленияПриВозврате";
		КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
		КомандаПечати.Порядок = 77;
	Иначе
		
		// Заявление на возврат
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ЗаявлениеНаВозврат";
		КомандаПечати.Представление = НСтр("ru = 'Заявление на возврат'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 75;
		
		// Заявление на утерянный чек
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ЗаявлениеНаУтерянныйЧек";
		КомандаПечати.Представление = НСтр("ru = 'Заявление на утерянный чек'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 76;
		
		// Заявление об ошибочно пробитом чеке.
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ЗаявлениеОбОшибочноПробитомЧеке";
		КомандаПечати.Представление = НСтр("ru = 'Заявление об ошибочно пробитом чеке'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 77;
	КонецЕсли;
	
	ПараметрыПечатиЦенниковИЭтикеток = Новый Структура;
	ПараметрыПечатиЦенниковИЭтикеток.Вставить("ИмяПроцедурыПодготовкиСтруктурыДанных", "УправлениеПечатьюРТВызовСервера.ПодготовитьСтруктуруДанныхЦенниковИЭтикеток");
	ПараметрыПечатиЦенниковИЭтикеток.Вставить("УстановитьРежим", "ПечатьЦенников");
	ПараметрыПечатиЦенниковИЭтикеток.Вставить("ИмяДокумента", "ВозвратТоваровОтПокупателя");
	
	ДоступноПечатьЭтикетокИЦенников = РольДоступна("ПолныеПрава") 
									  Или РольДоступна("ПечатьЭтикетокИЦенников");
	
	Если ДоступноПечатьЭтикетокИЦенников Тогда
		// Ценники
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Ценники";
		КомандаПечати.Представление = НСтр("ru = 'Ценники'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Обработчик = "УправлениеПечатьюРТКлиент.ОбработкаКомандыПечатиЦенниковИЭтикеток";
		КомандаПечати.ДополнительныеПараметры.Вставить("ПараметрыПечатиЦенниковИЭтикеток", ПараметрыПечатиЦенниковИЭтикеток);
		КомандаПечати.Порядок = 85;

		ПараметрыПечатиЦенниковИЭтикеток = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыПечатиЦенниковИЭтикеток);
		// Этикетки
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Этикетки";
		КомандаПечати.Представление = НСтр("ru = 'Этикетки'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.Обработчик = "УправлениеПечатьюРТКлиент.ОбработкаКомандыПечатиЦенниковИЭтикеток";
		ПараметрыПечатиЦенниковИЭтикеток.Вставить("УстановитьРежим", "ПечатьЭтикеток");
		КомандаПечати.ДополнительныеПараметры.Вставить("ПараметрыПечатиЦенниковИЭтикеток", ПараметрыПечатиЦенниковИЭтикеток);
		КомандаПечати.Порядок = 85;
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Накладная",
			НСтр("ru = 'Возврат товаров от покупателя'"),
			ПечатьНакладная(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ВозвратТоваровОтПокупателя.ПФ_MXL_ВозвратТоваровОтПокупателя");
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОписьНоменклатуры") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОписьНоменклатуры",
				ПараметрыПечати.Представление,
				ПечатьОписиНоменклатуры(МассивОбъектов, ОбъектыПечати));
	
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,"ТОРГ12",
				ПараметрыПечати.Представление, 
				ПечатьТОРГ12(МассивОбъектов, ОбъектыПечати, ПараметрыПечати["ВыводитьУслуги"]));
		
	КонецЕсли;
	
	СоответствиеПолучателей = Новый Соответствие;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявлениеНаВозврат") Тогда
		
		ПараметрыПечати = СоответствиеДанныхОбОрганизациях(МассивОбъектов, СоответствиеПолучателей, ПараметрыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЗаявлениеНаВозврат",
			НСтр("ru = 'Заявление на возврат'"),
			ПечатьЗаявленияНаВозврат(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),
			,
			"Документ.ВозвратТоваровОтПокупателя.ПФ_MXL_ЗаявлениеНаВозврат");
			
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявлениеОбОшибочноПробитомЧеке") Тогда
		
		ПараметрыПечати = СоответствиеДанныхОбОрганизациях(МассивОбъектов, СоответствиеПолучателей, ПараметрыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЗаявлениеОбОшибочноПробитомЧеке",
			НСтр("ru = 'Заявление об ошибочно пробитом чеке'"),
			ПечатьЗаявленияОбОшибочноПробитомЧеке(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),
			,
			"Документ.ВозвратТоваровОтПокупателя.ПФ_MXL_ЗаявлениеОбОшибочноПробитомЧеке");
			
			
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявлениеНаУтерянныйЧек") Тогда
		
		ПараметрыПечати = СоответствиеДанныхОбОрганизациях(МассивОбъектов, СоответствиеПолучателей, ПараметрыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЗаявлениеНаУтерянныйЧек",
			НСтр("ru = 'Заявление на утерянный чек'"),
			ПечатьЗаявленияНаУтерянныйЧек(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),
			,
			"Документ.ВозвратТоваровОтПокупателя.ПФ_MXL_ЗаявлениеНаУтерянныйЧек");
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//	Объект - ДокументОбъект или ДанныеФормыСтруктура - документ, для которого нужно сформировать параметры проверки.
//
// Возвращаемое значение:
//	Структура - Состав полей определяется требованиями функции
//	            ОбработкаТабличнойЧастиСервер.ЗаполнитьСтатусыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект)Экспорт
	
	ПоляСвязи = Новый Массив;
	
	ПараметрыУказанияСерий = Новый Структура;
	ИспользованиеСерийСклад = Ложь;
	
	ИспользованиеСерийСклад = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	ПараметрыУказанияСерий.Вставить("ИспользоватьСерииНоменклатуры", ИспользованиеСерийСклад);
	ПараметрыУказанияСерий.Вставить("ПоляСвязи",ПоляСвязи);
	ПараметрыУказанияСерий.Вставить("ЭтоНакладная", Истина);
	
	СкладскиеОперации = Новый Массив;
	СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента);
	
	ПараметрыУказанияСерий.Вставить("СкладскиеОперации", СкладскиеОперации);
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Инициализирует таблицы значений, содержащие данные документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт
	
	ИспользоватьКомиссионнуюТорговлю = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
	ИспользоватьУчетИмпортныхТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьУчетИмпортныхТоваров");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Дата КАК Период,
	|	ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка,
	|	ВозвратТоваровОтПокупателя.Организация КАК Организация,
	|	ВозвратТоваровОтПокупателя.Склад КАК Склад,
	|	ВозвратТоваровОтПокупателя.Магазин КАК Магазин,
	|	ВозвратТоваровОтПокупателя.Контрагент КАК Контрагент,
	|	ВозвратТоваровОтПокупателя.АналитикаХозяйственнойОперации КАК АналитикаХозяйственнойОперации,
	|	ВозвратТоваровОтПокупателя.Ссылка КАК Основание,
	|	ВозвратТоваровОтПокупателя.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВозвратТоваровОтПокупателя.УчитыватьНДС КАК УчитыватьНДС,
	|	ВозвратТоваровОтПокупателя.Магазин.ИспользоватьОрдернуюСхемуПриПоступлении КАК ПоступлениеПоОрдернойСхеме,
	|	ВозвратТоваровОтПокупателя.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ВозвратТоваровОтПокупателя.ДисконтнаяКарта.ВладелецКарты КАК ВладелецДисконтнойКарты,
	|	НЕ ВозвратТоваровОтПокупателя.Магазин.СкладУправляющейСистемы КАК ФормироватьДвижения,
	|	ВозвратТоваровОтПокупателя.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Реквизиты = РезультатЗапроса.Выбрать();
	Реквизиты.Следующий(); 
	
	ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВПараметрыЗапроса(РезультатЗапроса, Реквизиты, Запрос);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка,
	|	ВозвратТоваровОтПокупателяТовары.НомерСтроки,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Характеристика,
	|	ВозвратТоваровОтПокупателяТовары.Количество,
	|	ВозвратТоваровОтПокупателяТовары.Цена,
	|	ВозвратТоваровОтПокупателяТовары.Сумма,
	|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС,
	|	ВозвратТоваровОтПокупателяТовары.СуммаНДС,
	|	ВозвратТоваровОтПокупателяТовары.ДокументПродажи,
	|	ВозвратТоваровОтПокупателяТовары.Продавец,
	|	ВозвратТоваровОтПокупателяТовары.Упаковка,
	|	ВозвратТоваровОтПокупателяТовары.КоличествоУпаковок
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10) КАК СтавкаНДС,
	|	10 КАК ПроцентСтавки
	|ПОМЕСТИТЬ СтавкиНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18),
	|	18
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20),
	|	20
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Магазин КАК Магазин,
	|	&Склад КАК Склад,
	|	ТаблицаВЗапросе.Номенклатура,
	|	ТаблицаВЗапросе.Характеристика,
	|	ТаблицаВЗапросе.ДокументПродажи КАК ДокументПродажи,
	|	ТаблицаВЗапросе.Продавец,
	|	- ТаблицаВЗапросе.Количество КАК Количество,
	|	- (ТаблицаВЗапросе.Сумма + ВЫБОР
	|		КОГДА (НЕ &ЦенаВключаетНДС)
	|				И &УчитыватьНДС
	|			ТОГДА ТаблицаВЗапросе.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК Стоимость,
	|	- (ТаблицаВЗапросе.Количество * ТаблицаВЗапросе.Цена + ВЫБОР
	|		КОГДА (НЕ &ЦенаВключаетНДС)
	|				И &УчитыватьНДС
	|			ТОГДА ТаблицаВЗапросе.Количество * ТаблицаВЗапросе.Цена * ЕСТЬNULL(СтавкиНДС.ПроцентСтавки, 0) / 100
	|		ИНАЧЕ 0
	|	КОНЕЦ) / ВЫБОР
	|		КОГДА ТаблицаВЗапросе.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ИЛИ ТаблицаВЗапросе.Упаковка.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаВЗапросе.Упаковка.Коэффициент
	|	КОНЕЦ КАК СтоимостьБезСкидок,
	|	- ТаблицаВЗапросе.СуммаНДС КАК НДС,
	|	&АналитикаХозяйственнойОперации,
	|	&Период,
	|	ТаблицаВЗапросе.НомерСтроки
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтавкиНДС КАК СтавкиНДС
	|		ПО ТаблицаВЗапросе.СтавкаНДС = СтавкиНДС.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период,
	|	ТаблицаВЗапросе.Номенклатура,
	|	ТаблицаВЗапросе.Характеристика,
	|	- ТаблицаВЗапросе.Сумма КАК Сумма,
	|	- ТаблицаВЗапросе.Количество КАК Количество,
	|	&ДисконтнаяКарта,
	|	&ВладелецДисконтнойКарты
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|ГДЕ
	|	(НЕ &ДисконтнаяКарта = ЗНАЧЕНИЕ(Справочник.ИнформационныеКарты.ПустаяСсылка))
	|   И &ФормироватьДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.Номенклатура,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаВЗапросе.Характеристика,
	|	ТаблицаВЗапросе.Количество,
	|	&АналитикаХозяйственнойОперации,
	|	&Склад,
	|	&Период
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|ГДЕ
	|	(НЕ &ПоступлениеПоОрдернойСхеме)
	|	И (ТаблицаВЗапросе.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|   И &ФормироватьДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.Номенклатура,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаВЗапросе.Характеристика,
	|	ТаблицаВЗапросе.Количество,
	|	&Склад КАК Склад,
	|	&Период КАК Период,
	|	&Основание КАК ДокументОснование
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|ГДЕ
	|	&ПоступлениеПоОрдернойСхеме
	|	И (ТаблицаВЗапросе.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|   И &ФормироватьДвижения
	|;
	|/////////////////////////////////////////////////////////////////////////////
	//6 ТаблицаТоварыОрганизаций
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Организация                           КАК Организация,
	|	&Организация                           КАК ОрганизацияОтгрузки,
	|	&Склад                                 КАК Склад,
	|	&Поставщик                             КАК Поставщик,
	|	&НомерГТД                              КАК НомерГТД,
	|	&Договор                               КАК Договор,
	|	ТаблицаТовары.ДокументПродажи          КАК ДокументПродажи,
	|	ТаблицаТовары.Сумма                    КАК СуммаПродажи,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Количество               КАК Количество
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаТовары
	|
	|ГДЕ
	|   &ФормироватьДвижения
	|   И (ТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 7 ТаблицаДвиженияСерийТоваров
	|ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура КАК Номенклатура,
	|	ТаблицаСерии.Характеристика КАК Характеристика,
	|	ТаблицаСерии.Серия КАК Серия,
	|	ТаблицаСерии.Количество КАК Количество,
	|	&Магазин КАК Магазин,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента) КАК СкладскаяОперация,
	|	&Ссылка КАК Документ,
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ТаблицаСерии.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Серии КАК ТаблицаСерии
	|
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаСерии.Количество <> 0
	|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И &ФормироватьДвижения
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|";
	
	Запрос.Текст = Запрос.Текст;
	Запрос.Текст = Запрос.Текст + ТекстЗапросаБонусы();
	Запрос.Текст = Запрос.Текст + ТекстЗапросаТаблицаРасчетыСКлиентами();
	
	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	Запрос.УстановитьПараметр("Поставщик", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("НомерГТД" , Справочники.НомераГТД.ПустаяСсылка());
	Запрос.УстановитьПараметр("Договор"  , Справочники.ДоговорыПлатежныхАгентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойЗаказ", Документы.ЗаказПокупателя.ПустаяСсылка());
	ИспользоватьРасчетыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыСКлиентами");
	Запрос.УстановитьПараметр("ИспользоватьРасчетыСКлиентами", ИспользоватьРасчетыСКлиентами);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ТаблицыДляДвижений.Вставить("ТаблицаПродажи"                  , Результат[2].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнымКартам", Результат[3].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаТоварыНаСкладах"          , Результат[4].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаТоварыКПоступлению"       , Результат[5].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаТоварыОрганизаций"        , Результат[6].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерийТоваров"     , Результат[7].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаБонусныеБаллы"            , Результат[9].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСКлиентами"        , Результат[10].Выгрузить());
	
	Если ИспользоватьКомиссионнуюТорговлю 
		ИЛИ ИспользоватьУчетИмпортныхТоваров Тогда
		Если ЗначениеЗаполнено(Реквизиты.ДокументОснование) Тогда
			ПроведениеСервер.ЗаполнитьТаблицуДвиженийПриходаРегистраТоварыОрганизаций(
												Реквизиты.ДокументОснование,
												ТаблицыДляДвижений.ТаблицаТоварыОрганизаций,
												Реквизиты.Период);
		Иначе
			ПроведениеСервер.ЗаполнитьТаблицуДвиженийПриходаРегистраТоварыОрганизацийИзТЧ(
												ТаблицыДляДвижений.ТаблицаТоварыОрганизаций,
												Реквизиты.Период);
		КонецЕсли;
		ТаблицыДляДвижений.Вставить("ТаблицаТоварыКОформлениюОтчетовКомитенту" , 
						   ПроведениеСервер.ТаблицаДвиженийРегистраТоварыКОформлениюОтчетовКомитенту(
						   ТаблицыДляДвижений.ТаблицаТоварыОрганизаций
						   ));
	КонецЕсли;
	
КонецПроцедуры

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры


// Подготавлиет данные для передачи в БПО
//  Параметры:
//   ДокументСсылка - ДокументСсылка
//   РаспределениеВыручкиПоСекциям - Структура;
//   НомерЧека - Расчетный нмер чека для принтера ЕНВД
//
Функция ПодготовитьДанныеДляПробитияЧека(ДокументСсылка, РаспределениеВыручкиПоСекциям, НомерЧека) Экспорт
	
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	ИспользуетсяУчетИмпортногоТовара = ПолучитьФункциональнуюОпцию("ИспользоватьУчетИмпортныхТоваров");
	
	// Общие параметры чека
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("КассаККМ");
	СтруктураРеквизитов.Вставить("Магазин");
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("Дата");
	СтруктураРеквизитов.Вставить("Ответственный");
	СтруктураРеквизитов.Вставить("ДоговорПлатежногоАгента");
	СтруктураРеквизитов.Вставить("ВидНалога");
	СтруктураРеквизитов.Вставить("СуммаДокумента");
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("НаименованиеПолное");
	СтруктураРеквизитов.Вставить("ИНН");
	СтруктураРеквизитов.Вставить("КПП");
	РеквизитыОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.Организация, СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЭлектронныйЧекSMSПередаютсяПрограммой1С");
	СтруктураРеквизитов.Вставить("ЭлектронныйЧекEmailПередаютсяПрограммой1С");
	СтруктураРеквизитов.Вставить("СерийныйНомер");
	СтруктураРеквизитов.Вставить("Магазин");
	СтруктураРеквизитов.Вставить("Код");
	СтруктураРеквизитов.Вставить("СпособФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.СпособФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ДопустимоеРасхождениеФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.ДопустимоеРасхождениеФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ТипОборудования", "ПодключаемоеОборудование.ТипОборудования");
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.КассаККМ, СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Наименование");
	СтруктураРеквизитов.Вставить("ИНН");
	РеквизитыКассир = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.Ответственный.ФизическоеЛицо, СтруктураРеквизитов);
	
	ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;

	ОбщиеПараметры.Электронно = Ложь;
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.ДокументОснование = ДокументСсылка;
	
	ОбщиеПараметры.Кассир          = РеквизитыКассир.Наименование;
	ОбщиеПараметры.Вставить("ИмяКассира", РеквизитыКассир.Наименование);
	ОбщиеПараметры.КассирИНН       = РеквизитыКассир.ИНН;
	
	ОбщиеПараметры.Организация    = РеквизитыДокумента.Организация;
	ОбщиеПараметры.ОрганизацияНазвание = РеквизитыОрганизация.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = РеквизитыОрганизация.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = РеквизитыОрганизация.КПП;
	ОбщиеПараметры.НомерКассы     = РеквизитыКассыККМ.Код;
	ОбщиеПараметры.НомерЧека      = НомерЧека;
	
	ОбщиеПараметры.НомерСмены = 1;
	
	СведенияООрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(РеквизитыДокумента.Организация, РеквизитыДокумента.Дата);
	АдресМагазина = ОбщегоНазначенияРТ.АдресМагазина(РеквизитыКассыККМ.Магазин);
	
	СерийныйНомер = РеквизитыКассыККМ.СерийныйНомер;
	Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда
		СерийныйНомер = "1";
	КонецЕсли;
	
	ОбщиеПараметры.АдресРасчетов = АдресМагазина;
	ОбщиеПараметры.МестоРасчетов = Строка(РеквизитыКассыККМ.Магазин) + " " + АдресМагазина;
	ОбщиеПараметры.АдресМагазина = АдресМагазина;
	ОбщиеПараметры.НаименованиеМагазина = Строка(РеквизитыКассыККМ.Магазин);
	ОбщиеПараметры.СерийныйНомер = СерийныйНомер;
	ОбщиеПараметры.СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложенияККТ(РеквизитыДокумента.Организация, 
																		РеквизитыДокумента.ВидНалога);
	
	ПодключаемоеОборудованиеРТ.ЗаполнитьПараметрыПлатежногоДоговора(ОбщиеПараметры, 
																	РеквизитыДокумента.ДоговорПлатежногоАгента,
																	РеквизитыДокумента.СуммаДокумента);
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.ДоговорПлатежногоАгента) Тогда
		НомерСекции = РаспределениеВыручкиПоСекциям.СоответствиеДоговоровСекциям.Получить(РеквизитыДокумента.ДоговорПлатежногоАгента);
	Иначе
		НомерСекции = РаспределениеВыручкиПоСекциям.НомерСекцииДляРасходныхКассовыхОрдеров;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("НомерСекции", НомерСекции);
	
	СуммаДокументовРасчетов = 0;
	
	ПараметрыДокумента.Вставить("ПризнакСпособаРасчета", Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты);
	
	СтрокаОплаты = Новый Структура();
	СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Постоплата);
	СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Постоплата'"));
	СтрокаОплаты.Вставить("Сумма", РеквизитыДокумента.СуммаДокумента);
	ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	ПодключаемоеОборудованиеРТ.ДобавитьСтрокиДляФискализацииТоваров(ДокументСсылка, 
																	ПараметрыДокумента, 
																	ОбщиеПараметры, 
																	СуммаДокументовРасчетов,
																	Ложь);
	
	ОбщиеПараметры.КассаККМ 		= РеквизитыДокумента.КассаККМ;
	ОбщиеПараметры.ТорговыйОбъект 	= РеквизитыДокумента.Магазин;
	
	Если РеквизитыКассыККМ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		// При необходимости будет проведен формато-логический контроль
		ОбщиеПараметры.СпособФорматноЛогическогоКонтроля = РеквизитыКассыККМ.СпособФорматноЛогическогоКонтроля;
		ОбщиеПараметры.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = РеквизитыКассыККМ.ДопустимоеРасхождениеФорматноЛогическогоКонтроля;
		Если ФорматноЛогическийКонтрольКлиентСервер.НуженФорматноЛогическийКонтроль(ОбщиеПараметры) Тогда
			ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции // ПодготовитьДанныеДляПробитияЧека()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция формирует текст запроса по бонусам.
// Возвращаемое значение: ТекстЗапроса - Строка.
Функция ТекстЗапросаБонусы()
	
	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БонусныеБаллы.ДатаНачисления КАК Период,
	|	&Приход КАК ВидДвижения,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Ссылка.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	-БонусныеБаллы.КоличествоБонусныхБаллов КАК Начислено,
	|	0 КАК КСписанию,
	|	&ПустаяДата КАК ДатаПервоначальногоНачисления
	|ПОМЕСТИТЬ БонусныеБаллы
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.БонусныеБаллыКНачислению КАК БонусныеБаллы
	|ГДЕ
	|	БонусныеБаллы.Ссылка = &Ссылка
	|	И БонусныеБаллы.ДатаНачисления <> &ПустаяДата
	|	И БонусныеБаллы.КоличествоБонусныхБаллов > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БонусныеБаллы.ДатаСписания,
	|	&Приход,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Ссылка.ДисконтнаяКарта,
	|	0,
	|	-БонусныеБаллы.КоличествоБонусныхБаллов,
	|	БонусныеБаллы.ДатаНачисления
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.БонусныеБаллыКНачислению КАК БонусныеБаллы
	|ГДЕ
	|	БонусныеБаллы.Ссылка = &Ссылка
	|	И БонусныеБаллы.ДатаСписания <> &ПустаяДата
	|	И БонусныеБаллы.КоличествоБонусныхБаллов > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БонусныеБаллы.ДатаНачисления,
	|	&Расход,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Ссылка.ДисконтнаяКарта,
	|	БонусныеБаллы.КоличествоБонусныхБаллов,
	|	0,
	|	&ПустаяДата
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.БонусныеБаллыКНачислению КАК БонусныеБаллы
	|ГДЕ
	|	БонусныеБаллы.Ссылка = &Ссылка
	|	И БонусныеБаллы.ДатаНачисления <> &ПустаяДата
	|	И БонусныеБаллы.КоличествоБонусныхБаллов < 0
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БонусныеБаллы.Период КАК Период,
	|	БонусныеБаллы.ВидДвижения КАК ВидДвижения,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	ВЫБОР
	|		КОГДА БонусныеБаллы.ДисконтнаяКарта.КартаДляНакоплений = ЗНАЧЕНИЕ(Справочник.ИнформационныеКарты.ПустаяСсылка)
	|			ТОГДА БонусныеБаллы.ДисконтнаяКарта
	|		ИНАЧЕ БонусныеБаллы.ДисконтнаяКарта.КартаДляНакоплений
	|	КОНЕЦ КАК ДисконтнаяКарта,
	|	СУММА(БонусныеБаллы.Начислено) КАК Начислено,
	|	СУММА(БонусныеБаллы.КСписанию) КАК КСписанию,
	|	БонусныеБаллы.ДатаПервоначальногоНачисления КАК ДатаПервоначальногоНачисления
	|ИЗ
	|	БонусныеБаллы КАК БонусныеБаллы
	|
	|СГРУППИРОВАТЬ ПО
	|	БонусныеБаллы.Период,
	|	БонусныеБаллы.ВидДвижения,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
	|	ВЫБОР
	|		КОГДА БонусныеБаллы.ДисконтнаяКарта.КартаДляНакоплений = ЗНАЧЕНИЕ(Справочник.ИнформационныеКарты.ПустаяСсылка)
	|			ТОГДА БонусныеБаллы.ДисконтнаяКарта
	|		ИНАЧЕ БонусныеБаллы.ДисконтнаяКарта.КартаДляНакоплений
	|	КОНЕЦ,
	|	БонусныеБаллы.ДатаПервоначальногоНачисления
	|;
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСКлиентами()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Магазин КАК Магазин,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Ссылка КАК ДокументРасчета,
	|	ДанныеДокумента.ДокументОснование.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ДанныеДокумента
	|ГДЕ
	|	&ИспользоватьРасчетыСКлиентами
	|	И ДанныеДокумента.Ссылка = &Ссылка
	|;";
	
	Возврат ТекстЗапроса;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// Печать

Функция СоответствиеДанныхОбОрганизациях(МассивОбъектов, СоответствиеПолучателей, ПараметрыПечати)
	
	Если НЕ ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
		
		ПараметрыПечати = Новый Структура;
		
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("СоответствиеПолучателей") Тогда
		Возврат ПараметрыПечати;
	КонецЕсли;
	
	Если СоответствиеПолучателей.Количество() > 0 Тогда
		
		ПараметрыПечати.Вставить("СоответствиеПолучателей", СоответствиеПолучателей);
		Возврат ПараметрыПечати;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратТоваровОтПокупателя.Организация
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СтруктураРезультатаЗапроса = Новый Структура;
	СоответствиеОрганизацияРуководитель = Новый Соответствие;
	СоответствиеОрганизацияДолжность    = Новый Соответствие;
	СоответствиеОрганизацияНаименование = Новый Соответствие;
	МассивОрганизаций = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		Руководители = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(Выборка.Организация, ТекущаяДатаСеанса(),,Истина);
		
		СоответствиеОрганизацияРуководитель.Вставить(Выборка.Организация, Руководители.Руководитель);
		СоответствиеОрганизацияДолжность.Вставить(Выборка.Организация   , Руководители.РуководительДолжность);
		СоответствиеОрганизацияНаименование.Вставить(Выборка.Организация, ?(СокрЛП(Выборка.Организация.НаименованиеПолное) = "", Выборка.Организация.Наименование, Выборка.Организация.НаименованиеПолное));
		МассивОрганизаций.Добавить(Выборка.Организация);
		
	КонецЦикла;
	
	СтруктураРезультатаЗапроса.Вставить("СоответствиеОрганизацияРуководитель", СоответствиеОрганизацияРуководитель);
	СтруктураРезультатаЗапроса.Вставить("СоответствиеОрганизацияДолжность"   , СоответствиеОрганизацияДолжность);
	СтруктураРезультатаЗапроса.Вставить("СоответствиеОрганизацияНаименование", СоответствиеОрганизацияНаименование);
	СтруктураРезультатаЗапроса.Вставить("МассивОрганизаций"                 , МассивОрганизаций);
	
	СоответствиеПолучателей = Новый Соответствие;
	
	Для каждого ЭлементОрганизации Из СтруктураРезультатаЗапроса.МассивОрганизаций Цикл
		
		Кому = "";
		Руководитель          = СтруктураРезультатаЗапроса.СоответствиеОрганизацияРуководитель.Получить(ЭлементОрганизации);
		РуководительДолжность = СтруктураРезультатаЗапроса.СоответствиеОрганизацияДолжность.Получить(ЭлементОрганизации);
		Наименование          = СтруктураРезультатаЗапроса.СоответствиеОрганизацияНаименование.Получить(ЭлементОрганизации);
		
		Если Не Руководитель = Неопределено Тогда
			Должность       = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(РуководительДолжность, 3);
			ФИОРуководителя = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(Руководитель, 3);
			
			Кому = Должность + " " + Наименование + Символы.ПС+ ФИОРуководителя;
		КонецЕсли;
		
		СоответствиеПолучателей.Вставить(ЭлементОрганизации, Кому);
		
	КонецЦикла;
	
	ПараметрыПечати.Вставить("СоответствиеПолучателей", СоответствиеПолучателей);
	Возврат ПараметрыПечати;
	
	
КонецФункции // СоответствиеДанныхОбОрганизациях()

// Функция формирует печатную форму документа.
//
Функция ПечатьНакладная(МассивОбъектов, ОбъектыПечати)
	
	КолонкаКодов       = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	ВыводитьКоды       = НЕ ПустаяСтрока(КолонкаКодов);
	ВыводитьУпаковки   = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Возврат товаров от покупателя'");

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровОтПокупателя_Накладная";
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка                               КАК Ссылка,
	|	Документ.Номер                                КАК Номер,
	|	Документ.Дата                                 КАК Дата,
	|	Документ.Организация                          КАК Покупатель,
	|	Документ.Контрагент                           КАК Поставщик,
	|	Документ.Ответственный.ФизическоеЛицо         КАК Получил,
	|	Документ.Организация.Префикс                  КАК Префикс,
	|	Документ.УчитыватьНДС                         КАК УчитыватьНДС,
	|	Документ.ЦенаВключаетНДС                      КАК ЦенаВключаетНДС,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Контрагент)            КАК ПоставщикПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация)           КАК ПокупательПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Ответственный.ФизическоеЛицо) КАК ПолучилПредставление
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|	И Документ.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Дата
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	" + ?(ВыводитьКоды, "ТаблицаТовары.Номенклатура." + КолонкаКодов +" КАК КолонкаКодов,", "") + "
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Упаковка.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ПредставлениеЕдиницыИзмеренияУпаковки,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.ДокументПродажи КАК ОснованиеВозврата,
	|	ТаблицаТовары.Ссылка КАК Ссылка 
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка");
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВозвратТоваровОтПокупателя.ПФ_MXL_ВозвратТоваровОтПокупателя");

	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок|Основная");
	ОбластьШапка     = Макет.ПолучитьОбласть("Шапка|Основная");
	
	ОбластьШапкаТаблицыНачало   = Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
	ОбластьСтрокаТаблицыНачало  = Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
	ОбластьПодвалТаблицыНачало  = Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
	
	ОбластьШапкаТаблицыКолонкаКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьСтрокаТаблицыКолонкаКодов = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
	ОбластьПодвалТаблицыКолонкаКодов = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
	
	ОбластьШапкаТаблицыКолонкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов; 
	
	ОбластьШапкаТаблицыКолонкаУпаковок  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаУпаковок");
	ОбластьСтрокаТаблицыКолонкаУпаковок = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаУпаковок");
	ОбластьПодвалТаблицыКолонкаУпаковок = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаУпаковок");
	
	ОбластьКолонкаТоваров = Макет.Область("КолонкаТоваров");
	
	Если НЕ ВыводитьКоды Тогда
		
		ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		
	КонецЕсли;
	
	Если НЕ ВыводитьУпаковки Тогда
		
		ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаУпаковокКоличество").ШиринаКолонки
		+ Макет.Область("КолонкаУпаковокПредставление").ШиринаКолонки; 		
		
	КонецЕсли;
	
	ОбластьШапкаТаблицыКолонкаТоваров  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
	ОбластьСтрокаТаблицыКолонкаТоваров = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
	ОбластьПодвалТаблицыКолонкаТоваров = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
	
	
	
	ОбластьШапкаТаблицыКонец  = Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	ОбластьСтрокаТаблицыКонец = Макет.ПолучитьОбласть("СтрокаТаблицы|КонецСтроки");
	ОбластьПодвалТаблицыКонец = Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");
	
	ОбластьПодписей      = Макет.ПолучитьОбласть("Подписи|Основная");
	ОбластьИтого         = Макет.ПолучитьОбласть("Итого|Основная");
	ОбластьИтогоНДС      = Макет.ПолучитьОбласть("ИтогоНДС|Основная");
	ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью|Основная");
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнымЧастям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// ЗАГОЛОВОК
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// ШАПКА
		ОбластьШапка.Параметры.Заполнить(ВыборкаПоДокументам);
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаКодов);
			
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров);
		
		Если ВыводитьУпаковки Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаУпаковок);
			
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);
		ВсегоНаименований  = 0;
		Итого              = 0;
		ИтогоНДС           = 0;
		ИтогоРозничныеЦены = 0;
		// СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
			
			Если ВыводитьКоды Тогда
				
				ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Артикул = ВыборкаПоСтрокамТЧ["КолонкаКодов"];
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
				
			КонецЕсли;
			
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
			
			Если ВыводитьУпаковки Тогда
				
				ОбластьСтрокаТаблицыКолонкаУпаковок.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаУпаковок);
				
			КонецЕсли;
			
			ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);	
			
			ВсегоНаименований = ВсегоНаименований + 1;
			Итого             = Итого + ВыборкаПоСтрокамТЧ.Сумма;
			ИтогоНДС          = ИтогоНДС + ВыборкаПоСтрокамТЧ.СуммаНДС;
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаКодов);
			
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
		
		Если ВыводитьУпаковки Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаУпаковок);
			
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
		
		// ИТОГО
		ТекстИтоговойСтроки = НСтр("ru = '%Итого%'");
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%",ФормированиеПечатныхФормСервер.ФорматСумм(Итого));
		ОбластьИтого.Параметры.Итого = ТекстИтоговойСтроки;
		
		ТекстИтоговойСтроки = НСтр("ru = '%Итого%'");
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%",ФормированиеПечатныхФормСервер.ФорматСумм(ИтогоНДС));
		ОбластьИтогоНДС.Параметры.ИтогоНДС = ТекстИтоговойСтроки;
		ОбластьИтогоНДС.Параметры.НДС = ?(ВыборкаПоДокументам.ЦенаВключаетНДС, НСтр("ru='В том числе НДС:'"), НСтр("ru='Сумма НДС:'"));
		
		ТабличныйДокумент.Вывести(ОбластьИтого);
		ТабличныйДокумент.Вывести(ОбластьИтогоНДС);
		
		// СУММА ПРОПИСЬЮ
		
		ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%, на сумму %Итого%'");
		СуммаКПрописи = Итого + ?(ВыборкаПоДокументам.ЦенаВключаетНДС, 0, ИтогоНДС);
		
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%", ФормированиеПечатныхФормСервер.ФорматСумм(СуммаКПрописи));
		
		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
		ОбластьСуммаПрописью.Параметры.СуммаПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(СуммаКПрописи);
		
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		// ПОДПИСИ
		ОбластьПодписей.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьПодписей.Параметры.ПолучилПредставление = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Получил);
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует печатную форму документа.
//
Функция ПечатьЗаявленияНаВозврат(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Заявление на возврат'");

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровОтПокупателя_ЗаявлениеНаВозврат";
	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Организация КАК Покупатель,
	|	Документ.Контрагент КАК Поставщик,
	|	Документ.Ответственный.ФизическоеЛицо КАК Получил,
	|	Документ.Организация.Префикс КАК Префикс,
	|	Документ.УчитыватьНДС КАК УчитыватьНДС,
	|	Документ.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Контрагент) КАК ПоставщикПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ПокупательПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Ответственный.ФизическоеЛицо) КАК ПолучилПредставление,
	|	Документ.СуммаДокумента,
	|	Документ.Магазин,
	|	Документ.ЧекДата КАК ЧекДатаПоДокументу,
	|	Документ.ЧекНомер,
	|	Документ.ДатаРождения КАК ДатаРожденияПоДокументу,
	|	Документ.ФизЛицо,
	|	Документ.ПоДокументу КАК ПаспортныеДанные
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|	И Документ.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Упаковка.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ПредставлениеЕдиницыИзмеренияУпаковки,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.ДокументПродажи КАК ОснованиеВозврата,
	|	ТаблицаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка");
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВозвратТоваровОтПокупателя.ПФ_MXL_ЗаявлениеНаВозврат");
	
	ОбластьШапка         = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаТаблицы  = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрокаТоваров = Макет.ПолучитьОбласть("Товар");
	ОбластьПодвал        = Макет.ПолучитьОбласть("Подвал");
	
	ПервыйДокумент = Истина;
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнымЧастям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СоответствиеПолучателей = ПараметрыПечати.СоответствиеПолучателей;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьШапка.Параметры.Кому = СоответствиеПолучателей.Получить(ВыборкаПоДокументам.Покупатель);
		
		ОбластьШапка.Параметры.Заполнить(ВыборкаПоДокументам);
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ЧекДатаПоДокументу) Тогда
			ОбластьШапка.Параметры.ЧекДата = Формат(ВыборкаПоДокументам.ЧекДатаПоДокументу, "ДЛФ = DD")
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ДатаРожденияПоДокументу) Тогда
			ОбластьШапка.Параметры.ДатаРождения = Формат(ВыборкаПоДокументам.ДатаРожденияПоДокументу, "ДЛФ = DD")
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ФизЛицо) Тогда
			
			ФИОФизЛицаРП = "";
			ФИОФизЛицаТП = "";
			
			Если ПараметрыПечати.Свойство("СоответствиеФизЛиц") Тогда
				СоответствиеФизЛицВИменительномПадеже = ПараметрыПечати.СоответствиеФизЛиц.ВИменительномПадеже;
				СоответствиеФизЛицВРодительномПадеже  = ПараметрыПечати.СоответствиеФизЛиц.ВРодительномПадеже;
				СоответствиеФизЛицВТворительномПадеже = ПараметрыПечати.СоответствиеФизЛиц.ВТворительномПадеже;
				
				ФИОФизЛицаРП = СоответствиеФизЛицВРодительномПадеже.Получить(ВыборкаПоДокументам.Ссылка);
				ФИОФизЛицаТП = СоответствиеФизЛицВТворительномПадеже.Получить(ВыборкаПоДокументам.Ссылка);
				ФИОФизЛицаИП = СоответствиеФизЛицВТворительномПадеже.Получить(ВыборкаПоДокументам.Ссылка);
			Иначе
				
				Если Не ТипЗнч(ВыборкаПоДокументам.ФизЛицо) = Тип("Строка")Тогда
					ФизЛицоФИО = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(, Новый Структура("ФизЛицо", ВыборкаПоДокументам.ФизЛицо)); 
					ФИОФизЛицаИП = ФизЛицоФИО.Фамилия + " " + ФизЛицоФИО.Имя + " " + ФизЛицоФИО.Отчество;
					
					Если СокрЛП(ФИОФизЛицаИП) = "" Тогда
						ФИОФизЛицаИП = ВыборкаПоДокументам.ФизЛицо.Наименование;
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(ВыборкаПоДокументам.ФизЛицо) = Тип("Строка") Тогда
					ФИОФизЛицаИП = ВыборкаПоДокументам.ФизЛицо;
				Иначе
					ФИОФизЛицаИП = ""
				КонецЕсли;
				
				ФИОФизЛицаРП = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(ФИОФизЛицаИП, 2);
				ФИОФизЛицаТП = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(ФИОФизЛицаИП, 5);
			КонецЕсли;
			
			
			ОбластьШапка.Параметры.ОтКого = НСтр("ru = 'от'") + " " + ФИОФизЛицаРП;
			ОбластьШапка.Параметры.ФИОПокупателя = ФИОФизЛицаТП;
			
		КонецЕсли;
		
		ОбластьШапка.Параметры.Заполнить(ПараметрыПечати);
		
		Если ВыборкаПоСтрокамТЧ.Количество() > 1 Тогда
			ОбластьШапка.Параметры.О1 = "и";
			ОбластьШапка.Параметры.О2 = "ы";
			ОбластьШапка.Параметры.О3 = "ы";
		Иначе
			ОбластьШапка.Параметры.О1 = "";
			ОбластьШапка.Параметры.О2 = "";
			ОбластьШапка.Параметры.О3 = "";
		КонецЕсли;
		
		ОбластьШапка.Параметры.Количество = ВыборкаПоСтрокамТЧ.Количество();
		
		ДлинноеПодчеркивание = "______________________________________________________";
		
		СреднееПодчеркивание = "________________";
		
		КороткоеПодчеркивание = "________";
		
		Если НЕ ЗначениеЗаполнено(ОбластьШапка.Параметры.ОтКого) 
			ИЛИ ОбластьШапка.Параметры.ОтКого = "от " Тогда
			ОбластьШапка.Параметры.ОтКого = "от " + ДлинноеПодчеркивание;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьШапка.Параметры.ФИОПокупателя) Тогда
			ОбластьШапка.Параметры.ФИОПокупателя = ДлинноеПодчеркивание;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьШапка.Параметры.ДатаРождения) Тогда
			ОбластьШапка.Параметры.ДатаРождения = СреднееПодчеркивание;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьШапка.Параметры.ПаспортныеДанные) Тогда
			ОбластьШапка.Параметры.ПаспортныеДанные = ДлинноеПодчеркивание + ДлинноеПодчеркивание + ДлинноеПодчеркивание;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьШапка.Параметры.ЧекНомер) Тогда
			ОбластьШапка.Параметры.ЧекНомер = КороткоеПодчеркивание;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьШапка.Параметры.ЧекДата) Тогда
			ОбластьШапка.Параметры.ЧекДата = СреднееПодчеркивание;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		
		Счетчик = 0;
		// СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			Счетчик = Счетчик + 1;
			
			ОбластьСтрокаТоваров.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			
			ОбластьСтрокаТоваров.Параметры.Номер            = Счетчик;
			ОбластьСтрокаТоваров.Параметры.Номенклатура     = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаТоваров);
		КонецЦикла;
		
		ОбластьПодвал.Параметры.СуммаДокумента = ВыборкаПоДокументам.СуммаДокумента;
		ОбластьПодвал.Параметры.Дата = Формат(ВыборкаПоДокументам.Дата, "ДЛФ = DD");;
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует печатную форму документа.
//
Функция ПечатьЗаявленияОбОшибочноПробитомЧеке(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Заявление об ошибочно пробитом чеке'");

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровОтПокупателя_ЗаявлениеОбОшибочноПробитомЧеке";
	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Организация КАК Покупатель,
	|	Документ.Контрагент КАК Поставщик,
	|	Документ.Ответственный.ФизическоеЛицо КАК Получил,
	|	Документ.Организация.Префикс КАК Префикс,
	|	Документ.УчитыватьНДС КАК УчитыватьНДС,
	|	Документ.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Контрагент) КАК ПоставщикПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ПокупательПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Ответственный.ФизическоеЛицо) КАК ПолучилПредставление,
	|	Документ.СуммаДокумента,
	|	Документ.Магазин,
	|	Документ.ЧекДата КАК ЧекДатаПоДокументу,
	|	Документ.ЧекНомер,
	|	Документ.ДатаРождения КАК ДатаРожденияПоДокументу,
	|	Документ.ФизЛицо,
	|	Документ.ПоДокументу КАК ПаспортныеДанные
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|	И Документ.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Упаковка.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ПредставлениеЕдиницыИзмеренияУпаковки,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.ДокументПродажи КАК ОснованиеВозврата,
	|	ТаблицаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка");
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВозвратТоваровОтПокупателя.ПФ_MXL_ЗаявлениеОбОшибочноПробитомЧеке");

	
	ОбластьШапка         = Макет.ПолучитьОбласть("Шапка");
	ОбластьПодвал        = Макет.ПолучитьОбласть("Подвал");
	
	ПервыйДокумент = Истина;
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	
	СоответствиеПолучателей = ПараметрыПечати.СоответствиеПолучателей;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьШапка.Параметры.Кому = СоответствиеПолучателей.Получить(ВыборкаПоДокументам.Покупатель);
		
		ОбластьШапка.Параметры.Заполнить(ВыборкаПоДокументам);
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ЧекДатаПоДокументу) Тогда
			ОбластьШапка.Параметры.ЧекДата = Формат(ВыборкаПоДокументам.ЧекДатаПоДокументу, "ДЛФ = DD")
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ДатаРожденияПоДокументу) Тогда
			ОбластьШапка.Параметры.ДатаРождения = Формат(ВыборкаПоДокументам.ДатаРожденияПоДокументу, "ДЛФ = DD")
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ФизЛицо) Тогда
			
			ФИОФизЛицаРП = "";
			ФИОФизЛицаТП = "";
			
			Если ПараметрыПечати.Свойство("СоответствиеФизЛиц") Тогда
				СоответствиеФизЛицВИменительномПадеже = ПараметрыПечати.СоответствиеФизЛиц.ВИменительномПадеже;
				СоответствиеФизЛицВРодительномПадеже  = ПараметрыПечати.СоответствиеФизЛиц.ВРодительномПадеже;
				СоответствиеФизЛицВТворительномПадеже = ПараметрыПечати.СоответствиеФизЛиц.ВТворительномПадеже;
				
				ФИОФизЛицаРП = СоответствиеФизЛицВРодительномПадеже.Получить(ВыборкаПоДокументам.Ссылка);
				ФИОФизЛицаТП = СоответствиеФизЛицВТворительномПадеже.Получить(ВыборкаПоДокументам.Ссылка);
				ФИОФизЛицаИП = СоответствиеФизЛицВИменительномПадеже.Получить(ВыборкаПоДокументам.Ссылка);
			Иначе
				
				Если Не ТипЗнч(ВыборкаПоДокументам.ФизЛицо) = Тип("Строка")Тогда
					ФизЛицоФИО = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(, Новый Структура("ФизЛицо", ВыборкаПоДокументам.ФизЛицо)); 
					ФИОФизЛицаИП = ФизЛицоФИО.Фамилия + " " + ФизЛицоФИО.Имя + " " + ФизЛицоФИО.Отчество;
					
					Если СокрЛП(ФИОФизЛицаИП) = "" Тогда
						ФИОФизЛицаИП = ВыборкаПоДокументам.ФизЛицо.Наименование;
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(ВыборкаПоДокументам.ФизЛицо) = Тип("Строка") Тогда
					ФИОФизЛицаИП = ВыборкаПоДокументам.ФизЛицо;
				Иначе
					ФИОФизЛицаИП = ""
				КонецЕсли;
				
				ФИОФизЛицаРП = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(ФИОФизЛицаИП, 2);
				ФИОФизЛицаТП = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(ФИОФизЛицаИП, 5);
			КонецЕсли;
			
			ОбластьШапка.Параметры.ОтКого = НСтр("ru = 'от'") + " " + ФИОФизЛицаРП;
			ОбластьШапка.Параметры.ФИОПродавца = ФИОФизЛицаТП;
			
			ОбластьПодвал.Параметры.ФИОКассира = ФИОФизЛицаИП;
		КонецЕсли;
		
		ОбластьШапка.Параметры.Заполнить(ПараметрыПечати);
		
		ДлинноеПодчеркивание = "______________________________________________________";
		
		СреднееПодчеркивание = "________________";
		
		КороткоеПодчеркивание = "________";
		
		Если НЕ ЗначениеЗаполнено(ОбластьШапка.Параметры.ОтКого) 
			ИЛИ ОбластьШапка.Параметры.ОтКого = "от " Тогда
			ОбластьШапка.Параметры.ОтКого = "от " + ДлинноеПодчеркивание;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьШапка.Параметры.ФИОПродавца) Тогда
			ОбластьШапка.Параметры.ФИОПродавца = ДлинноеПодчеркивание;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьШапка.Параметры.ДатаРождения) Тогда
			ОбластьШапка.Параметры.ДатаРождения = СреднееПодчеркивание;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьШапка.Параметры.ПаспортныеДанные) Тогда
			ОбластьШапка.Параметры.ПаспортныеДанные = ДлинноеПодчеркивание + ДлинноеПодчеркивание + ДлинноеПодчеркивание;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьШапка.Параметры.ЧекНомер) Тогда
			ОбластьШапка.Параметры.ЧекНомер = КороткоеПодчеркивание;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьШапка.Параметры.ЧекДата) Тогда
			ОбластьШапка.Параметры.ЧекДата = СреднееПодчеркивание;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ОбластьПодвал.Параметры.Заполнить(ПараметрыПечати);
		ОбластьПодвал.Параметры.Дата = Формат(ВыборкаПоДокументам.Дата, "ДЛФ = DD");;
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует печатную форму документа.
//
Функция ПечатьЗаявленияНаУтерянныйЧек(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Заявление на возврат'");

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВозвратТоваровОтПокупателя_ЗаявлениеНаУтерянныйЧек";
	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Организация КАК Покупатель,
	|	Документ.Контрагент КАК Поставщик,
	|	Документ.Ответственный.ФизическоеЛицо КАК Получил,
	|	Документ.Организация.Префикс КАК Префикс,
	|	Документ.УчитыватьНДС КАК УчитыватьНДС,
	|	Документ.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Контрагент) КАК ПоставщикПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ПокупательПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Ответственный.ФизическоеЛицо) КАК ПолучилПредставление,
	|	Документ.СуммаДокумента,
	|	Документ.Магазин,
	|	Документ.ЧекДата КАК ЧекДатаПоДокументу,
	|	Документ.ЧекНомер,
	|	Документ.ДатаРождения КАК ДатаРожденияПоДокументу,
	|	Документ.ФизЛицо,
	|	Документ.ПоДокументу КАК ПаспортныеДанные
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|	И Документ.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Упаковка.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ПредставлениеЕдиницыИзмеренияУпаковки,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.ДокументПродажи КАК ОснованиеВозврата,
	|	ТаблицаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка");
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВозвратТоваровОтПокупателя.ПФ_MXL_ЗаявлениеНаУтерянныйЧек");

	
	ОбластьШапка         = Макет.ПолучитьОбласть("Шапка");
	ОбластьПодвал        = Макет.ПолучитьОбласть("Подвал");
	
	ПервыйДокумент = Истина;
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнымЧастям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СоответствиеПолучателей = ПараметрыПечати.СоответствиеПолучателей;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьШапка.Параметры.Кому = СоответствиеПолучателей.Получить(ВыборкаПоДокументам.Покупатель);
		
		ОбластьШапка.Параметры.Заполнить(ВыборкаПоДокументам);
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ДатаРожденияПоДокументу) Тогда
			ОбластьШапка.Параметры.ДатаРождения = Формат(ВыборкаПоДокументам.ДатаРожденияПоДокументу, "ДЛФ = DD")
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ФизЛицо) Тогда
			
			ФИОФизЛицаРП = "";
			ФИОФизЛицаТП = "";
			
			Если ПараметрыПечати.Свойство("СоответствиеФизЛиц") Тогда
				СоответствиеФизЛицВИменительномПадеже = ПараметрыПечати.СоответствиеФизЛиц.ВИменительномПадеже;
				СоответствиеФизЛицВРодительномПадеже  = ПараметрыПечати.СоответствиеФизЛиц.ВРодительномПадеже;
				СоответствиеФизЛицВТворительномПадеже = ПараметрыПечати.СоответствиеФизЛиц.ВТворительномПадеже;
				
				ФИОФизЛицаРП = СоответствиеФизЛицВРодительномПадеже.Получить(ВыборкаПоДокументам.Ссылка);
				ФИОФизЛицаТП = СоответствиеФизЛицВТворительномПадеже.Получить(ВыборкаПоДокументам.Ссылка);
				ФИОФизЛицаИП = СоответствиеФизЛицВТворительномПадеже.Получить(ВыборкаПоДокументам.Ссылка);
			Иначе
				
				Если Не ТипЗнч(ВыборкаПоДокументам.ФизЛицо) = Тип("Строка")Тогда
					ФизЛицоФИО = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(, Новый Структура("ФизЛицо", ВыборкаПоДокументам.ФизЛицо)); 
					ФИОФизЛицаИП = ФизЛицоФИО.Фамилия + " " + ФизЛицоФИО.Имя + " " + ФизЛицоФИО.Отчество;
					
					Если СокрЛП(ФИОФизЛицаИП) = "" Тогда
						ФИОФизЛицаИП = ВыборкаПоДокументам.ФизЛицо.Наименование;
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(ВыборкаПоДокументам.ФизЛицо) = Тип("Строка") Тогда
					ФИОФизЛицаИП = ВыборкаПоДокументам.ФизЛицо;
				Иначе
					ФИОФизЛицаИП = ""
				КонецЕсли;
				
				ФИОФизЛицаРП = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(ФИОФизЛицаИП, 2);
				ФИОФизЛицаТП = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(ФИОФизЛицаИП, 5);
			КонецЕсли;
			
			ОбластьШапка.Параметры.ОтКого = НСтр("ru = 'от'") + " "+ ФИОФизЛицаРП;
			ОбластьШапка.Параметры.ФИОПокупателя = ФИОФизЛицаТП;
			
		КонецЕсли;
		
		ОбластьШапка.Параметры.Заполнить(ПараметрыПечати);
		
		Если ВыборкаПоСтрокамТЧ.Количество() >1 Тогда
			ОбластьШапка.Параметры.О1 = "и";
			ОбластьШапка.Параметры.О2 = "ы";
			ОбластьШапка.Параметры.О4 = "ы";
		Иначе
			ОбластьШапка.Параметры.О1 = "";
			ОбластьШапка.Параметры.О2 = "";
			ОбластьШапка.Параметры.О4 = "";
		КонецЕсли;
		
		ДлинноеПодчеркивание = "______________________________________________________";
		
		СреднееПодчеркивание = "________________";
		
		КороткоеПодчеркивание = "________";
		
		Если НЕ ЗначениеЗаполнено(ОбластьШапка.Параметры.ОтКого) 
			ИЛИ ОбластьШапка.Параметры.ОтКого = "от " Тогда
			ОбластьШапка.Параметры.ОтКого = "от " + ДлинноеПодчеркивание;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьШапка.Параметры.ФИОПокупателя) Тогда
			ОбластьШапка.Параметры.ФИОПокупателя = ДлинноеПодчеркивание;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьШапка.Параметры.ДатаРождения) Тогда
			ОбластьШапка.Параметры.ДатаРождения = СреднееПодчеркивание;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьШапка.Параметры.ПаспортныеДанные) Тогда
			ОбластьШапка.Параметры.ПаспортныеДанные = ДлинноеПодчеркивание + ДлинноеПодчеркивание + ДлинноеПодчеркивание;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ОбластьПодвал.Параметры.Дата = Формат(ВыборкаПоДокументам.Дата, "ДЛФ = DD");;
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует печатную форму документа.
//
Функция ПечатьТОРГ12(МассивОбъектов, ОбъектыПечати,ВыводитьУслуги = Истина)
	
	КолонкаКодов = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	
	Если ПустаяСтрока(КолонкаКодов) Тогда
		
		КолонкаКодов = "Код";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументКПечати.Ссылка                                                 КАК Ссылка,
	|	ДокументКПечати.Номер                                                  КАК Номер,
	|	ДокументКПечати.Дата                                                   КАК Дата,
	|	ДокументКПечати.Контрагент                                             КАК Контрагент,
	|	ДокументКПечати.Организация                                            КАК Организация,
	|	ДокументКПечати.Организация                                            КАК Руководители,
	|	ДокументКПечати.Организация.Префикс                                    КАК Префикс,
	|	ДокументКПечати.Организация                                            КАК Грузоотправитель,
	|	ДокументКПечати.Контрагент                                             КАК Грузополучатель,
	|	ДокументКПечати.Контрагент                                             КАК Покупатель,
	|	ДокументКПечати.Организация                                            КАК Поставщик,
	|	ДокументКПечати.Контрагент                                             КАК Плательщик,
	|	ДокументКПечати.Ответственный.ФизическоеЛицо                           КАК ОтветственноеЛицо,
	|	ДокументКПечати.ЦенаВключаетНДС                                        КАК ЦенаВключаетНДС,
	|	ДокументКПечати.УчитыватьНДС                                           КАК УчитыватьНДС
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ДокументКПечати
	|
	|ГДЕ
	|	ДокументКПечати.Ссылка В (&МассивДокументов)
	|	И ДокументКПечати.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;		
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Ссылка                                                     КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура                                               КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное                            КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + КолонкаКодов + "                          КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление                             КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Код                                       КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                                           КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление                         КАК ВидУпаковки,
	|	ВложенныйЗапрос.КоэффициентМест / ВложенныйЗапрос.Коэффициент              КАК КоличествоВОдномМесте,
	|	ВложенныйЗапрос.Характеристика                                             КАК Характеристика,
	|	ВложенныйЗапрос.СтавкаНДС                                                  КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена                                                       КАК Цена,
	|	ВложенныйЗапрос.Количество                                                 КАК Количество,
	|	ЕСТЬNULL(ВложенныйЗапрос.КоличествоМест, 0)                                КАК КоличествоМест,
	|	ВложенныйЗапрос.Сумма                                                      КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС                                                   КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки                                                КАК НомерСтроки,
	|	ВложенныйЗапрос.МассаБрутто                                                КАК МассаБрутто,
	|	ЛОЖЬ                                                                       КАК ЭтоВозвратнаяТара
	|ИЗ (
	|	ВЫБРАТЬ
	|		Товары.Ссылка КАК Ссылка,
	|		Товары.Номенклатура КАК Номенклатура,
	|
	|		ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
	|			1
	|		ИНАЧЕ
	|			Товары.Упаковка.Коэффициент
	|		КОНЕЦ КАК Коэффициент,
	|
	|		ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ
	|			Товары.Упаковка.ЕдиницаИзмерения
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|
	|		ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
	|			1
	|		ИНАЧЕ
	|			Товары.Упаковка.Коэффициент
	|		КОНЕЦ КАК КоэффициентМест,
	|
	|		ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) ТОГДА
	|			Товары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ
	|			Товары.Упаковка.ЕдиницаИзмерения
	|		КОНЕЦ КАК ЕдиницаИзмеренияМест,
	|
	|		ВЫБОР КОГДА Товары.Упаковка.Вес ЕСТЬ NULL ТОГДА
	|			Товары.Количество * Товары.Номенклатура.Вес
	|		ИНАЧЕ
	|			Товары.КоличествоУпаковок * Товары.Упаковка.Вес
	|		КОНЕЦ КАК МассаБрутто,
	|
	|		Товары.Характеристика     КАК Характеристика,
	|		Товары.СтавкаНДС          КАК СтавкаНДС,
	|		ВЫБОР
	|			КОГДА
	|				Товары.КоличествоУпаковок = 0
	|			ТОГДА
	|				Товары.Цена
	|			ИНАЧЕ
	|				Товары.Сумма / Товары.КоличествоУпаковок
	|		КОНЕЦ КАК Цена,
	|		Товары.КоличествоУпаковок КАК Количество,
	|		Товары.КоличествоУпаковок КАК КоличествоМест,
	|		Товары.Сумма              КАК Сумма,
	|		Товары.СуммаНДС           КАК СуммаНДС,
	|		Товары.НомерСтроки        КАК НомерСтроки
	|	ИЗ
	|		Документ.ВозвратТоваровОтПокупателя.Товары КАК Товары
	|	ГДЕ
	|		Товары.Ссылка В (&МассивДокументов)
	|		И Товары.Ссылка.Проведен
	|		" + ?(НЕ ВыводитьУслуги, " И НЕ (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)) ", "") + "
	|	
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	НомерСтроки
	|
	|ИТОГИ ПО
	|	Ссылка
	|");
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваров_ТОРГ12";
	
	ЕдиницаИзмеренияВеса           = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ЕдиницаИзмеренияВеса");
	
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ДанныеПечати = МассивРезультатов[0].Выбрать();
	ВыборкаПоДокументам = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ТОРГ12");
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		СведенияОПоставщике       = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Поставщик,        ДанныеПечати.Дата);
		СведенияОПокупателе       = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Покупатель,       ДанныеПечати.Дата);
		СведенияОГрузополучателе  = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,  ДанныеПечати.Дата);
		СведенияОГрузоотправитель = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата);
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.Заполнить(ДанныеПечати);
		ОбластьШапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер, Ложь, Истина);
		ОбластьШапка.Параметры.ДатаДокумента  = ДанныеПечати.Дата;
		
		Если ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель Тогда
			
			ОбластьШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, 
			"ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны,БанковскиеРеквизиты");
			
		Иначе
			
			ОбластьШапка.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузоотправитель, 
			"ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны,БанковскиеРеквизиты");
			
		КонецЕсли;
		
		ОбластьШапка.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОГрузополучателе, 
		"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,БанковскиеРеквизиты");
		
		ОбластьШапка.Параметры.ПредставлениеПоставщика  = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, 
		"ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны,БанковскиеРеквизиты");
		
		ОбластьШапка.Параметры.ПредставлениеПлательщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПокупателе, 
		"ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны,БанковскиеРеквизиты");
		
		// Выводим коды
		ОбластьШапка.Параметры.ОрганизацияПоОКПО          = СведенияОПоставщике.КодПоОКПО;
		ОбластьШапка.Параметры.ВидДеятельностиПоОКДП      = "";
		ОбластьШапка.Параметры.ГрузополучательПоОКПО      = СведенияОПоставщике.КодПоОКПО;
		ОбластьШапка.Параметры.ПоставщикПоОКПО            = СведенияОПоставщике.КодПоОКПО;
		ОбластьШапка.Параметры.ПлательщикПоОКПО           = СведенияОПокупателе.КодПоОКПО;
		ОбластьШапка.Параметры.ОснованиеНомер             = "";
		ОбластьШапка.Параметры.ОснованиеДата              = "";
		ОбластьШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
		ОбластьШапка.Параметры.ТранспортнаяНакладнаяДата  = "";
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		НомерСтраницы = 1;
		
		ИтоговыеСуммы = Новый Структура;
		
		// Инициализация итогов по странице.
		ИтоговыеСуммы.Вставить("ИтогоМассаБруттоНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоМестНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоКоличествоНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоСуммаНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоНДСНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоСуммаСНДСНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоМассаБруттоНаСтранице", 0);
		ИтоговыеСуммы.Вставить("ИтогоМассаНеттоНаСтранице", 0);
		
		// Инициализация итогов по документу.
		ИтоговыеСуммы.Вставить("ИтогоМассаБрутто", 0);
		ИтоговыеСуммы.Вставить("ИтогоМест", 0);
		ИтоговыеСуммы.Вставить("ИтогоКоличество", 0);
		ИтоговыеСуммы.Вставить("ИтогоСуммаСНДС", 0);
		ИтоговыеСуммы.Вставить("ИтогоСумма", 0);
		ИтоговыеСуммы.Вставить("ИтогоНДС", 0);
		ИтоговыеСуммы.Вставить("ИтогоМассаБрутто", 0);
		ИтоговыеСуммы.Вставить("ИтогоМассаНетто", 0);
		
		ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", 0);
		ИтоговыеСуммы.Вставить("СуммаПрописью", "");
		
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("Номер", 0);
		ДанныеСтроки.Вставить("Мест", 0);
		ДанныеСтроки.Вставить("Количество", 0);
		ДанныеСтроки.Вставить("Цена", 0);
		ДанныеСтроки.Вставить("СуммаБезНДС", 0);
		ДанныеСтроки.Вставить("СуммаНДС", 0);
		ДанныеСтроки.Вставить("СуммаСНДС", 0);
		ДанныеСтроки.Вставить("МассаБрутто", 0);
		ДанныеСтроки.Вставить("МассаНетто", 0);
		
		
		// Создаем массив для проверки вывода.
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть документа.
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьСтрока           = Макет.ПолучитьОбласть("Строка");
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
		ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		КоличествоСтрок = ВыборкаПоДокументам.Количество();
		
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		Пока СтрокаТовары.Следующий() Цикл
			
			ДанныеСтроки.Номер = ДанныеСтроки.Номер + 1;
			
			ОбластьСтрока.Параметры.Заполнить(СтрокаТовары);
			ОбластьСтрока.Параметры.ТоварНаименование = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
				СтрокаТовары.ТоварНаименование,
				СтрокаТовары.Характеристика);
			
			ДанныеСтроки.Мест = СтрокаТовары.КоличествоМест;
			ДанныеСтроки.Количество  = СтрокаТовары.Количество;
			
			Если ЕдиницаИзмеренияВеса <> Неопределено Тогда
				Если Не ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
					ДанныеСтроки.МассаБрутто = 0;
				Иначе
					ДанныеСтроки.МассаБрутто = СтрокаТовары.МассаБрутто;
				КонецЕсли;
			КонецЕсли;
			
			ДанныеСтроки.СуммаСНДС   = Окр((СтрокаТовары.Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СтрокаТовары.СуммаНДС)), 2);
			ДанныеСтроки.СуммаНДС    = СтрокаТовары.СуммаНДС;
			ДанныеСтроки.СуммаБезНДС = ДанныеСтроки.СуммаСНДС - ДанныеСтроки.СуммаНДС;
			
			Если ДанныеПечати.ЦенаВключаетНДС Тогда
				ДанныеСтроки.Цена = ?(ДанныеСтроки.Количество = 0, 0, ДанныеСтроки.СуммаБезНДС / ДанныеСтроки.Количество);
			Иначе
				ДанныеСтроки.Цена = СтрокаТовары.Цена;
			КонецЕсли;
			
			ОбластьСтрока.Параметры.Заполнить(ДанныеСтроки);
			
			Если ДанныеСтроки.Номер = 1 Тогда // первая строка
				
				ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			Иначе
				
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьШапка);
				МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
				МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
				
				Если ДанныеСтроки.Номер = КоличествоСтрок Тогда
					
					МассивВыводимыхОбластей.Добавить(ОбластьВсего);
					МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
					
				КонецЕсли;
				
				Если ДанныеСтроки.Номер <> 1 И Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
					
					ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
					ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
					
					ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = 0;
					ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = 0;
					ИтоговыеСуммы.ИтогоМестНаСтранице        = 0;
					ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = 0;
					ИтоговыеСуммы.ИтогоСуммаНаСтранице       = 0;
					ИтоговыеСуммы.ИтогоНДСНаСтранице         = 0;
					ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   = 0;
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ОбластьЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
					ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			// Увеличим итоги по странице.
			ИтоговыеСуммы.ИтогоМестНаСтранице        = ИтоговыеСуммы.ИтогоМестНаСтранице        + ДанныеСтроки.Мест;
			ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = ИтоговыеСуммы.ИтогоКоличествоНаСтранице  + ДанныеСтроки.Количество;
			ИтоговыеСуммы.ИтогоСуммаНаСтранице       = ИтоговыеСуммы.ИтогоСуммаНаСтранице       + ДанныеСтроки.СуммаБезНДС;
			ИтоговыеСуммы.ИтогоНДСНаСтранице         = ИтоговыеСуммы.ИтогоНДСНаСтранице         + ДанныеСтроки.СуммаНДС;
			ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   = ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   + ДанныеСтроки.СуммаСНДС;
			ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице + ДанныеСтроки.МассаБрутто;
			ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  + ДанныеСтроки.МассаНетто;
			
			// Увеличим итоги по документу.
			ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест        + ДанныеСтроки.Мест;
			ИтоговыеСуммы.ИтогоКоличество  = ИтоговыеСуммы.ИтогоКоличество  + ДанныеСтроки.Количество;
			ИтоговыеСуммы.ИтогоСумма       = ИтоговыеСуммы.ИтогоСумма       + ДанныеСтроки.СуммаБезНДС;
			ИтоговыеСуммы.ИтогоНДС         = ИтоговыеСуммы.ИтогоНДС         + ДанныеСтроки.СуммаНДС;
			ИтоговыеСуммы.ИтогоСуммаСНДС   = ИтоговыеСуммы.ИтогоСуммаСНДС   + ДанныеСтроки.СуммаСНДС;
			ИтоговыеСуммы.ИтогоМассаБрутто = ИтоговыеСуммы.ИтогоМассаБрутто + ДанныеСтроки.МассаБрутто;
			ИтоговыеСуммы.ИтогоМассаНетто  = ИтоговыеСуммы.ИтогоМассаНетто  + ДанныеСтроки.МассаНетто;
			
		КонецЦикла;
		
		// Выводим итоги по последней странице.
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
		
		ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом.
		ОбластьМакета = Макет.ПолучитьОбласть("Всего");
		ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		
		ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(ДанныеСтроки.Номер, ,",,,,,,,,0"));
		ИтоговыеСуммы.Вставить("СуммаПрописью", ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоСуммаСНДС));
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		
		ПолнаяДатаДокумента = Формат(ДанныеПечати.Дата, "ДФ=""дд ММММ гггг """"года""""""");
		ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
		ПервыйРазделитель = Найти(ПолнаяДатаДокумента, " ");
		ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
		ОбластьМакета.Параметры.ДатаДокументаДень = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель -1 ) + """";
		ОбластьМакета.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
		ОбластьМакета.Параметры.ДатаДокументаГод = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);
		
		Руководители = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(ДанныеПечати.Руководители, ДанныеПечати.Дата);
		
		ОбластьМакета.Параметры.ФИОГлавБухгалтера     = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(Руководители.ГлавныйБухгалтер);
		ОбластьМакета.Параметры.ФИОРуководителя       = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(Руководители.Руководитель);
		ОбластьМакета.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		СтруктураФИО = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(ДанныеПечати.ОтветственноеЛицо, ДанныеПечати.Дата);
		ОбластьМакета.Параметры.ФИОКладовщика         = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(Неопределено,СтруктураФИО.Фамилия,СтруктураФИО.Имя,СтруктураФИО.Отчество);
		
		
		Если ИтоговыеСуммы.ИтогоМест > 0 Тогда
			
			ОбластьМакета.Параметры.ВсегоМестПрописью = ЧислоПрописью(ИтоговыеСуммы.ИтогоМест, ,",,,,,,,,0");
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) И ИтоговыеСуммы.ИтогоМассаБрутто > 0 Тогда
			
			ОбластьМакета.Параметры.МассаГрузаПрописью = ЧислоПрописью(ИтоговыеСуммы.ИтогоМассаБрутто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".";
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписейПрописью;
		ОбластьМакета.Параметры.СуммаПрописью = ИтоговыеСуммы.СуммаПрописью;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьОписиНоменклатуры(МассивОбъектов, ОбъектыПечати)
	
	КолонкаКодов       = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	ВыводитьКоды       = ЗначениеЗаполнено(КолонкаКодов);
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Организация КАК Поставщик,
	|	ТаблицаДокументов.Контрагент КАК Покупатель,
	|	ТаблицаДокументов.Магазин,
	|	ТаблицаДокументов.Склад,
	|	ТаблицаДокументов.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СтруктураПечати = Новый Структура;
	СтруктураПечати.Вставить("ИмяРеквизита1", "Поставщик");
	СтруктураПечати.Вставить("ИмяРеквизита2", "Покупатель");
	СтруктураПечати.Вставить("ИмяРеквизита3", "Магазин");
	СтруктураПечати.Вставить("ИмяРеквизита4", "Склад");
	СтруктураПечати.Вставить("КоличествоРеквизитов", 4);
	СтруктураПечати.Вставить("ВыводитьКоды", ВыводитьКоды);
	СтруктураПечати.Вставить("КолонкаКодов", КолонкаКодов);
	
	ПервыйДокумент = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПечати.Вставить("Документ", Выборка.Ссылка);
		СтруктураПечати.Вставить("Реквизит1", Выборка.Поставщик);
		СтруктураПечати.Вставить("Реквизит2", Выборка.Покупатель);
		СтруктураПечати.Вставить("Реквизит3", Выборка.Магазин);
		СтруктураПечати.Вставить("Реквизит4", Выборка.Склад);
		
		УправлениеПечатьюРТ.ПечатьОписиНоменклатуры(ТабличныйДокумент, ОбъектыПечати, СтруктураПечати, ПервыйДокумент);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#Область ДействияПриОбменеГИСМ

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	НовыйСтатус        = Неопределено;
	ДальнейшееДействие = Неопределено;
	
	ИспользоватьАвтоматическийОбмен = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхГИСМ");
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.КПередаче;
		Если ИспользоватьАвтоматическийОбмен Тогда
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПередачуДанныхРегламентнымЗаданием;
		Иначе
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ВыполнитеОбмен;
		КонецЕсли;
	КонецЕсли;
	
	Если НовыйСтатус = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РегистрыСведений.СтатусыИнформированияГИСМ.ОбновитьСтатус(
		ДокументСсылка,
		НовыйСтатус,
		ДальнейшееДействие);
	
	Возврат НовыйСтатус;
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	НовыйСтатус     = Неопределено;
	ДальнейшееДействие = Неопределено;
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.Передано;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПолучениеКвитанцииОФиксации;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПолучениеКвитанции Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ПринятоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НовыйСтатус = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РегистрыСведений.СтатусыИнформированияГИСМ.ОбновитьСтатус(ДокументСсылка, НовыйСтатус, ДальнейшееДействие);
	
	Возврат НовыйСтатус;
	
КонецФункции

#КонецОбласти

#Область СообщенияXML

Функция СообщениеКПередачеXML(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		Возврат ВозвратТоваровОтПокупателяXML(ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПолучениеКвитанции Тогда
		Возврат ИнтеграцияГИСМВызовСервера.ЗапросКвитанцииОФиксацииПоСсылкеXML(ДокументСсылка, Перечисления.ОперацииОбменаГИСМ.ПередачаДанных);
	КонецЕсли;
	
КонецФункции

Функция ВозвратТоваровОтПокупателяXML(ДокументСсылка) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
	|	КОЛИЧЕСТВО(ГИСМПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ГИСМПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаГИСМ.ПередачаДанных)
	|	И ГИСМПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийГИСМ.Исходящее)
	|СГРУППИРОВАТЬ ПО
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровОтКлиента.Дата                       КАК Дата,
	|	ВозвратТоваровОтКлиента.Номер                      КАК Номер,
	|	ЕСТЬNULL(ВременнаяТаблица.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	ВозвратТоваровОтКлиента.Организация                КАК Организация,
	|	НЕОПРЕДЕЛЕНО                                       КАК Подразделение
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
	|		ПО ВозвратТоваровОтКлиента.Ссылка = ВременнаяТаблица.Ссылка
	|ГДЕ
	|	ВозвратТоваровОтКлиента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.НомерСтроки        КАК НомерСтроки,
	|	Серии.Номенклатура       КАК Номенклатура,
	|	Серии.Характеристика     КАК Характеристика,
	|	Серии.Серия.НомерКиЗГИСМ КАК НомерКиЗ,
	|	Серии.Серия.RFIDTID      КАК TID,
	|	Серии.Серия.RFIDEPC      КАК EPC
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Серии КАК Серии
	|ГДЕ
	|	Серии.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Серии.НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка = Результат[1].Выбрать();
	Товары = Результат[2].Выгрузить();
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
			Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВозвратОтРозничногоПокупателя, ДокументСсылка);
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	РеквизитыОгранизации = ИнтеграцияГИСМВызовСервера.ИННКППGLNОрганизации(Шапка.Организация, Неопределено);
	
	СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхВозвратОтРозничногоПокупателя, ДокументСсылка, НомерВерсии);
	
	ИмяТипа   = "query";
	ИмяПакета = "return_signs";
	
	ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
	
	ВозвратТоваров = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета);
	ВозвратТоваров.action_id  = ВозвратТоваров.action_id;
	
	Попытка
		ВозвратТоваров.sender_gln = РеквизитыОгранизации.GLN;
	Исключение
		ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОгранизации.GLN, Шапка);
	КонецПопытки;
	
	ВозвратТоваров.return_doc_num  = Шапка.Номер;
	ВозвратТоваров.return_doc_date = Шапка.Дата;
	
	ХранилищеВременныхДат = Новый Соответствие;
	ИнтеграцияГИСМ.УстановитьДатуСЧасовымПоясом(
		ВозвратТоваров,
		"return_date",
		Шапка.Дата,
		ХранилищеВременныхДат);
	
	ВозвратТоваров.returns = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ВозвратТоваров, "returns");
	ВозвратТоваров.returns.signs = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ВозвратТоваров.returns, "signs");
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		НоваяСтрока = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ВозвратТоваров.returns.signs, "sign");
		
		Если ЗначениеЗаполнено(СтрокаТЧ.НомерКиЗ) Тогда
			
			НоваяСтрока.sign_num = СтрокаТЧ.НомерКиЗ;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.TID) Тогда
			
			НоваяСтрока.sign_tid = СтрокаТЧ.TID;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.EPC) Тогда
			
			Попытка
				НоваяСтрока.sign_sgtin = МенеджерОборудованияКлиентСервер.ПреобразоватьHEXВБинарнуюСтроку(СтрокаТЧ.EPC);
			Исключение
				ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(
					СообщениеXML,
					СтрШаблон(НСтр("ru = 'Для номенклатуры %1 указан некорректный EPC ""%2"".'"),
						ИнтеграцияГИСМПереопределяемый.ПредставлениеНоменклатуры(СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика),
						СтрокаТЧ.EPC));
			КонецПопытки;
			
		КонецЕсли;
		
		ВозвратТоваров.returns.signs.sign.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	ПередачаДанных.version    = ПередачаДанных.version;
	ПередачаДанных[ИмяПакета] = ВозвратТоваров;
	
	ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа);
	ТекстСообщенияXML = ИнтеграцияГИСМ.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
	СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
	
	СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
	СообщениеXML.Организация  = Шапка.Организация;
	СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных;
	СообщениеXML.Документ     = ДокументСсылка;
	СообщениеXML.Версия       = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
