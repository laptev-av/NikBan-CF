
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиСертификатов(СтруктураРезультат, СтрокаРезультата);
		
	Иначе
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("НеобходимостьВводаАкцизнойМарки") Тогда
		СтруктураРезультат.Вставить("НеобходимостьВводаАкцизнойМарки", СтрокаРезультата.НеобходимостьВводаАкцизнойМарки);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	Если СтруктураПараметровКлиента.Свойство("НеобходимостьВводаАкцизнойМарки")
		И СтруктураПараметровКлиента.Свойство("АктивизироватьСтроку") Тогда
		
		СтрокаТовара = Объект.Товары.НайтиПоИдентификатору(СтруктураПараметровКлиента.АктивизироватьСтроку);
		Если СтрокаТовара <> Неопределено Тогда
			// Интерфейс ЕГАИС
			ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(СтрокаТовара);
		КонецЕсли;
	Иначе
		ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	КонецЕсли;
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТВызовСервера.ОбработатьДанныеПоНоменклатуреИзТСДСервер(ЭтотОбъект, СтруктураПараметров);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	
	ИдентификаторСтроки = Неопределено;
	ДанныеПродукции = ИнтеграцияЕГАИСРТ.ДанныеАлкогольнойПродукции(СтруктураПараметров.Номенклатура);
	Если ДанныеПродукции.ЭтоАлкогольнаяПродукция
		И ДанныеПродукции.ПродаетсяВРозлив Тогда
		Если ДанныеПродукции.Маркируемый Тогда
			ДобавленаСтрока = Ложь;
			ТекущаяСтрока = ПодключаемоеОборудованиеРТВызовСервера.ИнициализацияСтрокиТоваров(ЭтотОбъект, СтруктураПараметров, ДобавленаСтрока);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
			СтруктураДействий.Вставить("ПересчитатьСумму");
			Если ДобавленаСтрока Тогда
				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект));
				
				СтруктураПараметровСтавкиНДС = Новый Структура;
				СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
				СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
				СтруктураПараметровСтавкиНДС.Вставить("Склад"      , Объект.Склад);
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", СтруктураПараметровСтавкиНДС);
				
				ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
			КонецЕсли;
			
			ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ЗавершениеОбработкиСтрокиТоваров(ЭтотОбъект, ТекущаяСтрока, СтруктураДействий);
			
			Если ДобавленаСтрока Тогда
				ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = Истина;
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Номенклатура %1 не является маркируемой разливной алкогольной продукцией.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураПараметров.Номенклатура);
			ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Для немаркируемой разливной алкогольной продукции следует создавать ""Акт списания ЕГАИС"" с указанием причины ""Реализация"".'");
			СтруктураПараметров.Вставить("ТекстПредупреждения", ТекстСообщения);
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Номенклатура %1 не является разливной алкогольной продукцией.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураПараметров.Номенклатура);
		ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Вскрытие тары возможно только для разливной алкогольной продукции.'");
		СтруктураПараметров.Вставить("ТекстПредупреждения", ТекстСообщения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		Если ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
			СтруктураПараметров.Вставить("НеобходимостьВводаАкцизнойМарки", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найден подарочный сертификат. Обработка сертификатов в данной форме не предусмотрена'");
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтруктураНомера.ДанныеПО);
	СтруктураНомера.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаАкцизнойМарки(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеВводаАкцизнойМаркиСервер(Результат, ДополнительныеПараметры);
	
	Если СтрокаТЧ <> Неопределено Тогда
		ПриИзмененииКоличестваУпаковок(СтрокаТЧ);
		Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКлиента")
		И СтрокаТЧ <> Неопределено Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(ДополнительныеПараметры.СтруктураПараметровКлиента);
	КонецЕсли;
	
	// Интерфейс ЕГАИС
	Если СтрокаТЧ <> Неопределено Тогда
		ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарокВСтроке(СтрокаТЧ, Объект.АкцизныеМарки);
		ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(СтрокаТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьДанныеВЕГАИСПодтверждениеПроведения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Если НЕ РезультатЗаписи Тогда
			Возврат;
		КонецЕсли;
		ОповещениеПередачаДанныхВЕГАИСНачало();
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОповещениеПередачаДанныхВЕГАИСЗавершение(ДанныеОтЕГАИС, ДополнительныеПараметры) Экспорт
	
	Если НЕ ДанныеОтЕГАИС = Неопределено Тогда
		Если НЕ ДанныеОтЕГАИС.Результат Тогда
			СтрокаСообщения = НСтр("ru = 'Ошибка передачи данных в ЕГАИС'") 
							  + Символы.ПС + ДанныеОтЕГАИС.ОписаниеОшибки;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			Модифицированность = Истина;
		Иначе
			ОповещениеПередачаДанныхВЕГАИСЗавершениеСервер(ДанныеОтЕГАИС, ДополнительныеПараметры);
		КонецЕсли;
		
		УстановитьВидимостьИДоступностьЕГАИС();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	УстановитьВидимостьДополнительныхКолонокНоменклатуры();
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект, КартинкаСостоянияДокумента, Элементы.КартинкаСостоянияДокумента.Подсказка, РазрешеноПроведение);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		УстановитьВидимостьИДоступностьЕГАИС();
	КонецЕсли;
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
	ИзменятьЦену = ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену;
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыЦена.ТолькоПросмотр, ИзменятьЦену);
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСумма.ТолькоПросмотр, ИзменятьЦену);
	
	// Интерфейс ЕГАИС
	УчетАлкогольнойПродукции = ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(Объект.Дата);
	ИнтеграцияЕГАИСРТ.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, УчетАлкогольнойПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен()
		И (НЕ ЗначениеЗаполнено(Объект.СтатусОбработки)
		ИЛИ Объект.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиВскрытияТарыЕГАИС.Новый")) Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
		// Интерфейс ЕГАИС
		ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(
		Объект,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение);
	УстановитьВидимостьИДоступностьЕГАИС();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(
		Объект,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение);
	
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, УчетАлкогольнойПродукции);
	ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьВидимостьИДоступностьЕГАИС();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) 
		И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПриИзмененииСклада();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		ПриИзмененииМагазина();
	КонецЕсли;
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Интерфейс ЕГАИС
	ДатаПриИзмененииНаСервере();
	
	ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, УчетАлкогольнойПродукции);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	// Интерфейс ЕГАИС
	УчетАлкогольнойПродукции = ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(Объект.Дата);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
		// Нужно удалить старые акцизные марки.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязи", ТекущаяСтрока.КлючСвязи);
		
		МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
			Объект.АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
		КонецЦикла;
	КонецЕсли;
	
	ДанныеПродукции = ИнтеграцияЕГАИСРТВызовСервера.ДанныеАлкогольнойПродукции(ТекущаяСтрока.Номенклатура);
	
	Если ДанныеПродукции.ЭтоАлкогольнаяПродукция
		И ДанныеПродукции.ПродаетсяВРозлив Тогда
		
		Если ДанныеПродукции.Маркируемый Тогда
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект));
			
			СтруктураПараметровСтавкиНДС = Новый Структура;
			СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
			СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
			СтруктураПараметровСтавкиНДС.Вставить("Склад"      , Объект.Склад);
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", СтруктураПараметровСтавкиНДС);
			
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
			
			ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, Неопределено);
			
			ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = Истина;
		Иначе
			ТекстСообщения = НСтр("ru = 'Номенклатура %1 не является маркируемой разливной алкогольной продукцией.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущаяСтрока.Номенклатура);
			ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Для немаркируемой разливной алкогольной продукции следует создавать ""Акт списания ЕГАИС"" с указанием причины ""Реализация"".'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ТекущаяСтрока.Номенклатура = Неопределено;
			ТекущаяСтрока.Характеристика = Неопределено;
			ТекущаяСтрока.Упаковка = Неопределено;
			ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = Ложь;
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Номенклатура %1 не является разливной алкогольной продукцией.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущаяСтрока.Номенклатура);
		ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Вскрытие тары возможно только для разливной алкогольной продукции.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ТекущаяСтрока.Номенклатура = Неопределено;
		ТекущаяСтрока.Характеристика = Неопределено;
		ТекущаяСтрока.Упаковка = Неопределено;
		ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = Ложь;
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	// Интерфейс ЕГАИС
	Если Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыСтатусУказанияАкцизныхМарок 
		И не Элементы.Товары.ТекущиеДанные = Неопределено
		и не Элементы.Товары.ТекущиеДанные.СтатусУказанияАкцизныхМарок = 0 Тогда
		ИдентификаторСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		ВвестиАкцизнуюМарку(ИдентификаторСтроки, Элементы.Товары.ТекущиеДанные, "КоличествоУпаковок");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РедактированиеТЧТовары = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	РедактированиеТЧТовары = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		ТекущаяСтрока.КлючСвязи = 0;
		ТекущаяСтрока.Справка2 = Неопределено;
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияСервер();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияСервер()
	
	УдалитьНесвязанныеАкцизы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	СтрокаТЧ = Элементы.Товары.ТекущиеДанные;
	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииКоличестваУпаковок(СтрокаТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, Неопределено);
	КонецЕсли;
	
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		Если ТекущаяСтрока <> Неопределено Тогда
			Если ЗначениеЗаполнено(Поле.Имя) Тогда
				Попытка
					ИмяПоля = СтрЗаменить(Поле.Имя, "Товары", "");
					Если ТекущаяСтрока.Свойство(ИмяПоля) Тогда
						ПоказатьЗначение(, ТекущаяСтрока[ИмяПоля]);
					КонецЕсли;
				Исключение
					СтрокаОшибки = ОписаниеОшибки();
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПередатьДанныеВЕГАИС(Команда)
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru='Данные изменены. Провести документ?'");
		ОбработчикОповещения = Новый ОписаниеОповещения("ПередатьДанныеВЕГАИСПодтверждениеПроведения", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОповещениеПередачаДанныхВЕГАИСНачало();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Магазин"" не заполнено'"),
			Объект,
			"Объект.Магазин",
			,
			Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'документ вскрытия тары'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	ПараметрыФормы.Вставить("РежимПодбораБезУслуг", Истина);
	ПараметрыФормы.Вставить("ИспользоватьОтборПоТипамНоменклатуры", Истина);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	РазвернутьСвернутьТЧНаСервере();
КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиАкцизнуюМарку(ИдентификаторСтроки, СтрокаТовара, ТекущееПоле = "КоличествоУпаковок", СтруктураПараметровКлиента = Неопределено)
	
	ПараметрыСканированияАкцизнойМарки = ИнтеграцияЕГАИСРТКлиентСервер.ПараметрыСканированияАкцизнойМарки();
	ПараметрыСканированияАкцизнойМарки.ТекущееПоле                     = ТекущееПоле;
	ПараметрыСканированияАкцизнойМарки.АдресВХранилище                 = АдресМарокВХранилище(СтрокаТовара.КлючСвязи);
	ПараметрыСканированияАкцизнойМарки.ОткрытьФормуМножественногоВвода = Истина;
	
	ИнтеграцияЕГАИСРТКлиент.ВвестиАкцизнуюМарку(ЭтотОбъект, СтрокаТовара, ПараметрыСканированияАкцизнойМарки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		ДанныеПродукции = ИнтеграцияЕГАИСРТ.ДанныеАлкогольнойПродукции(СтрокаТовара.Номенклатура);
		Если ДанныеПродукции.ЭтоАлкогольнаяПродукция
			И ДанныеПродукции.ПродаетсяВРозлив Тогда
			Если ДанныеПродукции.Маркируемый Тогда
				ТекущаяСтрока = Объект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура,
																	  |Характеристика,
																	  |Упаковка,
																	  |КоличествоУпаковок,
																	  |ХарактеристикиИспользуются
																	  |");
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
				СтруктураДействий.Вставить("ПересчитатьСумму");
				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект));
				
				СтруктураПараметровСтавкиНДС = Новый Структура;
				СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
				СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
				СтруктураПараметровСтавкиНДС.Вставить("Склад"      , Объект.Склад);
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", СтруктураПараметровСтавкиНДС);
				
				КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
				ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
				
				ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
			
				ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки = Истина;
			Иначе
				ТекстСообщения = НСтр("ru = 'Номенклатура %1 не является маркируемой разливной алкогольной продукцией.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТовара.Номенклатура);
				ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Для немаркируемой разливной алкогольной продукции следует создавать ""Акт списания ЕГАИС"" с указанием причины ""Реализация"".'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		Иначе
			ТекстСообщения = НСтр("ru = 'Номенклатура %1 не является разливной алкогольной продукцией.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТовара.Номенклатура);
			ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Вскрытие тары возможно только для разливной алкогольной продукции.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	ЭтотОбъект.ПоложениеКоманднойПанели = ?(ВидимостьЭлементов,
		ПоложениеКоманднойПанелиФормы.Авто,
		ПоложениеКоманднойПанелиФормы.Нет);
		
	Элементы.Шапка.Видимость               = ВидимостьЭлементов;
	Элементы.СтраницаКомментарий.Видимость = ВидимостьЭлементов;
	Элементы.ГруппаОтветственный.Видимость = ВидимостьЭлементов;
	
	Элементы.РазвернутьСвернутьТЧ.Картинка = ?(ВидимостьЭлементов,
		БиблиотекаКартинок.РазвернутьТабличнуюЧасть,
		БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСклада()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		                                              
		Объект.Организация = Объект.Склад.Организация;
		
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЕГАИС();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииМагазина()
	
	Объект.ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "ПравилоЦенообразования.ЦенаВключаетНДС");
	
	Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(
		Объект.Магазин,
		,
		Объект.Склад,
		Пользователи.ТекущийПользователь());
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПриИзмененииСклада();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваУпаковок(СтрокаТЧ)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТЧ, СтруктураДействий, Неопределено);
	
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(СтрокаТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Склад",
		"ТолькоПросмотр",
		НЕ ЗначениеЗаполнено(Объект.Магазин));
	
	УстановитьВидимостьИДоступностьЕГАИС();
	
КонецПроцедуры

&НаСервере
Функция АдресМарокВХранилище(КлючСвязи)
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", КлючСвязи);
	СтрокиМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураОтбора);
	АдресМарок = ПоместитьВоВременноеХранилище(СтрокиМарок, УникальныйИдентификатор);
	Возврат АдресМарок;
КонецФункции

&НаСервере
Функция ЗаполнитьМаркиНаСервере(АдресВХранилище, ДополнительныеПараметры)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", ДополнительныеПараметры.ТекущийКлючСвязи);
	
	МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
		Объект.АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
	КонецЦикла;
	
	КоличествоМарок = 0;
	
	ТаблицаМарок = ПолучитьИзВременногоХранилища(АдресВХранилище);
	Для Каждого СтрокаМарки Из ТаблицаМарок Цикл
		СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
		СтрокаАкцизнаяМарка.КлючСвязи = ДополнительныеПараметры.ТекущийКлючСвязи;
		СтрокаАкцизнаяМарка.КодАкцизнойМарки = СтрокаМарки.КодАкцизнойМарки;
		
		КоличествоМарок = КоличествоМарок + 1;
	КонецЦикла;
	
	Возврат КоличествоМарок;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Характеристики
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыХарактеристика");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Упаковки
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыНоменклатураЕдиницаИзмерения");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Состояние проведенного документа
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СостояниеДокумента");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Объект.Проведен);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветПроведенногоДокумента);
	
	// Состояние непроведенного документа
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СостояниеДокумента");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Объект.Проведен);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНепроведенногоДокумента);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДополнительныхКолонокНоменклатуры()
	
	ВидимостьАртикула = Ложь;
	ВидимостьКода = Ложь;
	Если ДополнительныеКолонкиНоменклатуры = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВидимостьАртикула = Истина;
	ИначеЕсли ДополнительныеКолонкиНоменклатуры = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВидимостьКода = Истина;
	ИначеЕсли ДополнительныеКолонкиНоменклатуры = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.КодАртикул Тогда
		ВидимостьАртикула = Истина;
		ВидимостьКода = Истина;
	КонецЕсли;
	Элементы.ТоварыНоменклатураАртикул.Видимость = ВидимостьАртикула;
	Элементы.ТоварыНоменклатураКод.Видимость = ВидимостьКода;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

&НаСервере
Процедура УдалитьНесвязанныеАкцизы()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеАкцизы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступностьЕГАИС()
	
	ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(Объект.Организация, Объект.Магазин, Объект.Дата);
	
	ДоступностьКоманды = Объект.Проведен;
	ТолькоПросмотрФормы = Ложь;
	Если Объект.СтатусОбработки = Перечисления.СтатусыОбработкиВскрытияТарыЕГАИС.ПереданВЕГАИС Тогда
		ДоступностьКоманды = Ложь;
		ТолькоПросмотрФормы = Истина;
	КонецЕсли;
	Элементы.ФормаПередатьДанныеВЕГАИС.Видимость = ИспользуетсяРегистрацияРозничныхПродажВЕГАИС;
	Элементы.ФормаПередатьДанныеВЕГАИС.Доступность = ДоступностьКоманды;
	ЭтотОбъект.ТолькоПросмотр = ТолькоПросмотрФормы;
	
	ПустойСтатус = НЕ ЗначениеЗаполнено(Объект.СтатусОбработки);
	
	Если ПустойСтатус Тогда
		Элементы.ГруппаСтраницыСтатусы.ТекущаяСтраница = Элементы.ГруппаСтраницаПустойСтатус;
	Иначе
		Элементы.ГруппаСтраницыСтатусы.ТекущаяСтраница = Элементы.ГруппаСтраницаСтатус;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОповещениеВводаАкцизнойМаркиСервер(Результат, ДополнительныеПараметры)
	
	СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	Если Не Результат = Неопределено Тогда
		
		Если ТипЗнч(Результат) = Тип("Строка") Тогда
		
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("КлючСвязи", ДополнительныеПараметры.ТекущийКлючСвязи);
			
			МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
				Объект.АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
			КонецЦикла;
			
			СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
			СтрокаАкцизнаяМарка.КлючСвязи = ДополнительныеПараметры.ТекущийКлючСвязи;
			СтрокаАкцизнаяМарка.КодАкцизнойМарки = Результат;
			
			Модифицированность = Истина;
			
		ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("АдресВХранилище") Тогда
				КоличествоМарок = ЗаполнитьМаркиНаСервере(Результат.АдресВХранилище, ДополнительныеПараметры);
				Если КоличествоМарок = 0 Тогда
					
					Объект.Товары.Удалить(СтрокаТЧ);
					СтрокаТЧ = Неопределено;
					Модифицированность = Истина;
					
				Иначе
					
					СтрокаТЧ.КоличествоУпаковок = КоличествоМарок;
					Модифицированность = Истина;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПередачаДанныхВЕГАИСНачало()
	
	// Подготовить данные
	
	ПараметрыПередачиВЕГАИС = ПараметрыПередачиВЕГАИС(Объект.Ссылка);
	
	Если НЕ ПараметрыПередачиВЕГАИС.Свойство("ЕстьОшибки") Тогда
		
		ТранспортныйМодуль = ПараметрыПередачиВЕГАИС.ТранспортныйМодуль;
		Если НЕ ЗначениеЗаполнено(ТранспортныйМодуль) Тогда
			СтрокаСообщения = НСтр("ru = 'Не определен транспортный модуль передачи данных в ЕГАИС'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			Возврат;
		КонецЕсли;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеПередачаДанныхВЕГАИСЗавершение", ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыПередачиВЕГАИС(ДокументСсылка)
	
	Результат = Новый Структура;
	ДанныеЕГАИСДостаточны = Истина;
	
	СтруктураТаблиц = ПродажиСервер.ПодготовкаДанныхДляВскрытияТары(Объект, ДанныеЕГАИСДостаточны);
	ТаблицаТоваровЕГАИС = СтруктураТаблиц.ТаблицаТоваровЕГАИС;
	
	Если НЕ ДанныеЕГАИСДостаточны Тогда
		Результат.Вставить("ЕстьОшибки", Истина);
		Возврат Результат;
	КонецЕсли;
	
	ВходныеПараметры  = Новый Массив;
	МассивТоваровЕГАИС = Новый Массив;
	
	ДополнитьМассивИзТаблицы(МассивТоваровЕГАИС, ТаблицаТоваровЕГАИС);
	
	СведенияООрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(Объект.Организация, Объект.Дата);
	АдресМагазина = ОбщегоНазначенияРТ.АдресМагазина(Объект.Магазин);
	
	// Подготовка таблицы общих параметров.
	ОбщиеПараметры = Новый Массив;
	ОбщиеПараметры.Добавить(0);                                       // 1 - Тип чека (0-продажа, 1-возврат)
	ОбщиеПараметры.Добавить(Истина);                                  // 2 - Признак фискального чека
	ОбщиеПараметры.Добавить(Неопределено);                            // 3 - Печать копии чека
	ОбщиеПараметры.Добавить(0);                                       // 4 - Сумма по чеку без скидок/наценок
	ОбщиеПараметры.Добавить(0);                                       // 5 - Сумма по чеку с учетом всех скидок/наценок
	ОбщиеПараметры.Добавить("");                                      // 6 - Номер дисконтной карты
	ОбщиеПараметры.Добавить("");                                      // 7 - Текст шапки (Для чека ЕНВД)
	ОбщиеПараметры.Добавить("");                                      // 8 - Текст подвала (Для чека ЕНВД)
	
	НомерСменыЧисло = Число("1" + Формат(Объект.Дата, "ДФ=yyyyMMdd"));
	ОбщиеПараметры.Добавить(НомерСменыЧисло);                         // 9 - Номер смены
	
	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Объект.Номер, Истина, Истина);
	НомерНаПечатьЧисло = Число(НомерНаПечать);
	ОбщиеПараметры.Добавить(НомерНаПечатьЧисло);                      // 10 - Номер чека (Для чека ЕНВД)
	
	ОбщиеПараметры.Добавить(1);                                       // 11 - Номер кассы (Для чека ЕНВД)
	ОбщиеПараметры.Добавить(Объект.Дата);                             // 12 - Дата и время документа 
	ОбщиеПараметры.Добавить(Неопределено);                            // 13 - Кассир (Для чека ЕНВД)
	ОбщиеПараметры.Добавить(СведенияООрганизации.ПолноеНаименование); // 14 - Название организации (Для чека ЕНВД)
	ОбщиеПараметры.Добавить(СведенияООрганизации.ИНН);                // 15 - ИНН организации (Для чека ЕНВД)
	ОбщиеПараметры.Добавить("");                                      // 16 - Наименование секции форматирования шапки
	ОбщиеПараметры.Добавить("");                                      // 17 - Наименование секции форматирования подвала
	ОбщиеПараметры.Добавить("");                                      // 18 - КПП организации (Для чека ЕНВД)
	ОбщиеПараметры.Добавить(Строка(Объект.Магазин));                  // 19 - Наименование магазина
	ОбщиеПараметры.Добавить(АдресМагазина);                           // 20 - Адрес магазина
	Если ЗначениеЗаполнено(СведенияООрганизации.КПП) Тогда
		ОбщиеПараметры.Добавить(СведенияООрганизации.КПП);            // 21 - Заводской номер ККМ
	Иначе
		ОбщиеПараметры.Добавить("1");                                 // 21 - Заводской номер ККМ
	КонецЕсли;
	
	МассивШаблона = Новый Массив;
	
	ОбщиеПараметры.Добавить(МассивШаблона);                           // 22 - Массив параметров шаблона чека.
	
	ВходныеПараметры.Добавить(МассивТоваровЕГАИС);
	ВходныеПараметры.Добавить(Неопределено);
	ВходныеПараметры.Добавить(ОбщиеПараметры);
	
	Результат.Вставить("ТранспортныйМодуль", Неопределено);
	Результат.Вставить("ВходныеПараметры", ВходныеПараметры);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОповещениеПередачаДанныхВЕГАИСЗавершениеСервер(ДанныеОтЕГАИС, ДополнительныеПараметры)
	
	Объект.СтатусОбработки = Перечисления.СтатусыОбработкиВскрытияТарыЕГАИС.ПереданВЕГАИС;
	Если ЗначениеЗаполнено(ДанныеОтЕГАИС.ПодписьЧека) Тогда
		Объект.АдресЧекаЕГАИС = ДанныеОтЕГАИС.АдресЧека;
		Объект.ПодписьЧекаЕГАИС = ДанныеОтЕГАИС.ПодписьЧека;
	КонецЕсли;
	
	РезультатЗаписи = Ложь;
	Попытка
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	Исключение
		СтрокаОшибки = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru = 'Не удалось записать документ по причине:'") + Символы.ПС + СтрокаОшибки.Описание;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	Если НЕ РезультатЗаписи Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьМассивИзТаблицы(МассивТоваров, ТаблицаТоваровЧека)
	
	Для Каждого СтрокаТЧ Из ТаблицаТоваровЧека Цикл
		
		СтрокаТаблицыТоваров = Новый СписокЗначений();
		НаименованиеТовара = Строка(СтрокаТЧ.Номенклатура) + ?(ЗначениеЗаполнено(СтрокаТЧ.Характеристика), " (" + Строка(СтрокаТЧ.Характеристика) + ")", "");
		НомерСекции = 1;
		
		ДанныеАлкогольнойПродукции = Новый Структура;
		ДанныеАлкогольнойПродукции.Вставить("АлкогольнаяПродукция", СтрокаТЧ.АлкогольнаяПродукция);
		ДанныеАлкогольнойПродукции.Вставить("Маркируемый", СтрокаТЧ.Маркируемый);
		ДанныеАлкогольнойПродукции.Вставить("КодАкцизнойМарки", Новый Массив);
		Если СтрокаТЧ.КоэффициентУпаковки = 0 Тогда
			ОбъемДАЛ = СтрокаТЧ.ОбъемДАЛ;
		Иначе
			ОбъемДАЛ = СтрокаТЧ.ОбъемДАЛ * СтрокаТЧ.КоэффициентУпаковки;
		КонецЕсли;
		ДанныеАлкогольнойПродукции.Вставить("ОбъемДАЛ", ОбъемДАЛ);
		ДанныеАлкогольнойПродукции.Вставить("Крепость", СтрокаТЧ.Крепость);
		ДанныеАлкогольнойПродукции.Вставить("КодВидаПродукции", СтрокаТЧ.КодВидаПродукции);
		
		МассивМарок = Объект.АкцизныеМарки.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТЧ.КлючСвязи));
		Для Каждого СтрокаМарки Из МассивМарок Цикл
			Если НЕ ПустаяСтрока(СтрокаМарки.КодАкцизнойМарки) Тогда
				ДанныеАлкогольнойПродукции.КодАкцизнойМарки.Добавить(СтрокаМарки.КодАкцизнойМарки);
			КонецЕсли;
		КонецЦикла;
		
		Штрихкод = СтрокаТЧ.Штрихкод;
		
		ПараметрыАлкогольнойПродукции = ИнтеграцияЕГАИСРТ.ПараметрыАлкогольнойПродукции(ДанныеАлкогольнойПродукции);
		
		СтавкаНДС = ОбработкаТабличнойЧастиТоварыКлиентСерверПовтИсп.ПолучитьСтавкуНДСЧислом(СтрокаТЧ.СтавкаНДС);
		
		СтрокаТаблицыТоваров.Добавить(НаименованиеТовара);            //  1 - Наименование
		СтрокаТаблицыТоваров.Добавить(Штрихкод);             //  2 - Штрихкод
		СтрокаТаблицыТоваров.Добавить("");                            //  3 - Артикул
		СтрокаТаблицыТоваров.Добавить(НомерСекции);                   //  4 - Номер секции
		СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.Цена);                 //  5 - Цена за позицию без скидки.
		СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.Количество);   //  6 - Количество
		СтрокаТаблицыТоваров.Добавить("");                            //  7 - Наименование скидки/наценки.
		СтрокаТаблицыТоваров.Добавить(0);                   //  8 - Сумма скидки/наценки
		СтрокаТаблицыТоваров.Добавить(0);                 //  9 - Процент скидки/наценки.
		СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.Сумма); // 10 - Сумма позиции со скидкой.
		СтрокаТаблицыТоваров.Добавить(0);                             // 11 - Номер налога (1)
		СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.СуммаНДС);             // 12 - Сумма налога (1)
		СтрокаТаблицыТоваров.Добавить(СтавкаНДС * 100);               // 13 - Процент налога (1)
		СтрокаТаблицыТоваров.Добавить(0);                             // 14 - Номер налога (2)
		СтрокаТаблицыТоваров.Добавить(0);                             // 15 - Сумма налога (2)
		СтрокаТаблицыТоваров.Добавить(0);                             // 16 - Процент налога (2)
		СтрокаТаблицыТоваров.Добавить("");                            // 17 - Наименование секции форматирования товарной строки.
		СтрокаТаблицыТоваров.Добавить(ПараметрыАлкогольнойПродукции); // 18 - Параметры алкогольной продукции
		
		МассивТоваров.Добавить(СтрокаТаблицыТоваров);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
