#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,Элементы.КартинкаСостоянияДокумента.Подсказка,РазрешеноПроведение);
	
	УстановитьПривилегированныйРежим(Истина);
	РассчитыватьПремииВМагазинах = Константы.РассчитыватьПремииВМагазинах.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Если НЕ РассчитыватьПремииВМагазинах Тогда
		Элементы.РассчитатьПремии.Доступность = ПланыОбмена.ГлавныйУзел() = Неопределено;
	КонецЕсли;
	
	СтандартныйПериод.ДатаНачала = Объект.ПериодРасчетаДатаНачала;
	СтандартныйПериод.ДатаОкончания = Объект.ПериодРасчетаДатаОкончания;
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(
		Объект,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.Ответственный.Пустая() Тогда
		ТекущийОбъект.Ответственный = Пользователи.ТекущийПользователь()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);

	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
	                                            "Документ.РасчетПремийПоЛичнымПродажам.ФормаДокумента.Запись",
                                                          Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МагазинНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("МагазинНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияРТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		ЭтаФорма,
		Неопределено,
		Новый Структура("Магазин", Объект.Магазин), 
		Истина,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинНачалоВыбораЗавершение(ЗаполнятьТабличнуюЧасть, ДополнительныеПараметры) Экспорт
	
	Если ЗаполнятьТабличнуюЧасть И Объект.Сотрудники.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеВопросаОчисткиТЧ", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Табличная часть будет очищена, продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьФорму("Справочник.Магазины.ФормаВыбора",, Элементы.Магазин);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросаОчисткиТЧ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Сотрудники.Очистить();
		ОткрытьФорму("Справочник.Магазины.ФормаВыбора",, Элементы.Магазин);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура РассчитатьПремииНаСервере()
	
	СтруктураПериод = Новый Структура("НачалоПериода, КонецПериода", Объект.ПериодРасчетаДатаНачала, Объект.ПериодРасчетаДатаОкончания);
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц =  МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("КонецПериода",				СтруктураПериод.КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода",				СтруктураПериод.НачалоПериода);
	Запрос.УстановитьПараметр("Магазин",					Объект.Магазин);
	Запрос.УстановитьПараметр("ДатаДокументаНачисления",	Объект.Дата);
	
	Запрос.Текст = ТекстЗапросаРасчетПремий();
	ТаблицаДвижений  = Запрос.Выполнить().Выгрузить();
	
	ЗапросПремии = Новый Запрос;
	ЗапросПремии.МенеджерВременныхТаблиц =  МенеджерВременныхТаблиц;
	ЗапросПремии.Текст = ("ВЫБРАТЬ * ИЗ Премии");
	РассчитанныеПремии = ЗапросПремии.Выполнить().Выгрузить();
	
	МассивПравилРасчетаПремий = РассчитанныеПремии.ВыгрузитьКолонку("ПравилоРасчетаПремий");
	
	ДеревоПравилРасчетаПремий = ПолучитьДеревоПравилРасчетаПремий(МассивПравилРасчетаПремий);
	ОбходВариантовСовместногоРасчетаПремий(ДеревоПравилРасчетаПремий, РассчитанныеПремии);
	
	ИтоговаяТаблицаПремий = ОбъединитьТаблицыДанныхСтрокДерева(ДеревоПравилРасчетаПремий);
		
	ЗапросДвижения = Новый Запрос;
	ЗапросДвижения.УстановитьПараметр("ТаблицаДвижений", ТаблицаДвижений);
	ЗапросДвижения.УстановитьПараметр("ТаблицаПремий", ИтоговаяТаблицаПремий);
	ЗапросДвижения.Текст = 
	"ВЫБРАТЬ *
	|ПОМЕСТИТЬ ТаблицаДвижений
	|ИЗ
	|	&ТаблицаДвижений КАК ТаблицаДвижений
	|;
	|ВЫБРАТЬ *
	|ПОМЕСТИТЬ ТаблицаПремий
	|ИЗ
	|	&ТаблицаПремий КАК ТаблицаПремий
	|;
	|ВЫБРАТЬ 
	|	ТаблицаДвижений.ФизЛицо КАК ФизЛицо,
	|	ТаблицаДвижений.Магазин КАК Магазин,
	|	ТаблицаДвижений.ПравилоРасчетаПремий КАК ПравилоРасчетаПремий,
	|	ТаблицаДвижений.Количество КАК Количество,
	|	ТаблицаДвижений.Сумма КАК СуммаПродаж,
	|	ТаблицаДвижений.СуммаПремии КАК СуммаПремии
	|ИЗ
	|	ТаблицаПремий КАК ТаблицаПремий
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДвижений КАК ТаблицаДвижений
	|		ПО ТаблицаПремий.ФизЛицо = ТаблицаДвижений.ФизЛицо
	|			И ТаблицаПремий.ПравилоРасчетаПремий = ТаблицаДвижений.ПравилоРасчетаПремий
	|";
	
	Движения = ЗапросДвижения.Выполнить().Выгрузить();
	
	Объект.ТаблицаПремий.Загрузить(Движения);
	ИтоговаяТаблицаПремий.Свернуть("ФизЛицо", "СуммаПремии");
	Объект.Сотрудники.Загрузить(ИтоговаяТаблицаПремий);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПремии(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПроверкиВозможностиЗаполнения", ЭтотОбъект);
		ОбщегоНазначенияРТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
			ЭтаФорма,
			Объект.Сотрудники,
			Новый Структура, 
			Истина,
			ОписаниеОповещения);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	
	РазвернутьСвернутьТЧНаСервере();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеПроверкиВозможностиЗаполнения(ЗаполнятьТабличнуюЧасть, ДополнительныеПараметры) Экспорт
	
	Если ЗаполнятьТабличнуюЧасть Тогда
		РассчитатьПремииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПустуюТаблицуПремий()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ФизЛицо", 				Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("СуммаПремии",       		ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповЧисла(12, 2));
	Таблица.Колонки.Добавить("ПравилоРасчетаПремий",	Новый ОписаниеТипов("СправочникСсылка.ПравилаРасчетаПремий"));
	
	Возврат Таблица;
	
КонецФункции

Функция ОбъединитьТаблицыДанныхСтрокДерева(ДеревоПравилРасчетаПремий)
	
	Таблица = ПолучитьПустуюТаблицуПремий();
	
	Для Каждого СтрокаДерева Из ДеревоПравилРасчетаПремий.Строки Цикл
		
		Для Каждого СтрокаТаблицы Из СтрокаДерева.ТаблицаПремий Цикл
				НоваяСтрока = Таблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Функция ТекстЗапросаРасчетПремий()
	
	ТекстЗапросаТаблицаПремий =
	"ВЫБРАТЬ
	|	Продажи.Период КАК Период,
	|	Продажи.Регистратор КАК Регистратор,
	|	Продажи.Магазин КАК Магазин,
	|	Продажи.Продавец КАК Продавец,
	|	Продажи.Номенклатура КАК Номенклатура,
	|	Продажи.Характеристика КАК Характеристика,
	|	Продажи.Количество КАК Количество,
	|	Продажи.Стоимость КАК Сумма
	|ПОМЕСТИТЬ ТаблицаРегистрПродаж
	|ИЗ
	|	РегистрНакопления.Продажи КАК Продажи
	|ГДЕ
	|	Продажи.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Продажи.Продавец <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	И Продажи.Продавец.Магазин = &Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Магазины.Ссылка КАК Магазин
	|ПОМЕСТИТЬ ТаблицаМагазинов
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРегистрПродаж КАК ТаблицаРегистрПродаж
	|		ПО Магазины.Ссылка = ТаблицаРегистрПродаж.Магазин
	|ГДЕ
	|	Магазины.СкладУправляющейСистемы = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДействующиеПравилаРасчетаПремийСрезПоследних.ПравилоРасчетаПремий КАК ПравилоРасчетаПремий,
	|	ДействующиеПравилаРасчетаПремийСрезПоследних.Магазин КАК Магазин,
	|	ДействующиеПравилаРасчетаПремийСрезПоследних.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТ_ТаблицаПравил
	|ИЗ
	|	ТаблицаМагазинов КАК ТаблицаМагазинов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДействующиеПравилаРасчетаПремий.СрезПоследних(&ДатаДокументаНачисления, ) КАК ДействующиеПравилаРасчетаПремийСрезПоследних
	|		ПО (ТаблицаМагазинов.Магазин = ДействующиеПравилаРасчетаПремийСрезПоследних.Магазин
	|				ИЛИ ДействующиеПравилаРасчетаПремийСрезПоследних.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	|ГДЕ
	|	(ДействующиеПравилаРасчетаПремийСрезПоследних.ДатаОкончания >= &ДатаДокументаНачисления
	|			ИЛИ ДействующиеПравилаРасчетаПремийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ТаблицаПравил.ПравилоРасчетаПремий КАК ПравилоРасчетаПремий,
	|	ВТ_ТаблицаПравил.Магазин КАК Магазин,
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления.УсловиеНачисленияПремий КАК УсловиеНачисленияПремий,
	|	МИНИМУМ(ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления.ЗначениеУсловияНачисления) КАК МинимальноеУсловиеВПравиле
	|ПОМЕСТИТЬ ТаблицаПравил
	|ИЗ
	|	Справочник.ПравилаРасчетаПремий.УсловияНачисленияПремий КАК ПравилаРасчетаПремийУсловияНачисленияПремий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаПравил КАК ВТ_ТаблицаПравил
	|		ПО (ВТ_ТаблицаПравил.ПравилоРасчетаПремий = ПравилаРасчетаПремийУсловияНачисленияПремий.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаПравил.ПравилоРасчетаПремий,
	|	ВТ_ТаблицаПравил.Магазин,
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления.УсловиеНачисленияПремий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаРегистрПродаж.Продавец КАК Продавец,
	|	СУММА(ЕСТЬNULL(ТаблицаРегистрПродаж.Количество, 0)) КАК Количество,
	|	СУММА(ЕСТЬNULL(ТаблицаРегистрПродаж.Сумма, 0)) КАК Сумма,
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления КАК УсловиеНачисления,
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления.ЗначениеУсловияНачисления КАК УсловиеНачисленияЗначениеУсловияНачисления,
	|	ТаблицаПравил.ПравилоРасчетаПремий.ЗначениеРасчетаПремий КАК ЗначениеРасчетаПремий,
	|	ТаблицаПравил.ПравилоРасчетаПремий.СпособРасчетаПремий КАК СпособРасчетаПремий,
	|	ТаблицаПравил.ПравилоРасчетаПремий КАК ПравилоРасчетаПремий
	|ПОМЕСТИТЬ ТаблицаПродаж
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПравил КАК ТаблицаПравил
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРасчетаПремий.УсловияНачисленияПремий КАК ПравилаРасчетаПремийУсловияНачисленияПремий
	|			ПО ТаблицаПравил.ПравилоРасчетаПремий = ПравилаРасчетаПремийУсловияНачисленияПремий.Ссылка
	|				И ТаблицаПравил.МинимальноеУсловиеВПравиле = ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления.ЗначениеУсловияНачисления
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРегистрПродаж КАК ТаблицаРегистрПродаж
	|			ПО (ТаблицаПравил.Магазин = ТаблицаРегистрПродаж.Магазин
	|					ИЛИ ТаблицаПравил.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	|		ПО (ТаблицаПравил.ПравилоРасчетаПремий.СегментНоменклатурыРасчетаПремий = НоменклатураСегмента.Сегмент)
	|ГДЕ
	|	ТаблицаРегистрПродаж.Номенклатура В (НоменклатураСегмента.Номенклатура)
	|	И ТаблицаРегистрПродаж.Характеристика В (НоменклатураСегмента.Характеристика)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРегистрПродаж.Продавец,
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления,
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления.ЗначениеУсловияНачисления,
	|	ТаблицаПравил.ПравилоРасчетаПремий.ЗначениеРасчетаПремий,
	|	ТаблицаПравил.ПравилоРасчетаПремий.СпособРасчетаПремий,
	|	ТаблицаПравил.ПравилоРасчетаПремий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаРегистрПродаж.Продавец,
	|	СУММА(ЕСТЬNULL(ТаблицаРегистрПродаж.Количество, 0)),
	|	СУММА(ЕСТЬNULL(ТаблицаРегистрПродаж.Сумма, 0)),
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления,
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления.ЗначениеУсловияНачисления,
	|	ТаблицаПравил.ПравилоРасчетаПремий.ЗначениеРасчетаПремий,
	|	ТаблицаПравил.ПравилоРасчетаПремий.СпособРасчетаПремий,
	|	ТаблицаПравил.ПравилоРасчетаПремий
	|ИЗ
	|	ТаблицаПравил КАК ТаблицаПравил
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРасчетаПремий.УсловияНачисленияПремий КАК ПравилаРасчетаПремийУсловияНачисленияПремий
	|		ПО ТаблицаПравил.ПравилоРасчетаПремий = ПравилаРасчетаПремийУсловияНачисленияПремий.Ссылка
	|			И ТаблицаПравил.МинимальноеУсловиеВПравиле = ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления.ЗначениеУсловияНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРегистрПродаж КАК ТаблицаРегистрПродаж
	|		ПО (ТаблицаПравил.Магазин = ТаблицаРегистрПродаж.Магазин
	|				ИЛИ ТаблицаПравил.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	|ГДЕ
	|	ТаблицаПравил.ПравилоРасчетаПремий.СегментНоменклатурыРасчетаПремий = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРегистрПродаж.Продавец,
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления,
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления.ЗначениеУсловияНачисления,
	|	ТаблицаПравил.ПравилоРасчетаПремий.ЗначениеРасчетаПремий,
	|	ТаблицаПравил.ПравилоРасчетаПремий.СпособРасчетаПремий,
	|	ТаблицаПравил.ПравилоРасчетаПремий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродаж.Продавец КАК Продавец,
	|	ВЫБОР ТаблицаПродаж.ПравилоРасчетаПремий.ПорядокОкругления
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругления.Окр0_01)
	|			ТОГДА 0.01
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругления.Окр0_05)
	|			ТОГДА 0.05
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругления.Окр0_1)
	|			ТОГДА 0.1
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругления.Окр0_5)
	|			ТОГДА 0.5
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругления.Окр1)
	|			ТОГДА 1
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругления.Окр5)
	|			ТОГДА 5
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругления.Окр10)
	|			ТОГДА 10
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругления.Окр50)
	|			ТОГДА 50
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядкиОкругления.Окр100)
	|			ТОГДА 100
	|		ИНАЧЕ 0.01
	|	КОНЕЦ КАК ПорядокОкругления,
	|	ВЫБОР
	|		КОГДА ТаблицаПродаж.УсловиеНачисления.УсловиеНачисленияПремий = ЗНАЧЕНИЕ(Перечисление.УсловияНачисленияПремийПоЛичнымПродажам.ЗаОбъемПродажСумма)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаПродаж.Сумма >= ТаблицаПродаж.УсловиеНачисленияЗначениеУсловияНачисления
	|						ТОГДА ТаблицаПродаж.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаПродаж.УсловиеНачисления.УсловиеНачисленияПремий = ЗНАЧЕНИЕ(Перечисление.УсловияНачисленияПремийПоЛичнымПродажам.ЗаОбъемПродажКоличество)
	|					ТОГДА ВЫБОР
	|							КОГДА ТаблицаПродаж.Количество >= ТаблицаПродаж.УсловиеНачисленияЗначениеУсловияНачисления
	|								ТОГДА ТаблицаПродаж.Количество
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ТаблицаПродаж.УсловиеНачисления.УсловиеНачисленияПремий ЕСТЬ NULL
	|							ТОГДА ТаблицаПродаж.Сумма
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК БазаДляНачисления,
	|	ТаблицаПродаж.Сумма КАК ВсегоОбъем,
	|	ТаблицаПродаж.ЗначениеРасчетаПремий КАК ЗначениеРасчетаПремий,
	|	ТаблицаПродаж.СпособРасчетаПремий КАК СпособРасчетаПремий,
	|	ТаблицаПродаж.ПравилоРасчетаПремий КАК ПравилоРасчетаПремий
	|ПОМЕСТИТЬ ТаблицаОбъемовПродаж
	|ИЗ
	|	ТаблицаПродаж КАК ТаблицаПродаж
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбъемовПродаж.Продавец КАК Продавец,
	|	ТаблицаОбъемовПродаж.ПравилоРасчетаПремий КАК ПравилоРасчетаПремий,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(ТаблицаОбъемовПродаж.БазаДляНачисления) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УсловиеВыполнено
	|ПОМЕСТИТЬ ТаблицаВыполненныхУсловий
	|ИЗ
	|	ТаблицаОбъемовПродаж КАК ТаблицаОбъемовПродаж
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбъемовПродаж.Продавец,
	|	ТаблицаОбъемовПродаж.ПравилоРасчетаПремий
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ТаблицаОбъемовПродаж.БазаДляНачисления) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаРегистрПродаж.Продавец КАК Продавец,
	|	ТаблицаРегистрПродаж.Магазин КАК Магазин,
	|	СУММА(ЕСТЬNULL(ТаблицаРегистрПродаж.Количество, 0)) КАК Количество,
	|	СУММА(ЕСТЬNULL(ТаблицаРегистрПродаж.Сумма, 0)) КАК Сумма,
	|	ТаблицаПравил.ПравилоРасчетаПремий КАК ПравилоРасчетаПремий
	|ПОМЕСТИТЬ ТаблицаДвиженийПоРегистру
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПравил КАК ТаблицаПравил
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаРасчетаПремий.УсловияНачисленияПремий КАК ПравилаРасчетаПремийУсловияНачисленияПремий
	|			ПО ТаблицаПравил.ПравилоРасчетаПремий = ПравилаРасчетаПремийУсловияНачисленияПремий.Ссылка
	|				И ТаблицаПравил.МинимальноеУсловиеВПравиле = ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления.ЗначениеУсловияНачисления
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРегистрПродаж КАК ТаблицаРегистрПродаж
	|			ПО (ТаблицаПравил.Магазин = ТаблицаРегистрПродаж.Магазин
	|					ИЛИ ТаблицаПравил.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	|		ПО (ТаблицаПравил.ПравилоРасчетаПремий.СегментНоменклатурыРасчетаПремий = НоменклатураСегмента.Сегмент)
	|ГДЕ
	|	ТаблицаРегистрПродаж.Номенклатура В (НоменклатураСегмента.Номенклатура)
	|	И ТаблицаРегистрПродаж.Характеристика В (НоменклатураСегмента.Характеристика)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРегистрПродаж.Продавец,
	|	ТаблицаПравил.ПравилоРасчетаПремий,
	|	ТаблицаРегистрПродаж.Магазин,
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРегистрПродаж.Продавец,
	|	ТаблицаРегистрПродаж.Магазин,
	|	СУММА(ЕСТЬNULL(ТаблицаРегистрПродаж.Количество, 0)),
	|	СУММА(ЕСТЬNULL(ТаблицаРегистрПродаж.Сумма, 0)),
	|	ТаблицаПравил.ПравилоРасчетаПремий
	|ИЗ
	|	ТаблицаПравил КАК ТаблицаПравил
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаРасчетаПремий.УсловияНачисленияПремий КАК ПравилаРасчетаПремийУсловияНачисленияПремий
	|		ПО ТаблицаПравил.ПравилоРасчетаПремий = ПравилаРасчетаПремийУсловияНачисленияПремий.Ссылка
	|			И ТаблицаПравил.МинимальноеУсловиеВПравиле = ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления.ЗначениеУсловияНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРегистрПродаж КАК ТаблицаРегистрПродаж
	|		ПО (ТаблицаПравил.Магазин = ТаблицаРегистрПродаж.Магазин
	|				ИЛИ ТаблицаПравил.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	|ГДЕ
	|	ТаблицаПравил.ПравилоРасчетаПремий.СегментНоменклатурыРасчетаПремий = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРегистрПродаж.Продавец,
	|	ТаблицаПравил.ПравилоРасчетаПремий,
	|	ТаблицаРегистрПродаж.Магазин,
	|	ПравилаРасчетаПремийУсловияНачисленияПремий.УсловиеНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРезультатовНачислений.Продавец КАК ФизЛицо,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ТаблицаРезультатовНачислений.СпособРасчетаПремий = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаПремий.Сумма)
	|				ТОГДА ТаблицаРезультатовНачислений.ЗначениеРасчетаПремий
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ТаблицаРезультатовНачислений.СпособРасчетаПремий = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаПремий.Процент)
	|						ТОГДА ВЫРАЗИТЬ((ТаблицаРезультатовНачислений.ВсегоОбъем * ТаблицаРезультатовНачислений.ЗначениеРасчетаПремий / 100) / ТаблицаРезультатовНачислений.ПорядокОкругления КАК ЧИСЛО(15, 0)) * ТаблицаРезультатовНачислений.ПорядокОкругления
	|				КОНЕЦ
	|		КОНЕЦ, 0) КАК СуммаПремии,
	|	ТаблицаРезультатовНачислений.ПравилоРасчетаПремий КАК ПравилоРасчетаПремий
	|ПОМЕСТИТЬ Премии
	|ИЗ
	|	ТаблицаОбъемовПродаж КАК ТаблицаРезультатовНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВыполненныхУсловий КАК ТаблицаВыполненныхУсловий
	|		ПО ТаблицаРезультатовНачислений.Продавец = ТаблицаВыполненныхУсловий.Продавец
	|			И ТаблицаРезультатовНачислений.ПравилоРасчетаПремий = ТаблицаВыполненныхУсловий.ПравилоРасчетаПремий
	|ГДЕ
	|	ТаблицаВыполненныхУсловий.УсловиеВыполнено = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДвиженийПоРегистру.Магазин КАК Магазин,
	|	ТаблицаДвиженийПоРегистру.Продавец КАК ФизЛицо,
	|	ТаблицаДвиженийПоРегистру.ПравилоРасчетаПремий КАК ПравилоРасчетаПремий,
	|	ТаблицаДвиженийПоРегистру.Количество КАК Количество,
	|	ТаблицаДвиженийПоРегистру.Сумма КАК Сумма,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(Премии.СуммаПремии КАК ЧИСЛО(15, 2)), 0) КАК СуммаПремии
	|ИЗ
	|	ТаблицаДвиженийПоРегистру КАК ТаблицаДвиженийПоРегистру
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Премии КАК Премии
	|		ПО ТаблицаДвиженийПоРегистру.ПравилоРасчетаПремий = Премии.ПравилоРасчетаПремий
	|			И ТаблицаДвиженийПоРегистру.Продавец = Премии.ФизЛицо
	|";
	Возврат ТекстЗапросаТаблицаПремий;
	
КонецФункции

Функция ПолучитьДеревоПравилРасчетаПремий(МассивПравилРасчетаПремий)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивПравилРасчетаПремий", 	МассивПравилРасчетаПремий);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаРасчетаПремий.Ссылка КАК ПравилоРасчетаПремий,
	|	ПравилаРасчетаПремий.ВариантСовместногоРасчетаПремий,
	|	ПравилаРасчетаПремий.ПометкаУдаления,
	|	ПравилаРасчетаПремий.ЭтоГруппа,
	|	ПравилаРасчетаПремий.СпособРасчетаПремий,
	|	ПравилаРасчетаПремий.ЗначениеРасчетаПремий
	|ИЗ
	|	Справочник.ПравилаРасчетаПремий КАК ПравилаРасчетаПремий
	|ГДЕ
	|	ПравилаРасчетаПремий.Ссылка В (&МассивПравилРасчетаПремий)
	|ИТОГИ ПО
	|	ПравилоРасчетаПремий ТОЛЬКО ИЕРАРХИЯ";
	
	ДеревоПравилРасчетаПремий = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ДеревоПравилРасчетаПремий.Колонки.Добавить("ТаблицаПремий", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Возврат ДеревоПравилРасчетаПремий;
	
КонецФункции

Процедура ОбходВариантовСовместногоРасчетаПремий(ДеревоПравилРасчетаПремий, РассчитанныеПремии)
	
	Для каждого СтрокаДереваПравилРасчетаПремий Из ДеревоПравилРасчетаПремий.Строки Цикл
		
		Если СтрокаДереваПравилРасчетаПремий.ЭтоГруппа = Истина Тогда
			ОбходВариантовСовместногоРасчетаПремий(СтрокаДереваПравилРасчетаПремий, РассчитанныеПремии);
					СовместныйРасчетПремий(СтрокаДереваПравилРасчетаПремий);
		Иначе
			Если СтрокаДереваПравилРасчетаПремий.Родитель = Неопределено Тогда
				  ОбходВариантовСовместногоРасчетаПремий(СтрокаДереваПравилРасчетаПремий, РассчитанныеПремии);
				  СовместныйРасчетПремий(СтрокаДереваПравилРасчетаПремий);
			Иначе
				ПараметрыОтбора = Новый Структура("ПравилоРасчетаПремий", СтрокаДереваПравилРасчетаПремий.ПравилоРасчетаПремий);
				СтрокаДереваПравилРасчетаПремий.ТаблицаПремий = РассчитанныеПремии.Скопировать(ПараметрыОтбора);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СовместныйРасчетПремий(СтрокаДереваПравилРасчетаПремий)
	
	ТаблицаПремий = ОбъединитьТаблицыДанныхСтрокДерева(СтрокаДереваПравилРасчетаПремий);
	
	ТЗ = ПолучитьПустуюТаблицуПремий();
	
	Сложение = Ложь;
	
	Если СтрокаДереваПравилРасчетаПремий.ВариантСовместногоРасчетаПремий = Перечисления.ВариантыСовместногоРасчетаПремий.Максимум Тогда
		ТаблицаПремий.Сортировать("ФизЛицо, СуммаПремии Убыв");
	ИначеЕсли СтрокаДереваПравилРасчетаПремий.ВариантСовместногоРасчетаПремий = Перечисления.ВариантыСовместногоРасчетаПремий.Минимум Тогда
		ТаблицаПремий.Сортировать("ФизЛицо, СуммаПремии Возр");
	ИначеЕсли СтрокаДереваПравилРасчетаПремий.ВариантСовместногоРасчетаПремий = Перечисления.ВариантыСовместногоРасчетаПремий.Сложение Тогда
		ТаблицаПремий.Сортировать("ФизЛицо");
		Сложение = Истина;
	КонецЕсли;
	
	ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	Для Каждого СтрокаТаблицы Из ТаблицаПремий Цикл		
		
		Если СтрокаТаблицы.ФизЛицо <> ФизЛицо Тогда
			НоваяСтрокаТЗ = ТЗ.Добавить();
			НоваяСтрокаТЗ.ФизЛицо = СтрокаТаблицы.ФизЛицо;
			НоваяСтрокаТЗ.СуммаПремии = СтрокаТаблицы.СуммаПремии;
			НоваяСтрокаТЗ.ПравилоРасчетаПремий = СтрокаТаблицы.ПравилоРасчетаПремий;
			ФизЛицо = СтрокаТаблицы.ФизЛицо;
		Иначе
			Если Сложение Тогда
				НоваяСтрокаТЗ = ТЗ.Добавить();
				НоваяСтрокаТЗ.ФизЛицо = СтрокаТаблицы.ФизЛицо;
				НоваяСтрокаТЗ.СуммаПремии = СтрокаТаблицы.СуммаПремии;
				НоваяСтрокаТЗ.ПравилоРасчетаПремий = СтрокаТаблицы.ПравилоРасчетаПремий;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДереваПравилРасчетаПремий.ТаблицаПремий = ТЗ.Скопировать();
		
КонецПроцедуры

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	ЭтаФорма.ПоложениеКоманднойПанели      = ?(ВидимостьЭлементов, ПоложениеКоманднойПанелиФормы.Авто, ПоложениеКоманднойПанелиФормы.Нет);
	Элементы.РеквизитыШапки.Видимость      = ВидимостьЭлементов;
	Элементы.ГруппаОтветственный.Видимость = ВидимостьЭлементов;
	Элементы.РазвернутьСвернутьТЧ.Картинка = ?(ВидимостьЭлементов, БиблиотекаКартинок.РазвернутьТабличнуюЧасть, БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФизЛицо = Элемент.ТекущиеДанные.ФизЛицо;
	
	ПараметрыОткрытия = СотрудникиВыборНаСервере(ФизЛицо);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);

	Оповещение = Новый ОписаниеОповещения("СотрудникиВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.РасчетПремийПоЛичнымПродажам.Форма.ФормаРасшифровкаПремий", ПараметрыОткрытия, ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Функция СотрудникиВыборНаСервере(ФизЛицо)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ФизЛицо", ФизЛицо);
	ПараметрыОткрытия.Вставить("АдресВХранилищеПремииПоСтроке",  ПоместитьВоВременноеХранилище(ЭтаФорма.Объект.ТаблицаПремий.Выгрузить(Новый Структура("ФизЛицо", ФизЛицо)), ЭтаФорма.УникальныйИдентификатор));
	
	Возврат  ПараметрыОткрытия;

КонецФункции

&НаКлиенте
Процедура СотрудникиВыборЗавершение (Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Модифицированность Тогда
			СотрудникиВыборЗавершениеНаСервере(Результат);
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиВыборЗавершениеНаСервере(Результат)
	
	ФизЛицо = Результат.ФизЛицо;
	СтрокиСотрудники = Этаформа.Объект.Сотрудники.НайтиСтроки(Новый Структура("ФизЛицо", ФизЛицо));
	Если СтрокиСотрудники.Количество() <> 0 Тогда
		СтрокаСотрудника  = СтрокиСотрудники[0]
	Иначе
		Возврат
	КонецЕсли;

	УдаляемыеСтроки = Этаформа.Объект.ТаблицаПремий.НайтиСтроки(Новый Структура("ФизЛицо", ФизЛицо));
	Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ЭтаФорма.Объект.ТаблицаПремий.Удалить(УдаляемаяСтрока);
	КонецЦикла;

	ТаблицаПремийИзм = ПолучитьИзВременногоХранилища(Результат.АдресВХранилищеПремииПоСтроке);
	
	Для каждого СтрокаТаблицаПремийИзм Из ТаблицаПремийИзм Цикл
		ЗаполнитьЗначенияСвойств(СтрокаТаблицаПремийИзм, СтрокаСотрудника, "ФизЛицо");
	КонецЦикла;	
	
	ОбщегоНазначенияРТ.ДобавитьСтрокиВТаблицу(ЭтаФорма.Объект.ТаблицаПремий, ТаблицаПремийИзм);		
	
	ТаблицаПремийСотрудника = Объект.ТаблицаПремий.НайтиСтроки(Новый Структура("ФизЛицо", СтрокаСотрудника.ФизЛицо));
	СтрокаСотрудника.СуммаПремии = Объект.ТаблицаПремий.Выгрузить(ТаблицаПремийСотрудника).Итог("СуммаПремии");
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныйПериодПриИзменении(Элемент)
	СтандартныйПериодПриИзмененииНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура МагазинОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Объект.Магазин = ВыбранноеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередНачаломИзменения(Элемент, Отказ)
	
	ФизЛицо = Элемент.ТекущиеДанные.ФизЛицо;
	
	ПараметрыОткрытия = СотрудникиВыборНаСервере(ФизЛицо);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);

	Оповещение = Новый ОписаниеОповещения("СотрудникиВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.РасчетПремийПоЛичнымПродажам.Форма.ФормаРасшифровкаПремий", ПараметрыОткрытия, ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	Отказ = Истина;

КонецПроцедуры

&НаСервере
Процедура СтандартныйПериодПриИзмененииНаСервере()
	
	Если СтандартныйПериод.ДатаНачала = Дата('00010101') Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ МИНИМУМ(Период) КАК Период ИЗ РегистрНакопления.Продажи КАК Продажи");
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ДатаНачала = Результат.Выгрузить()[0].Период;
	    	СтандартныйПериод.ДатаНачала = ДатаНачала;
		Иначе
			СтандартныйПериод.ДатаНачала = ТекущаяДатаСеанса();
		КонецЕсли;
	КонецЕсли;
	
	Если СтандартныйПериод.ДатаОкончания = Дата('00010101') Тогда
		СтандартныйПериод.ДатаОкончания = ТекущаяДатаСеанса();
	КонецЕсли;

	Объект.ПериодРасчетаДатаНачала 		= СтандартныйПериод.ДатаНачала;
	Объект.ПериодРасчетаДатаОкончания 	= СтандартныйПериод.ДатаОкончания;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
