
#Область ПрограммныйИнтерфейс

&НаКлиенте
Перем КэшированныеЗначения; // Используется механизмом обработки изменения реквизитов ТЧ.

&НаКлиенте
Процедура ОповещениеВопросПересчитатьЗначениеТорговойУступки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ПроцентКомиссии = ДополнительныеПараметры.ПроцентКомиссии;
		ПересчитатьСуммуКомиссии();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросУспешностиОплатыКартой(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПараметрДействия = ДополнительныеПараметры.ПараметрДействия;
	
	Если НЕ (РезультатВопроса = КодВозвратаДиалога.Да) Тогда
		СтрокаСлипЧека = "";
		ТекстОписаниеОшибки = НСтр("ru = 'Операция отменена.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ЗавершитьОплатуКартой(ПараметрДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуАвторизацииЭТ(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	ПараметрДействия = ДополнительныеПараметры.ПараметрДействия;
	
	Если ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		
		ПараметрДействия.СуммаОперации = РезультатОткрытияФормы.Сумма;
		
		Если НЕ ПараметрДействия.ПараметрыЭТ.ИспользоватьБезПодключенияОборудования Тогда
			
			ЭтаФорма.Доступность = Ложь;
			
			ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
			ПараметрыОперации.ТипТранзакции  = ПараметрДействия.ТипТранзакции;
			ПараметрыОперации.СуммаОперации  = РезультатОткрытияФормы.Сумма;
			ПараметрыОперации.НомерЧека      = РезультатОткрытияФормы.НомерЧека;
			ПараметрыОперации.СсылочныйНомер = РезультатОткрытияФормы.СсылочныйНомер;
			
			Если НЕ УстройствоПечатиСлипЧека.Пустая() Тогда
				УстройствоПечати = УстройствоПечатиСлипЧека;
			Иначе
				УстройствоПечати = ПараметрДействия.ПараметрыКассыККМ.ИдентификаторУстройства;
				УстройствоПечати = ?(ПустаяСтрока(УстройствоПечати), Неопределено, УстройствоПечати);
			КонецЕсли;
			
			Оповещение = Новый ОписаниеОповещения("ОповещениеОткрытьФормуАвторизацииЭТЗавершение", ЭтотОбъект, ПараметрДействия);
			МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение, УникальныйИдентификатор, 
				ПараметрДействия.ПараметрыЭТ.ИдентификаторУстройства, УстройствоПечати, ПараметрыОперации);
		Иначе
			
			ПараметрДействия.НомерКарты          = РезультатОткрытияФормы.НомерКарты;
			ПараметрДействия.НомерСсылкиОперации = РезультатОткрытияФормы.СсылочныйНомер;
			ПараметрДействия.НомерЧекаЭТ         = РезультатОткрытияФормы.НомерЧека;
			
			ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию оплаты на эквайринговом терминале.'") + Символы.ПС;
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'") + " "+ ПараметрДействия.СуммаОперации  + Символы.ПС;
			ТекстВопроса = ТекстВопроса + Символы.ПС;
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция оплаты на эквайринговом терминале прошла успешно?'");
			
			ДополнительныеПараметры = Новый Структура; 
			ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросУспешностиОплатыКартой", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуАвторизацииЭТЗавершение(РезультатВыполнения, ПараметрДействия) Экспорт 
	
	ЭтаФорма.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
			|""%ОписаниеОшибки%"".
			|Оплата по карте не была произведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		ПараметрДействия.НомерКарты          = РезультатВыполнения.НомерКарты;
		ПараметрДействия.НомерСсылкиОперации = РезультатВыполнения.СсылочныйНомер;
		ПараметрДействия.НомерЧекаЭТ         = РезультатВыполнения.НомерЧекаЭТ;
		ПараметрДействия.СтрокаСлипЧека      = РезультатВыполнения.ТекстСлипЧека;
		ЗавершитьОплатуКартой(ПараметрДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросПроведениеПередПечатьюЧека(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Попытка
			Если ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
				НапечататьЧекКлиент();
			КонецЕсли;
		Исключение
			ПоказатьПредупреждение(,НСтр("ru = 'Не удалось выполнить проведение документа'"));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Если ЗначениеЗаполнено(РезультатВыполнения.ВыходныеПараметры[1]) Тогда
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		Иначе
			Объект.НомерЧекаККМ = НомерДокументаКассыККМ[Объект.КассаККМ];
		КонецЕсли; 
		Объект.ПробитЧек    = Истина;
		Модифицированность  = Ложь;
		
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Если РезультатЗаписи = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ +	1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
									|Чек не напечатан на фискальном устройстве.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// &ЗамерПроизводительности 
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыОперации.Замер);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ТолькоПросмотрПриСозданииНаСервере = ТолькоПросмотр;
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование();
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,Элементы.КартинкаСостоянияДокумента.Подсказка,РазрешеноПроведение);
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал)  Тогда
			ЗаполнитьРеквизитыФРПоЭквайринговомуТерминалу();
		КонецЕсли;
		УправлениеЭлементамиФормы();
		НомерЧекаККМ = 0;
		
		ЗаполнениеПризнаковСпособовРасчета();
		
		ПересчитатьСуммуКомиссииСервер();
	КонецЕсли;
	
	НастроитьФормуПоДополнительнымПравам();
	
	Если НЕ Элементы.Найти("ОплатитьКартой") = Неопределено Тогда
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
			Элементы.ОплатитьКартой.Заголовок = НСтр("ru = 'Вернуть на карту'"); 
		Иначе
			Элементы.ОплатитьКартой.Заголовок = НСтр("ru = 'Оплатить картой'"); 
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьРеквизитыФормы();
	КонецЕсли;
	
	Элементы.УстройствоПечатиСлипЧека.Видимость = НЕ ТолькоПросмотр И ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	
	Если ЗначениеЗаполнено(Объект.ОтчетОРозничныхПродажах) Тогда
		
		ТекстДекорации = НСтр("ru = '%1'");
		РеквизитыОтчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ОтчетОРозничныхПродажах, "Номер, Дата");
		
		ТекстДекорации = СтрЗаменить(ТекстДекорации, "%1", 
			ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыОтчета, НСтр("ru = 'Отчет о розничных продажах'"), "ДФ=dd.MM.yy")
		);
		
		Элементы.ДекорацияОтчетОРозничныхПродажах.Заголовок = ТекстДекорации;
		
	Иначе
		Элементы.ДекорацияОтчетОРозничныхПродажах.Видимость = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
	Элементы.РасшифровкаПлатежаПризнакСпособаРасчета.ТолькоПросмотр = НЕ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
	Элементы.ЗаказПокупателя.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьТерминала();
	ПолучитьРабочееМесто();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	УправлениеЭлементамиФормы();
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	ОбработатьРеквизитыФормы()
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
	                                            "Документ.ОплатаОтПокупателяПлатежнойКартой.ФормаДокумента.Запись",
                                                            Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = ОсновнойОтветственный();
	КонецЕсли;
	
	Объект.ПробиватьЧекиПоКассеККМ = ПробиватьЧекиПоКассеККМ;
	Объект.КассаККМ = КассаККМ;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбработатьРеквизитыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправлениеЭлементамиФормы();
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОплатыПриИзменении(Элемент)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ЭквайринговыйТерминал", Объект.ЭквайринговыйТерминал);
	СтруктураПараметров.Вставить("ВидОплаты", Объект.ВидОплаты);
	СтруктураПараметров.Вставить("ЭтоВозврат", Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту"));
	ВидОплатыПриИзмененииСервер(СтруктураПараметров);
	Объект.ПроцентКомиссии = СтруктураПараметров.ПроцентКомиссии;
	ПересчитатьСуммуКомиссии();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ФинансыКлиент.ПересчетСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента);
	ПересчитатьСуммуКомиссии();
	ЗаполнениеПризнаковСпособовРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентКомиссииПриИзменении(Элемент)
	
	ПересчитатьСуммуКомиссии();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Перем ФормаВыбора;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Владелец", Элемент);
	СтруктураПараметров.Вставить("ПравоеЗначение", ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта"));
	СтруктураПараметров.Вставить("ИмяПоляОтбораЛевоеЗначение", "ТипОплаты");
	СтруктураПараметров.Вставить("ЭквайринговыйТерминал", Объект.ЭквайринговыйТерминал);
	ОтборыСписковКлиентСервер.НачалоВыбораВидаОплатыЧекаККМ(СтруктураПараметров, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении(Элемент)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ВидОплаты", Объект.ВидОплаты);
	
	ЭквайринговыйТерминалПриИзмененииНаСервере(СтруктураПараметров);
	ЭквайринговыйТерминалПриИзмененииКлиент(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ПроцентКомиссии", Объект.ПроцентКомиссии);
		МагазинПриИзмененииСервер(СтруктураПараметров);
		ЭквайринговыйТерминалПриИзмененииКлиент(СтруктураПараметров);
	КонецЕсли;
	
	УстановитьДоступностьТерминала();
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	Объект.КассаККМ = КассаККМ;
	Модифицированность = НЕ Объект.ОплатаВыполнена;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
	Если НЕ Объект.ОплатаВыполнена Тогда
		ПодключаемоеОборудованиеКассы = ПодключаемоеОборудованиеКассы();
		Если ЗначениеЗаполнено(ПодключаемоеОборудованиеКассы) Тогда
			УстройствоПечатиСлипЧека = ПодключаемоеОборудованиеКассы;
			
			
			Элементы.УстройствоПечатиСлипЧека.ТолькоПросмотр = Истина;
		Иначе
			
			Элементы.УстройствоПечатиСлипЧека.ТолькоПросмотр = Ложь;
		КонецЕсли;
	Иначе
		
		
		Элементы.УстройствоПечатиСлипЧека.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтчетОРозничныхПродажахНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ОтчетОРозничныхПродажах) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Объект.ОтчетОРозничныхПродажах);
		ПараметрыФормы.Вставить("ТекущийЭлемент", "ПрочаяВыручка");
		
		ПараметрыТекущейСтроки = Новый Структура;
		ПараметрыТекущейСтроки.Вставить("Контрагент"           , Объект.Контрагент);
		ПараметрыТекущейСтроки.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
		ПараметрыТекущейСтроки.Вставить("ВидОплаты"            , Объект.ВидОплаты);
		
		ПараметрыФормы.Вставить("ТекущаяСтрока", ПараметрыТекущейСтроки);
		ПараметрыФормы.Вставить("ТекущийРеквизитОбъекта", "ПрочаяВыручка");
		
		ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ЗаполнениеПризнаковСпособовРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыйТерминалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Истина, "Справочник.ЭквайринговыеТерминалы.Форма.ФормаВыбора.Открытие");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		СуммаОстаток = Объект.СуммаДокумента - Объект.РасшифровкаПлатежа.Итог("Сумма");
		Элемент.ТекущиеДанные.Сумма = СуммаОстаток;
		Элемент.ТекущиеДанные.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект.РасшифровкаПлатежа, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект.РасшифровкаПлатежа, Истина);
	ПересчитатьСуммуКомиссии();
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		ЗаполнениеПризнакаСпособаРасчета(СтрокаТаблицы.ДокументРасчетовСКонтрагентом, 
										 СтрокаТаблицы.Сумма, 
										 СтрокаТаблицы.ПризнакСпособаРасчета,
										 Объект.ЗаказПокупателя)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументРасчетовСКонтрагентом) Тогда
			
			РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзмененииСервер(СтрокаТаблицы.ДокументРасчетовСКонтрагентом);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.РасшифровкаПлатежа.ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(Элементы.РасшифровкаПлатежа.ТекущиеДанные.ДокументРасчетовСКонтрагентом) Тогда
			Элемент.ВыбиратьТип = Ложь;
		Иначе
			Элемент.ВыбиратьТип = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтатьяДвиженияДенежныхСредств = СтрокаТаблицы.СтатьяДвиженияДенежныхСредств;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОплатитьКартой(Команда)
	Перем ПараметрыКассыККМ, ПараметрыЭТ;
	
	Если НЕ ПроверкаВозможностиРаботыСКартой(ПараметрыКассыККМ, ПараметрыЭТ) Тогда
		Возврат;
	КонецЕсли;
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ.Открытие");

    
	// Предварительно авторизуем операцию.
	ПараметрыФормы = Новый Структура("Сумма, ПределСуммы", Объект.СуммаДокумента, Объект.СуммаДокумента);
	ПараметрыФормы.Вставить("ЗапретРедактированияСуммы", Истина);
	Если ПараметрыЭТ.ИспользоватьБезПодключенияОборудования Тогда
		ПараметрыФормы.Вставить("ПоказыватьНомерКарты", Истина);
	КонецЕсли;
	
	ПараметрДействия = Новый Структура;
	ПараметрДействия.Вставить("ПараметрыКассыККМ", ПараметрыКассыККМ);
	ПараметрДействия.Вставить("ПараметрыЭТ", ПараметрыЭТ);
	ПараметрДействия.Вставить("СуммаОперации", 0);
	ПараметрДействия.Вставить("НомерКарты", "");
	ПараметрДействия.Вставить("НомерСсылкиОперации", "");
	ПараметрДействия.Вставить("НомерЧекаЭТ", 0);
	ПараметрДействия.Вставить("НомерЧекаККМ", Объект.Номер);
	ПараметрДействия.Вставить("СтрокаСлипЧека", "");
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента") Тогда
		ПараметрДействия.Вставить("ТипТранзакции", "AuthorizeSales");
	Иначе
		ПараметрДействия.Вставить("ТипТранзакции", "AuthorizeRefund");
		ПараметрыФормы.Вставить("УказатьДополнительныеДанные", Истина);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуАвторизацииЭТ", ЭтотОбъект, ДополнительныеПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧек(Команда)
	
	Если Объект.ПробитЧек Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросПроведениеПередПечатьюЧека", ЭтотОбъект);
	
	Если ФинансыКлиент.ПроверитьВозможностьПечатиЧека(ОбработчикОповещения, ЭтотОбъект) Тогда
		НапечататьЧекКлиент();
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуКомиссии()
	
	Объект.СуммаКомиссии = Объект.СуммаДокумента * Объект.ПроцентКомиссии / 100;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуКомиссииСервер()
	
	Объект.СуммаКомиссии = Объект.СуммаДокумента * Объект.ПроцентКомиссии / 100;
	
КонецПроцедуры

// Функция получает из настроек пользователя настройку основного ответственного.
// Параметры - Нет
//
// Возвращаемое значение - СправочникСсылка.Пользователи - Основной ответственный из настроек текущего пользователя.
//
&НаСервере
Функция ОсновнойОтветственный()
	
	Возврат Пользователи.ТекущийПользователь();
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Обработчики изменений реквизитов.

&НаСервере
Процедура МагазинПриИзмененииСервер(СтруктураПараметров)
	
	Объект.ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ЭквайринговыйТерминалПоУмолчанию(Неопределено, Объект.Организация, Объект.Магазин, Объект.ВидОплаты);
	Если ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Тогда
		ЭквайринговыйТерминалПриИзмененииНаСервере(СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзмененииКлиент(СтруктураПараметров)
	
	Если НЕ ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Тогда
		Объект.Эквайрер               = Неопределено;
		Объект.СуммаКомиссии   = 0.00;
		Объект.ПроцентКомиссии = 0.00;
		Возврат;
	КонецЕсли;
	Если Объект.СуммаДокумента > 0.00 И Объект.ПроцентКомиссии <> СтруктураПараметров.ПроцентКомиссии Тогда
		
		ТекстВопроса = НСтр("ru='Пересчитать значение торговой уступки?'");
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПроцентКомиссии", СтруктураПараметров.ПроцентКомиссии);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросПересчитатьЗначениеТорговойУступки", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	ИначеЕсли Объект.ПроцентКомиссии <> СтруктураПараметров.ПроцентКомиссии Тогда
		Объект.ПроцентКомиссии = СтруктураПараметров.ПроцентКомиссии;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЭквайринговыйТерминалПриИзмененииНаСервере(СтруктураПараметров)
	
	СтруктураПараметров.Вставить("ПроцентКомиссии", 0.00);
	Если ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Тогда
		СтруктураРеквизитов = Справочники.ЭквайринговыеТерминалы.РеквизитыЭквайринговогоТерминала(Объект.ЭквайринговыйТерминал);
		Объект.Организация = СтруктураРеквизитов.Организация;
		Объект.Эквайрер = СтруктураРеквизитов.Эквайрер;
		ПараметрПроцентКомиссии = 0.00;
		Если ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Тогда
			Если СтруктураПараметров.Свойство("ВидОплаты") И ЗначениеЗаполнено(СтруктураПараметров.ВидОплаты) Тогда
				ПараметрПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииДляПлатежнойКарты(Объект.ЭквайринговыйТерминал, СтруктураПараметров.ВидОплаты);
			Иначе
				СтруктураПоУмолчанию = Справочники.ЭквайринговыеТерминалы.ВидОплатыПоУмолчанию(Объект.ЭквайринговыйТерминал);
				Если ЗначениеЗаполнено(СтруктураПоУмолчанию.ВидОплаты) Тогда
					Объект.ВидОплаты = СтруктураПоУмолчанию.ВидОплаты;
					ПараметрПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииДляПлатежнойКарты(Объект.ЭквайринговыйТерминал, Объект.ВидОплаты);;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтруктураПараметров.Вставить("ПроцентКомиссии", ПараметрПроцентКомиссии);
		
		ЗаполнитьРеквизитыФРПоЭквайринговомуТерминалу();
		Объект.ВидНалога = Перечисления.ВидыНалогов.ПустаяСсылка();
		
		Элементы.ВидОплаты.СписокВыбора.Очистить();
		
		Для каждого СтрокаТариф Из Объект.ЭквайринговыйТерминал.ТарифыЗаРасчетноеОбслуживание Цикл
			
			Элементы.ВидОплаты.СписокВыбора.Добавить(СтрокаТариф.ВидОплаты);
			
		КонецЦикла;
		
		ЗаполнениеПризнаковСпособовРасчета();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФРПоЭквайринговомуТерминалу()
	
	РассматриваемаяКасса = Объект.ЭквайринговыйТерминал.Касса;
	
	Объект.КассаККМ = РассматриваемаяКасса.КассаККМ;
	Объект.ПробиватьЧекиПоКассеККМ = РассматриваемаяКасса.ПробиватьЧекиПоКассеККМ;
	
	ОбработатьРеквизитыФормы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВидОплатыПриИзмененииСервер(СтруктураПараметров)
	Перем ПараметрПроцентКомиссии, ПараметрЭквайринговыйТерминал, ПараметрВидОплаты;
	
	ПараметрВидОплаты              = СтруктураПараметров.ВидОплаты;
	ПараметрЭквайринговыйТерминал  = СтруктураПараметров.ЭквайринговыйТерминал;
	ПараметрЭтоВозврат             = СтруктураПараметров.ЭтоВозврат;
	ПараметрПроцентКомиссии        = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииДляПлатежнойКарты(ПараметрЭквайринговыйТерминал, ПараметрВидОплаты, ПараметрЭтоВозврат);
	СтруктураПараметров.Вставить("ПроцентКомиссии", ПараметрПроцентКомиссии);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Управление свойствами элементов формы.

&НаСервере
Процедура УстановитьВидимостьЭлементамПоХозяйственнойОперации()

	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ОплатаОтПокупателяПлатежнойКартой.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);

	ОбщегоНазначенияРТ.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
КонецПроцедуры

// Процедура ОбновитьЭлементыФормыПоВидуОперации инициализирует форму по виду операции.
//
&НаСервере
Процедура ОбновитьЭлементыФормыПоВидуОперации()
	
	УстановитьВидимостьЭлементамПоХозяйственнойОперации();
	УстановитьОграничениеТипаДокументРасчетовСКонтрагентом();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОграничениеТипаДокументРасчетовСКонтрагентом()
	
	МассивТиповОграничений = Документы.ОплатаОтПокупателяПлатежнойКартой.ОграничениеТипаДокументаРасчетовПоХозяйственнойОперации(Объект.ХозяйственнаяОперация);

	Если МассивТиповОграничений.Количество() > 0 Тогда
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ВыбиратьТип = МассивТиповОграничений.Количество() > 1;
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ОграничениеТипа = Новый ОписаниеТипов(МассивТиповОграничений);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
	
	ИзменятьУчетДС = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователяСУчетомИзмененныхПрав(ПланыВидовХарактеристик.ПраваПользователей.ИзменятьУчетДенежныхСредствВКассовыхДокументах);
	
КонецПроцедуры

// В процедуре выполняется установка свойств элементов формы.
//
&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	ОбновитьЭлементыФормыПоВидуОперации();
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораЭквайринговогоТерминала(Объект, Элементы.ЭквайринговыйТерминал);
	СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(Объект.ХозяйственнаяОперация);
	Если НЕ Элементы.Найти("ОплатитьКартой") = Неопределено Тогда
		Элементы.ОплатитьКартой.Доступность = Объект.Проведен И НЕ Объект.ОплатаВыполнена И НЕ ТолькоПросмотр;
	КонецЕсли;
	
	Если Объект.ОплатаВыполнена Тогда
		Элементы.СтраницыДекораций.ТекущаяСтраница = Элементы.СтраницаОперацияПроизведена
	Иначе
		Элементы.СтраницыДекораций.ТекущаяСтраница = Элементы.СтраницаОперацияНеПроизведена
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьТерминала()
	
	Элементы.ЭквайринговыйТерминал.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Магазин);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование.

&НаКлиенте
Процедура ЗавершитьОплатуКартой(ПараметрДействия)
	
	Объект.НомерПлатежнойКарты = ПараметрДействия.НомерКарты;
	Объект.ОплатаВыполнена     = Истина;
	
	Если НЕ Объект.ПробиватьЧекиПоКассеККМ
		ИЛИ ПараметрДействия.ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
		Объект.ПробитЧек = Истина;
		Если НомерДокументаКассыККМ[Объект.КассаККМ] <> Неопределено Тогда
			Объект.НомерЧекаККМ  = НомерДокументаКассыККМ[Объект.КассаККМ];
		Иначе
			Объект.НомерЧекаККМ  = ПорядковыйНомерПродажи;
		КонецЕсли;
	КонецЕсли;
	
	РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	
	Если РезультатЗаписи = Истина Тогда
		Если Объект.ПробитЧек Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
			ОбработатьРеквизитыФормы();
		Иначе
			НомерЧека = НомерДокументаКассыККМ[Объект.КассаККМ] + 1;
			ПробитьЧек(ПараметрДействия.ПараметрыКассыККМ, НомерЧека);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРеквизитыФормы()
	
	ТолькоПросмотр = ТолькоПросмотр ИЛИ Объект.ОплатаВыполнена;
	
	ПробиватьЧекиПоКассеККМ = Объект.ПробиватьЧекиПоКассеККМ;
	КассаККМ = Объект.КассаККМ;
	
	Если Объект.ОплатаВыполнена Тогда
		УстройствоПечатиСлипЧека = Справочники.ПодключаемоеОборудование.ПустаяСсылка();
		Элементы.УстройствоПечатиСлипЧека.ПодсказкаВвода = НСтр("ru = 'Банковская операция выполнена'"); 
		
		Элементы.УстройствоПечатиСлипЧека.ТолькоПросмотр = Истина;
	ИначеЕсли ЗначениеЗаполнено(КассаККМ.ПодключаемоеОборудование) Тогда
		УстройствоПечатиСлипЧека = КассаККМ.ПодключаемоеОборудование;
		
		Элементы.УстройствоПечатиСлипЧека.ТолькоПросмотр = Истина;
	Иначе
		
		Элементы.УстройствоПечатиСлипЧека.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Элементы.КассаККМ.ТолькоПросмотр = ТолькоПросмотрПриСозданииНаСервере 
									   ИЛИ Объект.ПробитЧек 
									   ИЛИ Объект.СменаЗакрыта
									   ИЛИ НЕ ИзменятьУчетДС;
	Элементы.КассаККМ.Доступность = ПробиватьЧекиПоКассеККМ;
	
	Элементы.НапечататьЧек.Видимость = НЕ ТолькоПросмотрПриСозданииНаСервере 
									   И НЕ Объект.ПробитЧек 
									   И НЕ Объект.СменаЗакрыта
									   И Объект.ОплатаВыполнена;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаВозможностиРаботыСКартой(ПараметрыКассыККМ, ПараметрыЭТ)
	Перем Отказ;
	
	Результат = Ложь;
	Отказ     = Ложь;
	ПараметрыКассыККМ = Новый Структура("УстройствоПодключено", Ложь);
	ПараметрыЭТ       = Новый Структура("УстройствоПодключено", Ложь);
	
	Если НЕ Объект.Проведен ИЛИ Модифицированность Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Документ необходимо провести.'"));
		Возврат Результат;
	КонецЕсли; 
	
	Если Объект.ОплатаВыполнена Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для данного документа уже выполнена оплата платежной картой.'"));
		Возврат Результат;
	КонецЕсли;
	
	Если Объект.ПробиватьЧекиПоКассеККМ Тогда
		Если НЕ ЗначениеЗаполнено(Объект.КассаККМ) Тогда
			ТекстОшибки = НСтр("ru='Не выбрана касса ККМ!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "КассаККМ", , Отказ);
			Возврат Результат;
		Иначе
			ПолучитьНеобходимыеДанныеДляРаботыСКартой(ПараметрыКассыККМ, ПараметрыЭТ, Отказ);
		КонецЕсли;
	Иначе
		ПолучитьНеобходимыеДанныеДляРаботыСКартой(ПараметрыКассыККМ, ПараметрыЭТ, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = Истина;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПолучитьНеобходимыеДанныеДляРаботыСКартой(ПараметрыКассыККМ, ПараметрыЭТ, Отказ)
	
	ПараметрыЭТ = ЗначениеНастроекВызовСервера.ПолучитьПараметрыЭТ(Объект.ЭквайринговыйТерминал);
	ПараметрыЭТ.ИспользоватьБезПодключенияОборудования = ПараметрыЭТ.ИспользоватьБезПодключенияОборудования ИЛИ НЕ ИспользоватьПодключаемоеОборудование;
	
	Если НЕ Объект.ПробиватьЧекиПоКассеККМ Тогда
		ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(Справочники.КассыККМ.ПустаяСсылка());
	Иначе
		ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(Объект.КассаККМ);
		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
		
		КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		
		ТекстОшибки = НСтр("ru='Кассовая смена не открыта!'");
		Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Объект.Дата, ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "КассаККМ", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования ИЛИ НЕ ИспользоватьПодключаемоеОборудование;
	
КонецПроцедуры

&НаСервере
Функция ПодключаемоеОборудованиеКассы()
	
	Возврат КассаККМ.ПодключаемоеОборудование;
	
КонецФункции 

&НаКлиенте
Процедура ПробитьЧек(ПараметрыКассыККМ, НомерЧека)
    
    // &ЗамерПроизводительности 
    Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
                                                    "Документ.ОплатаОтПокупателяПлатежнойКартой.Форма.ФормаДокумента.Команда.ПробитьЧек",
                                                               Ложь);
                                                               
    ДополнительныеПараметры = Новый Структура;
    ДополнительныеПараметры.Вставить("Замер", Замер);

	ЭтаФорма.Доступность = Ложь;
	
	// Готовим данные
	ОбщиеПараметры  = ВходящиеДанныеДляФРСервер(ПараметрыКассыККМ.РаспределениеВыручкиПоСекциям, НомерЧека);
	
	Оповещение = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(Оповещение, 
									УникальныйИдентификатор, 
									ОбщиеПараметры, 
									ПараметрыКассыККМ.ИдентификаторУстройства);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьИПроверитьПечатьЧека(Отказ, ПараметрыКассыККМ)
	
	Отказ = Ложь;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ)  Тогда
		ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(Объект.КассаККМ);
		ПараметрыКассыККМ.Вставить("УстройствоПодключено", Ложь);
		ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования
																	ИЛИ НЕ ИспользоватьПодключаемоеОборудование;
		
		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
		
		КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		
		ТекстОшибки = НСтр("ru='Кассовая смена не открыта!'");
		Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Объект.Дата, ТекстОшибки) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.КассаККМ", , Отказ);
			
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru='Не выбрана касса ККМ!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.КассаККМ", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте

&НаКлиенте
Процедура НапечататьЧекКлиент()
	
	Перем Отказ, ПараметрыКассыККМ; 
		
	ПодготовитьИПроверитьПечатьЧека(Отказ, ПараметрыКассыККМ);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		Если НомерДокументаКассыККМ[Объект.КассаККМ] <> Неопределено Тогда
			Объект.НомерЧекаККМ  = НомерДокументаКассыККМ[Объект.КассаККМ];
		Иначе
			Объект.НомерЧекаККМ  = ПорядковыйНомерПродажи;
		КонецЕсли; 
		Объект.ПробитЧек     = Истина;
		Модифицированность = Ложь;
		
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		
		Если РезультатЗаписи = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		КонецЕсли;
		
	Иначе
		НомерЧека = НомерДокументаКассыККМ[Объект.КассаККМ] + 1;
		ПробитьЧек(ПараметрыКассыККМ, НомерЧека);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРабочееМесто()
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВходящиеДанныеДляФРСервер(РаспределениеВыручкиПоСекциям, НомерЧека)
	
	Возврат Документы.ОплатаОтПокупателяПлатежнойКартой.ПодготовитьДанныеДляПробитияЧека(Объект.Ссылка, РаспределениеВыручкиПоСекциям, НомерЧека);
	
КонецФункции

&НаСервере
Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзмененииСервер(ДокументРасчетовСКонтрагентом)
	
	Если ТипЗнч(ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.РеализацияТоваров")
		ИЛИ ТипЗнч(ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		Объект.ВидНалога = ПодключаемоеОборудованиеРТ.ВидНалогаПоОрганизацииИСкладу(Объект.Дата, Объект.Организация, ДокументРасчетовСКонтрагентом.Склад)
		
	ИначеЕсли ТипЗнч(ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ЧекККМ") Тогда
		Объект.ВидНалога = ДокументРасчетовСКонтрагентом.ВидНалога;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеПризнакаСпособаРасчета(ДокументРасчетовСКонтрагентом, СуммаПлатежа, ПризнакСпособаРасчета, ЗаказПокупателя)
	
	Документы.ОплатаОтПокупателяПлатежнойКартой.ЗаполнениеПризнакаСпособаРасчета(Объект,
																				 ДокументРасчетовСКонтрагентом,
																				 СуммаПлатежа,
																				 ПризнакСпособаРасчета,
																				 ЗаказПокупателя);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеПризнаковСпособовРасчета()
	
	Документы.ОплатаОтПокупателяПлатежнойКартой.ЗаполнениеПризнаковСпособовРасчета(Объект);
	
КонецПроцедуры

#КонецОбласти