#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
	
// Процедура ЗаполнитьНаборыЗначенийДоступа заполняет наборы значений доступа
// по объекту в таблице с полями:
//  - НомерНабора     Число                                     (необязательно, если набор один),
//  - ВидДоступа      ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//  - ЗначениеДоступа Неопределено, СправочникСсылка или др.    (обязательно),
//  - Чтение          Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Добавление      Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Изменение       Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Удаление        Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора).
//
//  Вызывается из процедуры УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	// Логика ограничения следующая:
	// объект доступен, если доступны все Магазины.
	// 
	
	Для Каждого СтрокаТаблицы Из Магазины Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Магазин) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаб = Таблица.Добавить();
		СтрокаТаб.ЗначениеДоступа = СтрокаТаблицы.Магазин;
	КонецЦикла;
	
	Если Таблица.Количество() = 0 Тогда
	
		СтрокаТаб = Таблица.Добавить();
		СтрокаТаб.Чтение          = Истина;
		СтрокаТаб.Изменение       = Истина;
		СтрокаТаб.ЗначениеДоступа = Справочники.Магазины.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
	
#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ДляВсехМагазинов Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Магазины");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаМагазины.Магазин
	|ПОМЕСТИТЬ ТаблицаРезультатМагазины
	|ИЗ
	|	&ТаблицаМагазины КАК ТаблицаМагазины
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПравилаРасчетаПремий.ПравилоРасчетаПремий,
	|	ТаблицаПравилаРасчетаПремий.Магазин
	|ПОМЕСТИТЬ ТаблицаРезультатПравилаРасчетаПремий
	|ИЗ
	|	&ТаблицаПравилаРасчетаПремий КАК ТаблицаПравилаРасчетаПремий
	|;
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ТаблицаРезультатМагазины КАК РезультатМагазины
	|;
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ТаблицаРезультатПравилаРасчетаПремий КАК РезультатПравилаРасчетаПремий
	|";
	
	Запрос.УстановитьПараметр("ТаблицаМагазины", ЭтотОбъект.Магазины.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаПравилаРасчетаПремий", ЭтотОбъект.ПравилаРасчетаПремий.Выгрузить());
	Результат = Запрос.ВыполнитьПакет();
	
	Если НЕ Результат[2].Выгрузить().Количество() = ЭтотОбъект.Магазины.Количество() Тогда
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дублируются строки в списке %1'"), "Магазины");
		Поле = НСтр("ru = 'Магазины'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, ЭтотОбъект, Поле,,	Отказ);
		
	ИначеЕсли НЕ Результат[3].Выгрузить().Количество() = ЭтотОбъект.ПравилаРасчетаПремий.Количество() Тогда
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дублируются строки в списке %1'"), "Правила расчета премий");	
		Поле = НСтр("ru = 'ПравилаРасчетаПремий'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, ЭтотОбъект, Поле,,	Отказ);
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.ПоложениеОПремировании.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ОтразитьДействующиеПравила(ДополнительныеСвойства, Движения, Отказ);
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ОтразитьДействующиеПравила (ДополнительныеСвойства, Движения, Отказ)
	
	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДействующихПравил;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ДействующиеПравилаРасчетаПремий.Записывать = Истина;
	Движения.ДействующиеПравилаРасчетаПремий.Загрузить(Таблица);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
