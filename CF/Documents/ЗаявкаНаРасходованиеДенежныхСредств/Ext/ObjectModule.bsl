#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);

		ЗаполнитьПоЗаказуПоступлению(ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);

		ЗаполнитьПоЗаказуПоступлению(ДанныеЗаполнения, Истина);
		
	Иначе
		Если ДанныеЗаполнения <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	ОбщегоНазначенияРТ.ПроверитьИспользованиеОрганизации(,,Организация);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.Наличная ИЛИ ФормаОплаты = Перечисления.ФормыОплаты.ПустаяСсылка() Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетКонтрагента");
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты,
		МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РасшифровкаПлатежа.Очистить();
	СуммаДокумента = 0;
	
	Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована;
	ДатаПлатежа = Дата("00010101");
	ФормаОплатыЗаявки = Перечисления.ФормыОплаты.ПустаяСсылка();
	КтоРешил = Справочники.Пользователи.ПустаяСсылка();
	БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
	Касса = Справочники.Кассы.ПустаяСсылка();
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваКВыплате(ДополнительныеСвойства, Движения, Отказ);
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	ДополнительныеСвойства.Вставить("Отказ", Отказ);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

	СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Ответственный = Пользователи.ТекущийПользователь();
	Организация   = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация,Ответственный);
	Контрагент    = ЗначениеНастроекПовтИсп.ПолучитьПоставщикаПоУмолчанию(Ответственный, Контрагент);
	Магазин       = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Магазин);
	
	ЖелательнаяДатаПлатежа = ?(ЗначениеЗаполнено(ЖелательнаяДатаПлатежа), ЖелательнаяДатаПлатежа, ТекущаяДатаСеанса());
	
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(
		Контрагент,
		БанковскийСчетКонтрагента);
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуПоступлению(ДанныеЗаполнения, ПоПоступлению = Ложь)
	
	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
	СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ХозяйственнаяОперация);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, "Контрагент, Магазин, Организация");
	
	МассивФормаОплаты = Новый Массив;
	МассивФормаОплаты.Добавить(Перечисления.ФормыОплаты.Безналичная);
	МассивФормаОплаты.Добавить(Перечисления.ФормыОплаты.Наличная);
	
	СуммаНеОплаченногоЭтапа = ЗакупкиСервер.ПолучитьСуммуНеОплаченногоЭтапа(ДанныеЗаполнения, МассивФормаОплаты);
	
	Если СуммаНеОплаченногоЭтапа = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Нет задолженности по запланированным оплатам на дату: %Дата% по документу ""%ДокументОснование%""'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДокументОснование%", ДанныеЗаполнения);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(ТекущаяДатаСеанса(),"ДЛФ=D"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "РасшифровкаПлатежа");
	КонецЕсли;
	
	НоваяСтрока = РасшифровкаПлатежа.Добавить();
	НоваяСтрока.ДокументРасчетовСКонтрагентом = ДанныеЗаполнения;
	НоваяСтрока.Сумма = СуммаНеОплаченногоЭтапа;
	НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
