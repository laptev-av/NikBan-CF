
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ДобавитьМаркуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ТипСтроки = ДополнительныеПараметры.ТипСтроки;
		ТекСтрокаКоллекция = ДеревоКатегорий.НайтиПоИдентификатору(Элементы.ДеревоКатегорий.ТекущаяСтрока);
		Если ТекСтрокаКоллекция <> Неопределено Тогда
			Если ТипСтроки = 1 Тогда
				// Добавляем в подчинение к текущей строке.
				СтрокаРодителя = ТекСтрокаКоллекция;
				ЭлементыСтроки = ТекСтрокаКоллекция.ПолучитьЭлементы();
				Элементы.ДеревоКатегорий.Развернуть(Элементы.ДеревоКатегорий.ТекущаяСтрока);
			Иначе
				// Добавляем в подчинение к строке родителя.
				СтрокаРодителя = ТекСтрокаКоллекция.ПолучитьРодителя();
				ЭлементыСтроки = СтрокаРодителя.ПолучитьЭлементы();
			КонецЕсли;
			Если МаркаУжеДобавлена(СтрокаРодителя.ПолучитьИдентификатор(), Результат) Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Марка уже добавлена в данной категории.'"));
			Иначе
				НоваяСтрока = ЭлементыСтроки.Добавить();
				НоваяСтрока.ВидКатегорияМарка = Результат;
				НоваяСтрока.Квота = 0;
				НоваяСтрока.ПроцентОтклонения = 0;
				НоваяСтрока.ИндексКартинки = 8;
				ОбновитьПроцентРодителя(НоваяСтрока.ПолучитьРодителя());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПередУдалениемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВопросОбУдаленииУжеЗадан = Истина;
		ТекущаяСтрока = Элементы.ДеревоКатегорий.ТекущиеДанные;
		Если ТекущаяСтрока <> Неопределено Тогда
			ЭтаФорма.Модифицированность = Истина;
			УменьшитьКвотуРодителяПослеУдаления(ТекущаяСтрока, ТекущаяСтрока.Квота);
			ТекущийРодитель = ТекущаяСтрока.ПолучитьРодителя();
			Если ТекущийРодитель = Неопределено Тогда
				ДеревоКатегорий.ПолучитьЭлементы().Удалить(ТекущаяСтрока);
			Иначе
				ТекущаяСтрока.ПроцентОтклонения = 0;
				ОбновитьПроцентРодителя(ТекущийРодитель, ТекущаяСтрока);
				ИндексРодителя = ТекущийРодитель.ПолучитьИдентификатор();
				КоличествоДопустимых = 1;
				УдалитьСтрокуРодителяПриНеобходимости(ИндексРодителя, КоличествоДопустимых);
				ЭлементыРодителя = ТекущийРодитель.ПолучитьЭлементы();
				Если ЭлементыРодителя.Количество() > 0 Тогда
					ЭлементыРодителя.Удалить(ТекущаяСтрока);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ВопросОбУдаленииУжеЗадан = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымДругогоФорматаПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
        
        // &ЗамерПроизводительности
        ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                 Истина, "Справочник.ФорматыМагазинов.Форма.ФормаВыбора.Открытие");
                 
        ОбработчикОповещения = Новый ОписаниеОповещения(
										"ЗаполнитьПоДаннымДругогоФорматаЗавершение",
										ЭтотОбъект,
										ДополнительныеПараметры);
		ОткрытьФорму(
			"Справочник.ФорматыМагазинов.ФормаВыбора",
			,
			ЭтаФорма,
			,
			,
			,
			ОбработчикОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымДругогоФорматаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЗаполнитьПоДаннымДругогоФорматаСервер(Результат);
		СформироватьДеревоПоТаблицеКатегорий();
		ОбновитьИтоговыеПоказателиСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПроцентОтклоненияВсемСтрокамЗавершениеВводаЧисла(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат > 100 Тогда
			ТекстПредупреждения = НСтр("ru = 'Отклонение не может превышать 100%'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		Иначе
			ЭлементыДерева = ДеревоКатегорий.ПолучитьЭлементы();
			УстановитьПроцентПодчиненным(ЭлементыДерева, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДеревоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВсеСтрокиДерева = ДеревоКатегорий.ПолучитьЭлементы();
		ВсеСтрокиДерева.Очистить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(
		Объект,
		КартинкаСостоянияДокумента,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		РазрешеноПроведение);
	
	НастроитьФормуПоДополнительнымПравам();
	
	СформироватьДеревоПоТаблицеКатегорий();
	ОбновитьИтоговыеПоказателиСервер();
	ОбновитьРекомендованныеПоказателиСервер();
	
	Если Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);		
		Если ЗначениеЗаполнено(Объект.ОбъектПланирования) Тогда
			ДоступностьПравила = ОбщегоНазначенияРТВызовСервера.ПроверитьДоступКРеквизиту(
									Объект.ОбъектПланирования,
									"ПравилоЦенообразования",
									"Справочник.ПравилаЦенообразования");
			Если НЕ ДоступностьПравила Тогда
				Объект.ОбъектПланирования = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);		
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(
		Объект,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение);
		
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности 
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
	                                            "Документ.УстановкаКвотАссортимента.ФормаДокумента.Запись",
                                                           Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);
	
	ПерезаполнитьКатегории();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(
		Объект,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение);
		
	// &ЗамерПроизводительности 
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьИтоговыеПоказателиСервер();
	ОбновитьРекомендованныеПоказателиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбъектПланированияПриИзменении(Элемент)
	ОбновитьРекомендованныеПоказателиСервер();
	ЕстьПлан=НаличиеПлана();
	Если ЕстьПлан Тогда
		Объект.ОбъектПланирования = Неопределено;
	КонецЕсли;
	
	ДоступностьПравила = ОбщегоНазначенияРТВызовСервера.ПроверитьДоступКРеквизиту(
							Объект.ОбъектПланирования,
							"ПравилоЦенообразования",
							"Справочник.ПравилаЦенообразования");
	
	Если НЕ ДоступностьПравила Тогда
		ТекстСообщения = НСтр("ru = 'Нет доступа к правилу ценообразования формата магазинов. Использование данного формата невозможно.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ОбъектПланирования");
		Объект.ОбъектПланирования = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаДействияПриИзменении(Элемент)
	Объект.ДатаНачалаДействия=НачалоМесяца(Объект.ДатаНачалаДействия);
	ЕстьПлан=НаличиеПлана();
	Если ЕстьПлан Тогда
		Объект.ДатаНачалаДействия=Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоКатегорий

&НаКлиенте
Процедура ДеревоКатегорийКвотаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ДеревоКатегорий.ТекущиеДанные;
	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	Если Родитель<>Неопределено Тогда
		ОбновитьКвотуРодителя(Родитель);
	КонецЕсли;
	ОбновитьИтоговыеПоказателиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПроцентОтклоненияПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ДеревоКатегорий.ТекущиеДанные;
	Если ТекущаяСтрока.ПроцентОтклонения > 100 Тогда
		ТекстПредупреждения = НСтр("ru = 'Отклонение не может превышать 100%'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
		ТекущаяСтрока.ПроцентОтклонения = 100;
	КонецЕсли;
	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		ОбновитьПроцентРодителя(Родитель);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПередНачаломИзменения(Элемент, Отказ)
	Если ТипЗнч(Элемент.ТекущиеДанные.ВидКатегорияМарка)=Тип("СправочникСсылка.Марки")
		ИЛИ ТипЗнч(Элемент.ТекущиеДанные.ВидКатегорияМарка)=Тип("Строка") Тогда
		Если Элемент.ТекущийЭлемент.Имя="ДеревоКатегорийВидКатегорияМарка" Тогда
			Отказ=Истина;
			Возврат;
		КонецЕсли;
	Иначе
		Отказ=Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущаяСтрока=Элемент.ТекущиеДанные;
	Если ТекущаяСтрока<>Неопределено Тогда
		Если ТипЗнч(ТекущаяСтрока.ВидКатегорияМарка)=Тип("СправочникСсылка.ТоварныеКатегории")
			ИЛИ ТипЗнч(ТекущаяСтрока.ВидКатегорияМарка)=Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
			Элементы.ДеревоКатегорий.Развернуть(ТекущаяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПередУдалением(Элемент, Отказ)
	
	Если Не ВопросОбУдаленииУжеЗадан Тогда
		ДополнительныеПараметры = Новый Структура;
		ОбработчикОповещения = Новый ОписаниеОповещения(
										"ДеревоКатегорийПередУдалениемЗавершение",
										ЭтотОбъект,
										ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, НСтр("ru = 'Удалить строку?'"), РежимДиалогаВопрос.ДаНет);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПослеУдаления(Элемент)
	ДеревоКатегорийПослеУдаленияСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДерево(Команда)
	
	ВсеСтрокиДерева = ДеревоКатегорий.ПолучитьЭлементы();
	Если ВсеСтрокиДерева.Количество() > 0 Тогда
		ДополнительныеПараметры = Новый Структура;
		ОбработчикОповещения = Новый ОписаниеОповещения(
										"ОчиститьДеревоЗавершение",
										ЭтотОбъект,
										ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, НСтр("ru = 'Удалить все строки?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьКатегориями(Команда)
	
	ЗаполнитьКатегориямиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымДругогоФормата(Команда)
	ДополнительныеПараметры = Новый Структура;
	Если Объект.ТоварныеКатегории.Количество()>0 Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения(
										"ЗаполнитьПоДаннымДругогоФорматаПродолжение",
										ЭтотОбъект,
										ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Табличная часть будет перезаполнена. Продолжить?'");
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьПоДаннымДругогоФорматаПродолжение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(Команда)
	ЭлементыДерева = ДеревоКатегорий.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		ИДСтроки = ЭлементДерева.ПолучитьИдентификатор();
		Элементы.ДеревоКатегорий.Развернуть(ИДСтроки, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПроцентОтклоненияВсемСтрокам(Команда)
	Процент = 0;
	ТекстЗаголовкаВводаЧисла = НСтр("ru = 'Введите % отклонения'");
	ЭлементыДерева = ДеревоКатегорий.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() = 0 Тогда
		СтрокаСообщения = НСтр("ru = 'Не заполнено ни одной строки в дереве категорий. Установка процента не возможна.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , "ДеревоКатегорий");
	Иначе
		ДополнительныеПараметры = Новый Структура;
		ОбработчикОповещения = Новый ОписаниеОповещения(
										"УстановитьПроцентОтклоненияВсемСтрокамЗавершениеВводаЧисла",
										ЭтотОбъект,
										ДополнительныеПараметры);
		ПоказатьВводЧисла(ОбработчикОповещения, Процент, ТекстЗаголовкаВводаЧисла, 3, 0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПроцентПодчиненным(ЭлементыДерева, Процент)
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		ЭлементДерева.ПроцентОтклонения = Процент;
		Подчиненные = ЭлементДерева.ПолучитьЭлементы();
		Если Подчиненные.Количество() > 0 Тогда
			УстановитьПроцентПодчиненным(Подчиненные, Процент);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Команда)
	ЭлементыДерева = ДеревоКатегорий.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		ИДСтроки = ЭлементДерева.ПолучитьИдентификатор();
		Элементы.ДеревоКатегорий.Свернуть(ИДСтроки);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМарку(Команда)
	ТекСтрока=Элементы.ДеревоКатегорий.ТекущиеДанные;
	Если ТекСтрока=Неопределено Тогда // Нет строк совсем
		ПоказатьПредупреждение(, НСтр("ru = 'Марку можно добавить только в подчинение какой-либо категории.'"));
	Иначе
		ТипСтроки = 0;
		Если ТипЗнч(ТекСтрока.ВидКатегорияМарка) = Тип("СправочникСсылка.ТоварныеКатегории") Тогда
			Если НЕ ТекСтрока.ЭтоГруппаКатегорий Тогда
				ТипСтроки = 1;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекСтрока.ВидКатегорияМарка) = Тип("СправочникСсылка.Марки")
			ИЛИ ТипЗнч(ТекСтрока.ВидКатегорияМарка) = Тип("Строка") Тогда
			ТипСтроки = 2;
		КонецЕсли;
        Если ТипСтроки > 0 Тогда
            // &ЗамерПроизводительности
            ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                     Истина, "Справочник.Марки.Форма.ФормаВыбора.Открытие");

			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ТипСтроки", ТипСтроки);
			ОбработчикОповещения = Новый ОписаниеОповещения("ДобавитьМаркуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму(
				"Справочник.Марки.ФормаВыбора",
				,
				ЭтаФорма,
				,
				,
				,
				ОбработчикОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Марку можно добавить только в подчинение какой-либо категории.'"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьКвотуРодителя(Родитель)
	
	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	КвотаИтог = 0;
	Для Каждого ЭлементРодителя Из ЭлементыРодителя Цикл
		КвотаИтог = КвотаИтог + ЭлементРодителя.Квота;
	КонецЦикла;
	Родитель.Квота = КвотаИтог;
	//
	РодительВыше = Родитель.ПолучитьРодителя();
	Если РодительВыше <> Неопределено Тогда
		ОбновитьКвотуРодителя(РодительВыше);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПроцентРодителя(Родитель, УдаляемаяСтрока = Неопределено)
	
	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	Если Родитель.Квота = 0 Тогда
		Родитель.ПроцентОтклонения = 0;
	Иначе
		Отклонение = 0;
		Для Каждого ЭлементРодителя Из ЭлементыРодителя Цикл
			Если УдаляемаяСтрока <> Неопределено Тогда
				Если ЭлементРодителя = УдаляемаяСтрока Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Отклонение = Отклонение + Окр(ЭлементРодителя.Квота * ЭлементРодителя.ПроцентОтклонения / 100, 2);
		КонецЦикла;
		Родитель.ПроцентОтклонения = Окр(Отклонение * 100 / Родитель.Квота, 0);
	КонецЕсли;
	//
	РодительВыше = Родитель.ПолучитьРодителя();
	Если РодительВыше <> Неопределено Тогда
		Если УдаляемаяСтрока <> Неопределено Тогда
			ЭлементыНиже = РодительВыше.ПолучитьЭлементы();
			Если ЭлементыНиже.Количество() > 1
				ИЛИ ЭлементыРодителя.Количество() > 1 Тогда
				ОбновитьПроцентРодителя(РодительВыше);
			Иначе
				// Эта строка также будет удаляться.
				ОбновитьПроцентРодителя(РодительВыше, Родитель);
			КонецЕсли;
		Иначе
			ОбновитьПроцентРодителя(РодительВыше);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НаличиеПлана()
	ЕстьПлан = Ложь;
	Если ЗначениеЗаполнено(Объект.ОбъектПланирования) И ЗначениеЗаполнено(Объект.ДатаНачалаДействия) Тогда
		ЕстьПлан = НаличиеПланаСервер();
		Если ЕстьПлан Тогда
			ТекстПредупреждения = НСтр("ru = 'На %1 для выбранного формата уже существует документ установки квот.'")
			+ Символы.ПС + НСтр("ru = 'Установка квот может производиться не чаще 1 раза в месяц'")
			+ Символы.ПС + НСтр("ru = 'Выберите другую дату или формат магазинов'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ТекстПредупреждения,
									Формат(Объект.ДатаНачалаДействия, "ДФ = dd.MM.yyyy"));
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	Возврат ЕстьПлан;
КонецФункции

&НаКлиенте
Процедура УменьшитьКвотуРодителяПослеУдаления(ТекущаяСтрока, ВычитаемаяКвота)
	ТекущийРодитель = ТекущаяСтрока.ПолучитьРодителя();
	Если ТекущийРодитель <> Неопределено Тогда
		ТекущийРодитель.Квота=ТекущийРодитель.Квота - ВычитаемаяКвота;
		УменьшитьКвотуРодителяПослеУдаления(ТекущийРодитель, ВычитаемаяКвота);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымДругогоФорматаСервер(ВыбранныйФорматМагазина)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Квоты.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	Квоты.Марка КАК Марка,
	|	Квоты.Квота КАК Квота,
	|	Квоты.ПроцентОтклонения КАК ПроцентОтклонения
	|ИЗ
	|	РегистрСведений.КвотыАссортимента.СрезПоследних(&НаДату,
	|						ОбъектПланирования = &ФорматМагазина) КАК Квоты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФорматыМагазинов КАК Форматы
	|		ПО Квоты.ОбъектПланирования = Форматы.Ссылка
	|			И (Квоты.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(К.Период)
	|				ИЗ
	|					РегистрСведений.КвотыАссортимента КАК К
	|				ГДЕ
	|					К.Период <= &НаДату
	|					И К.ОбъектПланирования = &ФорматМагазина))
	|");
	Запрос.УстановитьПараметр("ФорматМагазина", ВыбранныйФорматМагазина);
	Запрос.УстановитьПараметр("НаДату", Объект.Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	ТоварныеКатегорииОбъекта = Объект.ТоварныеКатегории;
	ТоварныеКатегорииОбъекта.Очистить();
	Пока Выборка.Следующий() Цикл
		НоваяСтрокаКатегорий = ТоварныеКатегорииОбъекта.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаКатегорий,Выборка);
	КонецЦикла;
	Элементы.ДеревоКатегорий.НачальноеОтображениеДерева=НачальноеОтображениеДерева.НеРаскрывать;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКатегориямиСервер()
	ПерезаполнитьКатегории();
	МенеджерВТ=Новый МенеджерВременныхТаблиц;
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	ТаблицаКатегории.ТоварнаяКатегория,
	                    |	ТаблицаКатегории.Марка,
	                    |	ТаблицаКатегории.Квота,
	                    |	ТаблицаКатегории.ПроцентОтклонения
	                    |ПОМЕСТИТЬ втДокументКатегории
	                    |ИЗ
	                    |	&ТаблицаКатегории КАК ТаблицаКатегории
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	СправочникКатегории.Владелец КАК ВидНоменклатуры,
	                    |	СправочникКатегории.Владелец.Наименование КАК НаименованиеВидаНоменклатуры,
	                    |	СправочникКатегории.Ссылка КАК ТоварнаяКатегория,
	                    |	СправочникКатегории.Наименование КАК НаименованиеКатегории,
	                    |	СправочникКатегории.ЭтоГруппа КАК ЭтоГруппаКатегорий,
	                    |	ЕСТЬNULL(ДокументКатегории.Марка,ЗНАЧЕНИЕ(Справочник.Марки.ПустаяСсылка)) КАК Марка,
	                    |	ЕСТЬNULL(ДокументКатегории.Марка.Наименование,"""") КАК НаименованиеМарки,
	                    |	ЕСТЬNULL(ДокументКатегории.Квота, 0) КАК Квота,
	                    |	ЕСТЬNULL(ДокументКатегории.ПроцентОтклонения, 0) КАК ПроцентОтклонения
	                    |ИЗ
	                    |	Справочник.ТоварныеКатегории КАК СправочникКатегории
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ втДокументКатегории КАК ДокументКатегории
	                    |		ПО СправочникКатегории.Ссылка = ДокументКатегории.ТоварнаяКатегория
	                    |ГДЕ
	                    |	НЕ СправочникКатегории.ЭтоГруппа
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	НаименованиеВидаНоменклатуры,
	                    |	НаименованиеКатегории,
	                    |	НаименованиеМарки
	                    |ИТОГИ
	                    |	СУММА(Квота),
	                    |	0 КАК ПроцентОтклонения
	                    |ПО
	                    |	ВидНоменклатуры ИЕРАРХИЯ,
	                    |	ТоварнаяКатегория ИЕРАРХИЯ");
	Запрос.МенеджерВременныхТаблиц=МенеджерВТ;
	Запрос.УстановитьПараметр("ТаблицаКатегории",Объект.ТоварныеКатегории.Выгрузить());
	РезультатПакета=Запрос.ВыполнитьПакет();
	ИндексРезультата=РезультатПакета.Количество()-1;
	РезультатЗапроса=РезультатПакета[ИндексРезультата];
	ЗаполнитьДеревоПоРезультатуЗапроса(РезультатЗапроса);
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоговыеПоказателиСервер()
	ДеревоОбъект=РеквизитФормыВЗначение("ДеревоКатегорий",Тип("ДеревоЗначений"));
	КвотаВсего=ДеревоОбъект.Строки.Итог("Квота");
	Если КвотаВсего = КвотаРекомендованная Тогда
		Элементы.КвотаВсего.ЦветТекста = Новый Цвет(0,128,0);
		Элементы.КвотаРекомендованная.ЦветТекста = Новый Цвет(0,128,0);
	Иначе
		Элементы.КвотаВсего.ЦветТекста = Новый Цвет(22,39,121);
		Элементы.КвотаРекомендованная.ЦветТекста = Новый Цвет(22,39,121);
	КонецЕсли;
	ДеревоОбъект=Неопределено;
КонецПроцедуры

&НаСервере
Процедура ОбновитьРекомендованныеПоказателиСервер()
	КвотаРекомендованная=Объект.ОбъектПланирования.КоличествоАссортиментныхПозиций;
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам();
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
																				 
	ДоступностьПравила = ОбщегоНазначенияРТВызовСервера.ПроверитьДоступКРеквизиту(
							Объект.ОбъектПланирования,
							"ПравилоЦенообразования",
							"Справочник.ПравилаЦенообразования");
	Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ЭтаФорма.ТолькоПросмотр = НЕ ДоступностьПравила;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоПоТаблицеКатегорий()
	ТаблицаИсточник=Объект.ТоварныеКатегории.Выгрузить();
	МенеджерВТ=Новый МенеджерВременныхТаблиц;
	Запрос=Новый Запрос("ВЫБРАТЬ
	|	ТаблицаКатегории.ТоварнаяКатегория,
	|	ТаблицаКатегории.Марка,
	|	ТаблицаКатегории.Квота,
	|	ТаблицаКатегории.ПроцентОтклонения
	|ПОМЕСТИТЬ втДокументКатегории
	|ИЗ
	|	&ТаблицаИсточник КАК ТаблицаКатегории
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварныеКатегории.ТоварнаяКатегория.Владелец КАК ВидНоменклатуры,
	|	ТоварныеКатегории.ТоварнаяКатегория.Владелец.Наименование КАК НаименованиеВидаНоменклатуры,
	|	ТоварныеКатегории.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	ТоварныеКатегории.ТоварнаяКатегория.Наименование КАК НаименованиеКатегории,
	|	ТоварныеКатегории.ТоварнаяКатегория.ЭтоГруппа КАК ЭтоГруппаКатегорий,
	|	ТоварныеКатегории.Марка КАК Марка,
	|	ТоварныеКатегории.Марка.Наименование КАК НаименованиеМарки,
	|	ТоварныеКатегории.Квота КАК Квота,
	|	ТоварныеКатегории.ПроцентОтклонения КАК ПроцентОтклонения
	|ИЗ
	|	втДокументКатегории КАК ТоварныеКатегории
	|ГДЕ
	|	НЕ ТоварныеКатегории.ТоварнаяКатегория.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеВидаНоменклатуры,
	|	НаименованиеКатегории,
	|	НаименованиеМарки
	|ИТОГИ
	|	СУММА(Квота),
	|	СРЕДНЕЕ(ПроцентОтклонения) КАК ПроцентОтклонения
	|ПО
	|	ВидНоменклатуры ИЕРАРХИЯ,
	|	ТоварнаяКатегория ИЕРАРХИЯ");
	Запрос.МенеджерВременныхТаблиц=МенеджерВТ;
	Запрос.УстановитьПараметр("ТаблицаИсточник",ТаблицаИсточник);
	
	РезультатПакета=Запрос.ВыполнитьПакет();
	ИндексРезультата=РезультатПакета.Количество()-1;
	РезультатЗапроса=РезультатПакета[ИндексРезультата];
	//
	ЗаполнитьДеревоПоРезультатуЗапроса(РезультатЗапроса);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПоРезультатуЗапроса(РезультатЗапроса)
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоКатегорий",Тип("ДеревоЗначений"));
	ДеревоОбъект.Строки.Очистить();
	//
	ДеревоРезультат = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗаполнитьПодчиненныеСтроки(ДеревоОбъект, ДеревоРезультат);
	ЗначениеВРеквизитФормы(ДеревоОбъект,"ДеревоКатегорий");
	Элементы.ДеревоКатегорий.НачальноеОтображениеДерева=НачальноеОтображениеДерева.НеРаскрывать;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодчиненныеСтроки(тПриемник, тИсточник)
	
	ЭтоИтог = Истина;
	Для Каждого СтрокаИсточника Из тИсточник.Строки Цикл
		СтрокаПриемника = тПриемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
		Если СтрокаИсточника.Марка <> Null Тогда
			Если ЗначениеЗаполнено(СтрокаИсточника.Марка) Тогда
				СтрокаПриемника.ВидКатегорияМарка = СтрокаИсточника.Марка;
			Иначе
				СтрокаПриемника.ВидКатегорияМарка = НСтр("ru = 'Прочие марки'");
			КонецЕсли;
			СтрокаПриемника.ЭтоИтог = Ложь;
			ЭтоИтог = Ложь;
			СтрокаПриемника.ИндексКартинки = 8;
		ИначеЕсли СтрокаИсточника.ТоварнаяКатегория <> Null Тогда
			СтрокаПриемника.ВидКатегорияМарка = СтрокаИсточника.ТоварнаяКатегория;
			СтрокаПриемника.ЭтоИтог = Истина;
			Если СтрокаИсточника.ЭтоГруппаКатегорий Тогда
				СтрокаПриемника.ИндексКартинки = 0;
			Иначе
				СтрокаПриемника.ИндексКартинки = 3;
			КонецЕсли;
		Иначе
			СтрокаПриемника.ВидКатегорияМарка = СтрокаИсточника.ВидНоменклатуры;
			СтрокаПриемника.ЭтоИтог = Истина;
			СтрокаПриемника.ИндексКартинки = 2;
		КонецЕсли;
		
		// И рекурсивно подчиненные
		ЗаполнитьПодчиненныеСтроки(СтрокаПриемника, СтрокаИсточника);
	КонецЦикла;
	
	Если НЕ ЭтоИтог Тогда
		Если СтрокаПриемника.Родитель <> Неопределено Тогда
			ОбновитьПроцентОтклонения(СтрокаПриемника.Родитель);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПроцентОтклонения(СтрокаДерева)
	
	Если СтрокаДерева.Квота = 0 Тогда
		СтрокаДерева.ПроцентОтклонения = 0;
	Иначе
		Отклонение = 0;
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
			Отклонение = Отклонение + Окр(ПодчиненнаяСтрока.Квота * ПодчиненнаяСтрока.ПроцентОтклонения / 100, 2);
		КонецЦикла;
		СтрокаДерева.ПроцентОтклонения = Окр(Отклонение * 100 / СтрокаДерева.Квота, 0);
	КонецЕсли;
	// И рекурсивно родителя, если есть
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		ОбновитьПроцентОтклонения(СтрокаДерева.Родитель);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьКатегории()
	Объект.ТоварныеКатегории.Очистить();
	ОбработатьПодчиненныеСтрокиПриПерезаполнении(ДеревоКатегорий);
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодчиненныеСтрокиПриПерезаполнении(ЭлементДереваРодитель)
	ЭлементыДерева=ЭлементДереваРодитель.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.ЭтоИтог Тогда
			ОбработатьПодчиненныеСтрокиПриПерезаполнении(ЭлементДерева);
		Иначе
			ДобавитьСтрокуВТаблицуКатегорийПриПерезаполнении(ЭлементДерева);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуВТаблицуКатегорийПриПерезаполнении(ЭлементДерева)
	Родитель=ЭлементДерева.ПолучитьРодителя();
	Если Родитель<>Неопределено Тогда
		ТекущаяКатегория = Родитель.ВидКатегорияМарка;
		НоваяСтрока = Объект.ТоварныеКатегории.Добавить();
		НоваяСтрока.ТоварнаяКатегория = ТекущаяКатегория;
		//
		НоваяСтрока.Марка				= ЭлементДерева.ВидКатегорияМарка;
		НоваяСтрока.Квота				= ЭлементДерева.Квота;
		НоваяСтрока.ПроцентОтклонения	= ЭлементДерева.ПроцентОтклонения;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДеревоКатегорийПослеУдаленияСервер()
	ПерезаполнитьКатегории();
	ОбновитьИтоговыеПоказателиСервер();
КонецПроцедуры

&НаСервере
Функция НаличиеПланаСервер()
	
	СуществуетПлан = Документы.УстановкаКвотАссортимента.СуществуетПлан(
						Объект.ОбъектПланирования,
						Объект.ДатаНачалаДействия,
						Объект.Ссылка);
	Возврат СуществуетПлан;
	
КонецФункции

&НаКлиенте
Процедура УдалитьСтрокуРодителяПриНеобходимости(ИндексТекущий, КоличествоДопустимых)
	ТекущийРодитель = ДеревоКатегорий.НайтиПоИдентификатору(ИндексТекущий);
	Если ТекущийРодитель <> Неопределено Тогда
		ТекущиеПодчиненныеЭлементы = ТекущийРодитель.ПолучитьЭлементы();
		Если ТекущиеПодчиненныеЭлементы.Количество() = КоличествоДопустимых Тогда
			ТекущийРодительРодителя = ТекущийРодитель.ПолучитьРодителя();
			Если ТекущийРодительРодителя = Неопределено Тогда
				ПодчиненныеРодителяРодителя = ДеревоКатегорий.ПолучитьЭлементы();
				ПодчиненныеРодителяРодителя.Удалить(ТекущийРодитель);
				КоличествоДопустимых = 0;
			Иначе
				ПодчиненныеРодителяРодителя = ТекущийРодительРодителя.ПолучитьЭлементы();
				ПодчиненныеРодителяРодителя.Удалить(ТекущийРодитель);
				КоличествоДопустимых = 0;
				ИндексРодителяРодителя = ТекущийРодительРодителя.ПолучитьИдентификатор();
				УдалитьСтрокуРодителяПриНеобходимости(ИндексРодителяРодителя, КоличествоДопустимых);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция МаркаУжеДобавлена(СтрокаРодителя, ВыбраннаяМарка)
	УжеДобавлена = Ложь;
	ПодчиненныеСтроки = ДеревоКатегорий.НайтиПоИдентификатору(СтрокаРодителя).ПолучитьЭлементы();
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		Если ПодчиненнаяСтрока.ВидКатегорияМарка = ВыбраннаяМарка Тогда
			УжеДобавлена = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат УжеДобавлена;
КонецФункции

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

#КонецОбласти

