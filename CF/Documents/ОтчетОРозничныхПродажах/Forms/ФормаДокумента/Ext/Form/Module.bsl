#Область ПеременныеМодуля

&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; // Используется для передачи текущей строки в обработчик ожидания.

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	ИдентификаторСтроки = ОбработатьСтрокуДанныхПоКодуСервер(СтрокаРезультата, СтруктураРезультат.ДанныеПО);
	
	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	Если ИмяТаблицыВыборки = "Товары"
		ИЛИ ИмяТаблицыВыборки = "ВозвращенныеТовары" Тогда
		МассивДанных = ПодключаемоеОборудованиеРТВызовСервера.СвернутьДанныеПоНоменклатуреИзТСДСервер(СтруктураПараметров);
	Иначе
		МассивДанных = СтруктураПараметров.ЗначенияПоиска;
	КонецЕсли;
	ОбновитьКоличество = СтруктураПараметров.ОбновитьКоличество;
	
	Для Каждого СтрокаМассива Из МассивДанных Цикл
		
		Если ОбновитьКоличество Тогда
			СтрокаМассива.Вставить("ОбновитьКоличество", Истина);
		КонецЕсли;
		
		ОбработатьСтрокуДанныхПоКодуСервер(СтрокаМассива, СтрокаМассива.Штрихкод);
		
		Если СтрокаМассива.Свойство("ТекстПредупреждения") Тогда
			Если СтруктураПараметров.Свойство("ТекстПредупреждения") Тогда
				СтруктураПараметров.ТекстПредупреждения.Добавить(СтрокаМассива.ТекстПредупреждения);
			Иначе
				МассивПредупреждений = Новый Массив;
				МассивПредупреждений.Добавить(СтрокаМассива.ТекстПредупреждения);
				СтруктураПараметров.Вставить("ТекстПредупреждения", МассивПредупреждений);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	
	ДобавленаСтрока = Ложь;
	ТекущаяСтрока = ПодключаемоеОборудованиеРТВызовСервера.ИнициализацияСтрокиТоваров(ЭтотОбъект, СтруктураПараметров, ДобавленаСтрока, ИмяТаблицыВыборки);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	Если ДобавленаСтрока Тогда
		СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДС(Объект));
		СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", ОбработкаТабличнойЧастиТоварыСервер.СтруктураЗаполненияСкладаПродажиВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	КонецЕсли;
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ЗавершениеОбработкиСтрокиТоваров(ЭтотОбъект, ТекущаяСтрока, СтруктураДействий, ИмяТаблицыВыборки);
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ДобавитьНайденныеСерийныеНомера(ЭтотОбъект, СтруктураНомера);
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьСозданиеИВыборНовойХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект[ДополнительныеПараметры.ИмяТЧ].НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ТекущаяСтрока.Характеристика = Результат;
	
	Если ДополнительныеПараметры.ИмяТЧ = "Товары" Тогда
		ТоварыХарактеристикаПриИзменении(Неопределено);
	Иначе
		ВозвращенныеТоварыХарактеристикаПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОповещениеПоискаПоНаименованию(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ЗавершитьОбработкуДанныхПоКодуКлиент(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодбораПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры) Экспорт
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПослеВводаНомеровПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры);
	
	ПересчетКоличества = ДополнительныеПараметры.ПересчетКоличества;
	
	Если ПересчетКоличества Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУказаниеСерий(ЗначениеВозврата, ПараметрыФормыУказанияСерий) Экспорт
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("ЗначениеВозврата", ЗначениеВозврата);
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	ИспользоватьКомиссионнуюТорговлю = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
	ИспользоватьУчетИмпортныхТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьУчетИмпортныхТоваров");

	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект, КартинкаСостоянияДокумента, Элементы.КартинкаСостоянияДокумента.Подсказка, РазрешеноПроведение);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ОтчетОРозничныхПродажах.ПараметрыУказанияСерий(Объект));
	
	БезНДС = НСтр("ru = 'Без НДС'");
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.ВозвращенныеТовары);
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.ВозвращенныеТовары);
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
		УстановитьДоступностьЦенаВключаетНДС();
		ОбновитьСтатусГИСМ();
	КонецЕсли;
	
	РабочееМесто = Объект.КассаККМ.РабочееМесто;
	
	МассивКомандПО = Новый Массив;
	МассивКомандПО.Добавить("ТоварыВыгрузитьДанныеВТСД");
	МассивКомандПО.Добавить("ТоварыЗагрузитьДанныеИзТСД");
	МассивКомандПО.Добавить("ВозвращенныеТоварыВыгрузитьДанныеВТСД");
	МассивКомандПО.Добавить("ВозвращенныеТоварыЗагрузитьДанныеИзТСД");
	МассивКомандПО.Добавить("ОплатаБонуснымиБалламиЗагрузитьДанныеИзТСД");
	МассивКомандПО.Добавить("ПогашениеПодарочныхСертификатовЗагрузитьДанныеИзТСД");
	МассивКомандПО.Добавить("БонусныеБаллыКНачислениюЗагрузитьДанныеИзТСД");
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект, МассивКомандПО);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС);
	
	ОбновитьСуммыПодвалаСервер();
	
	УстановитьПараметрыВыбораЭлементовФормы();
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	НастроитьФормуПоДополнительнымПравам();
	
	УстановитьТекущуюСтраницуСуммПодвала();
	
	Если ЗначениеЗаполнено(Объект.КассаККМ)
		И Объект.Проведен Тогда
		Элементы.КассаККМ.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов();
	
	Если Параметры.Свойство("ТекущийЭлемент") Тогда
	
		ТекущийЭлементПриСоздании = Параметры.ТекущийЭлемент;
		
		Если Параметры.Свойство("ТекущаяСтрока") Тогда
			ТекущийРеквизитОбъектаПриСоздании = Параметры.ТекущийРеквизитОбъекта;
			ТекущаяСтрокаПриСоздании          = Параметры.ТекущаяСтрока;
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяТаблицыВыборки = ИмяТаблицыВыборки(Элементы.Страницы.ТекущаяСтраница.Имя);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
	НастроитьПолеКассоваяСмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	Если ЗначениеЗаполнено(ТекущийЭлементПриСоздании) Тогда
		
		ЭтотОбъект.ТекущийЭлемент = Элементы[ТекущийЭлементПриСоздании];
		Если ЗначениеЗаполнено(ТекущаяСтрокаПриСоздании) Тогда
			СтрокиПоиска = Объект[ТекущийРеквизитОбъектаПриСоздании].НайтиСтроки(ТекущаяСтрокаПриСоздании);
			
			Если СтрокиПоиска.Количество() > 0  Тогда
				Элементы[ТекущийЭлементПриСоздании].ТекущаяСтрока = СтрокиПоиска[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение , ИсточникВыбора.ИмяТабличнойЧасти);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен()
		И ЗначениеЗаполнено(ИмяТаблицыВыборки) Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	УстановитьТекущуюСтраницуСуммПодвала();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.ВозвращенныеТовары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.ВозвращенныеТовары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС);
	ОбновитьСуммыПодвалаСервер();
	
	ЗаполнитьРеквизитыПогашенияПодарочныхСертификатов();
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	УстановитьДоступностьЦенаВключаетНДС();
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	// ИнтеграцияГИСМ
	ОбновитьСтатусГИСМ();
	// Конец ИнтеграцияГИСМ
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.ВозвращенныеТовары);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.ВозвращенныеТовары);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС);
	
	ОбновитьСуммыПодвалаСервер();
	
	ЗаполнитьРеквизитыПогашенияПодарочныхСертификатов();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	// ИнтеграцияГИСМ
	ОбновитьСтатусГИСМ();
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);

	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Или ИмяСобытия = "ВставкаСтрокИзБуфераОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбмена();
	КонецЕсли;
	
	// ИнтеграцияГИСМ
	Если ИмяСобытия = "ИзменениеСостоянияГИСМ"
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		ОбновитьСтатусГИСМ();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменГИСМ"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусГИСМФормахВДокументах)) Тогда
		
		ОбновитьСтатусГИСМ();
		
	КонецЕсли;
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
							"Документ.ОтчетОРозничныхПродажах.ФормаДокумента.Запись",
															Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	ПриИзмененииКассаККМСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьНДСПриИзменении(Элемент)
	
	ПриИзмененииУчитыватьНДССервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, , СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ВозвращенныеТовары, , СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС);
	ОбновитьСуммыПодвалаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ИмяТаблицыВыборки = ИмяТаблицыВыборки(ТекущаяСтраница.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтатусГИСМОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Отчет о розничных продажах был изменен. Записать?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Отчет о розничных продажах не записан. Записать?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать();
	КонецЕсли;
	
	Если Не Модифицированность И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
		
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные= Неопределено И (ТекущиеДанные.ИспользоватьСерийныеНомера ИЛИ НЕ ТекущиеДанные.СтатусУказанияСерий = 0) Тогда
			Отказ = Истина;
			Если ТекущиеДанные.ИспользоватьСерийныеНомера Тогда
				ВвестиПодарочныеСертификаты();
			Иначе
				УказатьСерии("КоличествоУпаковок");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыУпаковка 
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕдиницаИзмерения Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные= Неопределено И НЕ ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
			Отказ = Истина;
			УказатьСерии("Упаковка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	УдаляемыйКлючСвязи = Элементы.Товары.ТекущиеДанные.КлючСвязи;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		ТекущаяСтрока                          = Элементы.Товары.ТекущиеДанные;
		ТекущаяСтрока.КлючСвязиСерийныхНомеров = 0;
		
		Если ТекущаяСтрока.ИспользоватьСерийныеНомера Тогда
			ТекущаяСтрока.КоличествоУпаковок = 0;
			ТекущаяСтрока.Количество = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);
	
	РедактированиеТЧТовары = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьСуммыПодвалаВыручкиКлиент();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущиеДанные);
	
	РедактированиеТЧТовары = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ОбновитьСуммыПодвалаВыручкиКлиент();
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	УдалитьНесвязанныеСерийныеНомера();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
	ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"   , ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДС(Объект));
	
	СтруктураПараметровДействия = Новый Структура;
	СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
	СтруктураПараметровДействия.Вставить("РабочееМесто", РабочееМесто);
	СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДействия);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммыПодвалаВыручкиКлиент();
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммыПодвалаВыручкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	КонецЕсли;

	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммыПодвалаВыручкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ПриИзмененииТоварыКоличестваУпаковок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
			
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммыПодвалаВыручкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммыПодвалаВыручкиКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВсегоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураПересчета = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСПоСуммеСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьСуммуПоСуммеСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках", СтруктураПересчета);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьСуммыПодвалаВыручкиКлиент();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммыПодвалаВыручкиКлиент();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДС(Объект));
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммыПодвалаВыручкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если РедактированиеТЧТовары Тогда
		Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок Тогда
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			Если НЕ ТекущиеДанные = Неопределено И (ТекущиеДанные.ИспользоватьСерийныеНомера ИЛИ НЕ ТекущиеДанные.СтатусУказанияСерий = 0) Тогда
				Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				Если ТекущиеДанные.ИспользоватьСерийныеНомера Тогда
					ВвестиПодарочныеСертификаты();
				Иначе
					УказатьСерии("КоличествоУпаковок");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыУпаковка 
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕдиницаИзмерения Тогда
			
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			
			Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
				Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				УказатьСерии("Упаковка");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвращенныеТовары

&НаКлиенте
Процедура ВозвращенныеТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращенныеТовары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ЗаполнитьСтрануПроисхождения");
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"   , ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДС(Объект));
	
	СтруктураПараметровДействия = Новый Структура;
	СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
	СтруктураПараметровДействия.Вставить("РабочееМесто", РабочееМесто);
	СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДействия);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ВозвращенныеТовары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммыПодвалаВозвратКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращенныеТовары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ВозвращенныеТовары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммыПодвалаВозвратКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращенныеТовары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ВозвращенныеТовары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммыПодвалаВозвратКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.ВозвращенныеТовары.ТекущиеДанные);
	
КонецПроцедуры


&НаКлиенте
Процедура ВозвращенныеТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.ВозвращенныеТовары.ТекущиеДанные, "ВозвращенныеТовары");
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.ВозвращенныеТовары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращенныеТовары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ВозвращенныеТовары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммыПодвалаВозвратКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращенныеТовары.ТекущиеДанные;
			
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ВозвращенныеТовары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммыПодвалаВозвратКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращенныеТовары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ВозвращенныеТовары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммыПодвалаВозвратКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыСуммаВсегоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращенныеТовары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураПересчета = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСПоСуммеСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьСуммуПоСуммеСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках", СтруктураПересчета);
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ВозвращенныеТовары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьСуммыПодвалаВозвратКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыСтавкаНДСПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.ВозвращенныеТовары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ВозвращенныеТовары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммыПодвалаВозвратКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыСкладПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращенныеТовары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДС(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ВозвращенныеТовары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммыПодвалаВозвратКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьСуммыПодвалаВозвратКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыПослеУдаления(Элемент)
	
	ОбновитьСуммыПодвалаВозвратКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплатаПлатежнымиКартами

&НаКлиенте
Процедура ОплатаПлатежнымиКартамиВидОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОплатаПлатежнымиКартами.ТекущиеДанные;
	
	ТекущаяСтрока.ПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииДляПлатежнойКарты(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты);
	
	ПересчитатьСуммуКомиссии(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПлатежнымиКартамиСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОплатаПлатежнымиКартами.ТекущиеДанные;
	
	ПересчитатьСуммуКомиссии(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПлатежнымиКартамиПроцентКомиссииПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОплатаПлатежнымиКартами.ТекущиеДанные;
	
	ПересчитатьСуммуКомиссии(ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплатаБанковскимиКредитами

&НаКлиенте
Процедура ОплатаБанковскимиКредитамиВидОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОплатаБанковскимиКредитами.ТекущиеДанные;
	
	ЭквайрингВызовСервера.ЗаполнитьБанкиПроцентКомиссии(ТекущаяСтрока.ВидОплаты, ТекущаяСтрока.БанкКредитор, ТекущаяСтрока.ПроцентБанковскойКомиссии);
	
	ПересчитатьСуммуБанковскойКомиссии(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаБанковскимиКредитамиСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОплатаБанковскимиКредитами.ТекущиеДанные;
	
	ПересчитатьСуммуБанковскойКомиссии(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаБанковскимиКредитамиПроцентБанковскойКомиссииПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОплатаБанковскимиКредитами.ТекущиеДанные;
	
	ПересчитатьСуммуБанковскойКомиссии(ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродажиПоДисконтнымКартам

&НаКлиенте
Процедура ПродажиПоДисконтнымКартамДисконтнаяКартаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПродажиПоДисконтнымКартам.ТекущиеДанные;
	
	ТекущаяСтрока.ВладелецДисконтнойКарты = ВладелецДисконтнойКарты(ТекущаяСтрока.ДисконтнаяКарта)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПогашениеПодарочныхСертификатов

&НаКлиенте
Процедура ПогашениеПодарочныхСертификатовПодарочныйСертификатПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПогашениеПодарочныхСертификатов.ТекущиеДанные;
	
	ЗаполнитьРеквизитыСтрокиПогашенияПодарочныхСертификатов(ТекущаяСтрока.ПодарочныйСертификат, ТекущаяСтрока.ИспользоватьСерийныеНомера, ТекущаяСтрока.Номинал);
	ТекущаяСтрока.Количество = 1;
	
	РассчитатьСуммуНоминала(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПогашениеПодарочныхСертификатовКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПогашениеПодарочныхСертификатов.ТекущиеДанные;
	
	РассчитатьСуммуНоминала(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПогашениеПодарочныхСертификатовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		ТекущиеДанные = Элементы.ПогашениеПодарочныхСертификатов.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.СерийныйНомер) Тогда
			ТекущиеДанные.СерийныйНомер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочаяВыручка

&НаКлиенте
Процедура ПрочаяВыручкаХозяйственнаяОперацияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПрочаяВыручка.ТекущиеДанные;
	
	Если ТекущаяСтрока.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту") Тогда
		ТекущаяСтрока.СуммаПоступления = 0;
	Иначе
		ТекущаяСтрока.СуммаВозврата = 0;
	КонецЕсли;
	ОбновитьСуммыПодвалаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочаяВыручкаСуммаПоступленияПриИзменении(Элемент)
	
	ОбновитьСуммыПодвалаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочаяВыручкаСуммаВозвратаПриИзменении(Элемент)
	
	ОбновитьСуммыПодвалаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочаяВыручкаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьСуммыПодвалаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочаяВыручкаПослеУдаления(Элемент)
	
	ОбновитьСуммыПодвалаКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	Если ЗначениеЗаполнено(ИмяТаблицыВыборки) Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", ИмяТаблицыВыборки);
		ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	Если ЗначениеЗаполнено(ИмяТаблицыВыборки) Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", ИмяТаблицыВыборки);
		Если ИмяТаблицыВыборки <> "Товары"
			И ИмяТаблицыВыборки <> "ВозвращенныеТовары" Тогда
			ДополнительныеПараметры.Вставить("ЕстьКоличество", Ложь);
		КонецЕсли;
		ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	Если ЗначениеЗаполнено(ИмяТаблицыВыборки) Тогда
		ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	Если ЗначениеЗаполнено(ИмяТаблицыВыборки) Тогда
		ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоискПоНаименованию(Команда)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Магазин",Объект.Магазин);
	РаботаСПравиламиИменованияКлиент.ПоискПоНаименованию(ЭтаФорма,ПараметрыПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'отчет о розничных продажах'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	ПараметрыФормы.Вставить("РежимПодбораСУчетомМинимальныхЦен", Истина);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если НЕ ЕстьПравоИзменятьЦену() Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращенныеТоварыОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'отчет о розничных продажах'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти", "ВозвращенныеТовары");
	ПараметрыФормы.Вставить("РежимПодбораБезСертификатов", Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуВвестиСерийныеНомера", Истина);	
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если НЕ ЕстьПравоИзменятьЦену() Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	РазвернутьСвернутьТЧНаСервере();
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	ПолучитьСтрокиИзБуфераОбмена();
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	ОбновитьСуммыПодвалаВыручкиКлиент();	
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере("Товары");
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	ПоложениеКоманднойПанели   = ?(ВидимостьЭлементов, ПоложениеКоманднойПанелиФормы.Авто, ПоложениеКоманднойПанелиФормы.Нет);
	Элементы.Шапка.Видимость   = ВидимостьЭлементов;
	Элементы.Шапка.Видимость   = ВидимостьЭлементов;
	Элементы.РазвернутьСвернутьТЧ.Картинка = ?(ВидимостьЭлементов, БиблиотекаКартинок.РазвернутьТабличнуюЧасть, БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов()
	
	Если НЕ ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры И НЕ Справочники.Номенклатура.ИспользуютсяПодарочныеСертификаты() Тогда
		Элементы.ТоварыСтатусыСерийИПодарочныхСертификатов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПодарочныеСертификаты()
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиСерийныеНомераНоменклатурыВТЧ(ЭтотОбъект,
		Объект.СерийныеНомера,
		Элементы.Товары.ТекущиеДанные);
		
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(ТекущееПоле)
	
	ВводСерийРазрешен = Истина;
	ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий, ВводСерийРазрешен);
	Если НЕ ВводСерийРазрешен Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	ПараметрыФормыУказанияСерий.Вставить("ТекущееПоле", ТекущееПоле);
	ПараметрыФормыУказанияСерий.Вставить("КоличествоЕдиницДоПересчета");
	
	ОбработчикУказанияСерий = Новый ОписаниеОповещения("ОбработатьУказаниеСерий", ЭтотОбъект, ПараметрыФормыУказанияСерий);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, ПараметрыФормыУказанияСерий, ЭтотОбъект,,,, ОбработчикУказанияСерий, РежимБлокировки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПогашенияПодарочныхСертификатов()
	
	Если Объект.ПогашениеПодарочныхСертификатов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ПогашениеПодарочныхСертификатов.ПодарочныйСертификат КАК Справочник.Номенклатура) КАК ПодарочныйСертификат,
	|	ПогашениеПодарочныхСертификатов.Количество
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	&ПогашениеПодарочныхСертификатов КАК ПогашениеПодарочныхСертификатов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.ПодарочныйСертификат.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
	|	ТаблицаВЗапросе.ПодарочныйСертификат.Номинал КАК Номинал,
	|	ТаблицаВЗапросе.Количество * ТаблицаВЗапросе.ПодарочныйСертификат.Номинал КАК СуммаНоминала
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе";
	
	Запрос.УстановитьПараметр("ПогашениеПодарочныхСертификатов", Объект.ПогашениеПодарочныхСертификатов.Выгрузить());
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Для Индекс = 0 По ТаблицаЗапроса.Количество() - 1 Цикл
		ЗаполнитьЗначенияСвойств(Объект.ПогашениеПодарочныхСертификатов[Индекс], ТаблицаЗапроса[Индекс]);
	КонецЦикла;
	
	РассчитатьСуммуНоминаловВсего();
	
КонецПроцедуры

// Заполняются реквизиты ТЧ из подарочного реквизита.
//
// Параметры:
//  ПодарочныйСертификат - Справочник. Номенклатура
//  ИспользоватьСерийныеНомера - Булево
//  Номинал - Число
//
&НаСервере
Процедура ЗаполнитьРеквизитыСтрокиПогашенияПодарочныхСертификатов(ПодарочныйСертификат, ИспользоватьСерийныеНомера, Номинал)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.ИспользоватьСерийныеНомера,
	|	Номенклатура.Номинал
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ПодарочныйСертификат);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ИспользоватьСерийныеНомера = Выборка.ИспользоватьСерийныеНомера;
		Номинал                    = Выборка.Номинал;
	Иначе
		ИспользоватьСерийныеНомера = Ложь;
		Номинал                    = 0;
	КонецЕсли;
	

КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыЦена.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСумма.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ВозвращенныеТоварыЦена.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ВозвращенныеТоварыСумма.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента, ИмяТаблицыВыборки);
	
КонецПроцедуры

// Процедура заполняет товары из подбора.
// Параметры: 
//  ВыбранноеЗначение - Структура,
//  ИмяТабличнойЧасти  - Строка
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТабличнойЧасти  = "")
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	ИмяТабличнойЧасти = ?(ПустаяСтрока(ИмяТабличнойЧасти), "Товары", ИмяТабличнойЧасти);
	ТаблицаСерийныхНомеров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресСерийныхНомеровВХранилище);
	ЕстьСерийныеНомера = (ИмяТабличнойЧасти = "Товары") И (ТаблицаСерийныхНомеров.Количество() > 0);
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		СтрокаСписокСвойств = "Номенклатура,
							  |Характеристика,
							  |Упаковка,
							  |Цена,
							  |КоличествоУпаковок,
							  |ТипНоменклатуры,
							  |ХарактеристикиИспользуются";
		Если ИмяТабличнойЧасти = "Товары" Тогда
			СтрокаСписокСвойств = СтрокаСписокСвойств + ",
								 |ИспользоватьСерийныеНомера";
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, СтрокаСписокСвойств);
		Если ЕстьСерийныеНомера Тогда
			МассивСерийныхНомеров = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(СтрокаТовара.КлючСвязиСерийныхНомеров , ТаблицаСерийныхНомеров);
			ТекущаяСтрока.КлючСвязиСерийныхНомеров = ОбработкаТабличнойЧастиТоварыСервер.ДобавитьСерийныеНомераВТабличнуюЧасть(Объект.СерийныеНомера, МассивСерийныхНомеров, 0);
		КонецЕсли;
		Если СтрокаТовара.ИспользоватьСерийныеНомера Тогда
			Если ЕстьСерийныеНомера Тогда
				ТекущаяСтрока.КоличествоУпаковок = МассивСерийныхНомеров.Количество();
			Иначе
				ТекущаяСтрока.КоличествоУпаковок = 0;
			КонецЕсли;
		КонецЕсли;
		СтруктураДействий = Новый Структура;
		
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДС(Объект));
		
		СтруктураПараметровДействия = Новый Структура;
		СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
		СтруктураПараметровДействия.Вставить("РабочееМесто", РабочееМесто);
		СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДействия);
		
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект[ИмяТабличнойЧасти]);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС);
	
	ОбновитьСуммыПодвалаСервер();
	
	ЗаполнитьСтатусыУказанияСерийСервер();
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
КонецПроцедуры

// Расчет суммы банковской комиссии.
//
// Параметры:
//  ТекущаяСтрока - текущая строка таблицы оплаты платежными картами.
//
&НаКлиенте
Процедура ПересчитатьСуммуБанковскойКомиссии(ТекущаяСтрока)

	ТекущаяСтрока.СуммаБанковскойКомиссии = ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентБанковскойКомиссии / 100;

КонецПроцедуры

// Расчет суммы торговой уступки.
//
// Параметры:
//  ТекущаяСтрока - текущая строка таблицы оплаты платежными картами.
//
&НаКлиенте
Процедура ПересчитатьСуммуКомиссии(ТекущаяСтрока)
	
	ТекущаяСтрока.СуммаКомиссии = ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентКомиссии / 100;
	
КонецПроцедуры

// Получаем с сервера 
&НаСервере
Функция ВладелецДисконтнойКарты(ДисконтнаяКарта)

	Возврат ДисконтнаяКарта.ВладелецКарты;

КонецФункции

// Процедура- обработчик изменения кассы ККМ на сервере.
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ПриИзмененииКассаККМСервер()

	РабочееМестоНовое = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КассаККМ, "РабочееМесто");
	
	НеобходимоПерезаполнитьСклады = Ложь;
	Если НЕ Объект.Магазин = Объект.КассаККМ.Магазин Тогда
	
		Объект.Магазин = Объект.КассаККМ.Магазин;
	
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ОтчетОРозничныхПродажах.ПараметрыУказанияСерий(Объект));
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
		НеобходимоПерезаполнитьСклады = Истина;
	КонецЕсли;
	
	Если НЕ РабочееМесто = РабочееМестоНовое Тогда
		РабочееМесто = РабочееМестоНовое;
		НеобходимоПерезаполнитьСклады = Истина;
	КонецЕсли;
	
	ЦенаВключаетНДС = ОбщегоНазначенияРТ.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(Объект.Магазин.ПравилоЦенообразования, "ЦенаВключаетНДС");
	
	Если НЕ Объект.Организация = Объект.КассаККМ.Владелец 
		ИЛИ НЕ Объект.ЦенаВключаетНДС = ЦенаВключаетНДС Тогда
	
		ПустойДоговор = Справочники.ДоговорыПлатежныхАгентов.ПустаяСсылка();
		
		Если НЕ Объект.Организация = Объект.КассаККМ.Владелец Тогда
			Для каждого СтрокаТовары Из Объект.Товары Цикл
				СтрокаТовары.Договор = ПустойДоговор;
			КонецЦикла;
		КонецЕсли;
		
		Объект.Организация     = Объект.КассаККМ.Владелец;
		Объект.ЦенаВключаетНДС = ЦенаВключаетНДС;
		
		СтруктураДействий = Новый Структура;
		
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДС(Объект));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		Если НеобходимоПерезаполнитьСклады Тогда
			СтруктураПараметровДействия = Новый Структура;
			СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
			СтруктураПараметровДействия.Вставить("РабочееМесто", РабочееМесто);
			СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДействия);
			СтруктураДействий.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
		КонецЕсли;
		
		СтруктураТЧ = Новый Структура;
		СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		
		СтруктураТЧ = Новый Структура;
		СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.ВозвращенныеТовары);
		ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС);
		
		ОбновитьСуммыПодвалаСервер();
		
	ИначеЕсли НеобходимоПерезаполнитьСклады Тогда
		
		СтруктураДействий = Новый Структура;
		
		СтруктураПараметровДействия = Новый Структура;
		СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
		СтруктураПараметровДействия.Вставить("РабочееМесто", РабочееМесто);
		СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДействия);
		СтруктураДействий.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
		
		СтруктураТЧ = Новый Структура;
		СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
		
		СтруктураТЧ = Новый Структура;
		СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.ВозвращенныеТовары);
		ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает изменение количества упаковок.
//
// Параметры:
//  Нет;
//
&НаКлиенте
Процедура ПриИзмененииТоварыКоличестваУпаковок()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммыПодвалаВыручкиКлиент();
	СуммаВсего = СуммаВсего + Объект.ПрочаяВыручка.Итог("СуммаПоступления") - Объект.ПрочаяВыручка.Итог("СуммаВозврата");

КонецПроцедуры

// Заполняет реквизиты документа по умолчанию в зависимости от выбранного налогообложения НДС.
//
&НаСервере
Процедура ПриИзмененииУчитыватьНДССервер()

	УстановитьДоступностьЦенаВключаетНДС(Истина);
	УстановитьТекущуюСтраницуСуммПодвала();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДС(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.ВозвращенныеТовары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС);
	
	ОбновитьСуммыПодвалаСервер();
	
КонецПроцедуры

// Расчет суммы номинала
//
// Параметры:
//  ТекущаяСтрока - текущая строка ТЧ ПогашениеПодарочныхСертификатов.
//
&НаКлиенте
Процедура РассчитатьСуммуНоминала(ТекущаяСтрока)

	ТекущаяСтрока.СуммаНоминала = ТекущаяСтрока.Количество * ТекущаяСтрока.Номинал;
	
	РассчитатьСуммуНоминаловВсего();

КонецПроцедуры

// Рассчитать сумму номиналов всего.
//
// Параметры:
//  СуммаНоминаловВсего - Число;
//
&НаСервере
Процедура РассчитатьСуммуНоминаловВсего()

	СуммаНоминаловВсего =  Объект.ПогашениеПодарочныхСертификатов.Итог("СуммаНоминала");

КонецПроцедуры

// Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора.
// Параметры:
//  Отказ - Булево
&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин"" не заполнено'"), Объект, "Объект.Магазин",,Отказ);
	КонецЕсли;
		
КонецПроцедуры

// Устанавливает доступность поля ЦенаВключаетНДС.
//
&НаСервере
Процедура УстановитьДоступностьЦенаВключаетНДС(ПриИзменении = Ложь)

	Если ПриИзменении И Не Объект.УчитыватьНДС И Объект.ЦенаВключаетНДС Тогда
		Объект.ЦенаВключаетНДС = Ложь;
	ИначеЕсли ПриИзменении И Объект.УчитыватьНДС Тогда
		Объект.ЦенаВключаетНДС = ОбщегоНазначенияРТ.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(Объект.Магазин.ПравилоЦенообразования, "ЦенаВключаетНДС");
	КонецЕсли;
	
	Элементы.ЦенаВключаетНДС.ТолькоПросмотр = Не Объект.УчитыватьНДС;

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
// Установить параметры выбора элементов формы.
//
// Параметры:
//  Нет
//
&НаСервере
Процедура УстановитьПараметрыВыбораЭлементовФормы()

	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипОплаты", Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта));
	Элементы.ОплатаПлатежнымиКартамиВидОплаты.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипОплаты", Перечисления.ТипыОплатЧекаККМ.БанковскийКредит));
	Элементы.ОплатаБанковскимиКредитамиВидОплаты.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	Элементы.ГруппаПродажиПоДисконтнымКартам.Видимость = НЕ Объект.ПродажиПоДисконтнымКартам.Количество() = 0;
	
КонецПроцедуры

// Процедура учитывает изменение параметров налогообложения в документе.
//
&НаСервере
Процедура УстановитьТекущуюСтраницуСуммПодвала()
	
	Если Объект.УчитыватьНДС Тогда
		Элементы.ГруппаПодвалСтраницы.ТекущаяСтраница = Элементы.ГруппаСуммыНДС;
	Иначе
		Элементы.ГруппаПодвалСтраницы.ТекущаяСтраница = Элементы.ГруппаСуммы;
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьПравоИзменятьЦену()
	
	Возврат УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Серии

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку");
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбновитьСуммыПодвалаВыручкиСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСуммыПодвалаВозвратКлиент()
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС, СуммаВсегоВозврат);
	СуммаВсегоВозврат = СуммаВсегоВозврат + Объект.ПрочаяВыручка.Итог("СуммаВозврата");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСуммыПодвалаВыручкиКлиент()
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	СуммаВсего = СуммаВсего + Объект.ПрочаяВыручка.Итог("СуммаПоступления") - Объект.ПрочаяВыручка.Итог("СуммаВозврата");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСуммыПодвалаКлиент()
	
	ОбновитьСуммыПодвалаВыручкиКлиент();
	ОбновитьСуммыПодвалаВозвратКлиент()
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСуммыПодвалаВозвратСервер()
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.ВозвращенныеТовары, Объект.ЦенаВключаетНДС, СуммаВсегоВозврат);
	СуммаВсегоВозврат = СуммаВсегоВозврат + Объект.ПрочаяВыручка.Итог("СуммаВозврата");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСуммыПодвалаВыручкиСервер()
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	СуммаВсего = СуммаВсего + Объект.ПрочаяВыручка.Итог("СуммаПоступления") - Объект.ПрочаяВыручка.Итог("СуммаВозврата");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСуммыПодвалаСервер()
	
	ОбновитьСуммыПодвалаВыручкиСервер();
	ОбновитьСуммыПодвалаВозвратСервер()
	
КонецПроцедуры

&НаСервере
Функция ОбработатьСтрокуДанныхПоКодуСервер(СтрокаРезультата, ДанныеПО)
	
	ИдентификаторСтроки = Неопределено;
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
			ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена регистрационная карта. Обработка регистрационных карт в документе не предусмотрена'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ДанныеПО);
			СтрокаРезультата.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			
		ИначеЕсли ИмяТаблицыВыборки = "ОплатаБонуснымиБаллами" Тогда
			ИдентификаторСтроки = ДобавитьНайденнуюКарту(СтрокаРезультата);
		ИначеЕсли ИмяТаблицыВыборки = "БонусныеБаллыКНачислению" Тогда
			ИдентификаторСтроки = ДобавитьНайденнуюКарту(СтрокаРезультата);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена дисконтная карта. Обработка дисконтных карт в таблице ""%2"" не предусмотрена'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ДанныеПО, ИмяТаблицыВыборки);
			СтрокаРезультата.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		КонецЕсли;
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		Если ИмяТаблицыВыборки = "Товары" Тогда
			ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		ИначеЕсли ИмяТаблицыВыборки = "ПогашениеПодарочныхСертификатов" Тогда
			ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомераПогашение(СтрокаРезультата);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найден номер подарочного сертификата. Обработка сертификатов в таблице ""%2"" не предусмотрена'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ДанныеПО, ИмяТаблицыВыборки);
			СтрокаРезультата.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		КонецЕсли;
		
	Иначе // Номенклатура.
		
		Если ИмяТаблицыВыборки = "Товары"
			ИЛИ ИмяТаблицыВыборки = "ВозвращенныеТовары" Тогда
			ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		ИначеЕсли ИмяТаблицыВыборки = "ПогашениеПодарочныхСертификатов" Тогда
			ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРезультата.Номенклатура, "ТипНоменклатуры");
			Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
				ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомераПогашение(СтрокаРезультата);
			Иначе
				ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена номенклатура. Обработка номенклатуры в таблице ""%2"" не предусмотрена'");
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ДанныеПО, ИмяТаблицыВыборки);
				СтрокаРезультата.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			КонецЕсли;
		Иначе
			ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена номенклатура. Обработка номенклатуры в таблице ""%2"" не предусмотрена'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ДанныеПО, ИмяТаблицыВыборки);
			СтрокаРезультата.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомераПогашение(СтруктураНомера)
	
	ИдентификаторСтроки = Неопределено;
	СтруктураПоиска = Новый Структура;
		
	СтруктураПоиска.Вставить("ПодарочныйСертификат", СтруктураНомера.Номенклатура);
	Если СтруктураНомера.Свойство("СерийныйНомер") Тогда
		СтруктураПоиска.Вставить("СерийныйНомер", СтруктураНомера.СерийныйНомер);
	КонецЕсли;
	МассивСтрок = Объект.ПогашениеПодарочныхСертификатов.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаСертификата = Объект.ПогашениеПодарочныхСертификатов.Добавить();
		СтрокаСертификата.ПодарочныйСертификат = СтруктураНомера.Номенклатура;
		Если СтруктураНомера.Свойство("СерийныйНомер") Тогда
			СтрокаСертификата.СерийныйНомер = СтруктураНомера.СерийныйНомер;
		КонецЕсли;
		ЗаполнитьРеквизитыСтрокиПогашенияПодарочныхСертификатов(СтруктураНомера.Номенклатура, СтрокаСертификата.ИспользоватьСерийныеНомера, СтрокаСертификата.Номинал);
		СтрокаСертификата.Количество = 1;
		СтрокаСертификата.СуммаНоминала = СтрокаСертификата.Номинал;
		РассчитатьСуммуНоминаловВсего();
	Иначе
		СтрокаСертификата = МассивСтрок[0];
	КонецЕсли;
	ИдентификаторСтроки = СтрокаСертификата.ПолучитьИдентификатор();
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденнуюКарту(СтруктураНомера)
	
	ИдентификаторСтроки = Неопределено;
	СтруктураПоиска = Новый Структура;
		
	СтруктураПоиска.Вставить("ДисконтнаяКарта", СтруктураНомера.Карта);
	МассивСтрок = Объект[ИмяТаблицыВыборки].НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() = 0 Тогда
		БонуснаяПрограммаЛояльности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураНомера.Карта, "БонуснаяПрограммаЛояльности");
		СтрокаКарты = Объект[ИмяТаблицыВыборки].Добавить();
		Если СтрокаКарты.Свойство("ВидОплаты") Тогда
			СтрокаКарты.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой;
		КонецЕсли;
		СтрокаКарты.БонуснаяПрограммаЛояльности = БонуснаяПрограммаЛояльности;
		СтрокаКарты.ДисконтнаяКарта = СтруктураНомера.Карта;
	Иначе
		СтрокаКарты = МассивСтрок[0];
	КонецЕсли;
	
	ИдентификаторСтроки = СтрокаКарты.ПолучитьИдентификатор();
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТаблицыВыборки(ИмяСтраницы)
	
	ИмяТаблицыВыборки = "";
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить("ГруппаТовары");
	МассивСтраниц.Добавить("ГруппаВозвращенныеТовары");
	МассивСтраниц.Добавить("ГруппаОплатаБонуснымиБаллами");
	МассивСтраниц.Добавить("ГруппаПогашениеПодарочныхСертификатов");
	МассивСтраниц.Добавить("ГруппаБонусныеБаллыКНачислению");
	Если МассивСтраниц.Найти(ИмяСтраницы) <> Неопределено Тогда
		ИмяТаблицыВыборки = СтрЗаменить(ИмяСтраницы, "Группа", "");
	КонецЕсли;

	Возврат ИмяТаблицыВыборки;
	
КонецФункции

&НаСервере
Процедура УдалитьНесвязанныеСерийныеНомера()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеСерийныеНомера(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

&НаСервере
Процедура НастроитьПолеКассоваяСмена()
	
	Если ЗначениеЗаполнено(Объект.КассоваяСмена) Тогда
		Элементы.КассоваяСмена.ТолькоПросмотр = Истина;
	Иначе
		Элементы.КассоваяСмена.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.КассоваяСмена");
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСБуферомОбмена

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"   , ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДС(Объект));
		
		СтруктураПараметровДействия = Новый Структура;
		СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
		СтруктураПараметровДействия.Вставить("РабочееМесто", РабочееМесто);
		СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДействия);
		
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьКэшированныеЗначенияДляУчетаСерий(ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий, Ложь);
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);				
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
			ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьКэшированныеЗначенияДляУчетаСерий(ТекущаяСтрока,
			КэшированныеЗначения,ПараметрыУказанияСерий,Ложь);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатовВСтроке(ТекущаяСтрока);
				
	КонецЦикла;
	
	КопированиеСтрокСервер.ОчиститьБуферОбмена();
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТабличнойЧасти)
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки, Объект[ИмяТабличнойЧасти]);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ГИСМ

&НаСервере
Процедура ОбновитьСтатусГИСМ()
	
	Элементы.СтатусГИСМ.Видимость = Объект.ЕстьМаркируемаяПродукцияГИСМ;
	Элементы.ФормаОбщаяКомандаПротоколОбменаГИСМ.Видимость = Объект.ЕстьМаркируемаяПродукцияГИСМ;
	
	Если НЕ Объект.ЕстьМаркируемаяПродукцияГИСМ Тогда
		Возврат
	КонецЕсли;
	
	СтатусГИСМ         = Перечисления.СтатусыИнформированияГИСМ.Черновик;
	ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПустаяСсылка();
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СтатусыИнформированияГИСМ.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Черновик)) КАК СтатусИнформированияГИСМ,
		|	ВЫБОР
		|		КОГДА СтатусыИнформированияГИСМ.ДальнейшееДействие В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПустаяСсылка)
		|		ИНАЧЕ ЕСТЬNULL(СтатусыИнформированияГИСМ.ДальнейшееДействие, ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные))
		|	КОНЕЦ КАК ДальнейшееДействие
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
		|		ПО (СтатусыИнформированияГИСМ.Документ = ОтчетОРозничныхПродажах.Ссылка)
		|ГДЕ
		|	ОтчетОРозничныхПродажах.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка",                   Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияГИСМ.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусГИСМ         = Выборка.СтатусИнформированияГИСМ;
			ДальнейшееДействие = Выборка.ДальнейшееДействие;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтатусГИСМПредставление = ИнтеграцияГИСМ.ПредставлениеСтатусаГИСМ(
		СтатусГИСМ,
		ДальнейшееДействие,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		СтандартнаяОбработка = Ложь;
		ИнтеграцияГИСМКлиент.ПодготовитьСообщениеКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаДанных"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
