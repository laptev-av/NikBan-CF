
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	Организация = Параметры.Организация;
	ОрганизацияПолучатель = Параметры.ОрганизацияПолучатель;
	Склад = Параметры.Склад;
	АдресПлатежейВХранилище = Параметры.АдресПлатежейВХранилище;
	ОтрицательныеОстатки = Параметры.ОтрицательныеОстатки;
	Дата = Параметры.Дата;
	
	ЗаполнитьТаблицуТоваров();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТаблицаТоваровКоличествоПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ТаблицаТоваров.ТекущиеДанные;
	СтрокаТаблицы.Выбран = (СтрокаТаблицы.Количество <> 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ЗаполнитьТаблицуТоваров();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьВыделенныеСтроки(Команда)
	
	МассивСтрок = Элементы.ТаблицаТоваров.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТаблицы = ТаблицаТоваров.НайтиПоИдентификатору(НомерСтроки);
		Если СтрокаТаблицы <> Неопределено Тогда
			СтрокаТаблицы.Выбран = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьВыделенныеСтроки(Команда)
	
	МассивСтрок = Элементы.ТаблицаТоваров.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТаблицы = ТаблицаТоваров.НайтиПоИдентификатору(НомерСтроки);
		Если СтрокаТаблицы <> Неопределено Тогда
			СтрокаТаблицы.Выбран = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьТаблицуТоваров();
	
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку "ОК".
//
&НаКлиенте
Процедура ПеренестиВДокументВыполнить()

	ПоместитьТоварыВХранилище();
	Закрыть(КодВозвратаДиалога.OK);
	
	ОповеститьОВыборе(АдресПлатежейВХранилище);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// В процедуре выполняется установка свойств элементов формы.
//
&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Элементы.ОрганизацияПолучатель.Видимость = ОтрицательныеОстатки;
	Элементы.ТаблицаТоваровКоличествоОстатокПолучателя.Видимость = ОтрицательныеОстатки;
	
КонецПроцедуры

// Процедура помещает результаты подбора в хранилище.
//
&НаСервере
Процедура ПоместитьТоварыВХранилище() 
	
	Товары = ТаблицаТоваров.Выгрузить(, "Выбран, Номенклатура, Характеристика, КоличествоУпаковок, Количество");
	
	МассивУдаляемыхСтрок = Новый Массив;
	Для Каждого СтрокаТаблицы Из Товары Цикл
		
		Если Не СтрокаТаблицы.Выбран Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаТаблицы);
		КонецЕсли;
		СтрокаТаблицы.КоличествоУпаковок = СтрокаТаблицы.Количество;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		Товары.Удалить(СтрокаТаблицы);
	КонецЦикла;

	ПоместитьВоВременноеХранилище(Товары, АдресПлатежейВХранилище);
	
КонецПроцедуры

// Процедура заполняет таблицу товаров.
//
&НаСервере
Процедура ЗаполнитьТаблицуТоваров()
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		ТаблицаТоваров.Очистить();
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыОрганизаций.Номенклатура КАК Номенклатура,
	|	ТоварыОрганизаций.Характеристика КАК Характеристика,
	|	ТоварыОрганизаций.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиОтправителя
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(
	|			&Граница,
	|			Организация = &ОрганизацияОтправитель
	|				И Склад = &Склад) КАК ТоварыОрганизаций
	|ГДЕ
	|	ТоварыОрганизаций.КоличествоОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыОрганизаций.Номенклатура КАК Номенклатура,
	|	ТоварыОрганизаций.Характеристика КАК Характеристика,
	|	ТоварыОрганизаций.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиПолучателя
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(
	|			&Граница,
	|			&ОтрицательныеОстатки
	|				И Организация = &ОрганизацияПолучатель
	|				И Склад = &Склад) КАК ТоварыОрганизаций
	|ГДЕ
	|	ТоварыОрганизаций.КоличествоОстаток < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Выбран,
	|	ТоварыОрганизаций.Номенклатура КАК Номенклатура,
	|	ТоварыОрганизаций.Характеристика КАК Характеристика,
	|	ОстаткиОтправителя.КоличествоОстаток КАК КоличествоОстатокОтправителя,
	|	ТоварыОрганизаций.КоличествоОстаток КАК КоличествоОстатокПолучателя,
	|	ВЫБОР
	|		КОГДА -ТоварыОрганизаций.КоличествоОстаток < ОстаткиОтправителя.КоличествоОстаток
	|			ТОГДА -ТоварыОрганизаций.КоличествоОстаток
	|		ИНАЧЕ ОстаткиОтправителя.КоличествоОстаток
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	ОстаткиПолучателя КАК ТоварыОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиОтправителя КАК ОстаткиОтправителя
	|		ПО ТоварыОрганизаций.Номенклатура = ОстаткиОтправителя.Номенклатура
	|			И ТоварыОрганизаций.Характеристика = ОстаткиОтправителя.Характеристика
	|ГДЕ
	|	&ОтрицательныеОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	ТоварыОрганизаций.Номенклатура,
	|	ТоварыОрганизаций.Характеристика,
	|	ТоварыОрганизаций.КоличествоОстаток,
	|	0,
	|	ТоварыОрганизаций.КоличествоОстаток
	|ИЗ
	|	ОстаткиОтправителя КАК ТоварыОрганизаций
	|ГДЕ
	|	НЕ &ОтрицательныеОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика");
	
	Запрос.УстановитьПараметр("ОрганизацияПолучатель", ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("ОрганизацияОтправитель", Организация);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ОтрицательныеОстатки", ОтрицательныеОстатки);
	
	ДатаЗаполнения = КонецДня(Дата);
	Граница = Новый Граница(ДатаЗаполнения, ВидГраницы.Включая);
	Запрос.УстановитьПараметр("Граница", Граница);
		
	ТаблицаТоваров.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

#КонецОбласти
