
// Используется механизмом обработки изменения реквизитов ТЧ.
&НаКлиенте
Перем КэшированныеЗначения;

#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОповещениеВопросПроведениеПередПечатьюЧека(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Попытка
			Если ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
				НапечататьЧекКлиент();
			КонецЕсли;
		Исключение
			ПоказатьПредупреждение(,НСтр("ru = 'Не удалось выполнить проведение документа'"));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЭтоФискальнаяОперация = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
						Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы;
						
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование();
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,
		КартинкаСостоянияДокумента,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		РазрешеноПроведение);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтоLinuxСервер = ОбщегоНазначенияРТВызовСервера.ЭтоLinuxСервер();
		Если ЭтоLinuxСервер И НЕ ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент()
			И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
			И ЗначениеЗаполнено(Объект.ДокументОснование.ФизЛицо) Тогда
			
			ФизЛицо = Объект.ДокументОснование.ФизЛицо;
			ФИОФизЛицаИП = ОбщегоНазначенияРТВызовСервера.ИменительныйПадежПоРеквизиту(ФизЛицо);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Касса) Тогда
			КассаПриИзмененииСервер();
		КонецЕсли;
		
		УправлениеЭлементамиФормы();
		
		ОбновитьТекущийОстаток();
		
		ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,
			КартинкаСостоянияДокумента,
			Элементы.КартинкаСостоянияДокумента.Подсказка,
			РазрешеноПроведение);
		
		ЗаполнениеПризнаковСпособовРасчета();
		
	ИначеЕсли Объект.ОписьСдаваемыхНаличныхДенег.Количество() = 0 Тогда
		
		ЗаполнитьТаблицуОписьСдаваемыхНаличныхДенег();
		Модификация = Ложь;
		
	Иначе
		
		ТаблицаОписьСдаваемыхНаличныхДенег.Загрузить(Объект.ОписьСдаваемыхНаличныхДенег.Выгрузить());
	
	КонецЕсли;
	
	НастроитьФормуПоДополнительнымПравам();
	
	УстановитьДоступностьЭлементовИФормы();
	
	Если ЗначениеЗаполнено(Объект.ОтчетОРозничныхПродажах) Тогда
		
		ТекстДекорации = НСтр("ru = '%1'");
		РеквизитыОтчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ОтчетОРозничныхПродажах, "Номер, Дата");
		
		ТекстДекорации = СтрЗаменить(ТекстДекорации, "%1", 
			ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыОтчета, НСтр("ru = 'Отчет о розничных продажах'"), "ДФ=dd.MM.yy"));
		
		Элементы.ДекорацияОтчетОРозничныхПродажах.Заголовок = ТекстДекорации;
		
	Иначе
		Элементы.ДекорацияОтчетОРозничныхПродажах.Видимость = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
	Элементы.РасшифровкаПлатежаПризнакСпособаРасчета.Видимость = ЭтоФискальнаяОперация;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ЗначениеЗаполнено(ФИОФизЛицаИП) Тогда
		Объект.Выдать = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(ФИОФизЛицаИП, 3)
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНеоплаченныхДокументов.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНеоплаченныхДокументов(ВыбранноеЗначение);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УправлениеЭлементамиФормы();
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	ВходитВКассовуюКнигу = ФинансыСервер.ОпределитьВхождениеВКассовуюКнигу(Объект.Ссылка);
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	УстановитьДоступностьЭлементовИФормы();
	
	ОбновитьТекущийОстаток();
	
	ВходитВКассовуюКнигу = ФинансыСервер.ОпределитьВхождениеВКассовуюКнигу(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности
    Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
	                                            "Документ.РасходныйКассовыйОрдер.ФормаДокумента.Запись",
                                                           Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);
	

	Если Модифицированность И Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк") Тогда
		ФинансыКлиент.ПересчетСуммыДокументаПоРасшифровкеПлатежа(Объект, ЭтаФорма, Отказ, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.Ответственный.Пустая() Тогда
		ТекущийОбъект.Ответственный = Пользователи.ТекущийПользователь()
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		Если Объект.СуммаДокумента = ТаблицаОписьСдаваемыхНаличныхДенег.Итог("Сумма") Тогда
			Если ТаблицаОписьСдаваемыхНаличныхДенег.Количество() > 0 Тогда
			
				ТекущийОбъект.ОписьСдаваемыхНаличныхДенег.Загрузить(ТаблицаОписьСдаваемыхНаличныхДенег.Выгрузить());
				
			КонецЕсли;
		Иначе
			Текст = НСтр("ru = 'Сумма описи документа должна равнятся сумме документа.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				,
				,
				,
				Отказ);
			КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	УстановитьДоступностьЭлементовИФормы();
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям")
		ИЛИ Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику") Тогда
		
		Оповестить("ВыполненаВыплатаРКО");
		
	КонецЕсли;
	
	// &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура КассаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Справочник.Кассы.Форма.ФормаВыбора.Открытие");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КоличествоБанкнотПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаОписьСдаваемыхНаличныхДенег.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Номинал * ТекущиеДанные.КоличествоБанкнот / ТекущиеДанные.Коэффициент;
	СуммаБанкнот = ТаблицаОписьСдаваемыхНаличныхДенег.Итог("Сумма");
	Если НЕ СуммаИзмененаВручную Тогда
		Объект.СуммаДокумента = СуммаБанкнот;
	КонецЕсли;
	СуммаПодвалаНоминалыБанкнот = Формат(СуммаБанкнот, "ЧЦ=15; ЧДЦ=2");
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Касса) Тогда
		КассаПриИзмененииИДоступностьЭлементовСервер();
		
		Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
			ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
		КонецЕсли;
		
	Иначе
		Магазин = ПредопределенноеЗначение("Справочник.Магазины.ПустаяСсылка");
		Объект.БанковскийСчет = ПредопределенноеЗначение("Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка");
		Объект.КассаККМ = ПредопределенноеЗначение("Справочник.КассыККМ.ПустаяСсылка");
		МагазинПриИзмененииКлиент();
		УстановитьДоступностьБанковскогоСчетаИЗависимыхЭлементов();
		
	КонецЕсли;
	
	Элементы.ПлатежнаяВедомость.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Касса);
	Элементы.Работник.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.ПлатежнаяВедомость);
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств") Тогда
		НастроитьОтображениеОрганизацииПриВнутреннейПередачиДС();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Магазин) Тогда
		ПараметрМагазин = Новый ПараметрВыбора("Отбор.Магазин", Магазин);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПараметрМагазин);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элемент.ПараметрыВыбора = НовыеПараметры;
		
	Иначе
		Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ФинансыКлиент.ПересчетСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента);
	СуммаИзмененаВручную = Истина;
	ЗаполнениеПризнаковСпособовРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПрочиеРасходыПриИзменении(Элемент)
	
	КонтрагентПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяВедомостьПриИзменении(Элемент)
	
	Элементы.Работник.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.ПлатежнаяВедомость);
	Если НЕ ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда 
		Объект.Контрагент = Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПлатежнаяВедомость)
		ИЛИ Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям") Тогда
		Объект.ДокументОснование = Объект.ПлатежнаяВедомость;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДокументНаОснованииПлатежнойВедомости();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникПриИзменении(Элемент)
	МассивРаботникиВедомости = РаботникиВедомости.НайтиСтроки(Новый Структура("Работник", Объект.Контрагент));
	Если МассивРаботникиВедомости.Количество() > 0.00 Тогда
		Объект.СуммаДокумента = МассивРаботникиВедомости[0].Сумма;
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура РаботникНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
		Элементы.Работник.СписокВыбора.Очистить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораРаботникПоВедомостиНаЗарплату();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтчетОРозничныхПродажахНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ОтчетОРозничныхПродажах) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Объект.ОтчетОРозничныхПродажах);
		ПараметрыФормы.Вставить("ТекущийЭлемент", "ПрочаяВыручка");
		
		ПараметрыТекущейСтроки = Новый Структура;
		ПараметрыТекущейСтроки.Вставить("Контрагент", Объект.Контрагент);
		ПараметрыТекущейСтроки.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
		ПараметрыТекущейСтроки.Вставить("ВидОплаты", ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные"));
		
		ПараметрыФормы.Вставить("ТекущаяСтрока", ПараметрыТекущейСтроки);
		ПараметрыФормы.Вставить("ТекущийРеквизитОбъекта", "ПрочаяВыручка");
		
		ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПлатежногоАгентаПриИзменении(Элемент)
	ДоговорПлатежногоАгентаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОписьСдаваемыхНаличныхДенегПриИзменении(Элемент)
	
	ИтогКупюр = ТаблицаОписьСдаваемыхНаличныхДенег.Итог("Сумма");
	Элементы.ЗаполнитьСуммуПоОстатку.Доступность = ИтогКупюр = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Документ.ЗарплатаКВыплатеОрганизаций.Форма.ФормаВыбора.Открытие");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.РасшифровкаПлатежа.ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(Элементы.РасшифровкаПлатежа.ТекущиеДанные.ДокументРасчетовСКонтрагентом) Тогда
			Элемент.ВыбиратьТип = Ложь;
		Иначе
			Элемент.ВыбиратьТип = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументРасчетовСКонтрагентом) Тогда
			
			РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзмененииСервер(СтрокаТаблицы.Сумма, СтрокаТаблицы.ДокументРасчетовСКонтрагентом);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк") Тогда
		Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект.РасшифровкаПлатежа, Истина);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк") Тогда
		
		СуммаТабличнойЧастиРасшифровкаПлатежа = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект.РасшифровкаПлатежа, Истина);
		Элемент.ТекущиеДанные.ДоговорПлатежногоАгента = Объект.ДоговорПлатежногоАгента;
		
	Иначе
		Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект.РасшифровкаПлатежа, Истина);
	КонецЕсли;
	
	СуммаБанкнот = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
	СуммаПодвалаРасшифровкаПлатежа = Формат(СуммаБанкнот, "ЧЦ=15; ЧДЦ=2");
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		ЗаполнениеПризнакаСпособаРасчета(СтрокаТаблицы.ДокументРасчетовСКонтрагентом, 
										 СтрокаТаблицы.Сумма, 
										 СтрокаТаблицы.ПризнакСпособаРасчета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтатьяДвиженияДенежныхСредств = СтрокаТаблицы.СтатьяДвиженияДенежныхСредств;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		СуммаОстаток = Объект.СуммаДокумента - Объект.РасшифровкаПлатежа.Итог("Сумма");
		Элемент.ТекущиеДанные.Сумма = СуммаОстаток;
		Элемент.ТекущиеДанные.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОписьСдаваемыхНаличныхДенег

&НаКлиенте
Процедура ТаблицаОписьСдаваемыхНаличныхДенегПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОписьСдаваемыхНаличныхДенегПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура выполняет печать чека на фискальном регистраторе.
//
&НаКлиенте
Процедура НапечататьЧек(Команда)
	
	Если Объект.ПробитЧек Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросПроведениеПередПечатьюЧека", ЭтотОбъект);
	
	Если ФинансыКлиент.ПроверитьВозможностьПечатиЧека(ОбработчикОповещения, ЭтотОбъект) Тогда
		НапечататьЧекКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьНеоплаченные(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Касса)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Обработка.ПодборНеоплаченныхДокументов.Форма.Форма.Открытие");

	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		АдресХранилищаРасшифровкаПлатежа = ПоместитьВХранилищеРасшифровкуПлатежа();
	Иначе
		АдресХранилищаРасшифровкаПлатежа = "";
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин", 		ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Касса, "Магазин"));
	ПараметрыФормы.Вставить("Контрагент", 	Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация", 	Объект.Организация);
	ПараметрыФормы.Вставить("ФормаОплаты", 	ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная"));
	ПараметрыФормы.Вставить("Операция", 	Объект.ХозяйственнаяОперация);
	ПараметрыФормы.Вставить("АдресХранилищаРасшифровкаПлатежа", АдресХранилищаРасшифровкаПлатежа);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);

	ОткрытьФорму("Обработка.ПодборНеоплаченныхДокументов.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	УстановитьДоступностьЭлементовПоСтатусуСервер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуммуПоОстатку(Команда)
	
	Объект.СуммаДокумента = ТекущийОстатокВКассе;
	
КонецПроцедуры

// Процедура получает список работников (физических лиц) из документа "Ведомость на выплату зарплаты".
//
&НаСервере
Процедура ЗаполнитьСписокВыбораРаботникПоВедомостиНаЗарплату()
	
	Элементы.Работник.СписокВыбора.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаРаботниковВедомости = Документы.РасходныйКассовыйОрдер.РаботникиНаПолучениеЗарплаты(Объект.ПлатежнаяВедомость);
	
	Пока ВыборкаРаботниковВедомости.Следующий() Цикл
		СтрокаРаботника = РаботникиВедомости.Добавить();
		СтрокаРаботника.Работник = ВыборкаРаботниковВедомости.Работник;
		СтрокаРаботника.Сумма = ВыборкаРаботниковВедомости.Сумма;
		Элементы.Работник.СписокВыбора.Добавить(ВыборкаРаботниковВедомости.Работник, ВыборкаРаботниковВедомости.РаботникПредставление + " - " + ВыборкаРаботниковВедомости.Сумма + " руб.");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Касса"" не заполнено'"), Объект, "Объект.Касса",,Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Контрагент"" не заполнено'"), Объект, "Объект.Контрагент",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНеоплаченныхДокументов(ВыбранноеЗначение)
	
	ТаблицаДокументов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресКорзиныВХранилище);
	Объект.РасшифровкаПлатежа.Очистить();
	
	Для каждого Строка Из ТаблицаДокументов Цикл
		
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
	КонецЦикла;
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект.РасшифровкаПлатежа, Истина);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаКлиенте
Процедура КонтрагентПриИзмененииКлиент()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И Не ЗначениеЗаполнено(Объект.Выдать) Тогда
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
		КонтрагентПриИзмененииСервер(СтруктураПараметров);
		Объект.Выдать = СтруктураПараметров.Выдать;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер(СтруктураПараметров)
	
	СтруктураПараметров.Вставить("Выдать", Справочники.Контрагенты.ПолучитьНаименованиеКонтрагента(СтруктураПараметров.Контрагент));
	ЗаполнениеПризнаковСпособовРасчета();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументНаОснованииПлатежнойВедомости()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.ПлатежнаяВедомость);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура КассаПриИзмененииСервер()

	СтруктураРеквизитов = ДенежныеСредстваСервер.ПолучитьРеквизитыКассы(Объект.Касса);
	
	Если НЕ Магазин = СтруктураРеквизитов.Магазин Тогда
		Магазин = СтруктураРеквизитов.Магазин;
		Если НЕ СтруктураРеквизитов.Магазин = Объект.ПлатежнаяВедомость.Магазин Тогда
			Объект.ПлатежнаяВедомость = "";
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ Объект.Организация = СтруктураРеквизитов.Организация Тогда
		Объект.Организация = СтруктураРеквизитов.Организация;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
			РеквизитыБанковскогоСчета = Справочники.БанковскиеСчетаОрганизаций.РеквизитыБанковскогоСчетаОрганизации(Объект.БанковскийСчет);
			Если РеквизитыБанковскогоСчета.Организация <> Объект.Организация Тогда
				Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
						Объект.Организация,
						Перечисления.ФормыОплаты.Безналичная);
			КонецЕсли;
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ Тогда
			РеквизитыКассыККМ = Справочники.КассыККМ.РеквизитыКассыККМ(Объект.КассаККМ);
			Если РеквизитыКассыККМ.Организация <> Объект.Организация Тогда
				Объект.КассаККМ = ЗначениеНастроекПовтИсп.ПолучитьКассуККМПоУмолчанию(Объект.Организация, Магазин);
			КонецЕсли;
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу Тогда
			РеквизитыКассаПолучатель = Справочники.Кассы.РеквизитыКассы(Объект.КассаПолучатель);
			Если РеквизитыКассаПолучатель.Организация <> Объект.Организация Тогда
				Объект.КассаПолучатель = Справочники.Кассы.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	Иначе
		Объект.БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
		Объект.КассаККМ = Справочники.КассыККМ.ПустаяСсылка();
		Объект.КассаПолучатель = Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
	МагазинПриИзмененииСервер();
	УстановитьДоступностьБанковскогоСчета();
	УстановитьВозможныеЗначенияКассыПолучателя();
	
	Объект.ПробиватьЧекиПоКассеККМ = Объект.Касса.ПробиватьЧекиПоКассеККМ;
	Объект.КассаККМ = Объект.Касса.КассаККМ;
	Элементы.КассаККМДляФискальныхОпераций.Доступность = Объект.ПробиватьЧекиПоКассеККМ;
	
	Если ЗначениеЗаполнено(Магазин) Тогда
		Объект.ВидНалога = ПодключаемоеОборудованиеРТ.ВидНалогаПоОрганизацииИСкладу(Объект.Дата,
																						Объект.Организация,
																							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "СкладПродажи"));
	Иначе
		Объект.ВидНалога = Перечисления.ВидыНалогов.ПустаяСсылка();
	КонецЕсли;
	
	ОбновитьТекущийОстаток();
	
	ЗаполнениеПризнаковСпособовРасчета();
КонецПроцедуры

&НаСервере
Процедура КассаПриИзмененииИДоступностьЭлементовСервер()
	
	КассаПриИзмененииСервер();
	УстановитьДоступностьЭлементовИФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьБанковскогоСчетаИЗависимыхЭлементов()
	
	УстановитьДоступностьБанковскогоСчета();
	УстановитьДоступностьЭлементовИФормы();
	
КонецПроцедуры



///////////////////////////////////////////////////////////////////////////////
// Управление свойствами элементов формы.

// В процедуре выполняется установка свойств элементов формы.
//
&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	ОбновитьЭлементыФормыПоХозяйственнойОперации();
	УстановитьДоступностьКнопкиПечатиЧека();
	УстановитьСвязьПараметровВыбораБанковскийСчетОрганизации();
	УстановитьСвязьПараметровВыбораКассаПолучатель();
	ЗаполнитьСписокВыбораРаботникПоВедомостиНаЗарплату();
	
	ЭтоОрганизацияИзНастроекПользователя = ?(Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("Структура"), Параметры.Основание.Свойство("ОрганизацияИзНастроекПользователя"), Ложь);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораКассы(Объект, Элементы.Касса, ЭтоОрганизацияИзНастроекПользователя);
	СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(Объект.ХозяйственнаяОперация);
	Магазин = ДенежныеСредстваСервер.ПолучитьРеквизитыКассы(Объект.Касса).Магазин;
	
	Если Не ЗначениеЗаполнено(Магазин) И ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
	
		Магазин = Объект.ПлатежнаяВедомость.Магазин;
	
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаПодобратьНеоплаченные.Видимость = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		Элементы.ДокументОснование.Видимость = Истина;
	Иначе
		Элементы.ДокументОснование.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьБанковскогоСчета();
	
	НастроитьОтображениеОрганизацииПриВнутреннейПередачиДС();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьБанковскогоСчета()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		Элементы.БанковскийСчет.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеОрганизацииПриВнутреннейПередачиДС()
	
	Если НЕ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Организация.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Элементы.ОрганизацияПолучатель.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Если Объект.Организация.ОбособленноеПодразделение Тогда
			Элементы.Организация.Подсказка = НСтр("ru = 'Обособленное подразделение'");
		Иначе
			Элементы.Организация.Подсказка = НСтр("ru = 'Головная организация'");
		КонецЕсли;
		
	Иначе
		Элементы.Организация.Подсказка = " ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КассаПолучатель) Тогда
		
		Если Объект.КассаПолучатель.Владелец.ОбособленноеПодразделение Тогда
			Элементы.ОрганизацияПолучатель.Подсказка = НСтр("ru = 'Обособленное подразделение'");
		Иначе
			Элементы.ОрганизацияПолучатель.Подсказка = НСтр("ru = 'Головная организация'");
		КонецЕсли;
		
	Иначе
		Элементы.ОрганизацияПолучатель.Подсказка = " ";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементамПоХозяйственнойОперации()

	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.РасходныйКассовыйОрдер.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ОбщегоНазначенияРТ.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
КонецПроцедуры

// Процедура заполняет и отображает табличную часть "Опись сдаваемых наличных денег", если хозяйственная операция
// документа "Сдача денежных средств в банк".
// Для хозяйственных операций передач денег в другие кассы, отображает реквизиты формы для группы получатель.
&НаСервере
Процедура ОбновитьЭлементыФормыПоХозяйственнойОперации()
	
	УстановитьВидимостьЭлементамПоХозяйственнойОперации();
	УстановитьОграничениеТипаЭлементамФормыПоХозяйственнойОперации();
	
	ЗаполнитьТаблицуОписьСдаваемыхНаличныхДенег();
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк") Тогда
		
		Элементы.Переместить(Элементы.РасшифровкаПлатежа, Элементы.СтраницаОписьСдаваемыхНаличныхДенег);
		Элементы.Переместить(Элементы.ТаблицаОписьСдаваемыхНаличныхДенег, Элементы.СтраницаРасшифровкаПлатежа);
		Элементы.СтраницаОписьСдаваемыхНаличныхДенег.Заголовок = "Расшифровка платежа";
		Элементы.СтраницаРасшифровкаПлатежа.Заголовок = "Опись сдаваемых наличных ДС";
		
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
		И ЗначениеЗаполнено(Объект.Касса)
		И Объект.Касса.КассаУправляющейСистемы Тогда
		Элементы.Касса.Доступность = Ложь;
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		Элементы.КассаПолучатель.РежимВыбораИзСписка = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОграничениеТипаЭлементамФормыПоХозяйственнойОперации()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику Тогда
		Элементы.Работник.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	Иначе
		Элементы.Работник.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	КонецЕсли;
	Элементы.Работник.ВыбиратьТип = Ложь;
	Элементы.Контрагент.ВыбиратьТип = Ложь;
	
	МассивТиповОграничений = Документы.РасходныйКассовыйОрдер.ОграничениеТипаДокументаРасчетовПоХозяйственнойОперации(Объект.ХозяйственнаяОперация);
	
	Если МассивТиповОграничений.Количество() > 0 Тогда
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ВыбиратьТип = МассивТиповОграничений.Количество() > 1;
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ОграничениеТипа = Новый ОписаниеТипов(МассивТиповОграничений);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКнопкиПечатиЧека()
	
	НапечататьЧекДоступность = Ложь;
	
	Кнопка = Элементы.Найти("НапечататьЧек");
	Если Кнопка <> Неопределено Тогда
		
		ХозОперация = Объект.ХозяйственнаяОперация;
		
		Если ХозОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
			Или ХозОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы Тогда
			
			НапечататьЧекДоступность = Истина;
		КонецЕсли;
		
		Кнопка.Доступность = НапечататьЧекДоступность;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязьПараметровВыбораКассаПолучатель()
	
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация", РежимИзмененияСвязанногоЗначения.НеИзменять));
		Элементы.КассаПолучатель.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию Тогда
		
		Возврат;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		УстановитьВозможныеЗначенияКассыПолучателя(Ложь);
		
	Иначе
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.КассаУправляющейСистемы", Ложь));
		Элементы.КассаПолучатель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязьПараметровВыбораБанковскийСчетОрганизации()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация", РежимИзмененияСвязанногоЗначения.НеИзменять));
		Элементы.БанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
	
	ИзменятьУчетДС = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователяСУчетомИзмененныхПрав(ПланыВидовХарактеристик.ПраваПользователей.ИзменятьУчетДенежныхСредствВКассовыхДокументах);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВХранилищеРасшифровкуПлатежа()

	РасшифровкаПлатежа = Объект.РасшифровкаПлатежа.Выгрузить();
	
	Адрес = ПоместитьВоВременноеХранилище(РасшифровкаПлатежа, УникальныйИдентификатор);
	
	Возврат Адрес;

КонецФункции

&НаКлиенте
Процедура МагазинПриИзмененииКлиент()
	
	Для Каждого Строка Из Объект.РасшифровкаПлатежа Цикл 
		
		Строка.ДокументРасчетовСКонтрагентом = Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура МагазинПриИзмененииСервер()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РасшифровкаПлатежа", Объект.РасшифровкаПлатежа.Выгрузить(,"ДокументРасчетовСКонтрагентом"));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом
		|ПОМЕСТИТЬ ДокРасчетов
		|ИЗ
		|	&РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокРасчетов.ДокументРасчетовСКонтрагентом.Магазин КАК Магазин
		|ИЗ
		|	ДокРасчетов КАК ДокРасчетов
		|ГДЕ НЕ ДокРасчетов.ДокументРасчетовСКонтрагентом.Магазин ЕСТЬ NULL";

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если Магазин = Выборка.Магазин Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектФормы = РеквизитФормыВЗначение("Объект");
	РасшифровкаПлатежа = ОбъектФормы.РасшифровкаПлатежа;
	
	РасшифровкаПлатежа.ЗагрузитьКолонку(Новый Массив(РасшифровкаПлатежа.Количество()), "ДокументРасчетовСКонтрагентом");
	Объект.РасшифровкаПлатежа.Загрузить(РасшифровкаПлатежа.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер(РазрешитьРедактирование = Ложь)
	
	Если НЕ ВходитВКассовуюКнигу Тогда
		Элементы.ФормаИзменить.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.ФормаИзменить.Видимость = Истина;
	КонецЕсли;
	
	ТолькоПросмотрЭлементов = ВходитВКассовуюКнигу И Объект.Проведен;
	
	Элементы.ФормаИзменить.Доступность = ТолькоПросмотрЭлементов;
	
	Если РазрешитьРедактирование Тогда
		ТолькоПросмотрЭлементов = Ложь;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
		
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("КонтрагентПрочиеРасходы");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("БанковскийСчет");
	МассивЭлементов.Добавить("Работник");
	МассивЭлементов.Добавить("ПлатежнаяВедомость");
	МассивЭлементов.Добавить("НомерСумки");
	МассивЭлементов.Добавить("Касса");
	МассивЭлементов.Добавить("КассаПолучатель");
	МассивЭлементов.Добавить("КассаККМ");
	МассивЭлементов.Добавить("СуммаДокумента");
	
	МассивЭлементов.Добавить("РасшифровкаПлатежа");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", ТолькоПросмотрЭлементов);
	
	МассивЭлементов = Новый Массив;
	
	МассивЭлементов.Добавить("РасшифровкаПлатежаПодобратьНеоплаченные");
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Не ТолькоПросмотрЭлементов);
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИзменить", "Доступность", ТолькоПросмотрЭлементов);
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиент()
	
	Перем Отказ, ИдентификаторУстройства, ИспользоватьКассуБезПодключенияОборудования, РаспределениеВыручкиПоСекциям;
	
	ПодготовитьИПроверитьПечатьЧека(Отказ, ИдентификаторУстройства, ИспользоватьКассуБезПодключенияОборудования, РаспределениеВыручкиПоСекциям);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ИспользоватьКассуБезПодключенияОборудования Тогда
		
		Если НомерДокументаКассыККМ[Объект.КассаККМ] <> Неопределено Тогда
			Объект.НомерЧекаККМ  = НомерДокументаКассыККМ[Объект.КассаККМ];
		Иначе
			Объект.НомерЧекаККМ  = ПорядковыйНомерПродажи;
		КонецЕсли;
		Объект.ПробитЧек   = Истина;
		
		Модифицированность = Истина;
		
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
		Если РезультатЗаписи = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ИдентификаторУстройства <> Неопределено Тогда
		
		ЭтаФорма.Доступность = Ложь;
		
		Контекст = Новый Структура("ИдентификаторУстройства, РаспределениеВыручкиПоСекциям", ИдентификаторУстройства, РаспределениеВыручкиПоСекциям);
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("ТипИнкассации", 1);
		ПараметрыОперации.Вставить("Сумма"        , Объект.СуммаДокумента);
		ПараметрыОперации.Вставить("РаспределениеВыручкиПоСекциям", РаспределениеВыручкиПоСекциям);
		
		Оповещение = Новый ОписаниеОповещения("НапечататьЧекКлиентИнкассацияЗавершение", ЭтотОбъект, Контекст);
		МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(Оповещение, УникальныйИдентификатор, ПараметрыОперации, ИдентификаторУстройства); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиентИнкассацияЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		// &ЗамерПроизводительности 
		Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
											"Документ.РасходныйКассовыйОрдер.Форма.ФормаДокумента.Команда.ПробитьЧек",
																Ложь);
		
		ПараметрыОперации.Вставить("Замер", Замер);
		
		// Установить полученное значение номера чека реквизиту документа.
		Если ЗначениеЗаполнено(РезультатВыполнения.ВыходныеПараметры[1]) Тогда
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		Иначе
			Объект.НомерЧекаККМ = НомерДокументаКассыККМ[Объект.КассаККМ];
		КонецЕсли;
		
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
		Если РезультатЗаписи = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		КонецЕсли;
		
		// Готовим данные
		НомерЧека = НомерДокументаКассыККМ[Объект.КассаККМ] + 1;
		ОбщиеПараметры  = ВходящиеДанныеДляФРСервер(ПараметрыОперации.РаспределениеВыручкиПоСекциям, НомерЧека);
		
		Оповещение = Новый ОписаниеОповещения("НапечататьЧекКлиентЗавершение", ЭтотОбъект, ПараметрыОперации);
		
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(Оповещение, 
										УникальныйИдентификатор, 
										ОбщиеПараметры, 
										ПараметрыОперации.ИдентификаторУстройства);
		
	Иначе
		ЭтаФорма.Доступность = Истина;
		ТекстСообщения = НСтр("ru = 'При операции внесения/выемки произошла ошибка.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиентЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Если ЗначениеЗаполнено(РезультатВыполнения.ВыходныеПараметры[1]) Тогда
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		Иначе
			Объект.НомерЧекаККМ = НомерДокументаКассыККМ[Объект.КассаККМ];
		КонецЕсли;
		Объект.ПробитЧек    = Истина;
		Модифицированность  = Истина;
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
		Если РезультатЗаписи = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
									|Чек не напечатан на фискальном устройстве.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// &ЗамерПроизводительности 
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыОперации.Замер);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьИПроверитьПечатьЧека(Отказаться, 
										  ИдентификаторУстройства, 
										  ИспользоватьКассуБезПодключенияОборудования,
										  РаспределениеВыручкиПоСекциям)
	
	Отказаться = Ложь;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ)  Тогда
		ПараметрыКассыККМ       = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(Объект.КассаККМ);
		ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
		
		РаспределениеВыручкиПоСекциям = ПараметрыКассыККМ.РаспределениеВыручкиПоСекциям;
		ИспользоватьКассуБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
		
		КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		
		ТекстОшибки = НСтр("ru='Кассовая смена не открыта!'");
		Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Объект.Дата, ТекстОшибки) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				"Объект.КассаККМ",
				,
				Отказаться);
			
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru='Не выбрана касса ККМ!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект.КассаККМ",
			,
			Отказаться);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовИФормы()
	
	ХозОперация = Объект.ХозяйственнаяОперация;
	ЭтоФискальнаяОперация = ХозОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
						Или ХозОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы;
						
	ЭтотОбъект.ТолькоПросмотр = ЭтотОбъект.ТолькоПросмотр 
								ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты 
								ИЛИ Объект.ПробитЧек
								ИЛИ Объект.СменаЗакрыта;
	
	ЭтотОбъект.ТолькоПросмотр = ЭтотОбъект.ТолькоПросмотр ИЛИ ЗначениеЗаполнено(Объект.НомерЧекаККМ);
	
	Элементы.ПлатежнаяВедомость.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Касса);
	Элементы.Работник.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.ПлатежнаяВедомость);
	
	Элементы.НапечататьЧек.Доступность = НЕ ЭтотОбъект.ТолькоПросмотр
										 И Объект.ПробиватьЧекиПоКассеККМ;
	
	Элементы.ВидНалога.Доступность = НЕ ЭтотОбъект.ТолькоПросмотр
									 И Объект.ПробиватьЧекиПоКассеККМ;
	
	Элементы.НапечататьЧек.Видимость   = ЭтоФискальнаяОперация;
	Элементы.ВидНалога.Видимость       = ЭтоФискальнаяОперация;
	
	Элементы.КассаККМ.Видимость = Элементы.КассаККМ.Видимость И НЕ ЭтоФискальнаяОперация;
	Элементы.КассаККМДляФискальныхОпераций.Видимость = ЭтоФискальнаяОперация;
	Элементы.НомерЧекаККМ.Видимость = ЭтоФискальнаяОперация;
	
	Элементы.КассаККМДляФискальныхОпераций.Доступность = Объект.ПробиватьЧекиПоКассеККМ;
	
	// Ограничиваем согласно прав пользователя.
	Элементы.КассаККМДляФискальныхОпераций.ТолькоПросмотр = НЕ ИзменятьУчетДС;
	
	Элементы.ДекорацияВнесенВКассовуюКнигу.Видимость = ВходитВКассовуюКнигу;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекущийОстаток()
	
	СтрокаОстаток = "";
	Если ЗначениеЗаполнено(Объект.Касса) Тогда
		ЗапросОстатокВКассе = Новый Запрос;
		ЗапросОстатокВКассе.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ДенежныеСредстваНаличныеОстатки.СуммаОстаток) КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваНаличные.Остатки(
		|			,
		|			Организация = &Организация
		|				И Касса = &Касса
		|				И Магазин = &Магазин
		|				И ДоговорПлатежногоАгента = &ДоговорПлатежногоАгента) КАК ДенежныеСредстваНаличныеОстатки";
		ЗапросОстатокВКассе.УстановитьПараметр("Организация", Объект.Организация);
		ЗапросОстатокВКассе.УстановитьПараметр("Магазин", Магазин);
		ЗапросОстатокВКассе.УстановитьПараметр("Касса", Объект.Касса);
		ЗапросОстатокВКассе.УстановитьПараметр("ДоговорПлатежногоАгента", Объект.ДоговорПлатежногоАгента);
		Выборка = ЗапросОстатокВКассе.Выполнить().Выбрать();
		ТекущийОстатокВКассе = 0;
		Пока Выборка.Следующий() Цикл
			ТекущийОстатокВКассе = Выборка.СуммаОстаток;
		КонецЦикла;
		
		НадписьОстатокДС = ТекущийОстатокВКассе;
		
		ИспользоватьАгентскиеПлатежиИРазделениеВыручки = ПолучитьФункциональнуюОпцию("ИспользоватьАгентскиеПлатежиИРазделениеВыручки");
		Если ЗначениеЗаполнено(Объект.ДоговорПлатежногоАгента) Тогда
			СтрокаОстаток = НСтр("ru = 'Остаток агентской выручки по договору ""%1"" в кассе: %2 руб.'");
			ПодсказкаНадписьОстатокДС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОстаток, Объект.ДоговорПлатежногоАгента, ТекущийОстатокВКассе);
			
		Иначе
			Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
				СтрокаОстаток = НСтр("ru = 'Текущий остаток собственных средств в кассе: %1 руб.'");
			Иначе
				СтрокаОстаток = НСтр("ru = 'Текущий остаток в кассе: %1 руб.'");
			КонецЕсли;
			ПодсказкаНадписьОстатокДС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОстаток, ТекущийОстатокВКассе);
			
		КонецЕсли;
		
		
		Элементы.НадписьОстатокДС.Заголовок = ТекущийОстатокВКассе;
		Элементы.НадписьОстатокДС.Подсказка = ПодсказкаНадписьОстатокДС;
		
	Иначе
		
		Элементы.НадписьОстатокДС.Заголовок = "";
		Элементы.НадписьОстатокДС.Подсказка = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПлатежногоАгентаПриИзмененииНаСервере()
	
	Объект.БанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорПлатежногоАгента, "БанковскийСчет");
	ОбновитьТекущийОстаток();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		Для Каждого Строка Из Объект.РасшифровкаПлатежа Цикл
			Строка.ДоговорПлатежногоАгента = Объект.ДоговорПлатежногоАгента;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВозможныеЗначенияКассыПолучателя(ИзменятьКассуПолучателя = Истина)
	
	Если НЕ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		Возврат;
	КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Кассы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Кассы КАК Кассы
		|ГДЕ
		|	Кассы.Владелец В (&Владелец)";
		
	Запрос.УстановитьПараметр("КассаОтправитель", Объект.Касса);
	
	Запрос.УстановитьПараметр("Владелец", Неопределено);

	МассивВзаимосвязанныхОрганизаций = Справочники.Организации.МассивВзаимосвязанныхОрганизаций(Объект.Организация);
	Запрос.УстановитьПараметр("Владелец", МассивВзаимосвязанныхОрганизаций);
	Запрос.УстановитьПараметр("ОтбиратьПоВладельцу", Истина);
	
	МассивКассПолучателей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Элементы.КассаПолучатель.СписокВыбора.ЗагрузитьЗначения(МассивКассПолучателей);
	
	Если ИзменятьКассуПолучателя Тогда
		Если МассивКассПолучателей.Количество() = 1 Тогда
			
			Объект.КассаПолучатель = МассивКассПолучателей[0];
			КассаПолучательПриИзмененииСервер();
			
		ИначеЕсли ЗначениеЗаполнено(Объект.КассаПолучатель)
			И МассивКассПолучателей.Найти(Объект.КассаПолучатель) = Неопределено Тогда
			
			Объект.КассаПолучатель = Справочники.Кассы.ПустаяСсылка();
			КассаПолучательПриИзмененииСервер();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КассаПолучательПриИзмененииСервер()
	
	НастроитьОтображениеОрганизацииПриВнутреннейПередачиДС();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОписьСдаваемыхНаличныхДенег()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		Если ТаблицаОписьСдаваемыхНаличныхДенег.Количество() = 0 Тогда
			
			// Таблица ТаблицаОписьСдаваемыхНаличныхДенег заполняется один раз при создании на сервере или при чтении на сервере.
			// В случае, если форма перечитывается на сервере неоднократно, таблицу ТаблицаОписьСдаваемыхНаличныхДенег не нужно
			// перезаполнять.
			// Таблица ТаблицаОписьСдаваемыхНаличныхДенег заполняется константными строками(значениями) из макета
			// НоминалыБанкнот.
			
			МакетНоминалыБанкнот = Документы.РасходныйКассовыйОрдер.ПолучитьМакет("ПФ_MXL_ПрепроводительнаяВедомостьНакладнаяКСумке");
			ОбластьНоминалыБанкнот = МакетНоминалыБанкнот.ПолучитьОбласть("НоминалыБанкнотСтроки|ВертикальнаяСекция");
			ОбластьКоличествоБанкнот = МакетНоминалыБанкнот.ПолучитьОбласть("НоминалыБанкнотСтроки|КоличествоБанкнот");
			ОбластьСуммаБанкнотБанкнот = МакетНоминалыБанкнот.ПолучитьОбласть("НоминалыБанкнотСтроки|СуммаБанкнот");
			
			Для Высота = 1 По ОбластьНоминалыБанкнот.ВысотаТаблицы Цикл
				СтрокаОписьБанкнот = ТаблицаОписьСдаваемыхНаличныхДенег.Добавить();
				
				// Данный программный блок получает строку с параметром, например "коп_1_100" или "руб_1000_1".
				// Данная строка структурирована символом "_", этот символ заменяется на символ "ПС",
				// в результате получаем строку состоящую из трех строк:
				// Первая строка "коп" - наименование банкноты.
				// Вторая строка "1"   - достоинство банкноты.
				// Третья строка "100" - коэффициент пересчета к рублю
				// или.
				// Первая строка "руб"  - наименование банкноты.
				// Вторая строка "1000" - достоинство банкноты.
				// Третья строка "1"    - коэффициент пересчета к рублю.
				
				СтрокаСФорматированнымПараметром = ОбластьКоличествоБанкнот.ПолучитьОбласть(высота, 1, высота, 1).ТекущаяОбласть.Параметр;
				СтрокаСФорматированнымПараметромМногоСтрочная = СтрЗаменить(СтрокаСФорматированнымПараметром, "_", Символы.ПС);
				СтрокаОписьБанкнот.НаименованиеБанкноты = СтрПолучитьСтроку(СтрокаСФорматированнымПараметромМногоСтрочная, 1) + ".";
				Если СтрокаОписьБанкнот.НаименованиеБанкноты = "руб1." Тогда
					СтрокаОписьБанкнот.НаименованиеБанкноты = "руб.банкноты"
				ИначеЕсли СтрокаОписьБанкнот.НаименованиеБанкноты = "руб2." Тогда
					СтрокаОписьБанкнот.НаименованиеБанкноты = "руб.монеты"
				КонецЕсли;
				СтрокаОписьБанкнот.Номинал = Число(СтрПолучитьСтроку(СтрокаСФорматированнымПараметромМногоСтрочная, 2));
				СтрокаОписьБанкнот.Коэффициент = Число(СтрПолучитьСтроку(СтрокаСФорматированнымПараметромМногоСтрочная, 3));
				СтрокаОписьБанкнот.ПараметрКоличествоБанкнот = СтрокаСФорматированнымПараметром;
				СтрокаОписьБанкнот.ПараметрСуммаБанкнот = ОбластьСуммаБанкнотБанкнот.ПолучитьОбласть(высота, 1, высота, 1).ТекущаяОбласть.Параметр;
			КонецЦикла;
			ТаблицаОписьСдаваемыхНаличныхДенег.Сортировать("Коэффициент Возр, Номинал Убыв");
			Элементы.Сумма.ОтображатьВПодвале = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
КонецПроцедуры

&НаСервере
Функция ВходящиеДанныеДляФРСервер(РаспределениеВыручкиПоСекциям, НомерЧека)
	
	Возврат Документы.РасходныйКассовыйОрдер.ПодготовитьДанныеДляПробитияЧека(Объект.Ссылка, РаспределениеВыручкиПоСекциям, НомерЧека);
	
КонецФункции 

&НаСервере
Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзмененииСервер(Сумма, ДокументРасчетовСКонтрагентом)
	
	Сумма = ДенежныеСредстваВызовСервера.ПолучитьСуммуДокумента(ДокументРасчетовСКонтрагентом);
	Если ТипЗнч(ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ПоступлениеТоваров")
		ИЛИ ТипЗнч(ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		Объект.ВидНалога = ПодключаемоеОборудованиеРТ.ВидНалогаПоОрганизацииИСкладу(Объект.Дата, Объект.Организация, ДокументРасчетовСКонтрагентом.Склад)
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПолучательПриИзменении(Элемент)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Справочник.Кассы.Форма.ФормаВыбора.Открытие");

	КассаПолучательПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеПризнакаСпособаРасчета(ДокументРасчетовСКонтрагентом, СуммаПлатежа, ПризнакСпособаРасчета)
	
	
	Документы.РасходныйКассовыйОрдер.ЗаполнениеПризнакаСпособаРасчета(Объект,
																	  ДокументРасчетовСКонтрагентом,
																	  СуммаПлатежа,
																	  ПризнакСпособаРасчета);
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеПризнаковСпособовРасчета()
	
	Документы.РасходныйКассовыйОрдер.ЗаполнениеПризнаковСпособовРасчета(Объект);
	
КонецПроцедуры

#КонецОбласти