
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	АдресТаблицыКоманд = ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд;
	Если ЗначениеЗаполнено(АдресТаблицыКоманд) Тогда
		ТаблицаКоманд = ПолучитьИзВременногоХранилища(АдресТаблицыКоманд);
		Для Каждого ПодключеннаяКоманда Из ТаблицаКоманд Цикл
			Если ПодключеннаяКоманда.Идентификатор = "ПечатьТ53" Тогда
				ПодключеннаяКоманда.ТипПараметра = Новый ОписаниеТипов("ДокументСсылка.ЗарплатаКВыплатеОрганизаций");
				ПоместитьВоВременноеХранилище(ТаблицаКоманд, АдресТаблицыКоманд);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВыплачиватьЗарплатуВМагазинах = ПолучитьФункциональнуюОпцию("ВыплачиватьЗарплатуВМагазинах");
	Элементы.ГруппаВыплатаЗаработнойПлаты.Видимость = ВыплачиватьЗарплатуВМагазинах;
	
	Если ВыплачиватьЗарплатуВМагазинах Тогда
		УстановитьОтборДинамическихСписков("Список,ВедомостиНаВыдачуЗарплаты", "Организация,Касса,Магазин");
		УстановитьОтборДинамическихСписков("СотрудникиНаПолучениеЗарплаты", "Организация, Магазин");
	КонецЕсли;
	
	ЗаполнитьСписокХозяйственныхОпераций();
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.РасходныйКассовыйОрдер) Тогда
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСоздать", "Видимость", Ложь);
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Организация = Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;

	Элементы.ОтборКасса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Организация);
	
	Если НЕ ВыплачиватьЗарплатуВМагазинах Тогда
		
		ЭлементСписка = Элементы.ОтборОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям);
		Если НЕ ЭлементСписка = Неопределено Тогда
			Элементы.ОтборОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
		ЭлементСписка = Элементы.ОтборОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику);
		Если НЕ ЭлементСписка = Неопределено Тогда
			Элементы.ОтборОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;

	КонецЕсли;
	
	Если ВыплачиватьЗарплатуВМагазинах Тогда
		ОтборМагазинСписокСотрудниковПустышка = НСтр("ru = '<по всем магазинам, для отбора выберите кассу>'");
		ОтборМагазинСписокВедомостейПустышка = НСтр("ru = '<по всем магазинам, для отбора выберите кассу>'");
		ОтборОперацияПустышка = НСтр("ru = '<не используется>'");
		
		Если НЕ Пользователи.РолиДоступны("ПолныеПрава, ДобавлениеИзменениеКассовыхОрдеров") Тогда
			Элементы.СотрудникиНаПолучениеЗарплатыВыплатитьЗарплатуПечатьРКО.Доступность = Ложь;
		КонецЕсли;
		
		
		ОбщегоНазначенияРТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список", "Дата");
		ОбщегоНазначенияРТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "ВедомостиНаВыдачуЗарплаты", "ВедомостиНаВыдачуЗарплатыДата");
	КонецЕсли;
	
	Элементы.ГруппаСоздать.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.РасходныйКассовыйОрдер);
	
КонецПроцедуры

// В процедуре обновляется список документов ведомость на выплату зарплаты и список сотрудников к выплате зарплаты.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыполненаВыплатаРКО" Тогда
		Элементы.ВедомостиНаВыдачуЗарплаты.Обновить();
		Элементы.СотрудникиНаПолучениеЗарплаты.Обновить();
	ИначеЕсли ИмяСобытия = "ИзмененаПлатежнаяВедомость" Тогда
		Элементы.СотрудникиНаПолучениеЗарплаты.Обновить();
		ОбновитьСписокСотрудников();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Касса = Настройки.Получить("Касса");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Организация   = Настройки.Получить("Организация");
	Иначе
		Организация = Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Касса = Справочники.Кассы.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ХозяйственнаяОперация = Настройки.Получить("ХозяйственнаяОперация");
	
	УстановитьОтборДинамическихСписков("Список", "Организация, Касса, ХозяйственнаяОперация");
	УстановитьОтборДинамическихСписков("ВедомостиНаВыдачуЗарплаты, СотрудникиНаПолучениеЗарплаты", "Организация");
	
	Элементы.ОтборКасса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Организация);
	ОтборКассаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                 Истина, "Документ.РасходныйКассовыйОрдер.Форма.ФормаДокумента.Открытие");
               
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Документ.РасходныйКассовыйОрдер.Форма.ФормаСписка.Открытие");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборКассаПриИзменении(Элемент)
	
	ОтборКассаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ОтборКассаПриИзмененииНаСервере();
	
	УстановитьОтборДинамическихСписков("Список", "Организация");
	УстановитьОтборДинамическихСписков("ВедомостиНаВыдачуЗарплаты, СотрудникиНаПолучениеЗарплаты", "Организация");
	
	Элементы.ОтборКасса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабельныйНомерАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ТабельныйНомер = Текст;
	УстановитьОтборыСотрудникиНаПолучениеЗарплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабельныйНомерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	Если ПустаяСтрока(ТабельныйНомер) Тогда
		УстановитьОтборыСотрудникиНаПолучениеЗарплаты();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабельныйНомерОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьОтборыСотрудникиНаПолучениеЗарплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабельныйНомерПриИзменении(Элемент)
	Если ПустаяСтрока(ТабельныйНомер) Тогда
		УстановитьОтборыСотрудникиНаПолучениеЗарплаты();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФамилияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ФИО = Текст;
	УстановитьОтборыСотрудникиНаПолучениеЗарплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ФамилияОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьОтборыСотрудникиНаПолучениеЗарплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)
	Если ПустаяСтрока(ФИО) Тогда
		УстановитьОтборыСотрудникиНаПолучениеЗарплаты();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФИООкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	Если ПустаяСтрока(ФИО) Тогда
		УстановитьОтборыСотрудникиНаПолучениеЗарплаты();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаРабочееМестоПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ДанныеОбновленияИнфоСтроки = Неопределено Тогда
		СоздатьДанныеОбновленияИнфоСтроки();
	ИначеЕсли ТекущаяСтраница.Имя = "ГруппаВыплатаЗаработнойПлаты" Тогда
		ОбновитьИнфоСтроку();
	КонецЕсли;
	
	Если ТекущаяСтраница.Имя = "ГруппаВыплатаЗаработнойПлаты" Тогда
		
		Элементы.ГруппаОперации.ТекущаяСтраница = Элементы.ГруппаПустышка;
		Элементы.СписокСотрудниковПлатежныеВедомости.ТекущаяСтраница = Элементы.СписокСотрудников;
		
		Элементы.ВедомостиНаВыдачуЗарплаты.Обновить();
		Элементы.СотрудникиНаПолучениеЗарплаты.Обновить();
		ОтборКассаПриИзмененииНаСервере();
	Иначе
		Элементы.ГруппаОперации.ТекущаяСтраница = Элементы.ГруппаОтборОперация;
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОперацияПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков("Список", "ХозяйственнаяОперация");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВедомостиНаВыдачуЗарплаты

&НаКлиенте
Процедура ВедомостиНаВыдачуЗарплатыПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудникиНаПолучениеЗарплаты

&НаКлиенте
Процедура СотрудникиНаПолучениеЗарплатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	Если Поле.Имя = "СотрудникиНаПолучениеЗарплатыФИО"
		ИЛИ Поле.Имя = "СотрудникиНаПолучениеЗарплатыФизЛицо" Тогда
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", Новый Структура("Ключ", Элемент.ТекущиеДанные.ФизЛицо));
	ИначеЕсли Поле.Имя = "СотрудникиНаПолучениеЗарплатыСсылка" Тогда
		ОткрытьФорму("Документ.ЗарплатаКВыплатеОрганизаций.ФормаОбъекта", Новый Структура("Ключ", Элемент.ТекущиеДанные.ПлатежнаяВедомость));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиНаПолучениеЗарплатыПриАктивизацииСтроки(Элемент)
	
	ОбновитьСписокСотрудников();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Копирование Тогда
		НовыйДокументРасходныйКассовыйОрдер(0, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыплатитьЗарплатуКакСтороннемуСотруднику(Команда)
	
	ОчиститьСообщения();
	
	Если ОтборВыбранаКассаУправляющейСистемы = Истина Тогда
		ТекстСообщения = НСтр("ru = 'На выбранную кассу нельзя формировать документы, выбрана касса управляющей системы!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				"ЭтаФорма",
				"Касса");
		Возврат;
	КонецЕсли;
	
	Если Элементы.СотрудникиНаПолучениеЗарплаты.ВыделенныеСтроки.Количество() > 0 Тогда
		МассивСтрок = Новый Массив();
		
		Для Каждого СотрудникПолученияЗарплаты Из Элементы.СотрудникиНаПолучениеЗарплаты.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.СотрудникиНаПолучениеЗарплаты.ДанныеСтроки(СотрудникПолученияЗарплаты);
			
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("ПлатежнаяВедомость",      ДанныеСтроки.ПлатежнаяВедомость);
			СтруктураСтроки.Вставить("НомерСтроки",             ДанныеСтроки.НомерСтроки);
			СтруктураСтроки.Вставить("ФизЛицо",                 ДанныеСтроки.ФизЛицо);
			СтруктураСтроки.Вставить("Сумма",                   ДанныеСтроки.Сумма);
			СтруктураСтроки.Вставить("ХозяйственнаяОперация",   ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику"));
			СтруктураСтроки.Вставить("ОтметкаОВыплатеЗарплаты", ПредопределенноеЗначение("Перечисление.ВариантыОтметокОВыплатеЗарплаты.Выплачено"));
			
			МассивСтрок.Добавить(СтруктураСтроки);
			
		КонецЦикла;
		
		СсылкиДокументовРКО = Новый Массив();
		ВыплатитьЗарплатуСотрудникуСервер(МассивСтрок, СсылкиДокументовРКО);
		Для каждого СсылкаРКО Из СсылкиДокументовРКО Цикл
			ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта", Новый Структура("Ключ", СсылкаРКО), ЭтаФорма);
		КонецЦикла;
		Элементы.СотрудникиНаПолучениеЗарплаты.Обновить();
		Элементы.ВедомостиНаВыдачуЗарплаты.Обновить();
		
		ОбновитьИнфоСтроку();
		
	КонецЕсли;
	ОбновитьСписокСотрудников();
КонецПроцедуры

&НаКлиенте
Процедура ВыплатитьЗарплатуПоВедомости(Команда)
	
	Если Элементы.ВедомостиНаВыдачуЗарплаты.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтборВыбранаКассаУправляющейСистемы = Истина Тогда
		ТекстСообщения = НСтр("ru = 'На выбранную кассу нельзя формировать документы, выбрана касса управляющей системы!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				"ЭтаФорма",
				"Касса");
		Возврат;
	КонецЕсли;
	
	НовыйДокументРКОПоПлатежнойВедомости(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям"), Элементы.ВедомостиНаВыдачуЗарплаты.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатитьЗарплатуСотруднику(Команда)
	Если Элементы.СотрудникиНаПолучениеЗарплаты.ВыделенныеСтроки.Количество() > 0 Тогда
		МассивСтрок = Новый Массив();
		Для Каждого СотрудникПолученияЗарплаты Из Элементы.СотрудникиНаПолучениеЗарплаты.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.СотрудникиНаПолучениеЗарплаты.ДанныеСтроки(СотрудникПолученияЗарплаты);
			
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("ПлатежнаяВедомость",      ДанныеСтроки.ПлатежнаяВедомость);
			СтруктураСтроки.Вставить("НомерСтроки",             ДанныеСтроки.НомерСтроки);
			СтруктураСтроки.Вставить("ФизЛицо",                 Неопределено);
			СтруктураСтроки.Вставить("Сумма",                   Неопределено);
			СтруктураСтроки.Вставить("ХозяйственнаяОперация",   Неопределено);
			СтруктураСтроки.Вставить("ОтметкаОВыплатеЗарплаты",ПредопределенноеЗначение("Перечисление.ВариантыОтметокОВыплатеЗарплаты.Выплачено"));
			
			МассивСтрок.Добавить(СтруктураСтроки);
			
		КонецЦикла;
		ВыплатитьЗарплатуСотрудникуСервер(МассивСтрок);
		Элементы.СотрудникиНаПолучениеЗарплаты.Обновить();
	КонецЕсли;
	
	ОбновитьИнфоСтроку();
	ОбновитьСписокСотрудников();
КонецПроцедуры

&НаКлиенте
Процедура Депонировать(Команда)
	
	Если Элементы.СотрудникиНаПолучениеЗарплаты.ВыделенныеСтроки.Количество() > 0 Тогда
		
		МассивСтрок = Новый Массив();
		
		Для Каждого СотрудникПолученияЗарплаты Из Элементы.СотрудникиНаПолучениеЗарплаты.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.СотрудникиНаПолучениеЗарплаты.ДанныеСтроки(СотрудникПолученияЗарплаты);
			
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("ПлатежнаяВедомость",      ДанныеСтроки.ПлатежнаяВедомость);
			СтруктураСтроки.Вставить("НомерСтроки",             ДанныеСтроки.НомерСтроки);
			СтруктураСтроки.Вставить("ФизЛицо",                 Неопределено);
			СтруктураСтроки.Вставить("Сумма",                   Неопределено);
			СтруктураСтроки.Вставить("ХозяйственнаяОперация",   Неопределено);
			СтруктураСтроки.Вставить("ОтметкаОВыплатеЗарплаты", ПредопределенноеЗначение("Перечисление.ВариантыОтметокОВыплатеЗарплаты.Депонировано"));
			
			МассивСтрок.Добавить(СтруктураСтроки);
			
		КонецЦикла;
		
		ВыплатитьЗарплатуСотрудникуСервер(МассивСтрок);
		Элементы.СотрудникиНаПолучениеЗарплаты.Обновить();
		Элементы.ВедомостиНаВыдачуЗарплаты.Обновить();
		СуммаЗарплаты = 0;
		
		ОбновитьИнфоСтроку();
		
	КонецЕсли;
	ОбновитьСписокСотрудников();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументРасходныйКассовыйОрдер(ХозяйственнаяОперацияИндекс, Отказ = Ложь)
	
	Если ПроверитьКассуНаКоторуюСоздаетсяДокументРКО(Отказ) Тогда
		Возврат;
	КонецЕсли;
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Документ.РасходныйКассовыйОрдер.Форма.ФормаДокумента.СозданиеНового");
    
	ХозОперация = СписокХозяйственныхОпераций[ХозяйственнаяОперацияИндекс].Значение;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Основание", Новый Структура("ХозяйственнаяОперация, Организация, Касса", ХозОперация, Организация, Касса));
	
	Если ЗначениеЗаполнено(ХозяйственнаяОперация) И НЕ ХозяйственнаяОперация = ХозОперация Тогда
		ХозяйственнаяОперация = ХозОперация;
		УстановитьОтборДинамическихСписков("Список", "ХозяйственнаяОперация");
	КонецЕсли;
	
	ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта", СтруктураПараметры, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументРКОВозвратОплатыКлиенту(Команда)
	
	НовыйДокументРасходныйКассовыйОрдер(3);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументРКОВыдачаДенежныхСредствВДругуюКассу(Команда)
	
	НовыйДокументРасходныйКассовыйОрдер(2);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументРКОВнутренняяПередача(Команда)
	
	НовыйДокументРасходныйКассовыйОрдер(9);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументРКОВыдачаДенежныхСредствВДругуюОрганизацию(Команда)
	
	НовыйДокументРасходныйКассовыйОрдер(6);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументРКОВыдачаДенежныхСредствВКассуККМ(Команда)
	
	НовыйДокументРасходныйКассовыйОрдер(4);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументРКОВыплатаЗарплатыПоВедомости(Команда)
	
	НовыйДокументРасходныйКассовыйОрдер(7);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументРКОВыплатаЗарплатыРаботнику(Команда)
	
	НовыйДокументРасходныйКассовыйОрдер(8);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументРКОПрочаяВыдачаДенежныхСредств(Команда)
	
	НовыйДокументРасходныйКассовыйОрдер(5);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументРКОСдачаДенежныхСредствВБанк(Команда)
	
	НовыйДокументРасходныйКассовыйОрдер(1);
	
КонецПроцедуры

&НаСервере
Процедура ОтборКассаПриИзмененииНаСервере()
	
	Магазин = Справочники.Магазины.ПустаяСсылка();
	
	ОтборВыбранаКассаУправляющейСистемы = Касса.КассаУправляющейСистемы;
	
	Если НЕ ОтборВыбранаКассаУправляющейСистемы Тогда
		Магазин = Касса.Магазин;
	Иначе
		Магазин = Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
	Если ВыплачиватьЗарплатуВМагазинах Тогда
		УстановитьОтборДинамическихСписков("ВедомостиНаВыдачуЗарплаты, СотрудникиНаПолучениеЗарплаты", "Организация, Магазин");
		Если ДанныеОбновленияИнфоСтроки <> Неопределено Тогда
			ОбновитьИнфоСтроку();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОтборДинамическихСписков("Список", "Касса");
	
	Если ЗначениеЗаполнено(Магазин) Тогда
		Элементы.СтраницыСписокСотрудников.ТекущаяСтраница = Элементы.ГруппаСписокСотрудников;
		Элементы.СтраницыОтборМагазинВыдачаЗарплатыВедомости.ТекущаяСтраница = Элементы.НаименованиеСпискаПлатежныхВедомостей;
	Иначе
		Элементы.СтраницыСписокСотрудников.ТекущаяСтраница = Элементы.ГруппаСписокСотрудниковПустышка;
		Элементы.СтраницыОтборМагазинВыдачаЗарплатыВедомости.ТекущаяСтраница = Элементы.НаименованиеСпискаПлатежныхВедомостейПустышка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСпискуВедомостей(Команда)
	
	Элементы.СписокСотрудниковПлатежныеВедомости.ТекущаяСтраница = Элементы.ПлатежныеВедомости;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСпискуСотрудниковВыплатыЗарплаты(Команда)
	
	Элементы.СписокСотрудниковПлатежныеВедомости.ТекущаяСтраница = Элементы.СписокСотрудников;
	
	Элементы.СотрудникиНаПолучениеЗарплаты.Обновить();
	ОбновитьИнфоСтроку();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если Элементы.ГруппаРабочееМесто.ТекущаяСтраница = Элементы.ГруппаВыплатаЗаработнойПлаты Тогда
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.ВедомостиНаВыдачуЗарплаты);
	Иначе
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.ВедомостиНаВыдачуЗарплаты, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.ВедомостиНаВыдачуЗарплаты);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыплатитьЗарплатуСотрудникуСервер(МассивСтрок, СсылкиДокументовРКО = Неопределено)
	
	Если ТипЗнч(СсылкиДокументовРКО) = Тип("Массив") Тогда
		
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("Касса", Касса);
		ДанныеЗаполнения.Вставить("Магазин");
		ДанныеЗаполнения.Вставить("Организация", ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущаяОрганизация", ""));
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения, Перечисления.ФормыОплаты.Наличная);
		
		Если НЕ ЗначениеЗаполнено(Касса) Тогда
			Текст = НСтр("ru = 'Программе не удалось определить кассу для оформления расходного кассового ордера. Для выполнения данного действия выберите кассу в поле отбора.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, ,"Касса", );
			Возврат;
		Иначе
			Если Касса.КассаУправляющейСистемы = Истина Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не корректно оформлять расходный кассовый ордер на кассу управляющей системы %1'"),
					Касса);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, ,"Касса", );
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	МассивВедомостей = Новый Массив();
	СоответствиеВедомостей = Новый Соответствие();
	Для Каждого ДанныеСтроки Из МассивСтрок Цикл
		Если СоответствиеВедомостей.Получить(ДанныеСтроки.ПлатежнаяВедомость) = Неопределено Тогда
			СоответствиеВедомостей.Вставить(ДанныеСтроки.ПлатежнаяВедомость, ДанныеСтроки.ПлатежнаяВедомость.ПолучитьОбъект());
		КонецЕсли;
		СтрокаДокумента = СоответствиеВедомостей[ДанныеСтроки.ПлатежнаяВедомость].Зарплата.Получить(ДанныеСтроки.НомерСтроки-1);
		СтрокаДокумента.ОтметкаОВыплатеЗарплаты = ДанныеСтроки.ОтметкаОВыплатеЗарплаты;
	КонецЦикла;
	Для Каждого ДанныеСтроки Из МассивСтрок Цикл
		ПлатежнаяВедомостьОбъект = СоответствиеВедомостей[ДанныеСтроки.ПлатежнаяВедомость];
		Если ПлатежнаяВедомостьОбъект.Ответственный.Пустая() Тогда
			ПлатежнаяВедомостьОбъект.Ответственный = Пользователи.ТекущийПользователь();
		КонецЕсли;
		ПлатежнаяВедомостьОбъект.Записать(РежимЗаписиДокумента.Запись);
		Если ТипЗнч(СсылкиДокументовРКО) = Тип("Массив") Тогда
			ДокументРКО = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			
			СтруктураПараметры = Новый Структура;
			СтруктураПараметры.Вставить("Основание",             ПлатежнаяВедомостьОбъект.Ссылка);
			СтруктураПараметры.Вставить("ХозяйственнаяОперация", ДанныеСтроки.ХозяйственнаяОперация);
			СтруктураПараметры.Вставить("ВыплатаЗарплаты",       );
			СтруктураПараметры.Вставить("Контрагент",            ДанныеСтроки.ФизЛицо);
			СтруктураПараметры.Вставить("СуммаДокумента",        ДанныеСтроки.Сумма);
			СтруктураПараметры.Вставить("Касса",                 Касса);
			
			ДокументРКО.Ответственный = Пользователи.ТекущийПользователь();
			ДокументРКО.Заполнить(СтруктураПараметры);
			ДокументРКО.Записать(РежимЗаписиДокумента.Проведение);
			СсылкиДокументовРКО.Добавить(ДокументРКО.Ссылка);
		КонецЕсли;
	КонецЦикла;
	СуммаЗарплаты = 0;
КонецПроцедуры

// Параметры:
//  <ПлатежнаяВедомость>  - <ДокументСсылка.ЗарплатаКВыплатеОрганизаций> - Ведомость по которой формируется документ РКО
//                 <продолжение описания параметра>.
//  <СпособВыплатыЗарплаты>  - <ПеречислениеСсылка.ХозяйственныеОперации.ВыплатаЗарплатыПоВедомости> - Хоз. операция на
//                                                                                                     которую будет создан документа Расходный кассовый ордер.
//
&НаКлиенте
Процедура НовыйДокументРКОПоПлатежнойВедомости(СпособВыплатыЗарплаты, ПлатежнаяВедомость)
	
	МассивПараметрКоманды = Новый Массив();
	МассивПараметрКоманды.Добавить(Элементы.ВедомостиНаВыдачуЗарплаты.ТекущиеДанные.Ссылка);
	СтруктураПараметры = Новый Структура;
	
	СтруктураОснования = Новый Структура;
	СтруктураОснования.Вставить("Основание",             ПлатежнаяВедомость);
	СтруктураОснования.Вставить("ХозяйственнаяОперация", СпособВыплатыЗарплаты);
	СтруктураОснования.Вставить("ВыплатаЗарплаты",       );
	
	СтруктураПараметры.Вставить("Основание", СтруктураОснования);
	ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта", СтруктураПараметры, Элементы.ВедомостиНаВыдачуЗарплаты);
	
КонецПроцедуры

// Функция проверяет что касса на которую будет сформирован документ РКО не касса управляющей системы.
// Возвращаемое значение:
// Булево - касса отправитель не может быть кассой управляющей системы.
&НаКлиенте
Функция ПроверитьКассуНаКоторуюСоздаетсяДокументРКО(Отказ)
	Если ОтборВыбранаКассаУправляющейСистемы Тогда
		ТекстСообщения = НСтр("ru = 'На выбранную кассу нельзя формировать документы, выбрана касса управляющей системы!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				"ЭтаФорма",
				"Касса",
				,
				Отказ);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ОбновитьИнфоСтроку()

	Если ДанныеОбновленияИнфоСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	КассаПолеКД = Новый ПолеКомпоновкиДанных("Касса");
	
	// СписокВедомостей
	СКД = ПолучитьИзВременногоХранилища(ДанныеОбновленияИнфоСтроки.АдресСКДВедомостиНаЗарплату);
	Настройки = ПолучитьИзВременногоХранилища(ДанныеОбновленияИнфоСтроки.АдресНастроекВедомостиНаЗарплату);
	Настройки.Отбор.Элементы.Очистить();
	
	Для Каждого ЭлементОтбор Из ВедомостиНаВыдачуЗарплаты.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		ДобавитьОтбор(Настройки.Отбор.Элементы, ЭлементОтбор, КассаПолеКД);
	КонецЦикла;
	
	НовыйЭлемент = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПроведенПолеКД = Новый ПолеКомпоновкиДанных("Ссылка.Проведен");
	НовыйЭлемент.ЛевоеЗначение = ПроведенПолеКД;
	НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлемент.ПравоеЗначение = Истина;
	
	НовыйЭлемент = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПроведенПолеКД = Новый ПолеКомпоновкиДанных("ЗарплатаВыплачена");
	НовыйЭлемент.ЛевоеЗначение = ПроведенПолеКД;
	НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлемент.ПравоеЗначение = Ложь;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКД = КомпоновщикМакета.Выполнить(СКД, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКД.Инициализировать(МакетКД);

	СписокВедомостей = Новый ТаблицаЗначений;
	ПроцессорВыводаРезультатаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультатаКД.УстановитьОбъект(СписокВедомостей);
	ПроцессорВыводаРезультатаКД.Вывести(ПроцессорКД);
	
	// Сотрудники
	СКД = ПолучитьИзВременногоХранилища(ДанныеОбновленияИнфоСтроки.АдресСКДСотрудники);
	Настройки = ПолучитьИзВременногоХранилища(ДанныеОбновленияИнфоСтроки.АдресНастроекСотрудники);
	Настройки.Отбор.Элементы.Очистить();
	
	Для Каждого ЭлементОтбор Из СотрудникиНаПолучениеЗарплаты.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		ДобавитьОтбор(Настройки.Отбор.Элементы, ЭлементОтбор, КассаПолеКД);
	КонецЦикла;

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКД = КомпоновщикМакета.Выполнить(СКД, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКД.Инициализировать(МакетКД);

	СписокСотрудников = Новый ТаблицаЗначений;
	ПроцессорВыводаРезультатаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультатаКД.УстановитьОбъект(СписокСотрудников);
	ПроцессорВыводаРезультатаКД.Вывести(ПроцессорКД);
	
	Если СписокВедомостей.Количество() > 0 Тогда
		ИнфоСтрока = НСтр("ru = 'Имеются незакрытые ведомости на выплату зарплаты'");
	Иначе
		ИнфоСтрока = "";
	КонецЕсли;
	
	Если СписокСотрудников.Количество() = 0 И СписокВедомостей.Количество() > 0 Тогда
		Элементы.ИнфоСтрока.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
	Иначе
		Элементы.ИнфоСтрока.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СоздатьДанныеОбновленияИнфоСтроки()
	
	ДанныеОбновленияИнфоСтроки = Новый Структура;
	
	// СКД ВедомостиНаВыдачуЗарплаты
	СКД = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	НаборДанных.Запрос = ВедомостиНаВыдачуЗарплаты.ТекстЗапроса;
	
	ВыбранноеПолеКомпоновкиДанных = СКД.ВариантыНастроек.Основной.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	
	ГруппировкаКомпоновкиДанных = СКД.ВариантыНастроек.Основной.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	АвтоВыбранноеПолеКомпоновкиДанных = СКД.ВариантыНастроек.Основной.Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	АдресСКД = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	
	АдресНастроек = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), УникальныйИдентификатор);
	
	ДанныеОбновленияИнфоСтроки.Вставить("АдресСКДВедомостиНаЗарплату", АдресСКД);
	ДанныеОбновленияИнфоСтроки.Вставить("АдресНастроекВедомостиНаЗарплату", АдресНастроек);
	
	
	// СКД СотрудникиНаПолучениеЗарплаты
	СКД = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	НаборДанных.Запрос = СотрудникиНаПолучениеЗарплаты.ТекстЗапроса;
	
	ВыбранноеПолеКомпоновкиДанных = СКД.ВариантыНастроек.Основной.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных("ФизЛицо");
	
	ГруппировкаКомпоновкиДанных = СКД.ВариантыНастроек.Основной.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	АвтоВыбранноеПолеКомпоновкиДанных = СКД.ВариантыНастроек.Основной.Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	АдресСКД = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	
	АдресНастроек = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), УникальныйИдентификатор);
	
	ДанныеОбновленияИнфоСтроки.Вставить("АдресСКДСотрудники", АдресСКД);
	ДанныеОбновленияИнфоСтроки.Вставить("АдресНастроекСотрудники", АдресНастроек);
	
	ОбновитьИнфоСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтбор(Элементы, ЭлементОтбор, КассаПолеКД)
	
	Если Тип(ЭлементОтбор) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбор.ЛевоеЗначение = КассаПолеКД Тогда
		Возврат;
	КонецЕсли;
		
	НовыйЭлемент = Элементы.Добавить(Тип(ЭлементОтбор));
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементОтбор);
		
	Если Тип(ЭлементОтбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ЭлементОтбор.Элементы.Количество() > 0 Тогда
		
		Для Каждого ЭлементОтбора Из ЭлементОтбор.Элементы Цикл
			ДобавитьОтбор(НовыйЭлемент.Элементы, ЭлементОтбора, КассаПолеКД);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Управление свойствами элементов формы.

&НаСервере
Процедура ЗаполнитьСписокХозяйственныхОпераций()
	
	СписокХозяйственныхОпераций.Очистить();
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику); // 0
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк); // 1
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу); // 2
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту); // 3
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ); // 4
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПрочиеРасходы); // 5
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию); // 6
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям); // 7
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику); // 8
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств); // 9

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокСотрудников()
	
	СуммаЗарплаты = 0;
	Для каждого СотрудникПолученияЗарплаты Из Элементы.СотрудникиНаПолучениеЗарплаты.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.СотрудникиНаПолучениеЗарплаты.ДанныеСтроки(СотрудникПолученияЗарплаты);
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СуммаЗарплаты = СуммаЗарплаты + ДанныеСтроки.Сумма;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическихСписков(СтрокаСписокДинамическийСписок, СтрокаСписокИмяРеквизита, ПараметрВидСравнения = Неопределено)
	Перем ЗначениеОтбора;
	СтруктураДинамическихСписков = Новый Структура(СтрокаСписокДинамическийСписок);
	СтруктураИменРеквизитов = Новый Структура(СтрокаСписокИмяРеквизита);
	Для Каждого НаименованиеДинамическогоСписка Из СтруктураДинамическихСписков Цикл
		ДинамическийСписок = ЭтаФорма[НаименованиеДинамическогоСписка.Ключ];
		Для Каждого НаименованиеРеквизита Из СтруктураИменРеквизитов Цикл
			ИмяРеквизита = НаименованиеРеквизита.Ключ;
			Если (НаименованиеДинамическогоСписка.Ключ = "ВедомостиНаВыдачуЗарплаты"
					ИЛИ НаименованиеДинамическогоСписка.Ключ = "СотрудникиНаПолучениеЗарплаты")
					И ИмяРеквизита = "Магазин" Тогда
				ЗначениеОтбора = Новый СписокЗначений();
				ЗначениеОтбора.Добавить(ЭтаФорма[ИмяРеквизита]);
				ЗначениеОтбора.Добавить(Справочники.Магазины.ПустаяСсылка());
				ПараметрВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				ЗначениеОтбора = ЭтаФорма[ИмяРеквизита];
			КонецЕсли;
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
				ДинамическийСписок,
				ИмяРеквизита,
				ЗначениеОтбора,
				ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизита]),
				ПараметрВидСравнения);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыСотрудникиНаПолучениеЗарплаты()
	
	УстановитьОтборДинамическихСписков("СотрудникиНаПолучениеЗарплаты", "ФИО", ВидСравненияКомпоновкиДанных.Содержит);
	УстановитьОтборДинамическихСписков("СотрудникиНаПолучениеЗарплаты", "ТабельныйНомер", ВидСравненияКомпоновкиДанных.Содержит);
	
КонецПроцедуры

#КонецОбласти
