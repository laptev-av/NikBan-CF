#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает ссылку на документ Расходный кассовый ордер по хозяйственной операции для настройки шаблона чека.
//
Функция ДокументДляШаблонаЧека() Экспорт
	Перем ДокументДляПечатиШаблона;
	
	ДокументДляПечатиШаблона = Документы.РасходныйКассовыйОрдер.ПустаяСсылка();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РасходныйКассовыйОрдер.Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДокументДляПечатиШаблона = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ДокументДляПечатиШаблона;
	
КонецФункции

// Определяет отбор на хозяйственную операцию, устанавливаемый на список выбора документа Расходный кассовый ордер в
// форме элемента справочника хранилище шаблонов.
//
Функция СвязьПараметровВыбораНаХозяйственнуюОперацию() Экспорт
	МассивПараметровВыбора = Новый Массив();
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту));
	Возврат Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецФункции

// Функция получает структуру массивов (макет) для чека РКО.
//
// Параметры:
//  Ссылка      - <ДокументСсылка.РасходныйКассовыйОрдер>, Ссылка на документ РКО.
//  ШаблонЧека  - <ДеревоЗначений>, Шаблон чека
//  ШиринаЧека  - <Число>, Ширина чека в символах.
//  Параметры   - <Структура>, Вспомогательные параметры
//
// Возвращаемое значение:
//   <Структура>   - Структура массивов (макет) текстовых строк.
//
Функция МакетФискальногоЧека(Ссылка, ШаблонЧека, ШиринаЧека, Параметры) Экспорт
	
	ТаблицаРасшифровкаПлатежа = Новый ТаблицаЗначений;
	
	Значение = Неопределено;
	Если Параметры.Свойство("КэшТаблицыРезультатаКомпоновки", Значение) Тогда
		ТаблицыРезультатаКомпоновки        = Значение;
	Иначе
		// Значение по умолчанию
		ТаблицыРезультатаКомпоновки = УправлениеШаблонами.ВыполнитьКомпоновкуДанныхДляИерархическогоШаблона(ШаблонЧека, Ссылка, Параметры.СхемаКомпоновкиДанных, Параметры.КомпоновщикМакета);
		Параметры.Вставить("КэшТаблицыРезультатаКомпоновки", ТаблицыРезультатаКомпоновки);
	КонецЕсли;
	
	Для каждого Таблицы Из ТаблицыРезультатаКомпоновки.Строки Цикл
		
		Если Таблицы.ЧастьЗапроса = "РасшифровкаПлатежа" Тогда
			ТаблицаРасшифровкаПлатежа = Таблицы.Строки;
		КонецЕсли;
		
	КонецЦикла;
	
	Структура = УправлениеШаблонами.ПолучитьИдентификаторыПользовательскихПолей(ШаблонЧека);
	
	// Механизм кэширования макетов.
	Если Параметры.КэшМакетов = Неопределено Тогда
		Структура.Вставить("КэшМакетов", Новый Соответствие);
	Иначе
		Структура.Вставить("КэшМакетов", Параметры.КэшМакетов);
	КонецЕсли;
	
	СтруктураМассивы = Новый Структура;
	
	// Подготовка Шапки и Подвала
	СтрокаШапка = ШаблонЧека.Строки.Найти("Шапка",,Ложь);
	Если СтрокаШапка <> Неопределено Тогда
		Если ТаблицаРасшифровкаПлатежа.Количество() > 0 Тогда
			УправлениеШаблонами.ЗаполнитьСтруктуруПараметровШаблонаПоСтрокеТЧ(ТаблицаРасшифровкаПлатежа.Родитель, Структура, СтрокаШапка);
		КонецЕсли;
		УправлениеШаблонами.ЗаполнитьСоставныеСтрокиПоСтруктуре(СтрокаШапка, Структура);
		
		МассивШапка = Новый Массив;
		Для каждого Строка2Уровня Из СтрокаШапка.Строки Цикл
			Значение = УправлениеШаблонами.ПолучитьМассивСтрокДляСтрокиДереваШаблона(Строка2Уровня, Структура);
			Соответствие = Новый Соответствие;
			Соответствие.Вставить(Строка2Уровня, Значение);
			МассивШапка.Добавить(Соответствие);
		КонецЦикла;
		СтруктураМассивы.Вставить("Шапка",МассивШапка);
		
	КонецЕсли;
	
	СтрокаПодвал = ШаблонЧека.Строки.Найти("Подвал",,Ложь);
	Если СтрокаШапка <> Неопределено Тогда
		Если ТаблицаРасшифровкаПлатежа.Количество() > 0 Тогда
			УправлениеШаблонами.ЗаполнитьСтруктуруПараметровШаблонаПоСтрокеТЧ(ТаблицаРасшифровкаПлатежа.Родитель, Структура, СтрокаПодвал);
		КонецЕсли;
		УправлениеШаблонами.ЗаполнитьСоставныеСтрокиПоСтруктуре(СтрокаПодвал, Структура);
		
		МассивПодвал = Новый Массив;
		Для каждого Строка2Уровня Из СтрокаПодвал.Строки Цикл
			Значение = УправлениеШаблонами.ПолучитьМассивСтрокДляСтрокиДереваШаблона(Строка2Уровня, Структура);
			Соответствие = Новый Соответствие;
			Соответствие.Вставить(Строка2Уровня, Значение);
			МассивПодвал.Добавить(Соответствие);
		КонецЦикла;
		
		СтруктураМассивы.Вставить("Подвал",МассивПодвал);
	КонецЕсли;
	
	// Итоговая строка идет последней, ее не включаем в ТЧ.
	КоличествоСтрокРезультата = ТаблицаРасшифровкаПлатежа.Количество() - 1;
	Для Счетчик = 0 По КоличествоСтрокРезультата Цикл
		
		ТелоШапка = ШаблонЧека.Строки.Найти("Табличная часть ""Расшифровка платежа"" (Шапка)",,Ложь);
		УправлениеШаблонами.ЗаполнитьСтруктуруПараметровШаблонаПоСтрокеТЧ(ТаблицаРасшифровкаПлатежа[Счетчик], Структура, ТелоШапка);
		УправлениеШаблонами.ЗаполнитьСоставныеСтрокиПоСтруктуре(ТелоШапка, Структура);
		
		МассивТелоШапка = Новый Массив;
		Для каждого Строка2Уровня Из ТелоШапка.Строки Цикл
			Значение = УправлениеШаблонами.ПолучитьМассивСтрокДляСтрокиДереваШаблона(Строка2Уровня, Структура);
			Соответствие = Новый Соответствие;
			Соответствие.Вставить(Строка2Уровня, Значение);
			МассивТелоШапка.Добавить(Соответствие);
		КонецЦикла;
		
		ТелоПодвал = ШаблонЧека.Строки.Найти("Табличная часть ""Расшифровка платежа"" (Подвал)",,Ложь);
		УправлениеШаблонами.ЗаполнитьСтруктуруПараметровШаблонаПоСтрокеТЧ(ТаблицаРасшифровкаПлатежа[Счетчик], Структура, ТелоПодвал);
		УправлениеШаблонами.ЗаполнитьСоставныеСтрокиПоСтруктуре(ТелоПодвал, Структура);
		
		МассивТелоПодвал = Новый Массив;
		Для каждого Строка2Уровня Из ТелоПодвал.Строки Цикл
			Значение = УправлениеШаблонами.ПолучитьМассивСтрокДляСтрокиДереваШаблона(Строка2Уровня, Структура);
			Соответствие = Новый Соответствие;
			Соответствие.Вставить(Строка2Уровня, Значение);
			МассивТелоПодвал.Добавить(Соответствие);
		КонецЦикла;
		
		СтруктураМассивы.Вставить("ТелоШапка_"+Счетчик,МассивТелоШапка);
		СтруктураМассивы.Вставить("ТелоПодвал_"+Счетчик,МассивТелоПодвал);
		
	КонецЦикла;
	
	СтруктураМассивы.Вставить("РезультатКомпоновкиДанных", ТаблицаРасшифровкаПлатежа);
	СтруктураМассивы.Вставить("КоличествоСтрокТабличнойЧасти", Счетчик);
	СтруктураМассивы.Вставить("ШиринаЧека", ШиринаЧека);
	
	// Механизм кэширования макетов.
	Кэш = Структура.КэшМакетов;
	
	Возврат СтруктураМассивы;
	
КонецФункции

// Функция выполняет добавление фискальных строк в дерево шаблона перед формированием
//  по нему представления чека РКО.
//
// Параметры:
//  КопияШаблона          - КоллекцияСтрокДереваЗначений
//                          Коллекция строк в которую необходимо добавить фискальные строки.
//  ШиринаЧека            - Число
//                          Ширина чека в символах.
//  ОднаФискальнаяСтрока  - Булево
//                          Определяется наличие режима одна фискальная строка.
//
// Возвращаемое значение:
//   КоллекцияСтрокДереваЗначений   - Коллекция строк дерева значений.
//
Функция СформироватьФискальныеСтроки(КопияШаблона, ШиринаЧека, ОднаФискальнаяСтрока) Экспорт

	// Шапка
	
	Если ШиринаЧека < 18 Тогда
		Возврат КопияШаблона;
	КонецЕсли;
	
	ФР_Строка_0_0 = КопияШаблона.Строки.Найти("Шапка",,Ложь);
	Если ФР_Строка_0_0 <> Неопределено Тогда 
		
		// Первая фискальная строка
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР1");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "Таблица");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР1");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ВставитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, 0, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , НСтр("ru = 'Касса № 01'"));
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР2");
		ПараметрыФункции.Вставить("Ширина"          , 10);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		Если ШиринаЧека >= 25 Тогда
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.Касса.Организация.ИНН%%");
			ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаКассаОрганизацияИНН");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР3");
			ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека - 10);
			ПараметрыФункции.Вставить("РазмещениеТекста", 1); // Обрезать
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ПараметрыФункции.Вставить("Префикс"         , "ИНН: ");
			ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		КонецЕсли;
		
		// Вторая фискальная строка
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР4");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "Таблица");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР4");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ВставитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, 1, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.Date%%");
		ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаDate");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР5");
		ПараметрыФункции.Вставить("Ширина"          , 16);
		ПараметрыФункции.Вставить("РазмещениеТекста", 2); // Забивать
		ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
		ПараметрыФункции.Вставить("Префикс"         , "Дата  ");
		ПараметрыФункции.Вставить("Формат"         , "ДЛФ=D");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		// Третья фискальная строка
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР7");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "Таблица");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР7");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ВставитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, 2, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.Date%%");
		ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаDate");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР8");
		ПараметрыФункции.Вставить("Ширина"          , 11);
		ПараметрыФункции.Вставить("РазмещениеТекста", 2); // Забивать
		ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
		ПараметрыФункции.Вставить("Префикс"         , "Время ");
		ПараметрыФункции.Вставить("Формат"          , "ДФ = чч:мм");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		Если ШиринаЧека >= 23 Тогда
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.НомерЧекаККМ%%");
			ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаНомерЧекаККМ");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР9");
			ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека-11);
			ПараметрыФункции.Вставить("РазмещениеТекста", 2); // Забивать
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ПараметрыФункции.Вставить("Префикс"         , "ЧЕК.№ ");
			ПараметрыФункции.Вставить("Формат"          , "ЧЦ=6; ЧВН=; ЧГ=0");
			ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		КонецЕсли;
		
	КонецЕсли;
	
	// Подвал
	
	ФР_Строка_0_0 = КопияШаблона.Строки.Найти("Подвал",,Ложь);
	Если ФР_Строка_0_0 <> Неопределено И ОднаФискальнаяСтрока Тогда
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР11");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "Таблица");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР11");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "Всего:");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР12");
		ПараметрыФункции.Вставить("Ширина"          , 6);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.СуммаДокумента%%");
		ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаСуммаДокумента");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР13");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека - 6);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ПараметрыФункции.Вставить("Формат"          , "ЧДЦ=2");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
	КонецЕсли;
	
	Если ФР_Строка_0_0 <> Неопределено Тогда
		
		Пробелы50 = "**************************************************";
		Пробелы = "";
		МинимальноеКоличествоСтрок = Цел(ШиринаЧека/50);
		Для Счетчик = 0 По МинимальноеКоличествоСтрок Цикл
			Пробелы = Пробелы + Пробелы50;
		КонецЦикла;
		Пробелы = Лев(Пробелы, ШиринаЧека);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , Пробелы);
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР14");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР15");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "Таблица");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР15");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ИТОГ");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР16");
		ПараметрыФункции.Вставить("Ширина"          , 4);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.СуммаДокумента%%");
		ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаСуммаДокумента");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР17");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека - 4);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ПараметрыФункции.Вставить("Формат"          , "ЧДЦ=2");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , Пробелы);
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР18");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, ПараметрыФункции);
		
	КонецЕсли;
	
	// Табличная часть
	
	Если НЕ ОднаФискальнаяСтрока Тогда
		
		ФР_Строка_0_0 = КопияШаблона.Строки.Найти("Табличная часть ""Расшифровка платежа"" (Подвал)",,Ложь);
		
		Если ФР_Строка_0_0 <> Неопределено Тогда
			
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%РасшифровкаПлатежа.СуммаПлатежа%%");
			ПараметрыФункции.Вставить("ИмяКолонки"      , "РасшифровкаПлатежаСуммаПлатежа");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР19");
			ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
			ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
			ПараметрыФункции.Вставить("Формат"          , "ЧДЦ=2"); // Переносить
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ПараметрыФункции.Вставить("Префикс"         , "=");
			ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, ПараметрыФункции);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КопияШаблона;
	
КонецФункции

// Функция формирует структуру шаблона чека по умолчанию из макета документа Расходный кассовый ордер.
//
Функция СформироватьПервичнуюСтруктуруШаблона(ИерархическийШаблон, ИмяОбъекта, ПервичнаяСтруктура, Загружать) Экспорт
	// Загрузим ИерархическийШаблон из макета.
	Если Загружать Тогда
		ТекстовыйДокумент = Документы.РасходныйКассовыйОрдер.ПолучитьМакет("ШаблонФискальногоЧекаПоУмолчанию");
		Попытка
			Шаблон = ЗначениеИзСтрокиВнутр(ТекстовыйДокумент.ПолучитьТекст());
			Если ТипЗнч(Шаблон) <> Тип("ДеревоЗначений") Тогда
				Загружать = Ложь;
			КонецЕсли;
		Исключение
			Загружать = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если Загружать Тогда
		ИерархическийШаблон = Шаблон.Скопировать();
	Иначе
		НоваяГруппа = ИерархическийШаблон.Строки.Добавить();
		НоваяГруппа.Элемент = НСтр("ru = 'Шапка'");
		НоваяГруппа.Идентификатор = УправлениеШаблонами.ПолучитьИдентификатор();
		НоваяГруппа.ТипЭлемента = "ОбластьЧека";
		НоваяГруппа.ИмяМакета   = "ПоляШаблонаШапка";
		НоваяГруппа.ИмяОбъекта = ИмяОбъекта;
		
		НоваяГруппа = ИерархическийШаблон.Строки.Добавить();
		НоваяГруппа.Элемент = НСтр("ru = 'Табличная часть ""Расшифровка платежа"" (Шапка)'");
		НоваяГруппа.Идентификатор = УправлениеШаблонами.ПолучитьИдентификатор();
		НоваяГруппа.ТипЭлемента = "ОбластьЧека";
		НоваяГруппа.ИмяМакета   = "ПоляШаблонаТЧ";
		НоваяГруппа.ИмяОбъекта = ИмяОбъекта;
		
		НоваяГруппа = ИерархическийШаблон.Строки.Добавить();
		НоваяГруппа.Элемент = НСтр("ru = 'Табличная часть ""Расшифровка платежа"" (Подвал)'");
		НоваяГруппа.Идентификатор = УправлениеШаблонами.ПолучитьИдентификатор();
		НоваяГруппа.ТипЭлемента = "ОбластьЧека";
		НоваяГруппа.ИмяМакета   = "ПоляШаблонаТЧ";
		НоваяГруппа.ИмяОбъекта = ИмяОбъекта;
		
		НоваяГруппа = ИерархическийШаблон.Строки.Добавить();
		НоваяГруппа.Элемент = НСтр("ru = 'Подвал'");
		НоваяГруппа.Идентификатор = УправлениеШаблонами.ПолучитьИдентификатор();
		НоваяГруппа.ТипЭлемента = "ОбластьЧека";
		НоваяГруппа.ИмяМакета   = "ПоляШаблонаШапка";
		НоваяГруппа.ИмяОбъекта = ИмяОбъекта;
	КонецЕсли;
	
	Возврат Документы.РасходныйКассовыйОрдер.ПустаяСсылка();
	
КонецФункции

// Процедура заполняет массивы реквизитов, зависимых от хозяйственной операции документа.
// Параметры:
//           ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хоз. операции документа для которого
//                                                                              необходимо получить массив реквизитов.
//           МассивВсехРеквизитов - Неопределено - Выходной параметр с типом Массив в который будут помещены имена всех
//                                                 реквизитов документов.
//           МассивРеквизитовОперации - Неопределено - Выходной параметр с типом Массив в который будут помещены имена
//                                                     реквизитов по виду операции документа.
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("Шапка");
	МассивВсехРеквизитов.Добавить("ШапкаВыдачаДС");
	
	МассивВсехРеквизитов.Добавить("Организация");
	МассивВсехРеквизитов.Добавить("Касса");
	МассивВсехРеквизитов.Добавить("Контрагент");
	МассивВсехРеквизитов.Добавить("Работник");
	МассивВсехРеквизитов.Добавить("КонтрагентПрочиеРасходы");
	МассивВсехРеквизитов.Добавить("КассаККМ");
	МассивВсехРеквизитов.Добавить("БанковскийСчет");
	МассивВсехРеквизитов.Добавить("ОрганизацияПолучатель");
	МассивВсехРеквизитов.Добавить("ОрганизацияШапка");
	МассивВсехРеквизитов.Добавить("СуммаДокумента");
	МассивВсехРеквизитов.Добавить("ПлатежнаяВедомость");
	МассивВсехРеквизитов.Добавить("НомерСумки");
	МассивВсехРеквизитов.Добавить("СуммаБанкнот");
	МассивВсехРеквизитов.Добавить("СтраницаОписьСдаваемыхНаличныхДенег");
	МассивВсехРеквизитов.Добавить("ПробиватьЧекиПоКассеККМ");
	МассивВсехРеквизитов.Добавить("ОтчетОРозничныхПродажах");
	МассивВсехРеквизитов.Добавить("ДоговорПлатежногоАгента");
	МассивВсехРеквизитов.Добавить("ГруппаОстаток");
	МассивВсехРеквизитов.Добавить("КассаВыдачаДС");
	МассивВсехРеквизитов.Добавить("ОрганизацияВыдачаДС");
	МассивВсехРеквизитов.Добавить("ОрганизацияШапкаВыдачаДС");
	МассивВсехРеквизитов.Добавить("КассаПолучатель");
	МассивВсехРеквизитов.Добавить("КассаККМВыдачаДС");
	
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.Сумма");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорПлатежногоАгента");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.ОперацияКассовойОтчетности");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.Код");
	
	МассивРеквизитовОперации = Новый Массив;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		
		МассивРеквизитовОперации.Добавить("Шапка");
		МассивРеквизитовОперации.Добавить("ГруппаОстаток");
		МассивРеквизитовОперации.Добавить("ОрганизацияШапка");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("БанковскийСчет");
		МассивРеквизитовОперации.Добавить("ПредставлениеРасчетногоСчета");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("НомерСумки");
		МассивРеквизитовОперации.Добавить("СуммаБанкнот");
		МассивРеквизитовОперации.Добавить("СтраницаОписьСдаваемыхНаличныхДенег");
		МассивРеквизитовОперации.Добавить("ДоговорПлатежногоАгента");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Сумма");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ОперацияКассовойОтчетности");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Код");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		
		МассивРеквизитовОперации.Добавить("Шапка");
		МассивРеквизитовОперации.Добавить("ОрганизацияШапка");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("Контрагент");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Сумма");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу Тогда
		
		МассивРеквизитовОперации.Добавить("ШапкаВыдачаДС");
		МассивРеквизитовОперации.Добавить("ОрганизацияШапкаВыдачаДС");
		МассивРеквизитовОперации.Добавить("КассаВыдачаДС");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("КассаПолучатель");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		
		МассивРеквизитовОперации.Добавить("Шапка");
		МассивРеквизитовОперации.Добавить("ОрганизацияШапка");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("КассаККМ");
		МассивРеквизитовОперации.Добавить("ОтчетОРозничныхПродажах");
		МассивРеквизитовОперации.Добавить("Контрагент");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("ПробиватьЧекиПоКассеККМ");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Сумма");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ДоговорПлатежногоАгента");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ Тогда
		
		МассивРеквизитовОперации.Добавить("ШапкаВыдачаДС");
		МассивРеквизитовОперации.Добавить("ОрганизацияШапкаВыдачаДС");
		МассивРеквизитовОперации.Добавить("КассаВыдачаДС");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("КассаККМВыдачаДС");
		МассивРеквизитовОперации.Добавить("КассаККМ");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("ДоговорПлатежногоАгента");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы Тогда
		
		МассивРеквизитовОперации.Добавить("Шапка");
		МассивРеквизитовОперации.Добавить("ОрганизацияШапка");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("КассаККМ");
		МассивРеквизитовОперации.Добавить("ОтчетОРозничныхПродажах");
		МассивРеквизитовОперации.Добавить("КонтрагентПрочиеРасходы");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("ПробиватьЧекиПоКассеККМ");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Сумма");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию Тогда
		
		МассивРеквизитовОперации.Добавить("ШапкаВыдачаДС");
		МассивРеквизитовОперации.Добавить("КассаВыдачаДС");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("КассаПолучатель");
		МассивРеквизитовОперации.Добавить("Организация");
		МассивРеквизитовОперации.Добавить("ОрганизацияПолучатель");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		МассивРеквизитовОперации.Добавить("Шапка");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("ОрганизацияШапка");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("ПлатежнаяВедомость");
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику Тогда
			МассивРеквизитовОперации.Добавить("Работник");
		КонецЕсли;
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		МассивРеквизитовОперации.Добавить("ШапкаВыдачаДС");
		МассивРеквизитовОперации.Добавить("КассаВыдачаДС");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("КассаПолучатель");
		МассивРеквизитовОперации.Добавить("Организация");
		МассивРеквизитовОперации.Добавить("ОрганизацияПолучатель");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает массив типов для ограничения типов элемента формы РасшифровкаПлатежаДокументРасчетовСКонтрагентом.
// Параметры:
//           ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Вид операции документа для которого
//                                                                              необходимо получить массив типов.
// Возвращаемое значение:
//           МассивТиповОграничений - Массив - Массив типов ограничивающих типы для реквизита формы
//                                             РасшифровкаПлатежаДокументРасчетовСКонтрагентом.
//
Функция ОграничениеТипаДокументаРасчетовПоХозяйственнойОперации(ХозяйственнаяОперация) Экспорт
	
	Перем МассивТиповОграничений;
	МассивТиповОграничений = Новый Массив();
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		МассивТиповОграничений.Добавить(Тип("ДокументСсылка.ПоступлениеТоваров"));
		МассивТиповОграничений.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
		МассивТиповОграничений.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		МассивТиповОграничений.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
		МассивТиповОграничений.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	КонецЕсли;
	Возврат МассивТиповОграничений;
	
КонецФункции

// Функция получает работников по ведомости которые не получили зарплату.
// Возвращаемое значение:
//           ВыборкаРаботниковВедомости - ВыборкаРезультатаЗапроса
Функция РаботникиНаПолучениеЗарплаты(ПлатежнаяВедомость) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо                КАК Работник,
	|	ПРЕДСТАВЛЕНИЕ(ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо) КАК РаботникПредставление,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма                  КАК Сумма
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ВыплаченнаяЗарплата КАК ВыплаченнаяЗарплата
	|ПО
	|	ВыплаченнаяЗарплата.ПлатежнаяВедомость = &ПлатежнаяВедомость
	|	И ВыплаченнаяЗарплата.Работник = ЗарплатаКВыплатеОрганизацийЗарплата.ФизЛицо
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &ПлатежнаяВедомость
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.ОтметкаОВыплатеЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОтметокОВыплатеЗарплаты.Выплачено)
	|	И ВыплаченнаяЗарплата.Работник ЕСТЬ NULL
	|";
	Запрос.УстановитьПараметр("ПлатежнаяВедомость", ПлатежнаяВедомость);
	ВыборкаРаботниковВедомости = Запрос.Выполнить().Выбрать();
	Возврат ВыборкаРаботниковВедомости;
	
КонецФункции

// Функция получает реквизиты документа для обмена с конфигурацией "Бухгалтерия предприятия".
//
// Параметры:
//	ДокументСсылка - Документ, для которого необходимо получить реквизиты.
//
// Возвращаемое значение:
//	Структура - Структура реквизитов документа.
//
Функция РеквизитыДокументаДляОбменаСБухгалтерией(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств.КорреспондирующийСчет КАК КорреспондирующийСчет,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочиеРасходы)
	|	И ДанныеДокумента.СтатьяДвиженияДенежныхСредств.КорреспондирующийСчет <> """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.НомерСтроки");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КорреспондирующийСчет = Выборка.КорреспондирующийСчет;
		СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДвиженияДенежныхСредств;
	Иначе
		КорреспондирующийСчет = "";
		СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	КонецЕсли;
			
	ВидОперации = "ПрочийРасход";
	
	Если Найти(КорреспондирующийСчет, "66") <> 0
		ИЛИ Найти(КорреспондирующийСчет, "67") <> 0 Тогда
		ВидОперации = "РасчетыПоКредитамИЗаймам";		
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("ВидОперации, Счет, СтатьяДвиженияДенежныхСредств",
		ВидОперации,
		КорреспондирующийСчет,
		СтатьяДвиженияДенежныхСредств);
	
	Возврат СтруктураРеквизитов;
		
КонецФункции

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата                    КАК Период,
	|	ДанныеДокумента.Организация             КАК Организация,
	|	ДанныеДокумента.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.КассаПолучатель         КАК КассаПолучатель,
	|	ДанныеДокумента.ДокументОснование       КАК ДокументОснование,
	|	ДанныеДокумента.Касса                   КАК Касса,
	|	ДанныеДокумента.КассаККМ                КАК КассаККМ,
	|	ДанныеДокумента.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	ВЫБОР	КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу)
	|			ТОГДА ЕСТЬNULL(СправочникКассыПолучатель.КассаУправляющейСистемы, ЛОЖЬ) // Это ошибочная ситуация, если СправочникКассы.КассаУправляющейСистемы равно NULL
	|			ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                   КАК КассаПолучательУправляющейСистемы,
	// Касса отправитель может быть кассой центрального офиса только в случае если документ был создан в Управляющей
	// системе.
	|	ЕСТЬNULL(СправочникКассы.КассаУправляющейСистемы, ЛОЖЬ) КАК КассаОтправительУправляющаяСистема
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.Кассы КАК СправочникКассыПолучатель
	|ПО
	|	СправочникКассыПолучатель.Ссылка = ДанныеДокумента.КассаПолучатель
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.Кассы КАК СправочникКассы
	|ПО
	|	СправочникКассы.Ссылка = ДанныеДокумента.Касса
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();

	
	ТекстЗапроса = ТекстЗапросаТаблицаДенежныеСредстваНаличные() + ПолучитьРазделитьЗапросов()
		+ ТекстЗапросаТаблицаДенежныеСредстваКПоступлениюНаличные() + ПолучитьРазделитьЗапросов()
		+ ТекстЗапросТаблицаВыплатаЗарплаты() + ПолучитьРазделитьЗапросов()
		+ ТекстЗапросТаблицаРасчетыСПоставщиками() + ПолучитьРазделитьЗапросов()
		+ ТекстЗапросТаблицаДенежныеСредстваКВыплате() + ПолучитьРазделитьЗапросов()
		+ ТекстЗапросаТаблицаДенежныеСредстваККМ() + ПолучитьРазделитьЗапросов()
		+ ТекстЗапросаТаблицаРасчетыСКлиентами();
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ДокументОснование", Реквизиты.ДокументОснование);
	Запрос.УстановитьПараметр("ПолучательКассаРТ", НЕ Реквизиты.КассаПолучательУправляющейСистемы);
	Запрос.УстановитьПараметр("ОтправительКассаУС", Реквизиты.КассаОтправительУправляющаяСистема);
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(Реквизиты.ХозяйственнаяОперация));
	
	ИспользоватьРасчетыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыСКлиентами");
	Запрос.УстановитьПараметр("ИспользоватьРасчетыСКлиентами", ИспользоватьРасчетыСКлиентами);
	
	ПоРаспоряжению = Ложь;
	
	Если ЗначениеЗаполнено(Реквизиты.ДокументОснование) И (ТипЗнч(Реквизиты.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") 
		ИЛИ ТипЗнч(Реквизиты.ДокументОснование) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций")) Тогда
		ПоРаспоряжению = Истина;
	КонецЕсли;
	Запрос.УстановитьПараметр("ПоРаспоряжению", ПоРаспоряжению);
	
	МассивПустыхДокументовРасчета = Новый Массив;
	МассивПустыхДокументовРасчета.Добавить(Документы.ПоступлениеТоваров.ПустаяСсылка());
	МассивПустыхДокументовРасчета.Добавить(Документы.ПриходныйКассовыйОрдер.ПустаяСсылка());
	МассивПустыхДокументовРасчета.Добавить(Документы.ЗаказПоставщику.ПустаяСсылка());
	МассивПустыхДокументовРасчета.Добавить(Документы.ВводОстатковРасчетовСКлиентами.ПустаяСсылка());
	МассивПустыхДокументовРасчета.Добавить(Документы.ВозвратТоваровОтПокупателя.ПустаяСсылка());
	МассивПустыхДокументовРасчета.Добавить(Неопределено);
	
	Запрос.УстановитьПараметр("МассивПустыхДокументовРасчета", МассивПустыхДокументовРасчета);
	
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицыДляДвижений = СтруктураДополнительныеСвойства.ТаблицыДляДвижений;
	ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваНаличные",             МассивРезультатов[0].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваКПоступлениюНаличные", МассивРезультатов[1].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаВыплаченнаяЗарплата",                  МассивРезультатов[2].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПоставщиками",                 МассивРезультатов[3].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваКВыплате",             МассивРезультатов[4].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваККМ",                  МассивРезультатов[5].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСКлиентами",                    МассивРезультатов[6].Выгрузить());
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Расходный кассовый ордер
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "РКО";
	КомандаПечати.Представление = НСтр("ru = 'Расходный кассовый ордер'");
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	// Квитанция к сумке
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КвитанцияКСумке";
	КомандаПечати.Представление = НСтр("ru = 'Квитанция к сумке'");
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 60;
	
	// Накладная к сумке
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьПрепроводительнаяВедомостьНакладнаяКСумке";
	КомандаПечати.Представление = НСтр("ru = 'Накладная к сумке'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюРТКлиент.ОбработкаКомандыПечатиПрепроводительнойВедомостиНакладнойКСумке";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.ДополнительныеПараметры.Вставить("ВариантПечати", "Накладная");
	КомандаПечати.Порядок = 70;
	
	// Препроводительная ведомость к сумке.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьПрепроводительнаяВедомостьНакладнаяКСумке";
	КомандаПечати.Представление = НСтр("ru = 'Препроводительная ведомость к сумке'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюРТКлиент.ОбработкаКомандыПечатиПрепроводительнойВедомостиНакладнойКСумке";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.ДополнительныеПараметры.Вставить("ВариантПечати", "ПрепроводительнаяВедомость");
	КомандаПечати.Порядок = 75;
	
	// Препроводительная ведомость к сумке.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьПрепроводительнаяВедомостьНакладнаяКСумке";
	КомандаПечати.Представление = НСтр("ru = 'Препроводительная ведомость и накладная к сумке'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюРТКлиент.ОбработкаКомандыПечатиПрепроводительнойВедомостиНакладнойКСумке";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.ДополнительныеПараметры.Вставить("ВариантПечати", "ПрепроводительнаяВедомостьНакладная");
	КомандаПечати.Порядок = 80;
	
	// Платежная ведомость
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати  = "Документ.ЗарплатаКВыплатеОрганизаций";
	КомандаПечати.Идентификатор   = "ПечатьТ53";
	КомандаПечати.Представление   = НСтр("ru = 'Платежная ведомость'");
	КомандаПечати.СписокФорм      = "ФормаСписка";
	КомандаПечати.МестоРазмещения = "ПодменюПечатьВыплата";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.Порядок = 85;
	
КонецПроцедуры

// Функция формирует печатные формы документа.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РКО") Тогда
	
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РКО",
				ПараметрыПечати.Представление, 
				СформироватьПечатнуюФормуКО2(МассивОбъектов, ОбъектыПечати));
	
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьПрепроводительнаяВедомостьНакладнаяКСумке") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечатьПрепроводительнаяВедомостьНакладнаяКСумке",
				ПараметрыПечати.Представление, 
				СформироватьПечатнуюФормуПрепроводительнаяВедомостьНакладнаяКСумке(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КвитанцияКСумке") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КвитанцияКСумке",
				ПараметрыПечати.Представление, 
				СформироватьПечатнуюФормуКвитанцияКСумке(МассивОбъектов, ОбъектыПечати));
	
	КонецЕсли;
	
КонецПроцедуры

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

Функция ПодготовитьДанныеДляПробитияЧека(ДокументСсылка, РаспределениеВыручкиПоСекциям, НомерЧека) Экспорт
	
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	// Общие параметры чека
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("КассаККМ");
	СтруктураРеквизитов.Вставить("Касса");
	СтруктураРеквизитов.Вставить("ШаблонРКО", "Касса.ШаблонРКО");
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("Дата");
	СтруктураРеквизитов.Вставить("Ответственный");
	СтруктураРеквизитов.Вставить("ДоговорПлатежногоАгента");
	СтруктураРеквизитов.Вставить("ВидНалога");
	СтруктураРеквизитов.Вставить("СуммаДокумента");
	СтруктураРеквизитов.Вставить("Выдать");
	СтруктураРеквизитов.Вставить("Основание");
	СтруктураРеквизитов.Вставить("ХозяйственнаяОперация");
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("НаименованиеПолное");
	СтруктураРеквизитов.Вставить("ИНН");
	СтруктураРеквизитов.Вставить("КПП");
	РеквизитыОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.Организация, СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЭлектронныйЧекSMSПередаютсяПрограммой1С");
	СтруктураРеквизитов.Вставить("ЭлектронныйЧекEmailПередаютсяПрограммой1С");
	СтруктураРеквизитов.Вставить("СерийныйНомер");
	СтруктураРеквизитов.Вставить("Магазин");
	СтруктураРеквизитов.Вставить("Код");
	СтруктураРеквизитов.Вставить("СпособФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.СпособФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ДопустимоеРасхождениеФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.ДопустимоеРасхождениеФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ТипОборудования", "ПодключаемоеОборудование.ТипОборудования");
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.КассаККМ, СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Наименование");
	СтруктураРеквизитов.Вставить("ИНН");
	РеквизитыКассир = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.Ответственный.ФизическоеЛицо, СтруктураРеквизитов);
	
	Если РеквизитыДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
	Иначе
		ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств;
	КонецЕсли;
	
	ОбщиеПараметры.Электронно = Ложь;
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.ДокументОснование = ДокументСсылка;
	
	ОбщиеПараметры.Кассир          = РеквизитыКассир.Наименование;
	ОбщиеПараметры.Вставить("ИмяКассира", РеквизитыКассир.Наименование);
	ОбщиеПараметры.КассирИНН       = РеквизитыКассир.ИНН;
	
	ОбщиеПараметры.Организация    = РеквизитыДокумента.Организация;
	ОбщиеПараметры.ОрганизацияНазвание = РеквизитыОрганизация.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = РеквизитыОрганизация.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = РеквизитыОрганизация.КПП;
	ОбщиеПараметры.НомерКассы     = РеквизитыКассыККМ.Код;
	ОбщиеПараметры.НомерЧека      = НомерЧека;
	
	ОбщиеПараметры.НомерСмены = 1;
	
	СведенияООрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(РеквизитыДокумента.Организация, РеквизитыДокумента.Дата);
	АдресМагазина = ОбщегоНазначенияРТ.АдресМагазина(РеквизитыКассыККМ.Магазин);
	
	СерийныйНомер = РеквизитыКассыККМ.СерийныйНомер;
	Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда
		СерийныйНомер = "1";
	КонецЕсли;
	
	ОбщиеПараметры.АдресРасчетов = АдресМагазина;
	ОбщиеПараметры.МестоРасчетов = Строка(РеквизитыКассыККМ.Магазин) + " " + АдресМагазина;
	ОбщиеПараметры.АдресМагазина = АдресМагазина;
	ОбщиеПараметры.НаименованиеМагазина = Строка(РеквизитыКассыККМ.Магазин);
	ОбщиеПараметры.СерийныйНомер = СерийныйНомер;
	ОбщиеПараметры.СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложенияККТ(РеквизитыДокумента.Организация, 
																		РеквизитыДокумента.ВидНалога);
	
	ПодключаемоеОборудованиеРТ.ЗаполнитьПараметрыПлатежногоДоговора(ОбщиеПараметры, 
																	РеквизитыДокумента.ДоговорПлатежногоАгента,
																	РеквизитыДокумента.СуммаДокумента);
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.ДоговорПлатежногоАгента) Тогда
		НомерСекции = РаспределениеВыручкиПоСекциям.СоответствиеДоговоровСекциям.Получить(РеквизитыДокумента.ДоговорПлатежногоАгента);
	Иначе
		НомерСекции = РаспределениеВыручкиПоСекциям.НомерСекцииДляПриходныхКассовыхОрдеров;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("НомерСекции", НомерСекции);
	
	РасшифровкаПлатежа = РасшифровкаПлатежа(ДокументСсылка);
	
	СуммаДокументовРасчетов = 0;
	
	ИспользоватьРасчетыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыСКлиентами");
	
	Для Каждого СтрокаПлатежа Из РасшифровкаПлатежа Цикл
		ПараметрыДокумента.Вставить("ПризнакСпособаРасчета", СтрокаПлатежа.ПризнакСпособаРасчета);
		Если ЗначениеЗаполнено(СтрокаПлатежа.ДокументРасчетовСКонтрагентом) 
			И ИспользоватьРасчетыСКлиентами
			И НЕ ТипЗнч(СтрокаПлатежа.ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
			И НЕ ТипЗнч(СтрокаПлатежа.ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ЧекККМ") Тогда
			ПодключаемоеОборудованиеРТ.ДобавитьСтрокиДляФискализацииТоваров(СтрокаПлатежа.ДокументРасчетовСКонтрагентом, 
																			ПараметрыДокумента, 
																			ОбщиеПараметры, 
																			СуммаДокументовРасчетов);
		Иначе 
			СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
			
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Возврат :'") + " " + РеквизитыДокумента.Выдать + Символы.ПС
				+ НСтр("ru = 'Основание:'") + " " + РеквизитыДокумента.Основание;
			СтрокаПозицииЧека.Количество   = 1;
			СтрокаПозицииЧека.Цена         = СтрокаПлатежа.Сумма;
			СтрокаПозицииЧека.ЦенаСоСкидками = СтрокаПлатежа.Сумма;
			СтрокаПозицииЧека.Сумма        = СтрокаПлатежа.Сумма;
			СтрокаПозицииЧека.НомерСекции  = НомерСекции;
			Если ОбщиеПараметры.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ОСН Тогда
				ЗначСтавкиНДС = УчетНДС.СтавкаНДСПоУмолчанию(ДокументСсылка.Дата);
				СтрокаПозицииЧека.СтавкаНДС = ПодключаемоеОборудованиеРТ.СтавкаНДСВФорматеБПО(ЗначСтавкиНДС, Ложь);	
			Иначе
				СтрокаПозицииЧека.СтавкаНДС = Неопределено;
			КонецЕсли;
			СтрокаПозицииЧека.ПризнакСпособаРасчета = СтрокаПлатежа.ПризнакСпособаРасчета;
			СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
			
			ПодключаемоеОборудованиеРТ.ЗаполнитьПараметрыПлатежногоДоговораВСтроке(ОбщиеПараметры, СтрокаПозицииЧека);
			
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
			СуммаДокументовРасчетов = СуммаДокументовРасчетов + СтрокаПлатежа.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	ОбщиеПараметры.КассаККМ 		= РеквизитыДокумента.КассаККМ;
	ОбщиеПараметры.ШаблонЧека 		= РеквизитыДокумента.ШаблонРКО;
	ОбщиеПараметры.ТорговыйОбъект 	= РеквизитыКассыККМ.Магазин;
	
	Если РеквизитыКассыККМ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		// При необходимости будет проведен формато-логический контроль
		ОбщиеПараметры.СпособФорматноЛогическогоКонтроля = РеквизитыКассыККМ.СпособФорматноЛогическогоКонтроля;
		ОбщиеПараметры.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = РеквизитыКассыККМ.ДопустимоеРасхождениеФорматноЛогическогоКонтроля;
		Если ФорматноЛогическийКонтрольКлиентСервер.НуженФорматноЛогическийКонтроль(ОбщиеПараметры) Тогда
			ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаОплаты = Новый Структура();
	СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
	СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Наличные'"));
	СтрокаОплаты.Вставить("Сумма", РеквизитыДокумента.СуммаДокумента);
	ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	РазницаСумм = СуммаДокументовРасчетов - РеквизитыДокумента.СуммаДокумента;
	Если РазницаСумм > 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Постоплата);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Постоплата'"));
		СтрокаОплаты.Вставить("Сумма", РазницаСумм);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции // ПодготовитьДанныеДляПробитияЧека()

// Заполнение признака способа расчета в строке Расшифровка платежа
//
// Параметры:
//  Объект - ДокументОбъект.ОплатаОтПокупателяПлатежнойКартой, ДанныеФормыСтруктуры
//  ДокументРасчетовСКонтрагентом - ДокументСсылка.ПоступлениеТоваров, ДокументСсылка.ПриходныйКассовыйОрдер, ДокументСсылка.ЗаказПоставщику, ДокументСсылка.ВозвратТоваровОтПокупателя, ДокументСсылка.ВводОстатковРасчетовСКлиентами
//  СуммаПлатежа - Число,  Реквизит "Сумма" строки "РасшифровкаПлатежа"
//  ПризнакСпособаРасчета - Перечисление.ПризнакиСпособаРасчета, Реквизит "ПризнакСпособаРасчета" строки "РасшифровкаПлатежа"
//
Процедура ЗаполнениеПризнакаСпособаРасчета(Объект, ДокументРасчетовСКонтрагентом, СуммаПлатежа, ПризнакСпособаРасчета) Экспорт
	
	ХозОперация = Объект.ХозяйственнаяОперация;
	
	Если ХозОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту 
		Или ХозОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы Тогда
		
		Если НЕ ДокументРасчетовСКонтрагентом = Неопределено
			И (ТипЗнч(ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
			ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")) Тогда 
			Если СуммаПлатежа >= ДокументРасчетовСКонтрагентом.СуммаДокумента Тогда
				ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
			Иначе
				ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// Заполнить признака способа расчета в строке Расшифровка платежа
//
// Параметры:
//  Объект - ДокументОбъект.РасходныйКассовыйОрдер, ДанныеФормыСтруктуры
//
Процедура ЗаполнениеПризнаковСпособовРасчета(Объект) Экспорт
	
	Для каждого СтрокаРасшифровкиПлатежа Из Объект.РасшифровкаПлатежа Цикл
		ЗаполнениеПризнакаСпособаРасчета(Объект,
										 СтрокаРасшифровкиПлатежа.ДокументРасчетовСКонтрагентом, 
										 СтрокаРасшифровкиПлатежа.Сумма, 
										 СтрокаРасшифровкиПлатежа.ПризнакСпособаРасчета)
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция проверяет корректность заполнения документа для печати форм сопровождающих инкассацию.
// Параметры:
//           ДанныеДокумента      - ВыборкаИзРезультатаЗапроса - Содержит данные документа выводимого на печать.
//           ТекстОшибки          - Строка - Параметр формирует команда объекта документа печати, будет заполнен если
//                                           печать выполняется из формы списка документа.
//                                           Правильное поведение, выполнять из открытой формы документа, так как форма
//                                           содержит не сохраняемую в объекте таблицу с перечнем банкнот.
//           ТаблицаСпискаБанкнот - ДанныеФормыКоллекция - Коллекция строк таблицы (с банкнотами) расположенной на
//                                                         форме документа.
// Возвращаемое значение:
//           РезультатОтрицательнойПроверки - Булево - Если ошибки ИСТИНА, необходимо не выполнять печать.
Функция ЕстьОшибкиПечатиИнкассации(ДанныеДокумента, ТекстОшибки = "", ТаблицаСпискаБанкнот = Неопределено, ТаблицаРасшифровкиПлатежей = Неопределено)
	
	Если ДанныеДокумента.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		РезультатОтрицательнойПроверки = Истина;
		ТекстОшибки = НСтр("ru = 'Хозяйственная операция документа не соответствует выбранной печатной форме'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	Иначе
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			РезультатОтрицательнойПроверки = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ИначеЕсли ЗначениеЗаполнено(ТаблицаСпискаБанкнот) И ТаблицаСпискаБанкнот.Итог("Сумма") <> ДанныеДокумента.СуммаДокумента Тогда
			РезультатОтрицательнойПроверки = Истина;
			ТекстОшибки = НСтр("ru = 'Сумма документа не соответствует сумме банкнот'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ИначеЕсли ЗначениеЗаполнено(ТаблицаСпискаБанкнот) И ТаблицаРасшифровкиПлатежей.Итог("Сумма") <> ДанныеДокумента.СуммаДокумента Тогда
			РезультатОтрицательнойПроверки = Истина;
			ТекстОшибки = НСтр("ru = 'Сумма документа не соответствует сумме платежей'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Иначе
			РезультатОтрицательнойПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатОтрицательнойПроверки;
	
КонецФункции

// Процедура заполняет параметры области макета табличного документа выводимого на печать.
// Параметры:
//           ОбластьМакетаЛицеваяСторона - ТабличныйДокумент - Область табличного документа для которой необходимо
//                                                             заполнить параметры.
//           СведенияООрганизации        - Структура - Содержит значения для заполнения параметров.
//           ДанныеПечати                - ВыборкаИзРезультатаЗапроса - Содержит данные документа выводимого на печать.
Процедура ЗаполнитьПараметрыМакетаДляПечатиЛицевойСтороныИнкассации(ОбластьМакетаСекцияОсновнаяЧасть, ОбластьМакетаСекцияТаблицаОсновнаяЧасть, СведенияООрганизации, ДанныеПечати)
	
	ОбластьМакетаСекцияОсновнаяЧасть.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияООрганизации, "ПолноеНаименование", Ложь);
	ОбластьМакетаСекцияОсновнаяЧасть.Параметры.ИНН = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияООрганизации, "ИНН", Ложь);
	ОбластьМакетаСекцияОсновнаяЧасть.Параметры.РасчетныйСчет = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияООрганизации, "НомерСчета", Ложь);
	ОбластьМакетаСекцияОсновнаяЧасть.Параметры.НаименованиеБанкаВносителя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияООрганизации, "Банк", Ложь);
	ОбластьМакетаСекцияОсновнаяЧасть.Параметры.БИК = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияООрганизации, "БИК", Ложь);
	ОбластьМакетаСекцияОсновнаяЧасть.Параметры.НаименованиеБанкаПолучателя = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияООрганизации, "Банк", Ложь);
	Копеек = (ДанныеПечати.СуммаДокумента - Цел(ДанныеПечати.СуммаДокумента)) * 100;
	ОбластьМакетаСекцияОсновнаяЧасть.Параметры.КопеекЦифрами = Формат(Копеек, "ЧЦ=2; ЧДЦ=0; ЧН='00'");
	ОбластьМакетаСекцияОсновнаяЧасть.Параметры.СуммаПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(Цел(ДанныеПечати.СуммаДокумента), Истина);
	ОбластьМакетаСекцияТаблицаОсновнаяЧасть.Параметры.СуммаЦифрами = ФормированиеПечатныхФормСервер.ФорматСумм(ДанныеПечати.СуммаДокумента, "");
	ОбластьМакетаСекцияТаблицаОсновнаяЧасть.Параметры.НомерСумки = Сред(ДанныеПечати.НомерСумки, Найти(ДанныеПечати.НомерСумки, "/") + 1.00);
	ОбластьМакетаСекцияОсновнаяЧасть.Параметры.НомерВедомости = ДанныеПечати.НомерСумки;
	ОбластьМакетаСекцияОсновнаяЧасть.Параметры.ДатаВедомости = Формат(ДанныеПечати.ДатаДокумента, "ДЛФ=DD");
	
КонецПроцедуры

//Процедура формирует QR код на лицевой стороне табличного документа выводимого на печать
Процедура ЗаполнитьQRКодДляПечатиЛицевойСтороныИнкассации(ОбластьМакетаСекцияОсновнаяЧасть, ТаблицаОписьСдаваемыхНаличныхДенег, ТаблицаРасшифровкаПлатежа, ДанныеПечати, СведенияООрганизации)
	
	XMLШтрихКода = СоздатьXMLШтрихкода(ТаблицаОписьСдаваемыхНаличныхДенег, ДанныеПечати, СведенияООрганизации, ТаблицаРасшифровкаПлатежа);
	Если XMLШтрихКода <> Неопределено Тогда
		ОбластьМакетаСекцияОсновнаяЧасть.Рисунки.Рисунок.Картинка = СформироватьШтрихкодПечатнойФормы(XMLШтрихКода, ОбластьМакетаСекцияОсновнаяЧасть.Рисунки.Рисунок);
	Иначе
		ОбластьМакетаСекцияОсновнаяЧасть.Рисунки.Удалить("Рисунок");
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаДенежныеСредстваНаличные()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Касса КАК Касса,
	|	ДанныеДокумента.Касса.Магазин КАК Магазин,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЕСТЬNULL(ТабличнаяЧастьРасшифровкаПлатежа.Сумма, ДанныеДокумента.СуммаДокумента) КАК Сумма,
	|	ЕСТЬNULL(ТабличнаяЧастьРасшифровкаПлатежа.ДоговорПлатежногоАгента, ДанныеДокумента.ДоговорПлатежногоАгента) КАК ДоговорПлатежногоАгента,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧастьРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств ЕСТЬ NULL 
	|				ИЛИ ТабличнаяЧастьРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|			ТОГДА &СтатьяДвиженияДенежныхСредств
	|		ИНАЧЕ ТабличнаяЧастьРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТабличнаяЧастьРасшифровкаПлатежа
	|		ПО (ТабличнаяЧастьРасшифровкаПлатежа.Ссылка = &Ссылка)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ &ОтправительКассаУС
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧастьРасшифровкаПлатежа.НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДенежныеСредстваККМ()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ЕСТЬNULL(ТабличнаяЧастьРасшифровкаПлатежа.ДоговорПлатежногоАгента, ДанныеДокумента.ДоговорПлатежногоАгента) КАК ДоговорПлатежногоАгента,
	|	ДанныеДокумента.КассаККМ КАК КассаККМ,
	|	ЕСТЬNULL(ТабличнаяЧастьРасшифровкаПлатежа.Сумма, ДанныеДокумента.СуммаДокумента) КАК Сумма
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТабличнаяЧастьРасшифровкаПлатежа
	|		ПО (ТабличнаяЧастьРасшифровкаПлатежа.Ссылка = ДанныеДокумента.Ссылка)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|	И ДанныеДокумента.ПробиватьЧекиПоКассеККМ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ЕСТЬNULL(ТабличнаяЧастьРасшифровкаПлатежа.ДоговорПлатежногоАгента, ДанныеДокумента.ДоговорПлатежногоАгента),
	|	ДанныеДокумента.КассаККМ,
	|	ЕСТЬNULL(ТабличнаяЧастьРасшифровкаПлатежа.Сумма, ДанныеДокумента.СуммаДокумента)
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТабличнаяЧастьРасшифровкаПлатежа
	|		ПО (ТабличнаяЧастьРасшифровкаПлатежа.Ссылка = ДанныеДокумента.Ссылка)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|	И ДанныеДокумента.ПробиватьЧекиПоКассеККМ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСКлиентами()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Касса.Магазин КАК Магазин,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(ТабличнаяЧастьРасшифровкаПлатежа.Сумма, ДанныеДокумента.СуммаДокумента) КАК Сумма,
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧастьРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом В (&МассивПустыхДокументовРасчета)
	|				И (ТабличнаяЧастьРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|					ИЛИ ТабличнаяЧастьРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					ИЛИ ТабличнаяЧастьРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ЧекККМ)
	|			ТОГДА ТабличнаяЧастьРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом
	|		ИНАЧЕ ТабличнаяЧастьРасшифровкаПлатежа.Ссылка
	|	КОНЕЦ КАК ДокументРасчета
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТабличнаяЧастьРасшифровкаПлатежа
	|		ПО (ТабличнаяЧастьРасшифровкаПлатежа.Ссылка = ДанныеДокумента.Ссылка)
	|ГДЕ
	|	&ИспользоватьРасчетыСКлиентами
	|	И ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧастьРасшифровкаПлатежа.НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДенежныеСредстваКПоступлениюНаличные()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата                     КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)   КАК ВидДвижения,
	|	ДанныеДокумента.КассаПолучатель.Владелец КАК Организация,
	|	ДанныеДокумента.КассаПолучатель          КАК Касса,
	|	ДанныеДокумента.Ссылка                   КАК ДокументПередачи,
	|	ДанныеДокумента.СуммаДокумента           КАК Сумма,
	|	ДанныеДокумента.Касса                    КАК КассаОтправитель
	|	
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|	)
	|	И (&ПолучательКассаРТ ИЛИ &ОтправительКассаУС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата                   КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация            КАК Организация,
	|	ДанныеДокумента.КассаККМ               КАК Касса,
	|	ДанныеДокумента.Ссылка                 КАК ДокументПередачи,
	|	ДанныеДокумента.СуммаДокумента         КАК Сумма,
	|	ДанныеДокумента.Касса                  КАК КассаОтправитель
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросТаблицаВыплатаЗарплаты()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Касса.Магазин         КАК Магазин,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо  КАК Работник,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма    КАК Сумма,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка   КАК ПлатежнаяВедомость
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ПО
	|	РасходныйКассовыйОрдер.ПлатежнаяВедомость = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.ОтметкаОВыплатеЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОтметокОВыплатеЗарплаты.Выплачено)
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ВыплаченнаяЗарплата КАК ВыплаченнаяЗарплата
	|ПО
	|	ВыплаченнаяЗарплата.ПлатежнаяВедомость = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
	|	И ВыплаченнаяЗарплата.Работник = ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо
	|	И ВыплаченнаяЗарплата.Регистратор <> РасходныйКассовыйОрдер.Ссылка
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &Ссылка
	|	И РасходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям)
	|	И ВыплаченнаяЗарплата.Работник ЕСТЬ NULL
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Касса.Магазин                                      КАК Магазин,
	|	ВЫРАЗИТЬ(РасходныйКассовыйОрдер.Контрагент КАК Справочник.ФизическиеЛица) КАК Работник,
	|	РасходныйКассовыйОрдер.СуммаДокумента                                     КАК Сумма,
	|	РасходныйКассовыйОрдер.ПлатежнаяВедомость                                 КАК ПлатежнаяВедомость
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &Ссылка
	|	И РасходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику)";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросТаблицаРасчетыСПоставщиками()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	РасшифровкаПлатежа.Ссылка.Дата КАК Период,
	|	РасшифровкаПлатежа.Ссылка.Контрагент КАК Поставщик,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ПоступлениеТоваров
	|			ТОГДА ВЫБОР
	|					КОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.ЗаказПоставщику = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|						ТОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом
	|					ИНАЧЕ РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.ЗаказПоставщику
	|				КОНЕЦ
	|		ИНАЧЕ РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом
	|	КОНЕЦ КАК ДокументРасчета,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.Магазин ЕСТЬ НЕ NULL 
	|			ТОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.Магазин
	|		ИНАЧЕ РасшифровкаПлатежа.Ссылка.Касса.Магазин
	|	КОНЕЦ КАК Магазин,
	|	РасшифровкаПлатежа.Сумма КАК Сумма,
	|	РасшифровкаПлатежа.Сумма КАК КОплате,
	|	0 КАК КПоступлению,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) КАК ФормаОплаты
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка = &Ссылка И НЕ &ОтправительКассаУС
	|	И РасшифровкаПлатежа.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)";

	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросТаблицаДенежныеСредстваКВыплате()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.Ссылка.Дата                   КАК Период,
	|	РасшифровкаПлатежа.Ссылка.ХозяйственнаяОперация  КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)           КАК ВидДвижения,
	|	&ДокументОснование                               КАК РаспоряжениеНаРасходованиеДенежныхСредств,
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом КАК ДокументРасчета,
	|	РасшифровкаПлатежа.Сумма                         КАК Сумма,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.Магазин ЕСТЬ НЕ NULL 
	|			ТОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.Магазин
	|		ИНАЧЕ РасшифровкаПлатежа.Ссылка.Касса.Магазин
	|	КОНЕЦ КАК Магазин
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка = &Ссылка И &ПоРаспоряжению И НЕ &ОтправительКассаУС
	|УПОРЯДОЧИТЬ ПО
	|	РасшифровкаПлатежа.НомерСтроки";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьРазделитьЗапросов()

	СтрокаРазделителя = 
	"
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат СтрокаРазделителя

КонецФункции // ПолучитьРазделитьЗапросов()

Функция РасшифровкаПлатежа(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Сумма КАК Сумма,
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.ПризнакСпособаРасчета КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &ДокументСсылка";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

Функция СоздатьXMLШтрихкода(ТаблицаОписьСдаваемыхНаличныхДенег, ДанныеПечати, СведенияООрганизации, ТаблицаРасшифровкаПлатежа)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("bag_sheet");
	ЗаписьXML.ЗаписатьНачалоЭлемента("date");
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd")));
	ЗаписьXML.ЗаписатьКонецЭлемента();//date
	ЗаписьXML.ЗаписатьНачалоЭлемента("client_ink");
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(ДанныеПечати.Касса.ИндивидуальныйНомерОбъектаИнкассации));
	ЗаписьXML.ЗаписатьКонецЭлемента();//clientink
	ЗаписьXML.ЗаписатьНачалоЭлемента("number");
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(Сред(ДанныеПечати.НомерСумки, Найти(ДанныеПечати.НомерСумки, "/") + 1.00)));
	ЗаписьXML.ЗаписатьКонецЭлемента();//number (номерсумки)
	//По логике Сбербанка здесь необходим цикл, если оплата идет в несколько банков, в Рознице в этом нет необходимости.
	ЗаписьXML.ЗаписатьНачалоЭлемента("sum_by_acc");
	
		ЗаписьXML.ЗаписатьНачалоЭлемента("account");
		ЗаписьXML.ЗаписатьТекст(XMLСтрока(СведенияООрганизации.НомерСчета));
		ЗаписьXML.ЗаписатьКонецЭлемента(); //account
		ЗаписьXML.ЗаписатьНачалоЭлемента("bic");
		ЗаписьXML.ЗаписатьТекст(XMLСтрока(СведенияООрганизации.БИК));
		ЗаписьXML.ЗаписатьКонецЭлемента();//bic
		
		Для Каждого Строка Из ТаблицаРасшифровкаПлатежа Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("sum_by_symb");
			ЗаписьXML.ЗаписатьНачалоЭлемента("symbol");
			Если ЗначениеЗаполнено(Строка.ОперацияКассовойОтчетности.Код) Тогда
				ЗаписьXML.ЗаписатьТекст(XMLСтрока(Строка.ОперацияКассовойОтчетности.Код));
			Иначе
				ЗаписьXML.ЗаписатьТекст(XMLСтрока(?(СведенияООрганизации.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"), "02", "19")));
			КонецЕсли;
			ЗаписьXML.ЗаписатьКонецЭлемента();//symbol
			ЗаписьXML.ЗаписатьНачалоЭлемента("sum");
			СуммаСтроки = СтрЗаменить(Строка(Строка.Сумма), Символы.НПП, "");
			ЗаписьXML.ЗаписатьТекст(XMLСтрока(СуммаСтроки + ".00"));
			ЗаписьXML.ЗаписатьКонецЭлемента();//sum
			ЗаписьXML.ЗаписатьКонецЭлемента();//sumbysymb
		КонецЦикла;
		
	ЗаписьXML.ЗаписатьКонецЭлемента(); //sum_by_acc
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("extra");
	Если ЗначениеЗаполнено(ДанныеПечати.Ссылка.Комментарий) Тогда
		ЗаписьXML.ЗаписатьТекст(XMLСтрока(ДанныеПечати.Ссылка.Комментарий));
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Для Каждого СтрокаНоминалаБанкноты Из ТаблицаОписьСдаваемыхНаличныхДенег Цикл
		
		Если СтрокаНоминалаБанкноты.КоличествоБанкнот <> 0 Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("inventory");
			ЗаписьXML.ЗаписатьНачалоЭлемента("nominal");
			НоминалСтроки = СтрЗаменить(Строка(СтрокаНоминалаБанкноты.Номинал), Символы.НПП, "");
			ЗаписьXML.ЗаписатьТекст(XMLСтрока(НоминалСтроки + ".00"));
			ЗаписьXML.ЗаписатьКонецЭлемента();//nominal
			ЗаписьXML.ЗаписатьНачалоЭлемента("quantity");
			ЗаписьXML.ЗаписатьТекст(XMLСтрока(СтрокаНоминалаБанкноты.КоличествоБанкнот));
			ЗаписьXML.ЗаписатьКонецЭлемента(); //quantity
			ЗаписьXML.ЗаписатьНачалоЭлемента("cur_code");
			ЗаписьXML.ЗаписатьТекст(XMLСтрока("810"));
			ЗаписьXML.ЗаписатьКонецЭлемента();//cur_code
			ЗаписьXML.ЗаписатьНачалоЭлемента("cash_type");
			Если СтрокаНоминалаБанкноты.ПараметрСуммаБанкнот = "СуммаРуб_5000" ИЛИ СтрокаНоминалаБанкноты.ПараметрСуммаБанкнот = "СуммаРуб_1000" 
				ИЛИ СтрокаНоминалаБанкноты.ПараметрСуммаБанкнот = "СуммаРуб_500" ИЛИ СтрокаНоминалаБанкноты.ПараметрСуммаБанкнот = "СуммаРуб_100"
				ИЛИ СтрокаНоминалаБанкноты.ПараметрСуммаБанкнот = "СуммаРуб_50" ИЛИ СтрокаНоминалаБанкноты.ПараметрСуммаБанкнот = "СуммаРуб_10_1" Тогда
				ЗаписьXML.ЗаписатьТекст(XMLСтрока("01"));//cash_type
			Иначе
				ЗаписьXML.ЗаписатьТекст(XMLСтрока("02"));//cash_type
			КонецЕсли;
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();//inventory
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();//bag sheet
	
	ТекстXML = ЗаписьXML.Закрыть();
	ТекстXMLСжатый = Неопределено;
	
	КомпонентаСжатия = ОбщегоНазначения.ПодключитьКомпонентуИзМакета("DataCompression", "ОбщийМакет.КомпонентаСжатияДанных");
	Если КомпонентаСжатия <> Неопределено Тогда
		Результат = КомпонентаСжатия.DeflateКодировать(ТекстXML, ТекстXMLСжатый);
		ТекстXMLСжатый = "@02@" + ТекстXMLСжатый;
	КонецЕсли;
	
	Возврат ТекстXMLСжатый;
	
КонецФункции

Функция СформироватьШтрихкодПечатнойФормы(XMLШтрихКода, Рисунок)
	
	УстановитьПривилегированныйРежим(Истина);
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	УстановитьПривилегированныйРежим(Ложь);
	КоличествоМиллиметровВПикселеВысота = Эталон.Рисунки.Квадрат100Пикселей.Высота / 200;
	КоличествоМиллиметровВПикселеШирина = Эталон.Рисунки.Квадрат100Пикселей.Ширина / 200;
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина"            , Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселеШирина));
	ПараметрыШтрихкода.Вставить("Высота"            , Окр(Рисунок.Высота / КоличествоМиллиметровВПикселеВысота));
	ПараметрыШтрихкода.Вставить("ТипКода"           , 16);
	ПараметрыШтрихкода.Вставить("ОтображатьТекст"   , Истина);
	ПараметрыШтрихкода.Вставить("РазмерШрифта"      , 16);
	ПараметрыШтрихкода.Вставить("УголПоворота"      , Число(0));
	ПараметрыШтрихкода.Вставить("Штрихкод"          , XMLШтрихКода);
	ПараметрыШтрихкода.Вставить("ПрозрачныйФон"     , Истина);
	ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0);
	
	Возврат МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
	
КонецФункции
///////////////////////////////////////////////////////////////////////////////
// Печать

Функция СформироватьПечатнуюФормуКвитанцияКСумке(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	СинонимДокумента  = НСтр("ru='Квитанция к сумке'");
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПФ_MXL_КвитанцияКСумке";
	
	ТабличныйДокумент.ПолеСлева  = 10;
	ТабличныйДокумент.ПолеСправа = 10;
	ТабличныйДокумент.ПолеСверху = 10;
	ТабличныйДокумент.ПолеСнизу  = 10;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходныйКассовыйОрдер.Ссылка                         КАК Ссылка,
	|	РасходныйКассовыйОрдер.Дата                           КАК ДатаДокумента,
	|	РасходныйКассовыйОрдер.Организация                    КАК Организация,
	|	РасходныйКассовыйОрдер.БанковскийСчет                 КАК БанковскийСчет,
	|	РасходныйКассовыйОрдер.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
	|	РасходныйКассовыйОрдер.СуммаДокумента                 КАК СуммаДокумента,
	|	РасходныйКассовыйОрдер.НомерСумки                     КАК НомерСумки
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка В(&МассивОбъектов)
	|";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ДанныеПечати = Запрос.Выполнить().Выбрать();
	ПервыйДокумент = Истина;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РасходныйКассовыйОрдер.ПФ_MXL_КвитанцияКСумке");
	ОбластьМакетаСекцияОсновнаяЧасть          = Макет.ПолучитьОбласть("СекцияОсновнаяЧасть");
	ОбластьМакетаСекцияТаблицаОсновнаяЧасть   = Макет.ПолучитьОбласть("СекцияТаблицаОсновнаяЧасть");
	ОбластьМакетаСекцияТаблицаСтрока          = Макет.ПолучитьОбласть("СекцияТаблицаСтрока");
	ОбластьМакетаСекцияОкончаниеТаблицы       = Макет.ПолучитьОбласть("СекцияОкончаниеТаблицы");
	ОбластьШапкаОборотнаяСторона = Макет.ПолучитьОбласть("ШапкаОборотнаяСторона");
	ТаблицаРасшифровкаПлатежа = МассивОбъектов[0].РасшифровкаПлатежа;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если НЕ ЕстьОшибкиПечатиИнкассации(ДанныеПечати) Тогда
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			СведенияООрганизации       = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаДокумента, , ДанныеПечати.БанковскийСчет);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ТаблицаРасшифровкиПлатежей.ОперацияКассовойОтчетности,
			               |	ТаблицаРасшифровкиПлатежей.Сумма
			               |ПОМЕСТИТЬ ТаблицаРасшифровкиПлатежей
			               |ИЗ
			               |	&ТаблицаРасшифровкиПлатежей КАК ТаблицаРасшифровкиПлатежей
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ТаблицаРасшифровкиПлатежей.ОперацияКассовойОтчетности КАК ОперацияКассовойОтчетности,
			               |	СУММА(ТаблицаРасшифровкиПлатежей.Сумма) КАК Сумма
			               |ИЗ
			               |	ТаблицаРасшифровкиПлатежей КАК ТаблицаРасшифровкиПлатежей
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ТаблицаРасшифровкиПлатежей.ОперацияКассовойОтчетности";
			Запрос.УстановитьПараметр("ТаблицаРасшифровкиПлатежей", ТаблицаРасшифровкаПлатежа);
			ТаблицаРасшифровкаПлатежейИтог = Запрос.Выполнить().Выгрузить();
			
			ЗаполнитьПараметрыМакетаДляПечатиЛицевойСтороныИнкассации(ОбластьМакетаСекцияОсновнаяЧасть, ОбластьМакетаСекцияТаблицаОсновнаяЧасть, СведенияООрганизации, ДанныеПечати);
			ОбластьМакетаСекцияОсновнаяЧасть.Параметры.НаименованиеДокумента = "Квитанция к сумке";
			ОбластьМакетаСекцияОсновнаяЧасть.Параметры.ЗаголовокДокумента    = "Квитанция к сумке №";
			
			ТабличныйДокументТаблицыРасшифровки = Новый ТабличныйДокумент;
			ТабличныйДокументТаблицыРасшифровки.Вывести(ОбластьМакетаСекцияТаблицаОсновнаяЧасть);
				
			ТорговаяВыручка = "";
			Для Каждого Строка Из ТаблицаРасшифровкаПлатежейИтог Цикл
				ОбластьМакетаСекцияТаблицаСтрока.Параметры.КассовыйСимвол = Строка.ОперацияКассовойОтчетности.Код;
				ОбластьМакетаСекцияТаблицаСтрока.Параметры.СуммаНаСимвол  = Строка.Сумма;
				ТабличныйДокументТаблицыРасшифровки.Вывести(ОбластьМакетаСекцияТаблицаСтрока);
				Если НЕ ЗначениеЗаполнено(ТорговаяВыручка) Тогда
					ТорговаяВыручка = Строка.ОперацияКассовойОтчетности.Код + "-" + Строка.ОперацияКассовойОтчетности.Наименование;
				Иначе
					ТорговаяВыручка = ТорговаяВыручка + ", " + Строка.ОперацияКассовойОтчетности.Код + "-" + Строка.ОперацияКассовойОтчетности.Наименование;
				КонецЕсли;
			КонецЦикла;
			ОбластьМакетаСекцияОсновнаяЧасть.Параметры.ТорговаяВыручка = ТорговаяВыручка + ".";
			
			ТабличныйДокументТаблицыРасшифровки.Вывести(ОбластьМакетаСекцияОкончаниеТаблицы);
			ТабличныйДокумент.Вывести(ОбластьМакетаСекцияОсновнаяЧасть);
			ТабличныйДокумент.Присоединить(ТабличныйДокументТаблицыРасшифровки);
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьШапкаОборотнаяСторона);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
КонецФункции

Функция СформироватьПечатнуюФормуПрепроводительнаяВедомостьНакладнаяКСумке(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	// Печать "Препроводительной ведомости к сумке" и "Накладной к сумке" может выполняться отдельно каждая на своем листе
	//                     // или на одном листе обе ведомости
	//                     //                                            //
	// Как будет выполнена печать, устанавливает команда печати, параметр ПараметрыПечати.ВариантПечати
	//                     //
	// ?(ВариантПечати = ПрепроводительнаяВедомостьНакладная - то на листе будет совмещено две ведомости Препроводительная
	// и накладная к сумке //
	// ?(ВариантПечати = ПрепроводительнаяВедомость - то на листе будет выведена одна печатная форма Препроводительная
	// ведомость               //
	// ?(ВариантПечати = Накладная - то на листе будет выведена одна печатная форма Накладная к сумке
	//                     //
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РасходныйКассовыйОрдер.ПФ_MXL_ПрепроводительнаяВедомостьНакладнаяКСумке");
	ТабличныйДокумент = Новый ТабличныйДокумент();
	ОбластьМакетаСекцияОсновнаяЧасть          = Макет.ПолучитьОбласть("СекцияОсновнаяЧасть");
	ОбластьМакетаСекцияТаблицаОсновнаяЧасть   = Макет.ПолучитьОбласть("СекцияТаблицаОсновнаяЧасть");
	ОбластьМакетаСекцияТаблицаСтрока          = Макет.ПолучитьОбласть("СекцияТаблицаСтрока");
	ОбластьМакетаСекцияОкончаниеТаблицы       = Макет.ПолучитьОбласть("СекцияОкончаниеТаблицы");
		
	Если ПараметрыПечати.ВариантПечати = "ПрепроводительнаяВедомостьНакладная" Тогда
		СинонимДокумента  = НСтр("ru='Препроводительная ведомость и накладная к сумке'");
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПФ_MXL_ПрепроводительнаяВедомостьИНакладнаяКСумке";
		ОбластьМакетаОборотнаяСторона             = Макет.ПолучитьОбласть("ОборотнаяСторонаДваЭкземпляра|ВертикальнаяСекция");
	ИначеЕсли ПараметрыПечати.ВариантПечати = "ПрепроводительнаяВедомость" Тогда
		СинонимДокумента  = НСтр("ru='Препроводительная ведомость к сумке'");
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПФ_MXL_ПрепроводительнаяВедомостьКСумке";
		ОбластьМакетаОборотнаяСторона             = Макет.ПолучитьОбласть("ОборотнаяСторона|ВертикальнаяСекция");
	ИначеЕсли ПараметрыПечати.ВариантПечати = "Накладная" Тогда
		СинонимДокумента  = НСтр("ru='Накладная к сумке'");
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПФ_MXL_НакладнаяКСумке";
		ОбластьМакетаОборотнаяСторона             = Макет.ПолучитьОбласть("ОборотнаяСторона|ВертикальнаяСекция");
	КонецЕсли;
	
	ТабличныйДокумент.ПолеСлева  = 10;
	ТабличныйДокумент.ПолеСправа = 10;
	ТабличныйДокумент.ПолеСверху = 10;
	ТабличныйДокумент.ПолеСнизу  = 10;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ОбъектПечати = Неопределено;
	Если НЕ МассивОбъектов.Количество() = 0 Тогда
		
		ОбъектПечати = МассивОбъектов[0];
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
		|	РасходныйКассовыйОрдер.Дата КАК ДатаДокумента,
		|	РасходныйКассовыйОрдер.Организация КАК Организация,
		|	РасходныйКассовыйОрдер.БанковскийСчет КАК БанковскийСчет,
		|	РасходныйКассовыйОрдер.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	РасходныйКассовыйОрдер.СуммаДокумента КАК СуммаДокумента,
		|	РасходныйКассовыйОрдер.НомерСумки КАК НомерСумки,
		|	РасходныйКассовыйОрдер.Касса КАК Касса
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|ГДЕ
		|	РасходныйКассовыйОрдер.Ссылка = &ОбъектПечати";
		Запрос.УстановитьПараметр("ОбъектПечати", ОбъектПечати);
		ДанныеПечати = Запрос.Выполнить().Выбрать();
		ПервыйДокумент = Истина;
		
		Если НЕ ПараметрыПечати.Свойство("ТекстОшибки") Тогда
			ПараметрыПечати.Вставить("ТекстОшибки", "");
		КонецЕсли;
		
		ТаблицаОписьСдаваемыхНаличныхДенег = ОбъектПечати.ОписьСдаваемыхНаличныхДенег;
		ТаблицаРасшифровкаПлатежа          = ОбъектПечати.РасшифровкаПлатежа;
		
		Пока ДанныеПечати.Следующий() Цикл
			Если НЕ ЕстьОшибкиПечатиИнкассации(ДанныеПечати, ПараметрыПечати.ТекстОшибки, ТаблицаОписьСдаваемыхНаличныхДенег, ТаблицаРасшифровкаПлатежа) Тогда
				Если Не ПервыйДокумент Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				ПервыйДокумент = Ложь;
				
				НомерСтрокиНачало    = ТабличныйДокумент.ВысотаТаблицы + 1;
				СведенияООрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаДокумента, , ДанныеПечати.БанковскийСчет);
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	ТаблицаРасшифровкиПлатежей.ОперацияКассовойОтчетности,
				               |	ТаблицаРасшифровкиПлатежей.Сумма
				               |ПОМЕСТИТЬ ТаблицаРасшифровкиПлатежей
				               |ИЗ
				               |	&ТаблицаРасшифровкиПлатежей КАК ТаблицаРасшифровкиПлатежей
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |ВЫБРАТЬ РАЗЛИЧНЫЕ
				               |	ТаблицаРасшифровкиПлатежей.ОперацияКассовойОтчетности КАК ОперацияКассовойОтчетности,
				               |	СУММА(ТаблицаРасшифровкиПлатежей.Сумма) КАК Сумма
				               |ИЗ
				               |	ТаблицаРасшифровкиПлатежей КАК ТаблицаРасшифровкиПлатежей
				               |
				               |СГРУППИРОВАТЬ ПО
				               |	ТаблицаРасшифровкиПлатежей.ОперацияКассовойОтчетности";
				Запрос.УстановитьПараметр("ТаблицаРасшифровкиПлатежей", ОбъектПечати.РасшифровкаПлатежа);
				ТаблицаРасшифровкаПлатежейИтог = Запрос.Выполнить().Выгрузить();
				
				ЗаполнитьПараметрыМакетаДляПечатиЛицевойСтороныИнкассации(ОбластьМакетаСекцияОсновнаяЧасть, ОбластьМакетаСекцияТаблицаОсновнаяЧасть, СведенияООрганизации, ДанныеПечати);
				ЗаполнитьQRКодДляПечатиЛицевойСтороныИнкассации(ОбластьМакетаСекцияОсновнаяЧасть, ТаблицаОписьСдаваемыхНаличныхДенег, ТаблицаРасшифровкаПлатежейИтог, ДанныеПечати, СведенияООрганизации);
				
				ТабличныйДокументТаблицыРасшифровки = Новый ТабличныйДокумент;
				ТабличныйДокументТаблицыРасшифровки.Вывести(ОбластьМакетаСекцияТаблицаОсновнаяЧасть);
				
				ТорговаяВыручка = "";
				Для Каждого Строка Из ТаблицаРасшифровкаПлатежейИтог Цикл
					ОбластьМакетаСекцияТаблицаСтрока.Параметры.КассовыйСимвол = Строка.ОперацияКассовойОтчетности.Код;
					ОбластьМакетаСекцияТаблицаСтрока.Параметры.СуммаНаСимвол  = Строка.Сумма;
					ТабличныйДокументТаблицыРасшифровки.Вывести(ОбластьМакетаСекцияТаблицаСтрока);
					Если НЕ ЗначениеЗаполнено(ТорговаяВыручка) Тогда
						ТорговаяВыручка = Строка.ОперацияКассовойОтчетности.Код + "-" + Строка.ОперацияКассовойОтчетности.Наименование;
					Иначе
						ТорговаяВыручка = ТорговаяВыручка + ", " + Строка.ОперацияКассовойОтчетности.Код + "-" + Строка.ОперацияКассовойОтчетности.Наименование;
					КонецЕсли;
				КонецЦикла;
				ОбластьМакетаСекцияОсновнаяЧасть.Параметры.ТорговаяВыручка = ТорговаяВыручка + ".";
				
				ТабличныйДокументТаблицыРасшифровки.Вывести(ОбластьМакетаСекцияОкончаниеТаблицы);
				Если ПараметрыПечати.ВариантПечати = "Накладная" Тогда
					ОбластьШифр = Макет.ПолучитьОбласть("СекцияОкончаниеШифр");
					ТабличныйДокументТаблицыРасшифровки.Вывести(ОбластьШифр);
					ОбластьМакетаСекцияОсновнаяЧасть.Параметры.НаименованиеДокумента = "Накладная к сумке";
					ОбластьМакетаСекцияОсновнаяЧасть.Параметры.ЗаголовокДокумента = "Накладная к сумке №";
				Иначе
					ОбластьМакетаСекцияОсновнаяЧасть.Параметры.НаименованиеДокумента = "Препроводительная ведомость к сумке";
					ОбластьМакетаСекцияОсновнаяЧасть.Параметры.ЗаголовокДокумента = "Ведомость к сумке №";
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьМакетаСекцияОсновнаяЧасть);
				ТабличныйДокумент.Присоединить(ТабличныйДокументТаблицыРасшифровки);
				
				Если ПараметрыПечати.ВариантПечати = "ПрепроводительнаяВедомостьНакладная" Тогда
					
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ОбластьШифр        = Макет.ПолучитьОбласть("СекцияОкончаниеШифр");
					ОбластьРазделитель = Макет.ПолучитьОбласть("СтрокаРазделитель");
					
					ОбластьМакетаСекцияОсновнаяЧасть.Параметры.НаименованиеДокумента = "Накладная к сумке";
					ОбластьМакетаСекцияОсновнаяЧасть.Параметры.ЗаголовокДокумента = "Накладная к сумке №";
					
					ТабличныйДокументТаблицыРасшифровки.Вывести(ОбластьШифр);
					ТабличныйДокумент.Вывести(ОбластьРазделитель);
					ТабличныйДокумент.Вывести(ОбластьМакетаСекцияОсновнаяЧасть);
					ТабличныйДокумент.Присоединить(ТабличныйДокументТаблицыРасшифровки);
					
				КонецЕсли;
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				Для Каждого СтрокаНоминалаБанкноты Из ТаблицаОписьСдаваемыхНаличныхДенег Цикл
					ОбластьМакетаОборотнаяСторона.Параметры[СтрокаНоминалаБанкноты.ПараметрКоличествоБанкнот] = СтрокаНоминалаБанкноты.КоличествоБанкнот;
					ОбластьМакетаОборотнаяСторона.Параметры[СтрокаНоминалаБанкноты.ПараметрСуммаБанкнот] = СтрокаНоминалаБанкноты.Сумма;
				КонецЦикла;
				
				ОбластьМакетаОборотнаяСторона.Параметры.СуммаИтог = ТаблицаОписьСдаваемыхНаличныхДенег.Итог("Сумма");
				ТабличныйДокумент.Вывести(ОбластьМакетаОборотнаяСторона);
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		Возврат ТабличныйДокумент;
		
	КонецЕсли;

КонецФункции

// Функция формирует табличный документ для печати Расходного кассового ордера.
//
Функция СформироватьПечатнуюФормуКО2(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	СинонимДокумента   = НСтр("ru='Расходный кассовый ордер'");
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйКассовыйОрдер_ПФ_MXL_КО2";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ссылка                КАК Ссылка,
	|	КорреспондирующийСчет КАК КорреспондирующийСчет
	|ИЗ
	|	КорСчета
	|;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходныйКассовыйОрдер.Номер                         КАК Номер,
	|	РасходныйКассовыйОрдер.Дата                          КАК ДатаДокумента,
	|	РасходныйКассовыйОрдер.Ссылка                        КАК Ссылка,
	|	РасходныйКассовыйОрдер.Организация                   КАК Организация,
	|	РасходныйКассовыйОрдер.Организация                   КАК ЮрФизЛицо,
	|	РасходныйКассовыйОрдер.Организация                   КАК Руководители,
	|	РасходныйКассовыйОрдер.Организация.Префикс           КАК Префикс,
	|	РасходныйКассовыйОрдер.СуммаДокумента                КАК Сумма,
	|	РасходныйКассовыйОрдер.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
	|	РасходныйКассовыйОрдер.Контрагент                    КАК Контрагент,
	|	РасходныйКассовыйОрдер.Контрагент.Представление      КАК ФИОПолучателя,
	|	РасходныйКассовыйОрдер.Выдать                        КАК Выдать,
	|	РасходныйКассовыйОрдер.Приложение                    КАК Приложение,
	|	РасходныйКассовыйОрдер.ПоДокументу                   КАК ПоДокументу,
	|	РасходныйКассовыйОрдер.Основание                     КАК Основание,
	|	РасходныйКассовыйОрдер.Контрагент.НаименованиеПолное КАК НаименованиеПолное,
	|	РасходныйКассовыйОрдер.Контрагент.Наименование       КАК Наименование,
	|	РасходныйКассовыйОрдер.Ответственный.ФизическоеЛицо  КАК Кассир,
	|	""50.01""                                            КАК КредитСубсчет
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка В (&МассивОбъектов)
	|УПОРЯДОЧИТЬ ПО
	|	РасходныйКассовыйОрдер.Дата,
	|	РасходныйКассовыйОрдер.Ссылка
	|";
	Запрос.МенеджерВременныхТаблиц = ДенежныеСредстваСервер.ПолучитьМенеджерТаблицыКорСчетов(Документы.РасходныйКассовыйОрдер.ПустаяСсылка(), МассивОбъектов);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаКорСчетаДебет = МассивРезультатов[0].Выгрузить();
	ДанныеПечати = МассивРезультатов[1].Выбрать();
	ПервыйДокумент = Истина;
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_РасходныйКассовыйОрдер");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		ЕстьРасчетыСКонтрагентами = ДенежныеСредстваСервер.ЕстьРасчетыСКонтрагентами(ДанныеПечати.ХозяйственнаяОперация);
		
		СведенияОбОрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.ЮрФизЛицо, ДанныеПечати.ДатаДокумента);
		
		// Выводим шапку накладной
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
		ОбластьМакета.Параметры.СуммаПрописью            = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(ДанныеПечати.Сумма);
		ОбластьМакета.Параметры.ДатаДокумента            = ДанныеПечати.ДатаДокумента;
		ОбластьМакета.Параметры.НомерДокумента           = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер, ПустаяСтрока(ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы")), Истина);
		
		МассивКорСчетов = ТаблицаКорСчетаДебет.НайтиСтроки(Новый Структура("Ссылка", ДанныеПечати.Ссылка));
		КодыСчетДебет = "";
		Для каждого СтрокаКорСчета Из МассивКорСчетов Цикл
			КодыСчетДебет = КодыСчетДебет + "," + СтрокаКорСчета.КорреспондирующийСчет;
		КонецЦикла;
		
		Руководители          = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(ДанныеПечати.Руководители, КонецДня(ДанныеПечати.ДатаДокумента));
		Руководитель          = Руководители.Руководитель;
		РуководительДолжность = Руководители.РуководительДолжность;
		Бухгалтер             = Руководители.ГлавныйБухгалтер;
		
		ОбластьМакета.Параметры.ФИОРуководителя       = Руководитель;
		ОбластьМакета.Параметры.ДолжностьРуководителя = РуководительДолжность;
		
		ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = Бухгалтер;
		ОбластьМакета.Параметры.ФИОКассира            = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ДанныеПечати.Кассир);;
		
		ОбластьМакета.Параметры.ДебетСубсчет = Сред(КодыСчетДебет, 2);
		
		ТекстОснование = ДанныеПечати.Основание;
		
		ОбластьМакета.Параметры.Основание             = ТекстОснование;
		ОбластьМакета.Параметры.Приложение            = ДанныеПечати.Приложение;
		
		ТекстВыдать      = ДанныеПечати.Выдать;
		ТекстПоДокументу = ДанныеПечати.ПоДокументу;
		
		Если ТекстВыдать="" И ЗначениеЗаполнено(ДанныеПечати.Контрагент) Тогда
			Если ЕстьРасчетыСКонтрагентами Тогда
				ТекстВыдать =?(ДанныеПечати.НаименованиеПолное="",ДанныеПечати.Наименование, ДанныеПечати.НаименованиеПолное);
			КонецЕсли;
		КонецЕсли;
			
		ОбластьМакета.Параметры.ФИОПолучателя                             = ТекстВыдать;
		ОбластьМакета.Параметры.РеквизитыДокументаУдостоверяющегоЛичность = ТекстПоДокументу;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецЕсли

