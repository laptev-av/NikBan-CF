&НаКлиенте
Перем КэшированныеЗначения;

// Используется для передачи текущей строки в обработчик ожидания.
&НаКлиенте
Перем ТекущиеДанныеИдентификатор;

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
			ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		Иначе
			ПодключаемоеОборудованиеРТВызовСервера.УстановитьКонтрагентаПоДисконтнойКарте(ЭтотОбъект, СтруктураРезультат, СтрокаРезультата);
		КонецЕсли;
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("Номенклатура") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТВызовСервера.ОбработатьДанныеПоНоменклатуреИзТСДСервер(ЭтотОбъект, СтруктураПараметров);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	
	ДобавленаСтрока = Ложь;
	
	Если ПолученИзЕГАИС и не Объект.ЕстьРасхождения и ИмяТаблицыВыборки = "Товары" Тогда
		СтруктураОтбораРедактируемыхСтрок = Новый Структура();
		СтруктураОтбораРедактируемыхСтрок.Вставить("АлкогольнаяПродукция", Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка());
		СтруктураПараметров.Вставить("СтруктураОтбораРедактируемыхСтрок", СтруктураОтбораРедактируемыхСтрок);
	КонецЕсли;
	
	Если ПолученИзЕГАИС и Объект.ЕстьРасхождения и ИмяТаблицыВыборки = "ТоварыПоДаннымПоставщика" Тогда
		СтруктураОтбораРедактируемыхСтрок = Новый Структура();
		СтруктураОтбораРедактируемыхСтрок.Вставить("АлкогольнаяПродукция", Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка());
		СтруктураПараметров.Вставить("СтруктураОтбораРедактируемыхСтрок", СтруктураОтбораРедактируемыхСтрок);
	КонецЕсли;
	
	ТекущаяСтрока = ПодключаемоеОборудованиеРТВызовСервера.ИнициализацияСтрокиТоваров(ЭтотОбъект, СтруктураПараметров, ДобавленаСтрока, ИмяТаблицыВыборки);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	Если ДобавленаСтрока Тогда
		СтруктураПараметровДействия = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия);
		Если СравниватьСЦенамиПрошлыхЗакупок Тогда
			СтруктураДействий.Вставить("ЗаполнитьЦенуПрошлойЗакупки", СтруктураПараметровДействия);
		КонецЕсли;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект));
		Если ИспользоватьАссортимент Тогда
			СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента(Объект, Ложь, "ЗаказПоставщику");
			СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);		
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ЗавершениеОбработкиСтрокиТоваров(ЭтотОбъект, ТекущаяСтрока, СтруктураДействий, ИмяТаблицыВыборки);
	
	РассчитатьОтклонениеЦенСервер(ТекущаяСтрока);
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	Если ИмяТаблицыВыборки = "Товары" Тогда
		ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ДобавитьНайденныеСерийныеНомера(ЭтотОбъект, СтруктураНомера);
	Иначе
		ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ДобавитьНоменклатуруПоСерийномуНомеру(ЭтотОбъект, СтруктураНомера);
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьВесЗавершение(Результат, Параметры) Экспорт
	
	Если Результат Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданиеИВыборНовойХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект[ДополнительныеПараметры. ИмяТЧ].НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ТекущаяСтрока[ДополнительныеПараметры.ИмяРеквизита] = Результат;

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОповещениеПоискаПоНаименованию(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ЗавершитьОбработкуДанныхПоКодуКлиент(Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура очистки количества/количества упаковок в табличной части.
&НаСервере
Процедура ОчиститьКоличество() Экспорт
	
	ОбработкаТабличнойЧастиТоварыСервер.ОчиститьКолонкиТабличнойЧасти(ЭтаФорма, "Товары", "Количество, КоличествоУпаковок, Сумма");
	ОбработкаТабличнойЧастиТоварыСервер.ОчиститьТабличнуюЧасть(ЭтаФорма,"СерийныеНомера");
	ОбработкаТабличнойЧастиТоварыСервер.ОчиститьТабличнуюЧасть(ЭтаФорма, "Серии");
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуСопоставлениеНоменклатурыЕГАИС(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	ОповещениеОткрытьФормуСопоставлениеНоменклатурыЕГАИССервер(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуСопоставлениеОрганизацийЕГАИС(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	СопоставленКонтрагент = Ложь;
	
	ОповещениеОткрытьФормуСопоставлениеОрганизацийЕГАИССервер(ДополнительныеПараметры, СопоставленКонтрагент);
	
	Если СопоставленКонтрагент Тогда
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Контрагент);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыбораНоменклаутрыВАлкогольнойСтроке(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	ИспользоватьКомиссионнуюТорговлю = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
	ИспользоватьУчетИмпортныхТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьУчетИмпортныхТоваров");
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	БезНДС = НСтр("ru = 'Без НДС'");
	
	ВосстановитьНастройки();
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,Элементы.КартинкаСостоянияДокумента.Подсказка,РазрешеноПроведение);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ПоступлениеТоваров.ПараметрыУказанияСерий(Объект));
	
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		// ИнтеграцияЕГАИС
		Если ЗначениеЗаполнено(Объект.ТТНВходящаяЕГАИС) Тогда
			ПолученИзЕГАИС = Истина;
			ОбновитьПризнакПередачиАктаВЕГАИС(Объект.ТТНВходящаяЕГАИС);
		КонецЕсли;
		
		ОбновитьСтатусЕГАИС();
		// Конец ИнтеграцияЕГАИС
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		УстановитьВидимостьДоступностьЭлементовПоЕстьРасхожденияСервер();
		Если ЗначениеЗаполнено(Объект.ЗаказПоставщику) Тогда
			УстановитьПризнакиУчетаНДСПоЗаказуПоставщику(Объект.ЗаказПоставщику);
		КонецЕсли;
		
		УстановитьДоступностьЦенаВключаетНДС();
		УстановитьДоступностьЭлементовНаСервере();
		
		УстановитьСостояниеОплатыПоступленияНаФорме();
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
		
		НастроитьОтображениеРеквизитовСчетаФактуры(
			ЭтаФорма,
			ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
			
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.ТоварыПоДаннымПоставщика);
		ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНаличиеОшибокДанныхЕГАИС(Объект.ТоварыПоДаннымПоставщика);
		УстановитьДоступностьЭлементовЕГАИС(ЭтотОбъект);
		
		// ИнтеграцияГИСМ
		СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
		// Конец ИнтеграцияГИСМ
		
	КонецЕсли;
	
	Если СравниватьСЦенамиПрошлыхЗакупок Тогда
		ОбновитьПоказателиТабличнойЧастиТовары();
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Вызывать необходимо после обновления сумм подвала.
		ОбновитьИтоговыеПоказатели(Истина, Истина);
	КонецЕсли;
	
	Если Объект.ЕстьРасхождения Тогда
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.ТоварыПоДаннымПоставщика);
		ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС);
	КонецЕсли;
	
	МассивКомандПО = Новый Массив;
	МассивКомандПО.Добавить("ТоварыВыгрузитьДанныеВТСД");
	МассивКомандПО.Добавить("ТоварыЗагрузитьДанныеИзТСД");
	МассивКомандПО.Добавить("ТоварыПолучитьВес");
	МассивКомандПО.Добавить("ТоварыПоДаннымПоставщикаВыгрузитьДанныеВТСД");
	МассивКомандПО.Добавить("ТоварыПоДаннымПоставщикаЗагрузитьДанныеИзТСД");
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтаФорма, МассивКомандПО);
	
	УстановитьСписокХозяйственныхОпераций();
	
	УправлениеЭлементамиФормыНаСервере();
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	УстановитьТекущуюСтраницуСуммПодвала();
	
	НастроитьФормуПоДополнительнымПравам();
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	
	УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов();
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	ИспользованиеСПАРКРазрешено = СПАРКРиски.ИспользованиеРазрешено();
	
	Если ИспользованиеСПАРКРазрешено Тогда
		ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Однострочный");
		СПАРКРиски.ПриСозданииНаСервере(
			ЭтотОбъект,
			Неопределено,
			Объект.Контрагент,
			ПараметрыПроцедуры);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	
	// ИнтеграцияИС
	ИнтеграцияИС.ПриСозданииНаСервереВФормеДокументаОснования(ЭтотОбъект, Объект);
	// Конец ИнтеграцияИС
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	ИмяТаблицыВыборки = ИмяТаблицыВыборки(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ПроверитьВыводНапоминанияЕГАИС();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриОткрытии.
	Если ИспользованиеСПАРКРазрешено Тогда
		СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Неопределено);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриОткрытии.
	
	// Подсистема "ОбменСКонтрагентами"
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец Подсистема "ОбменСКонтрагентами"
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если АктПереданВЕГАИС Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.РаспределениеТоваровПоХарактеристикам.Форма.Форма" Тогда
		
		ОбработкаВыбораРаспределениеПоХарактеристикамНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборДокументовВзаимозачета.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборВзаимозачетовНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокумента"
	 ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаСписка" Тогда
	 	
	 	НастроитьОтображениеРеквизитовСчетаФактуры(ЭтаФорма, ВыбранноеЗначение);

	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "ЭлектронныеДокументы"
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		ЭтотОбъект.Прочитать();
	КонецЕсли;
	// Конец подсистема "ЭлектронныеДокументы"
	
	Если ИмяСобытия = "ЗачтенаОплата" Тогда 
		ОбновитьИтоговыеПоказатели(Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Или ИмяСобытия = "ВставкаСтрокИзБуфераОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбмена();
	КонецЕсли;
	
	// ИнтеграцияГИСМ
	Если ИмяСобытия = "Запись_УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ"
		Или ИмяСобытия = "Запись_УведомлениеОбИмпортеМаркированныхТоваровГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменГИСМ"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусГИСМФормахВДокументах)) Тогда
		
		СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
		
	КонецЕсли;
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияЕГАИС
	Если ИмяСобытия = "Запись_ТТНВходящаяЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		Если НЕ Модифицированность Тогда
			Прочитать();
		КонецЕсли;
		
		ОбновитьСтатусЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияЕГАИС"
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		ОбновитьСтатусЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменЕГАИС"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусЕГАИСВФормахДокументов)) Тогда
		
		ОбновитьСтатусЕГАИС();
		
	КонецЕсли;
	
	// Обновление гиперссылки на создание документа Возврат из регистра №2
	Если ИмяСобытия = "Запись_ПередачаВРегистр2ЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		ОбновитьСтатусЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		ОбновитьСтатусЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСопоставленияАлкогольнойПродукцииЕГАИС" Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("АлкогольнаяПродукция", Параметр.Ссылка);
		ПараметрыОтбора.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		
		МассивСтрок = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивСтрок.Количество() > 0 Тогда
			МассивНоменклатуры = ИнтеграцияЕГАИСРТВызовСервера.НоменклатураПоАлкогольнойПродукции(Параметр.Ссылка);
			Если МассивНоменклатуры.Количество() > 0 Тогда
				СтруктураНоменклатуры = МассивНоменклатуры[0];
				
				Для Каждого СтрокаТЧ Из МассивСтрок Цикл
					СтрокаТЧ.Номенклатура = СтруктураНоменклатуры.Номенклатура;
					СтрокаТЧ.Характеристика = СтруктураНоменклатуры.Характеристика;
					ПриИзмененииНоменклатуры(СтрокаТЧ);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	// Конец ИнтеграцияЕГАИС
	
	// ИнтеграцияИС
	ИнтеграцияИСКлиент.ОбработкаОповещенияВФормеДокументаОснования(
		ЭтотОбъект,
		Объект,
		ИмяСобытия,
		Параметр,
		Источник);
	// Конец ИнтеграцияИС
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбработкаОповещения.
	Если ИспользованиеСПАРКРазрешено Тогда
		СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Неопределено, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбработкаОповещения.
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ПараметрыОповещения.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен()
		И ЗначениеЗаполнено(ИмяТаблицыВыборки)
		И НЕ АктПереданВЕГАИС Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ПредъявленСчетФактура И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПараметрыЗаписи.Вставить("ДанныеСчетаФактуры",
			ЗакупкиСервер.ДанныеСчетаФактурыСтруктурой(
				Неопределено,
				ТекущийОбъект.Организация,
				ТекущийОбъект.Контрагент,
				ТекущийОбъект.НомерСчетаФактуры,
				ТекущийОбъект.ДатаСчетаФактуры));
		ТекущийОбъект.ПредъявленСчетФактура = Ложь;
	Иначе
		ПараметрыЗаписи.Вставить("ДанныеСчетаФактуры", Неопределено);
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьДоступностьЦенаВключаетНДС();
	
	// ИнтеграцияЕГАИС
	Если ЗначениеЗаполнено(Объект.ТТНВходящаяЕГАИС) Тогда
		ПолученИзЕГАИС = Истина;
		ОбновитьПризнакПередачиАктаВЕГАИС(Объект.ТТНВходящаяЕГАИС);
	КонецЕсли;
	
	ОбновитьСтатусЕГАИС();
	// Конец ИнтеграцияЕГАИС
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	Если Объект.ЕстьРасхождения ИЛИ НЕ Объект.ТТНВходящаяЕГАИС.Пустая() Тогда
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.ТоварыПоДаннымПоставщика);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНаличиеОшибокДанныхЕГАИС(Объект.ТоварыПоДаннымПоставщика);
	КонецЕсли;
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	УстановитьТекущуюСтраницуСуммПодвала();
	Если СравниватьСЦенамиПрошлыхЗакупок Тогда
		ОбновитьПоказателиТабличнойЧастиТовары();
	КонецЕсли;
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	УстановитьВидимостьДоступностьЭлементовПоЕстьРасхожденияСервер();
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	ОбновитьИтоговыеПоказатели(Истина, Истина);
	УстановитьДоступностьЭлементовНаСервере();
	УстановитьСостояниеОплатыПоступленияНаФорме();
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	НастроитьОтображениеРеквизитовСчетаФактуры(
		ЭтаФорма,
		ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
		
	// ИнтеграцияЕГАИС
	УстановитьДоступностьЭлементовЕГАИС(ЭтотОбъект);
	// Конец ИнтеграцияЕГАИС
	
	ИмяТаблицыВыборки = ИмяТаблицыВыборки(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияИС
	ИнтеграцияИС.ПриЧтенииНаСервереВФормеДокументаОснования(ЭтотОбъект, Объект);
	// Конец ИнтеграцияИС
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	УстановитьСостояниеОплатыПоступленияНаФорме();
	
	Если Объект.ЕстьРасхождения ИЛИ НЕ Объект.ТТНВходящаяЕГАИС.Пустая() Тогда
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.ТоварыПоДаннымПоставщика);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС);
		ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНаличиеОшибокДанныхЕГАИС(Объект.ТоварыПоДаннымПоставщика);
	КонецЕсли;
	
	Если СравниватьСЦенамиПрошлыхЗакупок Тогда
		ОбновитьПоказателиТабличнойЧастиТовары();
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
	 И ПараметрыЗаписи.ДанныеСчетаФактуры <> Неопределено Тогда
		
		ДанныеСчетаФактуры = ЗакупкиСервер.ДанныеСчетаФактурыСтруктурой(
			ТекущийОбъект.Ссылка,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Организация,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Контрагент,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Номер,
			ПараметрыЗаписи.ДанныеСчетаФактуры.ДатаСоставления);
		НастроитьОтображениеРеквизитовСчетаФактуры(
			ЭтаФорма,
			ЗакупкиСервер.ВвестиСчетФактуру(ДанныеСчетаФактуры, Истина));
	ИначеЕсли ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		НастроитьОтображениеРеквизитовСчетаФактуры(
			ЭтаФорма,
			ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтеграцияЕГАИС
	ОбновитьСтатусЕГАИС();
	УстановитьДоступностьЭлементовЕГАИС(ЭтотОбъект);
	// Конец ИнтеграцияЕГАИС
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияИС
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеДокументаОснования(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтеграцияИС
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	ОбновитьИтоговыеПоказатели(Истина, Истина);
	
	ИмяТаблицыВыборки = ИмяТаблицыВыборки(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
	
	Оповестить("Запись_ПоступлениеТоваров", Объект.Ссылка, ЭтотОбъект);
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
    
    // &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
	                                            "Документ.ПоступлениеТоваров.ФормаДокумента.Запись",
                                                    Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаказПоставщикуПриИзменении(Элемент)
	
	УправлениеЭлементамиФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьНДСПриИзменении(Элемент)
	
	ПриИзмененииУчитыватьНДССервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, , СтруктураДействий, КэшированныеЗначения);
	
	Если Объект.ЕстьРасхождения Тогда //ИЛИ ПолученИзЕГАИС 
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ТоварыПоДаннымПоставщика, , СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС);
		ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
		
	Если ЗначениеЗаполнено(Объект.Склад) 
		И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПриИзмененииСклада();
	КонецЕсли;
	
	ПроверитьВыводНапоминанияЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"БанковскийСчетОрганизации", "ТолькоПросмотр",
																	НЕ ЗначениеЗаполнено(Объект.Организация));
	
	Объект.БанковскийСчетОрганизации = ЗначениеНастроекВызовСервера.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация,,Объект.БанковскийСчетОрганизации);
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
	УстановитьВидимостьЗаполнитьПоГрафикуПоставщика();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	Если ИспользованиеСПАРКРазрешено Тогда
		// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
		ЭтотОбъект.ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
		ОбновитьОтображениеИндексыСПАРК();
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	МагазинПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьРасхожденияПриИзменении(Элемент)
	
	Если (НЕ Объект.ЕстьРасхождения)
		И (Объект.ТоварыПоДаннымПоставщика.Количество() > 0)
		//И (НЕ ПолученИзЕГАИС) 
		Тогда
		
		Если Объект.ТТНВходящаяЕГАИС.Пустая() Тогда
			ТекстВопроса = НСтр("ru='Список ""Товары по данным поставщика"" будет очищен. Продолжить?'");
		Иначе
			ТекстВопроса = НСтр("ru='Список ""Товары по данным поставщика"" будет очищен, Алкогольные строки списка ""Товары"" будут перезаполнены. Продолжить?'");
		КонецЕсли;
		ОписаниеОповещения = Новый ОписаниеОповещения("ЕстьРасхожденияСброс", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		Если ПриИзмененииФлагаЕстьРасхождения() Тогда
			
			Если Объект.ЕстьРасхождения Тогда
				ТекущийЭлемент = Элементы.СтраницаТоварыПоДаннымПоставщика;
			КонецЕсли;
			
			ПоказатьОповещениеПользователя(
			НСтр("ru = 'Список перезаполнен'"),
			,
			НСтр("ru='Товары по данным поставщика заполнены по списку ""Товары"".'"),
			БиблиотекаКартинок.Информация32);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТоварыПоДаннымПоставщика
		И НЕ Объект.ЕстьРасхождения Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТовары;
	КонецЕсли;
	
	ИмяТаблицыВыборки = ИмяТаблицыВыборки(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьРасхожденияСброс(ОтветНаВопрос, Параметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Объект.ЕстьРасхождения = Истина;
		Возврат;
	КонецЕсли;
	
	Если ПриИзмененииФлагаЕстьРасхождения() Тогда
		
		Если Объект.ЕстьРасхождения Тогда
			ТекущийЭлемент = Элементы.СтраницаТоварыПоДаннымПоставщика;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Список перезаполнен'"),
		,
		НСтр("ru='Товары по данным поставщика заполнены по списку ""Товары"".'"),
		БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплаченоПодробнееНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СуммаОплачено) Тогда
		Возврат;
	КонецЕсли;
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "ОбщаяФорма.СведенияОбОплате.Открытие");
             
	ДокументРасчета = ?(ЗначениеЗаполнено(Объект.ЗаказПоставщику), Объект.ЗаказПоставщику, Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ссылка", ДокументРасчета);
	
	ОткрытьФорму("ОбщаяФорма.СведенияОбОплате", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзаимозачетПодробнееНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ВзаимозачетПоДокументу) Тогда
		Возврат;
	КонецЕсли;
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "ОбщаяФорма.СведенияОВзаимозачете.Открытие");
             
	ДокументРасчета = ?(ЗначениеЗаполнено(Объект.ЗаказПоставщику), Объект.ЗаказПоставщику, Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ссылка", ДокументРасчета);
	
	ОткрытьФорму("ОбщаяФорма.СведенияОВзаимозачете", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредъявленСчетФактураПриИзменении(Элемент)
	
	НастроитьОтображениеРеквизитовСчетаФактуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСчетовФактурНажатие(Элемент)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Документ.СчетФактураПолученный.Форма.ФормаСписка.Открытие");
             
	СтруктураОтбор = Новый Структура("ДокументОснование, Организация, ПометкаУдаления", Объект.Ссылка, Объект.Организация, Ложь);
	
	ОткрытьФорму(
		"Документ.СчетФактураПолученный.ФормаСписка",
		Новый Структура("Отбор", СтруктураОтбор),
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗакупкиКлиент.ВвестиСчетФактуру(ЭтаФорма, Объект.Организация, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Если Объект.Товары.Количество() > 0 Тогда
				
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, , СтруктураДействий, Неопределено);
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ТоварыПоДаннымПоставщика, , СтруктураДействий, Неопределено);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		ОбновитьИтоговыеПоказатели();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ИмяТаблицыВыборки = ИмяТаблицыВыборки(ТекущаяСтраница.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	УстановитьДоступностьДоговораПоставщика();
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры

#Область СПАРКРиски

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

// ИнтернетПоддержкаПользователей.СПАРКРиски
&НаКлиенте
Процедура ДекорацияСПАРКПодробноНажатие(Элемент)
	
	СПАРКРискиКлиент.ПоказатьЗначенияИндексовКонтрагента(ИндексыСПАРКРиски, ЭтотОбъект);
	
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

#КонецОбласти

&НаКлиенте
Процедура СтатусЕГАИСПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусОбработкиОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусОбработкиОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ не проведен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
	          Истина, "Справочник.БанковскиеСчетаКонтрагентов.Форма.ФормаВыбора.Открытие");
              
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
	          Истина, "Справочник.БанковскиеСчетаОрганизаций.Форма.ФормаВыбора.Открытие");
              
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПередНачаломИзмененияДоговора();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено И (ТекущиеДанные.ИспользоватьСерийныеНомера ИЛИ НЕ ТекущиеДанные.СтатусУказанияСерий = 0) Тогда
			Отказ = Истина;
			Если ТекущиеДанные.ИспользоватьСерийныеНомера Тогда
				ВвестиПодарочныеСертификаты();
			Иначе
				УказатьСерии("КоличествоУпаковок");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыУпаковка 
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕдиницаИзмерения Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
			Отказ = Истина;
			УказатьСерии("Упаковка");
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатура Тогда
		Если не Элементы.Товары.ТекущиеДанные.АлкогольнаяПродукция.Пустая() Тогда
			Отказ = Истина;
			ВыполнитьРедактированиеАлкогольнойСтроки();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если Не Элементы.Товары.ТекущиеДанные.АлкогольнаяПродукция.Пустая() И Не Объект.ЕстьРасхождения Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
	УдаляемыйКлючСвязи = Элементы.Товары.ТекущиеДанные.КлючСвязи;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		ТекущаяСтрока                          = Элементы.Товары.ТекущиеДанные;
		ТекущаяСтрока.КлючСвязиСерийныхНомеров = 0;
		
		Если ТекущаяСтрока.ИспользоватьСерийныеНомера Тогда
			ТекущаяСтрока.КоличествоУпаковок = 0;
			ТекущаяСтрока.Количество = 0;
		КонецЕсли;
		
		ТекущаяСтрока.КлючСвязи = 0;
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);
	
	РедактированиеТЧТовары = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущиеДанные);
	
	РедактированиеТЧТовары = Ложь;
	
	Если НоваяСтрока Тогда
		ПроверитьВыводНапоминанияЕГАИС();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	УдалитьНесвязанныеСерийныеНомера();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ОчиститьПоказателиТабличнойЧастиТовары(ТекущаяСтрока);
	СтруктураДействий = Новый Структура;
	СтруктураПараметровДействия = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия);
	Если СравниватьСЦенамиПрошлыхЗакупок Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПрошлойЗакупки", СтруктураПараметровДействия);
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьОтклонениеЦен(ТекущаяСтрока);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
			
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтаФорма, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(ЭтотОбъект, 
																		  Элемент, 
																		  СтандартнаяОбработка, 
																		  Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные, 
																		  "ТоварыПоДаннымПоставщика");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ОчиститьПоказателиТабличнойЧастиТовары(ТекущаяСтрока);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		СтруктураПараметровДействия = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ПриИзмененииТоварыКоличестваУпаковок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
	РассчитатьОтклонениеЦен(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВсегоПриИзменении(Элемент)
	
	ТоварыСуммаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСНДСПриИзменении(Элемент)
	
	ТоварыСуммаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если РедактированиеТЧТовары Тогда
		Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок Тогда
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			Если НЕ ТекущиеДанные = Неопределено И (ТекущиеДанные.ИспользоватьСерийныеНомера ИЛИ НЕ ТекущиеДанные.СтатусУказанияСерий = 0) Тогда
				Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				Если ТекущиеДанные.ИспользоватьСерийныеНомера Тогда
					ВвестиПодарочныеСертификаты();
				Иначе
					УказатьСерии("КоличествоУпаковок");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыУпаковка 
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕдиницаИзмерения Тогда
			
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			
			Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
				Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				УказатьСерии("Упаковка");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	Если Объект.ТТНВходящаяЕГАИС.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовТабличнойЧастиТоварыКлиент(Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если не Элементы.Товары.ТекущиеДанные.АлкогольнаяПродукция.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
		ВыполнитьРедактированиеАлкогольнойСтроки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Если не Элементы.Товары.ТекущиеДанные.АлкогольнаяПродукция.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
		ВыполнитьРедактированиеАлкогольнойСтроки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если не Элементы.Товары.ТекущиеДанные = Неопределено
		и не Элементы.Товары.ТекущиеДанные.АлкогольнаяПродукция.Пустая() Тогда
		
		СтандартнаяОбработка = Ложь;
		Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если не Элементы.Товары.ТекущиеДанные = Неопределено
		и не Элементы.Товары.ТекущиеДанные.АлкогольнаяПродукция.Пустая() Тогда
		
		СтандартнаяОбработка = Ложь;
		Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРедактированиеАлкогольнойСтроки()
	
	Если Не Элементы.Товары.ТекущиеДанные.Номенклатура.Пустая() Тогда
		ПоказатьЗначение(, Элементы.Товары.ТекущиеДанные.Номенклатура);
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АлкогольнаяПродукция", Элементы.Товары.ТекущиеДанные.АлкогольнаяПродукция);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОповещениеВыбораНоменклаутрыВАлкогольнойСтроке", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.СопоставлениеНоменклатурыЕГАИС.Форма", ПараметрыОткрытия,,,,, ОповещениеОЗАкрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТоварыПоДаннымПоставщика

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораТоварыПоДаннымПоставщикаПодборНаСервере(ВыбранноеЗначение);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС);
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаПослеУдаления(Элемент)
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ЗаполнитьСтрануПроисхождения");
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", 	ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураПараметровДействия = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	Если ИспользоватьАссортимент Тогда
		СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента(Объект, Ложь, "ЗаказПоставщику", "ТоварыПоДаннымПоставщика");
		СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ТоварыПоДаннымПоставщика, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаХарактеристикаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураПараметровДействия = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");

	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ТоварыПоДаннымПоставщика, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтаФорма, Элемент, СтандартнаяОбработка, Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		СтруктураПараметровДействия = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ТоварыПоДаннымПоставщика, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ТоварыПоДаннымПоставщика, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ТоварыПоДаннымПоставщика, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ТоварыПоДаннымПоставщика, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаСуммаВсегоПриИзменении(Элемент)
	ТоварыПоДаннымПоставщикаСуммаПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаСуммаСНДСПриИзменении(Элемент)
	
	ТоварыПоДаннымПоставщикаСуммаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаПриАктивизацииСтроки(Элемент)
	
	Если Объект.ТТНВходящаяЕГАИС.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовТабличнойЧастиТоварыПоДаннымПоставщикаКлиент(Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаПередУдалением(Элемент, Отказ)
	
	Если Не Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные.АлкогольнаяПродукция.Пустая() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиЭтапыОплат

&НаКлиенте
Процедура ЭтапыОплатПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		
		ЗапрашиватьДатуПлатежа = Истина;
		Если Копирование И Элемент.ТекущиеДанные.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Взаимозачет") Тогда
			ЗапрашиватьДатуПлатежа = Ложь;
		КонецЕсли;
		
		СуммаИтого    = Объект.Товары.Итог("Сумма");
		СуммаНДСИтого = Объект.Товары.Итог("СуммаНДС");
		СуммаИтого    = СуммаИтого + ?(Объект.ЦенаВключаетНДС, 0, СуммаНДСИтого);
		
		ЗакупкиКлиент.ДобавитьЭтапОплаты(Объект, Элементы, СуммаИтого, Истина, Отказ, Копирование, ЗапрашиватьДатуПлатежа);
		Отказ = Истина;
		
		ОбновитьИтоговыеПоказатели(, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатПриИзменении(Элемент)
	ОбновитьИтоговыеПоказатели(, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатФормаОплатыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭтапыОплат.ТекущиеДанные;
	
	Если ТекущиеДанные.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Взаимозачет") Тогда
		ТекущиеДанные.ДатаПлатежа = Дата("00010101");
		ТекущиеДанные.ОтсрочкаПлатежа = 0;
		ТекущиеДанные.ВидПлатежа = 0;
	Иначе
		ТекущиеДанные.ДокументВзаимозачета 	= Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатПроцентОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭтапыОплат.ТекущиеДанные;
	ЗакупкиКлиент.ПересчитатьСуммуПроцентОплаты(Объект, СуммаВсего, ТекущаяСтрока, ТекущаяСтрока.ПроцентОплаты, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭтапыОплат.ТекущиеДанные;
	ЗакупкиКлиент.ПересчитатьСуммуПроцентОплаты(Объект, СуммаВсего, ТекущаяСтрока, ТекущаяСтрока.Сумма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатОтсрочкаПлатежаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭтапыОплат.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВидПлатежа) Тогда
		ТекущаяСтрока.ДатаПлатежа = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата + ТекущаяСтрока.ОтсрочкаПлатежа * 86400, Дата('00010101'));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОплатДатаПлатежаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭтапыОплат.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ДатаПлатежа) И ЗначениеЗаполнено(Объект.Дата) Тогда
		
		ТекущаяСтрока.ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидПлатежа.Предоплата");
		ТекущаяСтрока.ОтсрочкаПлатежа = 0;
		
		Если НачалоДня(ТекущаяСтрока.ДатаПлатежа) < НачалоДня(Объект.Дата) Тогда
			
			ТекущаяСтрока.ОтсрочкаПлатежа = 0;
			
		Иначе
			
			ТекущаяСтрока.ВидПлатежа = ПредопределенноеЗначение("Перечисление.ВидПлатежа.ОтсрочкаПлатежа");
			
			ТекущаяСтрока.ОтсрочкаПлатежа = (ТекущаяСтрока.ДатаПлатежа - НачалоДня(Объект.Дата)) / 86400;
						
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ИнтеграцияИС

// ИнтеграцияИС

&НаКлиенте
Процедура Подключаемый_ПолеИнтеграцииИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		ЭтотОбъект,
		Объект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(ДополнительныеПараметры)
	
	ИнтеграцияИС.ОбновитьПолеИнтеграцииВФормеДокументаОснования(ЭтотОбъект, Объект, ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ИнтеграцияИС

#КонецОбласти

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	Если ЗначениеЗаполнено(ИмяТаблицыВыборки) Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", ИмяТаблицыВыборки);
		ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	Если ЗначениеЗаполнено(ИмяТаблицыВыборки) Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", ИмяТаблицыВыборки);
		ДополнительныеПараметры.Вставить("ОчиститьКоличество", Истина);
		ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	Если ЗначениеЗаполнено(ИмяТаблицыВыборки) Тогда
		ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	Если ЗначениеЗаполнено(ИмяТаблицыВыборки) Тогда
		ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ОповещенияПриПолученииВеса = Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект);
	ПодключаемоеОборудованиеРТКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ОповещенияПриПолученииВеса, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоискПоНаименованию(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Магазин",Объект.Магазин);
	ПараметрыПоиска.Вставить("РежимПодбораВЗакупки",Истина);
	ПараметрыПоиска.Вставить("Контрагент",			Объект.Контрагент);
	ПараметрыПоиска.Вставить("СсылкаНаПоступление",	Объект.Ссылка);
	
	РаботаСПравиламиИменованияКлиент.ПоискПоНаименованию(ЭтаФорма,ПараметрыПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСЦенамиПрошлыхЗакупок(Команда)
	
	СравниватьСЦенамиПрошлыхЗакупок = НЕ СравниватьСЦенамиПрошлыхЗакупок;
	Если СравниватьСЦенамиПрошлыхЗакупок Тогда
		ОбновитьПоказателиТабличнойЧастиТовары();
		Элементы.СравниватьЦеныЗакупки.Пометка = Истина;
	Иначе
		Элементы.СравниватьЦеныЗакупки.Пометка = Ложь;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоХарактеристикам(Команда)
	
	АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
	
	ПараметрыФормы = Новый Структура("АдресТоваровВХранилище, Документ", АдресТоваровВХранилище, Объект.Ссылка);
	
	ОткрытьФорму("Обработка.РаспределениеТоваровПоХарактеристикам.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоПрошлымЗакупкам(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоПрошлымЗакупкамСервер();
			ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоПрошлымЗакупкам(ЦеныРассчитаны);
			
		КонецЕсли;
		
		ОбновитьПоказателиТабличнойЧастиТовары(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'поступление товаров'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыФормы.Вставить("СсылкаНаПоступление", Объект.Ссылка);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("РежимПодбораВЗакупки", Истина);
	ПараметрыФормы.Вставить("ИспользоватьОтборПоТипамНоменклатуры", Истина);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если ИспользоватьАссортимент Тогда
		ПараметрыФормы.Вставить("МагазинАссортимента", Объект.Магазин);
		ПараметрыФормы.Вставить("РежимПодбораСУчетомАссортимента", Истина);
		ПараметрыФормы.Вставить("УсловиеАссортимента", "РазрешеныЗакупки");
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаПодобратьТовары(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'поступление товаров'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",				Объект.Магазин);
	ПараметрыФормы.Вставить("Контрагент",			Объект.Контрагент);
	ПараметрыФормы.Вставить("СсылкаНаПоступление",	Объект.Ссылка);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС",		Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("РежимПодбораВЗакупки", Истина);
	ПараметрыФормы.Вставить("ИспользоватьОтборПоТипамНоменклатуры", Истина);
	ПараметрыФормы.Вставить("Склад",				Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок",			ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",					Объект.Дата);
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтаФорма.Элементы.ТоварыПоДаннымПоставщика, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоДаннымПоставщикаПоФакту(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не введено ни одной строки в список ""Товары""'"),
			Объект.Ссылка,
			"Объект.Товары");
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаПерезаполнена = ПерезаполнитьТоварыПоДаннымПоставщикаПоФактуСервер();
	
	Если ТаблицаПерезаполнена Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Список перезаполнен'"),
			,
			НСтр("ru='Товары по данным поставщика перезаполнены.'"),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОрдерам(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОрдерамОповещения", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Список ""Товары"" будет перезаполнен. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЕстьИзменения = ЗаполнитьПоОрдерамСервер();
		
		Если ЕстьИзменения Тогда
			
			ПоказатьОповещениеПользователя(
			НСтр("ru = 'Список перезаполнен'"),
			,
			НСтр("ru='Товары перезаполнены по данным приходных ордеров.'"),
			БиблиотекаКартинок.Информация32);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОрдерамОповещения(ОтветНаВопрос, Параметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьИзменения = ЗаполнитьПоОрдерамСервер();
	
	Если ЕстьИзменения Тогда
		
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Список перезаполнен'"),
		,
		НСтр("ru='Товары перезаполнены по данным приходных ордеров.'"),
		БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыделенныеСтрокиПоЦенамДанныхПоставщика(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
		
	Иначе
		ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоДаннымПоставщикаСервер();
		ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоДаннымПоставщика(ЦеныРассчитаны);
		ОбновитьПоказателиТабличнойЧастиТовары(Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВзаимозачет(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	
	СуммаОплаты = Объект.ЭтапыОплат.Итог("Сумма");
	
	Если СуммаВсего <> 0 И СуммаОплаты = СуммаВсего Тогда
		
		ТекстОшибки = НСтр("ru = 'Добавление платежа не требуется
		|сумма оплат %СуммаОплаты% соответствует сумме 
		|поступления товаров %СуммаЗаказа%'");
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки,"%СуммаОплаты%",СуммаОплаты);
		ТекстОшибки = СтрЗаменить(ТекстОшибки,"%СуммаЗаказа%",СуммаВсего);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстОшибки,
		,
		"Объект.ЭтапыОплат",
		,
		Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Обработка.ПодборДокументовВзаимозачета.Форма.Форма.Открытие");

	СуммаКПодбору = 0;
	
	СуммаИтого    = СуммаВсего;
	
	ИтогПоЭтапамОплат = Объект.ЭтапыОплат.Итог("Сумма");
	СуммаКПодбору = СуммаИтого - ИтогПоЭтапамОплат;
	
	АдресХранилищаЭтапаОплат = ПоместитьЭтапыОплатВХранилище();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",       Объект.Магазин);
	ПараметрыФормы.Вставить("Контрагент",    Объект.Контрагент);
	ПараметрыФормы.Вставить("СуммаКПодбору", СуммаКПодбору);
	ПараметрыФормы.Вставить("ДокументРасчета", Объект.Ссылка);
	ПараметрыФормы.Вставить("АдресХранилищаЭтапаОплат", АдресХранилищаЭтапаОплат);
	
	ОткрытьФорму("Обработка.ПодборДокументовВзаимозачета.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	РазвернутьСвернутьТЧНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВвестиИсправлениеСчетаФактуры(Команда)
	
	ЗакупкиКлиент.ВвестиСчетФактуру(ЭтаФорма, Объект.Организация, Ложь, Истина);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПроверитьКонтрагента(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭтапыПоГрафикуИзСписка(Команда)
	
	НачатьЗаполнениеЭтаповОплат(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭтапыПоГрафикуКонтрагента(Команда)
	
	НачатьЗаполнениеЭтаповОплат();
	
КонецПроцедуры

#Область ОбработчикиКомандЕГАИС

&НаКлиенте
Процедура СопоставитьКонтрагентов(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	
	МассивАлкогольнойПродукции = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если не СтрокаТаблицы.АлкогольнаяПродукция.Пустая() Тогда
			МассивАлкогольнойПродукции.Добавить(СтрокаТаблицы.АлкогольнаяПродукция);
		КонецЕсли;
	КонецЦикла;
	
	ИнтеграцияЕГАИСРТКлиент.СопоставитьКонтрагентов(ЭтаФорма, 
													МассивАлкогольнойПродукции, 
													Объект.ТТНВходящаяЕГАИС, 
													"ОповещениеОткрытьФормуСопоставлениеОрганизацийЕГАИС");
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьНоменклатуру(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	
	МассивАлкогольнойПродукции = Новый Массив;
	МассивИдентификаторовСтрок = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если не СтрокаТаблицы.АлкогольнаяПродукция.Пустая() Тогда
			МассивАлкогольнойПродукции.Добавить(СтрокаТаблицы.АлкогольнаяПродукция);
			МассивИдентификаторовСтрок.Добавить(СтрокаТаблицы.ИдентификаторСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ИнтеграцияЕГАИСРТКлиент.СопоставитьНоменклатуру(ЭтотОбъект,
													МассивАлкогольнойПродукции,
													МассивИдентификаторовСтрок,
													"ОповещениеОткрытьФормуСопоставлениеНоменклатурыЕГАИС");
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СкопироватьСтрокиТовары(Команда)
	СкопироватьСтроки("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтрокиТовары(Команда)
	ВставитьСтроки("Товары");
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтрокиТоварыПоДаннымПоставщика(Команда)
	СкопироватьСтроки("ТоварыПоДаннымПоставщика");	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтрокиТоварыПоДаннымПоставщика(Команда)
	ВставитьСтроки("ТоварыПоДаннымПоставщика");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомераГТДВыделенныхСтрок(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеВыбораНомераГТД", ЭтаФорма);
	
	ОткрытьФорму("Справочник.НомераГТД.Форма.ФормаВыбора",
					,ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

 &НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	// Подсистема «Обмен с контрагентами»
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	// Конец Подсистема «Обмен с контрагентами»

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)

	// Подсистема «Обмен с контрагентами»
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	// Конец Подсистема «Обмен с контрагентами»

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыполнитьПослеВыбораНомераГТД(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНомерГТДНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНомерГТДНаСервере(НомерГТД)

	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	
	Для Каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТаблицы.НомерГТД = НомерГТД;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьСписокХозяйственныхОпераций()
	
	СписокХозяйственныхОпераций = Элементы.ХозяйственнаяОперация.СписокВыбора;
	СписокХозяйственныхОпераций.Очистить();

	Если ИспользоватьКомиссионнуюТорговлю Тогда
		СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеТоваров);
		СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
		СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	Иначе
		СписокХозяйственныхОпераций = Элементы.ХозяйственнаяОперация.СписокВыбора;
		СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеТоваров);
		СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
		СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	КонецЕсли;
	
КонецПроцедуры // УстановитьСписокХозяйственныхОпераций()

&НаКлиенте
Процедура НачатьЗаполнениеЭтаповОплат(ЗаполнитьПоВыбранномуГрафику = Ложь)
	
	Оповещение = Новый ОписаниеОповещения("ПослеВопросаЭтаповОплат",ЭтаФорма, ЗаполнитьПоВыбранномуГрафику);
	
	ПоказатьВопрос(Оповещение,
	НСтр("ru = 'Табличная часть ""Этапы оплат"" будет очищена, продолжить?';"),
	РежимДиалогаВопрос.ДаНет,,,"Внимание!");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломИзмененияДоговора()
	
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ПризнакАгента",  ПредопределенноеЗначение("Перечисление.ПризнакиАгента.Комиссионер"));
		ПараметрыОтбора.Вставить("Организация",    Объект.Организация);
		ПараметрыОтбора.Вставить("Агент",          Объект.Контрагент);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораДоговораПоставщикаЗавершение",ЭтаФорма);
		
		ОткрытьФорму("Справочник.ДоговорыПлатежныхАгентов.ФормаВыбора", 
		ПараметрыФормы, ЭтаФорма,,,,Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДоговораПоставщикаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Договор = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаЭтаповОплат(Результат, ЗаполнитьПоВыбранномуГрафику) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроверки = Новый Структура();
	ПараметрыПроверки.Вставить("ТоварыОтстутствуют", Объект.Товары.Количество() = 0);
	
	Результат = ЗакупкиКлиент.ЕстьВозможностьЗаполнитьПоГрафикуПоставщика(ПараметрыПроверки);
	
	Если Результат.Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Объект.ЭтапыОплат.Очистить();
	
	Если ЗаполнитьПоВыбранномуГрафику Тогда
		
		Обработчик = Новый ОписаниеОповещения("ЗаполнитьЭтапыОплатНаСервере",ЭтаФорма, ЗаполнитьПоВыбранномуГрафику);
		
		ОткрытьФорму("Справочник.ГрафикиОплаты.Форма.ФормаВыбора",,
						ЭтотОбъект,,,,Обработчик,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ЗаполнитьЭтапыОплатНаСервере(Объект.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	НастроитьОтображениеРеквизитовСчетаФактуры(
			ЭтаФорма,
			ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
			
КонецПроцедуры

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	ЭтаФорма.ПоложениеКоманднойПанели             = ?(ВидимостьЭлементов, ПоложениеКоманднойПанелиФормы.Авто, ПоложениеКоманднойПанелиФормы.Нет);
	Элементы.ГруппаОснование.Видимость                  = ВидимостьЭлементов;
	Элементы.Шапка.Видимость                            = ВидимостьЭлементов;
	Элементы.СтраницаТоварыПоДаннымПоставщика.Видимость = ВидимостьЭлементов;
	Элементы.СтраницаЭтапыОплат.Видимость               = ВидимостьЭлементов;
	Элементы.СтраницаДополнительно.Видимость            = ВидимостьЭлементов;
	Элементы.ИтогоПоДаннымПоставщика.Видимость          = ВидимостьЭлементов;
	Элементы.СвертываемыеИтоги.Видимость                = ВидимостьЭлементов;
	Элементы.СтраницаКомментарий.Видимость              = ВидимостьЭлементов;
	
	Элементы.РазвернутьСвернутьТЧ.Картинка = ?(ВидимостьЭлементов, БиблиотекаКартинок.РазвернутьТабличнуюЧасть, БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов()
	
	Если НЕ ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры И НЕ Справочники.Номенклатура.ИспользуютсяПодарочныеСертификаты() Тогда
		Элементы.ТоварыСтатусыСерийИПодарочныхСертификатов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЗаполнитьПоГрафикуПоставщика()
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент.ГрафикОплаты) Тогда
		Элементы.ЭтапыОплатЗаполнитьПоГрафикуПоставщика.Видимость = Ложь;
	Иначе 
		Элементы.ЭтапыОплатЗаполнитьПоГрафикуПоставщика.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПодарочныеСертификаты()
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиСерийныеНомераНоменклатурыВТЧ(ЭтаФорма,
		Объект.СерийныеНомера,
		Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодбораПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры) Экспорт
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПослеВводаНомеровПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры);
	
	ПересчетКоличества = ДополнительныеПараметры.ПересчетКоличества;
	
	Если ПересчетКоличества Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(ТекущееПоле)
	
	ВводСерийРазрешен = Истина;
	ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма, ПараметрыУказанияСерий, ВводСерийРазрешен);
	Если НЕ ВводСерийРазрешен Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	ПараметрыФормыУказанияСерий.Вставить("ТекущееПоле", ТекущееПоле);
	ПараметрыФормыУказанияСерий.Вставить("КоличествоЕдиницДоПересчета");
	
	ОбработчикУказанияСерий = Новый ОписаниеОповещения("ОбработатьУказаниеСерий", ЭтотОбъект, ПараметрыФормыУказанияСерий);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, ПараметрыФормыУказанияСерий, ЭтаФорма,,,, ОбработчикУказанияСерий, РежимБлокировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУказаниеСерий(ЗначениеВозврата, ПараметрыФормыУказанияСерий) Экспорт
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("ЗначениеВозврата", ЗначениеВозврата);
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоказателиТабличнойЧастиТовары(ОбновитьВсеСтроки = Ложь)
	
	Если Объект.Товары.Количество() = 0 
		ИЛИ НЕ СравниватьСЦенамиПрошлыхЗакупок Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.ПоказателиРассчитаны = Ложь;
		СтрокаТЧ.ЦенаПрошлойЗакупки = 0;
		СтрокаТЧ.ОтношениеЦенВПроцентах = 0;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаТоваровОбъекта.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваровОбъекта.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваровОбъекта.Характеристика КАК Характеристика,
	|	ТаблицаТоваровОбъекта.Цена КАК Цена,
	|	ВЫРАЗИТЬ(ТаблицаТоваровОбъекта.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&ТаблицаТоваровОбъекта КАК ТаблицаТоваровОбъекта
	|ГДЕ
	|	НЕ ТаблицаТоваровОбъекта.ПоказателиРассчитаны
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ПрошлыеЗакупки.ДатаПрошлойЗакупки) КАК ДатаПрошлойЗакупки
	|ПОМЕСТИТЬ ВТ_ТаблицаСтрокЗакупки
	|ИЗ
	|	ВТ_Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|			ПоступлениеТоваровТовары.Характеристика КАК Характеристика,
	|			ПоступлениеТоваровТовары.Ссылка.Дата КАК ДатаПрошлойЗакупки
	|		ИЗ
	|			Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|		ГДЕ
	|			ПоступлениеТоваровТовары.Ссылка.Дата <= &Период
	|			И ПоступлениеТоваровТовары.Ссылка <> &Ссылка
	|			И ПоступлениеТоваровТовары.Ссылка.Магазин = &Магазин
	|			И ПоступлениеТоваровТовары.Ссылка.Контрагент = &Поставщик
	|			И ПоступлениеТоваровТовары.Ссылка.Проведен) КАК ПрошлыеЗакупки
	|		ПО Товары.Номенклатура = ПрошлыеЗакупки.Номенклатура
	|			И Товары.Характеристика = ПрошлыеЗакупки.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтрокЗакупкиСДатами.Номенклатура КАК Номенклатура,
	|	ТаблицаСтрокЗакупкиСДатами.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ТаблицаСтрокЗакупкиСЦенами.Цена) КАК Цена
	|ПОМЕСТИТЬ ВТ_ПрошлыеЗакупки
	|ИЗ
	|	ВТ_ТаблицаСтрокЗакупки КАК ТаблицаСтрокЗакупкиСДатами
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПоступлениеТоваровТовары.Номенклатура КАК Номенклатура,
	|			ПоступлениеТоваровТовары.Характеристика КАК Характеристика,
	|			ПоступлениеТоваров.Дата КАК ДатаПрошлойЗакупки,
	|			ПоступлениеТоваровТовары.Цена / ВЫБОР
	|				КОГДА ПоступлениеТоваровТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|					ТОГДА ПоступлениеТоваровТовары.Упаковка.Коэффициент
	|				ИНАЧЕ 1
	|			КОНЕЦ КАК Цена
	|		ИЗ
	|			Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
	|				ПО ПоступлениеТоваровТовары.Ссылка = ПоступлениеТоваров.Ссылка
	|		ГДЕ
	|			ПоступлениеТоваров.Дата < &Период
	|			И ПоступлениеТоваровТовары.Ссылка <> &Ссылка
	|			И ПоступлениеТоваров.Проведен
	|			И ПоступлениеТоваровТовары.Ссылка.Магазин = &Магазин
	|			И ПоступлениеТоваровТовары.Ссылка.Контрагент = &Поставщик) КАК ТаблицаСтрокЗакупкиСЦенами
	|		ПО ТаблицаСтрокЗакупкиСДатами.Номенклатура = ТаблицаСтрокЗакупкиСЦенами.Номенклатура
	|			И ТаблицаСтрокЗакупкиСДатами.Характеристика = ТаблицаСтрокЗакупкиСЦенами.Характеристика
	|			И ТаблицаСтрокЗакупкиСДатами.ДатаПрошлойЗакупки = ТаблицаСтрокЗакупкиСЦенами.ДатаПрошлойЗакупки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСтрокЗакупкиСДатами.Номенклатура,
	|	ТаблицаСтрокЗакупкиСДатами.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ИСТИНА КАК ПоказателиРассчитаны,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЦеныПрошлыхЗакупок.Цена, 0) > 0
	|				И Товары.Цена > 0
	|			ТОГДА (Товары.Цена / (ВЫБОР
	|					КОГДА Товары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|						ТОГДА Товары.Упаковка.Коэффициент
	|					ИНАЧЕ 1
	|				КОНЕЦ * ЕСТЬNULL(ЦеныПрошлыхЗакупок.Цена, 0)) - 1) * 100
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтношениеЦенВПроцентах,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Упаковка.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ * ЕСТЬNULL(ЦеныПрошлыхЗакупок.Цена, 0) КАК ЦенаПрошлойЗакупки
	|ИЗ
	|	ВТ_Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПрошлыеЗакупки.Номенклатура КАК Номенклатура,
	|			ПрошлыеЗакупки.Характеристика КАК Характеристика,
	|			ПрошлыеЗакупки.Цена КАК Цена
	|		ИЗ
	|			ВТ_ПрошлыеЗакупки КАК ПрошлыеЗакупки) КАК ЦеныПрошлыхЗакупок
	|		ПО Товары.Номенклатура = ЦеныПрошлыхЗакупок.Номенклатура
	|			И Товары.Характеристика = ЦеныПрошлыхЗакупок.Характеристика";
	
	ТаблицаТоваровОбъекта = Объект.Товары.Выгрузить(,"Номенклатура,Характеристика,НомерСтроки,Цена,Упаковка,ПоказателиРассчитаны");
	Если ОбновитьВсеСтроки Тогда
		ТаблицаТоваровОбъекта.ЗаполнитьЗначения( Ложь, "ПоказателиРассчитаны"); 
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаТоваровОбъекта", ТаблицаТоваровОбъекта);
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	Запрос.УстановитьПараметр("Поставщик", Объект.Контрагент);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос.УстановитьПараметр("Период",ТекущаяДатаСеанса());
	Иначе
		Запрос.УстановитьПараметр("Период",Объект.Дата);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = Объект.Товары[Выборка.НомерСтроки-1];
		Если СтрокаТЧ <> Неопределено Тогда
			СтрокаТЧ.ПоказателиРассчитаны = Истина;
			СтрокаТЧ.ЦенаПрошлойЗакупки   = Выборка.ЦенаПрошлойЗакупки;
			СтрокаТЧ.ОтношениеЦенВПроцентах = Выборка.ОтношениеЦенВПроцентах;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновляет показатель "ОтношениеЦенВПроцентах" в отдельной строке ТЧ.
//
&НаКлиенте
Процедура РассчитатьОтклонениеЦен(ТекущаяСтрока)
	
	Если СравниватьСЦенамиПрошлыхЗакупок Тогда
		Если ТекущаяСтрока.ЦенаПрошлойЗакупки > 0
			И ТекущаяСтрока.Цена > 0 Тогда
			ТекущаяСтрока.ОтношениеЦенВПроцентах = (ТекущаяСтрока.Цена / ТекущаяСтрока.ЦенаПрошлойЗакупки - 1) * 100;
		Иначе
			ТекущаяСтрока.ОтношениеЦенВПроцентах = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет показатель "ОтношениеЦенВПроцентах" в отдельной строке ТЧ.
//
&НаСервере
Процедура РассчитатьОтклонениеЦенСервер(СтрокаТЧ)
		
	Если СравниватьСЦенамиПрошлыхЗакупок Тогда
		Если СтрокаТЧ.ЦенаПрошлойЗакупки > 0
			И СтрокаТЧ.Цена > 0 Тогда
			СтрокаТЧ.ОтношениеЦенВПроцентах = (СтрокаТЧ.Цена / СтрокаТЧ.ЦенаПрошлойЗакупки - 1) * 100;
		Иначе
			СтрокаТЧ.ОтношениеЦенВПроцентах = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоказателиТабличнойЧастиТовары(ТекущаяСтрока)
	
	ТекущаяСтрока.ОтношениеЦенВПроцентах = 0;
	ТекущаяСтрока.ЦенаПрошлойЗакупки     = 0;
	ТекущаяСтрока.ПоказателиРассчитаны   = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРаспределениеПоХарактеристикамНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаТовара.Характеристика) 
			И НЕ СтрокаТовара.Удалить Тогда
					
			Если (СтрокаТовара.НомерСтроки-1) < Объект.Товары.Количество() Тогда
				
				ТекущаяСтрока = Объект.Товары[СтрокаТовара.НомерСтроки -1];
				
				Если ТекущаяСтрока.Номенклатура = СтрокаТовара.Номенклатура Тогда
					
					ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Количество, КоличествоУпаковок, Упаковка, Цена");
					
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПересчитатьСумму");
					СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
					
					ТекущаяСтрока.ОтношениеЦенВПроцентах = 0;
					ТекущаяСтрока.ЦенаПрошлойЗакупки     = 0;
					ТекущаяСтрока.ПоказателиРассчитаны   = Ложь;
					
					КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
					ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

					ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
		
	МассивСтрокКУдалению = Новый Массив;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаТовара.Характеристика) 
			И СтрокаТовара.Удалить Тогда
			
			Если (СтрокаТовара.НомерСтроки-1) < Объект.Товары.Количество() Тогда
				
				МассивСтрокКУдалению.Добавить(Объект.Товары[СтрокаТовара.НомерСтроки -1]);
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
	Для каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
		
		Объект.Товары.Удалить(СтрокаКУдалению);
		
	КонецЦикла;
		
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
	
		Если ЗначениеЗаполнено(СтрокаТовара.Характеристика) Тогда
			
			ТекущаяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект));
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
			КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьПоказателиТабличнойЧастиТовары();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

// Процедура заполняет организацию при изменении склада.
//
&НаСервере
Процедура ПриИзмененииСклада()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Объект.Организация = Объект.Склад.Организация;
		Объект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация,,Объект.БанковскийСчетОрганизации);
		
		Элементы.БанковскийСчетОрганизации.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Организация);
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"БанковскийСчетОрганизации", "ТолькоПросмотр",
																		НЕ ЗначениеЗаполнено(Объект.Организация));
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет склад при изменении магазина.
//
&НаСервере
Процедура ПриИзмененииМагазина()
	
	Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Объект.Магазин,,Объект.Склад, Пользователи.ТекущийПользователь());
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПриИзмененииСклада();
	КонецЕсли;
	
	УстановитьДоступностьКомандыЗаполнитьПоОрдерам();
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ПоступлениеТоваров.ПараметрыУказанияСерий(Объект));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	ОбновитьИтоговыеПоказатели(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(ТекущаяСтрока)
	
	ОчиститьПоказателиТабличнойЧастиТовары(ТекущаяСтрока);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ЗаполнитьСтрануПроисхождения");
	СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
								ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураПараметровДействия = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия);
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.Дата = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
		СтруктураПараметровДействия.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	Если СравниватьСЦенамиПрошлыхЗакупок Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПрошлойЗакупки", СтруктураПараметровДействия);
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  
								ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	Если ИспользоватьАссортимент Тогда
		СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента(Объект, Ложь, "ЗаказПоставщику");
		СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьОтклонениеЦен(ТекущаяСтрока);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущаяСтрока);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");  
	
	ПроверитьВыводНапоминанияЕГАИС();
	
КонецПроцедуры

// Процедура управляет видимостью и доступностью элементов формы на сервере.
//
&НаСервере
Процедура УправлениеЭлементамиФормыНаСервере()
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаказПоставщику", "Видимость",
																	ЗначениеЗаполнено(Объект.ЗаказПоставщику)
	);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаЕГАИС", "Видимость",
																	ПолученИзЕГАИС);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭтапыОплат", "Видимость",
																	НЕ ЗначениеЗаполнено(Объект.ЗаказПоставщику));
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭтапыОплатИнфоСтрока", "Видимость",
																	ЗначениеЗаполнено(Объект.ЗаказПоставщику));
	
	Если Объект.Магазин.СкладУправляющейСистемы Тогда
		
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Склад", "ТолькоПросмотр", Истина);
		
	КонецЕсли;
	
	Если СравниватьСЦенамиПрошлыхЗакупок Тогда
		Элементы.СравниватьЦеныЗакупки.Пометка = Истина;
	Иначе
		Элементы.СравниватьЦеныЗакупки.Пометка = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БанковскийСчетКонтрагента", "ТолькоПросмотр", 
																	НЕ ЗначениеЗаполнено(Объект.Контрагент));
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БанковскийСчетОрганизации", "ТолькоПросмотр", 
																	НЕ ЗначениеЗаполнено(Объект.Организация));
	
	УстановитьДоступностьДоговораПоставщика();
	УстановитьДоступностьКомандыЗаполнитьПоОрдерам();
	УстановитьДоступностьКомандЗаполнитьПоЦенамДанныхПоставщикаСевер();
	
КонецПроцедуры

// Процедура управляет доступностью команды ЗаполнитьПоОрдерам.
//
&НаСервере
Процедура УстановитьДоступностьКомандыЗаполнитьПоОрдерам()

	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		Элементы.ТоварыЗаполнитьПоОрдерам.Доступность = Элементы.ТоварыЗаполнитьПоОрдерам.Доступность и Объект.Магазин.ИспользоватьОрдернуюСхемуПриПоступлении;
	Иначе
		Элементы.ТоварыЗаполнитьПоОрдерам.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет доступностью команды ЗаполнитьПоЦенамДанныхПоставщика и
// ЗаполнитьВыделенныеСтрокиПоЦенамДанныхПоставщика на сервере.
//
&НаСервере
Процедура УстановитьДоступностьКомандЗаполнитьПоЦенамДанныхПоставщикаСевер()
	
	Элементы.ТоварыЗаполнитьВыделенныеСтрокиПоЦенамДанныхПоставщика.Доступность = Объект.ЕстьРасхождения;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьДоговораПоставщика()
	
	ЭтоКомиссия = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;
	
	Элементы.Договор.Видимость = ЭтоКомиссия;
	
	Если НЕ ЭтоКомиссия Тогда
		Объект.Договор = Справочники.ДоговорыПлатежныхАгентов.ПустаяСсылка(); 
	КонецЕсли;
	
КонецПроцедуры

// Функция заполняет цену выделенных строк по прошлым закупкам в ТЧ Товары.
// Возвращаемое значение - Булево - Цены рассчитаны.
&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоПрошлымЗакупкамСервер()
	
	ЦеныРассчитаны = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоПрошлымЗакупкам(Объект, "Товары", Элементы.Товары.ВыделенныеСтроки, Истина);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();

	Возврат ЦеныРассчитаны;
	
КонецФункции

// Функция заполняет цену выделенных строк по ценам тч "Товары по данным поставщика" в ТЧ Товары.
// Возвращаемое значение - Булево - Цены рассчитаны.
//
&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоДаннымПоставщикаСервер()

	ЦеныРассчитаны = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоЦенамДанныхПоставщика(Объект, "Товары", Элементы.Товары.ВыделенныеСтроки, Истина);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();

	Возврат ЦеныРассчитаны;

КонецФункции

// Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора.
// Параметры:
//	Отказ - Булево
&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин"" не заполнено'"), Объект, "Объект.Магазин",,Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Поставщик"" не заполнено'"), Объект, "Объект.Контрагент",,Отказ);
	КонецЕсли;
		
КонецПроцедуры

// Процедура заполняет товары из подбора.
// Параметры: 
//	ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	ТаблицаСерийныхНомеров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресСерийныхНомеровВХранилище);
	ЕстьСерийныеНомера = ТаблицаСерийныхНомеров.Количество() > 0;
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура,
															  |Характеристика,
															  |Упаковка,
															  |Цена,
															  |Сумма,
															  |КоличествоУпаковок,
															  |ХарактеристикиИспользуются,
															  |ИспользоватьСерийныеНомера");
		
		Если ЕстьСерийныеНомера Тогда
			МассивСерийныхНомеров = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(СтрокаТовара.КлючСвязиСерийныхНомеров , ТаблицаСерийныхНомеров);
			ТекущаяСтрока.КлючСвязиСерийныхНомеров = ОбработкаТабличнойЧастиТоварыСервер.ДобавитьСерийныеНомераВТабличнуюЧасть(Объект.СерийныеНомера, МассивСерийныхНомеров, 0);
		КонецЕсли;
		Если СтрокаТовара.ИспользоватьСерийныеНомера Тогда
			Если ЕстьСерийныеНомера Тогда
				ТекущаяСтрока.КоличествоУпаковок = МассивСерийныхНомеров.Количество();
			Иначе
				ТекущаяСтрока.КоличествоУпаковок = 0;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
		СтруктураДействий.Вставить("ЗаполнитьСтрануПроисхождения");
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		

	КонецЦикла;
	
	АссортиментСервер.ПроверитьАссортиментТаблицыПодобранныхТоваров(Объект.Магазин,
																	Объект.Товары.Выгрузить(),
																	Объект.ЗаказПоставщику,
																	Объект.Дата,
																	"Товары");
	
	ОбновитьПоказателиТабличнойЧастиТовары();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	ЗаполнитьСтатусыУказанияСерийСервер();
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

// Получает из временного хранилища подобранные товары по данным поставщика.
//
&НаСервере
Процедура ОбработкаВыбораТоварыПоДаннымПоставщикаПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.ТоварыПоДаннымПоставщика.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, Упаковка, Цена, КоличествоУпаковок, Сумма");
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
	АссортиментСервер.ПроверитьАссортиментТаблицыПодобранныхТоваров(Объект.Магазин,
																	Объект.ТоварыПоДаннымПоставщика.Выгрузить(),
																	Объект.ЗаказПоставщику,
																	Объект.Дата,
																	"ТоварыПоДаннымПоставщика");
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.ТоварыПоДаннымПоставщика);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНаличиеОшибокДанныхЕГАИС(Объект.ТоварыПоДаннымПоставщика);
	
КонецПроцедуры

// Процедура учитывает изменение параметров налогообложения в документе.
//
&НаСервере
Процедура УстановитьТекущуюСтраницуСуммПодвала()
	
	Если Объект.УчитыватьНДС Тогда
		Элементы.ГруппаПодвалСтраницы.ТекущаяСтраница = Элементы.ГруппаСуммыНДС;
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаСуммыНДС", "Видимость", Истина);
	Иначе
		Элементы.ГруппаПодвалСтраницы.ТекущаяСтраница = Элементы.ГруппаСуммы;
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаСуммыНДС", "Видимость", Ложь);
	КонецЕсли;
	
	Если Объект.ЕстьРасхождения Тогда
		Если Объект.УчитыватьНДС Тогда
			Элементы.ГруппаПодвалСтраницыПоДаннымПоставщика.ТекущаяСтраница = Элементы.ИтогоПоДаннымПоставщикаСуммаНДС;
			ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ИтогоПоДаннымПоставщикаСуммаНДС", "Видимость", Истина);
		Иначе
			Элементы.ГруппаПодвалСтраницыПоДаннымПоставщика.ТекущаяСтраница = Элементы.ИтогоПоДаннымПоставщикаСумма;
			ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ИтогоПоДаннымПоставщикаСуммаНДС", "Видимость", Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты документа по умолчанию в зависимости от выбранного налогообложения НДС.
//
&НаСервере
Процедура ПриИзмененииУчитыватьНДССервер()
	
	УстановитьДоступностьЦенаВключаетНДС(Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
	УстановитьТекущуюСтраницуСуммПодвала();
	
	Если Объект.ЕстьРасхождения Тогда
		СтруктураТЧ = Новый Структура;
		СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.ТоварыПоДаннымПоставщика);
		ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС);
		ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает доступность поля ЦенаВключаетНДС.
//
&НаСервере
Процедура УстановитьДоступностьЦенаВключаетНДС(ПриИзменении = Ложь)

	Если ПриИзменении И Не Объект.УчитыватьНДС И Объект.ЦенаВключаетНДС Тогда
		Объект.ЦенаВключаетНДС = Ложь;
	ИначеЕсли ПриИзменении И Объект.УчитыватьНДС Тогда
		Объект.ЦенаВключаетНДС = Истина;
	КонецЕсли;
	
	Элементы.ЦенаВключаетНДС.ТолькоПросмотр = Не Объект.УчитыватьНДС;

КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);

КонецПроцедуры

// Процедура восстанавливает ранее заданные настройки.
//
&НаСервере
Процедура ВосстановитьНастройки()
	Перем ЗначениеНастроек;
	
	ЗначениеНастроек = ХранилищеОбщихНастроек.Загрузить("Документы.ПоступлениеТоваров", "НастройкиСравненияЦен");
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		ЗначениеНастроек.Свойство("СравниватьСЦенамиПрошлыхЗакупок", СравниватьСЦенамиПрошлыхЗакупок);
	КонецЕсли;
	
КонецПроцедуры

// Процедура сохраняет ранее заданные настройки.
//
&НаСервере
Процедура СохранитьНастройки()
	Перем Настройки;

	Настройки = Новый Структура;
	Настройки.Вставить("СравниватьСЦенамиПрошлыхЗакупок", СравниватьСЦенамиПрошлыхЗакупок);
	ХранилищеОбщихНастроек.Сохранить("Документы.ПоступлениеТоваров", "НастройкиСравненияЦен", Настройки);

КонецПроцедуры

// Процедура установки видимости элементов по признаку "Есть расхождения".
&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовПоЕстьРасхожденияСервер()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("СтраницаТоварыПоДаннымПоставщика");
	МассивЭлементов.Добавить("ГруппаПодвалСтраницыПоДаннымПоставщика");

	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Объект.ЕстьРасхождения);
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииФлагаЕстьРасхождения()
	
	УстановитьДоступностьКомандЗаполнитьПоЦенамДанныхПоставщикаСевер();
	
	Если Объект.ЕстьРасхождения Тогда
		ТаблицаПерезаполнена = ПерезаполнитьТоварыПоДаннымПоставщикаПоФактуСервер();
	Иначе
		ТаблицаПерезаполнена = ПерезаполнитьАлкогольныеСтрокиТоваровПоТТН();
	КонецЕсли;
	
	ОбработатьИзменениеФлагаЕстьРасхожденияСервер();
	УстановитьТекущуюСтраницуСуммПодвала();
	
	Возврат ТаблицаПерезаполнена;

КонецФункции

&НаСервере
Процедура ОбработатьИзменениеФлагаЕстьРасхожденияСервер()
	
	Если НЕ Объект.ЕстьРасхождения Тогда
		Объект.ТоварыПоДаннымПоставщика.Очистить();
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементовПоЕстьРасхожденияСервер();
	
КонецПроцедуры

&НаСервере
Функция ПерезаполнитьТоварыПоДаннымПоставщикаПоФактуСервер()
	
	Объект.ТоварыПоДаннымПоставщика.Очистить();
		
		Товары = Объект.Товары.Выгрузить(
		,
		"Номенклатура,
		|Характеристика,
		|КоличествоУпаковок,
		|Количество,
		|Упаковка,
		|Цена,
		|Сумма,
		|СтавкаНДС,
		|СуммаНДС,
		|ХарактеристикиИспользуются,
		|АлкогольнаяПродукция,
		|ИдентификаторУпаковки,
		|ИдентификаторСтроки");
		
	Товары.Свернуть(
		"Номенклатура,
		|Характеристика,
		|Упаковка,
		|Цена,
		|СтавкаНДС,
		|ХарактеристикиИспользуются,
		|АлкогольнаяПродукция,
		|ИдентификаторУпаковки,
		|ИдентификаторСтроки"
		,
		"КоличествоУпаковок,
		|Количество,
		|Сумма,
		|СуммаНДС");
	
	Для каждого ТекСтрока Из Товары Цикл
		НоваяСтрока = Объект.ТоварыПоДаннымПоставщика.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС);
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПерезаполнитьАлкогольныеСтрокиТоваровПоТТН()
	
	Если Объект.ТТНВходящаяЕГАИС.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьТоварыПоступленияПоТТН();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	//ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект,ПараметрыУказанияСерий);
	
	Возврат Истина;
	
КонецФункции

// Заполняет количество в тч Товары по фактически принятому на сервере.
//
&НаСервере
Функция ЗаполнитьПоОрдерамСервер()

	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.ПоступлениеТоваров"));
	ДокументОбъект.ЗаполнитьТоварыПоФактическойПриемке();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
	Возврат Истина;
	
КонецФункции

// Рассчитывает сумму документа по табличной части и помещает рассчитанное значение в реквизит формы.
//
// Параметры:
// ТабличнаяЧасть - тч документа для подсчета суммы документа.
// ЦенаВключаетНДС - Признак включения НДС в цену документа.
// РеквизитСумма - Реквизит формы документа, в который будет помещена сумма.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСуммуВсегоПоДаннымПоставщика(ТабличнаяЧасть, ЦенаВключаетНДС, РеквизитСумма)

	РеквизитСумма = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(ТабличнаяЧасть, ЦенаВключаетНДС);

КонецПроцедуры

// Процедура управляет видимостью и доступностью элементов формы на сервере.
//
&НаСервере
Процедура УстановитьДоступностьЭлементовНаСервере()

	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Склад", "ТолькоПросмотр", НЕ ЗначениеЗаполнено(Объект.Магазин));
	
	Если (ЗначениеЗаполнено(Объект.Контрагент.ГрафикОплаты)) Тогда
		Элементы.ЭтапыОплатЗаполнитьПоГрафикуПоставщика.Видимость = Истина;
	Иначе
		Элементы.ЭтапыОплатЗаполнитьПоГрафикуПоставщика.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает изменение количества упаковок.
//
// Параметры:
//  Нет;
//
&НаКлиенте
Процедура ПриИзмененииТоварыКоличестваУпаковок()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

// Функция помещает список товаров во временное хранилище и возвращает адрес.
//
&НаСервере
Функция ПоместитьТоварыВХранилище()
	
	АдресТоваровВХранилище = ПоместитьВоВременноеХранилище(
		Объект.Товары.Выгрузить(),
		УникальныйИдентификатор);
	
	Возврат АдресТоваровВХранилище;
	
КонецФункции

&НаСервере
Процедура УстановитьПризнакиУчетаНДСПоЗаказуПоставщику(ЗаказуПоставщику)
	
	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказуПоставщику, "ЦенаВключаетНДС, УчитыватьНДС");
	
	Объект.УчитыватьНДС 	= РеквизитыЗаказа.УчитыватьНДС;
	Объект.ЦенаВключаетНДС 	= РеквизитыЗаказа.ЦенаВключаетНДС;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакПередачиАктаВЕГАИС(ТТН)
	
	АктПереданВЕГАИС = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", ТТН);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыДокументовЕГАИС.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Документ = &Документ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СтатусОбработки = РезультатЗапроса.Выгрузить()[0].Статус;
	
	АктПереданВЕГАИС = СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктПодтвержденияКПередаче
		ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктПодтвержденияОбрабатываетсяЕГАИС
		ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктПодтвержденияПереданВУТМ
		ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктРасхожденийКПередаче
		ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктРасхожденийОбрабатываетсяЕГАИС
		ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктРасхожденийПереданВУТМ;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьЭтапыОплатВХранилище()
	
	ТаблицаОплат = Объект.ЭтапыОплат.Выгрузить();
	
	Адрес = ПоместитьВоВременноеХранилище(ТаблицаОплат, УникальныйИдентификатор);
	
	Возврат Адрес;
	
КонецФункции

&НаСервере
Процедура ОбновитьИтоговыеПоказатели(ЗапросДанных = Ложь, ПересчитатьВзаимозачет = Ложь)
	
	Если ЗапросДанных Тогда
		
		ДокументРасчета = ?(ЗначениеЗаполнено(Объект.ЗаказПоставщику), Объект.ЗаказПоставщику, Объект);
		
		ИтоговыеПоказатели = ЗакупкиСервер.ОбновитьИтоговыеПоказателиВзаиморасчетовПоДокументу(ДокументРасчета);
		
		СуммаОплачено = 					ИтоговыеПоказатели.СуммаОплачено;
		СуммаВзаимозачет = 					ИтоговыеПоказатели.СуммаВзаимозачет;
		ДоступноКВзаимозачету = 			ИтоговыеПоказатели.ДоступноКВзаимозачету;
		ВзаимозачетПоДокументу = 			ИтоговыеПоказатели.ВзаимозачетПоДокументу;
		ДоступноКВзаимозачетуПоДокументу = 	ИтоговыеПоказатели.ДоступноКВзаимозачетуПоДокументу;
		
	КонецЕсли;
	
	Если ПересчитатьВзаимозачет И НЕ ЗначениеЗаполнено(Объект.ЗаказПоставщику) Тогда
		НайденныеСтроки = Объект.ЭтапыОплат.НайтиСтроки(Новый Структура("ФормаОплаты", Перечисления.ФормыОплаты.Взаимозачет));
		СуммаВзаимозачет = 0;
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для каждого Строка Из НайденныеСтроки Цикл
				СуммаВзаимозачет = СуммаВзаимозачет + Строка.Сумма;
			КонецЦикла;
		КонецЕсли;
		
		ЗакупкиСервер.РассчитатьСтатусОплатыПоЭтапамОплаты(Объект);
	
	КонецЕсли;
	
	СуммаКОплате = СуммаВсего - СуммаОплачено - СуммаВзаимозачет;
	
	СформироватьСвертываемыеИтоги();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСвертываемыеИтоги()
	
	ФорматСуммовыхПоказателей = ОбщегоНазначенияРТКлиентСерверПовтИсп.ФорматСуммовыхПоказателей();
	
	Если СуммаКОплате > 0 Тогда
		ЗаголовокГруппы = НСтр("ru = 'К оплате: '")+ Формат(СуммаКОплате, ФорматСуммовыхПоказателей);
	ИначеЕсли СуммаОплачено > 0 Тогда
		ЗаголовокГруппы = НСтр("ru = 'Оплачено: '")+ Формат(СуммаОплачено, ФорматСуммовыхПоказателей);
	ИначеЕсли СуммаВзаимозачет > 0 Тогда
		ЗаголовокГруппы = НСтр("ru = 'Взаимозачет: '")+ Формат(СуммаВзаимозачет, ФорматСуммовыхПоказателей);
	Иначе
		ЗаголовокГруппы = НСтр("ru = 'К оплате: '") + Формат(0, ФорматСуммовыхПоказателей);
	КонецЕсли;
	
	Если ДоступноКВзаимозачету > 0 Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + НСтр("ru = '. Долг поставщика: '") + Формат(ДоступноКВзаимозачету, ФорматСуммовыхПоказателей);
	ИначеЕсли ДоступноКВзаимозачетуПоДокументу > 0 Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + НСтр("ru = '. Долг поставщика (по документу): '") + Формат(ДоступноКВзаимозачетуПоДокументу, ФорматСуммовыхПоказателей);
	ИначеЕсли ВзаимозачетПоДокументу > 0 Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + НСтр("ru = '. Взаимозачет (по документу): '") + Формат(ВзаимозачетПоДокументу, ФорматСуммовыхПоказателей);
	КонецЕсли;
	
	Если ДоступноКВзаимозачету > 0 ИЛИ ДоступноКВзаимозачетуПоДокументу > 0 ИЛИ ВзаимозачетПоДокументу > 0 Тогда
		Элементы.СвертываемыеИтоги.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветОтрицательногоЧисла;
	Иначе
		Элементы.СвертываемыеИтоги.ЦветТекстаЗаголовка = Новый Цвет;
	КонецЕсли;
	
	Элементы.СвертываемыеИтоги.ЗаголовокСвернутогоОтображения = ЗаголовокГруппы;
	
КонецПроцедуры

// Процедура заполняет этапы оплат из подбора взаимозачета.
// Параметры: 
//	ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборВзаимозачетовНаСервере(ВыбранноеЗначение)
	
	СуммаИтого    = Объект.Товары.Итог("Сумма");
	СуммаНДСИтого = Объект.Товары.Итог("СуммаНДС");
	СуммаИтого    = СуммаИтого + ?(Объект.ЦенаВключаетНДС, 0, СуммаНДСИтого);
	
	ЗакупкиСервер.ОбработкаВыбораПодборВзаимозачетовНаСервере(Объект, ВыбранноеЗначение, СуммаИтого);
	ОбновитьИтоговыеПоказатели(, Истина);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"БанковскийСчетКонтрагента", "ТолькоПросмотр",
																	НЕ ЗначениеЗаполнено(Объект.Контрагент));
	
	Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент);
	
	ОбновитьПоказателиТабличнойЧастиТовары();
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбновитьИтоговыеПоказатели(Истина);
	Иначе
		ДоступноКВзаимозачету = 0;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура МагазинПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		ПриИзмененииМагазина();
	Иначе
		УстановитьДоступностьКомандыЗаполнитьПоОрдерам();
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Склад", "ТолькоПросмотр", НЕ ЗначениеЗаполнено(Объект.Магазин));
	
	ОбновитьПоказателиТабличнойЧастиТовары();
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбновитьИтоговыеПоказатели(Истина);
	Иначе
		ДоступноКВзаимозачету = 0;
	КонецЕсли;
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента, ИмяТаблицыВыборки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭтапыОплатНаСервере(Результат, ЗаполнитьПоВыбранномуГрафику = Ложь) Экспорт
	
	Если ЗаполнитьПоВыбранномуГрафику И 
		Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЭтаповОплат = Новый Структура();
	ПараметрыЭтаповОплат.Вставить("ЭтапыОплат",      Объект.ЭтапыОплат);
	ПараметрыЭтаповОплат.Вставить("Результат",       Результат);
	ПараметрыЭтаповОплат.Вставить("ДатаПоступления", Объект.Дата);
	ПараметрыЭтаповОплат.Вставить("СуммаДокумента",  Объект.СуммаДокумента);
	
	ЗакупкиСервер.ДобавитьЭтапОплаты(ПараметрыЭтаповОплат);
	
КонецПроцедуры

#Область Серии

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку");
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ПоступлениеТоваров.ПараметрыУказанияСерий(Объект));
	Возврат ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураПересчета = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСПоСуммеСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьСуммуПоСуммеСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках", СтруктураПересчета);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаСуммаПриИзменении()
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПоставщика.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураПересчета = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДСПоСуммеСНДС", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках", СтруктураПересчета);
	СтруктураДействий.Вставить("ПересчитатьСуммуПоСуммеСНДС", СтруктураПересчета);
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.ТоварыПоДаннымПоставщика, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеОплатыПоступленияНаФорме()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостояниеОплатыПоступления.ПросроченаОплата
	|ИЗ
	|	РегистрСведений.СостояниеОплатыПоступления КАК СостояниеОплатыПоступления
	|ГДЕ
	|	СостояниеОплатыПоступления.ПросроченныйДокумент = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		КартинкаСостоянияПросроченаОплата = 1;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		КартинкаСостоянияПросроченаОплата = Выборка.ПросроченаОплата;
	КонецЕсли;
	
	Элементы.КартинкаСостоянияПросроченаОплата.Видимость = КартинкаСостоянияПросроченаОплата = 0;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеРеквизитовСчетаФактуры(Форма, ПараметрыПредставления = Неопределено)
	
	Если ПараметрыПредставления <> Неопределено Тогда
		
		Если ПараметрыПредставления.РазрешенВводНового Тогда
			Форма.Элементы.ГруппаСтраницыСчетФактура.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаРеквизитыСчетаФактуры;
		Иначе
			Форма.ТекстСчетФактура = ПараметрыПредставления.ТекстСчетФактура;
			Форма.Элементы.ТекстСчетФактура.Гиперссылка = ПараметрыПредставления.ГиперссылкаСчетФактура;
			Форма.Элементы.СписокСчетовФактур.Заголовок = ПараметрыПредставления.ТекстСписок;
			Форма.Элементы.СписокСчетовФактур.Гиперссылка = ЗначениеЗаполнено(ПараметрыПредставления.ТекстСписок);
			Форма.Элементы.ВвестиИсправлениеСчетаФактуры.Доступность = ПараметрыПредставления.РазрешеныИсправления;
			Форма.Элементы.ГруппаСтраницыСчетФактура.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаТекстСчетФактура;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.Элементы.ГруппаСтраницыСчетФактура.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаРеквизитыСчетаФактуры Тогда
		
		ИменаЭлементов = Новый Массив;
		ИменаЭлементов.Добавить("НомерСчетаФактуры");
		ИменаЭлементов.Добавить("ДатаСчетаФактуры");
		
		Если Форма.Объект.ПредъявленСчетФактура Тогда
			ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "Доступность", Истина);
			ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "АвтоОтметкаНезаполненного", Истина);
		Иначе
			ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "Доступность", Ложь);
			ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "АвтоОтметкаНезаполненного", Ложь);
			ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "ОтметкаНезаполненного", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Статус

&НаСервере
Процедура ОбновитьСтатусЕГАИС()
	
	Если НЕ ЗначениеЗаполнено(Объект.ТТНВходящаяЕГАИС) Тогда
		СтатусЕГАИСПредставление = "";
		Возврат;
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.ТТНВходящаяЕГАИС);
	
	СтатусЕГАИС        = МенеджерОбъекта.СтатусПоУмолчанию();
	ДальнейшееДействие = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Статусы.Статус КАК Статус,
	|	ВЫБОР
	|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется)
	|		ИНАЧЕ Статусы.ДальнейшееДействие1
	|	КОНЕЦ КАК ДальнейшееДействие1,
	|	ВЫБОР
	|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется)
	|		ИНАЧЕ Статусы.ДальнейшееДействие2
	|	КОНЕЦ КАК ДальнейшееДействие2,
	|	ВЫБОР
	|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется)
	|		ИНАЧЕ Статусы.ДальнейшееДействие3
	|	КОНЕЦ КАК ДальнейшееДействие3
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
	|ГДЕ
	|	Статусы.Документ = &Документ");
	
	Запрос.УстановитьПараметр("Документ", Объект.ТТНВходящаяЕГАИС);
	Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияЕГАИС.НеотображаемыеВДокументахДальнейшиеДействия());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СтатусЕГАИС = Выборка.Статус;
		
		ДальнейшееДействие = Новый Массив;
		ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
		ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
		ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
		
	КонецЕсли;
	
	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучение);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеПередачуДанных);
	
	СтатусЕГАИСПредставление = ИнтеграцияЕГАИС.ПредставлениеСтатусаЕГАИС(
		СтатусЕГАИС,
		ДальнейшееДействие,
		ДопустимыеДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	ОчиститьСообщения();
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьПолучение" Тогда
		
		ИнтеграцияЕГАИСКлиент.ПодготовитьКПередаче(
			Объект.ТТНВходящаяЕГАИС,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучение"));
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ЗапроситьОтменуПроведения" Тогда
		
		ИнтеграцияЕГАИСКлиент.ПодготовитьКПередаче(
			Объект.ТТНВходящаяЕГАИС,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения"));
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияЕГАИСКлиент.ОтменитьПоследнююОперацию(Объект.ТТНВходящаяЕГАИС);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачу" Тогда
		
		ИнтеграцияЕГАИСКлиент.ОтменитьПередачу(Объект.ТТНВходящаяЕГАИС);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбработкиОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаСервере
Процедура УдалитьНесвязанныеСерийныеНомера()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеСерийныеНомера(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТаблицыВыборки(ИмяСтраницы)
	
	ИмяТаблицыВыборки = "";
	Если ИмяСтраницы = "СтраницаТоварыПоДаннымПоставщика" Тогда
		ИмяТаблицыВыборки = "ТоварыПоДаннымПоставщика";
		
	Иначе
		ИмяТаблицыВыборки = "Товары";
	КонецЕсли;

	Возврат ИмяТаблицыВыборки;
	
КонецФункции

#Область СлужебныеЕГАИС

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовЕГАИС(Форма)
	
	ТолькоПросмотрЕстьРасхождения = Форма.АктПереданВЕГАИС;
	
	Если НЕ ТолькоПросмотрЕстьРасхождения И ЗначениеЗаполнено(Форма.Объект.ТТНВходящаяЕГАИС) Тогда
		
		СтатусОбработки = СтатусОбработкиТТНВходящейЕГАИС(Форма.Объект.ТТНВходящаяЕГАИС);
		
		Если СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктПодтвержденияКПередаче")
			ИЛИ СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктПодтвержденияОбрабатываетсяЕГАИС")
			ИЛИ СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.АктПодтвержденияПереданВУТМ") Тогда
			ТолькоПросмотрЕстьРасхождения = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Шапка
	
	Форма.Элементы.ЕстьРасхождения.ТолькоПросмотр = ТолькоПросмотрЕстьРасхождения;
	
	// Товары
	
	Форма.Элементы.Товары.ИзменятьСоставСтрок = НЕ Форма.АктПереданВЕГАИС;
	Форма.Элементы.ГруппаТоварыКоличествоУпаковок.ТолькоПросмотр = Форма.АктПереданВЕГАИС;
	
	Форма.Элементы.ТоварыПоискПоШтрихкоду.Доступность      = НЕ Форма.АктПереданВЕГАИС;
	Форма.Элементы.ТоварыПоискПоНаименованию.Доступность   = НЕ Форма.АктПереданВЕГАИС;
	Форма.Элементы.ТоварыПоискПоМагнитномуКоду.Доступность = НЕ Форма.АктПереданВЕГАИС;
	Форма.Элементы.ТоварыЗагрузитьДанныеИзТСД.Доступность  = НЕ Форма.АктПереданВЕГАИС;
	Форма.Элементы.ТоварыОткрытьПодбор.Доступность         = НЕ Форма.АктПереданВЕГАИС;
	Форма.Элементы.ТоварыЗаполнитьПоОрдерам.Доступность    = НЕ Форма.АктПереданВЕГАИС;
	
	Форма.Элементы.ТоварыЗаполнитьЦеныВыделенныхСтрокПоПрошлымЗакупкам.Доступность    = НЕ Форма.АктПереданВЕГАИС;
	Форма.Элементы.ТоварыЗаполнитьВыделенныеСтрокиПоЦенамДанныхПоставщика.Доступность = НЕ Форма.АктПереданВЕГАИС;
	Форма.Элементы.РаспределитьПоХарактеристикам.Доступность                          = НЕ Форма.АктПереданВЕГАИС;
	
	//// ТоварыПоДаннымПоставщика
	
	Форма.Элементы.ТоварыПоДаннымПоставщика.ТолькоПросмотр = Форма.АктПереданВЕГАИС;
	
	Форма.Элементы.ТоварыПоДаннымПоставщикаПоискПоШтрихкоду.Доступность                         = НЕ Форма.АктПереданВЕГАИС;
	Форма.Элементы.ТоварыПоДаннымПоставщикаПоискПоНаименованию.Доступность                      = НЕ Форма.АктПереданВЕГАИС;
	Форма.Элементы.ТоварыПоДаннымПоставщикаПоискПоМагнитномуКоду.Доступность                    = НЕ Форма.АктПереданВЕГАИС;
	Форма.Элементы.ТоварыПоДаннымПоставщикаЗагрузитьДанныеИзТСД.Доступность                     = НЕ Форма.АктПереданВЕГАИС;
	Форма.Элементы.ТоварыПоДаннымПоставщикаПодобратьТовары.Доступность                          = НЕ Форма.АктПереданВЕГАИС;
	Форма.Элементы.ТоварыПоДаннымПоставщикаЗаполнитьТоварыПоДаннымПоставщикаПоФакту.Доступность = НЕ Форма.АктПереданВЕГАИС;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатусОбработкиТТНВходящейЕГАИС(ТТН)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", ТТН);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыДокументовЕГАИС.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Документ = &Документ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить()[0].Статус;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция УстановитьДоступностьЭлементовТабличнойЧастиТоварыКлиент(ТекущиеДанные)
	
	ДоступностьЭлементовСтроки = Ложь;
	ДоступностьРедактированияНоменклатуры = Истина;
	ДоступностьРедактированияХарактеристики = Ложь;
	
	Если ТекущиеДанные.АлкогольнаяПродукция.Пустая() Тогда // если это не алкогольная строка, доступно
		ДоступностьЭлементовСтроки = Истина;
		ДоступностьРедактированияХарактеристики = Истина;
	Иначе
		Если ТекущиеДанные.Характеристика.Пустая() Тогда
			ДоступностьРедактированияХарактеристики = Истина;
		КонецЕсли;
		Если Объект.ЕстьРасхождения Тогда
			ДоступностьЭлементовСтроки = не АктПереданВЕГАИС;
		КонецЕсли;
	КонецЕсли;
	
	МассивДоступныхЭлементовСтроки = Новый Массив();
	МассивДоступныхЭлементовСтроки.Добавить(Элементы.ТоварыЦена);
	МассивДоступныхЭлементовСтроки.Добавить(Элементы.ТоварыСумма);
	МассивДоступныхЭлементовСтроки.Добавить(Элементы.ТоварыСтавкаНДС);
	МассивДоступныхЭлементовСтроки.Добавить(Элементы.ТоварыСуммаНДС);
	МассивДоступныхЭлементовСтроки.Добавить(Элементы.ТоварыСуммаСНДС);
	
	Элементы.ТоварыНоменклатура.ТолькоПросмотр = Не ДоступностьРедактированияНоменклатуры;
	Элементы.ТоварыХарактеристика.ТолькоПросмотр = Не ДоступностьРедактированияХарактеристики;
	Для Каждого ЭлементТаблицы Из Элементы.Товары.ПодчиненныеЭлементы Цикл
		Если ЭлементТаблицы = Элементы.ТоварыНоменклатура или ЭлементТаблицы = Элементы.ТоварыХарактеристика Тогда
			Продолжить;
		КонецЕсли;
		Если МассивДоступныхЭлементовСтроки.Найти(ЭлементТаблицы) = Неопределено Тогда
			ЭлементТаблицы.ТолькоПросмотр = Не ДоступностьЭлементовСтроки;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция УстановитьДоступностьЭлементовТабличнойЧастиТоварыПоДаннымПоставщикаКлиент(ТекущиеДанные)
	
	ДоступностьРедактированияХарактеристики = Ложь;
	Если ТекущиеДанные.АлкогольнаяПродукция.Пустая() Тогда
		ДоступностьЭлементовСтроки = Истина;
	Иначе
		Если ТекущиеДанные.Характеристика.Пустая() Тогда
			ДоступностьРедактированияХарактеристики = не АктПереданВЕГАИС;
		КонецЕсли;
		ДоступностьЭлементовСтроки = Ложь;
	КонецЕсли;
	
	Элементы.ТоварыПоДаннымПоставщикаХарактеристика.ТолькоПросмотр = Не ДоступностьРедактированияХарактеристики;
	Для Каждого ЭлементТаблицы Из Элементы.ТоварыПоДаннымПоставщика.ПодчиненныеЭлементы Цикл
		Если ЭлементТаблицы = Элементы.ТоварыПоДаннымПоставщикаХарактеристика Тогда
			Продолжить;
		КонецЕсли;
		ЭлементТаблицы.ТолькоПросмотр = Не ДоступностьЭлементовСтроки;
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ОповещениеОткрытьФормуСопоставлениеНоменклатурыЕГАИССервер(ДополнительныеПараметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ПоступлениеТоваровТовары.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	&Товары КАК ПоступлениеТоваровТовары
	|ГДЕ
	|	ПоступлениеТоваровТовары.ИдентификаторСтроки В(&ИдентификаторыСтрок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаВЗапросе.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ТаблицаСОтборомПоИдентификаторам
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|ГДЕ
	|	ТаблицаВЗапросе.ИдентификаторСтроки В(&ИдентификаторыСтрок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСОтборомПоИдентификаторам.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	МАКСИМУМ(ТаблицаСОтборомПоИдентификаторам.ИдентификаторСтроки) КАК ИдентификаторСтроки,
	|	МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Номенклатура) КАК Номенклатура,
	|	МАКСИМУМ(СоответствиеНоменклатурыЕГАИС.Характеристика) КАК Характеристика
	|ИЗ
	|	ТаблицаСОтборомПоИдентификаторам КАК ТаблицаСОтборомПоИдентификаторам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО ТаблицаСОтборомПоИдентификаторам.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	|			И (СоответствиеНоменклатурыЕГАИС.Порядок = 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСОтборомПоИдентификаторам.АлкогольнаяПродукция";
	
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ДополнительныеПараметры.АлкогольнаяПродукция);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИдентификаторСтроки", Выборка.ИдентификаторСтроки);
		
		МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаТаблицы = МассивСтрок[0];
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка,, "АлкогольнаяПродукция, ИдентификаторСтроки");
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНаличиеОшибокДанныхЕГАИС(Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ОповещениеОткрытьФормуСопоставлениеОрганизацийЕГАИССервер(ДополнительныеПараметры, СопоставленКонтрагент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТТНВходящаяЕГАИС.Поставщик = &ПустаяСсылкаПоставщика
	|			ТОГДА ТТНВходящаяЕГАИС.Грузоотправитель
	|		ИНАЧЕ ТТНВходящаяЕГАИС.Поставщик
	|	КОНЕЦ КАК Поставщик
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаВЗапросе.Поставщик.Сопоставлено, ЛОЖЬ)
	|				И НЕ ТаблицаВЗапросе.Поставщик.СоответствуетОрганизации
	|			ТОГДА ТаблицаВЗапросе.Поставщик.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Контрагент
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.ТТНВходящаяЕГАИС);
	Запрос.УстановитьПараметр("ПустаяСсылкаПоставщика", Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект.Контрагент = Выборка.Контрагент;
		
		КонтрагентПриИзмененииСервер();
		
		СопоставленКонтрагент = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыводНапоминанияЕГАИС()
	
	Если НапоминаниеЕГАИСВыведено < ТекущаяДата() - 3*60 Тогда
		ПодключитьОбработчикОжидания("ПроверитьВыводНапоминанияЕГАИСОбработчикОжидания", 3, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыводНапоминанияЕГАИСОбработчикОжидания()
	
	ТекстНапоминания = ПолучитьТекстНапоминания();
	
	Если ЗначениеЗаполнено(ТекстНапоминания) Тогда
		ПоказатьОповещениеПользователя("Обмен данными с ЕГАИС:",, ТекстНапоминания, БиблиотекаКартинок.Изменить);
		НапоминаниеЕГАИСВыведено = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстНапоминания()
	
	Возврат ИнтеграцияЕГАИСРТ.ПолучитьНапоминаниеЕГАИС(Объект);
	
КонецФункции

#КонецОбласти

#Область ГИСМ

&НаСервере
Процедура СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер()
	
	ИнтеграцияГИСМ_РТ.СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭС(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстУведомленияГИСМОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияГИСМКлиентРТ.ТекстУведомленияОбИмпортеВвозеИзЕАЭСОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СПАРКРиски

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()

	ОбновитьОтображениеИндексыСПАРК();

КонецПроцедуры

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()

	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Однострочный");
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ЭтотОбъект.ИндексыСПАРКРиски,
		Неопределено,
		Объект.Контрагент, // Искать по ссылке
		ЭтотОбъект,
		ПараметрыОтображения,
		Истина);

КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТабличнойЧасти)
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки, Объект[ИмяТабличнойЧасти]);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена(ИмяТабличнойЧасти)
		
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		Если ИмяТабличнойЧасти = "Товары" Тогда 
			СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
				ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
		КонецЕсли;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураПараметровДействия = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДСУчитыватьНДС(Объект));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		Если ИспользоватьАссортимент Тогда
			СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента(Объект, Ложь, "ЗаказПоставщику", "ТоварыПоДаннымПоставщика");
			СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);		
		КонецЕсли;
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьКэшированныеЗначенияДляУчетаСерий(ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий, Ложь);
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
			ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьКэшированныеЗначенияДляУчетаСерий(ТекущаяСтрока,
			КэшированныеЗначения,ПараметрыУказанияСерий,Ложь);
		
		Если ИмяТабличнойЧасти = "Товары" Тогда 
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатовВСтроке(ТекущаяСтрока);
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСуммуВсегоПоДаннымПоставщика(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС, СуммаВсегоПоДаннымПоставщика);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.ТоварыПоДаннымПоставщика, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект[ИмяТабличнойЧасти], Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбновитьИтоговыеПоказатели();
	
	КопированиеСтрокСервер.ОчиститьБуферОбмена();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтрокиТовары");
	МассивЭлементов.Добавить("ТоварыПоДаннымПоставщикаВставитьСтрокиТоварыПоДаннымПоставщика");

	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
		
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(ИмяТабличнойЧасти)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы[ИмяТабличнойЧасти].ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере(ИмяТабличнойЧасти);
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТабличнойЧасти)
	
	КоличествоТоваровДоВставки = Объект[ИмяТабличнойЧасти].Количество();
	ПолучитьСтрокиИзБуфераОбмена(ИмяТабличнойЧасти);
	КоличествоВставленных = Объект[ИмяТабличнойЧасти].Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
