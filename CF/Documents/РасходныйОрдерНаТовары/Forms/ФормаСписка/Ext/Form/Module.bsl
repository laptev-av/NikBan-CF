
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	ОбщегоНазначенияРТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список", "Дата");
	ОбщегоНазначенияРТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокРаспоряжений", "СписокРаспоряженийДата");
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Магазин = Настройки.Получить("Магазин");
	Склад   = Настройки.Получить("Склад");
	УстановитьОтборДинамическогоСписка("Магазин");
	УстановитьОтборДинамическогоСписка("Склад");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьСклада();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСписокРаспоряженийНаОтгрузкуТоваров" Тогда
		ЗаполнитьСписокРаспоряжений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                 Истина, "Документ.РасходныйОрдерНаТовары.Форма.ФормаДокумента.Открытие");
               
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборСкладПриИзменении(Элемент)
	
	УстановитьОтборДинамическогоСписка("Склад");
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРаспоряженияНаОтгрузку Тогда
		ЗаполнитьСписокРаспоряжений();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтборМагазинПриИзменении(Элемент)
	
	УстановитьВсеОтборыДинамическогоСписка();
	УстановитьДоступностьСклада();
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРаспоряженияНаОтгрузку Тогда
		ЗаполнитьСписокРаспоряжений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтгрузкиПриИзменении(Элемент)
	
	ЗаполнитьСписокРаспоряжений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	ЗаполнитьСписокРаспоряжений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьВыполненныеРаспоряженияПриИзменении(Элемент)
	
	ЗаполнитьСписокРаспоряжений();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаРаспоряженияНаОтгрузку Тогда
		ЗаполнитьСписокРаспоряжений();
	КонецЕсли;

КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТабличнойЧастиСписокраспоряжений

&НаКлиенте
Процедура СписокРаспоряженийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокРаспоряжений.ТекущиеДанные;
	
    Если НЕ ТекущиеДанные = Неопределено Тогда
        
        // &ЗамерПроизводительности
        ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                 Истина, "Документ."+
                            ПолучитьИмяМетаданныхРаспоряжения(ТекущиеДанные.Распоряжение)+
                                ".Форма.ФормаДокумента.Открытие");
                                    
		ПоказатьЗначение(,ТекущиеДанные.Распоряжение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ЗаполнитьСписокРаспоряжений();
КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВсеОтборыДинамическогоСписка()
	
	УстановитьОтборДинамическогоСписка("Магазин");
	УстановитьОтборДинамическогоСписка("Склад");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическогоСписка(ИмяРеквизита)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		Список, 
		ИмяРеквизита, 
		ЭтаФорма[ИмяРеквизита], 
		ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизита]));
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСклада()

	Элементы.ОтборСклад.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Магазин);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРаспоряжений()

	СписокРаспоряжений.Очистить();
	
	Запрос = Новый Запрос; 
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Ссылка КАК Склад
		|ПОМЕСТИТЬ СкладыМагазина
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Магазин = &Магазин
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТоварыКОтгрузкеОбороты.ДокументОснование КАК ДокументРаспоряжение
		|ПОМЕСТИТЬ Распоряжения
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			ВЫБОР
		|					КОГДА &ОтборПоСкладу
		|						ТОГДА Склад = &Склад
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &ОтборПоМагазину
		|						ТОГДА Склад В
		|								(ВЫБРАТЬ
		|									СкладыМагазина.Склад
		|								ИЗ
		|									СкладыМагазина КАК СкладыМагазина)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ) КАК ТоварыКОтгрузкеОбороты
		|ГДЕ
		|	НЕ ТоварыКОтгрузкеОбороты.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
		|	И ВЫБОР
		|			КОГДА &ОтборПоМагазину
		|				ТОГДА ЕСТЬNULL(ТоварыКОтгрузкеОбороты.ДокументОснование.Магазин, ТоварыКОтгрузкеОбороты.ДокументОснование.МагазинПолучатель) = &Магазин
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументРаспоряжение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыКОтгрузкеОстаткиИОбороты.ДокументОснование.Дата КАК Дата,
		|	ТоварыКОтгрузкеОстаткиИОбороты.ДокументОснование КАК Распоряжение,
		|	ЕСТЬNULL(ТоварыКОтгрузкеОстаткиИОбороты.ДокументОснование.Контрагент, ТоварыКОтгрузкеОстаткиИОбороты.ДокументОснование.МагазинПолучатель) КАК Получатель,
		|	ТоварыКОтгрузкеОстаткиИОбороты.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузкеОстаткиИОбороты.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузкеОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
		|	ТоварыКОтгрузкеОстаткиИОбороты.КоличествоПриход КАК КоличествоПриход,
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузкеОстаткиИОбороты.КоличествоКонечныйОстаток > 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Выполнен
		|ПОМЕСТИТЬ Результат
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(
		|			,
		|			,
		|			,
		|			,
		|			ДокументОснование В
		|				(ВЫБРАТЬ
		|					Распоряжения.ДокументРаспоряжение
		|				ИЗ
		|					Распоряжения КАК Распоряжения)) КАК ТоварыКОтгрузкеОстаткиИОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	Получатель,
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Дата КАК Дата,
		|	ВложенныйЗапрос.Распоряжение,
		|	ВложенныйЗапрос.Получатель,
		|	ВложенныйЗапрос.Выполнен
		|ИЗ
		|	(ВЫБРАТЬ
		|		Результат.Дата КАК Дата,
		|		Результат.Распоряжение КАК Распоряжение,
		|		Результат.Получатель КАК Получатель,
		|		ВЫБОР
		|			КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Результат.Выполнен) = 1
		|				ТОГДА МАКСИМУМ(Результат.Выполнен)
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК Выполнен
		|	ИЗ
		|		Результат КАК Результат
		|	ГДЕ
		|		ВЫБОР
		|				КОГДА &ОтборПоПолучателю
		|					ТОГДА Результат.Получатель = &Получатель
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Результат.Дата,
		|		Результат.Получатель,
		|		Результат.Распоряжение) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ОтборПоСтатусу
		|				ТОГДА ВложенныйЗапрос.Выполнен = ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	Запрос.УстановитьПараметр("ОтборПоПолучателю", ЗначениеЗаполнено(Получатель));
	Запрос.УстановитьПараметр("ОтборПоСтатусу", НЕ ОтображатьВыполненныеРаспоряжения);
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("ОтборПоСкладу", ЗначениеЗаполнено(Склад));
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ОтборПоМагазину", ЗначениеЗаполнено(Магазин));
	Запрос.УстановитьПараметр("Магазин", Магазин);

	Запрос.УстановитьПараметр("НачалоПериода", ПериодОтгрузки.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода",  ПериодОтгрузки.ДатаОкончания);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		СписокРаспоряжений.Загрузить(Результат.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяМетаданныхРаспоряжения(Ссылка)

 Возврат Ссылка.Метаданные().Имя;	

КонецФункции 

#КонецОбласти
