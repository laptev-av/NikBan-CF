
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоНаименованию(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ЗавершитьОбработкуДанныхПоКодуКлиент(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		
	Иначе // Номенклатура.
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТВызовСервера.ОбработатьДанныеПоНоменклатуреИзТСДСервер(ЭтотОбъект, СтруктураПараметров);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	
	ИдентификаторСтроки = Неопределено;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", СтруктураПараметров.Номенклатура);
	МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	
	Если МассивСтрок.Количество() = 0 Тогда
		НоваяСтрока = Объект.Товары.Добавить();
		ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
		НоваяСтрока.Номенклатура = СтруктураПараметров.Номенклатура;
		ТоварыНоменклатураПриИзмененииСервер(ИдентификаторСтроки);
	Иначе
		ИдентификаторСтроки = МассивСтрок[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ДобавитьНоменклатуруПоСерийномуНомеру(ЭтотОбъект, СтруктураНомера);
	Возврат ИдентификаторСтроки;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьТоварыПоЗапросуВыборРежимаЗавершение(Результат, ПараметрыЗаполнения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаполнения.РежимЗаполнения = 1;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ПараметрыЗаполнения.РежимЗаполнения = 2;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ИмяКоманды = "ЗаполнитьПоАссортиментуФормата" Тогда
		
		ОбработчикОповещения = Новый ОписаниеОповещения(
										"ЗаполнитьТоварыПоЗапросуВыборФорматаЗавершение",
										ЭтотОбъект,
										ПараметрыЗаполнения);
		ОткрытьФорму(
			"Справочник.ФорматыМагазинов.ФормаВыбора",
			,
			ЭтаФорма,
			,
			,
			,
			ОбработчикОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ПараметрыЗаполнения.ИмяКоманды="ЗаполнитьПоСкладскимОстаткамИОборотам" Тогда
		
		ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
		ДиалогПериода.Период = Новый СтандартныйПериод(НачалоМесяца(Объект.Дата), Объект.Дата);
		ОбработчикОповещения = Новый ОписаниеОповещения(
										"ЗаполнитьТоварыПоЗапросуРедактированиеПериодаЗавершение",
										ЭтотОбъект,
										ПараметрыЗаполнения);
		ДиалогПериода.Показать(ОбработчикОповещения);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоЗапросуВыборФорматаЗавершение(Результат, ПараметрыЗаполнения) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПараметрыЗаполнения.Вставить("ОбъектПланирования", Результат);
		Если ПараметрыЗаполнения.Свойство("ОбновитьФорматОбъекта") Тогда
			Объект.ОбъектПланирования = Результат;
		КонецЕсли;
		ПараметрыЗаполнения.Вставить("Период", НачалоДня(Объект.Дата));
		ЗаполнитьТоварыПоЗапросуНаСервере(ПараметрыЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоЗапросуРедактированиеПериодаЗавершение(Период, ПараметрыЗаполнения) Экспорт
	
	Если Период <> Неопределено Тогда 
		ПараметрыЗаполнения.Вставить("ДатаНачала",НачалоДня(Период.ДатаНачала));
		ПараметрыЗаполнения.Вставить("ДатаКонца",КонецДня(Период.ДатаОкончания));
		Если ЗначениеЗаполнено(Объект.ОбъектПланирования) Тогда
			ЗаполнитьТоварыПоЗапросуВыборФорматаЗавершение(Объект.ОбъектПланирования, ПараметрыЗаполнения);
		Иначе
			ПараметрыЗаполнения.Вставить("ОбновитьФорматОбъекта", Истина);
			ОбработчикОповещения = Новый ОписаниеОповещения(
											"ЗаполнитьТоварыПоЗапросуВыборФорматаЗавершение",
											ЭтотОбъект,
											ПараметрыЗаполнения);
			ОткрытьФорму(
				"Справочник.ФорматыМагазинов.ФормаВыбора",
				,
				ЭтаФорма,
				,
				,
				,
				ОбработчикОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоОтборуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ДобавитьТоварыИзВременногоХранилищаНаСервере(Результат, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРольДляВсехТоваровЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Для Каждого СтрокаТовара Из Объект.Товары Цикл
			СтрокаТовара.РольАссортимента = Результат;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидЦенДляВсехТоваровЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ВидЦенМожетИспользоваться(Результат) Тогда
			Для Каждого СтрокаТовара Из Объект.Товары Цикл
				СтрокаТовара.ВидЦен = Результат;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НомерВПределахДня = ДатаДокументаСервер(Объект.Дата) - НачалоДня(ДатаДокументаСервер(Объект.Дата)) + 1;
	Иначе
		НомерВПределахДня = РассчитатьНомерВПределахДня(ДатаДокументаСервер(Объект.Дата), Объект.Ссылка);
		Объект.Дата = РассчитатьДатуДокумента(ДатаДокументаСервер(Объект.Дата), НомерВПределахДня);
	КонецЕсли;
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Обработчик механизма отображения дополнительных колонок номенклатуры.
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(
		Объект,
		КартинкаСостоянияДокумента,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		РазрешеноПроведение);
	
	НастроитьФормуПоДополнительнымПравам();
	
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.ОбъектПланирования) Тогда
		ДоступностьПравилаЦенообразования = ОбщегоНазначенияРТВызовСервера.ПроверитьДоступКРеквизиту(
												Объект.ОбъектПланирования,
												"ПравилоЦенообразования",
												"Справочник.ПравилаЦенообразования");
		Если НЕ ДоступностьПравилаЦенообразования Тогда
			Объект.ОбъектПланирования = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.Найти("ФормаДокументУстановкаЦенНоменклатурыСоздатьНаОсновании") <> Неопределено Тогда 
		Элементы.ФормаДокументУстановкаЦенНоменклатурыСоздатьНаОсновании.Видимость = ПолучитьФункциональнуюОпцию("УстанавливатьВидыЦенВАссортименте");
	КонецЕсли;
	
	// ПодключаемоеОборудование
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(
		Объект,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение);
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(
		Объект,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение);
		
	// &ЗамерПроизводительности	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборПоТоварнымКатегориям.Форма.ПодборПоКатегориям" Тогда	
		ОбработкаВыбораПодборПоКатегориямНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности 
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
	                                            "Документ.ИзменениеАссортимента.ФормаДокумента.Запись",
                                                           Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	ОперацияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПланированияПриИзменении(Элемент)
	
	ОбъектПланированияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВПределахДняПриИзменении(Элемент)
	
	Если НомерВПределахДня >= 86400 Тогда
		НомерВПределахДня = РассчитатьНомерВПределахДня(ДатаДокумента(Объект.Дата), Объект.Ссылка);
		Объект.Дата = РассчитатьДатуДокумента(ДатаДокумента(Объект.Дата), НомерВПределахДня);
		Возврат;
	КонецЕсли;
	
	Объект.Дата = РассчитатьДатуДокумента(ДатаДокумента(Объект.Дата), НомерВПределахДня);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьДатуДокумента(ДатаДокумента, НомерВПределахДня)
	
	Возврат НачалоДня(ДатаДокумента) + НомерВПределахДня - 1;
	
КонецФункции

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	НомерВПределахДня = РассчитатьНомерВПределахДня(ДатаДокумента(Объект.Дата), Объект.Ссылка);
	Объект.Дата = РассчитатьДатуДокумента(ДатаДокумента(Объект.Дата), НомерВПределахДня);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ИДТекущейСтроки=Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	ТоварыНоменклатураПриИзмененииСервер(ИДТекущейСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦенПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если НЕ ВидЦенМожетИспользоваться(ТекущаяСтрока.ВидЦен) Тогда
		ТекущаяСтрока.ВидЦен = Неопределено;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЕстьКоличество", Ложь);
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоНаименованию(Команда)
	
	ПараметрыПоиска = Новый Структура;
	РаботаСПравиламиИменованияКлиент.ПоискПоНаименованию(ЭтаФорма,ПараметрыПоиска);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьПодборПоКатегориям(Команда)
	Отказ = Ложь;
	ПроверитьВозможностьПодбора(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Обработка.ПодборПоТоварнымКатегориям.Форма.ПодборПоКатегориям.Открытие");

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НачальнаяСтраница", "СтраницаПодборТоваров");
	ПараметрыФормы.Вставить("ОбъектПланирования", Объект.ОбъектПланирования);
	ПараметрыФормы.Вставить("Операция", Объект.Операция);
	ПараметрыФормы.Вставить("Стадия", Объект.Стадия);
	ПараметрыФормы.Вставить("ДатаНачалаДействия", Объект.Дата);
	ПараметрыФормы.Вставить("ФормироватьДеревоПриОткрытии", Истина);
	ПараметрыФормы.Вставить("РежимПодбора", Истина);
	
	ОткрытьФорму(
		"Обработка.ПодборПоТоварнымКатегориям.Форма.ПодборПоКатегориям",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	ПроверитьВозможностьПодбора(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'изменение ассортимента'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезХарактеристик", Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуЗапрашиватьКоличество", Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуОстаткиНаСкладах", Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуВвестиСерийныеНомера", Истина);
	ПараметрыФормы.Вставить("ЗапрашиватьКоличество", Ложь);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоОтбору(Команда)
	
	Отказ = Ложь;
	ПроверитьВозможностьПодбора(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ОбработчикОповещения = Новый ОписаниеОповещения(
									"ДобавитьТоварыПоОтборуЗавершение",
									ЭтотОбъект,
									ДополнительныеПараметры);
	ОткрытьФорму(
		"Обработка.ПодборТоваровПоОтбору.Форма.Форма",
		,
		ЭтаФорма,
		,
		,
		,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоАссортиментуФормата(Команда)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяКоманды", "ЗаполнитьПоАссортиментуФормата");
	ЗаполнитьТоварыПоЗапросуНаКлиенте(ПараметрыЗаполнения);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСкладскимОстаткамИОборотам(Команда)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяКоманды", "ЗаполнитьПоСкладскимОстаткамИОборотам");
	ЗаполнитьТоварыПоЗапросуНаКлиенте(ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРольДляВсехТоваров(Команда)
	
	Если ТоварыЗаполнены() Тогда
		ДополнительныеПараметры = Новый Структура;
		ОбработчикОповещения = Новый ОписаниеОповещения(
										"УстановитьРольДляВсехТоваровЗавершение",
										ЭтотОбъект,
										ДополнительныеПараметры);
		ОткрытьФорму(
			"Перечисление.РолиАссортимента.ФормаВыбора",
			,
			ЭтаФорма,
			,
			,
			,
			ОбработчикОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидЦенДляВсехТоваров(Команда)
	
	Если ТоварыЗаполнены() Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ИспользоватьПриПродаже", Истина);
		СтруктураОтбора.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС());
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
		
		ДополнительныеПараметры = Новый Структура;
		ОбработчикОповещения = Новый ОписаниеОповещения(
										"УстановитьВидЦенДляВсехТоваровЗавершение",
										ЭтотОбъект,
										ДополнительныеПараметры);
		ОткрытьФорму(
			"Справочник.ВидыЦен.ФормаВыбора",
			ПараметрыОткрытия,
			ЭтаФорма,
			,
			,
			,
			ОбработчикОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	РазвернутьСвернутьТЧНаСервере();
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбъектПланированияПриИзмененииСервер()
	
	ДоступностьПравилаЦенообразования = ОбщегоНазначенияРТВызовСервера.ПроверитьДоступКРеквизиту(
											Объект.ОбъектПланирования,
											"ПравилоЦенообразования",
											"Справочник.ПравилаЦенообразования");
	
	Если НЕ ДоступностьПравилаЦенообразования Тогда
		ТекстСообщения = НСтр("ru = 'Нет доступа к правилу ценообразования формата магазинов. Использование данного формата невозможно.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ОбъектПланирования");
		Объект.ОбъектПланирования = Справочники.ФорматыМагазинов.ПустаяСсылка();
	КонецЕсли;
	
	АссортиментСервер.ВидыЦенИзмененияАссортиментаСоответствуютПравилам(Объект);
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	Элементы.Шапка.Видимость                          = ВидимостьЭлементов;
	Элементы.ГруппаИнформация.Видимость               = ВидимостьЭлементов;
	
	Если ВидимостьЭлементов Тогда
		ЭтаФорма.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Авто;
		Картинка = БиблиотекаКартинок.РазвернутьТабличнуюЧасть
	Иначе
		ЭтаФорма.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
		Картинка = БиблиотекаКартинок.СвернутьТабличнуюЧасть;
	КонецЕсли;
	Элементы.РазвернутьСвернутьТЧ.Картинка = Картинка;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам();
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
	
КонецПроцедуры

// Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора.
//	Параметры:
//	Отказ - Булево
&НаКлиенте
Процедура ПроверитьВозможностьПодбора(Отказ)
	
	ОчиститьСообщения();
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Отказ=Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Дата"" не заполнено'"),
			Объект,
			"Объект.Дата",
			,
			Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Стадия) Тогда
		Отказ=Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Операция"" не заполнено'"),
			Объект,
			"Объект.Операция",
			,
			Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектПланирования) Тогда
		Отказ=Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Формат магазина"" не заполнено'"),
			Объект,
			"Объект.ОбъектПланирования",
			,
			Отказ);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоЗапросуНаКлиенте(ПараметрыЗаполнения)
	
	ПараметрыЗаполнения.Вставить("РежимЗаполнения", 1);
	Если Объект.Товары.Количество() = 0 Тогда
		ЗаполнитьТоварыПоЗапросуВыборРежимаЗавершение(КодВозвратаДиалога.Да, ПараметрыЗаполнения);
	Иначе
		ТекстВопроса = НСтр("ru = 'Табличная часть содержит строки.
								  |Очистить табличную часть?'");
		ОбработчикОповещения = Новый ОписаниеОповещения(
										"ЗаполнитьТоварыПоЗапросуВыборРежимаЗавершение",
										ЭтотОбъект,
										ПараметрыЗаполнения);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет товары на основании данных запроса
// запрос формируется в зависимости от имени команды заполнения.
// Параметры: 
//  	ПараметрыЗаполнения - структура параметров для выполнения команды.
&НаСервере
Процедура ЗаполнитьТоварыПоЗапросуНаСервере(ПараметрыЗаполнения)
	
	Если ПараметрыЗаполнения.РежимЗаполнения = 1 Тогда
		Объект.Товары.Очистить();
	Иначе
		ПараметрыЗаполнения.Вставить("МассивТоваров", Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = СформироватьТекстДляКоманды(ПараметрыЗаполнения.ИмяКоманды, ПараметрыЗаполнения.РежимЗаполнения);
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого Параметр Из ПараметрыЗаполнения Цикл
		Если Параметр.Ключ = "РежимЗаполнения"
			ИЛИ Параметр.Ключ = "ОбновитьФорматОбъекта" 
			ИЛИ Параметр.Ключ = "ИмяКоманды" Тогда
			Продолжить;
		КонецЕсли;
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	ПроверятьНДС = Ложь;
	ПравилоЦенообразования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
								Объект.ОбъектПланирования,
								"ПравилоЦенообразования");
	
	ВидЦенФормата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
								ПравилоЦенообразования,
								"ВидЦен");
	
	Если ПараметрыЗаполнения.ИмяКоманды = "ЗаполнитьПоСкладскимОстаткамИОборотам" Тогда
		
		Запрос.УстановитьПараметр("ПравилоЦенообразования", ПравилоЦенообразования);
		Запрос.УстановитьПараметр("ВидЦенФормата", ВидЦенФормата);
	ИначеЕсли ПараметрыЗаполнения.ИмяКоманды = "ЗаполнитьПоАссортиментуФормата" Тогда
		
		ПроверятьНДС = Истина;
		ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
									ВидЦенФормата,
									"ЦенаВключаетНДС");
		
	КонецЕсли;
	
	Результат=Запрос.Выполнить();
	Выборка=Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "Номенклатура, РольАссортимента, ВидЦен");
		Если ПроверятьНДС Тогда
			Если Выборка.ЦенаВключаетНДС <> ЦенаВключаетНДС Тогда
				НоваяСтрока.ВидЦен = ВидЦенФормата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирует текст запроса, используемого для заполнения товаров.
&НаСервере
Функция СформироватьТекстДляКоманды(ИмяКомандыЗаполнения,РежимЗаполнения)
	
	ТекстЗапроса="";
	
	Если ИмяКомандыЗаполнения="ЗаполнитьПоСкладскимОстаткамИОборотам" Тогда
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
		|	ЗНАЧЕНИЕ(Перечисление.РолиАссортимента.ДополнительныйАссортимент) КАК РольАссортимента,
		|	ЕСТЬNULL(ПравилаЦенообразованияЦеновыеГруппы.ВидЦен, &ВидЦенФормата) КАК ВидЦен
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&ДатаНачала, &ДатаКонца,
		|							, , Склад.Магазин.ФорматМагазина = &ОбъектПланирования"
		+ ?(РежимЗаполнения = 2, " И (НЕ Номенклатура В (&МассивТоваров))", "") + ") КАК ТоварыНаСкладахОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ПравилаЦенообразованияЦеновыеГруппы
		|		ПО ТоварыНаСкладахОстаткиИОбороты.Номенклатура.ЦеноваяГруппа = ПравилаЦенообразованияЦеновыеГруппы.ЦеноваяГруппа
		|			И (ПравилаЦенообразованияЦеновыеГруппы.Ссылка = &ПравилоЦенообразования)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура,
		|	ЕСТЬNULL(ПравилаЦенообразованияЦеновыеГруппы.ВидЦен, &ВидЦенФормата)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Наименование";
		
	ИначеЕсли ИмяКомандыЗаполнения="ЗаполнитьПоАссортиментуФормата" Тогда
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ассортимент.Номенклатура КАК Номенклатура,
		|	Ассортимент.РольАссортимента КАК РольАссортимента,
		|	Ассортимент.ВидЦен КАК ВидЦен,
		|	Ассортимент.ВидЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС
		|ИЗ
		|	РегистрСведений.Ассортимент.СрезПоследних(КОНЕЦПЕРИОДА(&Период, ДЕНЬ),
		|												ОбъектПланирования = &ОбъектПланирования
		|												"+?(РежимЗаполнения=2,"И НЕ Номенклатура В (&МассивТоваров)","")+"
		|		) КАК Ассортимент
		|ГДЕ
		|	Ассортимент.РазрешеныЗакупки
		|УПОРЯДОЧИТЬ ПО
		|	Ассортимент.Номенклатура.Наименование";
	Иначе // Такой команды не предусмотрено - надо вызвать исключение.
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Неизвестный вариант заполнения: %1'"),
									ИмяКомандыЗаполнения);
		ВызватьИсключение(ТекстСообщенияОбОшибке);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура заполняет товары из подбора.
// Параметры: 
//  	ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение.АдресТоваровВХранилище) Тогда
		ДобавитьТоварыИзВременногоХранилищаНаСервере(ВыбранноеЗначение.АдресТоваровВХранилище,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет товары из подбора по категориям.
// Параметры: 
//  	ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборПоКатегориямНаСервере(ВыбранноеЗначение)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение.АдресТоваровВХранилище) Тогда
		ДобавитьТоварыИзВременногоХранилищаНаСервере(ВыбранноеЗначение.АдресТоваровВХранилище, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТоварыИзВременногоХранилищаНаСервере(АдресВоВременномХранилище, ДополнятьТаблицуТоваров)
	
	Если ДополнятьТаблицуТоваров Тогда
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
		ТаблицаТоваровДополненная = ТаблицаТоваровДополненнаяАссортиментомОбъекта(ТаблицаТоваров);
	Иначе
		ТаблицаТоваровДополненная = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваровДополненная Цикл
		ПараметрыОтбора = Новый Структура("Номенклатура", СтрокаТовара.Номенклатура);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара, "Номенклатура, РольАссортимента, ВидЦен");
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.РольАссортимента) Тогда
				НоваяСтрока.РольАссортимента = Перечисления.РолиАссортимента.ДополнительныйАссортимент;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.ВидЦен) Тогда
				НоваяСтрока.ВидЦен = Объект.ОбъектПланирования.ПравилоЦенообразования.ВидЦен;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция дополняет таблицу товаров данными регистра "Ассортимент" для текущего формата магазинов
// установленными на дату начала действия.
// Параметры: 
//  	ТаблицаТоваров - ТаблицаЗначений
&НаСервере
Функция ТаблицаТоваровДополненнаяАссортиментомОбъекта(ТаблицаТоваров)
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(Ассортимент.РольАссортимента, &ДополнительныйАссортимент) КАК РольАссортимента,
	|	ЕСТЬNULL(Ассортимент.ВидЦен, &ВидЦенФормата) КАК ВидЦен
	|ИЗ
	|	втТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&НаДату, ДЕНЬ), ОбъектПланирования = &ОбъектПланирования) КАК Ассортимент
	|		ПО (Ассортимент.Номенклатура = Товары.Номенклатура)";
	Запрос.МенеджерВременныхТаблиц=МенеджерВТ;
	Запрос.УстановитьПараметр("ДополнительныйАссортимент", Перечисления.РолиАссортимента.ДополнительныйАссортимент);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("НаДату", Объект.Дата);
	Запрос.УстановитьПараметр("ОбъектПланирования", Объект.ОбъектПланирования);
	ВидЦенФормата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						Объект.ОбъектПланирования,
						Новый Структура("ВидЦен", "ПравилоЦенообразования.ВидЦен")).ВидЦен;
	Запрос.УстановитьПараметр("ВидЦенФормата", ВидЦенФормата);
	ТаблицаТоваровДополненная = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаТоваровДополненная;
КонецФункции

&НаСервере
Процедура ОперацияПриИзмененииСервер()
	
	Если Объект.Операция = Перечисления.ОперацииИзмененияАссортимента.ВводВАссортимент
		ИЛИ Объект.Операция = Перечисления.ОперацииИзмененияАссортимента.ИзменениеСостоянияАссортимента Тогда
		Объект.Стадия=Перечисления.СтадииАссортимента.РазрешеныЗакупкиИПродажи;
	ИначеЕсли Объект.Операция = Перечисления.ОперацииИзмененияАссортимента.ВводВАссортиментСОтсрочкойНачалаПродаж Тогда
		Объект.Стадия=Перечисления.СтадииАссортимента.РазрешеныТолькоЗакупки;
	ИначеЕсли Объект.Операция = Перечисления.ОперацииИзмененияАссортимента.ВыводИзАссортимента Тогда
		Объект.Стадия=Перечисления.СтадииАссортимента.РазрешеныТолькоПродажи;
	ИначеЕсли Объект.Операция = Перечисления.ОперацииИзмененияАссортимента.ПереносВАрхивОтзыв Тогда
		Объект.Стадия=Перечисления.СтадииАссортимента.ЗапрещеныЗакупкиИПродажи;
	Иначе
		Объект.Стадия=Перечисления.СтадииАссортимента.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииСервер(ИДТекущейСтроки)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИДТекущейСтроки);
	СтруктураАссортимента = АссортиментСервер.СтруктураСостоянияАссортиментаТовараВФормате(ТекущаяСтрока.Номенклатура,
																						 Объект.ОбъектПланирования,
																						 Объект.Дата);
	
	ТекущаяСтрока.РольАссортимента = ?(ЗначениеЗаполнено(СтруктураАссортимента.РольАссортимента),
															СтруктураАссортимента.РольАссортимента,
															Перечисления.РолиАссортимента.ДополнительныйАссортимент);
	
	Если ЗначениеЗаполнено(СтруктураАссортимента.ВидЦен) Тогда
		ТекущаяСтрока.ВидЦен = СтруктураАссортимента.ВидЦен;
	Иначе
		ТекущаяСтрока.ВидЦен = ВидЦенПоПравиламФормата(ТекущаяСтрока.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВидЦенПоПравиламФормата(Номенклатура)
	ВидЦен = Объект.ОбъектПланирования.ПравилоЦенообразования.ВидЦен;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЦеновыеГруппы.ВидЦен КАК ВидЦен
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ЦеновыеГруппы
	|		ПО СправочникНоменклатура.ЦеноваяГруппа = ЦеновыеГруппы.ЦеноваяГруппа
	|		И ЦеновыеГруппы.Ссылка = &ПравилоЦенообразования
	|ГДЕ
	|	СправочникНоменклатура.Ссылка = &Номенклатура";
	Запрос.УстановитьПараметр("ПравилоЦенообразования", Объект.ОбъектПланирования.ПравилоЦенообразования);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ВидЦен = Выборка.ВидЦен;
	КонецЕсли;
	Возврат ВидЦен;
КонецФункции

&НаСервере
Функция ВидЦенМожетИспользоваться(ВидЦен)
	
	Результат = Истина;
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		РеквизитыВидаЦен = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
								ВидЦен,
								Новый Структура("ИспользоватьПриПродаже, ЦенаВключаетНДС"));
		Если НЕ РеквизитыВидаЦен.ИспользоватьПриПродаже Тогда
			ТекстСообщения = НСтр("ru = 'Можно назначить только виды цен, используемые при продаже.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Результат = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ОбъектПланирования) Тогда
			РеквизитыОбъектаПланирования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
												Объект.ОбъектПланирования,
												Новый Структура("ЦенаВключаетНДС", "ПравилоЦенообразования.ЦенаВключаетНДС"));
			Если РеквизитыВидаЦен.ЦенаВключаетНДС <> РеквизитыОбъектаПланирования.ЦенаВключаетНДС Тогда
				ТекстСообщения = НСтр("ru = 'Метод учета НДС выбранного вида цен должен соответствовать методу учета НДС в правилах ценообразования формата.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Результат = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДатаДокумента(Дата)
	
	Возврат ?(ЗначениеЗаполнено(Дата), Дата, НачалоДня(ТекущаяДата()));
	
КонецФункции

&НаСервереБезКонтекста
Функция ДатаДокументаСервер(Дата)
	
	Возврат ?(ЗначениеЗаполнено(Дата), Дата, НачалоДня(ТекущаяДатаСеанса()));
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьНомерВПределахДня(ДатаДокумента, Ссылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ИзменениеАссортимента.Дата) КАК Дата
	|ИЗ
	|	Документ.ИзменениеАссортимента КАК ИзменениеАссортимента
	|ГДЕ
	|	ИзменениеАссортимента.Ссылка <> &Ссылка
	|	И ИзменениеАссортимента.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаДокумента, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаДокумента, ДЕНЬ)");
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() И Выборка.Дата <> Null Тогда
		// Начало дня - 0 секунда. Так как как минимум один документ уже существует, то
		// нужно прибавить 1 (0 секунда соответствует номеру документа 1).
		// Так же прибавим единицу, так как нам требуется номер следующего документа.
		Возврат Выборка.Дата - НачалоДня(ДатаДокумента) + 2;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ТоварыЗаполнены()
	
	Результат = Истина;
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Не заполнена таблица ""%1"". Вид цен не может быть заполнен'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, "Товары");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения, , "Товары", "Объект");
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЦенаВключаетНДС()
	
	РеквизитыОбъектаПланирования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
										Объект.ОбъектПланирования,
										Новый Структура("ЦенаВключаетНДС", "ПравилоЦенообразования.ЦенаВключаетНДС"));
	
	Возврат РеквизитыОбъектаПланирования.ЦенаВключаетНДС;
	
КонецФункции

&НаКлиенте
Процедура ТоварыВидЦенНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИспользоватьПриПродаже", Истина);
	СтруктураОтбора.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС());
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	ОткрытьФорму("Справочник.ВидыЦен.ФормаВыбора",
		ПараметрыОткрытия,
		Элемент,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры


#КонецОбласти
