#Область ПеременныеМодуля

&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ЗначениеПеречислениеВидОперацииПродажа;

&НаКлиенте
Перем ЗначениеПеречислениеВидОперацииВозврат;

&НаКлиенте
Перем ЗначениеСправочникиВидыОплатЧекаККМОплатаПодарочнымСертификатом;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; // Используется для передачи текущей строки в обработчик ожидания.

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьВесЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
			Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
				СтруктураРезультат.Вставить("ТекстПредупреждения", НСтр("ru = 'Изменение продавца при возврате не предусмотрено.'"));
			Иначе
				Объект.Продавец = СтрокаРезультата.ВладелецКарты;
				Модифицированность = Истина;
			КонецЕсли;
		Иначе
			Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
				СтруктураРезультат.Вставить("ТекстПредупреждения", НСтр("ru = 'Изменение дисконтной карты при возврате не предусмотрено.'"));
			Иначе
				Объект.ДисконтнаяКарта = СтрокаРезультата.Карта;
				СтруктураРезультат.Вставить("НайденаДисконтнаяКарта", СтрокаРезультата.Карта);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("ШтрихкодУпаковкиЕГАИС")
		И ЗначениеЗаполнено(СтрокаРезультата.ШтрихкодУпаковкиЕГАИС)
		И СтрокаРезультата.Свойство("ТипУпаковки")
		И СтрокаРезультата.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ДобавитьВложенныеМарки(ЭтотОбъект, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("Номенклатура") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("НеобходимостьВводаАкцизнойМарки") Тогда
		СтруктураРезультат.Вставить("НеобходимостьВводаАкцизнойМарки", СтрокаРезультата.НеобходимостьВводаАкцизнойМарки);
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("НеобходимостьВводаКодаМаркировки") Тогда
		СтруктураРезультат.Вставить("НеобходимостьВводаКодаМаркировки", СтрокаРезультата.НеобходимостьВводаКодаМаркировки);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	Если СтруктураПараметровКлиента.Свойство("НайденаДисконтнаяКарта") Тогда
		
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			
			ДисконтнаяКартаПриИзменении(Неопределено);
			
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("НеобходимостьВводаАкцизнойМарки")
		И СтруктураПараметровКлиента.Свойство("АктивизироватьСтроку") Тогда
		
		СтрокаТовара = Объект.Товары.НайтиПоИдентификатору(СтруктураПараметровКлиента.АктивизироватьСтроку);
		Если СтрокаТовара <> Неопределено Тогда
			ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(СтрокаТовара);
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("НеобходимостьВводаКодаМаркировки")
		И СтруктураПараметровКлиента.Свойство("АктивизироватьСтроку") Тогда
		
		СтрокаТовара = Объект.Товары.НайтиПоИдентификатору(СтруктураПараметровКлиента.АктивизироватьСтроку);
		Если СтрокаТовара <> Неопределено Тогда
			РозничныеПродажиКлиент.УстановитьЗначениеСтатусаКодаМаркировкиВСтроке(СтрокаТовара);
		КонецЕсли;
		
	Иначе
		
		ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	КонецЕсли;
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТВызовСервера.ОбработатьДанныеПоНоменклатуреИзТСДСервер(ЭтотОбъект, СтруктураПараметров);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОбработатьДанныеПослеЗагрузкиИзТСД(СтруктураПараметров) Экспорт
	
	ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, ВидимостьКолонкиМаркировки);
	ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
	РозничныеПродажиКлиент.ЗаполнитьКоличествоКодовМаркировки(Объект.Товары, Объект.КодыМаркировки);
	РозничныеПродажиКлиент.УстановитьЗначениеСтатусаКодаМаркировки(Объект.Товары);
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	
	ДобавленаСтрока = Ложь;
	ЕстьДанныеМаркировки = Ложь;
	Если СтруктураПараметров.Свойство("ДанныеМаркировки")
		И СтруктураПараметров.ДанныеМаркировки <> Неопределено
		И СтруктураПараметров.ДанныеМаркировки.Разобран Тогда
		ЕстьДанныеМаркировки = Истина;
		СтруктураПараметров.Вставить("СворачиватьПоСтрокеПоиска", Ложь);
	Иначе
		СтруктураМаркировки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПараметров.Номенклатура, "ТабачнаяПродукция, ОбувнаяПродукция");
		Если СтруктураМаркировки.ТабачнаяПродукция Или СтруктураМаркировки.ОбувнаяПродукция Тогда
			СтруктураПараметров.Вставить("СворачиватьПоСтрокеПоиска", Ложь);
		КонецЕсли;
	КонецЕсли;
	ТекущаяСтрока = ПодключаемоеОборудованиеРТВызовСервера.ИнициализацияСтрокиТоваров(ЭтотОбъект, СтруктураПараметров, ДобавленаСтрока);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	Если ДобавленаСтрока Тогда
		СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
		СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", ОбработкаТабличнойЧастиТоварыСервер.СтруктураЗаполненияСкладаПродажиВСтрокеТЧ(Объект));
		
		СтруктураПараметровДействия = Новый Структура();
		СтруктураПараметровДействия.Вставить("Дата", Объект.Дата);
		СтруктураПараметровДействия.Вставить("Организация", Объект.Организация);
		СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
		СтруктураДействий.Вставить("ЗаполнитьВидНалога", СтруктураПараметровДействия);
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДС(Объект));
		Если ИспользоватьАссортимент Тогда
			СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", АссортиментКлиентСервер.ПараметрыПроверкиАссортимента(Объект, Истина));
		КонецЕсли;
		СтруктураДействий.Вставить("ПроверитьЗапретРозничнойПродажи", СкидкиНаценкиКлиентСервер.ПараметрыПроверкиЗапретаРозничнойПродажи(Объект));
		СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
		СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента");
		
		Если ТипОборудованияКассыККМ = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ") Тогда
			Если Объект.Товары.Количество() > 1 Тогда
				ТекстСообщенияПриОшибке = НСтр("ru = 'Недопустимо добавлять в один чек товары и услуги по различным договорам платежных агентов'");
				СтруктураПараметровПроверки = Новый Структура();
				СтруктураПараметровПроверки.Вставить("ДоговорПлатежногоАгента", Объект.ДоговорПлатежногоАгента);
				СтруктураПараметровПроверки.Вставить("ТекстСообщения", ТекстСообщенияПриОшибке);
				СтруктураДействий.Вставить("ПроверитьОтличныеДоговорыПлатежныхАгентов", СтруктураПараметровПроверки);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПроверкиАМ = Новый Структура();
		СтруктураПроверкиАМ.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураПроверкиАМ);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаКодаМаркировки", СтруктураПроверкиАМ);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ЗавершениеОбработкиСтрокиТоваров(ЭтотОбъект, ТекущаяСтрока, СтруктураДействий);
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		
		Если Объект.Товары.Количество() = 1 Тогда
			Объект.ДоговорПлатежногоАгента = ТекущаяСтрока.ДоговорПлатежногоАгента;
		КонецЕсли;
		
		Если ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
			ИнтеграцияЕГАИСРТ.ОбработатьНеобходимостьВводаАкцизнойМарки(СтруктураПараметров, Объект, ТекущаяСтрока);
		КонецЕсли;
		
		Если ТекущаяСтрока.НеобходимостьВводаКодаМаркировки Тогда
			Если ЕстьДанныеМаркировки Тогда
				
				НоваяСтрокаКода = Объект.КодыМаркировки.Добавить();
				НоваяСтрокаКода.КлючСвязи = ТекущаяСтрока.КлючСвязи;
				НоваяСтрокаКода.КодМаркировки = СтруктураПараметров.ШтрихКод;
				НоваяСтрокаКода.ТипКода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ОсобенностьУчета");
				
				ТекущаяСтрока.СтатусУказанияАкцизныхМарок = 1;
				ТекущаяСтрока.КоличествоКодовМаркировки = 1;
			Иначе
				СтруктураПараметров.Вставить("НеобходимостьВводаКодаМаркировки", Истина);
				ТекущаяСтрока.СтатусУказанияАкцизныхМарок = 2;
				ТекущаяСтрока.КоличествоКодовМаркировки = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ДобавитьНайденныеСерийныеНомера(ЭтотОбъект, СтруктураНомера);
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьСозданиеИВыборНовойХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ТекущаяСтрока.Характеристика = Результат;
	ТоварыХарактеристикаПриИзменении(Неопределено);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОповещениеПоискаПоНаименованию(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ЗавершитьОбработкуДанныхПоКодуКлиент(Результат);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается обработкой оповещения после открытия формы вывода сообщений
// либо непосредственно при исполнении процедур расчета скидок,
// если сообщений для вывода нет.
&НаКлиенте
Процедура ОповещениеРасчетСкидокКлиент(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыдатьПодаркиНаВыбор
		И ЗначениеЗаполнено(АдресПодарковНаВыбор) Тогда
		
		// &ЗамерПроизводительности
		ОценкаПроизводительностиРТКлиент.НачатьЗамер(
									Истина, "ОбщаяФорма.ПодаркиНаВыбор.Открытие");
		
		ДополнительныеПараметры = Новый Структура;
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВыдатьПодаркиНаВыбор", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресПодарковНаВыбор);
		ОткрытьФорму("ОбщаяФорма.ПодаркиНаВыбор",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			ОбработчикОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОповещениеВыдатьПодаркиНаВыбор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыдатьПодаркиНаВыбор(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат <> Неопределено Тогда
		ВыдатьПодаркиНаВыборНаСервере(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Подарки);
	//ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, ВидимостьКолонкиМаркировки);
	//ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	//ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	ОбновитьИтоговыеПоказатели();
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		?(Объект.Ссылка.Пустая(), "", ПолучитьНавигационнуюСсылку(Объект.Ссылка)),
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Процедура вызывается обработкой оповещения после ответа на вопрос
// о необходимости отмены проведения документа
// перед оплатой бонусами.
&НаКлиенте
Процедура ОповещениеОплатаБонусамиВопросОбОтменеПроведения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения)) Тогда
			ОткрытьФормуОплатыБонусами(ДополнительныеПараметры);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Не удалось отменить проведение документа'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросУдалениеСертификатовОплаты(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ПогашениеПодарочныхСертификатов.Очистить();
		УдалитьСтрокуОплатыПослеВопроса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросПотеряДанныхОтправленныхВБанк(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УдалитьСтрокуОплатыПослеВопроса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросУдалениеОплатыКартой(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекущаяСтрока = Объект.Оплата.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			// Отмена передачи
			УдалитьОплатуКартой(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросУспешностиОплатыНаЭТ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	РезультатОперации = (РезультатВопроса = КодВозвратаДиалога.Да);
	
	Если НЕ РезультатОперации Тогда
		ТекстСообщения = НСтр("ru = 'Операция отменена'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ЗавершитьОплатуПлатежнойКартойЧерезЭквайринговыйТерминал(РезультатОперации, ДополнительныеПараметры.ПараметрДействия);
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросУспешностиОтменыОперацииНаЭТ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	РезультатОперации = (РезультатВопроса = КодВозвратаДиалога.Да);
	
	Если НЕ РезультатОперации Тогда
		ТекстСообщения = НСтр("ru = 'Операция отменена'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ЗавершитьОтменуОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(РезультатОперации, ДополнительныеПараметры.ПараметрДействия);
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросУспешностиВозвратаОплатыНаЭТ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	РезультатОперации = (РезультатВопроса = КодВозвратаДиалога.Да);
	
	Если НЕ РезультатОперации Тогда
		ТекстСообщения = НСтр("ru = 'Операция отменена'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ЗавершитьВозвратОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(РезультатОперации, ДополнительныеПараметры.ПараметрДействия);
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросЗаполнениеПоЗаказу(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗавершитьЗаполнениеПоЗаказу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросРассчитатьИОткрытьСкидки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЭтотОбъект.Модифицированность = Истина;
		РассчитатьСкидкиНаценкиКлиент(ДополнительныеПараметры);
		ОткрытьИнформациюОСкидкахЗавершитьОбработкуВопроса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		УправляемыеСкидки = Результат.УправляемыеСкидки;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
		СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
		СтруктураПараметры.Вставить("ПеренестиСкидкиПодаркиВТовары");
		СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	КонтролироватьОстаткиТоваров);
		
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
			РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
		Иначе
			РабочееМесто = ""
		КонецЕсли;
		
		СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
		
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		Для Каждого КодСкидки Из Результат.СписокОдноразовыхКодов Цикл
			НоваяСтрока = Объект.ПредъявленныеКодыОднократныхСкидок.Добавить();
			НоваяСтрока.КодСкидки = КодСкидки.Значение;
		КонецЦикла;
		
		РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		
		Если ВывестиСообщения Тогда
			ДополнительныеПараметры = Новый Структура;
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеРасчетСкидокКлиент", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресПримененныхСкидокВоВременномХранилище);
			ОткрытьФорму("ОбщаяФорма.ФормаВыводаСообщений", ПараметрыФормы, ЭтотОбъект, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ОповещениеРасчетСкидокКлиент();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(Результат);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(Результат, "RUB");
		
		ОбновитьИтоговыеПоказатели();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораНоменклатуры(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		ДобавитьНайденныеПозицииТоваров(РезультатОткрытияФормы);
		
	КонецЕсли;
	
	ЗавершитьОбработкуДанныхПоКодуКлиент(ДополнительныеПараметры.СтруктураПараметровКлиента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораИнформационнойКарты(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		Объект.ДисконтнаяКарта = РезультатОткрытияФормы.ИнформационнаяКарта;
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			ДисконтнаяКартаПриИзменении(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗавершитьОбработкуДанныхПоКодуКлиент(ДополнительныеПараметры.СтруктураПараметровКлиента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораОплатыЧекаККМ(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	НоваяСтрока = Неопределено;
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		НоваяСтрока = Объект.Оплата.Добавить();
		НоваяСтрока.ВидОплаты = РезультатОткрытияФормы;
		
		Сумма = Объект.Товары.Итог("Сумма") - Объект.Оплата.Итог("Сумма");
		НоваяСтрока.ТипОплаты = ДополнительныеПараметры.ТипОплаты;
		
		Если НоваяСтрока.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ЗачетАванса") Тогда
			Сумма = Мин(Объект.Товары.Итог("Сумма"), СуммаДокументаРасчета);
		Иначе
			Сумма = Объект.Товары.Итог("Сумма") - Объект.Оплата.Итог("Сумма");
		КонецЕсли;
		
		НоваяСтрока.Сумма = ?(Сумма > 0, Сумма, 0);
		
		Элементы.Оплата.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Оплата.ТекущийЭлемент = Элементы.ОплатаСумма;
		Элементы.Оплата.ИзменитьСтроку();
		МодифицированыСохраняемыеДанные = Истина;
	КонецЕсли;
	
	ОбновитьИтоговыеПоказатели();
	Если ДополнительныеПараметры.Свойство("УстановитьЭквайринговыйТерминалПоУмолчанию") Тогда
		УстановитьЭквайринговыйТерминалПоУмолчанию(НоваяСтрока);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораПогашенияПодарочныхСертификатов(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(РезультатОткрытияФормы) Тогда
		ПолучитьПогашениеВХранилище(РезультатОткрытияФормы);
		ОбновитьИтоговыеПоказатели();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуАвторизацииЭТЗавершение(РезультатВыполнения, ПараметрДействия) Экспорт 
	
	ЭтотОбъект.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
			|""%ОписаниеОшибки%"".
			|Оплата по карте не была произведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		ПараметрДействия.НомерКарты          = РезультатВыполнения.НомерКарты;
		ПараметрДействия.НомерСсылкиОперации = РезультатВыполнения.СсылочныйНомер;
		ПараметрДействия.НомерЧекаЭТ         = РезультатВыполнения.НомерЧекаЭТ;
		ПараметрДействия.СтрокаСлипЧека      = РезультатВыполнения.ТекстСлипЧека;
		ЗавершитьОплатуПлатежнойКартойЧерезЭквайринговыйТерминал(Истина, ПараметрДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуАвторизацииЭТ(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	ПараметрДействия = ДополнительныеПараметры.ПараметрДействия;
	
	Если ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		
		ПараметрДействия.СуммаОперации = РезультатОткрытияФормы.Сумма;
		
		Если НЕ ПараметрДействия.ИспользоватьБезПодключенияОборудованияЭТ Тогда
			
			ЭтотОбъект.Доступность = Ложь;
				
			ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
			ПараметрыОперации.ТипТранзакции  = "AuthorizeSales";
			ПараметрыОперации.СуммаОперации  = РезультатОткрытияФормы.Сумма;
			ПараметрыОперации.НомерЧека      = РезультатОткрытияФормы.НомерЧека;
			ПараметрыОперации.СсылочныйНомер = РезультатОткрытияФормы.СсылочныйНомер;
			
			Оповещение = Новый ОписаниеОповещения("ОповещениеОткрытьФормуАвторизацииЭТЗавершение", ЭтотОбъект, ПараметрДействия);
			МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение, УникальныйИдентификатор, 
				ПараметрДействия.ИдентификаторУстройстваЭТ, ПараметрДействия.ИдентификаторУстройстваФР, ПараметрыОперации);
		
		Иначе
			
			ПараметрДействия.НомерКарты          = РезультатОткрытияФормы.НомерКарты;
			ПараметрДействия.НомерСсылкиОперации = РезультатОткрытияФормы.СсылочныйНомер;
			ПараметрДействия.НомерЧекаЭТ         = РезультатОткрытияФормы.НомерЧека;
			
			ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию оплаты на эквайринговом терминале.'") + Символы.ПС;
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'") + " "+ ПараметрДействия.СуммаОперации  + Символы.ПС;
			ТекстВопроса = ТекстВопроса + Символы.ПС;
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция оплаты на эквайринговом терминале прошла успешно?'");
			
			ДополнительныеПараметры = Новый Структура; 
			ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросУспешностиОплатыНаЭТ", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВводаПодарочныхСертификатов(Результат, ДополнительныеПараметры) Экспорт
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Документ.ЧекККМ.Форма.ФормаТабличнойЧастиПогашениеПодарочныхСертификатов.Открытие");
             
	Если НЕ ДополнительныеПараметры = Неопределено
		 И ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
		ОповещениеРасчетСкидокКлиент();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	АдресВХранилище = ПоместитьПогашениеВХранилище();
	ПараметрыФормы.Вставить("АдресВременногоХранилища_ПогашениеПодарочныхСертификатов", АдресВХранилище);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораПогашенияПодарочныхСертификатов", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаТабличнойЧастиПогашениеПодарочныхСертификатов", ПараметрыФормы, ЭтотОбъект, , , , ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОплатыПлатежнойКартой(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ДополнительныеПараметры = Неопределено
		 И ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
		ОповещениеРасчетСкидокКлиент();
	КонецЕсли;
	
	НоваяСтрока = Неопределено;
	ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта");
	ВидОплатыПлатежнаяКарта = ПолучитьВидОплатыПоТипу(ТипОплаты);
	
	
	Если НЕ ВидОплатыПлатежнаяКарта = Неопределено Тогда
		НоваяСтрока = Объект.Оплата.Добавить();
		НоваяСтрока.ВидОплаты = ВидОплатыПлатежнаяКарта;
		
		Сумма = Объект.Товары.Итог("Сумма") - Объект.Оплата.Итог("Сумма");
		НоваяСтрока.Сумма = ?(Сумма > 0, Сумма, 0);
		
		НоваяСтрока.ТипОплаты = ТипОплаты;
		Элементы.Оплата.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Оплата.ТекущийЭлемент = Элементы.ОплатаСумма;
		Элементы.Оплата.ИзменитьСтроку();
		МодифицированыСохраняемыеДанные = Истина;
		
		ОбновитьИтоговыеПоказатели();
		УстановитьЭквайринговыйТерминалПоУмолчанию(НоваяСтрока);
	Иначе
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("ИмяПоляОтбораЛевоеЗначение", "ТипОплаты");
		Отбор.Вставить("ПравоеЗначение"            , ТипОплаты);
		Отбор.Вставить("Отрицание"                 , Ложь);
		
		ПараметрыФормы =  Новый Структура("СтруктураПараметрыОтбора", Отбор);
		
		Если ДополнительныеПараметры = Неопределено Тогда
			ДополнительныеПараметры = Новый Структура;
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("ТипОплаты", ТипОплаты);
		ДополнительныеПараметры.Вставить("УстановитьЭквайринговыйТерминалПоУмолчанию");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораОплатыЧекаККМ", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.ВидыОплатЧекаККМ.ФормаВыбора", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОплатыБанковскимКредитом(Результат, ДополнительныеПараметры) Экспорт
	
	
	Если НЕ ДополнительныеПараметры = Неопределено
		 И ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
		ОповещениеРасчетСкидокКлиент();
	КонецЕсли;
	
	ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.БанковскийКредит");
	ВидОплатыБанковскийКредит = ПолучитьВидОплатыПоТипу(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.БанковскийКредит"));
	
	Если НЕ ВидОплатыБанковскийКредит = Неопределено Тогда
		НоваяСтрока = Объект.Оплата.Добавить();
		НоваяСтрока.ВидОплаты = ВидОплатыБанковскийКредит;
		
		Сумма = Объект.Товары.Итог("Сумма") - Объект.Оплата.Итог("Сумма");
		НоваяСтрока.Сумма = ?(Сумма > 0, Сумма, 0);
		
		НоваяСтрока.ТипОплаты = ТипОплаты;
		Элементы.Оплата.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Оплата.ТекущийЭлемент = Элементы.ОплатаСумма;
		Элементы.Оплата.ИзменитьСтроку();
		МодифицированыСохраняемыеДанные = Истина;
		
		ОбновитьИтоговыеПоказатели();
		
	Иначе
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("ИмяПоляОтбораЛевоеЗначение", "ТипОплаты");
		Отбор.Вставить("ПравоеЗначение"            , ТипОплаты);
		Отбор.Вставить("Отрицание"                 , Ложь);
		
		ПараметрыФормы =  Новый Структура("СтруктураПараметрыОтбора", Отбор);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТипОплаты", ТипОплаты);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораОплатыЧекаККМ", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.ВидыОплатЧекаККМ.ФормаВыбора", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОплатыЧерезТерминал(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		
		Если НЕ ТекущаяСтрока.ДанныеПереданыВБанк Тогда
			
			Если Объект.ОперацияСДенежнымиСредствами И Объект.Товары.Количество() = 0 Тогда
				РасчетнаяСумма = ТекущаяСтрока.Сумма;
				МаксимальнаяСуммаОплатыБезналичными = РасчетнаяСумма;
				
				Если РасчетнаяСумма = 0 Тогда
					СтрокаСообщения = НСтр("ru = 'Необходимо ввести сумму платежа'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтрокаСообщения,
						Объект,
						"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "].Сумма");
					Возврат;
				КонецЕсли;
			Иначе
				МаксимальнаяСуммаОплатыБезналичными = СуммаВсего - (СуммаБезналичнойОплаты() + СуммаОплатыПодарочнымиСертификатами()) + ТекущаяСтрока.Сумма;
				
				Если МаксимальнаяСуммаОплатыБезналичными <= 0 Тогда
					
					СтрокаСообщения = НСтр("ru = 'Безналичная оплата не требуется'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтрокаСообщения,
						Объект,
						"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "].Сумма");
					Возврат;
				КонецЕсли;
				
				
				Если ТекущаяСтрока.Сумма > МаксимальнаяСуммаОплатыБезналичными Тогда
					
					СтрокаСообщения = НСтр("ru = 'Сумма оплаты картой больше возможной суммы безналичной оплаты'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтрокаСообщения,
						Объект,
						"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "].Сумма");
					Возврат;
				КонецЕсли;
				
				РасчетнаяСумма = ?(ТекущаяСтрока.Сумма = 0 , МаксимальнаяСуммаОплатыБезналичными, ТекущаяСтрока.Сумма);
			КонецЕсли;
			// Передача данных в банк
			ОплатаПлатежнойКартойЧерезЭквайринговыйТерминал(ТекущаяСтрока, РасчетнаяСумма, МаксимальнаяСуммаОплатыБезналичными)
			
		Иначе
			// Вопрос
			ТекстВопроса = НСтр("ru = 'Данные об оплате уже переданы в банк'") + Символы.ПС; 
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Вы хотите отменить эту операцию?'"); 
			
			ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
			
			ДополнительныеПараметры = Новый Структура; 
			ДополнительныеПараметры.Вставить("ИдентификаторТекущейСтроки", ИдентификаторТекущейСтроки);
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросУдалениеОплатыКартой", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	Иначе
		
		Если НЕ ТекущаяСтрока.ДанныеПереданыВБанк Тогда
			
			Если ЭтоВозвратДеньВДень() Тогда
				// Передача данных в банк
				УдалитьОплатуКартой(ТекущаяСтрока);
			Иначе
				ВернутьОплатуКартой(ТекущаяСтрока);
			КонецЕсли;
		Иначе
			СтрокаСообщения = НСтр("ru = 'Данные об отмене/возврате оплаты в банк уже переданы.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрокаСообщения,
			Объект,
			"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "]"
			);
			
		КонецЕсли;
			
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеДобавитьОплатуНаличными(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ДополнительныеПараметры = Неопределено
		 И ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
		ОповещениеРасчетСкидокКлиент();
	КонецЕсли;
	
	НоваяСтрока = Объект.Оплата.Добавить();
	НоваяСтрока.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные");
	НоваяСтрока.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.Наличные");
	
	НоваяСтрока.Сумма = 0;
	
	Элементы.Оплата.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.Оплата.ТекущийЭлемент = Элементы.ОплатаСумма;
	
	Элементы.Оплата.ИзменитьСтроку();
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОплатыБонусами(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Ложь;
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов") Тогда
		УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = ДополнительныеПараметры.УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов;
	КонецЕсли;
	Если Результат = Неопределено Тогда
		Если (НЕ УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов)
			И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		КонецЕсли;
	Иначе
		ОбработатьОплатуБонусами(Результат, УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов);
		Если УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов Тогда
			Отказ = Ложь;
			ПроверитьСкидки(Отказ, ДополнительныеПараметры, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВводСуммыАгентскогоПлатежа(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		РедактируемаяСтрока = ДополнительныеПараметры.РедактируемаяСтрока;
		РедактируемаяСтрока.Цена = Результат;
		РедактируемаяСтрока.КоличествоУпаковок = 1;
		ТоварыКоличествоУпаковокПриИзменении(Неопределено);
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУказаниеСерий(ЗначениеВозврата, ПараметрыФормыУказанияСерий) Экспорт
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("ЗначениеВозврата", ЗначениеВозврата);
		ТекущаяСтрокаТоваров = Элементы.Товары.ТекущиеДанные;
		Если ТекущаяСтрокаТоваров = Неопределено Тогда
			ПродажаПодарка = Ложь;
		Иначе
			ПродажаПодарка = ТекущаяСтрокаТоваров.ПродажаПодарка;
		КонецЕсли;
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, ПродажаПодарка);
		Если ПараметрыФормыУказанияСерий.ИмяТЧТовары = "Товары" И НЕ ПродажаПодарка Тогда
			ОбновитьИтоговыеПоказатели();
			ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		КонецЕсли;
			
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект[ПараметрыФормыУказанияСерий.ИмяТЧТовары]);
			
		Если НЕ ПродажаПодарка Тогда
			Элементы[ПараметрыФормыУказанияСерий.ИмяТЧТовары].ЗакончитьРедактированиеСтроки(Ложь);
			Если ПараметрыФормыУказанияСерий.ИмяТЧТовары = "Товары" Тогда
				// Интерфейс ЕГАИС
				ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
				Если ТекущаяСтрока <> Неопределено Тогда
					ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
					РозничныеПродажиКлиент.УстановитьЗначениеСтатусаКодаМаркировкиВСтроке(ТекущаяСтрока);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодбораПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры) Экспорт
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПослеВводаНомеровПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры);
	
	ПересчетКоличества = ДополнительныеПараметры.ПересчетКоличества;
	
	Если ПересчетКоличества Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ВыдатьПодаркиНаВыборНаСервере(Результат, ДополнительныеПараметры) Экспорт
	
	ПереноситьВПродажи = Ложь;
	ТаблицаПодарков = ПолучитьИзВременногоХранилища(Результат);
	Для Каждого СтрокаПодарка Из ТаблицаПодарков Цикл
	    НоваяСтрока = Объект.Подарки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодарка);
		УчитыватьПодарокКакПродажу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПодарка.СкидкаНаценка, "УчитыватьПодарокКакПродажу");
		Если УчитыватьПодарокКакПродажу Тогда
			ПереноситьВПродажи = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПереноситьВПродажи Тогда
		КоличествоПеренесенных = 0;
		СкидкиНаценкиСерверПереопределяемый.ПеренестиСкидкиПодаркиВТовары(Объект, Объект.ЦенаВключаетНДС, , КоличествоПеренесенных, , Истина);
		Если КоличествоПеренесенных > 0 Тогда
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
			ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
			ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
			ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
			СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаАкцизнойМарки(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	Если СтрокаТЧ = Неопределено Тогда
		РедактированиеТЧТовары = Ложь;
		Возврат;
	КонецЕсли;
	
	НуженПересчетСкидок = Ложь;
	
	ИзмененоКоличествоУпаковок = Ложь;
	Если Результат <> Неопределено Тогда
		
		Если ТипЗнч(Результат) = Тип("Строка") Тогда
		
			Если СтрокаТЧ.НеобходимостьВводаКодаМаркировки Тогда
				Если НЕ КодСоответствуетНоменклатуреИУпаковке(Результат, ДополнительныеПараметры) Тогда
					Возврат;
				КонецЕсли;
				ИмяТаблицыКодов = "КодыМаркировки";
			Иначе
				ИмяТаблицыКодов = "АкцизныеМарки";
			КонецЕсли;
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("КлючСвязи", ДополнительныеПараметры.ТекущийКлючСвязи);
			
			МассивАкцизныхМарок = Объект[ИмяТаблицыКодов].НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
				Объект[ИмяТаблицыКодов].Удалить(СтрокаАкцизнаяМарка);
			КонецЦикла;
			
			Если СтрокаТЧ.НеобходимостьВводаКодаМаркировки Тогда
				СтрокаМаркировки = Объект.КодыМаркировки.Добавить();
				СтрокаМаркировки.КодМаркировки = Результат;
				СтрокаМаркировки.КлючСвязи = СтрокаТЧ.КлючСвязи;
				СтрокаМаркировки.ТипКода = ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Номенклатура, "ОсобенностьУчета");
				
				Если СтрокаТЧ.КоличествоУпаковок <> 1 Тогда
					СтрокаТЧ.КоличествоУпаковок = 1;
					СтрокаТЧ.Количество = 0;
					ИзмененоКоличествоУпаковок = Истина;
					НуженПересчетСкидок = Истина;
				КонецЕсли;
				
			Иначе
				ДанныеШтрихкодаУпаковки = ПолучитьДанныеШтрихкодаУпаковки(Объект.Организация, 
																			Объект.Магазин, 
																			Результат, 
																			ДополнительныеПараметры.ТекущийКлючСвязи,
																			СтрокаТЧ.Номенклатура,
																			СтрокаТЧ.Характеристика);
				
				СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаАкцизнаяМарка, ДанныеШтрихкодаУпаковки);
				
				Если СтрокаТЧ.Количество <> 1 Тогда
					СтрокаТЧ.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка");
					СтрокаТЧ.КоличествоУпаковок = 1;
					СтрокаТЧ.Количество = 0;
					ИзмененоКоличествоУпаковок = Истина;
					НуженПересчетСкидок = Истина;
				КонецЕсли;
			КонецЕсли;
			Модифицированность = Истина;
			
		ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("АдресВХранилище") Тогда
				Если СтрокаТЧ.НеобходимостьВводаКодаМаркировки Тогда
					ВызватьИсключение НСтр("ru = 'Считывание нескольких кодов маркировки в одну строку недопустимо'");
				Иначе
					КоличествоУпаковокОтсканировано = ЗаполнитьМаркиНаСервере(Результат.АдресВХранилище, ДополнительныеПараметры, СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика);
					Если КоличествоУпаковокОтсканировано <> СтрокаТЧ.Количество Тогда
						СтрокаТЧ.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
						СтрокаТЧ.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка");
						СтрокаТЧ.Количество = 0;
						Если СтрокаТЧ.КоличествоУпаковок = 0 Тогда
							Объект.Товары.Удалить(СтрокаТЧ);
							СтрокаТЧ = Неопределено;
						КонецЕсли;
						ИзмененоКоличествоУпаковок = Истина;
						НуженПересчетСкидок = Истина;
					КонецЕсли;
					Модифицированность = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТЧ <> Неопределено и ИзмененоКоличествоУпаковок Тогда
			Если СтрокаТЧ.ИспользоватьСерийныеНомера Тогда
				ВвестиПодарочныеСертификаты();
			ИначеЕсли СтрокаТЧ.СтатусУказанияСерий <> 0 Тогда
				УказатьСерии("КоличествоУпаковок", "Товары", "Серии");
			Иначе
				ТоварыУпаковкаПриИзменении(СтрокаТЧ);
				ПриИзмененииТоварыКоличестваУпаковок(СтрокаТЧ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКлиента")
		И СтрокаТЧ <> Неопределено Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(ДополнительныеПараметры.СтруктураПараметровКлиента);
	ИначеЕсли НуженПересчетСкидок Тогда
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	КонецЕсли;
	
	РедактированиеТЧТовары = Ложь;
	
	// Интерфейс ЕГАИС
	Если СтрокаТЧ <> Неопределено Тогда
		ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарокВСтроке(СтрокаТЧ, Объект.АкцизныеМарки);
		ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(СтрокаТЧ);
		
		РозничныеПродажиКлиент.ЗаполнитьКоличествоКодовМаркировкиВСтроке(СтрокаТЧ, Объект.КодыМаркировки);
		РозничныеПродажиКлиент.УстановитьЗначениеСтатусаКодаМаркировкиВСтроке(СтрокаТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыбораНоменклатуры(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		СтрокаТабличнойЧасти.Номенклатура = РезультатВыбора;
		
		ТоварыНоменклатураПриИзменении(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытиеФормыВводаEmail(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		Если ЗначениеЗаполнено(РезультатОткрытияФормы.Email) Тогда
			Объект.АдресЭП = РезультатОткрытияФормы.Email;
			Объект.Телефон = "";
			ТелефонСтрокой = "";
			ДанныеSMSИлиEmail = Объект.АдресЭП;
			ОтказКлиентаОтСохраненияТелефонаEmail = РезультатОткрытияФормы.ОтказКлиентаОтСохраненияEmail;
		Иначе
			Объект.АдресЭП = "";
			Объект.Телефон = "";
			Телефон = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьФормуSMSИEmail();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытиеФормыВводаТелефона(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		Если ЗначениеЗаполнено(РезультатОткрытияФормы.ВведенноеЧисло) Тогда
			Телефон = 0;
			ПодключаемоеОборудованиеРТКлиент.ПреобразоватьТелефонКПользовательсткомуВиду(РезультатОткрытияФормы.ВведенноеЧисло, Телефон, ТелефонСтрокой);
			Объект.Телефон = Формат(РезультатОткрытияФормы.ВведенноеЧисло, "ЧЦ=10; ЧДЦ=; ЧГ=0");
			Объект.АдресЭП = "";
			ДанныеSMSИлиEmail = ТелефонСтрокой;
			ОтказКлиентаОтСохраненияТелефонаEmail = РезультатОткрытияФормы.ОтказКлиентаОтСохраненияТелефона;
		Иначе
			Объект.Телефон = 0;
			ТелефонСтрокой = "";
			Объект.АдресЭП = "";
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьФормуSMSИEmail();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗачетАванса(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ДополнительныеПараметры = Неопределено
		 И ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
		ОповещениеРасчетСкидокКлиент();
	КонецЕсли;
	
	ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ЗачетАванса");
	ВидОплатыЗачетАванса = ПолучитьВидОплатыПоТипу(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ЗачетАванса"));
	
	Если НЕ ВидОплатыЗачетАванса = Неопределено Тогда
		НоваяСтрока = Объект.Оплата.Добавить();
		НоваяСтрока.ВидОплаты = ВидОплатыЗачетАванса;
		
		Сумма = Мин(Объект.Товары.Итог("Сумма"), СуммаДокументаРасчета);
		НоваяСтрока.Сумма = ?(Сумма > 0, Сумма, 0);
		
		НоваяСтрока.ТипОплаты = ТипОплаты;
		Элементы.Оплата.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Оплата.ТекущийЭлемент = Элементы.ОплатаСумма;
		Элементы.Оплата.ИзменитьСтроку();
		МодифицированыСохраняемыеДанные = Истина;
		
		ОбновитьИтоговыеПоказатели();
		
	Иначе
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("ИмяПоляОтбораЛевоеЗначение", "ТипОплаты");
		Отбор.Вставить("ПравоеЗначение"            , ТипОплаты);
		Отбор.Вставить("Отрицание"                 , Ложь);
		
		ПараметрыФормы =  Новый Структура("СтруктураПараметрыОтбора", Отбор);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТипОплаты", ТипОплаты);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораОплатыЧекаККМ", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.ВидыОплатЧекаККМ.ФормаВыбора", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОплатыСРассрочку(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ДополнительныеПараметры = Неопределено
		 И ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
		ОповещениеРасчетСкидокКлиент();
	КонецЕсли;
	
	ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ВРассрочку");
	ВидОплатыВРассрочку = ПолучитьВидОплатыПоТипу(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ВРассрочку"));
	
	Если НЕ ВидОплатыВРассрочку = Неопределено Тогда
		НоваяСтрока = Объект.Оплата.Добавить();
		НоваяСтрока.ВидОплаты = ВидОплатыВРассрочку;
		
		Сумма = Объект.Товары.Итог("Сумма") - Объект.Оплата.Итог("Сумма");
		НоваяСтрока.Сумма = ?(Сумма > 0, Сумма, 0);
		
		НоваяСтрока.ТипОплаты = ТипОплаты;
		Элементы.Оплата.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Оплата.ТекущийЭлемент = Элементы.ОплатаСумма;
		Элементы.Оплата.ИзменитьСтроку();
		МодифицированыСохраняемыеДанные = Истина;
		
		ОбновитьИтоговыеПоказатели();
		
	Иначе
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("ИмяПоляОтбораЛевоеЗначение", "ТипОплаты");
		Отбор.Вставить("ПравоеЗначение"            , ТипОплаты);
		Отбор.Вставить("Отрицание"                 , Ложь);
		
		ПараметрыФормы =  Новый Структура("СтруктураПараметрыОтбора", Отбор);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТипОплаты", ТипОплаты);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораОплатыЧекаККМ", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.ВидыОплатЧекаККМ.ФормаВыбора", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	ПараметрыСобытийПО = Новый Структура;
	ПараметрыСобытийПО.Вставить("РегистрацияНовойКарты", Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа);
	ПараметрыСобытийПО.Вставить("ПоискАкцизнойМарки", Истина);
	
	ИспользоватьАвтоматическиеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьРасчетыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыСКлиентами");
	
	Элементы.СкидкиХарактеристика.Видимость = ИспользоватьХарактеристики;
	Элементы.БонусныеБаллыКНачислениюХарактеристика.Видимость = ИспользоватьХарактеристики;
	
	Элементы.ОплатаЗачетАванса.Видимость = ИспользоватьРасчетыСКлиентами;
	Элементы.ОплатаОплатитьВРассрочку.Видимость = ИспользоватьРасчетыСКлиентами;
	
	ИспользоватьБонусныеПрограммыЛояльности = ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности");
	Если ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
		АвтоматическийРасчетСкидок = УправлениеПользователямиВызовСервера.ПолучитьБулевоЗначениеПраваПользователя(
										ПланыВидовХарактеристик.ПраваПользователей.АвтоматическийРасчетСкидокПриРедактированииДокументаПродажи, Ложь);
	КонецЕсли;
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,Элементы.КартинкаСостоянияДокумента.Подсказка,РазрешеноПроведение);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда // Это новый 
			
			Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
			
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда // Это новый 
			
			Объект.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;
			
		КонецЕсли;
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипыОплатВТЧСервер(Объект);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьВидНалогаПродажиВТЧСервер(Объект.Товары, Новый Структура("Дата, Организация, Магазин", Объект.Дата, Объект.Организация, Объект.Магазин));
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
		
		СтруктураПроверкиАМ = Новый Структура();
		СтруктураПроверкиАМ.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары, СтруктураПроверкиАМ);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаКодаМаркировки(Объект.Товары, СтруктураПроверкиАМ);
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Подарки);
		СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
		БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект);
		
		ВозможностьЭлектронногоПлатежа = ПодключаемоеОборудованиеРТ.ВозможностьЭлектронногоПлатежа(Объект.КассаККМ.ПодключаемоеОборудование);
		Если ВозможностьЭлектронногоПлатежа Тогда
			ПередачаEmailЧерезПрограмму = Объект.КассаККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С;
			ПередачаSMSЧерезПрограмму  = Объект.КассаККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С;
		КонецЕсли;
		
		Элементы.КомандаEmail.Видимость = ВозможностьЭлектронногоПлатежа;
		Элементы.КомандаSMS.Видимость   = ВозможностьЭлектронногоПлатежа;
		Элементы.ГруппаДанныеSMSИEmail.Видимость   = ВозможностьЭлектронногоПлатежа;
		
		ПроверитьВозможностьРазныхНалоговыхРежимовСкладов();
		ЗаполнитьСистемуНалогооблажения(Объект.Дата, Объект.Организация);
	Иначе
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
	КонецЕсли;
	
	ОбновитьИтоговыеПоказателиСервер();
	
	ТолькоПросмотр = ТолькоПросмотр 
	             ИЛИ Объект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый
	             ИЛИ Объект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Архивный
	             ИЛИ Объект.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Аннулированный;
	
	УстановитьДоступностьКнопокПроведенияСервер();
	
	РабочееМесто = Объект.КассаККМ.РабочееМесто;
	
	НастроитьФормуПоДополнительнымПравам(Ложь);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипыОплатВТЧСервер(Объект);
	
	Элементы.ОплатаЗаполнитьОплатыПоДокументуПродажи.Доступность = ЗначениеЗаполнено(Объект.ЧекККМПродажа);
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	
	КонтролироватьОстаткиТоваров = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.КонтролироватьОстатокПриПроведении, Ложь);
	
	ПродажаПоЗаказу = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
	
	УстановитьВидимостьИДоступностьЗаказаПокупателя();
	
	УстановитьКомандыВидовОплаты();
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	ЗаполнитьСтавкиНДС();
	
	УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов();
	
	Элементы.ГруппаБонусныеБаллы.Видимость = ИспользоватьБонусныеПрограммыЛояльности;
	Элементы.ТоварыСуммаСкидкиОплатыБонусом.Видимость = ИспользоватьБонусныеПрограммыЛояльности;
	Элементы.ОплатаГруппаБонусы.Видимость = ИспользоватьБонусныеПрограммыЛояльности;
	
	Элементы.ПросмотрНакоплений.Доступность = ЗначениеЗаполнено(Объект.ДисконтнаяКарта);
	
	РеквизитыКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.КассаККМ, "РабочееМесто, ПодключаемоеОборудование, ПодключаемоеОборудование.ТипОборудования, ЭлектронныйЧекEmailПередаютсяПрограммой1С, ЭлектронныйЧекSMSПередаютсяПрограммой1С");
	
	РабочееМесто = РеквизитыКассы.РабочееМесто;
	ТипОборудованияКассыККМ = РеквизитыКассы.ПодключаемоеОборудованиеТипОборудования;
	
	ВозможностьЭлектронногоПлатежа = ПодключаемоеОборудованиеРТ.ВозможностьЭлектронногоПлатежа(РеквизитыКассы.ПодключаемоеОборудование);
	Если ВозможностьЭлектронногоПлатежа Тогда
		ПередачаEmailЧерезПрограмму = РеквизитыКассы.ЭлектронныйЧекEmailПередаютсяПрограммой1С;
		ПередачаSMSЧерезПрограмму  = РеквизитыКассы.ЭлектронныйЧекSMSПередаютсяПрограммой1С;
	КонецЕсли;
	
	Элементы.КомандаEmail.Видимость = ВозможностьЭлектронногоПлатежа;
	Элементы.КомандаSMS.Видимость   = ВозможностьЭлектронногоПлатежа;
	Элементы.ГруппаДанныеSMSИEmail.Видимость   = ВозможностьЭлектронногоПлатежа;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		Элементы.СкидкиКоманднаяПанель.Доступность = Ложь;
		Элементы.ГруппаТоварыСкидкиНаценки.Доступность = Ложь;
		ЭтоВозврат = Истина;
		ЭтоВозвратДеньВДень = ЭтоВозвратДеньВДень(); // для условного оформления
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОтчетОРозничныхПродажах) Тогда
		Элементы.ОткрытьОтчетОРозничныхПродажах.Видимость = Истина;
		СтруктураОРП = Новый Структура;
		СтруктураОРП.Вставить("Дата");
		СтруктураОРП.Вставить("Номер");
		РеквизитыОРП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ОтчетОРозничныхПродажах, СтруктураОРП);
		ЗаголовокОРП = НСтр("ru = 'Отчет о продажах №%1 от %2'");
		ЗаголовокОРП = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ЗаголовокОРП,
							РеквизитыОРП.Номер,
							РеквизитыОРП.Дата);
		Элементы.ОткрытьОтчетОРозничныхПродажах.Заголовок = ЗаголовокОРП;
	Иначе
		Элементы.ОткрытьОтчетОРозничныхПродажах.Видимость = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
	УчетАлкогольнойПродукции = ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(Объект.Дата);
	ВидимостьКолонкиМаркировки = УчетАлкогольнойПродукции 
								Или ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиТабачнойПродукции") 
								Или ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиОбувнойПродукции");
	
	Элементы.ТоварыСтатусУказанияАкцизныхМарок.Видимость = ВидимостьКолонкиМаркировки;
	
	УстановитьВидимостьИДостпуностьРасчетыСКлиентами();
	Элементы.ЧекККМПродажа.Видимость = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = Константы.КонтрагентРозничныйПокупатель.Получить();
	КонецЕсли;
	
	Элементы.ФормаСоздатьДокументЧекККМ.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.ЧекККМ);
	
	УстановитьАвтоОтметкуТЧТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьСистемуНалогообложенияНаФорме();
	
	ЗначениеПеречислениеВидОперацииПродажа = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа");
	
	ЗначениеПеречислениеВидОперацииВозврат = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат");
	
	ЗначениеСправочникиВидыОплатЧекаККМОплатаПодарочнымСертификатом = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом");
	
	УстановитьДоступностьПоВидуОперацииКлиент();
	УстановитьПараметрыВыбораЧекаККМПродажиКлиент();
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
	РозничныеПродажиКлиент.ЗаполнитьКоличествоКодовМаркировки(Объект.Товары, Объект.КодыМаркировки);
	РозничныеПродажиКлиент.УстановитьЗначениеСтатусаКодаМаркировки(Объект.Товары);
	
	ПредставитьТелефонИEmailКлиент();
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда
		
		СтрокиИзменены = ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТабличнойЧасти);
		Если СтрокиИзменены Тогда
			ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		КонецЕсли;
		
		ПроверитьПрименениеВидовНалов();
		
		// Интерфейс ЕГАИС
		ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
		РозничныеПродажиКлиент.УстановитьЗначениеСтатусаКодаМаркировки(Объект.Товары);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ФормаОпросаВладельцаКарт" Тогда
		ПриИзмененииДисконтнаяКартаСервер();
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Или ИмяСобытия = "ВставкаСтрокИзБуфераОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбмена();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() И ВозможностьВводаПоШК() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
	СтруктураМарки = Новый Структура;
	СтруктураМарки.Вставить("Дата", Объект.Дата);
	СтруктураМарки.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары, СтруктураМарки);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаКодаМаркировки(Объект.Товары, СтруктураМарки);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипыОплатВТЧСервер(Объект);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьВидНалогаПродажиВТЧСервер(Объект.Товары, Новый Структура("Дата, Организация, Магазин", Объект.Дата, Объект.Организация, Объект.Магазин));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(Объект.Товары);
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"ФормаПробитьЧек",
																"Доступность", 
																Объект.Проведен И НЕ ТолькоПросмотр);
	
	ОбновитьИтоговыеПоказателиСервер();
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект);
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Подарки);
	
	Элементы.ПросмотрНакоплений.Доступность = ЗначениеЗаполнено(Объект.ДисконтнаяКарта);
	
	МассивОплатБонусами = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой));
	Если МассивОплатБонусами.Количество() > 0 Тогда
		ЕстьОплатаБонусами = Истина;
	КонецЕсли;
	
	ВозможностьЭлектронногоПлатежа = ПодключаемоеОборудованиеРТ.ВозможностьЭлектронногоПлатежа(Объект.КассаККМ.ПодключаемоеОборудование);
	Если ВозможностьЭлектронногоПлатежа Тогда
		ПередачаEmailЧерезПрограмму = Объект.КассаККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С;
		ПередачаSMSЧерезПрограмму  = Объект.КассаККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С;
	КонецЕсли;
	
	Элементы.КомандаEmail.Видимость = ВозможностьЭлектронногоПлатежа;
	Элементы.КомандаSMS.Видимость   = ВозможностьЭлектронногоПлатежа;
	Элементы.ГруппаДанныеSMSИEmail.Видимость   = ВозможностьЭлектронногоПлатежа;
	
	ПроверитьВозможностьРазныхНалоговыхРежимовСкладов();
	ЗаполнитьСистемуНалогооблажения(Объект.Дата, Объект.Организация);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности 
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
											"Документ.ЧекККМ.ФормаДокумента.Запись",
															Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);
	// Если документ проводится, рассчитаем скидки.
	
	ПередЗаписьюКлиент(Отказ, ПараметрыЗаписи.РежимЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
	СтруктураМарки = Новый Структура;
	СтруктураМарки.Вставить("Дата", Объект.Дата);
	СтруктураМарки.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары, СтруктураМарки);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаКодаМаркировки(Объект.Товары, СтруктураМарки);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипыОплатВТЧСервер(Объект);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(Объект.Товары);
	
	ОбновитьИтоговыеПоказателиСервер();
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект);
	УстановитьВидимостьИДоступностьЗаполнитьПоЗаказу();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Подарки);
	
	Если НЕ ОтказКлиентаОтСохраненияТелефонаEmail Тогда
		Если ЗначениеЗаполнено(Объект.Телефон) Тогда
			ПодключаемоеОборудованиеРТ.ЗаписатьТелефонВИнформационнуюКарту(Объект.ДисконтнаяКарта, Объект.Телефон);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.АдресЭП) Тогда
			ПодключаемоеОборудованиеРТ.ЗаписатьEmailВИнформационнуюКарту(Объект.ДисконтнаяКарта, Объект.АдресЭП);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.Телефон) Тогда
			ПодключаемоеОборудованиеРТ.УдалитьТелефонИзИнформационнойКарты(Объект.ДисконтнаяКарта, Объект.Телефон);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.АдресЭП) Тогда
			ПодключаемоеОборудованиеРТ.УдалитьEmailИзИнформационнойКарты(Объект.ДисконтнаяКарта, Объект.АдресЭП);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"ФормаПробитьЧек",
																"Доступность", 
																Объект.Проведен И НЕ ТолькоПросмотр);
																
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, ВидимостьКолонкиМаркировки);
	ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
	РозничныеПродажиКлиент.ЗаполнитьКоличествоКодовМаркировки(Объект.Товары, Объект.КодыМаркировки);
	РозничныеПродажиКлиент.УстановитьЗначениеСтатусаКодаМаркировки(Объект.Товары);
	
	// &ЗамерПроизводительности 
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЧекККМПродажаПриИзменении(Элемент)
	
	ПриИзмененииЧекККМПродажаСервер();
	Если АвтоматическийРасчетСкидок Тогда
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	ПриИзмененииКассаККМСервер();
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
	УстановитьПараметрыВыбораЧекаККМПродажиКлиент();
	
	Если НЕ ПродажаПоЗаказу Тогда
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	КонецЕсли;
	
	УстановитьЭквайринговыйТерминалПоУмолчанию();
	
	ПроверитьПрименениеВидовНалов();
	
	УстановитьСистемуНалогообложенияНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ДисконтнаяКартаПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		
		ИнформационныеКартыКлиент.ПровестиОпросВладельца(Объект.ДисконтнаяКарта, ОбщегоНазначенияКлиент.ДатаСеанса());
		
	КонецЕсли;
	
	ПриИзмененииДисконтнаяКартаСервер();
	Если Элемент <> Неопределено Тогда
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	КонецЕсли;
	
	ОбновитьФормуSMSИEmail();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Объект.ЧекККМПродажа = "";
	Объект.ДокументРасчета = "";
	
	ВидОперацииПриИзмененииСервер();
	
	ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	
	УстановитьДоступностьПоВидуОперацииКлиент();
	
	НастроитьФормуПоДополнительнымПравам(Истина);
	
	ЭтоВозвратДеньВДень = ЭтоВозвратДеньВДень();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
	Если Объект.Товары.Количество() > 0 Тогда 
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", 
									ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДС(Объект));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 
									ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
									
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, , СтруктураДействий, Неопределено);
		ОбновитьИтоговыеПоказатели();							
	
	КонецЕсли;
	
	ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, ВидимостьКолонкиМаркировки);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ПроверитьВозможностьРазныхНалоговыхРежимовСкладов();
	
	ЗаполнитьСтавкиНДС();
	
	// Интерфейс ЕГАИС
	УчетАлкогольнойПродукции = ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(Объект.Дата);
	ВидимостьКолонкиМаркировки = УчетАлкогольнойПродукции 
								Или ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиТабачнойПродукции")
								Или ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиОбувнойПродукции");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументРасчетаПриИзменении(Элемент)
	ДокументРасчетаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОперацияСДенежнымиСредствамиПриИзменении(Элемент)
	
	ВидимостьОплатРасчетыСКлиентами();
	ОперацияСДенежнымиСредствамиПриИзмененииСервер();
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	РозничныеПродажиКлиент.УстановитьЗначениеСтатусаКодаМаркировки(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаХозяйственнойОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
	          Истина, "Справочник.АналитикаХозяйственныхОпераций.Форма.ФормаВыбора.Открытие");
              
КонецПроцедуры

&НаКлиенте
Процедура КассаККМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Справочник.КассыККМ.Форма.ФормаВыбора.Открытие");
             
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
								Истина, "Справочник.Контрагенты.Форма.ФормаВыбора.Открытие");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	Если КэшированныеЗначения = Неопределено Тогда
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары,
			КэшированныеЗначения,
			ПараметрыУказанияСерий,
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ ЭтотОбъект.ТолькоПросмотр Тогда
		ТекущаяСтрокаТоваров = Элемент.ТекущиеДанные;
		Если ТекущаяСтрокаТоваров <> Неопределено
			И ТекущаяСтрокаТоваров.ПродажаПодарка Тогда
			ОтказВвода = Ложь;
			ТоварыВводДополнительнойИнформации(Элемент, ОтказВвода);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ТоварыВводДополнительнойИнформации(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если РедактированиеТЧТовары Тогда
		ОтказСтандартнойОбработки = Ложь;
		ТоварыВводДополнительнойИнформации(Элемент, ОтказСтандартнойОбработки);
		Если ОтказСтандартнойОбработки Тогда
			Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
		// Нужно удалить старые акцизные марки.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязи", ТекущаяСтрока.КлючСвязи);
		
		МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
			Объект.АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
		КонецЦикла;
	КонецЕсли;
	
	Если ТекущаяСтрока.НеобходимостьВводаКодаМаркировки Тогда
		// Нужно удалить старые коды.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязи", ТекущаяСтрока.КлючСвязи);
		
		МассивКодов = Объект.КодыМаркировки.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаКод Из МассивКодов Цикл
			Объект.КодыМаркировки.Удалить(СтрокаКод);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента");
	
	Если ТипОборудованияКассыККМ = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ") Тогда
		Если Объект.Товары.Количество() > 1 Тогда
			ТекстСообщенияПриОшибке = НСтр("ru = 'Недопустимо добавлять в один чек товары и услуги по различным договорам платежных агентов'");
			СтруктураПараметровПроверки = Новый Структура();
			СтруктураПараметровПроверки.Вставить("ДоговорПлатежногоАгента", Объект.ДоговорПлатежногоАгента);
			СтруктураПараметровПроверки.Вставить("ТекстСообщения", ТекстСообщенияПриОшибке);
			СтруктураДействий.Вставить("ПроверитьОтличныеДоговорыПлатежныхАгентов", СтруктураПараметровПроверки);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий.Вставить("ОчиститьДанныеПоЗаказу");
	СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
	ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"   , ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураПроверкиАМ = Новый Структура();
	СтруктураПроверкиАМ.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
	СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураПроверкиАМ);
	СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаКодаМаркировки", СтруктураПроверкиАМ);
	
	СтруктураПараметровДействия = Новый Структура;
	СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
	СтруктураПараметровДействия.Вставить("РабочееМесто", РабочееМесто);
	СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДействия);
	
	СтруктураПараметровДействия = Новый Структура();
	СтруктураПараметровДействия.Вставить("Дата", Объект.Дата);
	СтруктураПараметровДействия.Вставить("Организация", Объект.Организация);
	СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
	СтруктураДействий.Вставить("ЗаполнитьВидНалога", СтруктураПараметровДействия);
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	
	СтруктураПараметровСтавкиНДС = Новый Структура;
	СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
	СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС"           , ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
	
	Если ИспользоватьАссортимент Тогда
		СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", АссортиментКлиентСервер.ПараметрыПроверкиАссортимента(Объект, Истина));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПроверитьЗапретРозничнойПродажи", СкидкиНаценкиКлиентСервер.ПараметрыПроверкиЗапретаРозничнойПродажи(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели();
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущаяСтрока);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	
	Если ПропуститьАвтоматическийРасчетСкидок Тогда
		ПропуститьАвтоматическийРасчетСкидок = Ложь;
	КонецЕсли;
	
	Если ТипОборудованияКассыККМ = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ") Тогда
		Если Объект.Товары.Количество() = 1 Тогда
			Объект.ДоговорПлатежногоАгента = ТекущаяСтрока.ДоговорПлатежногоАгента;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьПрименениеВидовНалов(Элементы.Товары.ТекущаяСтрока);
	
	Если ТекущаяСтрока <> Неопределено Тогда
		// Интерфейс ЕГАИС
		ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
		РозничныеПродажиКлиент.УстановитьЗначениеСтатусаКодаМаркировкиВСтроке(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
								Истина, "Справочник.Номенклатура.Форма.ФормаВыбора.Открытие");
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбораНоменклатуры = Новый Структура();
	Если ТипОборудованияКассыККМ = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ")
		и Объект.Товары.Количество() > 1 Тогда
		ПараметрыВыбораНоменклатуры.Вставить("СтруктураПараметрыОтбора", Новый Структура());
		ПараметрыВыбораНоменклатуры.СтруктураПараметрыОтбора.Вставить("ДоговорПлатежногоАгента", Объект.ДоговорПлатежногоАгента);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ПараметрыВыбораНоменклатуры.Вставить("ТекущаяСтрока", ТекущиеДанные.Номенклатура);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВыбораНоменклатуры", ЭтотОбъект);
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыВыбораНоменклатуры,,,,, ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
		
	Если ТекущаяСтрока.НеобходимостьВводаКодаМаркировки Тогда
		// Нужно удалить старые коды.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязи", ТекущаяСтрока.КлючСвязи);
		
		МассивКодов = Объект.КодыМаркировки.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаКод Из МассивКодов Цикл
			Объект.КодыМаркировки.Удалить(СтрокаКод);
		КонецЦикла;
		
		СтруктураПроверки = Новый Структура();
		СтруктураПроверки.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаКодаМаркировки", СтруктураПроверки);
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	// Отмена операции для табачной продукции
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели();
	
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)

	// Отмена операции для табачной продукции
	
	ПриИзмененииТоварыКоличестваУпаковок();

	// Интерфейс ЕГАИС
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураПараметровСтавкиНДС = Новый Структура;
	СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
	СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
	
	СтруктураПараметровДействия = Новый Структура();
	СтруктураПараметровДействия.Вставить("Дата", Объект.Дата);
	СтруктураПараметровДействия.Вставить("Организация", Объект.Организация);
	СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
	СтруктураДействий.Вставить("ЗаполнитьВидНалога", СтруктураПараметровДействия);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели();
	
	ПроверитьПрименениеВидовНалов(Элементы.Товары.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
	УдаляемыйКлючСвязи = Элементы.Товары.ТекущиеДанные.КлючСвязи;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Копирование Тогда
		
		ТекущаяСтрока.КлючСвязиСерийныхНомеров    = 0;
		ТекущаяСтрока.СуммаАвтоматическойСкидки   = 0;
		ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
		ТекущаяСтрока.СуммаСкидкиОплатыБонусом    = 0;
		
		ТекущаяСтрока.КлючСвязи                   = 0;
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
		Если ТекущаяСтрока.ИспользоватьСерийныеНомера Тогда
			ТекущаяСтрока.КоличествоУпаковок = 0;
			ТекущаяСтрока.Количество = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущаяСтрока.Продавец = Объект.Продавец;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,
				КэшированныеЗначения,
				ПараметрыУказанияСерий,
				Копирование);
	
	РедактированиеТЧТовары = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИтоговыеПоказатели();
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если КэшированныеЗначения = Неопределено Тогда
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары,
			КэшированныеЗначения,
			ПараметрыУказанияСерий,
			Ложь);
	КонецЕсли;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущиеДанные);
	
	РедактированиеТЧТовары = Ложь;
	
	Если ПропуститьАвтоматическийРасчетСкидок Тогда
		ПропуститьАвтоматическийРасчетСкидок = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", УдаляемыйКлючСвязи);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ТоварыПослеУдаленияСервер();
	
	ПроверитьПрименениеВидовНалов();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияСервер()
	
	ОбновитьИтоговыеПоказателиСервер();
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", УдаляемыйКлючСвязи);
	
	ЕстьУдаляемыеСтроки = УдаляемыйКлючСвязи > 0;
	
	Если ПродажаПоЗаказу
		ИЛИ ДокументРасчетаЗаполнен Тогда
		Если ЕстьУдаляемыеСтроки Тогда
			
			
			
			СтрокиСкидкиНаценки = Объект.СкидкиНаценки.НайтиСтроки(СтруктураПоиска);
			
			Для каждого СтрокаСкидкиНаценки Из СтрокиСкидкиНаценки Цикл
				
				Объект.СкидкиНаценки.Удалить(СтрокаСкидкиНаценки);
				
			КонецЦикла;
			
			
			УдаляемыйКлючСвязи = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьНесвязанныеСерийныеНомера();
	УдалитьНесвязанныеАкцизы();
	УдалитьНесвязанныеКодыМаркировки();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если АвтоматическийРасчетСкидок Тогда
		ПропуститьАвтоматическийРасчетСкидок = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплата

&НаКлиенте
Процедура ОплатаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если НЕ Копирование Тогда
		ДобавитьОплатуНаличными();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОплатаСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	ПересчитатьСуммуКомиссии(ТекущаяСтрока);
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПроцентКомиссииПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	ПересчитатьСуммуКомиссии(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаВидОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	
	УстановитьЭквайринговыйТерминалПоУмолчанию(ТекущаяСтрока);
	
	ТекущаяСтрока.ПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииПоТерминалу(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты, ЭтоВозврат, ЭтоВозвратДеньВДень);
	ПересчитатьСуммуКомиссии(ТекущаяСтрока);
	
	ТекущаяСтрока.ТипОплаты = ТипОплатыПоВиду(ТекущаяСтрока.ВидОплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаЭквайринговыйТерминалПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	
	ТекущаяСтрока.ПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииПоТерминалу(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты, ЭтоВозврат, ЭтоВозвратДеньВДень);
	
	ПересчитатьСуммуКомиссии(ТекущаяСтрока);
	
	ТекущаяСтрока.ТипОплаты = ТипОплатыПоВиду(ТекущаяСтрока.ВидОплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Оплата.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если НЕ ВопросОбУдаленииСтрокиОплатыУжеЗадан Тогда
			Если ТекущиеДанные.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом") 
				  И Объект.ПогашениеПодарочныхСертификатов.Количество() > 0 Тогда
				
				Отказ = Истина;
				ТекстВопроса = НСтр("ru = 'Удаляется оплата подарочным сертификатом, при этом удалятся все сертификаты оплаты. Продолжить?'"); 
				
				ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросУдалениеСертификатовОплаты", ЭтотОбъект);
				ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
				
			ИначеЕсли ТекущиеДанные.ДанныеПереданыВБанк Тогда
				
				Отказ = Истина;
				
				Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
					
					СтрокаСообщения = НСтр("ru = 'Данные об оплате отправлены в банк.'") + Символы.ПС;
					СтрокаСообщения = СтрокаСообщения + НСтр("ru = 'Необходимо отменить операцию.'"); 
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтрокаСообщения,
						Объект,
						"ОплатаОплатаЧерезТерминал");
				Иначе
					ТекстВопроса = НСтр("ru = 'Данные об отмене отправлены в банк.'") + Символы.ПС;
					ТекстВопроса = ТекстВопроса + НСтр("ru = 'Вы хотите удалить строку с потерей данных?'");
					
					ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросПотеряДанныхОтправленныхВБанк", ЭтотОбъект);
					ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			Если ТекущиеДанные.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой")
				И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
				ОтменитьОплатуБонусами(Ложь);
				Если АвтоматическийРасчетСкидок Тогда
					Если НЕ ПропуститьАвтоматическийРасчетСкидок Тогда
						РассчитатьСкидкиНаценкиКлиент();
					КонецЕсли;
				Иначе
					ОтменитьСкидки();
				КонецЕсли;
				ОбновитьИтоговыеПоказатели();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		
		ТекущиеДанные = Элементы.Оплата.ТекущиеДанные;
		
		ТекущиеДанные.СсылочныйНомер      = "";
		ТекущиеДанные.НомерЧекаЭТ         = "";
		ТекущиеДанные.НомерПлатежнойКарты = "";
		ТекущиеДанные.ДанныеПереданыВБанк = Ложь;
		
	КонецЕсли;
	
	СуммаПродажи = ?(Объект.ЦенаВключаетНДС, Объект.Товары.Итог("Сумма"), Объект.Товары.Итог("Сумма") + Объект.Товары.Итог("СуммаНДС"));
	СуммаОплат   = Объект.Оплата.Итог("Сумма");
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	
	Если ТекущаяСтрока.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ЗачетАванса") Тогда
		ОстатокОплаты = Мин(СуммаПродажи, СуммаДокументаРасчета);
	Иначе
		ТекущаяСумма  = ТекущаяСтрока.Сумма;
		
		ОплатаБезТекущейСтроки = СуммаОплат - ТекущаяСумма;
		ОстатокОплаты = СуммаПродажи - ОплатаБезТекущейСтроки;
	КонецЕсли;
	
	Элементы.ОплатаСумма.СписокВыбора.Очистить();
	
	Если ОстатокОплаты > 0 Тогда
		
		Элементы.ОплатаСумма.СписокВыбора.Добавить(ОстатокОплаты, Формат(ОстатокОплаты, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧН=; ЧГ=3,0"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПриИзменении(Элемент)
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодарки

&НаКлиенте
Процедура ПодаркиЦенаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Подарки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Подарки, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиСуммаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Подарки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах");
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Подарки, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ОповещенияПриПолученииВеса = Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект);
	ПодключаемоеОборудованиеРТКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ОповещенияПриПолученииВеса, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧек(Команда)
	
	ПробитьЧекНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбиратьНенайденные", Ложь);
	ДополнительныеПараметры.Вставить("ОбработатьПослеЗагрузки", Истина);
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоискПоНаименованию(Команда)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Магазин",Объект.Магазин);
	РаботаСПравиламиИменованияКлиент.ПоискПоНаименованию(ЭтаФорма,ПараметрыПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПодарочныеСертификатыПогашения(Команда)
	
	ДополнительныеПараметры = Неопределено;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеВводаПодарочныхСертификатов");
		
		Отказ = Ложь;
		ПроверитьСкидки(Отказ, ДополнительныеПараметры);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОповещениеВводаПодарочныхСертификатов(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьПлатежнойКартой(Команда)
	
	ДополнительныеПараметры = Неопределено;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеОплатыПлатежнойКартой");
		
		Отказ = Ложь;
		ПроверитьСкидки(Отказ, ДополнительныеПараметры);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОповещениеОплатыПлатежнойКартой(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьБанковскимКредитом(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
		
	Иначе
		
		ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеОплатыБанковскимКредитом");
		
		Отказ = Ложь;
		ПроверитьСкидки(Отказ, ДополнительныеПараметры);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	
		Если ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОповещениеОплатыБанковскимКредитом(Неопределено, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОплатыПоДокументуПродажи(Команда)
	
	ЗаполнитьОплатыПоДокументуПродажиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Истина, "ОбщаяФорма.НазначениеАвтоматическихУправляемыхСкидокНаценок.Открытие");
	
	ДополнительныеПараметры = Новый Структура;
	ОбработчикОповещения = Новый ОписаниеОповещения("НазначитьАвтоматическиеСкидкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ВыполнитьПредварительныйРасчетСкидокНаСервере(ПорядковыйНомерПродажи));
	СписокОдноразовыхКодов = Новый Массив;
	Для Каждого ПредъявленныйКод Из Объект.ПредъявленныеКодыОднократныхСкидок Цикл
		СписокОдноразовыхКодов.Добавить(ПредъявленныйКод.КодСкидки);
	КонецЦикла;
	ПараметрыФормы.Вставить("СписокОдноразовыхКодов", СписокОдноразовыхКодов);
	ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
	ОткрытьФорму("ОбщаяФорма.НазначениеАвтоматическихУправляемыхСкидокНаценок", ПараметрыФормы, ЭтотОбъект, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Не СкидкиНаценкиКлиент.ПроверитьНеобходимостьНазначенияРучнойСкидкиНаценки(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Истина, "ОбщаяФорма.НазначениеРучнойСкидкиНаценки.Открытие");
        
	ПараметрыДляРучнойСкидки = ПараметрыДляНазначенияРучнойСкидки();
	ДополнительныеПараметры = Новый Структура;
	ОбработчикОповещения = Новый ОписаниеОповещения("НазначитьРучнуюСкидкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.НазначениеРучнойСкидкиНаценки", ПараметрыДляРучнойСкидки, ЭтотОбъект, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиОплатуЧерезТерминал(Команда)
	Перем Отказ;
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		СтрокаСообщения = НСтр("ru = 'Необходимо выбрать строку с платежной картой'");
		ПоказатьПредупреждение(, СтрокаСообщения);
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущаяСтрока.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта") Тогда
		
		СтрокаСообщения = НСтр("ru = 'Выберите строку с платежной картой'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрокаСообщения,
			Объект,
			"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "].ВидОплаты");
		
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЭквайринговыйТерминал) Тогда
		
		СтрокаСообщения = НСтр("ru = 'Не выбран эквайринговый терминал'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрокаСообщения,
			Объект,
			"Оплата[" + (ТекущаяСтрока.НомерСтроки - 1) + "].ЭквайринговыйТерминал");
		
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		
		ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеОплатыЧерезТерминал");
		
		Отказ = Ложь;
		ПроверитьСкидки(Отказ, ДополнительныеПараметры);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОповещениеОплатыЧерезТерминал(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	ОткрытьИнформациюОСкидкахКлиент()
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	Если Не СкидкиНаценкиКлиент.ПроверитьНеобходимостьОтменыРучныхСкидокНаценок(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПодаркиВТовары(Команда);
	
	ПеренестиСкидкиПодаркиВТоварыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'чек'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти", "Подарки");
	ПараметрыФормы.Вставить("РежимПодбораБезСертификатов", Истина);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если НЕ ЕстьПравоИзменятьЦену() Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрытьИзФормы(Команда)
	Перем Отказ, Объект_Ссылка;
	
	Если Объект.ПометкаУдаления Тогда
		ВызватьИсключение НСтр("ru = 'Помеченный на удаление документ не может быть проведен!'");
	КонецЕсли;
	
	Отказ = Ложь;
	ПередЗаписьюКлиент(Отказ, РежимЗаписиДокумента.Проведение);
	ТекстСообщения = "";
	Если НЕ Отказ Тогда
		ПровестиИзФормыСервер(Отказ, Ложь, Объект_Ссылка,ТекстСообщения);
		Если Отказ 
			И ЗначениеЗаполнено(ТекстСообщения) Тогда
			Возврат;
		КонецЕсли;

		Модифицированность = Отказ;
		Если НЕ Отказ Тогда
			Закрыть();
			ОтобразитьИзменениеДанных(Объект_Ссылка, ВидИзмененияДанных.Изменение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИзФормы(Команда)
	Перем Отказ;
	
	Если Объект.ПометкаУдаления Тогда
		ВызватьИсключение НСтр("ru = 'Помеченный на удаление документ не может быть проведен!'");
	КонецЕсли;
	
	Отказ = Ложь;
	ПередЗаписьюКлиент(Отказ, РежимЗаписиДокумента.Проведение);
	ТекстСообщения = "";
	Если НЕ Отказ Тогда
		ПровестиИзФормыСервер(Отказ, Истина,,ТекстСообщения);
		Если Отказ
			И ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																	"ФормаПробитьЧек",
																	"Доступность", 
																	Объект.Проведен И НЕ ТолькоПросмотр);
		
		ОбновитьОтображениеДанных();
		Модифицированность = Отказ;
		
		ОтобразитьИзменениеДанных(ЭтотОбъект.Объект.Ссылка, ВидИзмененияДанных.Изменение);
	КонецЕсли;
	
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, ВидимостьКолонкиМаркировки);
	ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
	РозничныеПродажиКлиент.ЗаполнитьКоличествоКодовМаркировки(Объект.Товары, Объект.КодыМаркировки);
	РозничныеПродажиКлиент.УстановитьЗначениеСтатусаКодаМаркировки(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'чек'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСертификатов", Истина);
		ПараметрыФормы.Вставить("РежимПодбораБезУслуг", Ложь);
	КонецЕсли;
	ПараметрыФормы.Вставить("РежимПодбораСУчетомМинимальныхЦен", Истина);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если НЕ ЕстьПравоИзменятьЦену() Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	КонецЕсли;
	
	Если ИспользоватьАссортимент Тогда
		ПараметрыФормы.Вставить("МагазинАссортимента", Объект.Магазин);
		ПараметрыФормы.Вставить("РежимПодбораСУчетомАссортимента", Истина);
		ПараметрыФормы.Вставить("УсловиеАссортимента", "РазрешеныПродажи");
	КонецЕсли;
	
	Если СкидкиНаценкиВызовСервера.ПолучитьФункциональнуюОпциюИспользованияЗапретаРозничнойПродажиАлкоголя() Тогда
		ПараметрыФормы.Вставить("РежимПодбораСУчетомЗапрещенныхКПродаже", Истина);
		ПараметрыФормы.Вставить("ПродажиОптовые", Ложь);
	КонецЕсли;
	
	
	Если ТипОборудованияКассыККМ = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ") Тогда
		ПараметрыФормы.Вставить("НеРазрешатьРазличныеДоговорыПлатежногоАгента", Истина);
		Если Объект.Товары.Количество() > 0 Тогда
			ПараметрыФормы.Вставить("ДоговорПлатежногоАгента", Объект.ДоговорПлатежногоАгента);
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	РазвернутьСвернутьТЧНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрНакоплений(Команда)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаПросмотраНакоплений.Открытие");
        
	ПараметрыОткрытия = Новый Структура;
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("Ссылка", Объект.Ссылка);
	РеквизитыДокумента.Вставить("Дата",  Объект.Дата);
	РеквизитыДокумента.Вставить("Проведен", Объект.Проведен);
	РеквизитыДокумента.Вставить("ВидОперации", Объект.ВидОперации);
	РеквизитыДокумента.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	РеквизитыДокумента.Вставить("СтатусЧекаККМ", ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка"));
	РеквизитыДокумента.Вставить("ОтчетОРозничныхПродажах", ПредопределенноеЗначение("Документ.ОтчетОРозничныхПродажах.ПустаяСсылка"));
	
	ПараметрыОткрытия.Вставить("РеквизитыДокумента", РеквизитыДокумента);
	ПараметрыОткрытия.Вставить("ВыборИнформационнойКартыТолькоПоКоду", Ложь);
	ПараметрыОткрытия.Вставить("ВводКартДоступен", Ложь);
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаПросмотраНакоплений", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьБонусами(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ВозможнаОплата = ВозможнаОплатаБонусами(ДополнительныеПараметры);
	Если ВозможнаОплата Тогда
		Если Объект.Проведен Тогда
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОплатаБонусамиВопросОбОтменеПроведения", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'Оплата бонусами возможна только в не проведенном документе, отменить проведение?'");
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ОткрытьФормуОплатыБонусами(ДополнительныеПараметры);
		КонецЕсли;
		
	Иначе
		Если ДополнительныеПараметры.Свойство("ТекстПредупреждения") Тогда
			ПоказатьПредупреждение(,ДополнительныеПараметры.ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОРозничныхПродажах(Команда)
	
	ПоказатьЗначение(, Объект.ОтчетОРозничныхПродажах);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказ(Команда)
	
	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаОбъекта",
			Новый Структура("Ключ", Объект.ЗаказПокупателя));
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказу(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Список ""Товары"" будет перезаполнен. Продолжить?'");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросЗаполнениеПоЗаказу", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗавершитьЗаполнениеПоЗаказу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиВОтчетеОРозничныхПродажах(Команда)
	
	Если ЗначениеЗаполнено(Объект.ОтчетОРозничныхПродажах) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Объект.ОтчетОРозничныхПродажах);
		
		ТекущиеДанныеТовары = Элементы.Товары.ТекущиеДанные;
		Если ТекущиеДанныеТовары = Неопределено Тогда
			Если Объект.Товары.Количество() > 0  Тогда
				ТекущиеДанныеТовары = Объект.Товары[0];
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			ПараметрыФормы.Вставить("ТекущийЭлемент", "Товары");
			
			Если НЕ ТекущиеДанныеТовары = Неопределено Тогда
				ПараметрыФормы.Вставить("ТекущийРеквизитОбъекта", "Товары");
				ПараметрыТекущейСтроки = Новый Структура;
				ПараметрыТекущейСтроки.Вставить("Склад"          , ТекущиеДанныеТовары.Склад);
				ПараметрыТекущейСтроки.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
				ПараметрыТекущейСтроки.Вставить("Номенклатура"   , ТекущиеДанныеТовары.Номенклатура);
				ПараметрыТекущейСтроки.Вставить("Характеристика" , ТекущиеДанныеТовары.Характеристика);
				ПараметрыТекущейСтроки.Вставить("СтавкаНДС"      , ТекущиеДанныеТовары.СтавкаНДС);
				ПараметрыТекущейСтроки.Вставить("Продавец"       , ТекущиеДанныеТовары.Продавец);
				ПараметрыТекущейСтроки.Вставить("Упаковка"       , ТекущиеДанныеТовары.Упаковка);
				ПараметрыТекущейСтроки.Вставить("Цена"           , ТекущиеДанныеТовары.Цена);
				ПараметрыТекущейСтроки.Вставить("КодСтроки"      , ТекущиеДанныеТовары.КодСтроки);
				ПараметрыТекущейСтроки.Вставить("ЗаказПокупателя", ТекущиеДанныеТовары.ЗаказПокупателя);
				ПараметрыТекущейСтроки.Вставить("Резервировать"  , ТекущиеДанныеТовары.Резервировать);
				
				ПараметрыФормы.Вставить("ТекущаяСтрока", ПараметрыТекущейСтроки);
				
			КонецЕсли;
			
		Иначе
			ПараметрыФормы.Вставить("ТекущийЭлемент", "ВозвращенныеТовары");
			Если НЕ ТекущиеДанныеТовары = Неопределено Тогда
				ПараметрыФормы.Вставить("ТекущийРеквизитОбъекта", "ВозвращенныеТовары");
				ПараметрыТекущейСтроки = Новый Структура;
				ПараметрыТекущейСтроки.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
				ПараметрыТекущейСтроки.Вставить("Склад"          , ТекущиеДанныеТовары.Склад);
				ПараметрыТекущейСтроки.Вставить("Номенклатура"   , ТекущиеДанныеТовары.Номенклатура);
				ПараметрыТекущейСтроки.Вставить("Характеристика" , ТекущиеДанныеТовары.Характеристика);
				ПараметрыТекущейСтроки.Вставить("Продавец"       , ТекущиеДанныеТовары.Продавец);
				ПараметрыТекущейСтроки.Вставить("СтавкаНДС"      , ТекущиеДанныеТовары.СтавкаНДС);
				ПараметрыТекущейСтроки.Вставить("Упаковка"       , ТекущиеДанныеТовары.Упаковка);
				ПараметрыТекущейСтроки.Вставить("Цена"           , ТекущиеДанныеТовары.Цена);
				
				ПараметрыТекущейСтроки.Вставить("АналитикаХозяйственнойОперации", Объект.АналитикаХозяйственнойОперации);
				
				ПараметрыФормы.Вставить("ТекущаяСтрока", ПараметрыТекущейСтроки);
				
			КонецЕсли;
		КонецЕсли;
		
		ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаEmail(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытиеФормыВводаEmail", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Email", Объект.АдресЭП);
	ПараметрыФормы.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Введите адрес электронной почты (Email)'"));
	ПараметрыФормы.Вставить("ОтказКлиентаОтСохраненияEmail", ОтказКлиентаОтСохраненияТелефонаEmail);
	
	ПодключаемоеОборудованиеРТКлиент.ОткрытьФормуВводаEmailОтправкиЧерезОФД(ОбработчикОповещения, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаSMS(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытиеФормыВводаТелефона", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		Телефон = Число(Объект.Телефон);
	Иначе
		Телефон = 0;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок" , НСтр("ru = 'Введите номер телефона'"));
	ПараметрыФормы.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	ПараметрыФормы.Вставить("ЧислоВвода", Телефон);
	ПараметрыФормы.Вставить("ОтказКлиентаОтСохраненияТелефона", ОтказКлиентаОтСохраненияТелефонаEmail);
	
	ПодключаемоеОборудованиеРТКлиент.ОткрытьФормуВводаТелефонаДляОтправкиЧерезОФД(ОбработчикОповещения, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачетАванса(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
		
	Иначе
		
		ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеЗачетАванса");
		
		Отказ = Ложь;
		ПроверитьСкидки(Отказ, ДополнительныеПараметры);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	
		Если ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОповещениеЗачетАванса(Неопределено, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ОплатитьВРассрочку(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
		
	Иначе
		
		ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеОплатыСРассрочку");
		
		Отказ = Ложь;
		ПроверитьСкидки(Отказ, ДополнительныеПараметры);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	
		Если ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОповещениеОплатыСРассрочку(Неопределено, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументЧекККМ(Команда)
	
	ЧекККМСсылка = Объект.Ссылка;
	
	Если ЗначениеЗаполнено(ЧекККМСсылка) Тогда
		
		СтруктураОснования = Новый Структура; 
		СтруктураОснования.Вставить("ДанныеЗаполнения", ЧекККМСсылка);
		СтруктураОснования.Вставить("СоздатьЧекПродажи");
		
		ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаДокумента", Новый Структура("Основание", СтруктураОснования));
		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	ПолучитьСтрокиИзБуфераОбмена();
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	РозничныеПродажиКлиент.УстановитьЗначениеСтатусаКодаМаркировки(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура ПроверитьИспользованиеПодключаемогоОборудования(ИспользоватьПодключаемоеОборудование)

	ТипыПодключенногоОборудования = МенеджерОборудованияСерверПовтИсп.ТипыПодключенногоОборудования();
	ИспользоватьПодключаемоеОборудование = ОбщегоНазначенияРТ.ИспользоватьПодключаемоеОборудование(ТипыПодключенногоОборудования);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидНалога()

		Объект.ВидНалога = ПодключаемоеОборудованиеРТ.ВидНалогаПоОрганизацииИСкладу(Объект.Дата, Объект.Организация, 
																					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "СкладПродажи"));

КонецПроцедуры

&НаСервере
Функция ЭтоВозвратДеньВДень()
	
	Если ЗначениеЗаполнено(Объект.ЧекККМПродажа) Тогда
		
		Возврат НЕ ЗначениеЗаполнено(Объект.ЧекККМПродажа.ОтчетОРозничныхПродажах);
	Иначе
		
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ДокументРасчетаПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДокументРасчета)  Тогда
		СуммаДокументаРасчета = Объект.ДокументРасчета.СуммаДокумента;
		Объект.Контрагент = Объект.ДокументРасчета.Контрагент;
	Иначе
		СуммаДокументаРасчета = 0;
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВозможностьВводаПоШК()
	
	Результат = Истина;
	
	Если ТолькоПросмотр Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Если НЕ Результат Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Форма заблокирована. Ввод невозможен.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	ЭтотОбъект.ПоложениеКоманднойПанели             = ?(ВидимостьЭлементов, ПоложениеКоманднойПанелиФормы.Авто, ПоложениеКоманднойПанелиФормы.Нет);
	Элементы.ГруппаОснование.Видимость            = ВидимостьЭлементов;
	Элементы.Шапка.Видимость                      = ВидимостьЭлементов;
	Элементы.ИтогоОплата.Видимость                = ВидимостьЭлементов;
	
	Элементы.РазвернутьСвернутьТЧ.Картинка = ?(ВидимостьЭлементов, БиблиотекаКартинок.РазвернутьТабличнуюЧасть, БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов()
	
	Если НЕ ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры И НЕ Справочники.Номенклатура.ИспользуютсяПодарочныеСертификаты() Тогда
		Элементы.ТоварыСтатусыСерийИПодарочныхСертификатов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(ТекущееПоле, ИмяТЧТовары, ИмяТЧСерии)
	
	ВводСерийРазрешен = Истина;
	ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий, ВводСерийРазрешен, ИмяТЧТовары);
	Если НЕ ВводСерийРазрешен Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеИдентификатор = Элементы[ИмяТЧТовары].ТекущиеДанные.ПолучитьИдентификатор();
	Если ИмяТЧТовары = "Товары" Тогда
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	Иначе
		ПараметрыУказанияСерийПодарков = Новый Структура(ПараметрыУказанияСерий);
		ПараметрыУказанияСерийПодарков.Вставить("ИмяТЧТовары", "Подарки");
		ПараметрыУказанияСерийПодарков.Вставить("ИмяТЧСерии", "СерииПодарков");
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ПараметрыУказанияСерийПодарков);
	КонецЕсли;
	ПараметрыФормыУказанияСерий.Вставить("ТекущееПоле", ТекущееПоле);
	ПараметрыФормыУказанияСерий.Вставить("КоличествоЕдиницДоПересчета");
	ПараметрыФормыУказанияСерий.Вставить("ИмяТЧТовары", ИмяТЧТовары);
	ПараметрыФормыУказанияСерий.Вставить("ИмяТЧСерии", ИмяТЧСерии);
	
	ОбработчикУказанияСерий = Новый ОписаниеОповещения("ОбработатьУказаниеСерий", ЭтотОбъект, ПараметрыФормыУказанияСерий);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, ПараметрыФормыУказанияСерий, ЭтотОбъект,,,, ОбработчикУказанияСерий, РежимБлокировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПодарочныеСертификаты()
	
	ПересчетКоличества = Ложь;
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиСерийныеНомераНоменклатурыВТЧ(ЭтотОбъект,
		Объект.СерийныеНомера,
		Элементы.Товары.ТекущиеДанные);
		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ВидОперацииПриИзмененииСервер()

	ПриИзмененииЧекККМПродажаСервер();
	ОбновитьСтатусыУказанияСерий();
	
	Объект.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.ПустаяСсылка();
	ЭтоВозврат = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	
	// ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")
	Если ЭтоВозврат Тогда
		// ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтПокупателя").
		Объект.АналитикаХозяйственнойОперации = ЗначениеНастроекПовтИсп.ПолучитьАналитикуХозяйственнойОперацииПоУмолчанию(Объект.АналитикаХозяйственнойОперации, Перечисления.ХозяйственныеОперации.ВозвратОтПокупателя);
	Иначе
		Объект.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;//ПредопределенноеЗначение("Справочник.АналитикаХозяйственныхОпераций.РеализацияТоваров");
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЗаполнитьПоЗаказу();
	УстановитьВидимостьИДостпуностьРасчетыСКлиентами();;
	
	Элементы.ЧекККМПродажа.Видимость = ЭтоВозврат;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДисконтнаяКартаСервер()

	Если НЕ Объект.ВладелецДисконтнойКарты = Объект.ДисконтнаяКарта.ВладелецКарты Тогда
	
		Объект.ВладелецДисконтнойКарты = Объект.ДисконтнаяКарта.ВладелецКарты
	
	КонецЕсли;
	
	Элементы.ПросмотрНакоплений.Доступность = ЗначениеЗаполнено(Объект.ДисконтнаяКарта);
	
	ПродажиСервер.ЗаполнитьКонтрагентаПоДисконтнойКарте(Объект, Объект.ДисконтнаяКарта);
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКассаККМСервер()

	НДСПересчитан = Ложь;
	
	Если НЕ Объект.Магазин = Объект.КассаККМ.Магазин Тогда
		
		Объект.Магазин = Объект.КассаККМ.Магазин;
		
		Если НЕ Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
			
			ЦенаВключаетНДС = ОбщегоНазначенияРТ.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(Объект.Магазин.ПравилоЦенообразования, "ЦенаВключаетНДС");
			
			Если НЕ Объект.ЦенаВключаетНДС = ЦенаВключаетНДС Тогда
			
				Объект.ЦенаВключаетНДС = ЦенаВключаетНДС;
			
				СтруктураДействий = Новый Структура;
				
				СтруктураПараметровСтавкиНДС = Новый Структура;
				СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
				СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
				СтруктураПараметровСтавкиНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
				
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
				
				СтруктураПараметровПересчетаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
				СтруктураПараметровПересчетаНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
				
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПараметровПересчетаНДС);
				
				СтруктураДействий.Вставить("ПересчитатьСумму");
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
				
				СтруктураТЧ = Новый Структура;
				СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
				ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
				
				ОбновитьИтоговыеПоказателиСервер();
				
				НДСПересчитан = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Подарки);
		
		ПроверитьВозможностьРазныхНалоговыхРежимовСкладов();
		
	КонецЕсли;
	
	Если НЕ Объект.Организация = Объект.КассаККМ.Владелец Тогда
		
		Объект.Организация = Объект.КассаККМ.Владелец;
		
		Если НЕ НДСПересчитан Тогда
			СтруктураДействий = Новый Структура;
			
			СтруктураПараметровСтавкиНДС = Новый Структура;
			СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
			СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
			СтруктураПараметровСтавкиНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
			
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
			
			СтруктураПараметровПересчетаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
			СтруктураПараметровПересчетаНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПараметровПересчетаНДС);
			Если НЕ ПродажаПоЗаказу Тогда
				СтруктураДействий.Вставить("ПересчитатьСумму");
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			КонецЕсли;
			СтруктураТЧ = Новый Структура;
			СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
			ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
			
			ОбновитьИтоговыеПоказателиСервер();
			
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.КассаККМ, "РабочееМесто, ПодключаемоеОборудование.ТипОборудования");
	РабочееМесто = РеквизитыКассы.РабочееМесто;
	ТипОборудованияКассыККМ = РеквизитыКассы.ПодключаемоеОборудованиеТипОборудования;
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	
	ВозможностьЭлектронногоПлатежа = ПодключаемоеОборудованиеРТ.ВозможностьЭлектронногоПлатежа(Объект.КассаККМ.ПодключаемоеОборудование);
	Если ВозможностьЭлектронногоПлатежа Тогда
		ПередачаEmailЧерезПрограмму = Объект.КассаККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С;
		ПередачаSMSЧерезПрограмму  = Объект.КассаККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С;
	КонецЕсли;
	
	Элементы.КомандаEmail.Видимость = ВозможностьЭлектронногоПлатежа;
	Элементы.КомандаSMS.Видимость   = ВозможностьЭлектронногоПлатежа;
	Элементы.ГруппаДанныеSMSИEmail.Видимость   = ВозможностьЭлектронногоПлатежа;
	
	Если НЕ ВозможностьЭлектронногоПлатежа Тогда
		
		Объект.Телефон = "";
		Объект.АдресЭП = "";
	КонецЕсли;
	
	ЗаполнитьСистемуНалогооблажения(Объект.Дата, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТоварыКоличестваУпаковок(ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект, ПродажаПоЗаказу ИЛИ ДокументРасчетаЗаполнен);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели();
	Если ПродажаПоЗаказу 
		ИЛИ ДокументРасчетаЗаполнен Тогда
		ОбработкаТабличнойЧастиТоварыКлиентСервер.РаспределитьСуммуИзмененийСтрокиТоваровНаТабличнуюЧастьСкидки(
			Объект.СкидкиНаценки, 
			ТекущаяСтрока.КлючСвязи, 
			ТекущаяСтрока.СуммаАвтоматическойСкидки)
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЧекККМПродажаСервер()
	
	Если НЕ Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ЦенаВключаетНДС = ОбщегоНазначенияРТ.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(Объект.Магазин.ПравилоЦенообразования, "ЦенаВключаетНДС");
		Объект.ЦенаВключаетНДС = ЦенаВключаетНДС;
		Элементы.ОплатаЗаполнитьОплатыПоДокументуПродажи.Доступность = Ложь;
	Иначе
		Если ЗначениеЗаполнено(Объект.ЧекККМПродажа) Тогда
			Объект.ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЧекККМПродажа, "ЦенаВключаетНДС");
			Элементы.ОплатаЗаполнитьОплатыПоДокументуПродажи.Доступность = Истина;
		Иначе
			Элементы.ОплатаЗаполнитьОплатыПоДокументуПродажи.Доступность = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			Объект.ДисконтнаяКарта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЧекККМПродажа, "ДисконтнаяКарта");
			Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
				ПриИзмененииДисконтнаяКартаСервер();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьПравоИзменятьЦену()
	
	Возврат УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
	
КонецФункции

&НаСервере
Процедура УстановитьАвтоОтметкуТЧТовары()
	
	ЕстьВозможностьПустойТЧТовары = Документы.ЧекККМ.ВозможностьПустойТЧТовары(Объект);
	Элементы.Товары.АвтоОтметкаНезаполненного = НЕ ЕстьВозможностьПустойТЧТовары;
	Элементы.Товары.ОтметкаНезаполненного     = НЕ ЕстьВозможностьПустойТЧТовары;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// Серии

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусыУказанияСерий()

	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);

КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, Знач ПродажаПодарка = Ложь)
	
	СтруктураДействий = Новый Структура;
	Если ПараметрыФормыУказанияСерий.ИмяТЧТовары = "Товары" И НЕ ПродажаПодарка Тогда
		СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку");
	КонецЕсли;
	Если НЕ ПродажаПодарка Тогда
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект, ПродажаПоЗаказу ИЛИ ДокументРасчетаЗаполнен);
	КонецЕсли;
	
	Если ПараметрыФормыУказанияСерий.ИмяТЧТовары = "Товары" Тогда
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий, СтруктураДействий);
	Иначе
		ПараметрыУказанияСерийПодарков = Новый Структура(ПараметрыУказанияСерий);
		ПараметрыУказанияСерийПодарков.Вставить("ИмяТЧТовары", "Подарки");
		ПараметрыУказанияСерийПодарков.Вставить("ИмяТЧСерии", "СерииПодарков");
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерийПодарков, ПараметрыФормыУказанияСерий, СтруктураДействий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ПараметрыУказанияСерийВходящие = Неопределено)
	
	Если ПараметрыУказанияСерийВходящие = Неопределено Тогда
		Результат = ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	Иначе
		Результат = ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерийВходящие, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Запрашивает у пользователя скидку и применяет ее к табличной части Товары.
//
&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки)
	
	Если СуммаСкидкиНаценки <> 0 Тогда
		СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, Истина, Истина);
	Иначе
		СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Очищает ручные скидки в табличной части Товары.
//
&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиСкидкиПодаркиВТоварыСервер()
	
	ЕстьОшибки = Ложь;
	СкидкиНаценкиСерверПереопределяемый.СообщитьОбОстающихсяПодарках(Объект, ЕстьОшибки);
	Если НЕ ЕстьОшибки Тогда
		СкидкиНаценкиСерверПереопределяемый.ПеренестиСкидкиПодаркиВТовары(Объект, Объект.ЦенаВключаетНДС,,,, Истина);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
		
		СтруктураМарки = Новый Структура;
		СтруктураМарки.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары, СтруктураМарки);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаКодаМаркировки(Объект.Товары, СтруктураМарки);
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
		ОбновитьИтоговыеПоказателиСервер();
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Подарки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСкидки(Отказ, ДополнительныеПараметры = Неопределено, ПроверятьРасчет = Истина)
	
	Если ИспользоватьАвтоматическиеСкидкиВПродажах
		И ((НЕ Объект.СкидкиРассчитаны) ИЛИ (НЕ ПроверятьРасчет))
		И НЕ ПродажаПоЗаказу
		И НЕ ДокументРасчетаЗаполнен
		И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")
		И Объект.Товары.Количество() > 0 Тогда
		
		РассчитатьСкидкиНаценкиКлиент(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСообщенияПослеОформленияЧека()

	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
	СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Истина);
	СтруктураПараметры.Вставить("ПеренестиСкидкиПодаркиВТовары");
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	КонтролироватьОстаткиТоваров);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
	Если ВывестиСообщения Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресПримененныхСкидокВоВременномХранилище);
		ОткрытьФорму("ОбщаяФорма.ФормаВыводаСообщений", ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент(ДополнительныеПараметры = Неопределено)
	
	Если Объект.Товары.Количество() = 0 Тогда
		ОтменитьСкидки();
		ОтменитьОплатуБонусами();
		Возврат;
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	СтруктураПараметры.Вставить("ПорядковыйНомерПродажи",           ПорядковыйНомерПродажи);
	СтруктураПараметры.Вставить("ПеренестиСкидкиПодаркиВТовары");
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	КонтролироватьОстаткиТоваров);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("БудетОплатаБонусами") Тогда
			СтруктураПараметры.Вставить("БудетОплатаБонусами", ДополнительныеПараметры.БудетОплатаБонусами);
		КонецЕсли;
	КонецЕсли;
	
	Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
	Если ВывестиСообщения Тогда
		Если ДополнительныеПараметры = Неопределено Тогда
			ДополнительныеПараметры = Новый Структура;
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеРасчетСкидокКлиент", ЭтотОбъект, ДополнительныеПараметры);
		Иначе
			ОбработчикОповещения = Новый ОписаниеОповещения(ДополнительныеПараметры.ИмяОбработкиОповещения, ЭтотОбъект, ДополнительныеПараметры);
			ДополнительныеПараметры.Вставить("ВыведеныСообщения", Истина);
		КонецЕсли;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресПримененныхСкидокВоВременномХранилище);
		ОткрытьФорму("ОбщаяФорма.ФормаВыводаСообщений", ПараметрыФормы, ЭтотОбъект, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОповещениеРасчетСкидокКлиент();
	КонецЕсли;
	
КонецПроцедуры
	
// Процедура - обработчик команды "РассчитатьСкидкиНаценки".
//
&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	ВывестиСообщения = Ложь;
	
	Если ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		УдалитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
	КонецЕсли;
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
	Если ПримененныеСкидки.Свойство("ТаблицаПодарковНаВыбор") Тогда
		АдресПодарковНаВыбор = ПоместитьВоВременноеХранилище(ПримененныеСкидки.ТаблицаПодарковНаВыбор, УникальныйИдентификатор);
		ВыдатьПодаркиНаВыбор = Истина;
	Иначе
		АдресПодарковНаВыбор = "";
		ВыдатьПодаркиНаВыбор = Ложь;
	КонецЕсли;
	
	Если ПримененныеСкидки.ТаблицаСообщений.Количество() > 0 Тогда
		ВывестиСообщения = Истина;
	КонецЕсли;
	
	Модифицированность = НЕ СтруктураПараметры.ТолькоСообщенияПослеОформления;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийЧекККМ.Возврат
		И НЕ СтруктураПараметры.ТолькоСообщенияПослеОформления Тогда
		СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(Объект, "Товары", "СкидкиНаценки");
	КонецЕсли;
	
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект);	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
	
	СтруктураМарки = Новый Структура;
	СтруктураМарки.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары, СтруктураМарки);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаКодаМаркировки(Объект.Товары, СтруктураМарки);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	ПараметрыУказанияСерийПодарков = Новый Структура(ПараметрыУказанияСерий);
	ПараметрыУказанияСерийПодарков.Вставить("ИмяТЧТовары", "Подарки");
	ПараметрыУказанияСерийПодарков.Вставить("ИмяТЧСерии", "СерииПодарков");
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерийПодарков);
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
	
		Объект.СкидкиРассчитаны = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Проведение

&НаСервере
Процедура ПровестиИзФормыСервер(Отказ, ЗапускатьОбработкуПослеЗаписи = Ложь, Объект_Ссылка = Неопределено, Текст)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	
	СтрокаОшибки = "";
	Если ЗаписываемыйОбъект.ПроверитьЗаполнение() Тогда
		Попытка
			Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
				ЗаписываемыйОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			Иначе
				ЗаписываемыйОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			КонецЕсли;
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			Отказ = Истина;
		КонецПопытки;
		
		Если ЗаписываемыйОбъект.ДополнительныеСвойства.Свойство("Отказ") Тогда
			Если ЗаписываемыйОбъект.ДополнительныеСвойства.Отказ Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаписываемыйОбъект.ДополнительныеСвойства.Свойство("ТаблицыДляДвижений")
			И ЗаписываемыйОбъект.ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаПопыткиПродажПревышающихОстаток") Тогда
			
			ПродажиСервер.ОтразитьПопыткиПродаж(ЗаписываемыйОбъект.ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПопыткиПродажПревышающихОстаток, ЗаписываемыйОбъект.Дата);
			
		КонецЕсли;
		
		Объект_Ссылка = ЗаписываемыйОбъект.Ссылка;
		
		Если Отказ Тогда
		
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось провести ""%1"". '") + СтрокаОшибки,
					Строка(ЗаписываемыйОбъект)
					);
		ИначеЕсли ЗапускатьОбработкуПослеЗаписи Тогда
			
			ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
			
			ПослеЗаписиНаСервере(Объект, РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект, ПересчитыватьТолькоСуммуСкидки)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	Если ПересчитыватьТолькоСуммуСкидки Тогда
		СтруктураПересчетаСкидок = Новый Структура;
		СтруктураПересчетаСкидок.Вставить("Очищать", Ложь);
		СтруктураПересчетаСкидок.Вставить("ПересчитыватьСуммуСкидки", Истина);
		
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , СтруктураПересчетаСкидок);
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", СтруктураПересчетаСкидок);
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОплатыПоДокументуПродажиСервер()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
	КонецЕсли;
	
	ТаблицаОплатыПродажи = Объект.ЧекККМПродажа.Оплата.Выгрузить();
	ТаблицаОплатыПродажи.ЗаполнитьЗначения(Ложь, "ДанныеПереданыВБанк");
	МассивСтрокБонусов = ТаблицаОплатыПродажи.НайтиСтроки(Новый Структура("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой));
	Для Каждого СтрокаБонуса Из МассивСтрокБонусов Цикл
		ТаблицаОплатыПродажи.Удалить(СтрокаБонуса);
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ДанныеПереданыВБанк", Истина);
	
	СтрокиПереданныеВБанк = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	
	СтруктураПоиска = Новый Структура("ВидОплаты, ЭквайринговыйТерминал, Сумма, ПроцентКомиссии, СуммаКомиссии, СсылочныйНомер, НомерЧекаЭТ, НомерПлатежнойКарты");
	
	Индекс = 0 ;
	Для каждого СтрокаПереданнаяВБанк Из СтрокиПереданныеВБанк Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПереданнаяВБанк);
		
		СтрокиТаблицыОплатыПродажи = ТаблицаОплатыПродажи.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицыОплатыПродажи.Количество() > 0 Тогда
			Для каждого СтрокаТаблицыОплатыПродажи Из СтрокиТаблицыОплатыПродажи Цикл
				СтрокаТаблицыОплатыПродажи.ДанныеПереданыВБанк = Истина;
			КонецЦикла;
		Иначе
			
			СтрокаТаблицыОплатыПродажи = ТаблицаОплатыПродажи.Вставить(Индекс);
			Индекс = Индекс + 1;
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыОплатыПродажи, СтруктураПоиска);
			СтрокаТаблицыОплатыПродажи.ДанныеПереданыВБанк = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.Оплата.Загрузить(ТаблицаОплатыПродажи);
	
	Для каждого ТекущаяСтрока Из Объект.Оплата Цикл
		ТекущаяСтрока.ПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииПоТерминалу(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты, ЭтоВозврат, ЭтоВозвратДеньВДень);
		ТекущаяСтрока.СуммаКомиссии   = ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентКомиссии / 100;
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипыОплатВТЧСервер(Объект);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам(ТолькоЦенообразование)

	Элементы.ТоварыСуммаРучнойСкидки.ТолькоПросмотр   = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Элементы.ТоварыПроцентРучнойСкидки.ТолькоПросмотр = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Элементы.ТоварыНазначитьРучнуюСкидку.Доступность  = НЕ Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Элементы.ТоварыОтменитьРучныеСкидки.Доступность   = НЕ Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Элементы.ТоварыЦена.ТолькоПросмотр                = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Элементы.ТоварыСумма.ТолькоПросмотр               = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Элементы.ПодаркиЦена.ТолькоПросмотр               = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	Элементы.ПодаркиСумма.ТолькоПросмотр              = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСуммаРучнойСкидки.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыПроцентРучнойСкидки.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);

	УправлениеПользователями.УстановитьДоступностьДляРеквизитовТабличнойЧасти(Элементы.ТоварыНазначитьРучнуюСкидку.Доступность, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);
	
	УправлениеПользователями.УстановитьДоступностьДляРеквизитовТабличнойЧасти(Элементы.ТоварыОтменитьРучныеСкидки.Доступность, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыЦена.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСумма.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ПодаркиЦена.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ПодаркиСумма.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
	
	Если НЕ ТолькоЦенообразование Тогда
		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Продавец.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьПродавца);

		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыПродавец.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьПродавца);

		УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																					 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтоговыеПоказатели()

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Оплата, Истина, СуммаОплачено);
	
	СуммаРучнойСкидки = Объект.Товары.Итог("СуммаРучнойСкидки");
	СуммаАвтоматическойСкидки = Объект.Товары.Итог("СуммаАвтоматическойСкидки");
	СуммаСкидкиОплатыБонусом = Объект.Товары.Итог("СуммаСкидкиОплатыБонусом");
	СкидкиНаценкиИтогСумма = СуммаАвтоматическойСкидки + СуммаРучнойСкидки + СуммаСкидкиОплатыБонусом;
	
	СуммаБезСкидки = СуммаВсего + СкидкиНаценкиИтогСумма;
	СуммаКОплате = СуммаВсего - СуммаОплачено;
	
	РассчитатьСдачу();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоговыеПоказателиСервер()

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Оплата, Истина, СуммаОплачено);
	
	СуммаРучнойСкидки = Объект.Товары.Итог("СуммаРучнойСкидки");
	СуммаАвтоматическойСкидки = Объект.Товары.Итог("СуммаАвтоматическойСкидки");
	СуммаСкидкиОплатыБонусом = Объект.Товары.Итог("СуммаСкидкиОплатыБонусом");
	СкидкиНаценкиИтогСумма = СуммаАвтоматическойСкидки + СуммаРучнойСкидки + СуммаСкидкиОплатыБонусом;
	
	СуммаБезСкидки = СуммаВсего + СкидкиНаценкиИтогСумма;
	СуммаКОплате = СуммаВсего - СуммаОплачено;
	
	РассчитатьСдачуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПлатежнойКартойЧерезЭквайринговыйТерминал(ВыбраннаяСтрока, СуммаОперации, ПределСуммы)
	
	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	ОписаниеОшибки            = "";
	
	НомерКарты          = "";
	НомерСсылкиОперации = "";
	НомерЧекаЭТ         = "";
	СтрокаСлипЧека      = "";
	ВидКарты            = "";
	НомерЧека           = Объект.Номер;
	
	Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	ИндексСтроки = Объект.Оплата.Индекс(ВыбраннаяСтрока);
	
	Если Объект.Проведен Тогда
		РезультатПроведения = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный));
	Иначе
		РезультатПроведения = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Оперативный));
	КонецЕсли;
	
	Если НЕ РезультатПроведения Тогда
		Возврат;
	КонецЕсли;
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ.Открытие");
             
	ВыбраннаяСтрока = Объект.Оплата[ИндексСтроки];
		
	СтруктураЭквайринговыйТерминал = СтруктураДанныхЭТ(ВыбраннаяСтрока.ЭквайринговыйТерминал);
	ИдентификаторУстройстваЭТ = СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(Объект.КассаККМ);
	ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования = Истина;
		СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования = Истина;
	КонецЕсли;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	ИспользоватьБезПодключенияОборудованияЭТ = СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования;
	
	// Предварительно авторизуем операцию.
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("Сумма"      , СуммаОперации);
	ПараметрыФормы.Вставить("ПределСуммы", ПределСуммы);
	ПараметрыФормы.Вставить("ЗапретРедактированияСуммы", Истина);
	
	Если ИспользоватьБезПодключенияОборудованияЭТ Тогда
		ПараметрыФормы.Вставить("ПоказыватьНомерКарты", Истина);   
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ПараметрДействия = Новый Структура;
	ПараметрДействия.Вставить("ИспользоватьКассуККМБезПодключенияОборудования", ИспользоватьКассуККМБезПодключенияОборудования);
	ПараметрДействия.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
	ПараметрДействия.Вставить("ИспользоватьБезПодключенияОборудованияЭТ", ИспользоватьБезПодключенияОборудованияЭТ);
	ПараметрДействия.Вставить("ИдентификаторУстройстваЭТ", ИдентификаторУстройстваЭТ);
	
	ПараметрДействия.Вставить("ТекстОписаниеОшибки", "");
	ПараметрДействия.Вставить("СтрокаСлипЧека", СтрокаСлипЧека);
	ПараметрДействия.Вставить("ВыбраннаяСтрокаИдентификатор", ВыбраннаяСтрока.ПолучитьИдентификатор());
	ПараметрДействия.Вставить("СуммаОперации", СуммаОперации);
	ПараметрДействия.Вставить("НомерКарты", НомерКарты);
	ПараметрДействия.Вставить("НомерСсылкиОперации", НомерСсылкиОперации);
	ПараметрДействия.Вставить("НомерЧекаЭТ", НомерЧекаЭТ);
	ПараметрДействия.Вставить("НомерЧека", НомерЧека);
	ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуАвторизацииЭТ", ЭтотОбъект, ДополнительныеПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюКлиент(Отказ, РежимЗаписи)
	
	// Если документ проводится, рассчитаем скидки.
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ПроверитьСкидки(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Устанавливает доступность элементов по виду операции.
//
// Параметры:
//  ТекущаяСтрока - Строка табличной части "Оплата".
//
Процедура ПересчитатьСуммуКомиссии(ТекущаяСтрока)
	
	ТекущаяСтрока.СуммаКомиссии = ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентКомиссии / 100;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПогашениеВХранилище(АдресВременногоХранилища)
	
	Таблица_ПогашениеПодарочныхСертификатов = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.ПогашениеПодарочныхСертификатов.Загрузить(Таблица_ПогашениеПодарочныхСертификатов);
	
	
	Если Таблица_ПогашениеПодарочныхСертификатов.Количество() = 0 Тогда
	
		СтрокиКУдалению = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом));
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		
			Объект.Оплата.Удалить(Объект.Оплата.Индекс(СтрокаКУдалению));
		
		КонецЦикла;
	Иначе
		ИтогоПоНоминалу = Таблица_ПогашениеПодарочныхСертификатов.Итог("Номинал");
		СтрокиТаблицы = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом));
		Если СтрокиТаблицы.Количество() = 0  Тогда
			СтрокаТаблицы = Объект.Оплата.Добавить();
			СтрокаТаблицы.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом;
		Иначе
			СтрокаТаблицы = СтрокиТаблицы[0];
		КонецЕсли;
		
		СуммаДокумента = ?(Объект.ЦенаВключаетНДС, Объект.Товары.Итог("Сумма"), Объект.Товары.Итог("Сумма") + Объект.Товары.Итог("СуммаНДС"));
		
		СтрокаТаблицы.Сумма = Мин(СуммаДокумента, ИтогоПоНоминалу);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СтруктураДанныхЭТ(Терминал)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование,
	|	ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования,
	|	ЭквайринговыеТерминалы.Ссылка
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Терминал);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СтруктураВозврата = Новый Структура("ПодключаемоеОборудование, ИспользоватьБезПодключенияОборудования");
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
	Иначе
		СтруктураВозврата = Неопределено; 
		СтруктураВозврата.ИспользоватьБезПодключенияОборудования = Истина;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
// Функция считает сумму, оплаченную безналичными.
//
// Возвращаемое значение:
//  Число - сумма, оплаченная безналичными.
//
Функция СуммаБезналичнойОплаты() 

	СуммаБезналичнойОплаты = 0;
	Для Каждого ТекОплата Из Объект.Оплата Цикл
		Если ЗначениеЗаполнено(ТекОплата.ВидОплаты) И ТекОплата.ВидОплаты.ТипОплаты <> Перечисления.ТипыОплатЧекаККМ.Наличные 
		И НЕ ТекОплата.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом Тогда
			СуммаБезналичнойОплаты = СуммаБезналичнойОплаты + ТекОплата.Сумма;
		КонецЕсли;
	КонецЦикла;

	Возврат СуммаБезналичнойОплаты;

КонецФункции

&НаСервере
// Функция считает сумму, оплаченную подарочными сертификатами.
//
// Возвращаемое значение:
//  Число - сумма, оплаченная подарочными сертификатами.
//
Функция СуммаОплатыПодарочнымиСертификатами() 

	СуммаОплаты = 0;
	Для Каждого ТекОплата Из Объект.Оплата Цикл
		Если ТекОплата.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом Тогда
			СуммаОплаты = СуммаОплаты + ТекОплата.Сумма;
		КонецЕсли;
	КонецЦикла;

	Возврат СуммаОплаты;

КонецФункции

&НаСервере
Функция ТипОплатыПоВиду(ВидОплаты)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОплаты, "ТипОплаты");

КонецФункции

&НаСервере
Функция ПоместитьПогашениеВХранилище()

	Возврат ОбщегоНазначенияРТ.ПоместитьВоВременноеХранилищеТабличнуюЧастьОбъекта(Объект, "ПогашениеПодарочныхСертификатов", УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПоместитьСкидкиВХранилище()

	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("СкидкиНаценки", Объект.СкидкиНаценки.Выгрузить());
	СтруктураТаблиц.Вставить("Подарки", Объект.Подарки.Выгрузить());
	СтруктураТаблиц.Вставить("БонусныеБаллыКНачислению", Объект.БонусныеБаллыКНачислению.Выгрузить());
	
	Адрес = ПоместитьВоВременноеХранилище(СтруктураТаблиц, УникальныйИдентификатор);
	
	Возврат Адрес;

КонецФункции

&НаКлиенте
Процедура ПробитьЧекВыполнитьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Объект.НомерСменыККМ = РезультатВыполнения.ВыходныеПараметры[0];
		Если ЗначениеЗаполнено(РезультатВыполнения.ВыходныеПараметры[1]) Тогда
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		Иначе
			Объект.НомерЧекаККМ = НомерДокументаКассыККМ[Объект.КассаККМ];
		КонецЕсли;
		
		Объект.СтатусЧекаККМ = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый");
		Объект.Дата          = ОбщегоНазначенияКлиент.ДатаСеанса();
		Если Не ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = ПорядковыйНомерПродажи;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
		РезультатЗаписи = Записать(ПараметрыЗаписи);
		
		Если РезультатЗаписи Тогда
			ПогаситьОднократныеСкидки();
			РезультатОбработкиНакоплений = СкидкиНаценкиВызовСервера.РезультатОбработкиНакопленийВДисконтномСервере(Объект.Ссылка);
			Если РезультатОбработкиНакоплений.Свойство("СообщениеПользователю") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатОбработкиНакоплений.СообщениеПользователю);
			КонецЕсли;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатЗаписи);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
		                            |Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	
	НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
	
	Если НомерСмены <> 0 Тогда
		ШапкаЧека.НомерСмены = НомерСмены;
	КонецЕсли;
	
	НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
	
	Если НомерЧека <> 0 Тогда
		ШапкаЧека.НомерЧека = НомерЧека;
	КонецЕсли;
	
	Если ПараметрыВыполнения.Свойство("ЗаводскойНомерФН") И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
		ШапкаЧека.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НомерСмены", ШапкаЧека.НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека", ШапкаЧека.НомерЧека);
		ПараметрыОперации.Вставить("СерийныйНомер", ШапкаЧека.СерийныйНомер);
		
		ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные"),
			ПараметрыОперации,
			Новый ОписаниеОповещения("ПослеПередачиЧекаЕГАИС", ЭтотОбъект, ПараметрыВыполнения));
		
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	Если НЕ Объект.ОперацияСДенежнымиСредствами Тогда
		ДеактивироватьСкидкиПоИдентификаторуЧека();
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		
		НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
		Если НомерСмены = 0 Тогда
			НомерСмены = 1;
		КонецЕсли;
		
		НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
		Если НомерЧека = 0 Тогда
			НомерЧека = 1;
		КонецЕсли;
		
		НомерЧека = НомерЧека + 1000000;
		
		Объект.АдресЧекаЕГАИС = "";
		Объект.ПодписьЧекаЕГАИС = "";
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НомерСмены"   , НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека"    , НомерЧека);
		ПараметрыОперации.Вставить("СерийныйНомер", Неопределено);
		
		Если ПараметрыВыполнения.Свойство("ЗаводскойНомерФН") И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
			ПараметрыОперации.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
		КонецЕсли;
		
		ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию"),
			ПараметрыОперации,
			Неопределено);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекВыполнить(ОповещениеПриЗавершении)
	Перем Отказ;
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Ложь);
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьСкидки(Отказ);
	
	Если Отказ Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Ложь);
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.Проведен Тогда
		ТекстСообщения = НСтр("ru = 'Чек не проведен!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыКассыККМ         = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(Объект.КассаККМ);
	ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ИспользоватьКассуККМБезПодключенияОборудования Тогда
		
		Объект.НомерСменыККМ = 0;
		
		Если НомерДокументаКассыККМ[Объект.КассаККМ] <> Неопределено Тогда
			Объект.НомерЧекаККМ  = НомерДокументаКассыККМ[Объект.КассаККМ];
		Иначе
			Объект.НомерЧекаККМ  = ПорядковыйНомерПродажи;
		КонецЕсли;
		
		Объект.СтатусЧекаККМ = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый");
		Объект.Дата          = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Модифицированность = Истина;
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		Если РезультатЗаписи = Истина Тогда
			ПогаситьОднократныеСкидки();
			РезультатОбработкиНакоплений = СкидкиНаценкиВызовСервера.РезультатОбработкиНакопленийВДисконтномСервере(Объект.Ссылка);
			Если РезультатОбработкиНакоплений.Свойство("СообщениеПользователю") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатОбработкиНакоплений.СообщениеПользователю);
			КонецЕсли;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатЗаписи = Истина);
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторУстройстваФР <> Неопределено Тогда
		
		ЭтотОбъект.Доступность = Ложь;

		// Готовим данные
		ЕстьАлкогольнаяПродукцияЕГАИС = Неопределено;
		ТранспортныйМодуль = Неопределено;
		ДанныеЕГАИСДостаточны = Истина;
		
		НомерЧека = НомерДокументаКассыККМ[Объект.КассаККМ] + 1;
		ОбщиеПараметры  = ПодготовитьДанныеДляПробитияЧека(ТранспортныйМодуль, ДанныеЕГАИСДостаточны, НомерЧека, ЕстьАлкогольнаяПродукцияЕГАИС);
		
		Контекст = Новый Структура();
		Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		Контекст.Вставить("ЕстьАлкогольнаяПродукцияЕГАИС", ЕстьАлкогольнаяПродукцияЕГАИС);
		
		Если НЕ ДанныеЕГАИСДостаточны Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Ложь);
			Возврат;
		КонецЕсли;
		
		Если ЕстьАлкогольнаяПродукцияЕГАИС Тогда
			
			Контекст.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
			
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекВыполнитьЗавершение", ЭтотОбъект, Контекст);
		ПослеОткрытияЧека     = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека", ЭтотОбъект, Контекст);
		ПослеОшибкиПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОшибкиПечатиЧека", ЭтотОбъект, Контекст);
		
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(Оповещение, 
										УникальныйИдентификатор, 
										ОбщиеПараметры, 
										ИдентификаторУстройстваФР,
										,
										ПослеОткрытияЧека,
										ПослеОшибкиПечатиЧека);
			
	Иначе
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "НапечататьЧек" командной панели.
//
&НаКлиенте
Процедура ПробитьЧекНаКлиенте()
	
	Результат = Ложь;
	ЕстьОшибки = Ложь;
	
	ОчиститьСообщения();
	
	ПроверитьИспользованиеПодключаемогоОборудования(ИспользоватьПодключаемоеОборудование);
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		ТекстСообщения =НСтр("ru = 'При пробитии чека произошла ошибка. Чек не пробит. Необходимо проверить оборудование.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Объект.ПометкаУдаления Тогда
		
		ТекстОшибки = НСтр("ru='Документ помечен на удаление'");
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Если Не ЕстьОшибки И ПроверитьЗаполнение() Тогда
		 // &ЗамерПроизводительности 
		 Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
										 "Документ.ЧекККМ.Форма.ФормаДокумента.Команда.ПробитьЧек",
																 Ложь);
		ЭтотОбъект.Доступность = Ложь;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Замер", Замер);
		
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекНаКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПробитьЧекВыполнить(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекНаКлиентеЗавершение(ЧекПробит, ПараметрыОперации) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если ЧекПробит Тогда
		ТолькоПросмотр = Истина;
		УстановитьДоступностьКнопокПроведенияКлиент();
		ПроверитьСообщенияПослеОформленияЧека();
		НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ +	1;
		ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
	
		// &ЗамерПроизводительности 
		ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыОперации.Замер);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСдачу()
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВидОплаты", ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные"));
	
	СуммаНаличных  = 0;
	СтрокиНаличных = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаНаличных Из СтрокиНаличных Цикл
		СуммаНаличных = СуммаНаличных + СтрокаНаличных.Сумма;
	КонецЦикла;
	
	Сдача = Макс(Объект.Оплата.Итог("Сумма") - СуммаВсего, 0);
	Сдача = Мин(Сдача, СуммаНаличных);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСдачуСервер()
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВидОплаты", Справочники.ВидыОплатЧекаККМ.Наличные);
	
	СуммаНаличных  = 0;
	СтрокиНаличных = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаНаличных Из СтрокиНаличных Цикл
		СуммаНаличных = СуммаНаличных + СтрокаНаличных.Сумма;
	КонецЦикла;
	
	Сдача = Макс(Объект.Оплата.Итог("Сумма") - СуммаВсего, 0);
	Сдача = Мин(Сдача, СуммаНаличных);
	
КонецПроцедуры

// Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора.
// Параметры:
//  Отказ - Булево
&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин"" не заполнено'"), Объект, "Объект.Магазин",,Отказ);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОплатуКартойЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
			|""%ОписаниеОшибки%"".
			|Оплата по карте не была произведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		ЗавершитьОтменуОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(Истина, Параметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьОплатуКартойЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
			|""%ОписаниеОшибки%"".
			|Возврат оплаты по карте не был произведен.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		
		ЗавершитьВозвратОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(Истина, Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОплатуКартой(ТекущиеДанные)
	
	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	
	СуммаОперации       = ТекущиеДанные.Сумма;
	НомерКарты          = ТекущиеДанные.НомерПлатежнойКарты;
	НомерСсылкиОперации = ТекущиеДанные.СсылочныйНомер;
	НомерЧекаЭТ         = ТекущиеДанные.НомерЧекаЭТ;
	СтрокаСлипЧека      = "";
		
	СтруктураЭквайринговыйТерминал = СтруктураДанныхЭТ(ТекущиеДанные.ЭквайринговыйТерминал);
	ИдентификаторУстройстваЭТ = СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
	
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(Объект.КассаККМ);
	ИдентификаторУстройстваФР  = ПараметрыКассыККМ.ИдентификаторУстройства;
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования = Истина;
		СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования = Истина;
	КонецЕсли;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	ИспользоватьБезПодключенияОборудованияЭТ = СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования;
	
	ПараметрДействия = Новый Структура;
	ПараметрДействия.Вставить("ИспользоватьКассуККМБезПодключенияОборудования", ИспользоватьКассуККМБезПодключенияОборудования);
	ПараметрДействия.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
	ПараметрДействия.Вставить("ИспользоватьБезПодключенияОборудованияЭТ", ИспользоватьБезПодключенияОборудованияЭТ);
	ПараметрДействия.Вставить("ИдентификаторУстройстваЭТ", ИдентификаторУстройстваЭТ);
	ПараметрДействия.Вставить("ТекстОписаниеОшибки", "");
	ПараметрДействия.Вставить("СтрокаСлипЧека", СтрокаСлипЧека);
	ПараметрДействия.Вставить("ВыбраннаяСтрокаИдентификатор", ТекущиеДанные.ПолучитьИдентификатор());
	ПараметрДействия.Вставить("СуммаОперации", СуммаОперации);
	ПараметрДействия.Вставить("НомерСсылкиОперации", НомерСсылкиОперации);
	ПараметрДействия.Вставить("НомерЧекаЭТ", НомерЧекаЭТ);
	
	Если НЕ ИспользоватьБезПодключенияОборудованияЭТ Тогда
		
		ЭтотОбъект.Доступность = Ложь;
			
		ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = "AuthorizeVoid";
		ПараметрыОперации.СуммаОперации  = СуммаОперации;
		ПараметрыОперации.НомерКарты     = НомерКарты;
		ПараметрыОперации.НомерЧекаЭТ    = НомерЧекаЭТ;
		ПараметрыОперации.СсылочныйНомер = НомерСсылкиОперации;
		
		Оповещение = Новый ОписаниеОповещения("УдалитьОплатуКартойЗавершение", ЭтотОбъект, ПараметрДействия);
		МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение, УникальныйИдентификатор, 
			ПараметрДействия.ИдентификаторУстройстваЭТ, ПараметрДействия.ИдентификаторУстройстваФР, ПараметрыОперации);
	
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию отмены оплаты на эквайринговом терминале.'") + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'")        + " "+ СуммаОперации         + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер карты:'")           + " "+ НомерКарты            + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Ссылочный номер:'")       + " "+ НомерСсылкиОперации   + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер чека:'")            + " "+ НомерЧекаЭТ           + Символы.ПС;
		ТекстВопроса = ТекстВопроса + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция отмены оплаты на эквайринговом терминале прошла успешно?'");
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросУспешностиОтменыОперацииНаЭТ", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьОплатуКартой(ТекущиеДанные)
	
	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	
	СуммаОперации       = ТекущиеДанные.Сумма;
	НомерКарты          = ТекущиеДанные.НомерПлатежнойКарты;
	НомерСсылкиОперации = ТекущиеДанные.СсылочныйНомер;
	НомерЧекаЭТ         = ТекущиеДанные.НомерЧекаЭТ;
	СтрокаСлипЧека      = "";
		
	СтруктураЭквайринговыйТерминал = СтруктураДанныхЭТ(ТекущиеДанные.ЭквайринговыйТерминал);
	ИдентификаторУстройстваЭТ = СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
	
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(Объект.КассаККМ);
	ИдентификаторУстройстваФР  = ПараметрыКассыККМ.ИдентификаторУстройства;
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования = Истина;
		СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования = Истина;
	КонецЕсли;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	ИспользоватьБезПодключенияОборудованияЭТ = СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования;
	
	ПараметрДействия = Новый Структура;
	ПараметрДействия.Вставить("ИспользоватьКассуККМБезПодключенияОборудования", ИспользоватьКассуККМБезПодключенияОборудования);
	ПараметрДействия.Вставить("ИдентификаторУстройстваФР", ИдентификаторУстройстваФР);
	ПараметрДействия.Вставить("ИспользоватьБезПодключенияОборудованияЭТ", ИспользоватьБезПодключенияОборудованияЭТ);
	ПараметрДействия.Вставить("ИдентификаторУстройстваЭТ", ИдентификаторУстройстваЭТ);
	ПараметрДействия.Вставить("ТекстОписаниеОшибки", "");
	ПараметрДействия.Вставить("СтрокаСлипЧека", СтрокаСлипЧека);
	ПараметрДействия.Вставить("ВыбраннаяСтрокаИдентификатор", ТекущиеДанные.ПолучитьИдентификатор());
	ПараметрДействия.Вставить("СуммаОперации", СуммаОперации);
	ПараметрДействия.Вставить("НомерСсылкиОперации", НомерСсылкиОперации);
	ПараметрДействия.Вставить("НомерЧекаЭТ", НомерЧекаЭТ);
	
	Если НЕ ИспользоватьБезПодключенияОборудованияЭТ Тогда
		
		ЭтотОбъект.Доступность = Ложь;
			
		ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = "AuthorizeRefund";
		ПараметрыОперации.СуммаОперации  = СуммаОперации;
		ПараметрыОперации.НомерКарты     = НомерКарты;
		ПараметрыОперации.НомерЧекаЭТ    = НомерЧекаЭТ;
		ПараметрыОперации.СсылочныйНомер = НомерСсылкиОперации;
		
		Оповещение = Новый ОписаниеОповещения("ВернутьОплатуКартойЗавершение", ЭтотОбъект, ПараметрДействия);
		МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение, УникальныйИдентификатор, 
			ПараметрДействия.ИдентификаторУстройстваЭТ, ПараметрДействия.ИдентификаторУстройстваФР, ПараметрыОперации);
	
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию возврата оплаты на эквайринговом терминале.'") + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'")        + " "+ СуммаОперации         + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер карты:'")           + " "+ НомерКарты            + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Ссылочный номер:'")       + " "+ НомерСсылкиОперации   + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер чека:'")            + " "+ НомерЧекаЭТ           + Символы.ПС;
		ТекстВопроса = ТекстВопроса + Символы.ПС;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция возврата оплаты на эквайринговом терминале прошла успешно?'");
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросУспешностиВозвратаОплатыНаЭТ", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокПроведенияКлиент()
	
	Если Элементы.Найти("ФормаПровестиИЗакрытьИзФормы") <> Неопределено Тогда
		Элементы.ФормаПровестиИЗакрытьИзФормы.Доступность = НЕ ТолькоПросмотр;
	КонецЕсли;
	
	Если Элементы.Найти("ФормаПровестиИзФормы") <> Неопределено Тогда
		Элементы.ФормаПровестиИзФормы.Доступность         = НЕ ТолькоПросмотр;
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"ФормаПробитьЧек",
																"Доступность", 
																Объект.Проведен И НЕ ТолькоПросмотр);
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКнопокПроведенияСервер()
	
	Если Элементы.Найти("ФормаПровестиИЗакрытьИзФормы") <> Неопределено Тогда
		Элементы.ФормаПровестиИЗакрытьИзФормы.Доступность = НЕ ТолькоПросмотр;
	КонецЕсли;
	
	Если Элементы.Найти("ФормаПровестиИзФормы") <> Неопределено Тогда
		Элементы.ФормаПровестиИзФормы.Доступность         = НЕ ТолькоПросмотр;
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"ФормаПробитьЧек",
																"Доступность", 
																Объект.Проведен И НЕ ТолькоПросмотр);
КонецПроцедуры

// Устанавливает доступность элементов по виду операции.
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура УстановитьДоступностьПоВидуОперацииКлиент()
	
	ЭтоВозврат = Объект.ВидОперации = ЗначениеПеречислениеВидОперацииВозврат;
	
	Элементы.АналитикаХозяйственнойОперации.ТолькоПросмотр = НЕ ЭтоВозврат;
	Элементы.ЧекККМПродажа.ТолькоПросмотр                  = НЕ ЭтоВозврат;
	Элементы.ДисконтнаяКарта.ТолькоПросмотр                = ЭтоВозврат;
	
КонецПроцедуры

// Устанавливает значение выбора чека возврата.
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура УстановитьПараметрыВыбораЧекаККМПродажиКлиент()

	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.КассаККМ"   , Объект.КассаККМ));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидОперации",ЗначениеПеречислениеВидОперацииПродажа));
	
	МассивСтатусовЧекаККМ = Новый Массив;
	
	МассивСтатусовЧекаККМ.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка"));
	МассивСтатусовЧекаККМ.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый"));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.СтатусЧекаККМ",Новый ФиксированныйМассив(МассивСтатусовЧекаККМ)));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Проведен", Истина));
	
	Элементы.ЧекККМПродажа.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

КонецПроцедуры

&НаСервере
Функция ПараметрыДляНазначенияРучнойСкидки()
	
	Возврат СкидкиНаценкиСервер.ПараметрыДляНазначенияРучнойСкидки(Объект);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьОплатуНаличными()
	
	ДополнительныеПараметры = Неопределено;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеДобавитьОплатуНаличными");
		
		Отказ = Ложь;
		ПроверитьСкидки(Отказ, ДополнительныеПараметры);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОповещениеДобавитьОплатуНаличными(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКомандыВидовОплаты()

	ПлатежнаяКарта = ЗначениеНастроекПовтИсп.ПолучитьВидОплатыПоТипу(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта);
	
	Если ПлатежнаяКарта = Неопределено Тогда
		Элементы.ОплатаПлатежнаяКарта.Заголовок = Элементы.ОплатаПлатежнаяКарта.Заголовок + "...";
	КонецЕсли;
	
	БанковскийКредит = ЗначениеНастроекПовтИсп.ПолучитьВидОплатыПоТипу(Перечисления.ТипыОплатЧекаККМ.БанковскийКредит);
	
	Если БанковскийКредит = Неопределено Тогда
		Элементы.ОплатаБанковскийКредит.Заголовок = Элементы.ОплатаБанковскийКредит.Заголовок + "...";
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидОплатыПоТипу(ТипыОплаты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ВидыОплатЧекаККМ.Ссылка
	|ИЗ
	|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
	|ГДЕ
	|	НЕ ВидыОплатЧекаККМ.ПометкаУдаления
	|	И ВидыОплатЧекаККМ.ТипОплаты = &ТипыОплаты";
	Запрос.УстановитьПараметр("ТипыОплаты", ТипыОплаты);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьЭквайринговыйТерминалПоУмолчанию(ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		
		ЭквайринговыйТерминалПоУмолчанию = ПолучитьЭквайринговыйТерминалПоУмолчанию(Неопределено);
		Для Каждого ТекущаяСтрока Из Объект.Оплата Цикл 
			
			ТекущаяСтрока.ЭквайринговыйТерминал = ЭквайринговыйТерминалПоУмолчанию;
			ТекущаяСтрока.ПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииПоТерминалу(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты, ЭтоВозврат, ЭтоВозвратДеньВДень);
			ПересчитатьСуммуКомиссии(ТекущаяСтрока);
			ТекущаяСтрока.ТипОплаты = ТипОплатыПоВиду(ТекущаяСтрока.ВидОплаты);
			
		КонецЦикла;
		
	Иначе
		
		ЭквайринговыйТерминалПоУмолчанию = ПолучитьЭквайринговыйТерминалПоУмолчанию(ТекущаяСтрока.ВидОплаты);
		ТекущаяСтрока.ЭквайринговыйТерминал = ЭквайринговыйТерминалПоУмолчанию;
		ТекущаяСтрока.ПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииПоТерминалу(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты, ЭтоВозврат, ЭтоВозвратДеньВДень);
		ПересчитатьСуммуКомиссии(ТекущаяСтрока);
		ТекущаяСтрока.ТипОплаты = ТипОплатыПоВиду(ТекущаяСтрока.ВидОплаты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЭквайринговыйТерминалПоУмолчанию(ВидОплаты)
	
	Результат = Справочники.ЭквайринговыеТерминалы.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		Результат = Справочники.ЭквайринговыеТерминалы.ЭквайринговыйТерминалПоУмолчанию(Объект.КассаККМ, Объект.Организация, Объект.Магазин, ВидОплаты);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьИДоступностьЗаказаПокупателя()
	
	Если НЕ ПродажаПоЗаказу Тогда
		
		Элементы.ОткрытьЗаказПокупателя.Видимость   = Ложь;
		Элементы.ТоварыГруппаЗаказКлиента.Видимость = Ложь;
		Элементы.ТоварыЗаказПокупателя.Видимость    = Ложь;
		Элементы.ТоварыКодСтроки.Видимость          = Ложь;
		Элементы.ТоварыРезервировать.Видимость      = Ложь;
		
	Иначе
		
		Элементы.ОткрытьЗаказПокупателя.Заголовок = Строка(Объект.ЗаказПокупателя);
		Элементы.ТоварыРассчитатьСкидкиНаценки.Доступность       = Ложь;
		Элементы.ТоварыНазначитьАвтоматическиеСкидки.Доступность = Ложь;
		Элементы.ТоварыПеренестиПодаркиВТовары.Доступность       = Ложь;
		Элементы.ТоварыНазначитьРучнуюСкидку.Доступность         = Ложь;
		Элементы.ТоварыОтменитьРучныеСкидки.Доступность          = Ложь;
		Элементы.ПодаркиПеренестиПодаркиВТовары.Доступность      = Ложь;
		
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЗаполнитьПоЗаказу();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамЗаказа()
	
	РозничныеПродажиСервер.ЗаполнитьПоОстаткамЗаказа(Объект, Объект.ЗаказПокупателя);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Подарки);
	
	СтруктураМарки = Новый Структура;
	СтруктураМарки.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары, СтруктураМарки);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаКодаМаркировки(Объект.Товары, СтруктураМарки);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Подарки);
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступностьЗаполнитьПоЗаказу()
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПокупателей")
	 ИЛИ НЕ ПродажаПоЗаказу Тогда
		Элементы.ТоварыЗаполнитьПоЗаказу.Видимость = Ложь;
	ИначеЕсли Объект.Проведен ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		Элементы.ТоварыЗаполнитьПоЗаказу.Доступность = Ложь;
	Иначе
		Элементы.ТоварыЗаполнитьПоЗаказу.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДостпуностьРасчетыСКлиентами()
	
	ДокументРасчетаЗаполнен = ЗначениеЗаполнено(Объект.ДокументРасчета);
	
	Элементы.ДокументРасчета.Видимость = ДокументРасчетаЗаполнен;
	Элементы.ОперацияСДенежнымиСредствами.Доступность = НЕ ДокументРасчетаЗаполнен;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		Элементы.ОперацияСДенежнымиСредствами.Заголовок = НСтр("ru = 'Прием денежных средств без передачи товаров'");
	Иначе
		Элементы.ОперацияСДенежнымиСредствами.Заголовок = НСтр("ru = 'Возврат денежных средств без передачи товаров'");
	КонецЕсли;
	
	Элементы.Контрагент.Доступность    = НЕ ДокументРасчетаЗаполнен;
	Элементы.ВидОперации.Доступность   = НЕ ДокументРасчетаЗаполнен;
	Элементы.ЧекККМПродажа.Доступность = НЕ ДокументРасчетаЗаполнен;
	
	Элементы.Контрагент.ПодсказкаВвода = Константы.КонтрагентРозничныйПокупатель.Получить().Наименование;
	
	ВидимостьОплатРасчетыСКлиентамиСервер()
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьОплатРасчетыСКлиентамиСервер()
	
	ЭтоВозврат = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	
	Элементы.ОплатаБанковскийКредит.Видимость     = НЕ Объект.ОперацияСДенежнымиСредствами;
	Элементы.ОплатаПодарочныйСертификат.Видимость = НЕ Объект.ОперацияСДенежнымиСредствами И НЕ ЭтоВозврат;
	Элементы.ОплатаОплатитьБонусами.Видимость     = НЕ Объект.ОперацияСДенежнымиСредствами И НЕ ЭтоВозврат;
	Элементы.ОплатаЗачетАванса.Видимость          = НЕ ЭтоВозврат;
	Элементы.ОплатаОплатитьВРассрочку.Видимость   = НЕ ЭтоВозврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьОплатРасчетыСКлиентами()
	
	ЭтоВозврат = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат");
	
	Элементы.ОплатаБанковскийКредит.Видимость     = НЕ Объект.ОперацияСДенежнымиСредствами;
	Элементы.ОплатаПодарочныйСертификат.Видимость = НЕ Объект.ОперацияСДенежнымиСредствами;
	Элементы.ОплатаОплатитьБонусами.Видимость     = НЕ Объект.ОперацияСДенежнымиСредствами;
	Элементы.ОплатаЗачетАванса.Видимость          = НЕ ЭтоВозврат;
	Элементы.ОплатаОплатитьВРассрочку.Видимость   = НЕ ЭтоВозврат;
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		
		УдалитьЛишнееСтрокиОплат(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.БанковскийКредит"));
		УдалитьЛишнееСтрокиОплат(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.Бонусы"));
		УдалитьЛишнееСтрокиОплат(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПодарочныйСертификат"));
		УдалитьЛишнееСтрокиОплат(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ЗачетАванса"));
		
		Если НЕ ЭтоВозврат Тогда
			УдалитьЛишнееСтрокиОплат(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ВРассрочку"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЛишнееСтрокиОплат(ТипОплатЧекаККМ)
	
	СтруктуруПоиска = Новый Структура;
	СтруктуруПоиска.Вставить("ТипОплаты", ТипОплатЧекаККМ);
	Строки = Объект.Оплата.НайтиСтроки(СтруктуруПоиска);
	
	Для каждого СтрокаОплаты Из Строки Цикл
		Объект.Оплата.Удалить(СтрокаОплаты);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция АдресТабличнойЧастиТовары()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработатьОплатуБонусами(Параметр, УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов)
	
	ТаблицаРаспределения = ПолучитьИзВременногоХранилища(Параметр.АдресВоВременномХранилище);
	КоличествоБонусовОплачено = ТаблицаРаспределения.Итог("КоличествоБонусовОплачено");
	СуммаОплачено = ТаблицаРаспределения.Итог("СуммаОплачено");
	
	НоваяСтрока = Объект.Оплата.Добавить();
	НоваяСтрока.БонуснаяПрограммаЛояльности = Параметр.БонуснаяПрограмма;
	НоваяСтрока.ВидОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметр.БонуснаяПрограмма, "ВидОплаты");
	
	Если НоваяСтрока.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой Тогда
		НоваяСтрока.КоличествоБонусовВСкидках = КоличествоБонусовОплачено;
		НоваяСтрока.СуммаБонусовВСкидках = СуммаОплачено;
		
		//
		ОчиститьОплатуБонусамиВТоварах();
		Для Каждого СтрокаРаспределения Из ТаблицаРаспределения Цикл
			СтрокаТоваров = Объект.Товары[СтрокаРаспределения.НомерСтроки - 1];
			СтрокаТоваров.СуммаСкидкиОплатыБонусом = СтрокаРаспределения.СуммаОплачено;
			СтрокаТоваров.Сумма = СтрокаТоваров.Сумма - СтрокаТоваров.СуммаСкидкиОплатыБонусом;
			СтрокаТоваров.СуммаНДС = ОбработкаТабличнойЧастиТоварыСервер.РассчитатьСуммуНДС(СтрокаТоваров.Сумма, СтрокаТоваров.СтавкаНДС, Объект.ЦенаВключаетНДС);
		КонецЦикла;
	Иначе
		НоваяСтрока.КоличествоБонусов = КоличествоБонусовОплачено;
		НоваяСтрока.Сумма = СуммаОплачено;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	Если УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов Тогда
		Объект.СкидкиРассчитаны = Ложь;
	Иначе
		Если Объект.ВидОперации <> Перечисления.ВидыОперацийЧекККМ.Возврат
			И НЕ ПродажаПоЗаказу
			И НЕ ДокументРасчетаЗаполнен Тогда
			СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(Объект, "Товары", "СкидкиНаценки");
		КонецЕсли;
	КонецЕсли;
	ОбновитьИтоговыеПоказателиСервер();
	ЕстьОплатаБонусами = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция БонуснаяПрограммаКарты(ДисконтнаяКарта)
	
	БонуснаяПрограмма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "БонуснаяПрограммаЛояльности");
	
	Возврат БонуснаяПрограмма;
	
КонецФункции

&НаСервере
Функция ВозможнаОплатаБонусами(ДополнительныеПараметры)
	Результат = Ложь;
	ТекстПредупреждения = "";
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			БонуснаяПрограммаЛояльности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДисконтнаяКарта, "БонуснаяПрограммаЛояльности");
			Если ЗначениеЗаполнено(БонуснаяПрограммаЛояльности) Тогда
				УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					БонуснаяПрограммаЛояльности,
					"УменьшатьСуммуЧекаДляСкидок");
					Если УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Null
						ИЛИ УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Неопределено Тогда
					УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Ложь;
				КонецЕсли;
			Иначе
				УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Ложь;
			КонецЕсли;
		Иначе
			УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Ложь;
		КонецЕсли;
		ДополнительныеПараметры.Вставить("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов", УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов);
		
		ЕстьОплатаБонусами = Ложь;
		ЕстьДругиеОплаты = Ложь;
		Для Каждого СтрокаОплаты Из Объект.Оплата Цикл
			Если СтрокаОплаты.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой Тогда
				ТекстПредупреждения = НСтр("ru = 'Оплата бонусами уже выбрана.'")
					   + Символы.ПС + НСтр("ru = 'Повторная оплата бонусами не возможна.'");
				
				ЕстьОплатаБонусами = Истина;
			Иначе
				ЕстьДругиеОплаты = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьОплатаБонусами Тогда
			Если УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов И ЕстьДругиеОплаты Тогда
				ТекстПредупреждения = НСтр("ru = 'Оплата бонусами возможна только до указания других видов оплат и расчета скидок.'")
			Иначе
				Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
					БонуснаяПрограммаЛояльности = БонуснаяПрограммаКарты(Объект.ДисконтнаяКарта);
					Если ЗначениеЗаполнено(БонуснаяПрограммаЛояльности) Тогда
						ДополнительныеПараметры.Вставить("БонуснаяПрограммаЛояльности", БонуснаяПрограммаЛояльности);
						Результат = Истина;
					Иначе
						ТекстПредупреждения = НСтр("ru = 'Дисконтная карта не участвует в бонусных программах.'")
							   + Символы.ПС + НСтр("ru = 'Оплата бонусами не возможна.'");
					КонецЕсли;
				Иначе
					ТекстПредупреждения = НСтр("ru = 'Не выбрана дисконтная карта.'")
						   + Символы.ПС + НСтр("ru = 'Оплата бонусами не возможна.'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстПредупреждения = НСтр("ru = 'При возврате бонусные баллы сторнируются автоматически.'");
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ОчиститьОплатуБонусамиВТоварах()
	
	БонусныеБаллыСервер.ОчиститьОплатуБонусамиВТоварах(Объект);
	ЕстьОплатаБонусами = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСкидкиИОплатуБонусамиКСторнированию()
	
	СкидкиНаценкиСерверПереопределяемый.ПодготовитьСкидкиИОплатуБонусамиКСторнированиюПриВозврате(Объект);
	ОбновитьИтоговыеПоказателиСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьСкидки()
	
	Если НЕ ПродажаПоЗаказу 
		И НЕ ДокументРасчетаЗаполнен Тогда
		Если Объект.СкидкиРассчитаны Тогда
			СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "Товары", "СуммаСкидкиОплатыБонусом");
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
			Объект.Подарки.Очистить();
			Объект.БонусныеБаллыКНачислению.Очистить();
			Объект.СкидкиРассчитаны = Ложь;
			СкидкиНаценкиСерверПереопределяемый.ОчиститьТоварыОтПодарков(Объект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьОплатуБонусами(УдалятьСтрокиИзОплаты = Истина)
	
	Если ЕстьОплатаБонусами Тогда
		БонусныеБаллыСервер.ОчиститьОплатуБонусамиВТоварах(Объект);
		Если УдалятьСтрокиИзОплаты Тогда
			МассивСтрокОплаты = Объект.Оплата.НайтиСтроки(Новый Структура("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой));
			Для Каждого УдаляемаяСтрока Из МассивСтрокОплаты Цикл
				Объект.Оплата.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЕсли;
		ЕстьОплатаБонусами = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахЗавершитьОбработкуВопроса()
	
	АдресСкидок = ПоместитьСкидкиВХранилище();
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(Элементы.Товары.ТекущиеДанные, Объект, ЭтотОбъект, АдресСкидок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахКлиент()
	
	Если Объект.СкидкиРассчитаны Тогда
		ОткрытьИнформациюОСкидкахЗавершитьОбработкуВопроса();
	Иначе
		ДополнительныеПараметры = Новый Структура; 
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросРассчитатьИОткрытьСкидки", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'");
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОплатыБонусами(ДополнительныеПараметры)
	
	Отказ = Ложь;
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов") Тогда
		УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = ДополнительныеПараметры.УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов;
	КонецЕсли;
	ДополнительныеПараметры.Вставить("БудетОплатаБонусами", Истина);
	ДополнительныеПараметры.Вставить("ИмяОбработкиОповещения", "ОповещениеРасчетСкидокКлиент");
	Если УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов Тогда
		ОтменитьСкидки();
	Иначе
		ПроверитьСкидки(Отказ, ДополнительныеПараметры, Ложь);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Документ.ЧекККМ.Форма.ФормаОплатыБонуснымиБаллами.Открытие");
             
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Магазин", Объект.Магазин);
	ПараметрыОткрытия.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	ПараметрыОткрытия.Вставить("АдресТабличнойЧастиТовары", АдресТабличнойЧастиТовары());
	ПараметрыОткрытия.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("БонуснаяПрограммаЛояльности", ДополнительныеПараметры.БонуснаяПрограммаЛояльности);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОплатыБонусами", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаОплатыБонуснымиБаллами",
					ПараметрыОткрытия,
					ЭтаФорма,
					,
					,
					,
					ОбработчикОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуОплатыПослеВопроса()
	
	ВопросОбУдаленииСтрокиОплатыУжеЗадан = Истина;
	
	ТекущиеДанные = Элементы.Оплата.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ЭтотОбъект.Модифицированность = Истина;
		Объект.Оплата.Удалить(ТекущиеДанные);
		Если ТекущиеДанные.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой")
			И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		КонецЕсли;
	КонецЕсли;
	
	ВопросОбУдаленииСтрокиОплатыУжеЗадан = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОплатуПлатежнойКартойЧерезЭквайринговыйТерминал(РезультатОперации, ПараметрДействия)
	
	Если РезультатОперации Тогда
		
		// Сохранить в таблице данные оплаты картой.
		ВыбраннаяСтрока = Объект.Оплата.НайтиПоИдентификатору(ПараметрДействия.ВыбраннаяСтрокаИдентификатор);
		
		ВыбраннаяСтрока.НомерПлатежнойКарты = ПараметрДействия.НомерКарты;
		ВыбраннаяСтрока.Сумма               = ПараметрДействия.СуммаОперации;
		ВыбраннаяСтрока.СсылочныйНомер      = ПараметрДействия.НомерСсылкиОперации;
		ВыбраннаяСтрока.НомерЧекаЭТ         = ПараметрДействия.НомерЧекаЭТ;
		ВыбраннаяСтрока.ДанныеПереданыВБанк = Истина;
		
		Записать(); // Обязательно необходимо записать документ, для предотвращения потери информации.
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОтменуОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(РезультатОперации, ПараметрДействия)
	
	Если РезультатОперации Тогда
		
		ВыбраннаяСтрока = Объект.Оплата.НайтиПоИдентификатору(ПараметрДействия.ВыбраннаяСтрокаИдентификатор);
		
		// Сохранить в таблице данные оплаты картой.
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			ВыбраннаяСтрока.СсылочныйНомер = "";
			ВыбраннаяСтрока.НомерЧекаЭТ    = "";
			ВыбраннаяСтрока.НомерПлатежнойКарты = "";
			ВыбраннаяСтрока.ДанныеПереданыВБанк = Ложь;
		Иначе
			ВыбраннаяСтрока.ДанныеПереданыВБанк = Истина;
		КонецЕсли;
		
		Записать(); // Обязательно необходимо записать документ, для предотвращения потери информации.
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВозвратОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(РезультатОперации, ПараметрДействия)
	
	Если РезультатОперации Тогда
		
		ВыбраннаяСтрока = Объект.Оплата.НайтиПоИдентификатору(ПараметрДействия.ВыбраннаяСтрокаИдентификатор);
		
		ВыбраннаяСтрока.ДанныеПереданыВБанк = Истина;
		
		Записать(); // Обязательно необходимо записать документ, для предотвращения потери информации.
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗаполнениеПоЗаказу()
	
	Объект.Товары.Очистить();
	
	Объект.СкидкиНаценки.Очистить();
	Объект.УправляемыеСкидки.Очистить();
	Объект.Подарки.Очистить();
	Объект.СерийныеНомера.Очистить();
	Объект.ПогашениеПодарочныхСертификатов.Очистить();
	Объект.Серии.Очистить();
	
	ЗаполнитьПоОстаткамЗаказа();
	ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента);
	
	ПроверитьПрименениеВидовНалов(ИдентификаторСтроки);
	
	ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНесвязанныеСерийныеНомера()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеСерийныеНомера(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНесвязанныеАкцизы()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеАкцизы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНесвязанныеКодыМаркировки()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеКодыМаркировки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

// Процедура заполняет товары из подбора.
// Параметры: 
//  ВыбранноеЗначение - Структура,
//  ИмяТабличнойЧасти  - Строка
&НаСервере
Функция ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТабличнойЧасти  = "")
	
	СтрокиИзменены = Ложь;
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	ИмяТабличнойЧасти = ?(ПустаяСтрока(ИмяТабличнойЧасти), "Товары", ИмяТабличнойЧасти);
	ТаблицаСерийныхНомеров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресСерийныхНомеровВХранилище);
	ЕстьСерийныеНомера = (ИмяТабличнойЧасти = "Товары") И (ТаблицаСерийныхНомеров.Количество() > 0);
	НужноЗаполнятьЦену = НЕ ЕстьПравоИзменятьЦену();
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура,
															  |Характеристика,
															  |Упаковка,
															  |Цена,
															  |КоличествоУпаковок,
															  |ТипНоменклатуры,
															  |ХарактеристикиИспользуются,
															  |ИспользоватьСерийныеНомера");
		Если ЕстьСерийныеНомера Тогда
			МассивСерийныхНомеров = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(СтрокаТовара.КлючСвязиСерийныхНомеров , ТаблицаСерийныхНомеров);
			ТекущаяСтрока.КлючСвязиСерийныхНомеров = ОбработкаТабличнойЧастиТоварыСервер.ДобавитьСерийныеНомераВТабличнуюЧасть(Объект.СерийныеНомера, МассивСерийныхНомеров, 0);
		КонецЕсли;
		Если СтрокаТовара.ИспользоватьСерийныеНомера Тогда
			Если ЕстьСерийныеНомера Тогда
				ТекущаяСтрока.КоличествоУпаковок = МассивСерийныхНомеров.Количество();
			Иначе
				ТекущаяСтрока.КоличествоУпаковок = 0;
			КонецЕсли;
		КонецЕсли;
		СтруктураДействий = Новый Структура;
		СтруктураПараметровДействия = Новый Структура;
		СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
		СтруктураПараметровДействия.Вставить("РабочееМесто", Объект.КассаККМ.РабочееМесто);
		СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДействия);
		
		СтруктураПараметровДействия = Новый Структура();
		СтруктураПараметровДействия.Вставить("Дата", Объект.Дата);
		СтруктураПараметровДействия.Вставить("Организация", Объект.Организация);
		СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
		СтруктураДействий.Вставить("ЗаполнитьВидНалога", СтруктураПараметровДействия);
		
		Если ИмяТабличнойЧасти = "Товары" Тогда
			Если НужноЗаполнятьЦену Тогда
				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
			КонецЕсли;
			ТекущаяСтрока.Продавец = Объект.Продавец;
			СтруктураПараметровСтавкиНДС = Новый Структура;
			СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
			СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
			
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
			СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента");
			
			Если ТипОборудованияКассыККМ = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ") Тогда
				Если Объект.Товары.Количество() > 1 Тогда
					ТекстСообщенияПриОшибке = НСтр("ru = 'Недопустимо добавлять в один чек товары и услуги по различным договорам платежных агентов'");
					СтруктураПараметровПроверки = Новый Структура();
					СтруктураПараметровПроверки.Вставить("ДоговорПлатежногоАгента", Объект.ДоговорПлатежногоАгента);
					СтруктураПараметровПроверки.Вставить("ТекстСообщения", ТекстСообщенияПриОшибке);
					СтруктураДействий.Вставить("ПроверитьОтличныеДоговорыПлатежныхАгентов", СтруктураПараметровПроверки);
				КонецЕсли;
			КонецЕсли;
			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		КонецЕсли;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		СтруктураПроверкиАМ = Новый Структура();
		СтруктураПроверкиАМ.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураПроверкиАМ);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаКодаМаркировки", СтруктураПроверкиАМ);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		СтрокиИзменены = Истина;
		
		Если ТипОборудованияКассыККМ = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ") Тогда
			Если Объект.Товары.Количество() = 1 Тогда
				Объект.ДоговорПлатежногоАгента = Объект.Товары[0].ДоговорПлатежногоАгента;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(Объект[ИмяТабличнойЧасти]);
	
	Если ТаблицаТоваров.Количество() = 0 Тогда
		ОбновитьИтоговыеПоказателиСервер();
	КонецЕсли;
	ЗаполнитьСтатусыУказанияСерийСервер();
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	Возврат СтрокиИзменены;
	
КонецФункции

&НаСервере
Процедура ОперацияСДенежнымиСредствамиПриИзмененииСервер()
	
	СтруктураПроверкиАМ = Новый Структура();
	СтруктураПроверкиАМ.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары, СтруктураПроверкиАМ);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаКодаМаркировки(Объект.Товары, СтруктураПроверкиАМ);
	УстановитьАвтоОтметкуТЧТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИлиОтменитьСкидкиИОплатуБонусами(УдалятьСтрокиИзОплаты = Истина)
	
	Если АвтоматическийРасчетСкидок Тогда
		Если НЕ ПропуститьАвтоматическийРасчетСкидок Тогда
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
				ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
			Иначе
				РассчитатьСкидкиНаценкиКлиент();
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			ОтменитьСкидки();
			ОтменитьОплатуБонусами(УдалятьСтрокиИзОплаты);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьИтоговыеПоказателиСервер();
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере(ПорядковыйНомерПродажи)
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", 				УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	КонтролироватьОстаткиТоваров);
	СтруктураПараметры.Вставить("ПорядковыйНомерПродажи",           ПорядковыйНомерПродажи);
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", 	КонтролироватьОстаткиТоваров);
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	СведенияДокумента = Новый Структура;
	СегментИсключаемойНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "СегментИсключаемойНоменклатуры");
	СведенияДокумента.Вставить("СегментИсключаемойНоменклатуры", СегментИсключаемойНоменклатуры);
	СведенияДокумента.Вставить("Товары", Объект.Товары);
	СтруктураПараметры.Вставить("СведенияДокумента", СведенияДокумента);
	
	ДеревоСкидок = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	Возврат ПоместитьВоВременноеХранилище(ДеревоСкидок, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ВводСуммыАгентскогоПлатежа(ТекущиеДанные)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РедактируемаяСтрока", ТекущиеДанные);
	ОбработчикОповещения = Новый ОписаниеОповещения(
									"ОповещениеВводСуммыАгентскогоПлатежа" ,
									ЭтотОбъект,
									ДополнительныеПараметры);
	СуммаПлатежа = ТекущиеДанные.Сумма;
	ПоказатьВводЧисла(ОбработчикОповещения, СуммаПлатежа, НСтр("ru = 'Введите сумму платежа'"), 15, 2);
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВводДополнительнойИнформации(Элемент, ОтказСтандартнойОбработки)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыУпаковка 
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕдиницаИзмерения Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.ИспользоватьСерийныеНомера Тогда
				//Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				ВвестиПодарочныеСертификаты();
				ОтказСтандартнойОбработки = Истина;
			ИначеЕсли ТекущиеДанные.СтатусУказанияСерий <> 0 Тогда
				//Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок Тогда
					УказатьСерии("КоличествоУпаковок", "Товары", "Серии");
				Иначе
					УказатьСерии("Упаковка", "Товары", "Серии");
				КонецЕсли;
				ОтказСтандартнойОбработки = Истина;
			ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ДоговорПлатежногоАгента) Тогда
				//Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				ВводСуммыАгентскогоПлатежа(ТекущиеДанные);
				ОтказСтандартнойОбработки = Истина;
			ИначеЕсли ТекущиеДанные.СтатусУказанияАкцизныхМарок <> 0
				И ТекущиеДанные.НеобходимостьВводаКодаМаркировки Тогда
				ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
				ВвестиАкцизнуюМарку(ИдентификаторСтроки, ТекущиеДанные, "КоличествоУпаковок");
				ОтказСтандартнойОбработки = Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыЦена
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыСумма Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.ДоговорПлатежногоАгента) Тогда
				//Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				ВводСуммыАгентскогоПлатежа(ТекущиеДанные);
				ОтказСтандартнойОбработки = Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыСтатусУказанияАкцизныхМарок
		И Элементы.Товары.ТекущиеДанные <> Неопределено
		И Элементы.Товары.ТекущиеДанные.СтатусУказанияАкцизныхМарок <> 0 Тогда
		ИдентификаторСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		ВвестиАкцизнуюМарку(ИдентификаторСтроки, Элементы.Товары.ТекущиеДанные, "КоличествоУпаковок");
		ОтказСтандартнойОбработки = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодаркиПередНачаломИзменения(Элемент, Отказ)
	
	ПодаркиВводДополнительнойИнформации(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиВводДополнительнойИнформации(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент = Элементы.ПодаркиКоличествоУпаковок
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ПодаркиУпаковка 
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ПодаркиНоменклатураЕдиницаИзмерения Тогда
		ТекущиеДанные = Элементы.Подарки.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
				Отказ = Истина;
			Иначе
				Элементы.Подарки.ЗакончитьРедактированиеСтроки(Ложь);
				Если Элемент.ТекущийЭлемент = Элементы.ПодаркиКоличествоУпаковок Тогда
					УказатьСерии("КоличествоУпаковок", "Подарки", "СерииПодарков");
				Иначе
					УказатьСерии("Упаковка", "Подарки", "СерииПодарков");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПрименениеВидовНалов(ТекущаяСтрока = Неопределено)
	
	Если Объект.Товары.Количество() > 0 Тогда
		Если не Объект.ВидНалога = Объект.Товары[0].ВидНалога Тогда
			Объект.ВидНалога = Объект.Товары[0].ВидНалога;
		КонецЕсли;
	Иначе
		ЗаполнитьВидНалога();
	КонецЕсли;
	
	УстановитьСистемуНалогообложенияНаФорме();
	
	Если ВозможныРазныеНалоговыеРежимыСкладов и ТипОборудованияКассыККМ = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ") Тогда
		
		Если Объект.Товары.Количество() = 1 Тогда
			
			Если Объект.Товары[0].ВидНалога.Пустая() Тогда
				ТекстСообщения = НСтр("ru = 'Далее в этот чек следует добавлять товары со складов не облагаемых особыми налогами'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Далее в этот чек следует добавлять товары со складов с налогом ""%1""'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект.Товары[0].ВидНалога);
			КонецЕсли;
			
			ЗаголовокСообщения = НСтр("ru = 'Налоговый режим чека'");
			
			ПоказатьОповещениеПользователя(ЗаголовокСообщения,, ТекстСообщения);
			
		ИначеЕсли Объект.Товары.Количество() > 1 Тогда
		
			ЕстьРазличныеЗначения = Ложь;
			
			ВидНалогаПервойСтроки = Объект.Товары[0].ВидНалога;
			
			Если ТекущаяСтрока = Неопределено Тогда
				Для Инд = 1 По Объект.Товары.Количество() - 1 Цикл
					Если не ВидНалогаПервойСтроки = Объект.Товары[Инд].ВидНалога Тогда
						ЕстьРазличныеЗначения = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ЭлементКоллекции = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
				Инд = Объект.Товары.Индекс(ЭлементКоллекции);
				Если не ВидНалогаПервойСтроки = Объект.Товары[Инд].ВидНалога Тогда
					ЕстьРазличныеЗначения = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьРазличныеЗначения Тогда
				ТекстСообщения = НСтр("ru = 'В одном чеке, пробиваемом в ККТ с передачей данных, могут пробиваться товары, со складов использующих один режим налогообложения (ЕНВД, ЕСХН, ПСН). Склады %1 и %2 используют разные режимы налогообложения'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект.Товары[0].Склад, Объект.Товары[Инд].Склад);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Товары[" + Инд + "].Склад");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьРазныхНалоговыхРежимовСкладов()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыОсобыхНалоговОрганизацийСрезПоследних.ВидНалога
	|ИЗ
	|	РегистрСведений.ВидыОсобыхНалоговОрганизаций.СрезПоследних(&Дата, Склад.Магазин = &Магазин) КАК ВидыОсобыхНалоговОрганизацийСрезПоследних";
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	Результат = Запрос.Выполнить().Выбрать();
	
	ВозможныРазныеНалоговыеРежимыСкладов = Результат.Количество() > 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормуSMSИEmail()
	
	Если ЗначениеЗаполнено(ДанныеSMSИлиEmail)
		И ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Если ОтказКлиентаОтСохраненияТелефонаEmail Тогда
			Элементы.ДекорацияОтказКлиентаОтСохраненияТелефонаEmail.Картинка = БиблиотекаКартинок.НеСохранять16;
		Иначе
			Элементы.ДекорацияОтказКлиентаОтСохраненияТелефонаEmail.Картинка = БиблиотекаКартинок.Сохранить16;
		КонецЕсли;
	Иначе
		Элементы.ДекорацияОтказКлиентаОтСохраненияТелефонаEmail.Картинка = БиблиотекаКартинок.Пустая;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСистемуНалогообложенияНаФорме()
	
	Элементы.СистемаНалогообложенияСтрокой.Видимость = ВозможныРазныеНалоговыеРежимыСкладов;
	
	Если ЗначениеЗаполнено(Объект.ВидНалога) Тогда
		СистемаНалогообложенияСтрокой = Строка(Объект.ВидНалога);
	ИначеЕсли ЗначениеЗаполнено(ОбъектНалогооблаженияПоУСН)  Тогда
		СистемаНалогообложенияСтрокой = НСтр("ru = 'Упрощенная. '") + Строка(ОбъектНалогооблаженияПоУСН);
	Иначе
		СистемаНалогообложенияСтрокой = Строка(СистемаНалогообложения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСистемуНалогооблажения(ДатаДокумента, Организация)
	
	Если НЕ ВозможныРазныеНалоговыеРежимыСкладов Тогда
		Если Элементы.СистемаНалогообложенияСтрокой.Видимость Тогда
			Элементы.СистемаНалогообложенияСтрокой.Видимость = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СистемыНалогообложенияОрганизацийСрезПоследних.СистемаНалогообложения,
	|	СистемыНалогообложенияОрганизацийСрезПоследних.ОбъектНалогообложения
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&ДатаДокумента, Организация = &Организация) КАК СистемыНалогообложенияОрганизацийСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация"  , Организация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
			СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
			ОбъектНалогооблаженияПоУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка();
		Иначе
			СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная;
			
			Если Выборка.ОбъектНалогообложения = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда
				ОбъектНалогооблаженияПоУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы;
			Иначе
				ОбъектНалогооблаженияПоУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
		ОбъектНалогооблаженияПоУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

#Область ЕГАИС

&НаКлиенте
Процедура ВвестиАкцизнуюМарку(ИдентификаторСтроки, СтрокаТовара, ТекущееПоле = "КоличествоУпаковок")
	
	ПараметрыСканированияАкцизнойМарки = ИнтеграцияЕГАИСРТКлиентСервер.ПараметрыСканированияАкцизнойМарки();
	ПараметрыСканированияАкцизнойМарки.ТекущееПоле = ТекущееПоле;
	Если СтрокаТовара.НеобходимостьВводаКодаМаркировки Тогда
		ПараметрыСканированияАкцизнойМарки.Вставить("КодыМаркировки", Истина);
		ИмяТаблицы = "КодыМаркировки";
	Иначе
		ИмяТаблицы = "АкцизныеМарки";
	КонецЕсли;
	
	ПараметрыСканированияАкцизнойМарки.АдресВХранилище = АдресМарокВХранилище(СтрокаТовара.КлючСвязи, ИмяТаблицы);
	ПараметрыСканированияАкцизнойМарки.ОткрытьФормуМножественногоВвода = НЕ СтрокаТовара.НеобходимостьВводаКодаМаркировки;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		ПараметрыСканированияАкцизнойМарки.Операция = "Возврат";
	КонецЕсли;
	
	ИнтеграцияЕГАИСРТКлиент.ВвестиАкцизнуюМарку(ЭтотОбъект, СтрокаТовара, ПараметрыСканированияАкцизнойМарки);
	
КонецПроцедуры

&НаСервере
Функция АдресМарокВХранилище(КлючСвязи, ИмяТаблицы)
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", КлючСвязи);
	СтрокиМарок = Объект[ИмяТаблицы].НайтиСтроки(СтруктураОтбора);
	АдресМарок = ПоместитьВоВременноеХранилище(СтрокиМарок, УникальныйИдентификатор);
	Возврат АдресМарок;
КонецФункции

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(ТранспортныйМодуль, ДанныеЕГАИСДостаточны, НомерЧека, ЕстьАлкогольнаяПродукцияЕГАИС = Неопределено)
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа
		И НЕ Объект.ОперацияСДенежнымиСредствами Тогда
		СкидкиНаценкиСерверПереопределяемый.АктивироватьСкидкиПоИдентификаторуЧека(Объект.Ссылка, Объект.Магазин, Объект.Дата);
	КонецЕсли;
	ОбщиеПараметры  = Документы.ЧекККМ.ПодготовитьДанныеДляПробитияЧека(Объект, Объект.Ссылка, ТранспортныйМодуль, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС, НомерЧека);
	Возврат ОбщиеПараметры;
	
КонецФункции

&НаСервере
Функция ЗаполнитьМаркиНаСервере(АдресВХранилище, ДополнительныеПараметры, Номенклатура, Характеристика)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", ДополнительныеПараметры.ТекущийКлючСвязи);

	МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);

	Для Каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
		Объект.АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
	КонецЦикла;
			
	КоличествоУпаковок = 0;
	
	ТаблицаМарок = ПолучитьИзВременногоХранилища(АдресВХранилище);
	Для Каждого СтрокаМарки Из ТаблицаМарок Цикл
			
		ДанныеШтрихкодаУпаковки = ПолучитьДанныеШтрихкодаУпаковки(Объект.Организация, 
																	Объект.Магазин, 
																	СтрокаМарки.КодАкцизнойМарки,
																	ДополнительныеПараметры.ТекущийКлючСвязи,
																	Номенклатура,
																	Характеристика); 
		СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаАкцизнаяМарка, ДанныеШтрихкодаУпаковки);
		
		КоличествоУпаковок = КоличествоУпаковок + 1;
	КонецЦикла;
	
	Возврат КоличествоУпаковок;
	
КонецФункции

&НаКлиенте
Процедура ПредставитьТелефонИEmailКлиент()
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		Если ЗначениеЗаполнено(Объект.Телефон) Тогда
			СохраненныйТелефон = Число(Объект.Телефон);
		Иначе
			СохраненныйТелефон = 0;
		КонецЕсли;
		Телефон = 0;
		ПодключаемоеОборудованиеРТКлиент.ПреобразоватьТелефонКПользовательсткомуВиду(СохраненныйТелефон, Телефон, ТелефонСтрокой);
		ДанныеSMSИлиEmail = ТелефонСтрокой;
	ИначеЕсли ЗначениеЗаполнено(Объект.АдресЭП) Тогда
		ДанныеSMSИлиEmail = Объект.АдресЭП;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеШтрихкодаУпаковки(Организация, Магазин, Штрихкод, КлючСвязи, Номенклатура, Характеристика)
	
	Возврат ИнтеграцияЕГАИСРТ.СформироватьДанныеПоАкцизнымМаркам(Организация, Магазин, Штрихкод, КлючСвязи, Номенклатура, Характеристика);
		
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ПослеПередачиЧекаЕГАИС(Изменения, ПараметрыВыполнения) Экспорт
	
	ЕстьОшибки = (Изменения.Количество() <> 1);
	
	Ошибки = Новый Массив;
	Для Каждого ЭлементДанных Из Изменения Цикл
		Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Ошибки.Добавить(ЭлементДанных.ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	Если Ошибки.Количество() > 0 Тогда
		Ошибки.Вставить(0, НСтр("В процессе передачи данных в ЕГАИС возникли ошибки:"));
	КонецЕсли;
	ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	ПараметрыВыполнения.ПродолжитьПечать = Не ЕстьОшибки;
	ПараметрыВыполнения.ОписаниеОшибки   = ОписаниеОшибки;
	
	Если НЕ ЕстьОшибки Тогда
		ПараметрыВыполнения.Вставить("АдресЧека",   Изменения[0].ИдентификаторЗапроса);
		ПараметрыВыполнения.Вставить("ПодписьЧека", Изменения[0].Подпись);
		
		ИННОрганизации = "";
		КППОрганизации = "";
		НаименованиеОрганизации = "";
		
		Если ЗначениеЗаполнено(Изменения[0].ОрганизацияЕГАИС) Тогда
			РеквизитыОрганизацииЕГАИС = ИнтеграцияЕГАИСРТВызовСервера.ЗначенияРеквизитовОбъекта(Изменения[0].ОрганизацияЕГАИС, "ИНН, КПП, Наименование");
			
			ИННОрганизации = РеквизитыОрганизацииЕГАИС.ИНН;
			КППОрганизации = РеквизитыОрганизацииЕГАИС.КПП;
			
			НаименованиеОрганизации = СокрЛП(РеквизитыОрганизацииЕГАИС.Наименование);
			Если ПустаяСтрока(НаименованиеОрганизации) Тогда
				НаименованиеОрганизации = ПараметрыВыполнения.ВходныеПараметры.ОрганизацияНазвание;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыВыполнения.Вставить("ИНН", ИННОрганизации);
		ПараметрыВыполнения.Вставить("КПП", КППОрганизации);
		ПараметрыВыполнения.Вставить("НаименованиеОрганизации", НаименованиеОрганизации);
		
		Объект.АдресЧекаЕГАИС = ПараметрыВыполнения.АдресЧека;
		Объект.ПодписьЧекаЕГАИС = ПараметрыВыполнения.ПодписьЧека;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ДеактивироватьСкидкиПоИдентификаторуЧека()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		СкидкиНаценкиСерверПереопределяемый.ДеактивироватьСкидкиПоИдентификаторуЧека(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПогаситьОднократныеСкидки()
	
	СкидкиНаценкиСерверПереопределяемый.ПогаситьОднократныеСкидки(Объект);
	
КонецПроцедуры

#Область РаботаСБуферомОбмена

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента");
		
		Если ТипОборудованияКассыККМ = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ") Тогда
			Если Объект.Товары.Количество() > 1 Тогда
				ТекстСообщенияПриОшибке = НСтр("ru = 'Недопустимо добавлять в один чек товары и услуги по различным договорам платежных агентов'");
				СтруктураПараметровПроверки = Новый Структура();
				СтруктураПараметровПроверки.Вставить("ДоговорПлатежногоАгента", Объект.ДоговорПлатежногоАгента);
				СтруктураПараметровПроверки.Вставить("ТекстСообщения", ТекстСообщенияПриОшибке);
				СтруктураДействий.Вставить("ПроверитьОтличныеДоговорыПлатежныхАгентов", СтруктураПараметровПроверки);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураДействий.Вставить("ОчиститьДанныеПоЗаказу");
		СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"   , ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		СтруктураПроверкиАМ = Новый Структура();
		СтруктураПроверкиАМ.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураПроверкиАМ);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаКодаМаркировки", СтруктураПроверкиАМ);
		
		СтруктураПараметровДействия = Новый Структура;
		СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
		СтруктураПараметровДействия.Вставить("РабочееМесто", РабочееМесто);
		СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДействия);
		
		СтруктураПараметровДействия = Новый Структура();
		СтруктураПараметровДействия.Вставить("Дата", Объект.Дата);
		СтруктураПараметровДействия.Вставить("Организация", Объект.Организация);
		СтруктураПараметровДействия.Вставить("Магазин", Объект.Магазин);
		СтруктураДействий.Вставить("ЗаполнитьВидНалога", СтруктураПараметровДействия);
		
		СтруктураПараметровСтавкиНДС = Новый Структура;
		СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
		СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
		
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		
		СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
		
		Если ИспользоватьАссортимент Тогда
			СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", АссортиментКлиентСервер.ПараметрыПроверкиАссортимента(Объект, Истина));
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПроверитьЗапретРозничнойПродажи", СкидкиНаценкиКлиентСервер.ПараметрыПроверкиЗапретаРозничнойПродажи(Объект));
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьКэшированныеЗначенияДляУчетаСерий(ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий, Ложь);
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);		
		
		ОбновитьИтоговыеПоказателиСервер();
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
			ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьКэшированныеЗначенияДляУчетаСерий(ТекущаяСтрока,
			КэшированныеЗначения,ПараметрыУказанияСерий,Ложь);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатовВСтроке(ТекущаяСтрока);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
		Если ПропуститьАвтоматическийРасчетСкидок Тогда
			ПропуститьАвтоматическийРасчетСкидок = Ложь;
		КонецЕсли;
		
		Если ТипОборудованияКассыККМ = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ") Тогда
			Если Объект.Товары.Количество() = 1 Тогда
				Объект.ДоговорПлатежногоАгента = ТекущаяСтрока.ДоговорПлатежногоАгента;
			КонецЕсли;
		КонецЕсли;
						
	КонецЦикла;
	
	КопированиеСтрокСервер.ОчиститьБуферОбмена();
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
		
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция КодСоответствуетНоменклатуреИУпаковке(КодМаркировки, ДополнительныеПараметры)
	
	Возврат РозничныеПродажиСервер.КодСоответствуетНоменклатуреИУпаковке(ЭтотОбъект, КодМаркировки, ДополнительныеПараметры);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтавкиНДС()
	
	ТекущаяДата = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	ДатаПереходногоПериода = УчетНДС.ДатаПереходногоПериода();
	ЭтоВозврат  = Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат;
	
	Если ЗначениеЗаполнено(Объект.ЧекККМПродажа) И Объект.ЧекККМПродажа.Дата < ДатаПереходногоПериода  //Возврат чека за 2018 год.
		И ТекущаяДата > ДатаПереходногоПериода И ЭтоВозврат Тогда
		
		УчетНДС.ЗаполнитьСписокВыбораСтавокНДС(Элементы, ДатаПереходногоПериода - 86400);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ДокументРасчета) И Объект.ДокументРасчета.Дата < ДатаПереходногоПериода //Возврат чека на Аванс за 2018 год.
		И ТекущаяДата > ДатаПереходногоПериода И ЭтоВозврат Тогда
		
		УчетНДС.ЗаполнитьСписокВыбораСтавокНДС(Элементы, ДатаПереходногоПериода - 86400);
		
	Иначе 
		
		УчетНДС.ЗаполнитьСписокВыбораСтавокНДС(Элементы, ТекущаяДата);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
