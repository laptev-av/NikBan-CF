
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОповещениеВопросВнесениеДенегВКассуККМ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = "Да" Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьВнесениеДенегВКассуККМ(ДополнительныеПараметры.ПараметрДействия)
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВводЧислаИзымаемойСуммыЗавершение(РезультатОперации, ПараметрыОперации) Экспорт;
	
	Если РезультатОперации <> Неопределено И РезультатОперации.Результат Тогда
		ТекстСообщения = НСтр("ru = 'Выполнена выемка денежных средств из %КассаККМ% на сумму %ИзымаемаяСумма%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КассаККМ%", Строка(РезультатОперации.КассаККМ));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИзымаемаяСумма%", Формат(РезультатОперации.ИзымаемаяСумма, "ЧЦ=15; ЧДЦ=2"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если ПараметрыОперации.ПоследняяОперация Тогда
		ЭтаФорма.Доступность = Истина;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОперации.ТекущийЭлемент < ПараметрыОперации.КоличествоЭлементов Тогда
		
		СтрокаВыручки = ПараметрыОперации.СписокВидовВыручки.Получить(ПараметрыОперации.ТекущийЭлемент);
		ПараметрыОперации.ТекущийЭлемент = ПараметрыОперации.ТекущийЭлемент + 1;
		
		Если ПараметрыОперации.ОсталосьИзъять = 0 Тогда
			ЭтаФорма.Доступность = Истина;
			Возврат;
		КонецЕсли;
			
		Если СтрокаВыручки.СуммаОстаток >= ПараметрыОперации.ОсталосьИзъять Тогда
			СуммаВыемки = ПараметрыОперации.ОсталосьИзъять;
			ПараметрыОперации.ОсталосьИзъять = 0;
		Иначе
			СуммаВыемки = СтрокаВыручки.СуммаОстаток;
			ПараметрыОперации.ОсталосьИзъять = ПараметрыОперации.ОсталосьИзъять - СтрокаВыручки.СуммаОстаток;
		КонецЕсли;
			
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДоговорПлатежногоАгента", СтрокаВыручки.ДоговорПлатежногоАгента);
		
		ПараметрыВыполнения = ДенежныеСредстваКлиент.ПараметрыВыполненияОперацииВыемкаДенег();
		ПараметрыВыполнения.ИзымаемаяСумма = СуммаВыемки;
		ПараметрыВыполнения.КассаККМ = КассаККМ;
		ПараметрыВыполнения.УникальныйИдентификатор = УникальныйИдентификатор;
		ПараметрыВыполнения.ДополнительныеПараметры = ДополнительныеПараметры; 
		
		Оповещение = Новый ОписаниеОповещения("ОповещениеВводЧислаИзымаемойСуммыЗавершение", ЭтотОбъект, ПараметрыОперации);
		ДенежныеСредстваКлиент.НачатьВыемкуДенег(Оповещение, ПараметрыВыполнения); 
		
	Иначе
		
		Если ПараметрыОперации.ОсталосьИзъять  > 0 Тогда
			
			ПараметрыОперации.ПоследняяОперация = Истина;
			ПараметрыВыполнения = ДенежныеСредстваКлиент.ПараметрыВыполненияОперацииВыемкаДенег();
			ПараметрыВыполнения.ИзымаемаяСумма = ПараметрыОперации.ОсталосьИзъять;
			ПараметрыВыполнения.КассаККМ = КассаККМ;
			ПараметрыВыполнения.УникальныйИдентификатор = УникальныйИдентификатор;
			
			Оповещение = Новый ОписаниеОповещения("ОповещениеВводЧислаИзымаемойСуммыЗавершение", ЭтотОбъект, ПараметрыОперации);
			ДенежныеСредстваКлиент.НачатьВыемкуДенег(Оповещение, ПараметрыВыполнения); 
			
		Иначе
			ЭтаФорма.Доступность = Истина;
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВводЧислаИзымаемойСуммы(ЗначениеЧисла, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЧисла = Неопределено И ЗначениеЧисла > 0 Тогда
		
		ОсталосьИзъять = ЗначениеЧисла;
		ЗаполнитьСписокВидовВыручки();
		
		ПараметрыОперации = Новый Структура();
		ПараметрыОперации.Вставить("СписокВидовВыручки" , СписокВидовВыручки);
		ПараметрыОперации.Вставить("КоличествоЭлементов", СписокВидовВыручки.Количество());
		ПараметрыОперации.Вставить("ТекущийЭлемент"     , 0);
		ПараметрыОперации.Вставить("ОсталосьИзъять"     , ОсталосьИзъять);
		ПараметрыОперации.Вставить("ПоследняяОперация"  , Ложь);
		
		ЭтаФорма.Доступность = Ложь;
		ОповещениеВводЧислаИзымаемойСуммыЗавершение(Неопределено, ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуЗакрытияКассовойСмены(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	УстановитьДоступностьКомандСозданияДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуПроверкиНепробитыхЧеков(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если РезультатОткрытияФормы = НСтр("ru = 'Закрытие смены'") Тогда
		ПродолжитьОткрытиеОбработкиЗакрытияКассовойСмены();
	Иначе
		ТекстОшибки = НСтр("ru = 'Закрытие кассовой смены прервано пользователем.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаСуммыФактическойВыемки(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	СуммаФактическойВыемки = 0;
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		ЗначениеВыбораЧисло = РезультатОткрытияФормы.ВведенноеЧисло;
		Если ЗначениеЗаполнено(ЗначениеВыбораЧисло) Тогда
			СуммаФактическойВыемки = ЗначениеВыбораЧисло;
		КонецЕсли;
		
		ЗавершитьОткрытиеОбработкиЗакрытияКассовойСмены(СуммаФактическойВыемки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетБезГашенияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Доступность 	= Истина;
	ТекстСообщения 	= "";
	ТекстОшибки		= "";
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='Отчет без гашения успешно напечатан.'");
	Иначе
		ТекстСообщения 	= НСтр("ru='Отчет без гашения не напечатан.'");
		ТекстОшибки		= РезультатВыполнения.ОписаниеОшибки;
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстСообщения, ТекстОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКассовуюСменуЗавершение(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатОткрытияФормы = "Да" Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ВозможностьЗакрытияСмены() Тогда
		УстановитьДоступностьКомандСозданияДокументов();
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуПроверкиНепробитыхЧеков", ЭтотОбъект);
	ПройденаПроверкаНепробитыхЧеков = РозничныеПродажиКлиент.ПройденаПроверкаНепробитыхЧеков(КассаККМ, ОбработчикОповещения);
	
	Если ПройденаПроверкаНепробитыхЧеков Тогда
		ПродолжитьОткрытиеОбработкиЗакрытияКассовойСмены();
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование();
	ИспользоватьАгентскиеПлатежи = ПолучитьФункциональнуюОпцию("ИспользоватьАгентскиеПлатежиИРазделениеВыручки");
	
	ПроверитьИспользованиеПодключаемогоОборудования(ИспользоватьПодключаемоеОборудование);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Организация = Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;

	УстановитьОтборДинамическихСписковПриИзмененииСервер();
	
	ОбщегоНазначенияРТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список", "Дата");
	ОбщегоНазначенияРТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокРасходныеОрдераКВнесениюДенег", "СписокРасходныеОрдераКВнесениюДенегДата");
	
	Элементы.ФормаЧекККМ.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.ЧекККМ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьКомандСозданияДокументов();
	УстановитьДоступностьКассы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// Вставить содержимое обработчика.
	Если ИмяСобытия = "ИзменениеСостоянияКассовойСмены" 
	   И КассаККМ = Параметр Тогда
		УстановитьДоступностьКомандСозданияДокументов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	КассаККМ = Настройки.Получить("КассаККМ");
	Магазин  = Настройки.Получить("Магазин");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Организация = Настройки.Получить("Организация");
	Иначе
		Организация = Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			КассаККМ = Справочники.КассыККМ.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтборДинамическихСписковПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Документ.ЧекККМ.Форма.ФормаДокумента.Открытие");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборМагазинПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписковПриИзмененииКлиент();
	УстановитьДоступностьКомандСозданияДокументов();
	УстановитьДоступностьКассы();
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписковПриИзмененииКлиент();
	УстановитьДоступностьКомандСозданияДокументов();
	УстановитьДоступностьКассы();
КонецПроцедуры

&НаКлиенте
Процедура ОтборКассаККМПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписковПриИзмененииКлиент();
	УстановитьДоступностьКомандСозданияДокументов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Документ.ЧекККМ.Форма.ФормаДокумента.СозданиеНового");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокРасходныеОрдераКВнесениюДенег

&НаКлиенте
Процедура СписокРасходныеОрдераКВнесениюДенегВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыполнитьВнесениеДенегВКассуККМКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьКассовуюСмену(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		ТекстОшибки = НСтр("ru='Выберите кассу ККМ!'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ЗакрытьКассовуюСменуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(НСтр("ru = 'Закрыть кассовую смену?'"),,,ОбработчикОповещения,);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетБезГашения(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		ТекстОшибки = НСтр("ru='Выберите кассу ККМ!'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстОшибки);		
		Возврат;
	КонецЕсли;
	
	ПараметрыКассыККМ       = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если ИспользоватьПодключаемоеОборудование И НЕ ИспользоватьКассуККМБезПодключенияОборудования Тогда
		
		Доступность = Ложь;
		
		ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперации();
		Кассир = "";
		СтандартнаяОбработка = Истина;
		МенеджерОборудованияКлиентСерверПереопределяемый.ОбработкаЗаполненияИмяКассира(Кассир, СтандартнаяОбработка); 
		ПараметрыОперации.Кассир = ?(Не СтандартнаяОбработка, Кассир, НСтр("ru='Администратор'")); 
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОтчетБезГашенияЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьФормированиеОтчетаБезГашения(ОповещениеПриЗавершении, 
																	УникальныйИдентификатор, 
																	ПараметрыОперации, 
																	ИдентификаторУстройства);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКСпискуЧековККМ(Команда)
	
	УстановитьТекущуюСтраницуФормы(Элементы.ГруппаСписокЧековККМ);
	
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку "Внесение денег".
//
&НаКлиенте
Процедура ВнесениеДенегВКассу(Команда)
	
	ОчиститьСообщения();
	
	ОтборыСписковКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРасходныеОрдераКВнесениюДенег, "Организация", Организация);
	ОтборыСписковКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРасходныеОрдераКВнесениюДенег, "КассаККМ", КассаККМ);

	УстановитьТекущуюСтраницуФормы(Элементы.ГруппаВнесениеДенег);
	
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку "Выемка денег".
//
&НаКлиенте
Процедура ВыемкаДенег(Команда)
	
	ОчиститьСообщения();
	
	ТекстПодсказки = НСтр("ru='Сумма выемки из кассы %1'"); 
	
	ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстПодсказки,
						КассаККМ);
						
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВводЧислаИзымаемойСуммы", ЭтотОбъект);
	НачальноеЗначение = 0;
	ПоказатьВводЧисла(ОбработчикОповещения, НачальноеЗначение, ТекстПодсказки, 15, 2);
	
КонецПроцедуры

// Процедура выполняет создание документа внесение денежных средств в кассу ККМ.
//
&НаКлиенте
Процедура СоздатьДокументВнесениеДенежныхСредствВКассу(Команда)
	
	ВыполнитьВнесениеДенегВКассуККМКлиент();
	
КонецПроцедуры

// Процедура выполняет создание документа Чек ККМ на основании Чека ККМ.
//
&НаКлиенте
Процедура СоздатьДокументЧекККМ(Команда)
	
	ЧекККМСсылка = Элементы.Список.ТекущаяСтрока;
	
	Если ЗначениеЗаполнено(ЧекККМСсылка) Тогда
		
		СтруктураОснования = Новый Структура; 
		СтруктураОснования.Вставить("ДанныеЗаполнения", ЧекККМСсылка);
		СтруктураОснования.Вставить("СоздатьЧекПродажи");
		
		ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаДокумента", Новый Структура("Основание", СтруктураОснования));
		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура ПроверитьИспользованиеПодключаемогоОборудования(ИспользоватьПодключаемоеОборудование)
	
	ТипыПодключенногоОборудования = МенеджерОборудованияСерверПовтИсп.ТипыПодключенногоОборудования();
	ИспользоватьПодключаемоеОборудование = ОбщегоНазначенияРТ.ИспользоватьПодключаемоеОборудование(ТипыПодключенногоОборудования);
	
КонецПроцедуры

// Процедура создания документа внесение денежных средств в кассу ККМ.
//
&НаКлиенте
Процедура ВыполнитьВнесениеДенегВКассуККМКлиент()
	Перем ПараметрСуммаВнесения;
	
	ТекущиеДанные = Элементы.СписокРасходныеОрдераКВнесениюДенег.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрДействия = Новый Структура;
	
	ПараметрДействия.Вставить("СуммаВнесения",ТекущиеДанные.СуммаВнесения);
	ПараметрДействия.Вставить("Ссылка",ТекущиеДанные.Ссылка);
	ПараметрДействия.Вставить("КассаККМ",ТекущиеДанные.КассаККМ);
	
	Если ТекущиеДанные.Свойство("СуммаВнесения", ПараметрСуммаВнесения) И ПараметрСуммаВнесения <= 0.00 Тогда
		Текст = НСтр("ru = 'По выбранному документу не требуется выполнять внесение денежных средств в кассу ККМ'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(Текст);
		Возврат;
	Иначе
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Будет выполнено внесение денежных средств в кассу %1 на сумму %2 руб. %3По документу %4%5Продолжить?'"),
							ТекущиеДанные.КассаККМ,
							Формат(ТекущиеДанные.СуммаВнесения, "ЧЦ=15; ЧДЦ=2"),
							Символы.ПС,
							Строка(ТекущиеДанные.Ссылка),
							Символы.ПС
						);
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросВнесениеДенегВКассуККМ", ЭтотОбъект, ДополнительныеПараметры);
		ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(ТекстВопроса, 
																НСтр("ru = 'Внесение денежных средств в кассу по документу'") + " " + Строка(ТекущиеДанные.Ссылка),
																,
																ОбработчикОповещения,
																ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Завершает на клиенте внесение денег в кассу ККМ.
//
&НаКлиенте
Процедура ЗавершитьВнесениеДенегВКассуККМ(ПараметрДействия)
	
	ПараметрыВыполнения = ДенежныеСредстваКлиент.ПараметрыВыполненияОперацииВнесениеДенег();
	ПараметрыВыполнения.СуммаВнесения = ПараметрДействия.СуммаВнесения; 
	ПараметрыВыполнения.РКО = ПараметрДействия.Ссылка; 
	ПараметрыВыполнения.КассаККМ = ПараметрДействия.КассаККМ;
	ПараметрыВыполнения.УникальныйИдентификатор = УникальныйИдентификатор;
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьВнесениеДенегВКассуККМЗавершение", ЭтотОбъект, ПараметрыВыполнения);
	ДенежныеСредстваКлиент.НачатьВнесениеДенег(Оповещение, ПараметрыВыполнения); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВнесениеДенегВКассуККМЗавершение(РезультатВыполнения, ПараметрыВыполнения) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ВернутьсяКСпискуЧековККМ(Команды.ВернутьсяКСпискуЧековККМ);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик команды "ОткрытьКассовуюСмену".
//
&НаКлиенте
Процедура ОткрытьКассовуюСмену(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		ТекстОшибки = НСтр("ru='Выберите кассу ККМ!'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	ТекстПереходящегоОстатка = "";
	
	ПараметрыКассыККМ       = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КассаККМ", КассаККМ);
	ДополнительныеПараметры.Вставить("Магазин", ПараметрыКассыККМ.Магазин);
	ДополнительныеПараметры.Вставить("Организация", ПараметрыКассыККМ.Организация);
	
	ПроверитьИспользованиеПодключаемогоОборудования(ИспользоватьПодключаемоеОборудование);
	
	Если ИспользоватьПодключаемоеОборудование И НЕ ИспользоватьКассуККМБезПодключенияОборудования И ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		ЭтаФорма.Доступность = Ложь;
		
		ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		ФИОКассира = ОбщегоНазначенияРТВызовСервера.ФИОФизЛицаПользователяСУчетомИзмененныхПрав();
		Если не ФИОКассира = "" Тогда
			ПараметрыОперации.Кассир = ФИОКассира;
		Иначе
			ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ОткрытьКассовуюСменуЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьОткрытиеСменыНаФискальномУстройстве(Оповещение, УникальныйИдентификатор, ПараметрыОперации, ИдентификаторУстройства, , ДополнительныеПараметры);
	Иначе
		Результат = ОткрытьКассовуюСменуНаСервереБезКонтекста(КассаККМ, ОписаниеОшибки, ТекстПереходящегоОстатка);
		Если Не Результат Тогда
			ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
			                            |Смена не открыта.
			                            |Дополнительное описание:
			                            |%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстСообщения, ОписаниеОшибки);
		ИначеЕсли ЗначениеЗаполнено(ТекстПереходящегоОстатка) Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстПереходящегоОстатка, ОписаниеОшибки);
		КонецЕсли;
		УстановитьДоступностьКомандСозданияДокументов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКассовуюСменуЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда 
		ОписаниеОшибки = "";
		ТекстПереходящегоОстатка = "";
		Результат = ОткрытьКассовуюСменуНаСервереБезКонтекста(КассаККМ, ОписаниеОшибки, ТекстПереходящегоОстатка);
		Если Не Результат Тогда
			ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка. Смена не открыта.
							       |Дополнительное описание: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстСообщения, ОписаниеОшибки);
		ИначеЕсли ЗначениеЗаполнено(ТекстПереходящегоОстатка) Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстПереходящегоОстатка, ОписаниеОшибки);
		КонецЕсли;
		УстановитьДоступностьКомандСозданияДокументов();
	Иначе
		ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
			                      |Смена не открыта на фискальном регистраторе.
			                      |%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстСообщения, РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры


// Функция выполняет открытие кассовой смены на сервере.
//
&НаСервереБезКонтекста
Функция ОткрытьКассовуюСменуНаСервереБезКонтекста(КассаККМ, ОписаниеОшибки = "", ТекстПереходящегоОстатка = "")
	
	Возврат РозничныеПродажиСервер.ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки, ТекстПереходящегоОстатка);
	
КонецФункции

&НаСервере
Функция ВозможностьЗакрытияСмены()
	
	СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	Если НЕ СтруктураСостояниеКассовойСмены.СменаОткрыта Тогда
		
		ТекстОшибки = НСтр("ru='Кассовая смена не открыта!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Процедура устанавливает доступность кнопкам формы "ВнесениеДенег" и "ВыемкаДенег", если заполнено значение касса ККМ.
//
&НаКлиенте
Процедура УстановитьДоступностьКомандСозданияДокументов()
	
	ДоступностьЭлемента = ЗначениеЗаполнено(КассаККМ);
	
	СостояниеКассовойСмены = РозничныеПродажиВызовСервера.ПолучитьСостояниеКассовойСмены(КассаККМ);
	СменаОткрыта = СостояниеКассовойСмены.СменаОткрыта;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВнесениеДенег"       , "Доступность", ДоступностьЭлемента И СменаОткрыта);
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыемкаДенег"         , "Доступность", ДоступностьЭлемента И СменаОткрыта);
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОткрытьКассовуюСмену", "Доступность", ДоступностьЭлемента И НЕ СменаОткрыта);
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СнятьZОтчет"         , "Доступность", ДоступностьЭлемента И СменаОткрыта);
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтчетБезГашения"     , "Доступность", ДоступностьЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборДинамическихСписковПриИзмененииКлиент()
	
	УстановитьОтборДинамическихСписковПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическихСписковПриИзмененииСервер()
	
	УстановитьОтборДинамическихСписков("Магазин");
	УстановитьОтборДинамическихСписков("Организация");
	УстановитьОтборДинамическихСписков("КассаККМ");
	
КонецПроцедуры

// Процедура выполняет переход на страницу переданную в параметре.
// Параметры:
//           ТекущаяСтраница - ЭлементФормы - Страница, на которую необходимо перейти, сделать активной.
&НаКлиенте
Процедура УстановитьТекущуюСтраницуФормы(ТекущаяСтраница)
	
	Элементы.ГруппаСписок.ТекущаяСтраница = ТекущаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОткрытиеОбработкиЗакрытияКассовойСмены()
	
	СуммаФактическойВыемки = 0;
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаСуммыФактическойВыемки", ЭтотОбъект);
	СуммаВыемкиЗапрошена = РозничныеПродажиКлиент.ЗапроситьСуммуФактическойВыемки(КассаККМ, ОбработчикОповещения, УникальныйИдентификатор);
	Если НЕ СуммаВыемкиЗапрошена Тогда
		ЗавершитьОткрытиеОбработкиЗакрытияКассовойСмены(СуммаФактическойВыемки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОткрытиеОбработкиЗакрытияКассовойСмены(СуммаФактическойВыемки = 0)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КассаККМ"              , КассаККМ);
	ПараметрыФормы.Вставить("ВыполнитьЗакрытиеСразу", Истина);
	ПараметрыФормы.Вставить("СуммаФактическойВыемки", СуммаФактическойВыемки);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуЗакрытияКассовойСмены", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Обработка.ЗакрытиеКассовойСмены.Форма.Форма", ПараметрыФормы,ЭтотОбъект,,,, ОбработчикОповещения, Режим);
	
	УстановитьДоступностьКомандСозданияДокументов();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

// Процедура устанавливает отбор динамических списков формы.
//
&НаСервере
Процедура УстановитьОтборДинамическихСписков(ИмяРеквизита)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		Список, 
		ИмяРеквизита, 
		ЭтотОбъект[ИмяРеквизита], 
		ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]));
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		СписокРасходныеОрдераКВнесениюДенег, 
		ИмяРеквизита, 
		ЭтотОбъект[ИмяРеквизита], 
		ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]));
		
	
	ОтборыСписковКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СписокРасходныеОрдераКВнесениюДенег, 
		ИмяРеквизита, 
		ЭтотОбъект[ИмяРеквизита]);
		
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКассы()
	
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Магазин) Тогда
		Элементы.ОтборКассаККМ.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ОтборКассаККМ.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВидовВыручки()
	
	ФинансыСервер.ЗаполнитьСписокВидовВыручки(СписокВидовВыручки, КассаККМ);
	
КонецПроцедуры

#КонецОбласти
