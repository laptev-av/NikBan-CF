#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает документ для интерфейсной работы шаблона чека ККМ.
//
Функция ДокументДляШаблонаЧека() Экспорт
	Перем ДокументДляПечатиШаблона;
	
	ДокументДляПечатиШаблона = Документы.ЧекККМ.ПустаяСсылка();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЧекККМ.Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДокументДляПечатиШаблона = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ДокументДляПечатиШаблона;
	
КонецФункции

// Получает макет фискального чека.
//
Функция МакетФискальногоЧека(Ссылка, ШаблонЧека, ШиринаЧека, Параметры) Экспорт
	
	РезультатТовары       = Новый ТаблицаЗначений;
	РезультатПодарки      = Новый ТаблицаЗначений;
	
	МассивСтрокНабора = ШаблонЧека.Строки.НайтиСтроки(Новый Структура("ИмяМакета", "ПоляШаблонаТЧ_Подарки"));
	
	ВШаблонеЕстьПодарки = Ложь;
	
	Для каждого СтрокаПодарки Из МассивСтрокНабора Цикл
		Если СтрокаПодарки.Строки.Количество() > 0 Тогда
			ВШаблонеЕстьПодарки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ВШаблонеЕстьПодарки Тогда
		МассивСтрокШапкиИПодвала = ШаблонЧека.Строки.НайтиСтроки(Новый Структура("ИмяМакета", "ПоляШаблонаШапкаПодарки"));
		
		Для каждого СтрокаПодарки Из МассивСтрокШапкиИПодвала Цикл
			Если СтрокаПодарки.Строки.Количество() > 0 Тогда
				ВШаблонеЕстьПодарки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИмяМакета = "";
	Если ВШаблонеЕстьПодарки Тогда
		ИмяМакета = "ПоляШаблонаПодарки";
	КонецЕсли;
	
	ИмяМакетаБыло = "";
	СменилиМакет = Ложь;
	Если Параметры.Свойство("ИмяМакета",ИмяМакетаБыло) Тогда
		Если Не ИмяМакетаБыло = ИмяМакета Тогда
			Параметры.КомпоновщикМакета = Неопределено;
			СменилиМакет                = Истина;
			Параметры.ИмяМакета         = ИмяМакета;
		КонецЕсли;
	КонецЕсли;
	
	Значение = Неопределено;
	Если НЕ СменилиМакет И Параметры.Свойство("КэшТаблицыРезультатаКомпоновки", Значение) Тогда
		ТаблицыРезультатаКомпоновки        = Значение;
	Иначе
		// Значение по умолчанию
		ТаблицыРезультатаКомпоновки = УправлениеШаблонами.ВыполнитьКомпоновкуДанныхДляИерархическогоШаблона(ШаблонЧека, Ссылка, Параметры.СхемаКомпоновкиДанных, Параметры.КомпоновщикМакета,,ИмяМакета);
		Параметры.Вставить("КэшТаблицыРезультатаКомпоновки", ТаблицыРезультатаКомпоновки);
	КонецЕсли;
	
	Для каждого Таблицы Из ТаблицыРезультатаКомпоновки.Строки Цикл
		Если Таблицы.ЧастьЗапроса = "Товары" Тогда
			РезультатТовары = Таблицы.Строки;
		КонецЕсли;
		Если Таблицы.ЧастьЗапроса = "Подарки" Тогда
			РезультатПодарки = Таблицы.Строки;
		КонецЕсли;
	КонецЦикла;
	
	Структура = УправлениеШаблонами.ПолучитьИдентификаторыПользовательскихПолей(ШаблонЧека);
	
	// Механизм кэширования макетов.
	Если Параметры.КэшМакетов = Неопределено Тогда
		Структура.Вставить("КэшМакетов", Новый Соответствие);
	Иначе
		Структура.Вставить("КэшМакетов", Параметры.КэшМакетов);
	КонецЕсли;
	
	СтруктураМассивы = Новый Структура;
	
	// Подготовка Шапки и Подвала
	СтрокаШапка = ШаблонЧека.Строки.Найти("Шапка",,Ложь);
	Если СтрокаШапка <> Неопределено Тогда
		
		Если РезультатТовары.Количество() > 0 Тогда
			УправлениеШаблонами.ЗаполнитьСтруктуруПараметровШаблонаПоСтрокеТЧ(РезультатТовары.Родитель, Структура, СтрокаШапка);
		КонецЕсли;
		УправлениеШаблонами.ЗаполнитьСоставныеСтрокиПоСтруктуре(СтрокаШапка, Структура);
		
		МассивШапка = Новый Массив;
		Для каждого Строка2Уровня Из СтрокаШапка.Строки Цикл
			Значение = УправлениеШаблонами.ПолучитьМассивСтрокДляСтрокиДереваШаблона(Строка2Уровня, Структура);
			Соответствие = Новый Соответствие;
			Соответствие.Вставить(Строка2Уровня, Значение);
			МассивШапка.Добавить(Соответствие);
		КонецЦикла;
		СтруктураМассивы.Вставить("Шапка",МассивШапка);
		
	КонецЕсли;
	
	МассивПодвал = Новый Массив;
	Если РезультатПодарки.Количество()>0 Тогда
		СтрокаПодаркиЗаголовок = ШаблонЧека.Строки.Найти("Табличная часть ""Подарки"" (Заголовок)",,Ложь);
		
		Если СтрокаПодаркиЗаголовок <> Неопределено Тогда
			
			УправлениеШаблонами.ЗаполнитьСтруктуруПараметровШаблонаПоСтрокеТЧ(РезультатПодарки.Родитель, Структура, СтрокаПодаркиЗаголовок);
			УправлениеШаблонами.ЗаполнитьСоставныеСтрокиПоСтруктуре(СтрокаПодаркиЗаголовок, Структура);
			
			Для каждого Строка2Уровня Из СтрокаПодаркиЗаголовок.Строки Цикл
				Значение = УправлениеШаблонами.ПолучитьМассивСтрокДляСтрокиДереваШаблона(Строка2Уровня, Структура);
				Соответствие = Новый Соответствие;
				Соответствие.Вставить(Строка2Уровня, Значение);
				МассивПодвал.Добавить(Соответствие);
			КонецЦикла;
		КонецЕсли;
		
		СтрокаПодарки = ШаблонЧека.Строки.Найти("Табличная часть ""Подарки""",,Ложь);
		Если СтрокаПодарки <> Неопределено Тогда
			// Итоговая строка идет последней, ее не включаем в ТЧ.
			КоличествоСтрокРезультата = РезультатПодарки.Количество() - 1;
			Для Счетчик = 0 По КоличествоСтрокРезультата Цикл
				УправлениеШаблонами.ЗаполнитьСтруктуруПараметровШаблонаПоСтрокеТЧ(РезультатПодарки[Счетчик], Структура, СтрокаПодарки);
				УправлениеШаблонами.ЗаполнитьСоставныеСтрокиПоСтруктуре(СтрокаПодарки, Структура);
				
				Для каждого Строка2Уровня Из СтрокаПодарки.Строки Цикл
					Значение = УправлениеШаблонами.ПолучитьМассивСтрокДляСтрокиДереваШаблона(Строка2Уровня, Структура);
					Соответствие = Новый Соответствие;
					Соответствие.Вставить(Строка2Уровня, Значение);
					МассивПодвал.Добавить(Соответствие);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		СтрокаПодаркиПодвал = ШаблонЧека.Строки.Найти("Табличная часть ""Подарки"" (Подвал)",,Ложь);
		
		Если СтрокаПодаркиЗаголовок <> Неопределено Тогда
			
			УправлениеШаблонами.ЗаполнитьСтруктуруПараметровШаблонаПоСтрокеТЧ(РезультатПодарки.Родитель, Структура, СтрокаПодаркиПодвал);
			УправлениеШаблонами.ЗаполнитьСоставныеСтрокиПоСтруктуре(СтрокаПодаркиПодвал, Структура);
			
			Для каждого Строка2Уровня Из СтрокаПодаркиПодвал.Строки Цикл
				Значение = УправлениеШаблонами.ПолучитьМассивСтрокДляСтрокиДереваШаблона(Строка2Уровня, Структура);
				Соответствие = Новый Соответствие;
				Соответствие.Вставить(Строка2Уровня, Значение);
				МассивПодвал.Добавить(Соответствие);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаПодвал = ШаблонЧека.Строки.Найти("Подвал",,Ложь);
	Если СтрокаШапка <> Неопределено Тогда
		
		Если РезультатТовары.Количество() > 0 Тогда
			УправлениеШаблонами.ЗаполнитьСтруктуруПараметровШаблонаПоСтрокеТЧ(РезультатТовары.Родитель, Структура, СтрокаПодвал);
		КонецЕсли;
		УправлениеШаблонами.ЗаполнитьСоставныеСтрокиПоСтруктуре(СтрокаПодвал, Структура);
		
		Для каждого Строка2Уровня Из СтрокаПодвал.Строки Цикл
			Значение = УправлениеШаблонами.ПолучитьМассивСтрокДляСтрокиДереваШаблона(Строка2Уровня, Структура);
			Соответствие = Новый Соответствие;
			Соответствие.Вставить(Строка2Уровня, Значение);
			МассивПодвал.Добавить(Соответствие);
		КонецЦикла;
		
		СтруктураМассивы.Вставить("Подвал",МассивПодвал);
		
	КонецЕсли;
	
	КоличествоСтрокРезультата = РезультатТовары.Количество() - 1; // Итоговая строка идет последней, ее не включаем в ТЧ.
	Для Счетчик = 0 По КоличествоСтрокРезультата Цикл
		
		ТелоШапка = ШаблонЧека.Строки.Найти("Табличная часть ""Товары"" (Шапка)",,Ложь);
		УправлениеШаблонами.ЗаполнитьСтруктуруПараметровШаблонаПоСтрокеТЧ(РезультатТовары[Счетчик], Структура, ТелоШапка);
		УправлениеШаблонами.ЗаполнитьСоставныеСтрокиПоСтруктуре(ТелоШапка, Структура);
		
		МассивТелоШапка = Новый Массив;
		Для каждого Строка2Уровня Из ТелоШапка.Строки Цикл
			Значение = УправлениеШаблонами.ПолучитьМассивСтрокДляСтрокиДереваШаблона(Строка2Уровня, Структура);
			Соответствие = Новый Соответствие;
			Соответствие.Вставить(Строка2Уровня, Значение);
			МассивТелоШапка.Добавить(Соответствие);
		КонецЦикла;
		
		ТелоПодвал = ШаблонЧека.Строки.Найти("Табличная часть ""Товары"" (Подвал)",,Ложь);
		УправлениеШаблонами.ЗаполнитьСтруктуруПараметровШаблонаПоСтрокеТЧ(РезультатТовары[Счетчик], Структура, ТелоПодвал);
		УправлениеШаблонами.ЗаполнитьСоставныеСтрокиПоСтруктуре(ТелоПодвал, Структура);
		
		МассивТелоПодвал = Новый Массив;
		Для каждого Строка2Уровня Из ТелоПодвал.Строки Цикл
			Значение = УправлениеШаблонами.ПолучитьМассивСтрокДляСтрокиДереваШаблона(Строка2Уровня, Структура);
			Соответствие = Новый Соответствие;
			Соответствие.Вставить(Строка2Уровня, Значение);
			МассивТелоПодвал.Добавить(Соответствие);
		КонецЦикла;
		
		СтруктураМассивы.Вставить("ТелоШапка_"+Счетчик,МассивТелоШапка);
		СтруктураМассивы.Вставить("ТелоПодвал_"+Счетчик,МассивТелоПодвал);
		
	КонецЦикла;
	
	СтруктураМассивы.Вставить("РезультатКомпоновкиДанных", РезультатТовары);
	СтруктураМассивы.Вставить("КоличествоСтрокТабличнойЧасти", Счетчик);
	СтруктураМассивы.Вставить("ШиринаЧека", ШиринаЧека);
	
	// Механизм кэширования макетов.
	Кэш = Структура.КэшМакетов;
	
	СкидкиНаценкиСерверПереопределяемый.ОбработатьСтруктуруШаблонаЧекаПриПредварительномПросмотре(СтруктураМассивы, Ссылка);
	
	Возврат СтруктураМассивы;

КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//	Объект - ДокументОбъект или ДанныеФормыСтруктура - документ, для которого нужно сформировать параметры проверки.
//
// Возвращаемое значение:
//	Структура - Состав полей определяется требованиями функции
//	            ОбработкаТабличнойЧастиСервер.ЗаполнитьСтатусыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект)Экспорт
	
	ПоляСвязи = Новый Массив;
	
	ПараметрыУказанияСерий = Новый Структура;
	ИспользованиеСерийСклад = Ложь;
	
	ИспользованиеСерийСклад = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	ПараметрыУказанияСерий.Вставить("ИспользоватьСерииНоменклатуры", ИспользованиеСерийСклад);
	ПараметрыУказанияСерий.Вставить("ПоляСвязи",ПоляСвязи);
	ПараметрыУказанияСерий.Вставить("ЭтоОрдер", Истина);
	
	СкладскиеОперации = Новый Массив;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаВРозницу);
	Иначе
		СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента);
	КонецЕсли;
	
	ПараметрыУказанияСерий.Вставить("СкладскиеОперации", СкладскиеОперации);
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Определяет отбор на хозяйственную операцию, устанавливаемый на список выбора документа Чек ККМ в форме элемента
// справочника хранилище шаблонов.
//
Функция СвязьПараметровВыбораНаХозяйственнуюОперацию() Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет области шаблона.
//
Функция СформироватьПервичнуюСтруктуруШаблона(ИерархическийШаблон, ИмяОбъекта, ПервичнаяСтруктура, Загружать) Экспорт
	// Загрузим ИерархическийШаблон из макета.
	Если Загружать Тогда
		ТекстовыйДокумент = Документы.ЧекККМ.ПолучитьМакет("ШаблонФискальногоЧекаПоУмолчанию");
		Попытка
			Шаблон = ЗначениеИзСтрокиВнутр(ТекстовыйДокумент.ПолучитьТекст());
			Если ТипЗнч(Шаблон) <> Тип("ДеревоЗначений") Тогда
				Загружать = Ложь;
			КонецЕсли;
		Исключение
			Загружать = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если Загружать Тогда
		ИерархическийШаблон = Шаблон.Скопировать();
	Иначе
		НоваяГруппа = ИерархическийШаблон.Строки.Добавить();
		НоваяГруппа.Элемент = "Шапка";
		НоваяГруппа.Идентификатор = УправлениеШаблонами.ПолучитьИдентификатор();
		НоваяГруппа.ТипЭлемента = "ОбластьЧека";
		НоваяГруппа.ИмяМакета   = "ПоляШаблонаШапка";
		НоваяГруппа.ИмяОбъекта = ИмяОбъекта;
		
		НоваяГруппа = ИерархическийШаблон.Строки.Добавить();
		НоваяГруппа.Элемент = НСтр("ru = 'Табличная часть ""Товары"" (Шапка)'");
		НоваяГруппа.Идентификатор = УправлениеШаблонами.ПолучитьИдентификатор();
		НоваяГруппа.ТипЭлемента = "ОбластьЧека";
		НоваяГруппа.ИмяМакета   = "ПоляШаблонаТЧ_Товары";
		НоваяГруппа.ИмяОбъекта = ИмяОбъекта;
		
		НоваяГруппа = ИерархическийШаблон.Строки.Добавить();
		НоваяГруппа.Элемент = НСтр("ru = 'Табличная часть ""Товары"" (Подвал)'");
		НоваяГруппа.Идентификатор = УправлениеШаблонами.ПолучитьИдентификатор();
		НоваяГруппа.ТипЭлемента = "ОбластьЧека";
		НоваяГруппа.ИмяМакета   = "ПоляШаблонаТЧ_Товары";
		НоваяГруппа.ИмяОбъекта = ИмяОбъекта;
		
		НоваяГруппа = ИерархическийШаблон.Строки.Добавить();
		НоваяГруппа.Элемент = НСтр("ru = 'Табличная часть ""Подарки"" (Заголовок)'");
		НоваяГруппа.Идентификатор = УправлениеШаблонами.ПолучитьИдентификатор();
		НоваяГруппа.ТипЭлемента = "ОбластьЧека";
		НоваяГруппа.ИмяМакета   = "ПоляШаблонаШапкаПодарки";
		НоваяГруппа.ИмяОбъекта = ИмяОбъекта;
		
		НоваяГруппа = ИерархическийШаблон.Строки.Добавить();
		НоваяГруппа.Элемент = НСтр("ru = 'Табличная часть ""Подарки""'");
		НоваяГруппа.Идентификатор = УправлениеШаблонами.ПолучитьИдентификатор();
		НоваяГруппа.ТипЭлемента = "ОбластьЧека";
		НоваяГруппа.ИмяМакета   = "ПоляШаблонаТЧ_Подарки";
		НоваяГруппа.ИмяОбъекта = ИмяОбъекта;
		
		НоваяГруппа = ИерархическийШаблон.Строки.Добавить();
		НоваяГруппа.Элемент = НСтр("ru = 'Табличная часть ""Подарки"" (Подвал)'");
		НоваяГруппа.Идентификатор = УправлениеШаблонами.ПолучитьИдентификатор();
		НоваяГруппа.ТипЭлемента = "ОбластьЧека";
		НоваяГруппа.ИмяМакета   = "ПоляШаблонаШапкаПодарки";
		НоваяГруппа.ИмяОбъекта = ИмяОбъекта;
		
		НоваяГруппа = ИерархическийШаблон.Строки.Добавить();
		НоваяГруппа.Элемент = "Подвал";
		НоваяГруппа.Идентификатор = УправлениеШаблонами.ПолучитьИдентификатор();
		НоваяГруппа.ТипЭлемента = "ОбластьЧека";
		НоваяГруппа.ИмяМакета   = "ПоляШаблонаШапка";
		НоваяГруппа.ИмяОбъекта = ИмяОбъекта;
	КонецЕсли;
	
	Возврат Документы.ЧекККМ.ПустаяСсылка();
КонецФункции

// Функция выполняет добавление фискальных строк в дерево шаблона перед формированием
//  по нему представления чека ККМ.
//
// Параметры:
//  КопияШаблона          - КоллекцияСтрокДереваЗначений
//                          Коллекция строк в которую необходимо добавить фискальные строки.
//  ШиринаЧека            - Число
//                          Ширина чека в символах.
//  ОднаФискальнаяСтрока  - Булево
//                          Определяется наличие режима одна фискальная строка.
//
// Возвращаемое значение:
//   КоллекцияСтрокДереваЗначений   - Коллекция строк дерева значений.
//
Функция СформироватьФискальныеСтроки(КопияШаблона, ШиринаЧека, ОднаФискальнаяСтрока) Экспорт
	
	// Шапка
	
	Если ШиринаЧека < 18 Тогда
		Возврат КопияШаблона;
	КонецЕсли;
	
	ФР_Строка_0_0 = КопияШаблона.Строки.Найти("Шапка",,Ложь);
	Если ФР_Строка_0_0 <> Неопределено Тогда 
		
		// Первая фискальная строка
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР1");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "Таблица");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР1");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ВставитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, 0, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , НСтр("ru = 'Касса № 01'"));
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР2");
		ПараметрыФункции.Вставить("Ширина"          , 10);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		Если ШиринаЧека >= 25 Тогда
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.КассаККМ.Владелец.ИНН%%");
			ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаКассаККМОрганизацияИНН");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР3");
			ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека - 10);
			ПараметрыФункции.Вставить("РазмещениеТекста", 1); // Обрезать
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ПараметрыФункции.Вставить("Префикс"         , "ИНН: ");
			ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		КонецЕсли;
		
		// Вторая фискальная строка
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР4");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "Таблица");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР4");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ВставитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, 1, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.Date%%");
		ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаDate");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР5");
		ПараметрыФункции.Вставить("Ширина"          , 16);
		ПараметрыФункции.Вставить("РазмещениеТекста", 2); // Забивать
		ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
		ПараметрыФункции.Вставить("Префикс"         , "Дата  ");
		ПараметрыФункции.Вставить("Формат"         , "ДФ=dd.MM.yyyy");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		// Третья фискальная строка
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР7");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "Таблица");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР7");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ВставитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, 2, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.Date%%");
		ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаDate");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР8");
		ПараметрыФункции.Вставить("Ширина"          , 11);
		ПараметрыФункции.Вставить("РазмещениеТекста", 2); // Забивать
		ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
		ПараметрыФункции.Вставить("Префикс"         , "Время ");
		ПараметрыФункции.Вставить("Формат"          , "ДФ=чч:мм");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		Если ШиринаЧека >= 23 Тогда
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.НомерЧекаККМ%%");
			ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаНомерЧекаККМ");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР9");
			ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека-11);
			ПараметрыФункции.Вставить("РазмещениеТекста", 2); // Забивать
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ПараметрыФункции.Вставить("Префикс"         , "ЧЕК.№ ");
			ПараметрыФункции.Вставить("Формат"          , "ЧЦ=6; ЧВН=; ЧГ=0");
			ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		КонецЕсли;
		
	КонецЕсли;
	
	// Подвал
	
	ФР_Строка_0_0 = КопияШаблона.Строки.Найти("Подвал",,Ложь);
	Если ФР_Строка_0_0 <> Неопределено И ОднаФискальнаяСтрока Тогда
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР11");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "Таблица");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР11");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "Всего:");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР12");
		ПараметрыФункции.Вставить("Ширина"          , 6);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.СуммаДокумента%%");
		ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаСуммаДокумента");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР13");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека - 6);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ПараметрыФункции.Вставить("Формат"          , "ЧДЦ=2");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
	КонецЕсли;
	
	Если ФР_Строка_0_0 <> Неопределено Тогда
		
		Пробелы50 = "**************************************************";
		Пробелы = "";
		МинимальноеКоличествоСтрок = Цел(ШиринаЧека/50);
		Для Счетчик = 0 По МинимальноеКоличествоСтрок Цикл
			Пробелы = Пробелы + Пробелы50;
		КонецЦикла;
		Пробелы = Лев(Пробелы, ШиринаЧека);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , Пробелы);
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР14");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР15");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "Таблица");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР15");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ИТОГ");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР16");
		ПараметрыФункции.Вставить("Ширина"          , 4);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.СуммаДокумента%%");
		ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаСуммаДокумента");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР17");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека - 4);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ПараметрыФункции.Вставить("Формат"          , "ЧДЦ=2");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , Пробелы);
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР18");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, ПараметрыФункции);
		
	КонецЕсли;

	// Фискальные строки табличной части.
	
	Если НЕ ОднаФискальнаяСтрока Тогда
		
		ФР_Строка_0_0 = КопияШаблона.Строки.Найти("Табличная часть ""Товары"" (Подвал)",,Ложь);
		Если ФР_Строка_0_0 <> Неопределено Тогда
			
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР19");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СоставнаяСтрока");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР19");
			ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
			ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ФР_Строка_1_0 = ПечатьФискальныхЧеков.ВставитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, 0, ПараметрыФункции);
			
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "?(Структура%%Товары.Количество%% = 1,"""",Структура%%Товары.Количество%%)");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР20");
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ПараметрыФункции.Вставить("Формат"          , "ЧДЦ=3");
			ПараметрыФункции.Вставить("Вычислять"       , Истина);
			ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
			
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "?(Структура%%Товары.Количество%% = 1,"""","" Х "")");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР21");
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ПараметрыФункции.Вставить("Вычислять"       , Истина);
			ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
			
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "?(Структура%%Товары.Количество%% = 1,"""",Структура%%Товары.ЦенаБезСкидки%%)");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР22");
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ПараметрыФункции.Вставить("Вычислять"       , Истина);
			ПараметрыФункции.Вставить("Формат"          ,"ЧДЦ=2");
			ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
			
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Товары.Сумма%%");
			ПараметрыФункции.Вставить("ИмяКолонки"      , "ТоварыСумма");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР23");
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
			ПараметрыФункции.Вставить("Формат"          , "ЧДЦ=2");
			ПараметрыФункции.Вставить("Префикс"         , "=");
			ПечатьФискальныхЧеков.ВставитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, 1, ПараметрыФункции);
			
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР24");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "Таблица");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР24");
			ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
			ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ФР_Строка_1_0 = ПечатьФискальныхЧеков.ВставитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, 2, ПараметрыФункции);
			
			// Строка со скидкой
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР25");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СоставнаяСтрока");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР25");
			ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
			ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
			ФР_Строка_2_0  = ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
			
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , НСтр("ru = '?(Структура%%Скидки.ПроцентСкидки%% <> 0,""СКИДКА"", """")'"));
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР26");
			ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
			ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
			ПараметрыФункции.Вставить("Вычислять"       , Истина);
			ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_2_0.Строки, ПараметрыФункции);
			
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Скидки.ПроцентСкидки%%");
			ПараметрыФункции.Вставить("ИмяКолонки"      , "СкидкиПроцентСкидки");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР27");
			ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
			ПараметрыФункции.Вставить("Ширина"          , 6); // Переносить
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ПараметрыФункции.Вставить("Формат"          , "ЧДЦ=2");
			ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
			
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Скидки.СуммаСкидки%%");
			ПараметрыФункции.Вставить("ИмяКолонки"      , "СкидкиСуммаСкидки");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР28");
			ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
			ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека - 12); // Переносить
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ПараметрыФункции.Вставить("Формат"          , "ЧДЦ=2");
			ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КопияШаблона;
	
КонецФункции

// Инициализирует таблицы значений, содержащие данные документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт
	Перем СуммаБезналичных;
	
	ИспользоватьКомиссионнуюТорговлю = ДополнительныеСвойства.ИспользуетсяКомиссионнаяТорговля;
	ИспользоватьУчетИмпортныхТоваров = ДополнительныеСвойства.ИспользуетсяУчетИмпортныхТоваров;
	
	ЗапросАванс = Новый Запрос;
	ЗапросАванс.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Ссылка = &Ссылка";
	
	ЗапросАванс.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатАванс = ЗапросАванс.Выполнить();
	ЭтоАванс = РезультатАванс.Пустой();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ЧекККМОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|				ТОГДА ЧекККМОплата.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНаличных,
	|	СУММА(ЧекККМОплата.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	
	СуммаНаличных    = 0;
	СуммаОбщая       = 0;
	СуммаБезналичных = 0;
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СуммаНаличных = Выборка.СуммаНаличных;
		Если НЕ ЗначениеЗаполнено(СуммаНаличных) Тогда
			СуммаНаличных = 0;
		КонецЕсли;
		СуммаОбщая = Выборка.Сумма;
		
		Если НЕ ЗначениеЗаполнено(СуммаОбщая) Тогда
			СуммаОбщая = 0;
		КонецЕсли;
		СуммаБезналичных = СуммаОбщая - СуммаНаличных;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекККМ.Дата КАК Период,
	|	ЧекККМ.ВидОперации КАК ВидОперации,
	|	ЧекККМ.ВладелецДисконтнойКарты КАК ВладелецДисконтнойКарты,
	|	ЧекККМ.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ЧекККМ.КассаККМ КАК КассаККМ,
	|	ЧекККМ.Магазин КАК Магазин,
	|	ЧекККМ.ЧекККМПродажа КАК ЧекККМПродажа,
	|	ЧекККМ.Продавец КАК Продавец,
	|	ЧекККМ.СтатусЧекаККМ КАК СтатусЧекаККМ,
	|	ЧекККМ.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	ЧекККМ.АналитикаХозяйственнойОперации КАК АналитикаХозяйственнойОперации,
	|	ЧекККМ.СуммаДокумента КАК СуммаДокумента,
	|	ЧекККМ.Контрагент КАК Контрагент,
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Магазин.СкладПродажи КАК СкладПродажи,
	|	ЧекККМ.Организация КАК Организация,
	|	ЧекККМ.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ЧекККМ.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПродажаПоЗаказу,
	|	ЧекККМ.ДокументРасчета КАК ДокументРасчета,
	|	ЧекККМ.ОперацияСДенежнымиСредствами КАК ОперацияСДенежнымиСредствами,
	|	ВЫБОР
	|		КОГДА ЧекККМ.ДокументРасчета = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЛОЖЬ
	|		КОГДА ЧекККМ.ДокументРасчета ССЫЛКА Документ.ЧекККМ
	|			ТОГДА НЕ ЧекККМ.ДокументРасчета.ОперацияСДенежнымиСредствами
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДокументРасчетаЭтоДокументОтгрузки,
	|	ЧекККМ.ЧекККМПродажа.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Реквизиты = РезультатЗапроса.Выбрать();
	Реквизиты.Следующий();
	
	ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВПараметрыЗапроса(РезультатЗапроса, Реквизиты, Запрос);
	
	ОперацияСДенежнымиСредствами = Реквизиты.ОперацияСДенежнымиСредствами;
	
	Если НЕ ЭтоАванс Тогда
		СуммаНаличных = Мин(Реквизиты.СуммаДокумента - СуммаБезналичных, СуммаНаличных);
	КонецЕсли;
	
	ВозвратПослеЗакрытияСмены = Ложь;
	
	Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		Запрос.УстановитьПараметр("АналитикаХозяйственнойОперации", Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров);
		ЭтоВозврат = Ложь;
		Запрос.УстановитьПараметр("ЭтоВозврат", ЭтоВозврат);
		Запрос.УстановитьПараметр("СкладскаяОперация", Перечисления.СкладскиеОперации.ОтгрузкаВРозницу);
		Запрос.УстановитьПараметр("СкладскаяОперацияСписание", Перечисления.СкладскиеОперации.ОтгрузкаНаВнутренниеНужды);
	Иначе
		Запрос.УстановитьПараметр("АналитикаХозяйственнойОперации", Реквизиты.АналитикаХозяйственнойОперации);
		ЭтоВозврат = Истина;
		Запрос.УстановитьПараметр("ЭтоВозврат", ЭтоВозврат);
		Запрос.УстановитьПараметр("СкладскаяОперация", Перечисления.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента);
		Запрос.УстановитьПараметр("СкладскаяОперацияСписание", Перечисления.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента);
		
		Если ЗначениеЗаполнено(Реквизиты.ОтчетОРозничныхПродажах) Тогда
			ВозвратПослеЗакрытияСмены = Истина
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("АналитикаХозяйственнойОперацииСкидкиПодарки" , Справочники.АналитикаХозяйственныхОпераций.СкидкиПодарки);
	Запрос.УстановитьПараметр("СуммаНаличных", СуммаНаличных);
	Запрос.УстановитьПараметр("ФормироватьДвижения", НЕ ПланыОбмена.ПоРабочемуМесту.ЭтоРабочееМесто());
	
	СтруктураКарты = Новый Структура;
	СтруктураКарты.Вставить("БонуснаяПрограммаЛояльности", "БонуснаяПрограммаЛояльности");
	СтруктураКарты.Вставить("КартаДляНакоплений", "КартаДляНакоплений");
	РеквизитыКарты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Реквизиты.ДисконтнаяКарта, СтруктураКарты);
	
	Запрос.УстановитьПараметр("БонуснаяПрограммаЛояльности", РеквизитыКарты.БонуснаяПрограммаЛояльности);
	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	ПериодБонусов = НачалоДня(Реквизиты.Период);
	Запрос.УстановитьПараметр("ПериодБонусов", ПериодБонусов);
	Запрос.УстановитьПараметр("ЗачетАванса", Перечисления.ТипыОплатЧекаККМ.ЗачетАванса);
	Запрос.УстановитьПараметр("ВРассрочку" , Перечисления.ТипыОплатЧекаККМ.ВРассрочку);
	Запрос.УстановитьПараметр("ВидОплатыНаличные", Справочники.ВидыОплатЧекаККМ.Наличные);
	
	ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
						Реквизиты.Организация,
						Реквизиты.Магазин);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);						
	
	ИспользоватьРасчетыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыСКлиентами");
	Запрос.УстановитьПараметр("ИспользоватьРасчетыСКлиентами", ИспользоватьРасчетыСКлиентами);
	
	Если ЗначениеЗаполнено(РеквизитыКарты.КартаДляНакоплений) Тогда
		КартаБонусов = РеквизитыКарты.КартаДляНакоплений;
	Иначе
		КартаБонусов = Реквизиты.ДисконтнаяКарта;
	КонецЕсли;
	Запрос.УстановитьПараметр("КартаБонусов", КартаБонусов);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЧекККМТовары.Ссылка,
	|	ЧекККМТовары.НомерСтроки,
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Характеристика,
	|	ЧекККМТовары.Количество,
	|	ЧекККМТовары.Цена,
	|	ЧекККМТовары.Сумма,
	|	ЧекККМТовары.СтавкаНДС,
	|	ЧекККМТовары.СуммаНДС,
	|	ЧекККМТовары.РегистрацияПродажи,
	|	ЧекККМТовары.Склад,
	|	ЧекККМТовары.КлючСвязиСерийныхНомеров,
	|	ЧекККМТовары.Продавец,
	|	ЧекККМТовары.ПродажаПодарка,
	|	ЧекККМТовары.Упаковка,
	|	ЧекККМТовары.КоличествоУпаковок,
	|	ЧекККМТовары.КодСтроки,
	|	ЧекККМТовары.ЗаказПокупателя,
	|	ЧекККМТовары.Резервировать
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10) КАК СтавкаНДС,
	|	10 КАК ПроцентСтавки
	|ПОМЕСТИТЬ СтавкиНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18),
	|	18
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20),
	|	20
	|;
	|
//		ДенежныеСредстваККМ
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&КассаККМ КАК КассаККМ,
	|	&ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	&Период КАК Период,
	|	&СуммаНаличных КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	КОНЕЦ КАК ВидДвижения
	|ГДЕ
	|	&СуммаНаличных <> 0
	|;
	|
//		Продажи
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Магазин КАК Магазин,
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.ЗаказПокупателя КАК ЗаказПокупателя,
	|	&Ссылка КАК ДокументПродажи,
	|	ТаблицаТовары.Продавец КАК Продавец,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаТовары.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаТовары.Сумма КАК Стоимость,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаТовары.Количество * ТаблицаТовары.Цена / ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ИЛИ ТаблицаТовары.Упаковка.Коэффициент = 0
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаТовары.Упаковка.Коэффициент
	|	КОНЕЦ КАК СтоимостьБезСкидок,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаТовары.СуммаНДС КАК НДС,
	|	&АналитикаХозяйственнойОперации КАК АналитикаХозяйственнойОперации,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтавкиНДС КАК СтавкиНДС
	|		ПО ТаблицаТовары.СтавкаНДС = СтавкиНДС.СтавкаНДС
	|ГДЕ
	|	&ФормироватьДвижения И НЕ &ОперацияСДенежнымиСредствами
	|;
	|
//		ПродажиПоДисконтнымКартам
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	&ВладелецДисконтнойКарты КАК ВладелецДисконтнойКарты,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаТовары.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТаблицаТовары.Количество КАК Количество
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	НЕ &ДисконтнаяКарта = ЗНАЧЕНИЕ(Справочник.ИнформационныеКарты.ПустаяСсылка) И НЕ &ОперацияСДенежнымиСредствами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМОплата.Ссылка,
	|	ЧекККМОплата.НомерСтроки,
	|	ЧекККМОплата.ВидОплаты,
	|	ЧекККМОплата.Сумма,
	|	ЧекККМОплата.ПроцентКомиссии,
	|	ЧекККМОплата.СуммаКомиссии,
	|	ЧекККМОплата.ЭквайринговыйТерминал
	|ПОМЕСТИТЬ ТаблицаОплата
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &Ссылка
	|;
	|
//		ПродажиПоПлатежнымКартам
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Магазин КАК Магазин,
	|	&Организация КАК Организация,
	|	ТаблицаОплата.ВидОплаты КАК ВидОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА &ЭтоВозврат
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаОплата.Сумма
	|		КОНЕЦ) КАК СуммаОперацийПродажи,
	|	СУММА(ВЫБОР
	|			КОГДА &ЭтоВозврат
	|				ТОГДА ТаблицаОплата.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОперацийВозврата,
	|	СУММА(ВЫБОР
	|			КОГДА &ЭтоВозврат
	|				ТОГДА ВЫБОР
	|						КОГДА ТаблицаОплата.СуммаКомиссии > 0
	|							ТОГДА ТаблицаОплата.СуммаКомиссии
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ ТаблицаОплата.СуммаКомиссии
	|		КОНЕЦ) КАК НачисленнаяСуммаКомиссии,
	|	СУММА(ВЫБОР
	|			КОГДА &ЭтоВозврат
	|				ТОГДА ВЫБОР
	|						КОГДА ТаблицаОплата.СуммаКомиссии < 0
	|							ТОГДА -ТаблицаОплата.СуммаКомиссии
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтмененнаяСуммаКомиссии,
	|	ТаблицаОплата.ЭквайринговыйТерминал
	|ИЗ
	|	ТаблицаОплата КАК ТаблицаОплата
	|ГДЕ
	|	ТаблицаОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплата.ВидОплаты,
	|	ТаблицаОплата.ЭквайринговыйТерминал
	|;
	|
//		ТоварыНаСкладах
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Резервировать
	|			ТОГДА ТаблицаТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Резерв,
	|	&АналитикаХозяйственнойОперации КАК АналитикаХозяйственнойОперации,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	&Период КАК Период,
	|	ТаблицаТовары.КодСтроки КАК КодСтроки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И &ФормироватьДвижения И НЕ &ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМПодарки.Склад,
	|	ЧекККМПодарки.Номенклатура,
	|	ЧекККМПодарки.Характеристика,
	|	ЧекККМПодарки.Количество,
	|	0,
	|	&АналитикаХозяйственнойОперацииСкидкиПодарки,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ,
	|	ЧекККМПодарки.НомерСтроки,
	|	&Период,
	|	0
	|ИЗ
	|	Документ.ЧекККМ.Подарки КАК ЧекККМПодарки
	|ГДЕ
	|	ЧекККМПодарки.Ссылка = &Ссылка
	|	И &ФормироватьДвижения И НЕ &ОперацияСДенежнымиСредствами
	|;
	|
//		ДвиженияСерийТоваров
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура КАК Номенклатура,
	|	ТаблицаСерии.Характеристика КАК Характеристика,
	|	ТаблицаСерии.Серия КАК Серия,
	|	ТаблицаСерии.Количество КАК Количество,
	|	&Магазин КАК Магазин,
	|	&СкладскаяОперация КАК СкладскаяОперация,
	|	&Ссылка КАК Документ,
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ЧекККМ.Серии КАК ТаблицаСерии
	|
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаСерии.Количество <> 0
	|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И &ФормироватьДвижения И НЕ &ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура КАК Номенклатура,
	|	ТаблицаСерии.Характеристика КАК Характеристика,
	|	ТаблицаСерии.Серия КАК Серия,
	|	ТаблицаСерии.Количество КАК Количество,
	|	&Магазин КАК Магазин,
	|	&СкладскаяОперацияСписание КАК СкладскаяОперация,
	|	&Ссылка КАК Документ,
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ЧекККМ.СерииПодарков КАК ТаблицаСерии
	|
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаСерии.Количество <> 0
	|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И &ФормироватьДвижения И НЕ &ОперацияСДенежнымиСредствами
	|
	|;
	|";
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаТаблицаСерийныхНомеров();
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.НомерСтроки,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС,
	|	ТаблицаТовары.РегистрацияПродажи,
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.КлючСвязиСерийныхНомеров,
	|	ТаблицаТовары.Продавец,
	|	ТаблицаТовары.ПродажаПодарка,
	|	ТаблицаТовары.Упаковка,
	|	ТаблицаТовары.КоличествоУпаковок,
	|	ТаблицаТовары.КодСтроки
	|ПОМЕСТИТЬ ТаблицаТоварыПродажаПоЗаказу
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.КодСтроки > 0 И НЕ &ОперацияСДенежнымиСредствами
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	&ЗаказПокупателя КАК Заказ,
	|	&Магазин КАК Магазин,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаТоварыПродажаПоЗаказу.Номенклатура,
	|	ТаблицаТоварыПродажаПоЗаказу.Характеристика,
	|	ТаблицаТоварыПродажаПоЗаказу.КодСтроки,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА - ТаблицаТоварыПродажаПоЗаказу.Количество
	|		ИНАЧЕ ТаблицаТоварыПродажаПоЗаказу.Количество
	|	КОНЕЦ КАК Заказано
	|ИЗ
	|	ТаблицаТоварыПродажаПоЗаказу КАК ТаблицаТоварыПродажаПоЗаказу
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаБонусы();
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаТаблицаРасчетыСКлиентами();
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаАкцизныеМарки();
	
	Если ИспользоватьКомиссионнуюТорговлю 
		Или ИспользоватьУчетИмпортныхТоваров Тогда
		
			//22 ТаблицаТоварыОрганизаций
			ТекстЗапроса = ТекстЗапроса + "
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
			|ВЫБОР
			|		КОГДА &ЭтоВозврат
			|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|	КОНЕЦ                                  КАК ВидДвижения,
			|	&Период                                КАК Период,
			|	&Организация                           КАК Организация,
			|	&Организация                           КАК ОрганизацияОтгрузки,
			|	ТаблицаТовары.Склад                    КАК Склад,
			|	&Поставщик                             КАК Поставщик,
			|	&Договор                               КАК Договор,
			|	&НомерГТД                              КАК НомерГТД,
			|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
			|	ТаблицаТовары.Характеристика           КАК Характеристика,
			|	ТаблицаТовары.Сумма                    КАК СуммаПродажи,
			|	ТаблицаТовары.Количество               КАК Количество
			|ИЗ
			|	%ТаблицаТоваровВЗапросе%               КАК ТаблицаТовары
			|
			|ГДЕ
			|	&ФормироватьДвижения
			|	И (НЕ &ОперацияСДенежнымиСредствами)
			|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
			|	И ТаблицаТовары.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ТаблицаТоваровВЗапросе%", "ТаблицаТовары");
			
			Запрос.УстановитьПараметр("Поставщик", Справочники.Контрагенты.ПустаяСсылка());
			Запрос.УстановитьПараметр("НомерГТД" , Справочники.НомераГТД.ПустаяСсылка());
			Запрос.УстановитьПараметр("Договор"  , Справочники.ДоговорыПлатежныхАгентов.ПустаяСсылка());
			
	КонецЕсли;
		
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваККМ"      	, Результат[2].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаПродажи"                  	, Результат[3].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнымКартам"	, Результат[4].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоПлатежнымКартам" 	, Результат[6].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаТоварыНаСкладах"          	, Результат[7].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерийТоваров"     	, Результат[8].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаСерийныхНомеров"          	, Результат[13].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПокупателей"        	, Результат[15].Выгрузить());
	
	ТаблицаОплатыБонусами = Результат[16].Выгрузить();
	ТаблицаБонусныеБаллы = Результат[18].Выгрузить();
	ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСКлиентами"        	, Результат[20].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаОстаткиАлкогольнойПродукцииЕГАИС" , Результат[21].Выгрузить());
	
	Если ИспользоватьКомиссионнуюТорговлю 
		Или ИспользоватьУчетИмпортныхТоваров Тогда
			ТаблицыДляДвижений.Вставить("ТаблицаТоварыОрганизаций" , Результат[22].Выгрузить());
	КонецЕсли;
	
	
	Если ИспользоватьРасчетыСКлиентами И СуммаНаличных <> 0  Тогда
		
		СтрокаТаблицы = ТаблицыДляДвижений.ТаблицаРасчетыСКлиентами.Добавить();
		Если ЭтоВозврат Тогда
			СтрокаТаблицы.ВидДвижения     = ВидДвиженияНакопления.Расход;
		Иначе
			СтрокаТаблицы.ВидДвижения     = ВидДвиженияНакопления.Приход;
		КонецЕсли;
		СтрокаТаблицы.ДокументРасчета = Реквизиты.ДокументРасчета;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРасчета) Тогда
			СтрокаТаблицы.ДокументРасчета     = Реквизиты.Ссылка;
		КонецЕсли;
		СтрокаТаблицы.ЗаказПокупателя = Реквизиты.ЗаказПокупателя;
		СтрокаТаблицы.Контрагент      = Реквизиты.Контрагент;
		СтрокаТаблицы.Магазин         = Реквизиты.Магазин;
		СтрокаТаблицы.Организация     = Реквизиты.Организация;
		СтрокаТаблицы.Период          = Реквизиты.Период;
		СтрокаТаблицы.Регистратор     = Реквизиты.Ссылка;
		СтрокаТаблицы.Сумма           = СуммаНаличных;
		
		Если НЕ Реквизиты.ОперацияСДенежнымиСредствами Тогда
			СтрокаТаблицы = ТаблицыДляДвижений.ТаблицаРасчетыСКлиентами.Добавить();
			Если ЭтоВозврат Тогда
				СтрокаТаблицы.ВидДвижения     = ВидДвиженияНакопления.Приход;
			Иначе
				СтрокаТаблицы.ВидДвижения     = ВидДвиженияНакопления.Расход;
			КонецЕсли;
			СтрокаТаблицы.ДокументРасчета = Реквизиты.ДокументРасчета;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРасчета) Тогда
				СтрокаТаблицы.ДокументРасчета     = Реквизиты.Ссылка;
			КонецЕсли;
			СтрокаТаблицы.ЗаказПокупателя = Реквизиты.ЗаказПокупателя;
			СтрокаТаблицы.Контрагент      = Реквизиты.Контрагент;
			СтрокаТаблицы.Магазин         = Реквизиты.Магазин;
			СтрокаТаблицы.Организация     = Реквизиты.Организация;
			СтрокаТаблицы.Период          = Реквизиты.Период;
			СтрокаТаблицы.Регистратор     = Реквизиты.Ссылка;
			СтрокаТаблицы.Сумма           = СуммаНаличных;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаОплатыБонусами.Количество() > 0 Тогда
		Если Реквизиты.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
			
			Запрос.УстановитьПараметр("МассивКарт", МаркетинговыеАкцииСервер.ПолучитьИсториюДисконтнойКарты(Реквизиты.Период, КартаБонусов, Истина));
			Запрос.УстановитьПараметр("ПустаяКарта", Справочники.ИнформационныеКарты.ПустаяСсылка());
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА Карты.КартаДляНакоплений = &ПустаяКарта
			|			ТОГДА Карты.Ссылка
			|		ИНАЧЕ Карты.КартаДляНакоплений
			|	КОНЕЦ КАК ДисконтнаяКарта,
			|	&БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
			|	&ДисконтнаяКарта КАК ОсновнаяКарта
			|ПОМЕСТИТЬ ЗаменыКарт
			|ИЗ
			|	Справочник.ИнформационныеКарты КАК Карты
			|ГДЕ
			|	Карты.Ссылка В(&МассивКарт)
			|	И Карты.БонуснаяПрограммаЛояльности = &БонуснаяПрограммаЛояльности
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	БонусныеБаллы.ДисконтнаяКарта КАК ДисконтнаяКарта,
			|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
			|	СУММА(БонусныеБаллы.ОстатокБаллов) КАК ОстатокБаллов
			|ИЗ
			|	(ВЫБРАТЬ
			|		БонусныеБаллы.ДисконтнаяКарта КАК ДисконтнаяКарта,
			|		БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
			|		БонусныеБаллы.НачисленоОстаток - БонусныеБаллы.КСписаниюОстаток КАК ОстатокБаллов
			|	ИЗ
			|		РегистрНакопления.БонусныеБаллы.Остатки(
			|				&ПериодБонусов,
			|				(ДисконтнаяКарта, БонуснаяПрограммаЛояльности) В
			|					(ВЫБРАТЬ
			|						Т.ДисконтнаяКарта,
			|						Т.БонуснаяПрограммаЛояльности
			|					ИЗ
			|						ЗаменыКарт КАК Т)) КАК БонусныеБаллы
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		БонусныеБаллы.ДисконтнаяКарта,
			|		БонусныеБаллы.БонуснаяПрограммаЛояльности,
			|		ВЫБОР
			|			КОГДА БонусныеБаллы.ВидДвижения = &Приход
			|				ТОГДА БонусныеБаллы.Начислено - БонусныеБаллы.КСписанию
			|			ИНАЧЕ БонусныеБаллы.КСписанию - БонусныеБаллы.Начислено
			|		КОНЕЦ
			|	ИЗ
			|		РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
			|	ГДЕ
			|		БонусныеБаллы.Период = &ПериодБонусов
			|		И БонусныеБаллы.Регистратор <> &Ссылка
			|		И (БонусныеБаллы.ДисконтнаяКарта, БонусныеБаллы.БонуснаяПрограммаЛояльности) В
			|				(ВЫБРАТЬ
			|					Т.ДисконтнаяКарта,
			|					Т.БонуснаяПрограммаЛояльности
			|				ИЗ
			|					ЗаменыКарт КАК Т)) КАК БонусныеБаллы
			|
			|СГРУППИРОВАТЬ ПО
			|	БонусныеБаллы.ДисконтнаяКарта,
			|	БонусныеБаллы.БонуснаяПрограммаЛояльности
			|
			|ИМЕЮЩИЕ
			|	СУММА(БонусныеБаллы.ОстатокБаллов) > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	БонусныеБаллы.Период,
			|	БонусныеБаллы.ДисконтнаяКарта,
			|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
			|	БонусныеБаллы.ДатаПервоначальногоНачисления,
			|	СУММА(ВЫБОР
			|			КОГДА БонусныеБаллы.ВидДвижения = &Приход
			|				ТОГДА БонусныеБаллы.КСписанию
			|			ИНАЧЕ -БонусныеБаллы.КСписанию
			|		КОНЕЦ) КАК КСписанию
			|ИЗ
			|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаменыКарт КАК ЗаменыКарт
			|		ПО БонусныеБаллы.ДисконтнаяКарта = ЗаменыКарт.ДисконтнаяКарта
			|			И БонусныеБаллы.БонуснаяПрограммаЛояльности = ЗаменыКарт.БонуснаяПрограммаЛояльности
			|			И (БонусныеБаллы.ДатаПервоначальногоНачисления <= &ПериодБонусов)
			|			И (БонусныеБаллы.ДатаПервоначальногоНачисления <> &ПустаяДата)
			|			И (БонусныеБаллы.Период > &ПериодБонусов)
			|			И (БонусныеБаллы.КСписанию <> 0)
			|			И (БонусныеБаллы.Регистратор <> &Ссылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	БонусныеБаллы.Период,
			|	БонусныеБаллы.ДисконтнаяКарта,
			|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
			|	БонусныеБаллы.ДатаПервоначальногоНачисления
			|
			|ИМЕЮЩИЕ
			|	СУММА(БонусныеБаллы.КСписанию) > 0";
			
			Результат = Запрос.ВыполнитьПакет();
			БонусныеБаллыСервер.ОбъединитьТаблицыБонусовПриОплате(
				ТаблицаБонусныеБаллы,
				ТаблицаОплатыБонусами,
				Результат,
				ПериодБонусов);
			
		Иначе
			Для Каждого СтрокаТаблицы Из ТаблицаОплатыБонусами Цикл
				НоваяСтрока = ТаблицаБонусныеБаллы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицыДляДвижений.Вставить("ТаблицаБонусныеБаллы", ТаблицаБонусныеБаллы);
	
	Если ИспользоватьКомиссионнуюТорговлю 
		ИЛИ ИспользоватьУчетИмпортныхТоваров Тогда
		Если ЭтоВозврат Тогда
			Если ВозвратПослеЗакрытияСмены Тогда
				ПроведениеСервер.ЗаполнитьТаблицуДвиженийПриходаРегистраТоварыОрганизаций(
													Реквизиты.ОтчетОРозничныхПродажах,
													ТаблицыДляДвижений.ТаблицаТоварыОрганизаций,
													Реквизиты.Период);
			ИначеЕсли ЗначениеЗаполнено(Реквизиты.ЧекККМПродажа) Тогда
				ПроведениеСервер.ЗаполнитьТаблицуДвиженийПриходаРегистраТоварыОрганизаций(
													Реквизиты.ЧекККМПродажа,
													ТаблицыДляДвижений.ТаблицаТоварыОрганизаций,
													Реквизиты.Период);
				Иначе
				 // Остается возврат без основания - ничего делать не надо.
			КонецЕсли;
		Иначе
			ПроведениеСервер.ПерезаполнитьТаблицуДвиженийТоварыОрганизаций(
													ТаблицыДляДвижений.ТаблицаТоварыОрганизаций,
													Реквизиты.Ссылка,
													Реквизиты.Период);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Товарный чек
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТоварныйЧек";
	КомандаПечати.Представление = НСтр("ru = 'Товарный чек'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	
	// Опись номенклатуры
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОписьНоменклатуры";
	КомандаПечати.Представление = НСтр("ru = 'Опись номенклатуры'");
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 52;
	
	// Гарантийный талон
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ГарантийныйТалон";
	КомандаПечати.Представление = НСтр("ru = 'Гарантийный талон'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.Порядок = 55;
	
	// Акт о возврате денежных сумм (КМ3).
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КМ3";
	КомандаПечати.Представление = НСтр("ru = 'Акт о возврате денежных сумм (КМ3)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюРТКлиент.ОбработкаКомандыПечатиКМ3";
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.Порядок = 60;
	
	// Товарный чек для принтера документов.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТоварныйЧекДляПД";
	КомандаПечати.Представление = НСтр("ru = 'Товарный чек для принтера документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.Порядок = 65;
	
	// Товарный чек для фискального регистратора.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТоварныйЧекДляФР";
	КомандаПечати.Представление = НСтр("ru = 'Товарный чек на ФР, АСПД, принтере чеков'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюРТКлиент.ОбработкаКомандыПечатиТоварногоЧекаДляФР";
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.Порядок = 80;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТоварныйЧек") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТоварныйЧек",
				ПараметрыПечати.Представление,
				ПечатьЧека(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОписьНоменклатуры") Тогда
	
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОписьНоменклатуры",
				ПараметрыПечати.Представление,
				ПечатьОписиНоменклатуры(МассивОбъектов, ОбъектыПечати));
	
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТоварныйЧекДляПД") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТоварныйЧекДляПД",
				ПараметрыПечати.Представление,
				ПечатьТоварногоЧекаДляПД(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КМ3") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КМ3",
				"КМ3",
				ПечатьКМ3(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
			
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ГарантийныйТалон") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ГарантийныйТалон",
				ПараметрыПечати.Представление,
				ПечатьГарантийныйТалон(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;

	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьЧека(МассивОбъектов, ОбъектыПечати) Экспорт

	КолонкаКодов       = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	ВыводитьКоды       = ЗначениеЗаполнено(КолонкаКодов);
	ВыводитьУпаковки   = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Чек ККМ'");
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЧекаККМ_ТоварныйЧек";
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Магазин КАК Магазин,
	|	Документ.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	ВЫБОР КОГДА Документ.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(Документ.Организация)
	|		ИНАЧЕ &ТекстИП +
	|		    ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Фамилия, """") = """"
	|				ТОГДА """"
	|			ИНАЧЕ
	|				ФИОФизЛицСрезПоследнихИП.Фамилия + &ТекстПробел +
	|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Имя, """") = """"
	|						ТОГДА """"
	|						ИНАЧЕ ФИОФизЛицСрезПоследнихИП.Имя + &ТекстПробел
	|				КОНЕЦ
	|				+
	|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Отчество, """") = """"
	|						ТОГДА """"
	|						ИНАЧЕ ФИОФизЛицСрезПоследнихИП.Отчество
	|				КОНЕЦ
	|			КОНЕЦ
	|			+ """"
	|	КОНЕЦ КАК НаименованиеОрганизации,
	|	ВЫБОР КОГДА Документ.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрганизацияЮридическоеЛицо,
	|	Документ.Организация КАК Организация,
	|	Документ.СуммаДокумента КАК СуммаДокумента,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Магазин) КАК МагазинПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ОрганизацияПредставление,
	|	Документ.Ответственный.ФизическоеЛицо КАК Ответственный
	|ИЗ
	|	Документ.ЧекККМ КАК Документ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних() КАК ФИОФизЛицСрезПоследнихИП
	|ПО
	|	Документ.Организация = ФИОФизЛицСрезПоследнихИП.ФизЛицо
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|	И Документ.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка, Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОплата.ВидОплаты.ТипОплаты КАК ТипОплаты,
	|	ТаблицаОплата.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаОплата.ВидОплаты.ТипОплаты) КАК ПредставлениеТипОплаты,
	|	СУММА(ВЫБОР
	|		КОГДА ТаблицаОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			И ТаблицаОплата.ВидОплаты.ТипОплаты <> Значение(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|			ТОГДА ТаблицаОплата.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаБезналичныхОплат,
	|	СУММА(ТаблицаОплата.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ТаблицаОплата
	|ГДЕ
	|	ТаблицаОплата.Ссылка В(&МассивОбъектов)
	|	И ТаблицаОплата.Ссылка.Проведен
	|	И НЕ (ТаблицаОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат) И ТаблицаОплата.ВидОплаты.ТипОплаты = Значение(Перечисление.ТипыОплатЧекаККМ.Наличные))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплата.Ссылка,
	|	ТаблицаОплата.ВидОплаты.ТипОплаты
	|
	|	ИМЕЮЩИЕ
	|		(НЕ СУММА(ТаблицаОплата.Сумма) = 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|ИТОГИ ПО
	|	Ссылка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.Представление КАК Товар,
	|	" + ?(ВыводитьКоды, "ТаблицаТовары.Номенклатура." + КолонкаКодов +" КАК КолонкаКодов,", "") + "
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Упаковка.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка");
	
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	УстановитьТекстовыеПараметрыЗапроса(Запрос);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЧекККМ.ПФ_MXL_Накладная");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПоставщик = Макет.ПолучитьОбласть("Поставщик");
	ОбластьИНН       = Макет.ПолучитьОбласть("ИНН");
	ОбластьМагазин   = Макет.ПолучитьОбласть("Магазин");
	
	ОбластьШапкаНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьШапкаКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьШапкаДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьШапкаСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьШапкаСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                  + Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	ОбластьСтрокаНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьСтрокаКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьСтрокаДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСтрокаСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСтрокаСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
	
	// Вывести Итого.
	ОбластьИтогоНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьИтогоКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьИтогоДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьИтогоСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьИтогоСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
	
	ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьПодписей      = Макет.ПолучитьОбласть("Подписи");
	
	ОбластьОплата = Макет.ПолучитьОбласть("Оплата");
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнойЧастиОплата = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоТабличнымЧастям = Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ВыборкаПоДокументам.ЭтоВозврат Тогда
			СинонимДокумента   = НСтр("ru='Товарный чек (возврат)'");
		Иначе
			СинонимДокумента   = НСтр("ru='Товарный чек'");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		СведенияОПоставщике = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.Дата);
		
		Если ВыборкаПоДокументам.ОрганизацияЮридическоеЛицо Тогда
			ОбластьПоставщик.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование");
		Иначе
			ОбластьПоставщик.Параметры.ПредставлениеПоставщика = ВыборкаПоДокументам.НаименованиеОрганизации;
		КонецЕсли;
		ОбластьПоставщик.Параметры.Поставщик = ВыборкаПоДокументам.Организация;
		ТабличныйДокумент.Вывести(ОбластьПоставщик);
		

		ОбластьИНН.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ТабличныйДокумент.Вывести(ОбластьИНН);

		ОбластьМагазин.Параметры.ПредставлениеМагазина = ВыборкаПоДокументам.МагазинПредставление;
		ОбластьМагазин.Параметры.Магазин = ВыборкаПоДокументам.Магазин;
		ТабличныйДокумент.Вывести(ОбластьМагазин);
		
		// Шапка
		
		ТабличныйДокумент.Вывести(ОбластьШапкаНомера);
		Если ВыводитьКоды Тогда
			ОбластьШапкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ТабличныйДокумент.Присоединить(ОбластьШапкаКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьШапкаДанных);
		ТабличныйДокумент.Присоединить(ОбластьШапкаСкидок);
		ТабличныйДокумент.Присоединить(ОбластьШапкаСуммы);
		
		
		ВсегоНаименований = 0;
		Сумма             = 0;
		ВсегоСкидок       = 0;
		ВсегоБезСкидок    = 0;
		
		// СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;

			ОбластьСтрокаНомера.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Вывести(ОбластьСтрокаНомера);

			Если ВыводитьКоды Тогда
				
				ОбластьСтрокаКодов.Параметры.Артикул = ВыборкаПоСтрокамТЧ["КолонкаКодов"];
				ТабличныйДокумент.Присоединить(ОбластьСтрокаКодов);
				
			КонецЕсли;

			ОбластьСтрокаДанных.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаДанных.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаДанных);
			
			Скидка = Окр(ВыборкаПоСтрокамТЧ.Цена * ВыборкаПоСтрокамТЧ.Количество, 2) - ВыборкаПоСтрокамТЧ.Сумма;
			ОбластьСтрокаСкидок.Параметры.Скидка         = Скидка;
			ОбластьСтрокаСкидок.Параметры.СуммаБезСкидки = ВыборкаПоСтрокамТЧ.Сумма + Скидка;
			ТабличныйДокумент.Присоединить(ОбластьСтрокаСкидок);

			ОбластьСтрокаСуммы.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаСуммы);
			
			ВсегоНаименований = ВсегоНаименований + 1;
			
			Сумма          = Сумма + ВыборкаПоСтрокамТЧ.Сумма;
			ВсегоСкидок    = ВсегоСкидок + Скидка;
			ВсегоБезСкидок = Сумма + ВсегоСкидок;
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьИтогоНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьИтогоКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьИтогоДанных);
		ОбластьИтогоСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьИтогоСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабличныйДокумент.Присоединить(ОбластьИтогоСкидок);
		ОбластьИтогоСуммы.Параметры.Всего = Сумма;
		ТабличныйДокумент.Присоединить(ОбластьИтогоСуммы);
		
		// Вывести Сумму прописью.
		
		ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%, на сумму %Итого%'");
		
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%", ФормированиеПечатныхФормСервер.ФорматСумм(Сумма));
		
		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
		ОбластьСуммаПрописью.Параметры.СуммаПрописью  = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(Сумма);
		
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		// Оплата
		Если ВыборкаПоТабличнойЧастиОплата.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			ОплатаДобавлена = Ложь;
			СтрокаОплаты = "";
			СуммаБезналичныхОплат = 0;
			СуммаОплат = 0;
			
			ВыборкаПоОплата = ВыборкаПоТабличнойЧастиОплата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоОплата.Следующий() Цикл
				Если ОплатаДобавлена Тогда
					СтрокаОплаты = СтрокаОплаты + Символы.ПС;
				КонецЕсли;
				ОплатаДобавлена = Истина;
				СтрокаОплаты = СтрокаОплаты + ВыборкаПоОплата.ПредставлениеТипОплаты + ": "  + Формат(ВыборкаПоОплата.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				СуммаБезналичныхОплат = СуммаБезналичныхОплат + ВыборкаПоОплата.СуммаБезналичныхОплат;
				СуммаОплат = СуммаОплат + ВыборкаПоОплата.Сумма;
			КонецЦикла;
			
			Если ВыборкаПоДокументам.ЭтоВозврат Тогда
				СуммаНаличных = ВыборкаПоДокументам.СуммаДокумента - СуммаБезналичныхОплат;
				Если СуммаНаличных > 0  Тогда
					Если ОплатаДобавлена Тогда
						СтрокаОплаты = СтрокаОплаты + Символы.ПС;
					КонецЕсли;
					СтрокаОплаты = СтрокаОплаты + НСтр("ru = 'Наличные:'") + " " + Формат(СуммаНаличных, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				КонецЕсли;
				ОбластьОплата.Параметры.Сдача = "0.00";
			Иначе
				ОбластьОплата.Параметры.Сдача = Формат(СуммаОплат - ВыборкаПоДокументам.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			КонецЕсли;
			
			ОбластьОплата.Параметры.Оплата = СтрокаОплаты;
			ТабличныйДокумент.Вывести(ОбластьОплата);
		КонецЕсли;
		
		
		// ПОДПИСИ
		ОбластьПодписей.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьПодписей.Параметры.ФИО = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

// Возвращает текст печати на ФР
//
Функция ТекстПечатиЧекаНаФР(МассивОбъектов, ШиринаЛенты) Экспорт
	
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Магазин КАК Магазин,
	|	Документ.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	ВЫБОР КОГДА Документ.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(Документ.Организация)
	|		ИНАЧЕ &ТекстИП +
	|		    ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Фамилия, """") = """"
	|				ТОГДА """"
	|			ИНАЧЕ
	|				ФИОФизЛицСрезПоследнихИП.Фамилия + &ТекстПробел +
	|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Имя, """") = """"
	|						ТОГДА """"
	|						ИНАЧЕ ФИОФизЛицСрезПоследнихИП.Имя + &ТекстПробел
	|				КОНЕЦ
	|				+
	|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Отчество, """") = """"
	|						ТОГДА """"
	|						ИНАЧЕ ФИОФизЛицСрезПоследнихИП.Отчество
	|				КОНЕЦ
	|			КОНЕЦ
	|			+ """"
	|	КОНЕЦ КАК НаименованиеОрганизации,
	|	ВЫБОР КОГДА Документ.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрганизацияЮридическоеЛицо,
	|	Документ.Организация КАК Организация,
	|	Документ.СуммаДокумента КАК СуммаДокумента,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Магазин) КАК МагазинПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ОрганизацияПредставление,
	|	Документ.Ответственный.ФизическоеЛицо КАК Ответственный
	|ИЗ
	|	Документ.ЧекККМ КАК Документ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних() КАК ФИОФизЛицСрезПоследнихИП
	|ПО
	|	Документ.Организация = ФИОФизЛицСрезПоследнихИП.ФизЛицо
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|	И Документ.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка, Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОплата.ВидОплаты.ТипОплаты КАК ТипОплаты,
	|	ТаблицаОплата.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаОплата.ВидОплаты.ТипОплаты) КАК ПредставлениеТипОплаты,
	|	СУММА(ВЫБОР
	|		КОГДА ТаблицаОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			И ТаблицаОплата.ВидОплаты.ТипОплаты <> Значение(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|			ТОГДА ТаблицаОплата.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаБезналичныхОплат,
	|	СУММА(ТаблицаОплата.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ТаблицаОплата
	|ГДЕ
	|	ТаблицаОплата.Ссылка В(&МассивОбъектов)
	|	И ТаблицаОплата.Ссылка.Проведен
	|	И НЕ (ТаблицаОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат) И ТаблицаОплата.ВидОплаты.ТипОплаты = Значение(Перечисление.ТипыОплатЧекаККМ.Наличные))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплата.Ссылка,
	|	ТаблицаОплата.ВидОплаты.ТипОплаты
	|
	|	ИМЕЮЩИЕ
	|		(НЕ СУММА(ТаблицаОплата.Сумма) = 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|ИТОГИ ПО
	|	Ссылка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.Представление КАК Товар,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Упаковка.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка");
	
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	УстановитьТекстовыеПараметрыЗапроса(Запрос);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ДокументЧекККМ  = Новый ТекстовыйДокумент();

	// Получение макета
	МакетЧекаККМ      = Документы.ЧекККМ.ПолучитьМакет("ЧекПокупателя");
	
	ОбластьШапкаЧека  = МакетЧекаККМ.ПолучитьОбласть("ШапкаЧека"  + ШиринаЛенты);
	ОбластьТелоЧека   = МакетЧекаККМ.ПолучитьОбласть("ТелоЧека"   + ШиринаЛенты);
	ОбластьПодвалЧека = МакетЧекаККМ.ПолучитьОбласть("ПодвалЧека" + ШиринаЛенты);
	ОбластьРазрывЧека = МакетЧекаККМ.ПолучитьОбласть("РазрывЧека" + ШиринаЛенты);
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнойЧастиОплата = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоТабличнымЧастям = Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ДокументЧекККМ.Вывести(ОбластьРазрывЧека);
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		Если ВыборкаПоДокументам.ЭтоВозврат Тогда
			СинонимДокумента   = НСтр("ru='Товарный чек (возврат)'");
		Иначе
			СинонимДокумента   = НСтр("ru='Товарный чек'");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьШапкаЧека.Параметры.Заголовок = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		СведенияОПоставщике = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.Дата);
		ОбластьШапкаЧека.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ОбластьШапкаЧека.Параметры.Организация = ВыборкаПоДокументам.НаименованиеОрганизации;
		
		ДокументЧекККМ.Вывести(ОбластьШапкаЧека);
		
		// СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;

			ОбластьТелоЧека.Параметры.НаименованиеТовара = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);
			ОбластьТелоЧека.Параметры.КоличествоЦена     = Формат(ВыборкаПоСтрокамТЧ.Количество, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧН=; ЧГ=0")
			                                             + " х "
			                                             + Формат(ВыборкаПоСтрокамТЧ.Цена, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			
			КонечнаяСкидка =  ВыборкаПоСтрокамТЧ.Количество *  ВыборкаПоСтрокамТЧ.Цена -  ВыборкаПоСтрокамТЧ.Сумма;

			Если КонечнаяСкидка <> 0 Тогда
				ОбластьТелоЧека.Параметры.ЗагСкидка = ?(КонечнаяСкидка > 0, "Скидка:", "Надбавка:");
				ОбластьТелоЧека.Параметры.Скидка    = Формат(?(КонечнаяСкидка > 0, КонечнаяСкидка, -КонечнаяСкидка), "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			КонецЕсли;
			
			ДокументЧекККМ.Вывести(ОбластьТелоЧека);
			
		КонецЦикла;
		ДокументЧекККМ.УдалитьСтроку(ДокументЧекККМ.КоличествоСтрок());
		
		ОбластьПодвалЧека.Параметры.Итог = Формат(ВыборкаПоДокументам.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		
		ОбластьПодвалЧека.Параметры.Сотрудник =  ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		
		ДокументЧекККМ.Вывести(ОбластьПодвалЧека);
		
	КонецЦикла;
	
	СтрокаВозврат = "";
	
	КоличествоСтрок = ДокументЧекККМ.КоличествоСтрок();
	
	Для Индекс = 1 По КоличествоСтрок Цикл
		СтрокаВозврат = СтрокаВозврат + ДокументЧекККМ.ПолучитьСтроку(Индекс); 
		
		Если НЕ Индекс = КоличествоСтрок Тогда
			СтрокаВозврат = СтрокаВозврат + Символы.ПС; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаВозврат
	
КонецФункции

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

Функция СтурктураСуммТаблицыТоваровИОплат(ДокументСсылка)
	
	СтруктураСумм = Новый Структура;
	СтруктураСумм.Вставить("СуммаТоваров", 0);
	СтруктураСумм.Вставить("СуммаОплат", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ЧекККМТовары.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СуммаТоваров = 0;
	НаличиеТоваров = Ложь;
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Сумма) Тогда
			СтруктураСумм.СуммаТоваров = Выборка.Сумма;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ЧекККМОплата.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка = &Ссылка
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = &ТипОплаты";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ТипОплаты", Перечисления.ТипыОплатЧекаККМ.ВРассрочку);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СуммаОплат = 0;
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Сумма) Тогда
			СтруктураСумм.СуммаОплат = Выборка.Сумма;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураСумм;
	
КонецФункции

Функция ПризнакСпособаРасчета(ДокументСсылка) Экспорт
	
	СтруктураРеквизитов = Новый Структура;
	
	СтруктураРеквизитов.Вставить("ОперацияСДенежнымиСредствами");
	СтруктураРеквизитов.Вставить("ДокументРасчета");
	СтруктураРеквизитов.Вставить("СуммаДокумента");
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, СтруктураРеквизитов);
	
	СтруктураСумм = СтурктураСуммТаблицыТоваровИОплат(ДокументСсылка);
	
	Если РеквизитыДокумента.ОперацияСДенежнымиСредствами Тогда
		Если ЗначениеЗаполнено(РеквизитыДокумента.ДокументРасчета) Тогда
			Если РеквизитыДокумента.ДокументРасчета.ОперацияСДенежнымиСредствами Тогда
				// Эначит это просто возврат денежных средств (аванса или предоплаты)
				Если НЕ ЗначениеЗаполнено(СтруктураСумм.СуммаТоваров) Тогда
					// Возврат аванса
					Возврат Перечисления.ПризнакиСпособаРасчета.Аванс;
				Иначе
					Если СтруктураСумм.СуммаТоваров <= СтруктураСумм.СуммаОплат Тогда
						// Возврат полной предоплаты
						Возврат Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
					Иначе
						// Возврат частичной предоплаты
						Возврат Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Оплата ранее отгруженного товара
				Возврат Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(СтруктураСумм.СуммаТоваров) Тогда
				// Прием Аванса
				Возврат Перечисления.ПризнакиСпособаРасчета.Аванс;
			Иначе
				Если СтруктураСумм.СуммаТоваров <= СтруктураСумм.СуммаОплат Тогда
					// Прием полной предоплаты
					Возврат Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
				Иначе
					// Прием частичной предоплаты
					Возврат Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если СтруктураСумм.СуммаТоваров <= СтруктураСумм.СуммаОплат Тогда
			// Отгрузка товара и принимаем полностью за него оплату
			Возврат Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураСумм.СуммаОплат) Тогда
			// Отгрузка товаров в рассрочку
			Возврат Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты;
		Иначе
			// Отгрузка товаров с неполной оплатой. Остаток в кредит.
			Возврат Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Подготавливает данные в формате БПО
//
Функция ПодготовитьДанныеДляПробитияЧека(ДокументОбъект, ДокументСсылка, ТранспортныйМодуль, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС, НомерЧека, ОсобыйВыводСообщения = Ложь, ТекстПолногоСообщения  = "") Экспорт
	
	ЕстьАлкогольнаяПродукцияЕГАИС = НЕ ДокументОбъект.ОперацияСДенежнымиСредствами И ИнтеграцияЕГАИСРТ.ЕстьАлкогольнаяПродукцияЕГАИС(ДокументОбъект.Товары);
	
	ИспользуетсяКомиссионнаяТорговля = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
	ИспользуетсяУчетИмпортныхТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьУчетИмпортныхТоваров");
	
	// Товары
	ТаблицаСоответствияТоваровСекциям = Новый Соответствие();
	ПодключаемоеОборудованиеРТВызовСервера.ЗаполнитьСоответствиеСекцийДляТабличнойЧастиПоКассеККМ(ДокументОбъект.КассаККМ, ДокументОбъект.Товары, ТаблицаСоответствияТоваровСекциям);
	
	СтруктураТаблиц = ПродажиСервер.ПодготовкаДанныхДляПробитияЧекаККМ(ДокументОбъект, ДанныеЕГАИСДостаточны, ОсобыйВыводСообщения, ТекстПолногоСообщения, ЕстьАлкогольнаяПродукцияЕГАИС);
	
	ТаблицаТоваровЧека = СтруктураТаблиц.ТаблицаТоваровЧека;
	ТаблицаТоваровЕГАИС = СтруктураТаблиц.ТаблицаТоваровЕГАИС;
	
	Если НЕ ДанныеЕГАИСДостаточны Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	// Подготовка таблицы товаров
	МассивТоваров = Новый Массив;
	МассивТоваровЕГАИС = Новый Массив;
	
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	// Общие параметры чека
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ВидОперации");
	СтруктураРеквизитов.Вставить("КассаККМ");
	СтруктураРеквизитов.Вставить("Магазин");
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("Контрагент");
	СтруктураРеквизитов.Вставить("Дата");
	СтруктураРеквизитов.Вставить("ЧекККМПродажа");
	СтруктураРеквизитов.Вставить("Телефон");
	СтруктураРеквизитов.Вставить("АдресЭП");
	СтруктураРеквизитов.Вставить("Ответственный");
	СтруктураРеквизитов.Вставить("ДоговорПлатежногоАгента");
	СтруктураРеквизитов.Вставить("ВидНалога");
	СтруктураРеквизитов.Вставить("ЗаказПокупателя");
	СтруктураРеквизитов.Вставить("СуммаДокумента");
	СтруктураРеквизитов.Вставить("ОперацияСДенежнымиСредствами");
	СтруктураРеквизитов.Вставить("ДокументРасчета");
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("НаименованиеПолное");
	СтруктураРеквизитов.Вставить("ИНН");
	СтруктураРеквизитов.Вставить("КПП");
	РеквизитыОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.Организация, СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЭлектронныйЧекSMSПередаютсяПрограммой1С");
	СтруктураРеквизитов.Вставить("ЭлектронныйЧекEmailПередаютсяПрограммой1С");
	СтруктураРеквизитов.Вставить("ПодключаемоеОборудование");
	СтруктураРеквизитов.Вставить("СпособФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.СпособФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ДопустимоеРасхождениеФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.ДопустимоеРасхождениеФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ТипОборудования", "ПодключаемоеОборудование.ТипОборудования");
	СтруктураРеквизитов.Вставить("Код");
	СтруктураРеквизитов.Вставить("ТипОборудования", "ПодключаемоеОборудование.ТипОборудования");
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.КассаККМ, СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Наименование");
	СтруктураРеквизитов.Вставить("ИНН");
	РеквизитыКассир = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.Ответственный.ФизическоеЛицо, СтруктураРеквизитов);
	
	ОбщиеПараметры.СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложенияККТ(РеквизитыДокумента.Организация, 
																		РеквизитыДокумента.ВидНалога);
	
	ОбщиеПараметры.ТипРасчета = ?(РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат,
								  Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств,
								  Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
	
	ОбщиеПараметры.ДокументОснование = ДокументСсылка;
	
	ПодключаемоеОборудованиеРТ.ЗаполнитьПараметрыПлатежногоДоговора(ОбщиеПараметры, 
																	РеквизитыДокумента.ДоговорПлатежногоАгента,
																	РеквизитыДокумента.СуммаДокумента);
	Если РеквизитыКассыККМ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		ЗаполнитьОплатуПриПробитииЧекаККМНаККТ(ДокументОбъект, ОбщиеПараметры);
	Иначе
		ЗаполнитьОплатуПриПробитииЧекаККМ(ДокументОбъект, ОбщиеПараметры);
	КонецЕсли;
	
	ДополнитьТоварамиПараметрыПриПробитииЧека(РеквизитыДокумента,
											  ОбщиеПараметры, 
											  ТаблицаТоваровЧека, 
											  ТаблицаТоваровЕГАИС, 
											  ТаблицаСоответствияТоваровСекциям,
											  ПризнакСпособаРасчета(ДокументСсылка),
											  ИспользуетсяКомиссионнаяТорговля,
											  ИспользуетсяУчетИмпортныхТоваров);
	
	ОбщиеПараметры.Электронно = Ложь;
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.Телефон) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СSMS = Истина;
		КонецЕсли;
		Телефон = РеквизитыДокумента.Телефон;
		Если СтрНайти(Телефон, "+7") = 1 ИЛИ (СтрНайти(Телефон, "8") = 1 И СтрДлина(Телефон) = 11) Тогда
			ОбщиеПараметры.ПокупательНомер = Телефон;
		Иначе
			ОбщиеПараметры.ПокупательНомер = "+7" + Телефон;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.АдресЭП) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СEmail = Истина;
			СистемнаяУчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
			Если ЗначениеЗаполнено(СистемнаяУчетнаяЗапись) Тогда
				ОбщиеПараметры.ОтправительEmail = СистемнаяУчетнаяЗапись.АдресЭлектроннойПочты;
			КонецЕсли;
		КонецЕсли;
		ОбщиеПараметры.ПокупательEmail = РеквизитыДокумента.АдресЭП;
	КонецЕсли;
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.Кассир          = РеквизитыКассир.Наименование;
	ОбщиеПараметры.Вставить("ИмяКассира", РеквизитыКассир.Наименование);
	ОбщиеПараметры.КассирИНН       = РеквизитыКассир.ИНН;
	
	ОбщиеПараметры.Организация    = РеквизитыДокумента.Организация;
	ОбщиеПараметры.ОрганизацияНазвание = РеквизитыОрганизация.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = РеквизитыОрганизация.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = РеквизитыОрганизация.КПП;
	ОбщиеПараметры.НомерКассы     = РеквизитыКассыККМ.Код;
	ОбщиеПараметры.НомерЧека      = НомерЧека;
	
	ОбщиеПараметры.НомерСмены = 1;
	
	СведенияООрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(РеквизитыДокумента.Организация, РеквизитыДокумента.Дата);
	АдресМагазина = ОбщегоНазначенияРТ.АдресМагазина(РеквизитыДокумента.Магазин);
	
	СерийныйНомер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыКассыККМ.ПодключаемоеОборудование, "СерийныйНомер");
	Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда
		СерийныйНомер = "1";
	КонецЕсли;
	
	ОбщиеПараметры.ТорговыйОбъект = РеквизитыДокумента.Магазин;
	ОбщиеПараметры.АдресРасчетов = АдресМагазина;
	ОбщиеПараметры.МестоРасчетов = Строка(РеквизитыДокумента.Магазин) + " " + АдресМагазина;
	ОбщиеПараметры.АдресМагазина = АдресМагазина;
	ОбщиеПараметры.НаименованиеМагазина = Строка(РеквизитыДокумента.Магазин);
	ОбщиеПараметры.СерийныйНомер = СерийныйНомер;
	
	ОбщиеПараметры.КассаККМ = ДокументОбъект.КассаККМ;
	Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ОбщиеПараметры.ШаблонЧека = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.КассаККМ, "ШаблонЧекаККМВозврат");
	Иначе
		ОбщиеПараметры.ШаблонЧека = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.КассаККМ, "ШаблонЧекаККМ");
	КонецЕсли;
	
	Если РеквизитыКассыККМ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		ПодключаемоеОборудованиеРТ.ДобавитьВнереализационнуюПрибыль(ДокументСсылка, ОбщиеПараметры);
		
		// При необходимости будет проведен формато-логический контроль
		
		ОбщиеПараметры.СпособФорматноЛогическогоКонтроля = РеквизитыКассыККМ.СпособФорматноЛогическогоКонтроля;
		ОбщиеПараметры.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = РеквизитыКассыККМ.ДопустимоеРасхождениеФорматноЛогическогоКонтроля;
		Если ФорматноЛогическийКонтрольКлиентСервер.НуженФорматноЛогическийКонтроль(ОбщиеПараметры) Тогда
			ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции // ПодготовитьДанныеДляПробитияЧека()

// Возможность пустой части товары
// 
// Параметры:
//  Объект - ДокументОбъект.ЧекККМ
// 
// Возвращаемое значение
//  Булево
//
Функция ВозможностьПустойТЧТовары(Объект) Экспорт
	
	ЕстьВозможность = Ложь;
	ДокументРасчета = Объект.ДокументРасчета;
	ОперацияСДенежнымиСредствами = Объект.ОперацияСДенежнымиСредствами;
	
	Если ОперацияСДенежнымиСредствами И НЕ ЗначениеЗаполнено(ДокументРасчета) Тогда
		ЕстьВозможность = Истина;
		// Аванс
	ИначеЕсли ОперацияСДенежнымиСредствами 
		И ЗначениеЗаполнено(ДокументРасчета)
		И ТипЗнч(ДокументРасчета) = Тип("ДокументСсылка.ЧекККМ")
		И НЕ ЗначениеЗаполнено(ДокументРасчета.ЗаказПокупателя)
		И ДокументРасчета.Товары.Количество() = 0 Тогда
		// Вовзрат аванса выданного чеком
		ЕстьВозможность = Истина;
	ИначеЕсли ОперацияСДенежнымиСредствами 
		И ЗначениеЗаполнено(ДокументРасчета)
		И ТипЗнч(ДокументРасчета) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
		И НЕ ЗначениеЗаполнено(ДокументРасчета.ЗаказПокупателя)
		И НЕ ЕстьДокументыВПКО(ДокументРасчета) Тогда
		// Вовзрат аванса выданного ПКО
		ЕстьВозможность = Истина;
	КонецЕсли;
	
	Возврат ЕстьВозможность;
	
КонецФункции // ВозможностьПустойТЧТовары()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция формирует текст запроса по серийным номерам.
// Возвращаемое значение: ТекстЗапроса - Строка.
Функция ТекстЗапросаТаблицаСерийныхНомеров()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|	Товары.Количество,
	|	Товары.Склад
	|ПОМЕСТИТЬ ТабТоварыВСЕ
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязиСерийныхНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабТовары.Номенклатура,
	|	ТабТовары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|	ТабТовары.Количество,
	|	ТабТовары.Склад
	|ПОМЕСТИТЬ ТабТовары
	|ИЗ
	|	ТабТоварыВСЕ КАК ТабТовары
	|ГДЕ
	|	ТабТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязиСерийныхНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СерийныеНомера.СерийныйНомер КАК Справочник.СерийныеНомера) КАК СерийныйНомер,
	|	СерийныеНомера.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
	|	1 КАК Количество
	|ПОМЕСТИТЬ ТабСерийныеНомера
	|ИЗ
	|	Документ.ЧекККМ.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	СерийныеНомера.Ссылка = &Ссылка
	|	И НЕ &ОперацияСДенежнымиСредствами
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязиСерийныхНомеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабСерийныеНомера.СерийныйНомер,
	|	ТабТовары.Склад КАК Отправитель,
	|	ТабТовары.Номенклатура,
	|	&АналитикаХозяйственнойОперации,
	|	1 КАК Количество,
	|	&Период КАК Период,
	|	NULL КАК Получатель
	|ПОМЕСТИТЬ ТаблицаДвижений
	|ИЗ
	|	ТабТовары КАК ТабТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабСерийныеНомера КАК ТабСерийныеНомера
	|		ПО ТабТовары.КлючСвязиСерийныхНомеров = ТабСерийныеНомера.КлючСвязиСерийныхНомеров
	|ГДЕ
	|	ТабТовары.Номенклатура.ИспользоватьСерийныеНомера
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	ТабТовары.Склад,
	|	ТабТовары.Номенклатура,
	|	&АналитикаХозяйственнойОперации,
	|	ТабТовары.Количество,
	|	&Период,
	|	NULL
	|ИЗ
	|	ТабТовары КАК ТабТовары
	|ГДЕ
	|	НЕ ТабТовары.Номенклатура.ИспользоватьСерийныеНомера
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМПодарочныхСертификатов.СерийныйНомер,
	|	NULL,
	|	ЧекККМПодарочныхСертификатов.ПодарочныйСертификат,
	|	ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.ПогашениеПодарочныхСертификатов),
	|	1,
	|	&Период,
	|	&СкладПродажи
	|ИЗ
	|	Документ.ЧекККМ.ПогашениеПодарочныхСертификатов КАК ЧекККМПодарочныхСертификатов
	|ГДЕ
	|	ЧекККМПодарочныхСертификатов.Ссылка = &Ссылка
	|	И НЕ &ОперацияСДенежнымиСредствами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДвижений.СерийныйНомер,
	|	ТаблицаДвижений.Отправитель,
	|	ТаблицаДвижений.Номенклатура,
	|	ТаблицаДвижений.АналитикаХозяйственнойОперации,
	|	&Организация КАК Организация,
	|	СУММА(ТаблицаДвижений.Количество) КАК Количество,
	|	ТаблицаДвижений.Период,
	|	ТаблицаДвижений.Получатель
	|ИЗ
	|	ТаблицаДвижений КАК ТаблицаДвижений
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДвижений.Период,
	|	ТаблицаДвижений.Получатель,
	|	ТаблицаДвижений.Отправитель,
	|	ТаблицаДвижений.Номенклатура,
	|	ТаблицаДвижений.АналитикаХозяйственнойОперации,
	|	ТаблицаДвижений.СерийныйНомер";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция формирует текст запроса по бонусам.
// Возвращаемое значение: ТекстЗапроса - Строка.
Функция ТекстЗапросаБонусы()
	
	ТекстЗапроса = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	&ПериодБонусов КАК Период,
	|	&Расход КАК ВидДвижения,
	|	Оплата.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	&КартаБонусов КАК ДисконтнаяКарта,
	|	ВЫБОР КОГДА &ЭтоВозврат ТОГДА -Оплата.КоличествоБонусовВСкидках ИНАЧЕ Оплата.КоличествоБонусовВСкидках КОНЕЦ КАК Начислено,
	|	0 КАК КСписанию,
	|	&ПустаяДата КАК ДатаПервоначальногоНачисления
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК Оплата
	|ГДЕ
	|	Оплата.Ссылка = &Ссылка
	|	И Оплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой)
	|	И Оплата.КоличествоБонусовВСкидках <> 0 И НЕ &ОперацияСДенежнымиСредствами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БонусныеБаллы.ДатаНачисления КАК Период,
	|	&Приход КАК ВидДвижения,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	&КартаБонусов КАК ДисконтнаяКарта,
	|	ВЫБОР КОГДА &ЭтоВозврат ТОГДА -БонусныеБаллы.КоличествоБонусныхБаллов ИНАЧЕ БонусныеБаллы.КоличествоБонусныхБаллов КОНЕЦ КАК Начислено,
	|	0 КАК КСписанию,
	|	&ПустаяДата КАК ДатаПервоначальногоНачисления
	|ПОМЕСТИТЬ БонусныеБаллы
	|ИЗ
	|	Документ.ЧекККМ.БонусныеБаллыКНачислению КАК БонусныеБаллы
	|ГДЕ
	|	БонусныеБаллы.Ссылка = &Ссылка
	|	И БонусныеБаллы.ДатаНачисления <> &ПустаяДата И НЕ &ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БонусныеБаллы.ДатаСписания,
	|	&Приход,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
	|	&КартаБонусов,
	|	0,
	|	ВЫБОР КОГДА &ЭтоВозврат ТОГДА -БонусныеБаллы.КоличествоБонусныхБаллов ИНАЧЕ БонусныеБаллы.КоличествоБонусныхБаллов КОНЕЦ,
	|	БонусныеБаллы.ДатаНачисления
	|ИЗ
	|	Документ.ЧекККМ.БонусныеБаллыКНачислению КАК БонусныеБаллы
	|ГДЕ
	|	БонусныеБаллы.Ссылка = &Ссылка
	|	И БонусныеБаллы.ДатаСписания <> &ПустаяДата И НЕ &ОперацияСДенежнымиСредствами
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БонусныеБаллы.Период КАК Период,
	|	БонусныеБаллы.ВидДвижения КАК ВидДвижения,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	СУММА(БонусныеБаллы.Начислено) КАК Начислено,
	|	СУММА(БонусныеБаллы.КСписанию) КАК КСписанию,
	|	БонусныеБаллы.ДатаПервоначальногоНачисления КАК ДатаПервоначальногоНачисления
	|ИЗ
	|	БонусныеБаллы КАК БонусныеБаллы
	|
	|СГРУППИРОВАТЬ ПО
	|	БонусныеБаллы.Период,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.ДисконтнаяКарта,
	|	БонусныеБаллы.ВидДвижения,
	|	ВЫБОР
	|		КОГДА БонусныеБаллы.ДисконтнаяКарта.КартаДляНакоплений = ЗНАЧЕНИЕ(Справочник.ИнформационныеКарты.ПустаяСсылка)
	|			ТОГДА БонусныеБаллы.ДисконтнаяКарта
	|		ИНАЧЕ БонусныеБаллы.ДисконтнаяКарта.КартаДляНакоплений
	|	КОНЕЦ,
	|	БонусныеБаллы.ДатаПервоначальногоНачисления";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСКлиентами()
	
	ТекстЗапроса = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА &ДокументРасчета = НЕОПРЕДЕЛЕНО
	|				ИЛИ ЧекККМОплата.ВидОплаты.ТипОплаты = &ВРассрочку
	|			ТОГДА &Ссылка
	|		ИНАЧЕ &ДокументРасчета
	|	КОНЕЦ КАК ДокументРасчета,
	|	&Расход КАК ВидДвижения,
	|	ЧекККМОплата.Сумма КАК Сумма,
	|	&Организация КАК Организация,
	|	&Контрагент КАК Контрагент,
	|	&ЗаказПокупателя КАК ЗаказПокупателя,
	|	&Магазин КАК Магазин,
	|	ЧекККМОплата.ВидОплаты КАК ВидОплаты
	|ПОМЕСТИТЬ ТаблицаРасчетыСКлиентами
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	&ИспользоватьРасчетыСКлиентами
	|	И ЧекККМОплата.Ссылка = &Ссылка
	|	И НЕ &ОперацияСДенежнымиСредствами
	|	И НЕ &ЭтоВозврат
	|	И (ЧекККМОплата.ВидОплаты.ТипОплаты = &ЗачетАванса
	|			ИЛИ ЧекККМОплата.ВидОплаты.ТипОплаты = &ВРассрочку)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	&Ссылка,
	|	&Ссылка,
	|	&Расход,
	|	ЧекККМОплата.Сумма,
	|	&Организация,
	|	&Контрагент,
	|	&ЗаказПокупателя,
	|	&Магазин,
	|	ЧекККМОплата.ВидОплаты
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	&ИспользоватьРасчетыСКлиентами
	|	И ЧекККМОплата.Ссылка = &Ссылка
	|	И НЕ &ОперацияСДенежнымиСредствами
	|	И НЕ &ЭтоВозврат
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = &ЗачетАванса
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = &ВРассрочку
	|	И НЕ ЧекККМОплата.ВидОплаты = &ВидОплатыНаличные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	&Ссылка,
	|	ВЫБОР
	|		КОГДА &ДокументРасчета = НЕОПРЕДЕЛЕНО
	|			ТОГДА &Ссылка
	|		ИНАЧЕ &ДокументРасчета
	|	КОНЕЦ,
	|	&Приход,
	|	ЧекККМОплата.Сумма,
	|	&Организация,
	|	&Контрагент,
	|	&ЗаказПокупателя,
	|	&Магазин,
	|	ЧекККМОплата.ВидОплаты
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	&ИспользоватьРасчетыСКлиентами
	|	И ЧекККМОплата.Ссылка = &Ссылка
	|	И НЕ &ЭтоВозврат
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = &ЗачетАванса
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = &ВРассрочку
	|	И НЕ ЧекККМОплата.ВидОплаты = &ВидОплатыНаличные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	&Ссылка,
	|	ВЫБОР
	|		КОГДА &ДокументРасчета = НЕОПРЕДЕЛЕНО
	|			ТОГДА &Ссылка
	|		ИНАЧЕ &ДокументРасчета
	|	КОНЕЦ,
	|	&Расход,
	|	ЧекККМОплата.Сумма,
	|	&Организация,
	|	&Контрагент,
	|	&ЗаказПокупателя,
	|	&Магазин,
	|	ЧекККМОплата.ВидОплаты
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	&ИспользоватьРасчетыСКлиентами
	|	И ЧекККМОплата.Ссылка = &Ссылка
	|	И &ЭтоВозврат
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = &ЗачетАванса
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = &ВРассрочку
	|	И НЕ ЧекККМОплата.ВидОплаты = &ВидОплатыНаличные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	&Ссылка,
	|	&Ссылка,
	|	&Приход,
	|	ЧекККМОплата.Сумма,
	|	&Организация,
	|	&Контрагент,
	|	&ЗаказПокупателя,
	|	&Магазин,
	|	ЧекККМОплата.ВидОплаты
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	&ИспользоватьРасчетыСКлиентами
	|	И ЧекККМОплата.Ссылка = &Ссылка
	|	И НЕ &ОперацияСДенежнымиСредствами
	|	И &ЭтоВозврат
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = &ЗачетАванса
	|	И НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = &ВРассрочку
	|	И НЕ ЧекККМОплата.ВидОплаты = &ВидОплатыНаличные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРасчетыСКлиентами.Период КАК Период,
	|	ТаблицаРасчетыСКлиентами.Регистратор КАК Регистратор,
	|	ТаблицаРасчетыСКлиентами.ДокументРасчета КАК ДокументРасчета,
	|	ТаблицаРасчетыСКлиентами.ВидДвижения КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА ТаблицаРасчетыСКлиентами.ВидОплаты = &ВидОплатыНаличные
	|			ТОГДА &СуммаНаличных
	|		ИНАЧЕ ТаблицаРасчетыСКлиентами.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаРасчетыСКлиентами.Организация КАК Организация,
	|	ТаблицаРасчетыСКлиентами.Контрагент КАК Контрагент,
	|	ТаблицаРасчетыСКлиентами.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаРасчетыСКлиентами.Магазин КАК Магазин
	|ИЗ
	|	ТаблицаРасчетыСКлиентами КАК ТаблицаРасчетыСКлиентами";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАкцизныеМарки()
	
	ТекстЗапроса = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ 							   КАК ВидДвижения,
	|	&Период 						   КАК Период,
	|	ТаблицаАкцизныеМарки.Ссылка        КАК Регистратор,
	|	&ОрганизацияЕГАИС                  КАК ОрганизацияЕГАИС,
	|	ТаблицаАкцизныеМарки.Справка2      КАК Справка2,
	|	Справки2ЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныеМарки.АкцизнаяМарка) КАК Количество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныеМарки.АкцизнаяМарка) КАК СвободныйОстаток
	|ИЗ
	|	Документ.ЧекККМ.АкцизныеМарки КАК ТаблицаАкцизныеМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Справки2ЕГАИС КАК Справки2ЕГАИС
	|			ПО Справки2ЕГАИС.Ссылка = ТаблицаАкцизныеМарки.Справка2
	|ГДЕ
	|	ТаблицаАкцизныеМарки.Ссылка = &Ссылка
	|	И ТаблицаАкцизныеМарки.Справка2 <> ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаАкцизныеМарки.Ссылка,
	|	ТаблицаАкцизныеМарки.Справка2,
	|	Справки2ЕГАИС.АлкогольнаяПродукция
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ДополнитьТоварамиПараметрыПриПробитииЧека(РеквизитыДокумента,
													ОбщиеПараметры, 
													ТаблицаТоваровЧека, 
													ТаблицаТоваровЕГАИС, 
													ТаблицаСоответствияТоваровСекциям, 
													ПризнакСпособаРасчета,
													ИспользуетсяКомиссионнаяТорговля,
													ИспользуетсяУчетИмпортныхТоваров)
													
														
	ЭтоАванс = ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная
			ИЛИ ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
	
	Если ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс Тогда
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		Если ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Возврат от:'") + " " + РеквизитыДокумента.Контрагент;
		Иначе
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Оплата от:'") + " " + РеквизитыДокумента.Контрагент;
		КонецЕсли;
		СтрокаПозицииЧека.Количество     = 1;
		СтрокаПозицииЧека.Цена           = РеквизитыДокумента.СуммаДокумента;
		СтрокаПозицииЧека.ЦенаСоСкидками = РеквизитыДокумента.СуммаДокумента;
		СтрокаПозицииЧека.Сумма          = РеквизитыДокумента.СуммаДокумента;
		СтрокаПозицииЧека.НомерСекции    = 2;
		Если ОбщиеПараметры.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ОСН Тогда
			
			Если РеквизитыДокумента.Дата > УчетНДС.ДатаПереходногоПериода() Тогда
				Если РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда 
					ЧекПродажи = РеквизитыДокумента.ЧекККМПродажа;
					Если ЗначениеЗаполнено(ЧекПродажи) И ЧекПродажи.Дата < УчетНДС.ДатаПереходногоПериода() Тогда  //Возврат аванса за 2018 год.
						СтрокаПозицииЧека.СтавкаНДС = 118;
					Иначе 
						СтрокаПозицииЧека.СтавкаНДС = 120;		
					КонецЕсли;
				Иначе 
					СтрокаПозицииЧека.СтавкаНДС = 120;
				КонецЕсли;
			Иначе 
				СтрокаПозицииЧека.СтавкаНДС = 118;
			КонецЕсли;
			
		Иначе
			СтрокаПозицииЧека.СтавкаНДС      = Неопределено;
		КонецЕсли;
		СтрокаПозицииЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
		СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
		
		ПодключаемоеОборудованиеРТ.ЗаполнитьПараметрыПлатежногоДоговораВСтроке(ОбщиеПараметры, СтрокаПозицииЧека);
		
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
	Иначе
		Для Каждого СтрокаТЧ Из ТаблицаТоваровЧека Цикл
			
			СтрокаТаблицыТоваров = Новый СписокЗначений();
			НаименованиеТовара = Строка(СтрокаТЧ.Номенклатура) + ?(ЗначениеЗаполнено(СтрокаТЧ.Характеристика), " (" + Строка(СтрокаТЧ.Характеристика) + ")", "");
			НомерСекции = ТаблицаСоответствияТоваровСекциям.Получить(СтрокаТЧ.НомерСтроки);
			
			ДанныеАлкогольнойПродукции = Новый Структура;
			ДанныеАлкогольнойПродукции.Вставить("АлкогольнаяПродукция", СтрокаТЧ.АлкогольнаяПродукция);
			ДанныеАлкогольнойПродукции.Вставить("Маркируемый", СтрокаТЧ.Маркируемый);
			ДанныеАлкогольнойПродукции.Вставить("КодАкцизнойМарки", Новый Массив);
			ДанныеАлкогольнойПродукции.Вставить("ОбъемДАЛ", СтрокаТЧ.ОбъемДАЛ);
			ДанныеАлкогольнойПродукции.Вставить("Крепость", СтрокаТЧ.Крепость);
			ДанныеАлкогольнойПродукции.Вставить("КодВидаПродукции", СтрокаТЧ.КодВидаПродукции);
			
			МассивСтрокЕГАИС = ТаблицаТоваровЕГАИС.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТЧ.КлючСвязи));
			Для Каждого СтрокаТоварыЕГАИС Из МассивСтрокЕГАИС Цикл
				Если НЕ ПустаяСтрока(СтрокаТоварыЕГАИС.КодАкцизнойМарки) Тогда
					ДанныеАлкогольнойПродукции.КодАкцизнойМарки.Добавить(СтрокаТоварыЕГАИС.КодАкцизнойМарки);
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Штрихкод) Тогда
				Штрихкод = ?(МассивСтрокЕГАИС.Количество() > 0, МассивСтрокЕГАИС[0].Штрихкод, "");
			Иначе
				Штрихкод = СтрокаТЧ.Штрихкод;
			КонецЕсли;
			
			ПараметрыАлкогольнойПродукции = ИнтеграцияЕГАИСРТ.ПараметрыАлкогольнойПродукции(ДанныеАлкогольнойПродукции);
			
			СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
			СтрокаПозицииЧека.Наименование = НаименованиеТовара;
			СтрокаПозицииЧека.Количество = ?(СтрокаТЧ.КоличествоУпаковок = 0, 1, СтрокаТЧ.КоличествоУпаковок);
			СтрокаПозицииЧека.Цена = ?(СтрокаТЧ.Цена = 0, СтрокаТЧ.Сумма, СтрокаТЧ.Цена);
			СтрокаПозицииЧека.Сумма = СтрокаТЧ.Сумма;
			СтрокаПозицииЧека.СуммаСкидок = СтрокаТЧ.СуммаАвтоматическойСкидки + СтрокаТЧ.СуммаРучнойСкидки + СтрокаТЧ.СуммаСкидкиОплатыБонусом;
			Если Окр(СтрокаПозицииЧека.Цена * СтрокаПозицииЧека.Количество, 2, 1) = СтрокаПозицииЧека.Сумма Тогда
				СтрокаПозицииЧека.ЦенаСоСкидками = СтрокаПозицииЧека.Цена;
			Иначе
				СтрокаПозицииЧека.ЦенаСоСкидками = Окр(СтрокаПозицииЧека.Сумма / СтрокаПозицииЧека.Количество, 2, 1);
			КонецЕсли;
			СтрокаПозицииЧека.НомерСекции = НомерСекции;
			
			СтрокаПозицииЧека.СуммаНДС = СтрокаТЧ.СуммаНДС;
			СтрокаПозицииЧека.Штрихкод = Штрихкод;
			Если РеквизитыДокумента.ОперацияСДенежнымиСредствами Тогда
				СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
			Иначе
				СтрокаПозицииЧека.ПризнакПредметаРасчета = СтрокаТЧ.ПризнакПредметаРасчета;
				Если ЗначениеЗаполнено(СтрокаТЧ.КодМаркировки) Тогда
					ДанныеМаркировки = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьКодМаркировки(СтрокаТЧ.КодМаркировки);
					
					Если ДанныеМаркировки.Разобран Тогда
						СтрокаПозицииЧека.Штрихкод = ДанныеМаркировки.EAN;
						
						Если СтрокаТЧ.ОбувнаяПродукция Тогда 
							ТипМаркировкиККТ = Перечисления.ТипыМаркировкиККТ.ОбувныеТовары;
						ИначеЕсли СтрокаТЧ.ТабачнаяПродукция Тогда 
							ТипМаркировкиККТ = Перечисления.ТипыМаркировкиККТ.ТабачнаяПродукция;
						КонецЕсли;
						
						СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ТипМаркировки = ТипМаркировкиККТ;
						СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.ГлобальныйИдентификаторТорговойЕдиницы = ДанныеМаркировки.ГлобальныйИдентификаторТорговойЕдиницы;
						СтрокаПозицииЧека.ДанныеКодаТоварнойНоменклатуры.СерийныйНомер = ДанныеМаркировки.СерийныйНомер;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			ПодключаемоеОборудованиеРТ.ЗаполнитьПараметрыПлатежногоДоговораВСтроке(ОбщиеПараметры, СтрокаПозицииЧека);
			
			НуженПересчетСуммыНДС = Истина;
			ДатаКорректировкиСтавкиНДС = РеквизитыДокумента.Дата;
			Если РеквизитыДокумента.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда 
				ЧекПродажи = РеквизитыДокумента.ЧекККМПродажа;
				Если ЗначениеЗаполнено(ЧекПродажи) И ЧекПродажи.Дата < УчетНДС.ДатаПереходногоПериода() Тогда  //Возврат товара за 2018 год.
					ДатаКорректировкиСтавкиНДС = ЧекПродажи.Дата;
					НуженПересчетСуммыНДС = Ложь;
				КонецЕсли;
			КонецЕсли;
			СтрокаТЧ.СтавкаНДС = УчетНДС.СкорректироватьСтавкуНДС(СтрокаТЧ.СтавкаНДС, ДатаКорректировкиСтавкиНДС);
			
			Если СтрокаТЧ.ЭтоПодарочныйСертификат Тогда
				СтрокаПозицииЧека.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс;
				СтрокаПозицииЧека.СтавкаНДС = ПодключаемоеОборудованиеРТ.СтавкаНДСВФорматеБПО(СтрокаТЧ.СтавкаНДС, Истина);
			Иначе
				СтрокаПозицииЧека.ПризнакСпособаРасчета = ПризнакСпособаРасчета;
				СтрокаПозицииЧека.СтавкаНДС = ПодключаемоеОборудованиеРТ.СтавкаНДСВФорматеБПО(СтрокаТЧ.СтавкаНДС, ЭтоАванс);
			КонецЕсли;
			
			Если НуженПересчетСуммыНДС Тогда
				СтрокаПозицииЧека.СуммаНДС = Окр(ОбработкаТабличнойЧастиТоварыСервер.РассчитатьСуммуНДС(СтрокаПозицииЧека.Сумма, СтрокаТЧ.СтавкаНДС), 2);		
			КонецЕсли;
			
			Если ИспользуетсяКомиссионнаяТорговля Тогда
				Если СтрокаТЧ.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
					Если ЗначениеЗаполнено(СтрокаТЧ.Договор) Тогда
						Если СтрокаТЧ.Договор.ПризнакАгента = Перечисления.ПризнакиАгента.Комиссионер Тогда
							СтрокаПозицииЧека.ПризнакАгентаПоПредметуРасчета = Перечисления.ПризнакиАгента.Комиссионер;
							СтрокаПозицииЧека.ДанныеАгента.ПлатежныйАгент.Телефон = СтрокаТЧ.Договор.ТелефонПоставщика;
							СтрокаПозицииЧека.ДанныеПоставщика.ИНН                = СтрокаТЧ.Договор.ИННПоставщикаУслуг;
							СтрокаПозицииЧека.ДанныеПоставщика.Телефон            = СтрокаТЧ.Договор.ТелефонПоставщика;
							СтрокаПозицииЧека.ДанныеПоставщика.Наименование       = СтрокаТЧ.Поставщик.Наименование; 
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ИспользуетсяУчетИмпортныхТоваров
				И РеквизитыДокумента.Контрагент.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
				СтрокаПозицииЧека.КодСтраныПроисхожденияТовара = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.НомерГТД.СтранаПроисхождения, "Код");
				СтрокаПозицииЧека.НомерТаможеннойДекларации    = СтрокаТЧ.НомерГТД.РегистрационныйНомерДекларации;
			КонецЕсли;
			
			СтрокаПозицииЧека.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмеренияПредметаРасчета;
			СтрокаПозицииЧека.Вставить("ПараметрыАлкогольнойПродукции", ПараметрыАлкогольнойПродукции);
			СтрокаПозицииЧека.НомерСтрокиТовара = СтрокаТЧ.НомерСтроки;
			
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОплатуПриПробитииЧекаККМ(ДокуметОбъект, ОбщиеПараметры)
	
	// Подготовка таблицы оплат
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМОплата.Сумма,
	|	ВЫРАЗИТЬ(ЧекККМОплата.ВидОплаты КАК Справочник.ВидыОплатЧекаККМ) КАК ВидОплаты
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	&Оплата КАК ЧекККМОплата
	|ГДЕ
	|	НЕ ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.Сумма,
	|	ТаблицаВЗапросе.ВидОплаты.ТипОплаты КАК ТипОплаты
	|ПОМЕСТИТЬ ТаблицаСТипамиОплат
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТаблицаСТипамиОплат.Сумма) КАК Сумма,
	|	ТаблицаСТипамиОплат.ТипОплаты
	|ИЗ
	|	ТаблицаСТипамиОплат КАК ТаблицаСТипамиОплат
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСТипамиОплат.ТипОплаты
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаСТипамиОплат.Сумма) > 0";
	
	Запрос.УстановитьПараметр("Оплата", ДокуметОбъект.Оплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	ТаблицаПоТипамОплат = Результат.Выгрузить();
	
	// Наличные
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.Наличные, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
		СтрокаОплаты.Вставить("Сумма", СтрокаТаблицы.Сумма);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// Платежная карта
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Электронно);
		СтрокаОплаты.Вставить("Сумма", СтрокаТаблицы.Сумма);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// Банковский кредит
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.БанковскийКредит, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Постоплата);
		СтрокаОплаты.Вставить("Сумма", СтрокаТаблицы.Сумма);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// Подарочный сертификат
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.ПодарочныйСертификат, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Предоплата);
		СтрокаОплаты.Вставить("Сумма", СтрокаТаблицы.Сумма);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОплатуПриПробитииЧекаККМ()

Процедура ЗаполнитьОплатуПриПробитииЧекаККМНаККТ(ДокуметОбъект, ОбщиеПараметры)
	
	// Подготовка таблицы оплат
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМОплата.Сумма,
	|	ВЫРАЗИТЬ(ЧекККМОплата.ВидОплаты КАК Справочник.ВидыОплатЧекаККМ) КАК ВидОплаты
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	&Оплата КАК ЧекККМОплата
	|ГДЕ
	|	НЕ ЧекККМОплата.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.Сумма,
	|	ТаблицаВЗапросе.ВидОплаты.ТипОплаты КАК ТипОплаты
	|ПОМЕСТИТЬ ТаблицаСТипамиОплат
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТаблицаСТипамиОплат.Сумма) КАК Сумма,
	|	ТаблицаСТипамиОплат.ТипОплаты
	|ИЗ
	|	ТаблицаСТипамиОплат КАК ТаблицаСТипамиОплат
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСТипамиОплат.ТипОплаты
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаСТипамиОплат.Сумма) >= 0";
	
	Запрос.УстановитьПараметр("Оплата", ДокуметОбъект.Оплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	ТаблицаПоТипамОплат = Результат.Выгрузить();
	
	// Наличные
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.Наличные, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Наличные'"));
		СтрокаОплаты.Вставить("Сумма", СтрокаТаблицы.Сумма);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	СуммаЭлектронно = 0;
	
	// Платежная карта
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СуммаЭлектронно = СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	// Банковский кредит
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.БанковскийКредит, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СуммаЭлектронно = СуммаЭлектронно + СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	Если СуммаЭлектронно > 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Электронно);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Электронно'"));
		СтрокаОплаты.Вставить("Сумма", СуммаЭлектронно);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	// В рассрочку
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.ВРассрочку, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Постоплата);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Постоплата'"));
		СтрокаОплаты.Вставить("Сумма", СтрокаТаблицы.Сумма);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	ЗачетАванса = 0;
	
	// Подарочный сертификат
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.ПодарочныйСертификат, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		ЗачетАванса = СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	// Зачет аванс
	СтрокаТаблицы = ТаблицаПоТипамОплат.Найти(Перечисления.ТипыОплатЧекаККМ.ЗачетАванса, "ТипОплаты");
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		ЗачетАванса = ЗачетАванса + СтрокаТаблицы.Сумма;
	КонецЕсли;
	
	Если ЗачетАванса > 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Предоплата);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Зачет аванс'"));
		СтрокаОплаты.Вставить("Сумма", ЗачетАванса);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	
КонецПроцедуры // ЗаполнитьОплатуПриПробитииЧекаККМНаККТ()

///////////////////////////////////////////////////////////////////////////////
// Печать

// Функция формирует табличный документ с печатной формой.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьГарантийныйТалон(МассивОбъектов, ОбъектыПечати)

	КолонкаКодов       = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	ВыводитьКоды       = ЗначениеЗаполнено(КолонкаКодов);
	ВыводитьУпаковки   = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Чек ККМ'");
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЧекаККМ_ТоварныйЧек";
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Магазин КАК Магазин,
	|	Документ.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	ВЫБОР КОГДА Документ.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(Документ.Организация)
	|		ИНАЧЕ &ТекстИП +
	|		    ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Фамилия, """") = """"
	|				ТОГДА """"
	|			ИНАЧЕ
	|				ФИОФизЛицСрезПоследнихИП.Фамилия + &ТекстПробел +
	|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Имя, """") = """"
	|						ТОГДА """"
	|						ИНАЧЕ ВЫРАЗИТЬ(ФИОФизЛицСрезПоследнихИП.Имя КАК СТРОКА(1)) + &ТекстТочка + &ТекстПробел
	|				КОНЕЦ
	|				+
	|				ВЫБОР	КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Отчество, """") = """"
	|						ТОГДА """"
	|						ИНАЧЕ ВЫРАЗИТЬ(ФИОФизЛицСрезПоследнихИП.Отчество КАК СТРОКА(1)) + &ТекстТочка
	|				КОНЕЦ
	|			КОНЕЦ
	|			+ """"
	|	КОНЕЦ КАК НаименованиеОрганизации,
	|	ВЫБОР КОГДА Документ.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрганизацияЮридическоеЛицо,
	|	Документ.Организация КАК Организация,
	|	Документ.СуммаДокумента КАК СуммаДокумента,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Магазин) КАК МагазинПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ОрганизацияПредставление,
	|	Документ.Ответственный.ФизическоеЛицо КАК Ответственный
	|ИЗ
	|	Документ.ЧекККМ КАК Документ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних() КАК ФИОФизЛицСрезПоследнихИП
	|ПО
	|	Документ.Организация = ФИОФизЛицСрезПоследнихИП.ФизЛицо
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|	И Документ.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка, Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.Представление КАК Товар,
	|	" + ?(ВыводитьКоды, "ТаблицаТовары.Номенклатура." + КолонкаКодов +" КАК КолонкаКодов,", "") + "
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ТаблицаТовары.Номенклатура.ВидНоменклатуры.СрокГарантии КАК СрокГарантии,
	|	ТаблицаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ.Серии КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|	И ТаблицаТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
	|	И ТаблицаТовары.Номенклатура.ВидНоменклатуры.СрокГарантии > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка");
	
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	УстановитьТекстовыеПараметрыЗапроса(Запрос);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЧекККМ.ПФ_MXL_ГарантийныйТалон");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	Если Результаты[1].Пустой() Тогда
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = НСтр("ru = 'Нет товаров с гарантийным сроком'");
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	ОбластьПоставщик = Макет.ПолучитьОбласть("Поставщик");
	ОбластьИНН       = Макет.ПолучитьОбласть("ИНН");
	ОбластьМагазин   = Макет.ПолучитьОбласть("Магазин");
	
	ОбластьШапкаНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьШапкаКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьШапкаДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
		                                  + Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	ОбластьСтрокаНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьСтрокаКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьСтрокаДанных = Макет.ПолучитьОбласть("Строка|Данные");
	
	// Вывести Итого.
	ОбластьИтогоНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьИтогоКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьИтогоДанных = Макет.ПолучитьОбласть("Итого|Данные");
	
	ОбластьПодписей      = Макет.ПолучитьОбласть("Подписи");
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнымЧастям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ВыборкаПоДокументам.ЭтоВозврат Тогда
			СинонимДокумента   = НСтр("ru='Гарантийный талон (возврат)'");
		Иначе
			СинонимДокумента   = НСтр("ru='Гарантийный талон'");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		СведенияОПоставщике = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.Дата);
		
		Если ВыборкаПоДокументам.ОрганизацияЮридическоеЛицо Тогда
			ОбластьПоставщик.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование");
		Иначе
			ОбластьПоставщик.Параметры.ПредставлениеПоставщика = ВыборкаПоДокументам.НаименованиеОрганизации;
		КонецЕсли;
		ОбластьПоставщик.Параметры.Поставщик = ВыборкаПоДокументам.Организация;
		ТабличныйДокумент.Вывести(ОбластьПоставщик);
		

		ОбластьИНН.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ТабличныйДокумент.Вывести(ОбластьИНН);

		ОбластьМагазин.Параметры.ПредставлениеМагазина = ВыборкаПоДокументам.МагазинПредставление;
		ОбластьМагазин.Параметры.Магазин = ВыборкаПоДокументам.Магазин;
		ТабличныйДокумент.Вывести(ОбластьМагазин);
		
		// Шапка
		
		ТабличныйДокумент.Вывести(ОбластьШапкаНомера);
		Если ВыводитьКоды Тогда
			ОбластьШапкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ТабличныйДокумент.Присоединить(ОбластьШапкаКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьШапкаДанных);
		
		// СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;

			ОбластьСтрокаНомера.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Вывести(ОбластьСтрокаНомера);

			Если ВыводитьКоды Тогда
				
				ОбластьСтрокаКодов.Параметры.Артикул = ВыборкаПоСтрокамТЧ["КолонкаКодов"];
				ТабличныйДокумент.Присоединить(ОбластьСтрокаКодов);
				
			КонецЕсли;

			ОбластьСтрокаДанных.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаДанных.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаДанных);
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьИтогоНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьИтогоКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьИтогоДанных);
		
		// ПОДПИСИ
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

// Функция формирует табличный документ с печатной формой КМ3.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьКМ3(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Чек ККМ'");
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПФ_MXL_КМ3";
	
	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокЧек.Ссылка КАК Ссылка,
	|	ДокЧек.Номер КАК Номер,
	|	ДокЧек.Дата КАК ДатаДокумента,
	|	ДокЧек.КассаККМ,
	|	ДокЧек.КассаККМ.Представление КАК Покупатель,
	|	ДокЧек.Ответственный.ФизическоеЛицо КАК КассирККМ,
	|	ДокЧек.КассаККМ.Владелец КАК Организация,
	|	ДокЧек.КассаККМ.Владелец КАК Руководители,
	|	ДокЧек.КассаККМ.Владелец.Представление КАК Поставщик,
	|	ДокЧек.КассаККМ.СерийныйНомер КАК СерийныйНомерККМ,
	|	ДокЧек.КассаККМ.РегистрационныйНомер КАК РегистрационныйНомерККМ,
	|	ДокЧек.ЧекККМПродажа.НомерЧекаККМ КАК НомерЧека,
	|	ДокЧек.СуммаДокумента КАК СуммаДокумента,
	|	ДокЧек.КассаККМ.ПодключаемоеОборудование.Наименование КАК ПредставлениеККМ,
	|	ДокЧек.ВидОперации
	|ИЗ
	|	Документ.ЧекККМ КАК ДокЧек
	|ГДЕ
	|	ДокЧек.Ссылка В(&МассивОбъектов)
	|	И ДокЧек.Проведен
	|	И ДокЧек.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ДатаДокумента";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КМ3");
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	
	Если Результаты[0].Пустой() Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ОтсутствиеДанных");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ОбластьАкта");
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоДокументам);
		
		СведенияОбОрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.ДатаДокумента);
		
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны");
		ОбластьМакета.Параметры.СуммаПрописью            = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(ВыборкаПоДокументам.СуммаДокумента);
		ОбластьМакета.Параметры.НомерДокумента           = "";

		ОбластьМакета.Параметры.ОрганизацияПоОКПО     = СведенияОбОрганизации.КодПоОКПО;
		ОбластьМакета.Параметры.ОрганизацияИНН        = СведенияОбОрганизации.ИНН;
		ОбластьМакета.Параметры.ВидДеятельностиПоОКДП = "";
		
		Руководители          = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(ВыборкаПоДокументам.Руководители, ВыборкаПоДокументам.ДатаДокумента);
		Руководитель          = Руководители.Руководитель;
		СтаршийКассир         = Руководители.Кассир;
		ДолжностьРуководителя = Руководители.РуководительДолжность;
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.КассирККМ) Тогда
			СтруктураФИОКассираККМ  = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(ВыборкаПоДокументам.КассирККМ, ВыборкаПоДокументам.ДатаДокумента);
			ФИОКассираОперациониста = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(Ложь,
			                           СтруктураФИОКассираККМ.Фамилия,
			                           СтруктураФИОКассираККМ.Имя,
			                           СтруктураФИОКассираККМ.Отчество);
		КонецЕсли;
		
		ОбластьМакета.Параметры.ФИОКассираОрганизации   = СтаршийКассир;
		ОбластьМакета.Параметры.ФИОРуководителя         = Руководитель;
		ОбластьМакета.Параметры.ФИОКассираОперациониста = ФИОКассираОперациониста;
		ОбластьМакета.Параметры.ДолжностьРуководителя   = ДолжностьРуководителя;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной формой узкого чека для печати на принтерах с чековой лентой.
//
Функция ПечатьТоварногоЧекаДляПД(МассивОбъектов, ОбъектыПечати)

	ВыводитьУпаковки   = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Чек ККМ'");
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЧекаККМ_ТоварныйЧекДляПД";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Магазин КАК Магазин,
	|	Документ.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА Документ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	ВЫБОР
	|		КОГДА Документ.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Документ.Организация)
	|		ИНАЧЕ &ТекстИП + ВЫБОР
	|				КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Фамилия, """") = """"
	|					ТОГДА """"
	|				ИНАЧЕ ФИОФизЛицСрезПоследнихИП.Фамилия + &ТекстПробел + ВЫБОР
	|						КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Имя, """") = """"
	|							ТОГДА """"
	|						ИНАЧЕ ФИОФизЛицСрезПоследнихИП.Имя + &ТекстПробел
	|					КОНЕЦ + ВЫБОР
	|						КОГДА ЕСТЬNULL(ФИОФизЛицСрезПоследнихИП.Отчество, """") = """"
	|							ТОГДА """"
	|						ИНАЧЕ ФИОФизЛицСрезПоследнихИП.Отчество
	|					КОНЕЦ
	|			КОНЕЦ + """"
	|	КОНЕЦ КАК НаименованиеОрганизации,
	|	ВЫБОР
	|		КОГДА Документ.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрганизацияЮридическоеЛицо,
	|	Документ.Организация КАК Организация,
	|	Документ.СуммаДокумента КАК СуммаДокумента,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Магазин) КАК МагазинПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация) КАК ОрганизацияПредставление,
	|	Документ.Ответственный.ФизическоеЛицо КАК Ответственный,
	|	Документ.КассаККМ,
	|	Документ.КассаККМ.ШиринаЛенты КАК ШиринаЛенты,
	|	Документ.Организация.ИНН КАК ИНН
	|ИЗ
	|	Документ.ЧекККМ КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(, ) КАК ФИОФизЛицСрезПоследнихИП
	|		ПО Документ.Организация = ФИОФизЛицСрезПоследнихИП.ФизЛицо
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|	И Документ.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОплата.ВидОплаты.ТипОплаты КАК ТипОплаты,
	|	ТаблицаОплата.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаОплата.ВидОплаты.ТипОплаты) КАК ПредставлениеТипОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|					И ТаблицаОплата.ВидОплаты.ТипОплаты <> ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|				ТОГДА ТаблицаОплата.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаБезналичныхОплат,
	|	СУММА(ТаблицаОплата.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ТаблицаОплата
	|ГДЕ
	|	ТаблицаОплата.Ссылка В(&МассивОбъектов)
	|	И ТаблицаОплата.Ссылка.Проведен
	|	И (НЕ(ТаблицаОплата.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				И ТаблицаОплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплата.Ссылка,
	|	ТаблицаОплата.ВидОплаты.ТипОплаты
	|
	|ИМЕЮЩИЕ
	|	(НЕ СУММА(ТаблицаОплата.Сумма) = 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.Представление КАК Товар,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Упаковка.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.КоличествоУпаковок
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка");
	
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	УстановитьТекстовыеПараметрыЗапроса(Запрос);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЧекККМ.ПФ_MXL_ТоварныйЧекДляПД");
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	ВыборкаПоТабличнойЧастиОплата = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоТабличнымЧастям = Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ШиринаЛенты = ВыборкаПоДокументам.ШиринаЛенты;
		Если ШиринаЛенты = 0 Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У кассы %1 документ (%2) не задана ширина ленты'"),
				ВыборкаПоДокументам.КассаККМ,
				ВыборкаПоДокументам.Ссылка
			);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст);
				
			Продолжить;
		КонецЕсли;
		
		ОбластьШапкаЧека         = Макет.ПолучитьОбласть("ШапкаЧека|_"         + ШиринаЛенты);
		ОбластьТелоЧека          = Макет.ПолучитьОбласть("ТелоЧека|_"          + ШиринаЛенты);
		ОбластьТелоЧекаСкидка    = Макет.ПолучитьОбласть("ТелоЧекаСкидка|_"    + ШиринаЛенты);
		ОбластьТелоЧекаОтступ    = Макет.ПолучитьОбласть("ТелоЧекаОтступ|_"    + ШиринаЛенты);
		ОбластьПодвалЧека        = Макет.ПолучитьОбласть("ПодвалЧека|_"        + ШиринаЛенты);
		ОбластьПодвалЧекаОплата  = Макет.ПолучитьОбласть("ПодвалЧекаОплата|_"  + ШиринаЛенты);
		ОбластьПодвалЧекаОстаток = Макет.ПолучитьОбласть("ПодвалЧекаОстаток|_" + ШиринаЛенты);
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ВыборкаПоДокументам.ЭтоВозврат Тогда
			СинонимДокумента   = НСтр("ru='Чек (возврат)'");
		Иначе
			СинонимДокумента   = НСтр("ru='Чек'");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьШапкаЧека.Параметры.Заголовок = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		ОбластьШапкаЧека.Параметры.Организация    = ВыборкаПоДокументам.НаименованиеОрганизации;
		ОбластьШапкаЧека.Параметры.ИНН            = ВыборкаПоДокументам.ИНН;
		
		
		
		ТабличныйДокумент.Вывести(ОбластьШапкаЧека);
		
		ВсегоНаименований = 0;
		Сумма             = 0;
		ВсегоСкидок       = 0;
		ВсегоБезСкидок    = 0;
		
		// СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;

			ОбластьТелоЧека.Параметры.НаименованиеТовара = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление)
														 + "(" + ВыборкаПоСтрокамТЧ.ЕдиницаИзмерения + ")";
			ОбластьТелоЧека.Параметры.КоличествоЦена     = Формат( ВыборкаПоСтрокамТЧ.Количество, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧН=; ЧГ=0")
														 + " х "
														 + Формат( ВыборкаПоСтрокамТЧ.Цена, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");

			КонечнаяСкидка =  ВыборкаПоСтрокамТЧ.Количество *  ВыборкаПоСтрокамТЧ.Цена -  ВыборкаПоСтрокамТЧ.Сумма;
			ТабличныйДокумент.Вывести(ОбластьТелоЧека);

			Если КонечнаяСкидка <> 0 Тогда
				ОбластьТелоЧекаСкидка.Параметры.ЗагСкидка = ?(КонечнаяСкидка > 0, "Скидка:", "Надбавка:");
				ОбластьТелоЧекаСкидка.Параметры.Скидка    = Формат(?(КонечнаяСкидка > 0, КонечнаяСкидка, -КонечнаяСкидка), "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				ТабличныйДокумент.Вывести(ОбластьТелоЧекаСкидка);
			КонецЕсли;

			ТабличныйДокумент.Вывести(ОбластьТелоЧекаОтступ);
		КонецЦикла;
		
		// ПОДВАЛ
		ОбластьПодвалЧека.Параметры.Итог = Формат(ВыборкаПоДокументам.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		ТабличныйДокумент.Вывести(ОбластьПодвалЧека);
		
		
		СуммаБезналичныхОплат = 0;
		СуммаОплат = 0;
		
		// Оплата
		Если ВыборкаПоТабличнойЧастиОплата.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			
			ВыборкаПоОплата = ВыборкаПоТабличнойЧастиОплата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоОплата.Следующий() Цикл
				ОбластьПодвалЧекаОплата.Параметры.ТипОплаты = Строка(ВыборкаПоОплата.ПредставлениеТипОплаты) + ":";
				ОбластьПодвалЧекаОплата.Параметры.Оплата = Формат(ВыборкаПоОплата.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				ТабличныйДокумент.Вывести(ОбластьПодвалЧекаОплата);
				СуммаБезналичныхОплат = СуммаБезналичныхОплат + ВыборкаПоОплата.СуммаБезналичныхОплат;
				СуммаОплат = СуммаОплат + ВыборкаПоОплата.Сумма;
			КонецЦикла;
			
			Если ВыборкаПоДокументам.ЭтоВозврат Тогда
				СуммаНаличных = ВыборкаПоДокументам.СуммаДокумента - СуммаБезналичныхОплат;
				Если СуммаНаличных > 0  Тогда
					ОбластьПодвалЧекаОплата.Параметры.ТипОплаты = "Наличные: ";
					ОбластьПодвалЧекаОплата.Параметры.Оплата = Формат(СуммаНаличных, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
					ТабличныйДокумент.Вывести(ОбластьПодвалЧекаОплата);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		// ПОДПИСИ
		Если ВыборкаПоДокументам.ЭтоВозврат Тогда
			ОбластьПодвалЧекаОстаток.Параметры.Сдача = "0.00";
		Иначе
			ОбластьПодвалЧекаОстаток.Параметры.Сдача = Формат(СуммаОплат - ВыборкаПоДокументам.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		КонецЕсли;
		
		ОбластьПодвалЧекаОстаток.Параметры.Сотрудник = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		ТабличныйДокумент.Вывести(ОбластьПодвалЧекаОстаток);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

Процедура УстановитьТекстовыеПараметрыЗапроса(Запрос)
	
	Запрос.УстановитьПараметр("ТекстИП"    , НСтр("ru = 'ИП'") + " ");
	Запрос.УстановитьПараметр("ТекстПробел", " ");
	Запрос.УстановитьПараметр("ТекстТочка" , ".");
	
КонецПроцедуры

Функция ПечатьОписиНоменклатуры(МассивОбъектов, ОбъектыПечати)
	
	КолонкаКодов       = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	ВыводитьКоды       = ЗначениеЗаполнено(КолонкаКодов);
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Организация КАК Организация,
	|	ТаблицаДокументов.Магазин,
	|	ТаблицаДокументов.Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СтруктураПечати = Новый Структура;
	СтруктураПечати.Вставить("ИмяРеквизита1", "Организация");
	СтруктураПечати.Вставить("ИмяРеквизита2", "Магазин");
	СтруктураПечати.Вставить("КоличествоРеквизитов", 2);
	СтруктураПечати.Вставить("ВыводитьКоды", ВыводитьКоды);
	СтруктураПечати.Вставить("КолонкаКодов", КолонкаКодов);
	
	ПервыйДокумент = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПечати.Вставить("Документ", Выборка.Ссылка);
		СтруктураПечати.Вставить("Реквизит1", Выборка.Организация);
		СтруктураПечати.Вставить("Реквизит2", Выборка.Магазин);
		
		УправлениеПечатьюРТ.ПечатьОписиНоменклатуры(ТабличныйДокумент, ОбъектыПечати, СтруктураПечати, ПервыйДокумент);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ЕстьДокументыВПКО(ПриходныйКассовыйОрдер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом В(&МассивПустыхДокументов)";
	
	МассивПустыхДокументов = Новый Массив;
	МассивПустыхДокументов.Добавить(Документы.РеализацияТоваров.ПустаяСсылка());
	МассивПустыхДокументов.Добавить(Документы.ВозвратТоваровПоставщику.ПустаяСсылка());
	МассивПустыхДокументов.Добавить(Документы.ЧекККМ.ПустаяСсылка());
	МассивПустыхДокументов.Добавить(Документы.РасходныйКассовыйОрдер.ПустаяСсылка());
	МассивПустыхДокументов.Добавить(Документы.РеализацияТоваров.ПустаяСсылка());
	МассивПустыхДокументов.Добавить(Документы.ВводОстатковРасчетовСКлиентами.ПустаяСсылка());
	МассивПустыхДокументов.Добавить(Неопределено);
	
	Запрос.УстановитьПараметр("Ссылка", ПриходныйКассовыйОрдер);
	Запрос.УстановитьПараметр("МассивПустыхДокументов", МассивПустыхДокументов);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		Возврат Истина
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеЕГАИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

// Статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции


// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции


// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Возврат ЧекиЕГАИС.ПоследовательностьОпераций(ДокументСсылка);
	
КонецФункции

// Опеределить необходимость перезаписи движений.
//
// Параметры:
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Предыдущий статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перезаписи движений.
//
Функция ОбновлятьДвижения(ПредыдущийСтатус, НовыйСтатус) Экспорт
	Возврат Ложь;
КонецФункции

// Опеределить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Предыдущий статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПоУмолчанию();
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат ЧекиЕГАИС.ДальнейшееДействиеПоУмолчанию();
	
КонецФункции

#КонецОбласти

#Область СообщенияЕГАИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
		
		Возврат ЧекЕГАИСXML(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию Тогда
		
		Возврат ЧекЕГАИСОтменаXML(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

Функция ЧекЕГАИСXML(ДокументСсылка, ДополнительныеПараметры)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ КАК Ссылка,
	|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
	|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Номер КАК Номер,
	|	&ТекущаяДата КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.Ссылка КАК ДокументОснование,
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС,
	|	КлассификаторОрганизацийЕГАИС.Код КАК ИдентификаторФСРАР,
	|	КлассификаторОрганизацийЕГАИС.ФорматОбмена КАК ФорматОбмена,
	|	КлассификаторОрганизацийЕГАИС.ИНН КАК ИНН,
	|	КлассификаторОрганизацийЕГАИС.КПП КАК КПП,
	|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
	|	Шапка.Ответственный КАК Ответственный,
	|	&НомерСмены КАК НомерСмены,
	|	&НомерЧека КАК НомерЧекаККМ,
	|	ВЫБОР
	|		КОГДА &СерийныйНомер = НЕОПРЕДЕЛЕНО
	|			ТОГДА Шапка.КассаККМ.СерийныйНомер
	|		ИНАЧЕ &СерийныйНомер
	|	КОНЕЦ КАК СерийныйНомерККМ
	|ИЗ
	|	Документ.ЧекККМ КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО Шапка.Магазин = КлассификаторОрганизацийЕГАИС.ТорговыйОбъект
	|			И Шапка.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМарки.НомерСтроки КАК НомерСтроки,
	|	АкцизныеМарки.КлючСвязи КАК ИдентификаторСтроки,
	|	АкцизныеМарки.КодАкцизнойМарки КАК КодАкцизнойМарки
	|ИЗ
	|	Документ.ЧекККМ.АкцизныеМарки КАК АкцизныеМарки
	|ГДЕ
	|	АкцизныеМарки.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.КлючСвязи КАК ИдентификаторСтроки,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|			ТОГДА Товары.Цена
	|		ИНАЧЕ -Товары.Цена
	|	КОНЕЦ КАК Цена,
	|	Товары.Штрихкод КАК Штрихкод,
	|	Товары.Номенклатура.ОбъемДАЛ * 10 КАК Объем
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И ЕСТЬNULL(Товары.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Маркируемый, ЛОЖЬ)
	|	И НЕ ЕСТЬNULL(Товары.Номенклатура.ВидНоменклатуры.ПродаетсяВРозлив, ЛОЖЬ)
	|	И Товары.Номенклатура.АлкогольнаяПродукция");
	
	Если ДополнительныеПараметры = Неопределено Тогда
		РеквизитыЧека = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "НомерЧекаККМ, НомерСменыККМ");
		
		Запрос.УстановитьПараметр("НомерЧека", РеквизитыЧека.НомерЧекаККМ);
		Запрос.УстановитьПараметр("НомерСмены", РеквизитыЧека.НомерСменыККМ);
		Запрос.УстановитьПараметр("СерийныйНомер", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("НомерЧека", ДополнительныеПараметры.НомерЧека);
		Запрос.УстановитьПараметр("НомерСмены", ДополнительныеПараметры.НомерСмены);
		Запрос.УстановитьПараметр("СерийныйНомер", ДополнительныеПараметры.СерийныйНомер);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Перечисления.ВидыДокументовЕГАИС.ЧекККМ);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Возврат ИтоговыеСообщенияXMLДляЕГАИС(ДокументСсылка, РезультатЗапроса, Перечисления.ВидыДокументовЕГАИС.ЧекККМ);
	
КонецФункции

Функция ЧекЕГАИСОтменаXML(ДокументСсылка, ДополнительныеПараметры)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ КАК Ссылка,
	|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
	|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Номер КАК Номер,
	|	&ТекущаяДата КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.Ссылка КАК ДокументОснование,
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС,
	|	КлассификаторОрганизацийЕГАИС.Код КАК ИдентификаторФСРАР,
	|	КлассификаторОрганизацийЕГАИС.ФорматОбмена КАК ФорматОбмена,
	|	КлассификаторОрганизацийЕГАИС.ИНН КАК ИНН,
	|	КлассификаторОрганизацийЕГАИС.КПП КАК КПП,
	|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
	|	Шапка.Ответственный КАК Ответственный,
	|	&НомерСмены КАК НомерСмены,
	|	&НомерЧека КАК НомерЧекаККМ,
	|	ВЫБОР
	|		КОГДА &СерийныйНомер = НЕОПРЕДЕЛЕНО
	|			ТОГДА Шапка.КассаККМ.СерийныйНомер
	|		ИНАЧЕ &СерийныйНомер
	|	КОНЕЦ КАК СерийныйНомерККМ
	|ИЗ
	|	Документ.ЧекККМ КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО Шапка.Магазин = КлассификаторОрганизацийЕГАИС.ТорговыйОбъект
	|			И Шапка.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМарки.НомерСтроки КАК НомерСтроки,
	|	АкцизныеМарки.КлючСвязи КАК ИдентификаторСтроки,
	|	АкцизныеМарки.КодАкцизнойМарки КАК КодАкцизнойМарки
	|ИЗ
	|	Документ.ЧекККМ.АкцизныеМарки КАК АкцизныеМарки
	|ГДЕ
	|	АкцизныеМарки.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.КлючСвязи КАК ИдентификаторСтроки,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА Товары.Цена
	|		ИНАЧЕ -Товары.Цена
	|	КОНЕЦ КАК Цена,
	|	Товары.Штрихкод КАК Штрихкод,
	|	Товары.Номенклатура.ОбъемДАЛ * 10 КАК Объем
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И ЕСТЬNULL(Товары.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Маркируемый, ЛОЖЬ)
	|	И Товары.Номенклатура.АлкогольнаяПродукция");
	
	Если ДополнительныеПараметры = Неопределено Тогда
		РеквизитыЧека = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "НомерЧекаККМ, НомерСменыККМ");
		
		Запрос.УстановитьПараметр("НомерЧека", РеквизитыЧека.НомерЧекаККМ);
		Запрос.УстановитьПараметр("НомерСмены", РеквизитыЧека.НомерСменыККМ);
		Запрос.УстановитьПараметр("СерийныйНомер", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("НомерЧека", ДополнительныеПараметры.НомерЧека);
		Запрос.УстановитьПараметр("НомерСмены", ДополнительныеПараметры.НомерСмены);
		Запрос.УстановитьПараметр("СерийныйНомер", ДополнительныеПараметры.СерийныйНомер);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Перечисления.ВидыДокументовЕГАИС.ЧекККМ);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Возврат ИтоговыеСообщенияXMLДляЕГАИС(ДокументСсылка, РезультатЗапроса, Перечисления.ВидыДокументовЕГАИС.ЧекККМ);
	
КонецФункции

Функция ИтоговыеСообщенияXMLДляЕГАИС(ДокументСсылка, РезультатЗапроса, Операция) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Шапка         = РезультатЗапроса[РезультатЗапроса.Количество() - 3].Выбрать();
	Товары        = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выгрузить();
	АкцизныеМарки = РезультатЗапроса[РезультатЗапроса.Количество() - 2].Выгрузить();
	АкцизныеМарки.Индексы.Добавить("ИдентификаторСтроки");
	
	Если Шапка.Количество() > 1 Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ТекстСообщения = НСтр("ru = 'Ошибка сопоставления организаций ЕГАИС с данными информационной базы.
		                            |По данным сопоставления найдено несколько организаций ЕГАИС'");
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстСообщения);
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Шапка.ОрганизацияЕГАИС) Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ТекстСообщения = НСтр("ru = 'Ошибка сопоставления организаций ЕГАИС с данными информационной базы.
		                            |Не удалось найти организацию ЕГАИС'");
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстСообщения);
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена(Шапка.ФорматОбмена);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	АдресТорговогоОбъекта = ИнтеграцияЕГАИСПереопределяемый.АдресТорговогоОбъекта(Шапка.ТорговыйОбъект);
	
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресТорговогоОбъекта) Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Не заполнен адрес торгового объекта: %1'"), Шапка.ТорговыйОбъект));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	ЧекXDTO = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "inn",      Шапка.ИНН,                           СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "kpp",      Шапка.КПП,                           СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "address",  АдресТорговогоОбъекта,               СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "name",     Строка(Шапка.ТорговыйОбъект),        СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "kassa",    Шапка.СерийныйНомерККМ,              СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "shift",    Шапка.НомерСмены,                    СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "number",   Шапка.НомерЧекаККМ,                  СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "datetime", Формат(Шапка.Дата, "ДФ=ddMMyyHHmm"), СообщениеXML);
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		Цена  = Формат(СтрокаТЧ.Цена, "ЧДЦ=2; ЧРД=.; ЧГ=0");
		Объем = Формат(СтрокаТЧ.Объем, "ЧДЦ=4; ЧРД=.; ЧГ=0");
		
		КодыАкцизныхМарок = Новый Массив;
		НайденныеСтроки = АкцизныеМарки.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТЧ.ИдентификаторСтроки));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			КодыАкцизныхМарок.Добавить(НайденнаяСтрока.КодАкцизнойМарки);
		КонецЦикла;
		
		Если КодыАкцизныхМарок.Количество() > 0 Тогда
			
			Для Каждого КодАкцизнойМарки Из КодыАкцизныхМарок Цикл
				
				Bottle = ИнтеграцияЕГАИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Bottle");
				
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "price"  , Цена, СообщениеXML);
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "barcode", КодАкцизнойМарки, СообщениеXML);
				ean = "";
				ТипШтрихкодаРТ = ПодключаемоеОборудованиеРТВызовСервера.ОпределитьТипШтрихкода(СтрокаТЧ.Штрихкод);
				Если ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13
					ИЛИ ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8
					ИЛИ ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.ITF14 Тогда
					ean = СтрокаТЧ.Штрихкод;
				КонецЕсли;
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "ean", ean, СообщениеXML);
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "volume" , Объем, СообщениеXML);
				
				ЧекXDTO.Bottle.Добавить(Bottle);
				
			КонецЦикла;
			
		Иначе
			
			ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеXML,
					СтрШаблон(
						НСтр("ru = 'Не заполнены акцизные марки в строке %1 табличной части ""Товары""'"), СтрокаТЧ.НомерСтроки));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ЧекXDTOВXML(ЧекXDTO, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ПриИзмененииСтатусаЧека(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
КонецПроцедуры

Процедура ПриИзмененииСтатусаЧека(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидОперации");
	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		ДобавитьДвижения = ИнтеграцияЕГАИС.СтатусТребуетДобавленияДвижений(ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокСвободныйОстаток(), ПредыдущийСтатус, НовыйСтатус)
		               ИЛИ ИнтеграцияЕГАИС.СтатусТребуетДобавленияДвижений(ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокКоличество(), ПредыдущийСтатус, НовыйСтатус);
		УдалитьДвижения = ИнтеграцияЕГАИС.СтатусТребуетУдаленияДвижений(ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокСвободныйОстаток(), ПредыдущийСтатус, НовыйСтатус)
		               ИЛИ ИнтеграцияЕГАИС.СтатусТребуетУдаленияДвижений(ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокКоличество(), ПредыдущийСтатус, НовыйСтатус);
	Иначе
		УдалитьДвижения = ИнтеграцияЕГАИС.СтатусТребуетДобавленияДвижений(ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокСвободныйОстаток(), ПредыдущийСтатус, НовыйСтатус)
		               Или ИнтеграцияЕГАИС.СтатусТребуетДобавленияДвижений(ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокКоличество(), ПредыдущийСтатус, НовыйСтатус);
		ДобавитьДвижения = ИнтеграцияЕГАИС.СтатусТребуетУдаленияДвижений(ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокСвободныйОстаток(), ПредыдущийСтатус, НовыйСтатус)
		               Или ИнтеграцияЕГАИС.СтатусТребуетУдаленияДвижений(ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокКоличество(), ПредыдущийСтатус, НовыйСтатус);
	КонецЕсли;
	
	ЗапросОрганизация = Новый Запрос;
	ЗапросОрганизация.Текст = "
	|ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС,
	|	ЧекККМАкцизныеМарки.АкцизнаяМарка КАК АкцизнаяМарка,
	|	ЧекККМАкцизныеМарки.Справка2 КАК Справка2,
	|	ЧекККМАкцизныеМарки.Справка2.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|ИЗ
	|	Документ.ЧекККМ КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО Шапка.Магазин = КлассификаторОрганизацийЕГАИС.ТорговыйОбъект
	|			И Шапка.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.АкцизныеМарки КАК ЧекККМАкцизныеМарки
	|		ПО Шапка.Ссылка = ЧекККМАкцизныеМарки.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка";
	ЗапросОрганизация.УстановитьПараметр("Ссылка", ДокументСсылка);
	АкцизныеМарки = ЗапросОрганизация.Выполнить().Выгрузить();
	// Для списания из регистра №3
	Если ДобавитьДвижения Тогда
		
		Для Каждого СтрокаТЧ Из АкцизныеМарки Цикл
			
			Если ЗначениеЗаполнено(СтрокаТЧ.АкцизнаяМарка) Тогда
				ТребуетсяРезервирование = ИнтеграцияЕГАИС.СтатусТребуетДобавленияДвижений(ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокСвободныйОстаток(), ПредыдущийСтатус, НовыйСтатус)
				                        И ИнтеграцияЕГАИС.НетДвижений(ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокКоличество(), ПредыдущийСтатус, НовыйСтатус);
				
				ДанныеЗаписиСтатуса = Справочники.ШтрихкодыУпаковокТоваров.СтруктураЗаписиСтатусаУпаковки();
				ДанныеЗаписиСтатуса.ОрганизацияЕГАИС     = СтрокаТЧ.ОрганизацияЕГАИС;
				ДанныеЗаписиСтатуса.АкцизнаяМарка        = СтрокаТЧ.АкцизнаяМарка;
				ДанныеЗаписиСтатуса.Справка2             = СтрокаТЧ.Справка2;
				ДанныеЗаписиСтатуса.АлкогольнаяПродукция = СтрокаТЧ.Справка2.АлкогольнаяПродукция;
				
				Если ТребуетсяРезервирование Тогда
					ДанныеЗаписиСтатуса.Статус = Перечисления.СтатусыАкцизныхМарок.ВРезерве;
				Иначе
					ДанныеЗаписиСтатуса.Статус = Перечисления.СтатусыАкцизныхМарок.Реализована;
				КонецЕсли;
				
				ДанныеЗаписиСтатуса.Основание = ДокументСсылка;
				РегистрыСведений.АкцизныеМаркиЕГАИС.ВыполнитьЗаписьВРегистр(ДанныеЗаписиСтатуса);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Для восстановления записи в регистре №3
	Если УдалитьДвижения Тогда
		
		Для Каждого СтрокаТЧ Из АкцизныеМарки Цикл
			
			Если ЗначениеЗаполнено(СтрокаТЧ.АкцизнаяМарка) Тогда
				ДанныеЗаписиСтатуса = Справочники.ШтрихкодыУпаковокТоваров.СтруктураЗаписиСтатусаУпаковки();
				ДанныеЗаписиСтатуса.ОрганизацияЕГАИС     = СтрокаТЧ.ОрганизацияЕГАИС;
				ДанныеЗаписиСтатуса.АкцизнаяМарка        = СтрокаТЧ.АкцизнаяМарка;
				ДанныеЗаписиСтатуса.Справка2             = СтрокаТЧ.Справка2;
				ДанныеЗаписиСтатуса.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
				ДанныеЗаписиСтатуса.Статус               = Перечисления.СтатусыАкцизныхМарок.ВНаличии;
				
				ДанныеЗаписиСтатуса.Основание = ДокументСсылка;
				РегистрыСведений.АкцизныеМаркиЕГАИС.ВыполнитьЗаписьВРегистр(ДанныеЗаписиСтатуса);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
