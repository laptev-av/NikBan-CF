#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция находит счета-фактуры заданного документа.
//
// Параметры:
//	Основание - ДокументСсылка - Документ, для которого необходимо найти счет-фактуру.
//	Организация - СправочникСсылка.Организации - Организация, для которой формируется счет-фактура.
//	РеквизитыСчетФактуры - Структура - Возвращаемый. Данные счета-фактуры (Ссылка, Номер, Дата, Организация, Валюта).
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица найденных счетов-фактур (Ссылка, Номер, Дата, Организация, Валюта).
//
Функция СчетаФактурыПоОснованию(Основание, Организация = Неопределено, РеквизитыСчетаФактуры = Неопределено, Проведен = Ложь) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Номер КАК Номер,
	|	СчетФактураВыданный.Дата КАК Дата,
	|	СчетФактураВыданный.Организация КАК Организация,
	|	СчетФактураВыданный.Валюта КАК Валюта
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование = &Основание
	|	И (НЕ СчетФактураВыданный.ПометкаУдаления)
	|	И СчетФактураВыданный.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданный.НомерИсправления УБЫВ
	|");
	Запрос.УстановитьПараметр("Основание",   Основание);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если Проведен Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "(НЕ СчетФактураВыданный.ПометкаУдаления)", "СчетФактураВыданный.Проведен");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РеквизитыСчетаФактуры = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		РеквизитыСчетаФактуры.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ТаблицаСчетовФактур = Новый ТаблицаЗначений;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаСчетовФактур = РезультатЗапроса.Выгрузить();
		ЗаполнитьЗначенияСвойств(РеквизитыСчетаФактуры, ТаблицаСчетовФактур[0]);
	КонецЕсли;
	
	Возврат ТаблицаСчетовФактур;
	
КонецФункции

// Помечает на удаление счет-фактуру, если:
// - организация счета-фактуры не соответствует указанной,
// - или если документ-основание помечен на удаление.
//
// Параметры:
//	Основание		- ДокументСсылка - документ-основание счета-фактуры.
//	ПометкаУдаления - Булево - пометка удаления документа-основания.
//	Организация		- СправочникСсылка.Организации - Организация, для которой формируется счет-фактура.
//
Процедура ПроверитьРеквизитыСчетФактуры(Основание, ПометкаУдаления, Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСчетовФактур = СчетаФактурыПоОснованию(Основание, Организация);
	
	Для Каждого РеквизитыСчетаФактуры Из ТаблицаСчетовФактур Цикл
		
		Если (Организация <> Неопределено И РеквизитыСчетаФактуры.Организация <> Организация)
		 ИЛИ ПометкаУдаления Тогда
			ДокументОбъект = РеквизитыСчетаФактуры.Ссылка.ПолучитьОбъект();
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//// Возвращает реквизиты исправляемого счета-фактуры.
////
//// Параметры:
////	Основание		 - ДокументСсылка - документ-основание счета-фактуры.
////	Организация		 - СправочникСсылка.Организации - Организация, для которой формируется счет-фактура.
////
//// Возвращаемое значение:
////	Структура - Реквизиты счета-фактуры.
////
Функция ИсправляемыйСчетФактураПоОснованию(Ссылка, Основание, Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсправляемыйСчетФактура = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Валюта КАК Валюта,
	|	СчетФактураВыданный.КодВидаОперации КАК КодВидаОперации
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
	|	И СчетФактураВыданный.Ссылка <> &Ссылка
	|	И (СчетФактураВыданный.Организация = &Организация
	|			ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|	И НЕ СчетФактураВыданный.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданный.МоментВремени";
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РеквизитыСчетаФактуры = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		РеквизитыСчетаФактуры.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыСчетаФактуры, Выборка);
	КонецЕсли;
	
	Возврат РеквизитыСчетаФактуры;
	
КонецФункции

//// Заполняет номера и даты платежно-расчетных документов.
////
//// Параметры:
////	ПлатежноРасчетныеДокументы - Табличная часть - заполняемая табличная часть документа.
////	Основание - ДокументСсылка - документ-основание счета-фактуры.
////	Дата - Дата - дата счета-фактуры.
////
Процедура ЗаполнитьПлатежноРасчетныеДокументы(ПлатежноРасчетныеДокументы, Основание, Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка.Дата КАК Дата,
	|	ДанныеДокумента.Ссылка.Номер КАК Номер,
	|	0 КАК ДатаВходящегоДокумента,
	|	0 КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДокументРасчетовСКонтрагентом = &ДокументРасчетовСКонтрагентом
	|	И ДанныеДокумента.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка.Дата,
	|	ДанныеДокумента.Ссылка.Номер,
	|	0,
	|	0
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДокументРасчетовСКонтрагентом = &ДокументРасчетовСКонтрагентом
	|	И ДанныеДокумента.Ссылка.Проведен";
	
	Запрос.УстановитьПараметр("ДокументРасчетовСКонтрагентом", Основание);
	
	ПлатежноРасчетныеДокументы.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ПлатежноРасчетныеДокументы.Добавить();
		
		Если ЗначениеЗаполнено(Выборка.НомерВходящегоДокумента) Тогда
			НоваяСтрока.НомерПлатежноРасчетногоДокумента = Выборка.НомерВходящегоДокумента;
		Иначе
			НоваяСтрока.НомерПлатежноРасчетногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
				Выборка.Номер,
				Ложь,
				Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ДатаВходящегоДокумента) Тогда
			НоваяСтрока.ДатаПлатежноРасчетногоДокумента = Выборка.ДатаВходящегоДокумента;
		Иначе
			НоваяСтрока.ДатаПлатежноРасчетногоДокумента = Выборка.Дата;
		КонецЕсли;
		
	КонецЦикла;
	
	ПлатежноРасчетныеДокументы.Свернуть("ДатаПлатежноРасчетногоДокумента, НомерПлатежноРасчетногоДокумента", "");
	ПлатежноРасчетныеДокументы.Сортировать("ДатаПлатежноРасчетногоДокумента Возр, НомерПлатежноРасчетногоДокумента Возр");
	
КонецПроцедуры

// Возвращает список кодов видов операций,
//	предусмотренных законодательством.
//
// Возвращаемое значение:
//	СписокЗначений - Список кодов видов операций.
//
Функция СписокКодовВидовОпераций() Экспорт
	
	СписокКодов = Новый СписокЗначений;
	
	СписокКодов.Добавить("01", НСтр("ru='01 Реализованные товары, работы, услуги'"));
	СписокКодов.Добавить("02", НСтр("ru='02 Авансы полученные'"));
	СписокКодов.Добавить("03", НСтр("ru='03 Возврат поставщику'"));
	СписокКодов.Добавить("04", НСтр("ru='04 Реализованные товары, работы, услуги комитента'"));
	СписокКодов.Добавить("05", НСтр("ru='05 Авансы полученные за товары, работы, услуги комитента'"));
	СписокКодов.Добавить("06", НСтр("ru='06 Налоговый агент, статья 161 НК'"));
	СписокКодов.Добавить("07", НСтр("ru='07 Списание за счет прибыли, пп.2 п.1 статьи 146 НК'"));
	СписокКодов.Добавить("08", НСтр("ru='08 Строительно-монтажные работы, пп.3 п.1 статьи 146 НК'"));
	СписокКодов.Добавить("09", НСтр("ru='09 Суммы, связанные с расчетами по оплате, статья 162 НК'"));
	СписокКодов.Добавить("10", НСтр("ru='10 Переданные безвозмездно товары, работы, услуги'"));
	СписокКодов.Добавить("11", НСтр("ru='11 Реализованные товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК'"));
	СписокКодов.Добавить("12", НСтр("ru='12 Авансы полученные за товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК'"));
	СписокКодов.Добавить("13", НСтр("ru='13 Капитальное строительство, модернизация (реконструкция) объектов недвижимости'"));
	
	Возврат СписокКодов;
	
КонецФункции

// Приводит состояние проведения счета-фактуры в соответствие с документом-основанием.
//
// Параметры:
//	Основание				- Документ - документ-основание счета-фактуры.
//	Проведен 				- Булево - Состояние проведения документа-основания.
//	ТребуетсяСчетФактура	- Булево - Потребность в наличии счета-фактуры для документа-основания.
//
Процедура АктуализироватьСчетФактуру(Основание, Проведен, ТребуетсяСчетФактура = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Проведен И ТребуетсяСчетФактура Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
	КонецЕсли;
		
	ТаблицаСчетовФактур = СчетаФактурыПоОснованию(Основание);
	Если ТаблицаСчетовФактур.Количество() > 0 Тогда
		ТаблицаСчетовФактур.Сортировать("Дата Возр")
	КонецЕсли;
	
	Для Каждого РеквизитыСчетаФактуры Из ТаблицаСчетовФактур Цикл
		
		ДокументОбъект = РеквизитыСчетаФактуры.Ссылка.ПолучитьОбъект();
		Попытка
			ДокументОбъект.Записать(РежимЗаписи);
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%",       ДокументОбъект);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				,);
		КонецПопытки
	КонецЦикла
	
КонецПроцедуры

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
