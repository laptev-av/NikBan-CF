#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Перем РеквизитыСчетаФактурыОснования;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Исправление") И ДанныеЗаполнения.Исправление Тогда
			ЗаполнитьСчетФактуруОснование(ДанныеЗаполнения);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ДокументОснование", ДокументОснование) Тогда
			
			Если ДанныеЗаполнения.Свойство("Организация") Тогда
				
				Документы.СчетФактураВыданный.ЗаполнитьПлатежноРасчетныеДокументы(
					ПлатежноРасчетныеДокументы,
					ДанныеЗаполнения.ДокументОснование,
					ДанныеЗаполнения.Организация);
				СформироватьСтрокуРасчетноПлатежныхДокументов();
				
				Документы.СчетФактураВыданный.СчетаФактурыПоОснованию(
					ДанныеЗаполнения.ДокументОснование,
					ДанныеЗаполнения.Организация,
					РеквизитыСчетаФактурыОснования);
				
			КонецЕсли;
			
			Если НЕ ДанныеЗаполнения.Свойство("КодВидаОперации") Тогда
				ДанныеЗаполнения.Вставить("КодВидаОперации", КодВидаОперации(ДанныеЗаполнения.ДокументОснование));
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ДанныеЗаполнения.Свойство("ДатаВыставления") Тогда
			ДанныеЗаполнения.Вставить("ДатаВыставления", ТекущаяДатаСеанса());
		КонецЕсли;
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	ОбщегоНазначенияРТ.ПроверитьИспользованиеОрганизации(,,Организация);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект.Проведен, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	// Проверим время документа относительно времени документа-основания.
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ДатаДокументаОснования = ДокументОснование.Дата;
		Если НачалоДня(Дата) = НачалоДня(ДатаДокументаОснования)
			ИЛИ НЕ ЗначениеЗаполнено(Дата) Тогда
		 	
			Дата = ?(ДатаДокументаОснования = КонецДня(ДатаДокументаОснования),
					 ДатаДокументаОснования,
					 ДатаДокументаОснования + 1);
			
		КонецЕсли; 
	КонецЕсли; 
	
	Если Не ПометкаУдаления Тогда
		ПроверитьДублиСчетФактуры(Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Проведен") Тогда
		
		ТекстСообщения = НСтр("ru = 'Счет-фактуру можно провести только на основании проведенного документа.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект,
			"ДокументОснование",
			, // ПутьКДанным 
			Отказ);
	
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Ссылка) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НомерИсправления");
	КонецЕсли;
	
	Если НЕ Исправление Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетФактураОснование");
		МассивНепроверяемыхРеквизитов.Добавить("НомерИсправления");
	КонецЕсли;
	
	ДатаНачалаПримененияПостановления1137 = Константы.ДатаНачалаПримененияПостановления1137.Получить();
	
	Если Дата < ДатаНачалаПримененияПостановления1137 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Валюта");
		МассивНепроверяемыхРеквизитов.Добавить("КодВидаОперации");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Если Исправление Тогда
		
		// Установка номера по исходному документу.
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Основание КАК Ссылка
		|ПОМЕСТИТЬ ОснованияИсправлений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсходныеДокументы.Номер КАК Номер,
		|	ЕСТЬNULL(Исправления.НомерИсправления, 0) КАК НомерИсправления
		|ИЗ
		|	Документ.СчетФактураВыданный КАК ИсходныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОснованияИсправлений КАК ОснованияИсправлений
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК Исправления
		|		ПО (Исправления.ДокументОснование = ОснованияИсправлений.Ссылка)
		|			И (Исправления.Исправление)
		|			И (НЕ Исправления.ПометкаУдаления)
		|ГДЕ
		|	ИсходныеДокументы.Ссылка = &СчетФактураОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерИсправления УБЫВ";
		Запрос.УстановитьПараметр("Основание", ДокументОснование);
		Запрос.УстановитьПараметр("СчетФактураОснование", СчетФактураОснование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			СтандартнаяОбработка = Ложь;
			
			// Установка номера и переопределение префикса информационной базы.
			Префикс = "И";
			ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации(ЭтотОбъект, СтандартнаяОбработка, Префикс);
			
			НомерБезПрефикса = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(Выборка.Номер, Истина, Истина);
			Если СтрДлина(СокрП(НомерБезПрефикса)) = 7 Тогда
				НомерБезПрефикса = Прав(НомерБезПрефикса, СтрДлина(НомерБезПрефикса)-1);
			КонецЕсли;
			Номер = Префикс + НомерБезПрефикса;
			
			НомерИсправления = Формат(Число(Выборка.НомерИсправления)+1, "ЧЦ=10; ЧДЦ=0; ЧГ=0");
			
		КонецЕсли;
		
	Иначе
		
		Префикс = "0";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Организация") Тогда
		Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСчетФактуруОснование(ДанныеЗаполнения)
	
	РеквизитыСчетаФактуры = Документы.СчетФактураВыданный.ИсправляемыйСчетФактураПоОснованию(ЭтотОбъект.Ссылка, ДанныеЗаполнения.ДокументОснование, ДанныеЗаполнения.Организация);
	Если ЗначениеЗаполнено(РеквизитыСчетаФактуры.Ссылка) Тогда
		ДанныеЗаполнения.Вставить("СчетФактураОснование", РеквизитыСчетаФактуры.Ссылка);
	Иначе
		ДанныеЗаполнения.Исправление = Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыСчетаФактуры.Валюта) Тогда
		ДанныеЗаполнения.Вставить("Валюта", РеквизитыСчетаФактуры.Валюта);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыСчетаФактуры.КодВидаОперации) Тогда
		ДанныеЗаполнения.Вставить("КодВидаОперации", РеквизитыСчетаФактуры.КодВидаОперации);
	КонецЕсли;
	
КонецПроцедуры

Функция КодВидаОперации(Основание = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Основание = ДокументОснование;
	КонецЕсли;
	
	КодВидаОперации = "";
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		КодВидаОперации = "03";
		
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
				Или ТипЗнч(Основание)		= Тип("ДокументСсылка.РеализацияТоваров")
				Или ТипЗнч(Основание)		= Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
				
		КодВидаОперации = "01";
		
	КонецЕсли;
	
	Возврат КодВидаОперации;
	
КонецФункции

Процедура ПроверитьДублиСчетФактуры(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК ДанныеДокумента
	|ГДЕ
	|	НЕ ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ДокументОснование = &ДокументОснование
	|	И ДанныеДокумента.Проведен
	|	И (ДанныеДокумента.Организация = &Организация)
	|	И НЕ ДанныеДокумента.Исправление";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если НЕ Исправление Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 по организации %2 уже введен счет-фактура %3'"),
				ДокументОснование,
				Организация,
				Выборка.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"ДокументОснование",
				,
				Отказ);
			
		ИначеЕсли Исправление И СчетФактураОснование <> Выборка.Ссылка Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'На основании документа %1 введен счет-фактура %2. Недопустимо исправление счета-фактуры %3.'"),
				ДокументОснование,
				Выборка.Ссылка,
				СчетФактураОснование);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"СчетФактураОснование",
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСтрокуРасчетноПлатежныхДокументов()
	
	СтрокаНомеровИДата = "";
	Для Каждого СтрокаТаблицы Из ПлатежноРасчетныеДокументы Цикл
		СтрокаНомеровИДата = СтрокаНомеровИДата + ?(ПустаяСтрока(СтрокаНомеровИДата), "", ", ")
			+ СтрокаТаблицы.НомерПлатежноРасчетногоДокумента 
			+ " от " + Формат(СтрокаТаблицы.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy");
	КонецЦикла; 
		
	Если СтрокаПлатежноРасчетныеДокументы <> СтрокаНомеровИДата Тогда
		СтрокаПлатежноРасчетныеДокументы = СтрокаНомеровИДата;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
