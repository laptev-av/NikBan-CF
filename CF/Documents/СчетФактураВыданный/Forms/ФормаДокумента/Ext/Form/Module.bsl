
// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ДатаВыставления = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			ТипСсылки = ТипЗнч(Объект.ДокументОснование);
			
			Если ТипСсылки = Тип("ДокументСсылка.РеализацияТоваров") 
				ИЛИ ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				Объект.Контрагент = Объект.ДокументОснование.Контрагент;
			ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
				Объект.Контрагент = Объект.ДокументОснование.ОрганизацияПолучатель;
			КонецЕсли;
		КонецЕсли;
		
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТипСсылки = ТипЗнч(Объект.Контрагент);
		Если ТипСсылки = Тип("СправочникСсылка.Контрагенты") Тогда
			ВозможностьПроверкиСчетаФактуры = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ВозможностьПроверкиСчетаФактуры Тогда
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонецЕсли;
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,Элементы.КартинкаСостоянияДокумента.Подсказка,РазрешеноПроведение);
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВозможностьПроверкиСчетаФактуры Тогда
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонецЕсли;
	
	// Подсистема "ОбменСКонтрагентами"
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец Подсистема "ОбменСКонтрагентами"
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ВозвращатьПараметрыПредставления Тогда
		ПараметрыПредставления = Новый Структура("ТекстСчетФактура, ТекстСписок, ГиперссылкаСчетФактура, РазрешеныИсправления, Организация",
			ТекстСчетФактура, ТекстСписок, ГиперссылкаСчетФактура, РазрешеныИсправления, Объект.Организация);
		ОповеститьОВыборе(ПараметрыПредставления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ВозможностьПроверкиСчетаФактуры Тогда
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонецЕсли;
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ПараметрыОповещения.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения".
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ТекстСообщения = НСтр("ru = 'Поле ""Дата выставления"" не заполнено'");
	
	Если Выставлен И НЕ ЗначениеЗаполнено(Объект.ДатаВыставления) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ДатаВыставления","Объект",Отказ);
	ИначеЕсли НЕ Выставлен Тогда
		Объект.ДатаВыставления = '00010101';
		Объект.ВыставленВЭлектронномВиде = Ложь;
	КонецЕсли;
	
	// &ЗамерПроизводительности 	
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
	                                            "Документ.СчетФактураВыданный.ФормаДокумента.Запись",
                                                           Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ВозможностьПроверкиСчетаФактуры Тогда
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ВозможностьПроверкиСчетаФактуры Тогда
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, Элементы.КартинкаСостоянияДокумента.Подсказка, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	// &ЗамерПроизводительности 
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ВозвращатьПараметрыПредставления Тогда
		ПараметрыПредставления = ПродажиСервер.ПараметрыПредставленияСчетаФактуры(ДокументОснование, Объект.Организация);
		ТекстСчетФактура       = ПараметрыПредставления.ТекстСчетФактура;
		ТекстСписок            = ПараметрыПредставления.ТекстСписок;
		ГиперссылкаСчетФактура = ПараметрыПредставления.ГиперссылкаСчетФактура;
		РазрешеныИсправления   = ПараметрыПредставления.РазрешеныИсправления;
	КонецЕсли;
	
	Если ВозможностьПроверкиСчетаФактуры Тогда
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	КонецЕсли;
		
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	НастроитьВидимостьВалютыКодаОперации(ЭтаФорма);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИсправленииПриИзменении(Элемент)
	
	НастроитьВидимостьВалютыКодаОперации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеПриИзменении(Элемент)
	
	Если Объект.Исправление И НЕ ЗначениеЗаполнено(Объект.СчетФактураОснование) Тогда
		ЗаполнитьСчетФактураОснованиеСервер();
	КонецЕсли;
	
	Объект.Номер = "";
	Объект.НомерИсправления = "";
	
	УправлениеЭлементамиФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставленПриИзменении(Элемент)
	
	УправлениеЭлементамиФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставленВЭлектронномВидеПриИзменении(Элемент)
	
	УправлениеЭлементамиФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежноРасчетныеДокументыСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", 		 Объект.Организация);
	ПараметрыФормы.Вставить("ДокументОснование", Объект.ДокументОснование);
	ПараметрыФормы.Вставить("АдресВХранилище",	 ПоместитьПлатежноРасчетныеДокументыВХранилище());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПолучитьПлатежноРасчетныеДокументы", ЭтотОбъект);
	ОткрытьФорму("Документ.СчетФактураВыданный.Форма.ФормаПлатежноРасчетныеДокументы", ПараметрыФормы,,,,,ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура СчетФактураОснованиеПриИзменении(Элемент)
	
	УправлениеЭлементамиФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьЭлементСписка", ЭтотОбъект);
	СписокКодовВидовОпераций.ПоказатьВыборЭлемента(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПроверитьКонтрагента(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

// Подсистема "ОбменСКонтрагентами".
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	// Подсистема «Обмен с контрагентами»
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	// Конец Подсистема «Обмен с контрагентами»

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)

	// Подсистема «Обмен с контрагентами»
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	// Конец Подсистема «Обмен с контрагентами»

КонецПроцедуры
// Конец подсистема "ОбменСКонтрагентами".

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

&НаКлиенте
Процедура ВыбратьЭлементСписка(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Объект.КодВидаОперации = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПолучитьПлатежноРасчетныеДокументы(НовыйАдресВХранилище, ДополнительныеПараметры) Экспорт
	
	ПолучитьПлатежноРасчетныеДокументыИзХранилища(НовыйАдресВХранилище);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Параметры.Свойство("ДокументОснование", ДокументОснование);
	
	Если Параметры.Свойство("ВозвращатьПараметрыПредставления") Тогда
		ВозвращатьПараметрыПредставления = Параметры.ВозвращатьПараметрыПредставления;
	КонецЕсли;
	
	Если ВозвращатьПараметрыПредставления Тогда
		ПараметрыПредставления = ПродажиСервер.ПараметрыПредставленияСчетаФактуры(ДокументОснование, Объект.Организация);
		ТекстСчетФактура 	   = ПараметрыПредставления.ТекстСчетФактура;
		ТекстСписок 		   = ПараметрыПредставления.ТекстСписок;
		ГиперссылкаСчетФактура = ПараметрыПредставления.ГиперссылкаСчетФактура;
		РазрешеныИсправления   = ПараметрыПредставления.РазрешеныИсправления;
	КонецЕсли;
	
	ДатаНачалаПримененияПостановления1137 = Константы.ДатаНачалаПримененияПостановления1137.Получить();
	РеквизитыСчетаФактуры = Документы.СчетФактураВыданный.ИсправляемыйСчетФактураПоОснованию(Объект.Ссылка, Объект.ДокументОснование, Объект.Организация);
	ЕстьСчетаФактурыПоОснованию = РеквизитыСчетаФактуры.Ссылка <> Неопределено;
	
	Выставлен = ЗначениеЗаполнено(Объект.ДатаВыставления);
	
	УправлениеЭлементамиФормы(ЭтаФорма);
	НастроитьВидимостьВалютыКодаОперации(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.СтрокаПлатежноРасчетныеДокументы) Тогда
		СтрокаПлатежноРасчетныеДокументы = Объект.СтрокаПлатежноРасчетныеДокументы;
	Иначе
		СтрокаПлатежноРасчетныеДокументы = НСтр("ru='<отсутствуют>'"); 
	КонецЕсли;
	
	Элементы.СтрокаПлатежноРасчетныеДокументы.Гиперссылка = ПравоДоступа("Изменение", Метаданные.Документы.СчетФактураВыданный);
	
	Документы.СчетФактураВыданный.СчетаФактурыПоОснованию(Объект.ДокументОснование, Объект.Организация, РеквизитыСчетаФактуры);
	
	СписокКодовВидовОпераций = Документы.СчетФактураВыданный.СписокКодовВидовОпераций();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиФормы(Форма)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("Исправление");
	МассивИменЭлементов.Добавить("СчетФактураОснование");
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивИменЭлементов, "Доступность",
		Форма.
		ЕстьСчетаФактурыПоОснованию);
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("Исправление");
	МассивИменЭлементов.Добавить("СчетФактураОснование");
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивИменЭлементов, "Видимость", Форма.Объект.Исправление);
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("Исправление");
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивИменЭлементов, "ТолькоПросмотр", Форма.Объект.Исправление);
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("СчетФактураОснование");
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивИменЭлементов, "Доступность", Форма.Объект.Исправление);
	
	Если Форма.Объект.Исправление Тогда
		Форма.Элементы.ГруппаСтраницыНомерДата.ТекущаяСтраница = Форма.Элементы.ГруппаНомерДатаПриИсправлении;
	Иначе
		Форма.Элементы.ГруппаСтраницыНомерДата.ТекущаяСтраница = Форма.Элементы.ГруппаНомерДата;
	КонецЕсли;
	
	ЭтоНовый = НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка);
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("Номер");
	МассивИменЭлементов.Добавить("Дата");
	МассивИменЭлементов.Добавить("НомерПриИсправлении");
	МассивИменЭлементов.Добавить("ДатаИсходногоПриИсправлении");
	МассивИменЭлементов.Добавить("НомерИсправленияПриИсправлении");
	МассивИменЭлементов.Добавить("ДатаПриИсправлении");
	МассивИменЭлементов.Добавить("СчетФактураОснование");
	МассивИменЭлементов.Добавить("КодВидаОперации");
	МассивИменЭлементов.Добавить("СтрокаПлатежноРасчетныеДокументы");
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивИменЭлементов, "ТолькоПросмотр", Форма.Выставлен И НЕ ЭтоНовый);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВыставленВЭлектронномВиде", "Доступность", Форма.Выставлен);
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДатаВыставления", "Доступность", Форма.Выставлен);
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДатаВыставления", "ТолькоПросмотр", Форма.Объект.ВыставленВЭлектронномВиде);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьВалютыКодаОперации(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.Дата) И Форма.Объект.Дата < Форма.ДатаНачалаПримененияПостановления1137 Тогда
		Форма.Элементы.Валюта.АвтоОтметкаНезаполненного = Ложь;
		Форма.Элементы.Валюта.ОтметкаНезаполненного = Ложь;
		Форма.Элементы.КодВидаОперации.АвтоОтметкаНезаполненного = Ложь;
		Форма.Элементы.КодВидаОперации.ОтметкаНезаполненного = Ложь;
	Иначе
		Форма.Элементы.Валюта.АвтоОтметкаНезаполненного = Истина;
		Форма.Элементы.КодВидаОперации.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетФактураОснованиеСервер()
	
	РеквизитыСчетаФактуры = Документы.СчетФактураВыданный.ИсправляемыйСчетФактураПоОснованию(Объект.Ссылка, Объект.ДокументОснование, Объект.Организация);
	Если ЗначениеЗаполнено(РеквизитыСчетаФактуры.Ссылка) Тогда
		Объект.СчетФактураОснование = РеквизитыСчетаФактуры.Ссылка;
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыСчетаФактуры.Валюта) Тогда
		Объект.Валюта = РеквизитыСчетаФактуры.Валюта;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьПлатежноРасчетныеДокументыВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ПлатежноРасчетныеДокументы.Выгрузить());
	
КонецФункции

&НаСервере
Процедура ПолучитьПлатежноРасчетныеДокументыИзХранилища(НовыйАдресВХранилище)
	
	Если ЗначениеЗаполнено(НовыйАдресВХранилище) Тогда
		Объект.ПлатежноРасчетныеДокументы.Загрузить(ПолучитьИзВременногоХранилища(НовыйАдресВХранилище));
		СформироватьСтрокуРасчетноПлатежныхДокументов();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтрокуРасчетноПлатежныхДокументов()
	
	СтрокаНомеровИДата = "";
	Для Каждого СтрокаТаблицы Из Объект.ПлатежноРасчетныеДокументы Цикл
		СтрокаНомеровИДата = СтрокаНомеровИДата + ?(ПустаяСтрока(СтрокаНомеровИДата), "", ", ")
			+ СтрокаТаблицы.НомерПлатежноРасчетногоДокумента 
			+ " от " + Формат(СтрокаТаблицы.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy");
	КонецЦикла; 
		
	Если Объект.СтрокаПлатежноРасчетныеДокументы <> СтрокаНомеровИДата Тогда
		Объект.СтрокаПлатежноРасчетныеДокументы = СтрокаНомеровИДата;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СтрокаПлатежноРасчетныеДокументы) Тогда
		СтрокаПлатежноРасчетныеДокументы = Объект.СтрокаПлатежноРасчетныеДокументы;
	Иначе
		СтрокаПлатежноРасчетныеДокументы = НСтр("ru='<отсутствуют>'"); 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#КонецОбласти
