
#Область ПеременныеМодуля

&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; // Используется для передачи текущей строки в обработчик ожидания.

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#КонецОбласти

#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораВидаЦены(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(РезультатОткрытияФормы) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(РезультатОткрытияФормы);
		ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, РезультатОткрытияФормы);
		ПересчитатьИлиОтменитьСкидки();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается обработкой оповещения после открытия формы вывода сообщений
// либо непосредственно при исполнении процедур расчета скидок,
// если сообщений для вывода нет.
&НаКлиенте
Процедура РасчетСкидокКлиентЗавершение(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		?(Объект.Ссылка.Пустая(), "", ПолучитьНавигационнуюСсылку(Объект.Ссылка)),
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		УправляемыеСкидки = Результат.УправляемыеСкидки;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
		СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
		
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
			РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
		Иначе
			РабочееМесто = ""
		КонецЕсли;
		
		СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
		
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		
		Если ВывестиСообщения Тогда
			ДополнительныеПараметры = Новый Структура;
			ОбработчикОповещения = Новый ОписаниеОповещения("РасчетСкидокКлиентЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресПримененныхСкидокВоВременномХранилище);
			ОткрытьФорму("ОбщаяФорма.ФормаВыводаСообщений", ПараметрыФормы, ЭтаФорма, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			РасчетСкидокКлиентЗавершение();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(Результат);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(Результат, "RUB");
		ОбновитьИтоговыеПоказатели();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодбораПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры) Экспорт
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПослеВводаНомеровПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры);
	
	ПересчетКоличества = ДополнительныеПараметры.ПересчетКоличества;
	
	Если ПересчетКоличества Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
		ПересчитатьИлиОтменитьСкидки();
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУказаниеСерий(ЗначениеВозврата, ПараметрыФормыУказанияСерий) Экспорт
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("ЗначениеВозврата", ЗначениеВозврата);
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
		ПересчитатьИлиОтменитьСкидки();
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	// Интерфейс ЕГАИС
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если не ТекущаяСтрока = Неопределено Тогда
		ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросРассчитатьИОткрытьСкидки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЭтотОбъект.Модифицированность = Истина;
		РассчитатьСкидкиНаценкиКлиент();
		ОткрытьИнформациюОСкидкахЗавершитьОбработкуВопроса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросПроведениеПередПечатьюЧека(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Попытка
			Если ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
				НапечататьЧекКлиент();
			КонецЕсли;
		Исключение
			ПоказатьПредупреждение(,НСтр("ru = 'Не удалось выполнить проведение документа'"));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросЗаполнениеПоЗаказу(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗавершитьЗаполнениеПоЗаказу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекВыполнитьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Если ЗначениеЗаполнено(РезультатВыполнения.ВыходныеПараметры[1]) Тогда
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		Иначе
			Объект.НомерЧекаККМ = НомерДокументаКассыККМ[Объект.КассаККМ];
		КонецЕсли;
		
		Объект.ПробитЧек    = Истина;
		Модифицированность  = Истина;
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
		Если РезультатЗаписи = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
		                            |Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	
	НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
	
	Если НомерСмены <> 0 Тогда
		ШапкаЧека.НомерСмены = НомерСмены;
	КонецЕсли;
	
	НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
	
	Если НомерЧека <> 0 Тогда
		ШапкаЧека.НомерЧека = НомерЧека;
	КонецЕсли;
	
	Если ПараметрыВыполнения.Свойство("ЗаводскойНомерФН") И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
		ШапкаЧека.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НомерСмены", ШапкаЧека.НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека", ШапкаЧека.НомерЧека);
		ПараметрыОперации.Вставить("СерийныйНомер", ШапкаЧека.СерийныйНомер);
		
		ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные"),
			ПараметрыОперации,
			Новый ОписаниеОповещения("ПослеПередачиЧекаЕГАИС", ЭтотОбъект, ПараметрыВыполнения));
		
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		
		НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
		Если НомерСмены = 0 Тогда
			НомерСмены = 1;
		КонецЕсли;
		
		НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
		Если НомерЧека = 0 Тогда
			НомерЧека = 1;
		КонецЕсли;
		
		НомерЧека = НомерЧека + 1000000;
		
		//Объект.АдресЧекаЕГАИС = "";
		//Объект.ПодписьЧекаЕГАИС = "";
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НомерСмены"   , НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека"    , НомерЧека);
		ПараметрыОперации.Вставить("СерийныйНомер", Неопределено);
		
		Если ПараметрыВыполнения.Свойство("ЗаводскойНомерФН") И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
			ПараметрыОперации.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
		КонецЕсли;
		
		ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию"),
			ПараметрыОперации,
			Неопределено);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПередачиЧекаЕГАИС(Изменения, ПараметрыВыполнения) Экспорт
	
	ЕстьОшибки = (Изменения.Количество() <> 1);
	
	Ошибки = Новый Массив;
	Для Каждого ЭлементДанных Из Изменения Цикл
		Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Ошибки.Добавить(ЭлементДанных.ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	Если Ошибки.Количество() > 0 Тогда
		Ошибки.Вставить(0, НСтр("В процессе передачи данных в ЕГАИС возникли ошибки:"));
	КонецЕсли;
	ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	ПараметрыВыполнения.ПродолжитьПечать = Не ЕстьОшибки;
	ПараметрыВыполнения.ОписаниеОшибки   = ОписаниеОшибки;
	
	Если НЕ ЕстьОшибки Тогда
		ПараметрыВыполнения.Вставить("АдресЧека",   Изменения[0].ИдентификаторЗапроса);
		ПараметрыВыполнения.Вставить("ПодписьЧека", Изменения[0].Подпись);
		
		ИННОрганизации = "";
		КППОрганизации = "";
		НаименованиеОрганизации = "";
		
		Если ЗначениеЗаполнено(Изменения[0].ОрганизацияЕГАИС) Тогда
			РеквизитыОрганизацииЕГАИС = ИнтеграцияЕГАИСРТВызовСервера.ЗначенияРеквизитовОбъекта(Изменения[0].ОрганизацияЕГАИС, "ИНН, КПП, Наименование");
			
			ИННОрганизации = РеквизитыОрганизацииЕГАИС.ИНН;
			КППОрганизации = РеквизитыОрганизацииЕГАИС.КПП;
			
			НаименованиеОрганизации = СокрЛП(РеквизитыОрганизацииЕГАИС.Наименование);
			Если ПустаяСтрока(НаименованиеОрганизации) Тогда
				НаименованиеОрганизации = ПараметрыВыполнения.ВходныеПараметры.ОрганизацияНазвание;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыВыполнения.Вставить("ИНН", ИННОрганизации);
		ПараметрыВыполнения.Вставить("КПП", КППОрганизации);
		ПараметрыВыполнения.Вставить("НаименованиеОрганизации", НаименованиеОрганизации);
		
		//Объект.АдресЧекаЕГАИС = ПараметрыВыполнения.АдресЧека;
		//Объект.ПодписьЧекаЕГАИС = ПараметрыВыполнения.ПодписьЧека;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоНаименованию(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ЗавершитьОбработкуДанныхПоКодуКлиент(Результат);
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
			Объект.Продавец = СтрокаРезультата.ВладелецКарты;
		Иначе
			Объект.ДисконтнаяКарта = СтрокаРезультата.Карта;
			СтруктураРезультат.Вставить("НайденаДисконтнаяКарта");
		КонецЕсли;
		Модифицированность = Истина;
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("ШтрихкодУпаковкиЕГАИС")
		И ЗначениеЗаполнено(СтрокаРезультата.ШтрихкодУпаковкиЕГАИС)
		И СтрокаРезультата.Свойство("ТипУпаковки")
		И СтрокаРезультата.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ДобавитьВложенныеМарки(ЭтотОбъект, СтрокаРезультата);
		
	Иначе // Номенклатура.
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("НеобходимостьВводаАкцизнойМарки") Тогда
		СтруктураРезультат.Вставить("НеобходимостьВводаАкцизнойМарки", СтрокаРезультата.НеобходимостьВводаАкцизнойМарки);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	Если СтруктураПараметровКлиента.Свойство("НайденаДисконтнаяКарта") Тогда
		
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			
			ДисконтнаяКартаПриИзменении(Неопределено);
			
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("НеобходимостьВводаАкцизнойМарки")
		И СтруктураПараметровКлиента.Свойство("АктивизироватьСтроку") Тогда
			
		
		СтрокаТовара = Объект.Товары.НайтиПоИдентификатору(СтруктураПараметровКлиента.АктивизироватьСтроку);
		Если СтрокаТовара <> Неопределено Тогда
			ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(СтрокаТовара);
		КонецЕсли;
		
	Иначе
		
		ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
		
	КонецЕсли;
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТВызовСервера.ОбработатьДанныеПоНоменклатуреИзТСДСервер(ЭтотОбъект, СтруктураПараметров);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОбработатьДанныеПослеЗагрузкиИзТСД(СтруктураПараметров) Экспорт
	
	ПересчитатьИлиОтменитьСкидки();
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, УчетАлкогольнойПродукции);
	ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	
	ДобавленаСтрока = Ложь;
	ТекущаяСтрока = ПодключаемоеОборудованиеРТВызовСервера.ИнициализацияСтрокиТоваров(ЭтотОбъект, СтруктураПараметров, ДобавленаСтрока);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	Если ДобавленаСтрока Тогда
		СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВШапке(Объект));
		СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
		СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента");
		
		Если ТипОборудованияКассыККМ = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ") Тогда
			Если Объект.Товары.Количество() > 1 Тогда
				ТекстСообщенияПриОшибке = НСтр("ru = 'Недопустимо добавлять в один чек товары и услуги по различным договорам платежных агентов'");
				СтруктураПараметровПроверки = Новый Структура();
				СтруктураПараметровПроверки.Вставить("ДоговорПлатежногоАгента", Объект.ДоговорПлатежногоАгента);
				СтруктураПараметровПроверки.Вставить("ТекстСообщения", ТекстСообщенияПриОшибке);
				СтруктураДействий.Вставить("ПроверитьОтличныеДоговорыПлатежныхАгентов", СтруктураПараметровПроверки);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураМарки = Новый Структура;
		СтруктураМарки.Вставить("Дата", Объект.Дата);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураМарки);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
		
	КонецЕсли;
	

	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ЗавершениеОбработкиСтрокиТоваров(ЭтотОбъект, ТекущаяСтрока, СтруктураДействий);
	
	ОтменитьСкидки();
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		Если ТипОборудованияКассыККМ = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ") Тогда
			Если Объект.Товары.Количество() = 1 Тогда
				Объект.ДоговорПлатежногоАгента = ТекущаяСтрока.ДоговорПлатежногоАгента;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
			ИнтеграцияЕГАИСРТ.ОбработатьНеобходимостьВводаАкцизнойМарки(СтруктураПараметров, Объект, ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ДобавитьНайденныеСерийныеНомера(ЭтотОбъект, СтруктураНомера);
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьВесЗавершение(Результат, Параметры) Экспорт
	
	Если Результат Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
		ПересчитатьИлиОтменитьСкидки();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаАкцизнойМарки(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененоКоличествоУпаковок = Ложь;
	Если Результат <> Неопределено Тогда
		
		Если ТипЗнч(Результат) = Тип("Строка") Тогда
		
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("КлючСвязи", ДополнительныеПараметры.ТекущийКлючСвязи);
			
			МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
				Объект.АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
			КонецЦикла;
			
			ДанныеШтрихкодаУпаковки = ПолучитьДанныеШтрихкодаУпаковки(Объект.Организация, 
																		Объект.Магазин, 
																		Результат, 
																		ДополнительныеПараметры.ТекущийКлючСвязи,
																		СтрокаТЧ.Номенклатура,
																		СтрокаТЧ.Характеристика);
			
			СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаАкцизнаяМарка, ДанныеШтрихкодаУпаковки);
			
			Если СтрокаТЧ.Количество <> 1 Тогда
				
				СтрокаТЧ.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка");
				СтрокаТЧ.КоличествоУпаковок = 1;
				СтрокаТЧ.Количество = 0;
				ИзмененоКоличествоУпаковок = Истина;
				НуженПересчетСкидок = Истина;
			КонецЕсли;
			Модифицированность = Истина;
			
		ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("АдресВХранилище") Тогда
				КоличествоУпаковокОтсканировано = ЗаполнитьМаркиНаСервере(Результат.АдресВХранилище, ДополнительныеПараметры, СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика);
				Если не КоличествоУпаковокОтсканировано = СтрокаТЧ.Количество Тогда
					СтрокаТЧ.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка");
					СтрокаТЧ.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
					СтрокаТЧ.Количество = 0;
					Если СтрокаТЧ.КоличествоУпаковок = 0 Тогда
						Объект.Товары.Удалить(СтрокаТЧ);
						СтрокаТЧ = Неопределено;
					КонецЕсли;
					ИзмененоКоличествоУпаковок = Истина;
				КонецЕсли;
				Модифицированность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТЧ <> Неопределено и ИзмененоКоличествоУпаковок Тогда
			Если СтрокаТЧ.СтатусУказанияСерий <> 0 Тогда
				УказатьСерии("КоличествоУпаковок");
			Иначе
				ТоварыУпаковкаПриИзменении(СтрокаТЧ);
				ПриИзмененииТоварыКоличестваУпаковок(СтрокаТЧ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКлиента")
		И СтрокаТЧ <> Неопределено Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(ДополнительныеПараметры.СтруктураПараметровКлиента);
	КонецЕсли;
	
	// Интерфейс ЕГАИС
	Если СтрокаТЧ <> Неопределено Тогда
		ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарокВСтроке(СтрокаТЧ, Объект.АкцизныеМарки);
		ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(СтрокаТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданиеИВыборНовойХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ТекущаяСтрока.Характеристика = Результат;
	ТоварыХарактеристикаПриИзменении(Неопределено);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьКомиссионнуюТорговлю = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
	ИспользоватьУчетИмпортныхТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьУчетИмпортныхТоваров");
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ИспользоватьАвтоматическиеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьБонусныеПрограммыЛояльности = ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности");
	Если ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
		АвтоматическийРасчетСкидок = УправлениеПользователямиВызовСервера.ПолучитьБулевоЗначениеПраваПользователя(
										ПланыВидовХарактеристик.ПраваПользователей.АвтоматическийРасчетСкидокПриРедактированииДокументаПродажи, Ложь);
	КонецЕсли;
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,КартинкаСостоянияДокумента,СостояниеДокумента,РазрешеноПроведение);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.РеализацияТоваров.ПараметрыУказанияСерий(Объект));
	
	БезНДС = НСтр("ru = 'Без НДС'");
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(Объект.Товары);
		
		УстановитьДоступностьЦенаВключаетНДС();
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
		
		НастроитьОтображениеРеквизитовСчетаФактуры(
		ЭтаФорма,
		ПродажиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
		
		СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
		ЗаполнитьСистемуНалогооблажения(Объект.Дата, Объект.Организация);
	КонецЕсли;
	
	ОбновитьИтоговыеПоказателиСервер();
	
	УстановитьТекущуюСтраницуСуммПодвала();
	
	ЗаполнитьСтавкиНДС();
	
	НастроитьФормуПоДополнительнымПравам();
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	ПараметрыСобытийПО = Новый Структура;
	ПараметрыСобытийПО.Вставить("РегистрацияНовойКарты", Истина);
	ПараметрыСобытийПО.Вставить("ПоискАкцизнойМарки", Истина);
	
	УправлениеЭлементамиФормыНаСервере();
	
	УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
			СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
		КонецЕсли;
		Если ИспользоватьБонусныеПрограммыЛояльности Тогда
			БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект);
		КонецЕсли;
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары);
	КонецЕсли;
	Элементы.ГруппаБонусныеБаллы.Видимость = ИспользоватьБонусныеПрограммыЛояльности;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(Объект.Товары);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	КассаККМ = Объект.КассаККМ;
	КассаККМПриИзмененииСервер();
	
	ПродажаПоЗаказу = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
	
	УстановитьВидимостьИДоступностьЗаказаПокупателя();
	
	ИзменитьВидимостьДоступностьЭлементовЕГАИС(ЭтотОбъект);
	
	// ИнтеграцияЕГАИС
	УчетАлкогольнойПродукции = ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(Объект.Дата);
	ИнтеграцияЕГАИСРТ.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, УчетАлкогольнойПродукции);
	
	СформироватьТекстДокументаЕГАИС();
	
	// Конец ИнтеграцияЕГАИС
	
	// ИнтеграцияИС
	ИнтеграцияИС.ПриСозданииНаСервереВФормеДокументаОснования(ЭтотОбъект, Объект);
	// Конец ИнтеграцияИС
	
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	ИспользованиеСПАРКРазрешено = СПАРКРиски.ИспользованиеРазрешено();
	
	Если ИспользованиеСПАРКРазрешено Тогда
		ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Однострочный");
		СПАРКРиски.ПриСозданииНаСервере(
			ЭтотОбъект,
			Неопределено,
			Объект.Контрагент,
			ПараметрыПроцедуры);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
	УстановитьСистемуНалогообложенияНаФорме();
	
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриОткрытии.
	Если ИспользованиеСПАРКРазрешено Тогда
		СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Неопределено);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриОткрытии.
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		
		СтрокиИзменены = ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		Если СтрокиИзменены Тогда
			ПересчитатьИлиОтменитьСкидки();
		КонецЕсли;
		
		// Интерфейс ЕГАИС
		ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаДокумента"
	 		ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаСписка" Тогда
		
		НастроитьОтображениеРеквизитовСчетаФактуры(ЭтаФорма, ВыбранноеЗначение);

	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Или ИмяСобытия = "ВставкаСтрокИзБуфераОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбмена();
		
	КонецЕсли;
	
	// ИнтеграцияГИСМ
	Если ИмяСобытия = "Запись_УведомлениеОбОтгрузкеМаркированныхТоваровГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменГИСМ"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусГИСМФормахВДокументах)) Тогда
		
		СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
		
	КонецЕсли;
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияЕГАИС
	Если ИмяСобытия = "Запись_АктСписанияЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ЧекЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		ЕстьПереданныеЧекиЕГАИС = ЕстьПереданныеЧекиЕГАИС(Объект.Ссылка);
		ИзменитьВидимостьДоступностьЭлементовЕГАИС(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменЕГАИС"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусЕГАИСВФормахДокументов)) Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	// Конец ИнтеграцияЕГАИС
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбработкаОповещения.
	Если ИспользованиеСПАРКРазрешено Тогда
		СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Неопределено, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбработкаОповещения.
	
	// ИнтеграцияИС
	ИнтеграцияИСКлиент.ОбработкаОповещенияВФормеДокументаОснования(
		ЭтотОбъект,
		Объект,
		ИмяСобытия,
		Параметр,
		Источник);
	// Конец ИнтеграцияИС
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() И НЕ ЕстьПереданныеЧекиЕГАИС Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ИспользоватьАвтоматическиеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьБонусныеПрограммыЛояльности = ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности");
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары);
	ОбновитьИтоговыеПоказателиСервер();
	УстановитьТекущуюСтраницуСуммПодвала();
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияЕГАИС
	ЕстьПереданныеЧекиЕГАИС = ЕстьПереданныеЧекиЕГАИС(Объект.Ссылка);
	СформироватьТекстДокументаЕГАИС();
	// Конец ИнтеграцияЕГАИС
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	УстановитьДоступностьЦенаВключаетНДС();
	ЗаполнитьСистемуНалогооблажения(Объект.Дата, Объект.Организация);
	
	УправлениеЭлементамиФормыНаСервере();
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	НастроитьОтображениеРеквизитовСчетаФактуры(
		ЭтаФорма,
		ПродажиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
	
	Если ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
		СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	КонецЕсли;
	Если ИспользоватьБонусныеПрограммыЛояльности Тогда
		БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект);
	КонецЕсли;
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияИС
	ИнтеграцияИС.ПриЧтенииНаСервереВФормеДокументаОснования(ЭтотОбъект, Объект);
	// Конец ИнтеграцияИС
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
												"Документ.РеализацияТоваров.ФормаДокумента.Запись",
															Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);
	
	ПередЗаписьюКлиент(Отказ, ПараметрыЗаписи.РежимЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВыполнитьДействияПослеЗаписиНаСервере();
	
	УстановитьВидимостьИДоступностьЗаполнитьПоЗаказу();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
	// Конец ИнтеграцияГИСМ
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары);
	
	// ИнтеграцияЕГАИС
	СформироватьТекстДокументаЕГАИС();
	ИзменитьВидимостьДоступностьЭлементовЕГАИС(ЭтотОбъект);
	// Конец ИнтеграцияЕГАИС
	
	// ИнтеграцияИС
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеДокументаОснования(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтеграцияИС
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);

	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, УчетАлкогольнойПродукции);
	ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Интерфейс ЕГАИС
	ДатаПриИзмененииНаСервере();
	ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, УчетАлкогольнойПродукции);
	
	ДатаДокументаИзмененаВручную = Истина;
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", 
								ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВШапке(Объект));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 
								ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, , СтруктураДействий, Неопределено);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		ОбновитьИтоговыеПоказатели();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ЗаполнитьСтавкиНДС();
	
	// Интерфейс ЕГАИС
	УчетАлкогольнойПродукции = ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ПриИзмененииСкладСервер();
	
	УстановитьСистемуНалогообложенияНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		ПриИзмененииМагазинСервер();
	Иначе
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	КонецЕсли;
	ПересчитатьИлиОтменитьСкидки();
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.БанковскийСчетОрганизации = ЗначениеНастроекВызовСервера.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация,,Объект.БанковскийСчетОрганизации);
	
	ПересчетНДСТабличнойЧастиСервер();
	
	ОрганизацияПриИзмененииСервер();
	
	УстановитьСистемуНалогообложенияНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПересчитатьИлиОтменитьСкидки();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	Если ИспользованиеСПАРКРазрешено Тогда
		// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
		ЭтотОбъект.ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
		ОбновитьОтображениеИндексыСПАРК();
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	
КонецПроцедуры

&НаКлиенте
Процедура ДисконтнаяКартаПриИзменении(Элемент)
	
	ИнформационныеКартыКлиент.ПровестиОпросВладельца(Объект.ДисконтнаяКарта, ОбщегоНазначенияКлиент.ДатаСеанса());
	
	ПриИзмененииДисконтнаяКартаСервер();
	Если Элемент <> Неопределено Тогда
		ПересчитатьИлиОтменитьСкидки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДисконтнаяКартаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
        
        // &ЗамерПроизводительности
        ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                 Истина, "Справочник.ИнформационныеКарты.Форма.ФормаВыбора.Открытие");
                 
        СтандартнаяОбработка=Ложь;
		СтруктураОтбора = Новый Структура("ВладелецКарты", Объект.Контрагент);
		ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбора);
		ОткрытьФорму ("Справочник.ИнформационныеКарты.ФормаВыбора", ПараметрыОткрытия, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьНДСПриИзменении(Элемент)
	
	ПриИзмененииУчитыватьНДССервер();
	ПересчитатьИлиОтменитьСкидки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, , СтруктураДействий, КэшированныеЗначения);
	
	ПересчитатьИлиОтменитьСкидки();
		
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПродажиКлиент.ВвестиСчетФактуру(ЭтаФорма, Объект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСчетовФактурНажатие(Элемент)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Документ.СчетФактураВыданный.Форма.ФормаСписка.Открытие");
             
	СтруктураОтбор = Новый Структура("ДокументОснование, Организация, ПометкаУдаления", Объект.Ссылка, Объект.Организация, Ложь);
	
	ОткрытьФорму(
		"Документ.СчетФактураВыданный.ФормаСписка",
		Новый Структура("Отбор", СтруктураОтбор),
		ЭтаФорма
	);

КонецПроцедуры

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	Объект.КассаККМ = КассаККМ;
	КассаККМПриИзмененииКлиент();
	
КонецПроцедуры

// ИнтеграцияЕГАИС
&НаКлиенте
Процедура ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСКлиент.ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец ИнтеграцияЕГАИС

#Область СПАРКРиски

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

// ИнтернетПоддержкаПользователей.СПАРКРиски
&НаКлиенте
Процедура ДекорацияСПАРКПодробноНажатие(Элемент)
	
	СПАРКРискиКлиент.ПоказатьЗначенияИндексовКонтрагента(ИндексыСПАРКРиски, ЭтотОбъект);
	
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено И (ТекущиеДанные.ИспользоватьСерийныеНомера ИЛИ НЕ ТекущиеДанные.СтатусУказанияСерий = 0) Тогда
			Отказ = Истина;
			Если ТекущиеДанные.ИспользоватьСерийныеНомера Тогда
				ВвестиПодарочныеСертификаты();
			Иначе
				УказатьСерии("КоличествоУпаковок");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыУпаковка 
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕдиницаИзмерения Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
			Отказ = Истина;
			УказатьСерии("Упаковка");
		КонецЕсли;
	КонецЕсли;
	
	// Интерфейс ЕГАИС
	Если Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыСтатусУказанияАкцизныхМарок 
		И не Элементы.Товары.ТекущиеДанные = Неопределено
		и не Элементы.Товары.ТекущиеДанные.СтатусУказанияАкцизныхМарок = 0 Тогда
		ИдентификаторСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		ВвестиАкцизнуюМарку(ИдентификаторСтроки, Элементы.Товары.ТекущиеДанные, "КоличествоУпаковок");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	УдаляемыйКлючСвязи = Элементы.Товары.ТекущиеДанные.КлючСвязи;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
	УдалитьАкцизнуюМарку();
				
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		ТекущаяСтрока                          = Элементы.Товары.ТекущиеДанные;
		ТекущаяСтрока.КлючСвязиСерийныхНомеров = 0;
		ТекущаяСтрока.СуммаАвтоматическойСкидки   = 0;
		ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
		
		Если ТекущаяСтрока.ИспользоватьСерийныеНомера Тогда
			ТекущаяСтрока.КоличествоУпаковок = 0;
			ТекущаяСтрока.Количество = 0;
		КонецЕсли;
		
		ТекущаяСтрока.КлючСвязи = 0;
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
		Элемент,
		КэшированныеЗначения,
		ПараметрыУказанияСерий,
		Копирование);
	
	РедактированиеТЧТовары = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если КэшированныеЗначения = Неопределено Тогда
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары,
			КэшированныеЗначения,
			ПараметрыУказанияСерий,
			Ложь);
	КонецЕсли;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущиеДанные);
	
	РедактированиеТЧТовары = Ложь;
	
	Если Объект.Товары.Количество() = 1 Тогда
		Объект.ДоговорПлатежногоАгента = ТекущиеДанные.ДоговорПлатежногоАгента;
	КонецЕсли;
	
	Если ПропуститьАвтоматическийРасчетСкидок Тогда
		ПропуститьАвтоматическийРасчетСкидок = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ТоварыПослеУдаленияСервер();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	УдалитьАкцизнуюМарку();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
	ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"   , ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" , 
								ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", 
								ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВШапке(Объект));
	СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента");
	
	СтруктураМарки = Новый Структура;
	СтруктураМарки.Вставить("Дата", Объект.Дата);
	
	СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураМарки);
	СтруктураДействий.Вставить("ОчиститьДанныеПоЗаказу");
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущаяСтрока);
	
	Если ПропуститьАвтоматическийРасчетСкидок Тогда
		ПропуститьАвтоматическийРасчетСкидок = Ложь;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтаФорма, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ПриИзмененииТоварыКоличестваУпаковок();
	
	// Интерфейс ЕГАИС
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
			
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если (Элемент.ТекущийЭлемент = Элементы.ТоварыПроцентАвтоматическойСкидки
		Или Элемент.ТекущийЭлемент = Элементы.ТоварыСуммаАвтоматическойСкидки) 
		И НЕ ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОткрытьИнформациюОСкидкахКлиент()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если РедактированиеТЧТовары Тогда
		Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок Тогда
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			Если НЕ ТекущиеДанные = Неопределено И (ТекущиеДанные.ИспользоватьСерийныеНомера ИЛИ НЕ ТекущиеДанные.СтатусУказанияСерий = 0) Тогда
				Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				Если ТекущиеДанные.ИспользоватьСерийныеНомера Тогда
					ВвестиПодарочныеСертификаты();
				Иначе
					УказатьСерии("КоличествоУпаковок");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыУпаковка 
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕдиницаИзмерения Тогда
			
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			
			Если НЕ ТекущиеДанные = Неопределено И НЕ ТекущиеДанные.СтатусУказанияСерий = 0 Тогда
				Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				УказатьСерии("Упаковка");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ПересчитатьИлиОтменитьСкидки();
	Если КэшированныеЗначения = Неопределено Тогда
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары,
			КэшированныеЗначения,
			ПараметрыУказанияСерий,
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если АвтоматическийРасчетСкидок Тогда
		ПропуститьАвтоматическийРасчетСкидок = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ИнтеграцияИС

// ИнтеграцияИС

&НаКлиенте
Процедура Подключаемый_ПолеИнтеграцииИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		ЭтотОбъект,
		Объект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(ДополнительныеПараметры)
	
	ИнтеграцияИС.ОбновитьПолеИнтеграцииВФормеДокументаОснования(ЭтотОбъект, Объект, ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ИнтеграцияИС

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
		СтруктураОтбора = Новый Структура("ИспользоватьПриПродаже", Истина);
		ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
		
		ОбработчикОповещения= Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораВидаЦены", ЭтотОбъект);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.ВидыЦен.Форма.ФормаВыбора", ПараметрыФормы,ЭтотОбъект,,,, ОбработчикОповещения, Режим);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенам(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	Иначе
		
		Если ЗначениеЗаполнено(Объект.Магазин) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенамСервер();
			ЗапасыКлиент.ОповеститьОбОкончанииЗаполненияЦенПоРозничнымЦенам(ЦеныРассчитаны, Объект.Магазин);
			ПересчитатьИлиОтменитьСкидки();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Истина, "ОбщаяФорма.НазначениеАвтоматическихУправляемыхСкидокНаценок.Открытие");
	
	ДополнительныеПараметры = Новый Структура;
	ОбработчикОповещения = Новый ОписаниеОповещения("НазначитьАвтоматическиеСкидкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ВыполнитьПредварительныйРасчетСкидокНаСервере());
	ОткрытьФорму("ОбщаяФорма.НазначениеАвтоматическихУправляемыхСкидокНаценок", ПараметрыФормы, ЭтаФорма, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если НЕ СкидкиНаценкиКлиент.ПроверитьНеобходимостьНазначенияРучнойСкидкиНаценки(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Истина, "ОбщаяФорма.НазначениеРучнойСкидкиНаценки.Открытие");
        
	ПараметрыДляРучнойСкидки = ПараметрыДляНазначенияРучнойСкидки();
	ДополнительныеПараметры = Новый Структура;
	ОбработчикОповещения = Новый ОписаниеОповещения("НазначитьРучнуюСкидкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.НазначениеРучнойСкидкиНаценки", ПараметрыДляРучнойСкидки, ЭтаФорма, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	ОткрытьИнформациюОСкидкахКлиент()
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'реализацию товаров'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	ПараметрыФормы.Вставить("РежимПодбораСУчетомМинимальныхЦен", Истина);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	Если НЕ ЕстьПравоИзменятьЦену() Тогда
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	Если Не СкидкиНаценкиКлиент.ПроверитьНеобходимостьОтменыРучныхСкидокНаценок(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказ(Команда)
	
	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаОбъекта",
			Новый Структура("Ключ", Объект.ЗаказПокупателя));
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказу(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Список ""Товары"" будет перезаполнен. Продолжить?'");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросЗаполнениеПоЗаказу", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗавершитьЗаполнениеПоЗаказу();
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ОповещенияПриПолученииВеса = Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект);
	ПодключаемоеОборудованиеРТКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ОповещенияПриПолученииВеса, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбиратьНенайденные", Ложь);
	ДополнительныеПараметры.Вставить("ОбработатьПослеЗагрузки", Истина);
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПровестиИЗакрытьИзФормы(Команда)
	Перем Отказ, Объект_Ссылка;
	
	Если Объект.ПометкаУдаления Тогда
		ВызватьИсключение НСтр("ru = 'Помеченный на удаление документ не может быть проведен!'");
	КонецЕсли;
	
	Отказ = Ложь;
	ПередЗаписьюКлиент(Отказ, РежимЗаписиДокумента.Проведение);
	ТекстСообщения = "";
	
	Если НЕ Отказ Тогда
		ПровестиИзФормыСервер(Отказ, Ложь, Объект_Ссылка, ТекстСообщения);
		Если Отказ 
			И ЗначениеЗаполнено(ТекстСообщения) Тогда
			Возврат;
		КонецЕсли;
		
		Модифицированность = Отказ;
		Если НЕ Отказ Тогда
			Закрыть();
			ОтобразитьИзменениеДанных(Объект_Ссылка, ВидИзмененияДанных.Изменение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИзФормы(Команда)
	
	Перем Отказ;
	
	Если Объект.ПометкаУдаления Тогда
		ВызватьИсключение НСтр("ru = 'Помеченный на удаление документ не может быть проведен!'");
	КонецЕсли;
	
	Отказ = Ложь;
	ПередЗаписьюКлиент(Отказ, РежимЗаписиДокумента.Проведение);
	ТекстСообщения = "";
	
	Если НЕ Отказ Тогда
		ПровестиИзФормыСервер(Отказ, Истина,,ТекстСообщения);
		Если Отказ 
			И ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
		
		ОбновитьОтображениеДанных();
		Модифицированность = Отказ;
		
		ОтобразитьИзменениеДанных(ЭтаФорма.Объект.Ссылка, ВидИзмененияДанных.Изменение);
		
	КонецЕсли;
	
	ИзменитьВидимостьДоступностьЭлементовЕГАИС(ЭтотОбъект);
	
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, УчетАлкогольнойПродукции);
	ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьТЧ(Команда)
	РазвернутьСвернутьТЧНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВвестиИсправлениеСчетаФактуры(Команда)
	ПродажиКлиент.ВвестиСчетФактуру(ЭтаФорма, Объект, Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагента(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧек(Команда)
	
	Если Объект.ПробитЧек Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьВозможностьВводаНаОсновании(Объект.Ссылка) Тогда
		ВызватьИсключение НСтр("ru='На основании документа существуют созданные чеки ЕГАИС'");
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросПроведениеПередПечатьюЧека", ЭтотОбъект);
	
	Если ФинансыКлиент.ПроверитьВозможностьПечатиЧека(ОбработчикОповещения, ЭтотОбъект) Тогда
		НапечататьЧекКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументАванса(Команда)
	
	ОткрытьФорму("Документ.ПриходныйКассовыйОрдер.ФормаОбъекта",
			Новый Структура("Ключ", Объект.ПриходныйКассовыйОрдер));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОснованииЧекЕГАИС(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Данные еще не записаны.
				|Выполнение действия ""%1"" возможно только после записи данных.
				|Данные будут записаны.'"),
			НСтр("ru='Чек ЕГАИС: создать на основании'"));
			
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьНаОснованииЧекЕГАИСПодтверждениеЗаписи", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьВозможностьВводаНаОсновании(Объект.Ссылка) Тогда
		ВызватьИсключение НСтр("ru='На основании документа существуют созданные чеки ЕГАИС'");
	КонецЕсли;
	
	Если ПроверитьПробитЧек(Объект.Ссылка) Тогда 
		ВызватьИсключение НСтр("ru='На основании документа существуют пробитые чеки'");
	КонецЕсли;
	
	СоздатьЧекЕГАИСПослеЗаписиРеализации();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	ПолучитьСтрокиИзБуфераОбмена();
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере("Товары");
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоНаименованию(Команда)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Магазин",Объект.Магазин);
	РаботаСПравиламиИменованияКлиент.ПоискПоНаименованию(ЭтаФорма,ПараметрыПоиска);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	НастроитьОтображениеРеквизитовСчетаФактуры(ЭтаФорма,
			ПродажиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
			
	Объект.ВидНалога = ПодключаемоеОборудованиеРТ.ВидНалогаПоОрганизацииИСкладу(Объект.Дата, Объект.Организация, Объект.Склад);

	
	ЗаполнитьСистемуНалогооблажения(Объект.Дата, Объект.Организация);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеРеквизитовСчетаФактуры(Форма, ПараметрыПредставления)
	
	Форма.ТекстСчетФактура = ПараметрыПредставления.ТекстСчетФактура;
	Форма.Элементы.ТекстСчетФактура.Гиперссылка = ПараметрыПредставления.ГиперссылкаСчетФактура;
	Форма.Элементы.СписокСчетовФактур.Заголовок = ПараметрыПредставления.ТекстСписок;
	Форма.Элементы.СписокСчетовФактур.Гиперссылка = ЗначениеЗаполнено(ПараметрыПредставления.ТекстСписок);
	Форма.Элементы.ВвестиИсправлениеСчетаФактуры.Доступность = ПараметрыПредставления.РазрешеныИсправления;
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьСвернутьТЧНаСервере()
	
	РазвернутаТЧ = НЕ РазвернутаТЧ;
	
	ВидимостьЭлементов = НЕ РазвернутаТЧ;
	
	ЭтаФорма.ПоложениеКоманднойПанели                 = ?(ВидимостьЭлементов, ПоложениеКоманднойПанелиФормы.Авто, ПоложениеКоманднойПанелиФормы.Нет);
	Элементы.Шапка.Видимость                          = ВидимостьЭлементов;
	
	Элементы.РазвернутьСвернутьТЧ.Картинка = ?(ВидимостьЭлементов, БиблиотекаКартинок.РазвернутьТабличнуюЧасть, БиблиотекаКартинок.СвернутьТабличнуюЧасть);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов()
	
	Если НЕ ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры И НЕ Справочники.Номенклатура.ИспользуютсяПодарочныеСертификаты() Тогда
		Элементы.ТоварыСтатусыСерийИПодарочныхСертификатов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПодарочныеСертификаты()
	
	ПересчетКоличества = Ложь;
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиСерийныеНомераНоменклатурыВТЧ(ЭтаФорма,
		Объект.СерийныеНомера,
		Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(ТекущееПоле)
	
	ВводСерийРазрешен = Истина;
	ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма, ПараметрыУказанияСерий, ВводСерийРазрешен);
	Если НЕ ВводСерийРазрешен Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	ПараметрыФормыУказанияСерий.Вставить("ТекущееПоле", ТекущееПоле);
	ПараметрыФормыУказанияСерий.Вставить("КоличествоЕдиницДоПересчета");
	
	ОбработчикУказанияСерий = Новый ОписаниеОповещения("ОбработатьУказаниеСерий", ЭтотОбъект, ПараметрыФормыУказанияСерий);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, ПараметрыФормыУказанияСерий, ЭтаФорма,,,, ОбработчикУказанияСерий, РежимБлокировки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект, ПересчитыватьТолькоСуммуСкидки)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	Если ПересчитыватьТолькоСуммуСкидки Тогда
		СтруктураПересчетаСкидок = Новый Структура;
		СтруктураПересчетаСкидок.Вставить("Очищать", Ложь);
		СтруктураПересчетаСкидок.Вставить("ПересчитыватьСуммуСкидки", Истина);
		
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , СтруктураПересчетаСкидок);
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", СтруктураПересчетаСкидок);
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	КонецЕсли;
	
КонецПроцедуры

// Функция заполняет цену выделенных строк по виду цен в ТЧ Товары.
//
//  Возвращаемое значение - Булево - Цены рассчитаны.
&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦены)
	
	СтруктураПараметров                                          = ЗапасыСервер.СтруктураПараметровЗаполненияПоВидуЦен();
	СтруктураПараметров.Объект                                   = Объект;
	СтруктураПараметров.ИмяТабличнойЧасти                        = "Товары";
	СтруктураПараметров.ВидЦен                                   = ВидЦены;
	СтруктураПараметров.ВыделенныеСтроки                         = Элементы.Товары.ВыделенныеСтроки;
	СтруктураПараметров.Дата                                     = ЗапасыСервер.ДатаДляЦенообразованияДляДокумента(Объект);
	СтруктураПараметров.НеобходимостьПересчетаСуммыСУчетомСкидок = Истина;
	
	ЦеныРассчитаны = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(СтруктураПараметров);
	
	ОбновитьИтоговыеПоказателиСервер();
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Функция заполняет цену выделенных строк по розничным ценам в ТЧ Товары.
//
//  Возвращаемое значение - Булево - Цены рассчитаны.
&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенамСервер()
	
	СтруктураПараметров                                          = ЗапасыСервер.СтруктураПараметровЗаполненияПоРозничнымЦенам();
	СтруктураПараметров.Объект                                   = Объект;
	СтруктураПараметров.ИмяТабличнойЧасти                        = "Товары";
	СтруктураПараметров.Магазин                                  = Объект.Магазин;
	СтруктураПараметров.ВыделенныеСтроки                         = Элементы.Товары.ВыделенныеСтроки;
	СтруктураПараметров.Дата                                     = ЗапасыСервер.ДатаДляЦенообразованияДляДокумента(Объект);
	СтруктураПараметров.ЕстьНДС                                  = Истина;
	СтруктураПараметров.ПриводитьКМинимальнойЦене                = Истина;
	СтруктураПараметров.НеобходимостьПересчетаСуммыСУчетомСкидок = Истина;
	
	ЦеныРассчитаны  = ЗапасыСервер.ЗаполнитьЦеныВыделенныхСтрокПоРозничнымЦенам(СтруктураПараметров);
	
	ОбновитьИтоговыеПоказателиСервер();
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСуммаРучнойСкидки.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыПроцентРучнойСкидки.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);

	УправлениеПользователями.УстановитьДоступностьДляРеквизитовТабличнойЧасти(Элементы.ТоварыНазначитьРучнуюСкидку.Доступность, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);
	
	УправлениеПользователями.УстановитьДоступностьДляРеквизитовТабличнойЧасти(Элементы.ТоварыОтменитьРучныеСкидки.Доступность, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьРучнуюСкидку);
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыЦена.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСумма.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Продавец.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьПродавца);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыПродавец.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьПродавца);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);

КонецПроцедуры

// Процедура заполняет товары из подбора.
// Параметры: 
//  ВыбранноеЗначение - Структура
&НаСервере
Функция ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	СтрокиИзменены = Ложь;
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	ТаблицаСерийныхНомеров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресСерийныхНомеровВХранилище);
	ЕстьСерийныеНомера = ТаблицаСерийныхНомеров.Количество() > 0;	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура,
															  |Характеристика,
															  |Упаковка,
															  |Цена,
															  |КоличествоУпаковок,
															  |ХарактеристикиИспользуются,
															  |ИспользоватьСерийныеНомера");
		Если ЕстьСерийныеНомера Тогда
			МассивСерийныхНомеров = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(СтрокаТовара.КлючСвязиСерийныхНомеров , ТаблицаСерийныхНомеров);
			ТекущаяСтрока.КлючСвязиСерийныхНомеров = ОбработкаТабличнойЧастиТоварыСервер.ДобавитьСерийныеНомераВТабличнуюЧасть(Объект.СерийныеНомера, МассивСерийныхНомеров, 0);
		КонецЕсли;	
		Если СтрокаТовара.ИспользоватьСерийныеНомера Тогда
			Если ЕстьСерийныеНомера Тогда
				ТекущаяСтрока.КоличествоУпаковок = МассивСерийныхНомеров.Количество();
			Иначе
				ТекущаяСтрока.КоличествоУпаковок = 0;
			КонецЕсли;
		КонецЕсли;
		СтруктураДействий = Новый Структура;

		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", 
									ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВШапке(Объект));
		СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента");

		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки");
		СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
		СтрокиИзменены = Истина;
		
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ОбновитьИтоговыеПоказателиСервер();
	ЗаполнитьСтатусыУказанияСерийСервер();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	Возврат СтрокиИзменены;
	
КонецФункции

&НаСервере
Процедура ПересчетНДСТабличнойЧастиСервер()
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", 
								ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВШапке(Объект));
	
	СтруктураПараметровПересчетаНДС = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураПараметровПересчетаНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПараметровПересчетаНДС);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	ОбновитьИтоговыеПоказателиСервер();
	
	Объект.СкидкиРассчитаны = Ложь;
	
КонецПроцедуры

// Процедура- обработчик изменения дисконтная карта на сервере.
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ПриИзмененииДисконтнаяКартаСервер()
	
	ВладелецКарты = Объект.ДисконтнаяКарта.ВладелецКарты;
	
	Если ЗначениеЗаполнено(ВладелецКарты) И ТипЗнч(ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") Тогда
	
		Объект.Контрагент = ВладелецКарты;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет склад при изменении магазина.
//
&НаСервере
Процедура ПриИзмененииМагазинСервер()
	
	Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПродажиПоУмолчанию(Объект.Магазин,,Объект.Склад, Пользователи.ТекущийПользователь());
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПриИзмененииСкладСервер();
	КонецЕсли;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.РеализацияТоваров.ПараметрыУказанияСерий(Объект));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	 
КонецПроцедуры

// Процедура- обработчик изменения склада на сервере.
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ПриИзмененииСкладСервер()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Объект.Организация = Объект.Склад.Организация;
		Объект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация,,Объект.БанковскийСчетОрганизации);
		
	КонецЕсли;
	
	Объект.ВидНалога = ПодключаемоеОборудованиеРТ.ВидНалогаПоОрганизацииИСкладу(Объект.Дата, Объект.Организация, Объект.Склад);
	
	ПересчетНДСТабличнойЧастиСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСистемуНалогооблажения(ДатаДокумента, Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СистемыНалогообложенияОрганизацийСрезПоследних.СистемаНалогообложения,
	|	СистемыНалогообложенияОрганизацийСрезПоследних.ОбъектНалогообложения
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&ДатаДокумента, Организация = &Организация) КАК СистемыНалогообложенияОрганизацийСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация"  , Организация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
			СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
			ОбъектНалогооблаженияПоУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка();
		Иначе
			СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная;
			
			Если Выборка.ОбъектНалогообложения = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда
				ОбъектНалогооблаженияПоУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы;
			Иначе
				ОбъектНалогооблаженияПоУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
		ОбъектНалогооблаженияПоУСН = Перечисления.ОбъектыНалогообложенияПоУСН.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСистемуНалогообложенияНаФорме()
	
	Если ЗначениеЗаполнено(Объект.ВидНалога) Тогда
		СистемаНалогообложенияСтрокой = Строка(Объект.ВидНалога);
	ИначеЕсли ЗначениеЗаполнено(ОбъектНалогооблаженияПоУСН)  Тогда
		СистемаНалогообложенияСтрокой = НСтр("ru = 'Упрощенная. '") + Строка(ОбъектНалогооблаженияПоУСН);
	Иначе
		СистемаНалогообложенияСтрокой = Строка(СистемаНалогообложения);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает изменение количества упаковок.
//
// Параметры:
//  Нет;
//
&НаКлиенте
Процедура ПриИзмененииТоварыКоличестваУпаковок(ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект, ПродажаПоЗаказу);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	Если ПродажаПоЗаказу Тогда
		ОбработкаТабличнойЧастиТоварыКлиентСервер.РаспределитьСуммуИзмененийСтрокиТоваровНаТабличнуюЧастьСкидки(
			Объект.СкидкиНаценки,
			ТекущаяСтрока.КлючСвязи,
			ТекущаяСтрока.СуммаАвтоматическойСкидки)
	КонецЕсли;
	
	
КонецПроцедуры

// Заполняет реквизиты документа по умолчанию в зависимости от выбранного налогообложения НДС.
//
&НаСервере
Процедура ПриИзмененииУчитыватьНДССервер()
	
	УстановитьДоступностьЦенаВключаетНДС(Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", 
								ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВШапке(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 
								ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтрокиТЧ" , Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	ОбновитьИтоговыеПоказателиСервер();
	УстановитьТекущуюСтраницуСуммПодвала();
	
КонецПроцедуры

// Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора.
// Параметры:
//  Отказ - Булево
//
&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Магазин"" не заполнено'"), Объект, "Объект.Магазин",,Отказ);
	КонецЕсли;
		
КонецПроцедуры

// Процедура управляет видимостью и доступностью элементов формы на сервере.
//
&НаСервере
Процедура УправлениеЭлементамиФормыНаСервере()
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Склад", "ТолькоПросмотр", НЕ ЗначениеЗаполнено(Объект.Магазин));
	
	Элементы.ОткрытьЗаказПокупателя.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
	Элементы.ОткрытьДокументАванса.Видимость  = ЗначениеЗаполнено(Объект.ПриходныйКассовыйОрдер);
	
КонецПроцедуры

// Устанавливает доступность поля ЦенаВключаетНДС.
//
&НаСервере
Процедура УстановитьДоступностьЦенаВключаетНДС(ПриИзменении = Ложь)

	Если ПриИзменении И Не Объект.УчитыватьНДС И Объект.ЦенаВключаетНДС Тогда
		Объект.ЦенаВключаетНДС = Ложь;
	ИначеЕсли ПриИзменении И Объект.УчитыватьНДС Тогда
		Объект.ЦенаВключаетНДС = Истина;
	КонецЕсли;
	
	Элементы.ЦенаВключаетНДС.ТолькоПросмотр = Не Объект.УчитыватьНДС;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Склад", "ТолькоПросмотр", НЕ ЗначениеЗаполнено(Объект.Магазин));
	
КонецПроцедуры

// Процедура учитывает изменение параметров налогообложения в документе.
//
&НаСервере
Процедура УстановитьТекущуюСтраницуСуммПодвала()
	
	Если Объект.УчитыватьНДС Тогда
		Элементы.ГруппаПодвалСтраницы.ТекущаяСтраница = Элементы.ГруппаСуммыНДС;
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаВсего", "Видимость", Истина);
	Иначе
		Элементы.ГруппаПодвалСтраницы.ТекущаяСтраница = Элементы.ГруппаСуммы;
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаВсего", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьПравоИзменятьЦену()
	
	Возврат УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Проведение

&НаСервере
Процедура ПровестиИзФормыСервер(Отказ, ЗапускатьОбработкуПослеЗаписи = Ложь, Объект_Ссылка = Неопределено, Текст)
	
	ЗаписываемыйОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ЗаписываемыйОбъект.ПроверитьЗаполнение() Тогда
		Попытка
			Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
				ЗаписываемыйОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			Иначе
				ЗаписываемыйОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			КонецЕсли;
		Исключение
			Отказ = Истина;
		КонецПопытки;
		
		Если ЗаписываемыйОбъект.ДополнительныеСвойства.Свойство("Отказ") Тогда
			Если ЗаписываемыйОбъект.ДополнительныеСвойства.Отказ Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаписываемыйОбъект.ДополнительныеСвойства.Свойство("ТаблицыДляДвижений")
			И ЗаписываемыйОбъект.ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаПопыткиПродажПревышающихОстаток") Тогда
			
			ПродажиСервер.ОтразитьПопыткиПродаж(ЗаписываемыйОбъект.ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПопыткиПродажПревышающихОстаток, ЗаписываемыйОбъект.Дата);
			
		КонецЕсли;
		
		Объект_Ссылка = ЗаписываемыйОбъект.Ссылка;
		
		Если Отказ Тогда
		
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось провести ""%1"".'"),
					Строка(ЗаписываемыйОбъект)
					);
			
		ИначеЕсли ЗапускатьОбработкуПослеЗаписи Тогда
			
			ЗначениеВРеквизитФормы(ЗаписываемыйОбъект, "Объект");
			
			ВыполнитьДействияПослеЗаписиНаСервере();
			
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ВыполнитьДействияПослеЗаписиНаСервере();
		
		УстановитьВидимостьИДоступностьЗаполнитьПоЗаказу();
		
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ЗаписываемыйОбъект);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
		
		// ИнтеграцияГИСМ
		СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
		// Конец ИнтеграцияГИСМ
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(ЗаписываемыйОбъект.Товары);
		
		// ИнтеграцияЕГАИС
		СформироватьТекстДокументаЕГАИС();
		ИзменитьВидимостьДоступностьЭлементовЕГАИС(ЭтотОбъект);
		// Конец ИнтеграцияЕГАИС
		
		// ИнтеграцияИС
		ИнтеграцияИС.ПослеЗаписиНаСервереВФормеДокументаОснования(ЭтотОбъект, Объект);
		// Конец ИнтеграцияИС
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПослеЗаписиНаСервере()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(Объект.Товары);
	ОбновитьИтоговыеПоказателиСервер();
	Если ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
		СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	КонецЕсли;
	Если ИспользоватьБонусныеПрограммыЛояльности Тогда
		БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект);
	КонецЕсли;
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Скидки

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	
	СведенияДокумента = Новый Структура;
	СегментИсключаемойНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "СегментИсключаемойНоменклатуры");
	СведенияДокумента.Вставить("СегментИсключаемойНоменклатуры", СегментИсключаемойНоменклатуры);
	СведенияДокумента.Вставить("Товары", Объект.Товары);
	СтруктураПараметры.Вставить("СведенияДокумента", СведенияДокумента);
	
	Возврат ПоместитьВоВременноеХранилище(СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПоместитьСкидкиВХранилище()

	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("СкидкиНаценки", Объект.СкидкиНаценки.Выгрузить());
	СтруктураТаблиц.Вставить("БонусныеБаллыКНачислению", Объект.БонусныеБаллыКНачислению.Выгрузить());
	
	Адрес = ПоместитьВоВременноеХранилище(СтруктураТаблиц, УникальныйИдентификатор);
	
	Возврат Адрес;

КонецФункции

&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	Если ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		УдалитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
	КонецЕсли;
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
	Если ПримененныеСкидки.ТаблицаСообщений.Количество() > 0 Тогда
		ВывестиСообщения = Истина;
	КонецЕсли;
	
	Модифицированность = НЕ СтруктураПараметры.ТолькоСообщенияПослеОформления;
	
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
	
		Объект.СкидкиРассчитаны = Истина;
	
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары);
	
	ОбновитьИтоговыеПоказателиСервер();
	
КонецПроцедуры

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки)
	
	Если СуммаСкидкиНаценки <> 0 Тогда
		СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, Истина);
	Иначе
		СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	Если Объект.Товары.Количество() = 0 Тогда
		ОтменитьСкидки();
		Возврат;
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ДатаДокументаИзмененаВручную Тогда
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
	Если ВывестиСообщения Тогда
		ДополнительныеПараметры = Новый Структура;
		ОбработчикОповещения = Новый ОписаниеОповещения("РасчетСкидокКлиентЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресПримененныхСкидокВоВременномХранилище);
		ОткрытьФорму("ОбщаяФорма.ФормаВыводаСообщений", ПараметрыФормы, ЭтаФорма, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		РасчетСкидокКлиентЗавершение();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтменитьСкидки()
	
	Если Объект.СкидкиРассчитаны Тогда
		СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "Товары");
		Объект.БонусныеБаллыКНачислению.Очистить();
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		Объект.СкидкиРассчитаны = Ложь;
	КонецЕсли;
	ОбновитьИтоговыеПоказателиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахЗавершитьОбработкуВопроса()
	
	АдресСкидок = ПоместитьСкидкиВХранилище();
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(Элементы.Товары.ТекущиеДанные, Объект, ЭтотОбъект, АдресСкидок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахКлиент()
	
	Если Объект.СкидкиРассчитаны Тогда
		ОткрытьИнформациюОСкидкахЗавершитьОбработкуВопроса();
	Иначе
		ДополнительныеПараметры = Новый Структура; 
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросРассчитатьИОткрытьСкидки", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'");
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтоговыеПоказатели()

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.СкидкиНаценки, Истина, СуммаСкидкиНаценки);
	
	СуммаРучныхСкидок = 0;
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуРучныхСкидокДокумента(Объект.Товары, СуммаРучныхСкидок);
	СкидкиНаценкиИтогСумма = СуммаСкидкиНаценки + СуммаРучныхСкидок;
	
	СуммаБезСкидки = СуммаВсего + СкидкиНаценкиИтогСумма;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоговыеПоказателиСервер()

	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.СкидкиНаценки, Истина, СуммаСкидкиНаценки);
	
	СуммаРучныхСкидок = 0;
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуРучныхСкидокДокумента(Объект.Товары, СуммаРучныхСкидок);
	СкидкиНаценкиИтогСумма = СуммаСкидкиНаценки + СуммаРучныхСкидок;
	
	СуммаБезСкидки = СуммаВсего + СкидкиНаценкиИтогСумма;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Серии

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку");
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект, ПродажаПоЗаказу);
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);
	
	ОбновитьИтоговыеПоказателиСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура ПередЗаписьюКлиент(Отказ, РежимЗаписи)
	
	// Если документ проводится, рассчитаем скидки.
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	
		Если ИспользоватьАвтоматическиеСкидкиВПродажах 
			И НЕ Объект.СкидкиРассчитаны 
			И НЕ ПродажаПоЗаказу
			И Объект.Товары.Количество() > 0 Тогда
			
			РассчитатьСкидкиНаценкиКлиент();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыДляНазначенияРучнойСкидки()
	
	Возврат СкидкиНаценкиСервер.ПараметрыДляНазначенияРучнойСкидки(Объект);
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента);
	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
// Процедура - Отображение результата проверки контрагентов в документе.
//
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
// Процедура - Запуск фонового задания по проверке контрагента.
//
// Параметры:
//  ПараметрыФоновогоЗадания	 - ТаблицаФормы - Если изменения контрагента или даты произошли в табличной части.
//								 - ПолеФормы - Элемент управления, содержащий контрагента или счет-фактуру, в случае, 
//		если произошло изменение в контрагенте, находящегося в шапке или в счете-фактуре, находящегося в подвале.
//								 - Дата - Дата документа, в случае если произошло изменение даты
//								 - Неопределено - если требуется проверка всех контрагентов в документе.
//								 - Булево - если это запуск проверки контрагента при создании на сервере.
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаСервере
Процедура УдалитьНесвязанныеСерийныеНомера()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеСерийныеНомера(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИлиОтменитьСкидки()
	
	Если НЕ ПродажаПоЗаказу Тогда 
		Если АвтоматическийРасчетСкидок Тогда
			Если НЕ ПропуститьАвтоматическийРасчетСкидок Тогда
				РассчитатьСкидкиНаценкиКлиент();
			КонецЕсли;
		Иначе
			ОтменитьСкидки();
		КонецЕсли;
		ОбновитьИтоговыеПоказателиСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиент()
	Перем Отказ, ИдентификаторУстройства, ИспользоватьКассуБезПодключенияОборудования, РаспределениеВыручкиПоСекциям;
	
	ПодготовитьИПроверитьПечатьЧека(Отказ, ИдентификаторУстройства, ИспользоватьКассуБезПодключенияОборудования, РаспределениеВыручкиПоСекциям);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ИспользоватьКассуБезПодключенияОборудования Тогда
		
		Если НомерДокументаКассыККМ[Объект.КассаККМ] <> Неопределено Тогда
			Объект.НомерЧекаККМ  = НомерДокументаКассыККМ[Объект.КассаККМ];
		Иначе
			Объект.НомерЧекаККМ  = ПорядковыйНомерПродажи;
		КонецЕсли;
		Объект.ПробитЧек     = Истина;
		
		Модифицированность = Истина;
		
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
		Если РезультатЗаписи = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;     
	
	Если ИдентификаторУстройства <> Неопределено Тогда
        
        // &ЗамерПроизводительности 
        ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                 Истина, "Документ.РеализацияТоваров.Форма.ФормаДокумента.Команда.ПробитьЧек");

       	ЭтаФорма.Доступность = Ложь;
		
		// Готовим данные
		ЕстьАлкогольнаяПродукцияЕГАИС = Неопределено;
		ТранспортныйМодуль = Неопределено;
		ДанныеЕГАИСДостаточны = Ложь;
		
		НомерЧека = НомерДокументаКассыККМ[Объект.КассаККМ] + 1;
		ОбщиеПараметры    = ПодготовитьДанныеДляПробитияЧека(ТранспортныйМодуль, ДанныеЕГАИСДостаточны, НомерЧека, РаспределениеВыручкиПоСекциям, ЕстьАлкогольнаяПродукцияЕГАИС);
		
		Контекст = Новый Структура();
		//Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		Контекст.Вставить("ЕстьАлкогольнаяПродукцияЕГАИС", ЕстьАлкогольнаяПродукцияЕГАИС);
		
		Если ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		
			Если НЕ ДанныеЕГАИСДостаточны Тогда
				//ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Ложь);
				ЭтаФорма.Доступность = Истина;
				Возврат;
			КонецЕсли;
			
			Контекст.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
			
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекВыполнитьЗавершение", ЭтотОбъект, Контекст);
		ПослеОткрытияЧека     = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека", ЭтотОбъект, Контекст);
		ПослеОшибкиПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОшибкиПечатиЧека", ЭтотОбъект, Контекст);
		
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(Оповещение, 
										УникальныйИдентификатор, 
										ОбщиеПараметры, 
										ИдентификаторУстройства,
										,
										ПослеОткрытияЧека,
										ПослеОшибкиПечатиЧека);
										
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьИПроверитьПечатьЧека(Отказаться, 
										  ИдентификаторУстройства, 
										  ИспользоватьКассуБезПодключенияОборудования,
										  РаспределениеВыручкиПоСекциям)
	
	Отказаться = Ложь;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ)  Тогда
		ПараметрыКассыККМ       = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(Объект.КассаККМ);
		ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
		
		РаспределениеВыручкиПоСекциям = ПараметрыКассыККМ.РаспределениеВыручкиПоСекциям;
		ИспользоватьКассуБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
		
		КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		
		ТекстОшибки = НСтр("ru='Кассовая смена не открыта!'");
		Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Объект.Дата, ТекстОшибки) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				"КассаККМ",
				,
				Отказаться);
			
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru='Не выбрана касса ККМ!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"КассаККМ",
			,
			Отказаться);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(ТранспортныйМодуль, ДанныеЕГАИСДостаточны, НомерЧека, РаспределениеВыручкиПоСекциям, ЕстьАлкогольнаяПродукцияЕГАИС = Неопределено)
	
	ОбщиеПараметры  = Документы.РеализацияТоваров.ПодготовитьДанныеДляПробитияЧека(Объект, ТранспортныйМодуль, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС, НомерЧека, РаспределениеВыручкиПоСекциям);
	Возврат ОбщиеПараметры;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтавкиНДС()
	
	УчетНДС.ЗаполнитьСписокВыбораСтавокНДС(Элементы, Объект.Дата);
	
КонецПроцедуры

#Область ЕГАИС

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьВидимостьДоступностьЭлементовЕГАИС(Форма)
	
	Форма.ТолькоПросмотр = Форма.ЕстьПереданныеЧекиЕГАИС ИЛИ Форма.Объект.ПробитЧек;
	
	Форма.Элементы.КассаККМ.Доступность = НЕ Форма.Объект.ПробитЧек;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиАкцизнуюМарку(ИдентификаторСтроки, СтрокаТовара, ТекущееПоле = "КоличествоУпаковок")
	
	ПараметрыСканированияАкцизнойМарки = ИнтеграцияЕГАИСРТКлиентСервер.ПараметрыСканированияАкцизнойМарки();
	ПараметрыСканированияАкцизнойМарки.ТекущееПоле                     = ТекущееПоле;
	ПараметрыСканированияАкцизнойМарки.АдресВХранилище                 = АдресМарокВХранилище(СтрокаТовара.КлючСвязи);
	ПараметрыСканированияАкцизнойМарки.ОткрытьФормуМножественногоВвода = Истина;
	
	ИнтеграцияЕГАИСРТКлиент.ВвестиАкцизнуюМарку(ЭтотОбъект, СтрокаТовара, ПараметрыСканированияАкцизнойМарки);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьАкцизнуюМарку()
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
		// Нужно удалить старые акцизные марки.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязи", ТекущаяСтрока.КлючСвязи);
		
		МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
			Объект.АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресМарокВХранилище(КлючСвязи)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", КлючСвязи);
	СтрокиМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураОтбора);
	АдресМарок = ПоместитьВоВременноеХранилище(СтрокиМарок, УникальныйИдентификатор);
	Возврат АдресМарок;
	
КонецФункции

&НаСервере
Функция ЗаполнитьМаркиНаСервере(АдресВХранилище, ДополнительныеПараметры, Номенклатура, Характеристика)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", ДополнительныеПараметры.ТекущийКлючСвязи);

	МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);

	Для Каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
		Объект.АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
	КонецЦикла;
			
	КоличествоУпаковок = 0;
	
	ТаблицаМарок = ПолучитьИзВременногоХранилища(АдресВХранилище);
	Для Каждого СтрокаМарки Из ТаблицаМарок Цикл
		ДанныеШтрихкодаУпаковки = ПолучитьДанныеШтрихкодаУпаковки(Объект.Организация, 
																	Объект.Магазин, 
																	СтрокаМарки.КодАкцизнойМарки,
																	ДополнительныеПараметры.ТекущийКлючСвязи,
																	Номенклатура,
																	Характеристика); 
		СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаАкцизнаяМарка, ДанныеШтрихкодаУпаковки);
		
		КоличествоУпаковок = КоличествоУпаковок + 1;
	КонецЦикла;
	
	Возврат КоличествоУпаковок;
	
КонецФункции

&НаКлиенте
Процедура КассаККМПриИзмененииКлиент()
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
	КассаККМПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура КассаККМПриИзмененииСервер()
	
	ТипОборудованияКассыККМ = Объект.КассаККМ.ТипОборудования;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияСервер()
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", УдаляемыйКлючСвязи);
	
	ЕстьУдаляемыеСтроки = УдаляемыйКлючСвязи > 0;
	
	Если ПродажаПоЗаказу Тогда
		Если ЕстьУдаляемыеСтроки Тогда
			
			
			
			СтрокиСкидкиНаценки = Объект.СкидкиНаценки.НайтиСтроки(СтруктураПоиска);
			
			Для каждого СтрокаСкидкиНаценки Из СтрокиСкидкиНаценки Цикл
				
				Объект.СкидкиНаценки.Удалить(СтрокаСкидкиНаценки);
				
			КонецЦикла;               
			
			УдаляемыйКлючСвязи = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	
	УдалитьНесвязанныеСерийныеНомера();
	
КонецПроцедуры


&НаСервере
Процедура УстановитьВидимостьИДоступностьЗаказаПокупателя()
	
	Если НЕ ПродажаПоЗаказу Тогда
		
		Элементы.ОткрытьЗаказПокупателя.Видимость   = Ложь;
		Элементы.ТоварыГруппаЗаказКлиента.Видимость = Ложь;
		Элементы.ТоварыЗаказПокупателя.Видимость    = Ложь;
		Элементы.ТоварыКодСтроки.Видимость          = Ложь;
		Элементы.ТоварыРезервировать.Видимость      = Ложь;
		
	Иначе
		
		Элементы.ОткрытьЗаказПокупателя.Заголовок = Строка(Объект.ЗаказПокупателя);
		Элементы.ТоварыРассчитатьСкидкиНаценки.Доступность       = Ложь;
		Элементы.ТоварыНазначитьАвтоматическиеСкидки.Доступность = Ложь;
		Элементы.ТоварыНазначитьРучнуюСкидку.Доступность         = Ложь;
		Элементы.ТоварыОтменитьРучныеСкидки.Доступность          = Ложь;
		
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЗаполнитьПоЗаказу();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамЗаказа()
	
	РозничныеПродажиСервер.ЗаполнитьПоОстаткамЗаказа(Объект, Объект.ЗаказПокупателя);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары);
	УстановитьДоступностьЦенаВключаетНДС();
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	НастроитьОтображениеРеквизитовСчетаФактуры(
	ЭтаФорма,
	ПродажиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация));
	
	Если ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
		СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект);
	КонецЕсли;
	Если ИспользоватьБонусныеПрограммыЛояльности Тогда
		БонусныеБаллыСервер.ОбновитьОтображениеБонусов(Объект);
	КонецЕсли;
	
	СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер();
	ЗаполнитьСистемуНалогооблажения(Объект.Дата, Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступностьЗаполнитьПоЗаказу()
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПокупателей")
	 ИЛИ НЕ ПродажаПоЗаказу Тогда
		Элементы.ТоварыЗаполнитьПоЗаказу.Видимость = Ложь;
	ИначеЕсли Объект.Проведен Тогда
		Элементы.ТоварыЗаполнитьПоЗаказу.Доступность = Ложь;
	Иначе
		Элементы.ТоварыЗаполнитьПоЗаказу.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗаполнениеПоЗаказу()
	
	Объект.Товары.Очистить();
	
	Объект.СкидкиНаценки.Очистить();
	Объект.БонусныеБаллыКНачислению.Очистить();
	Объект.СерийныеНомера.Очистить();
	Объект.Серии.Очистить();
	
	ЗаполнитьПоОстаткамЗаказа();
	
	ОбновитьИтоговыеПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОснованииЧекЕГАИСПодтверждениеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьЧекЕГАИСПослеЗаписиРеализации();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЧекЕГАИСПослеЗаписиРеализации()
	
	Если НЕ ПроверитьВозможностьВводаНаОсновании(Объект.Ссылка) Тогда
		ВызватьИсключение НСтр("ru='На основании документа существуют созданные чеки ЕГАИС'");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ЧекЕГАИС.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВозможностьВводаНаОсновании(ДокументОснование)
	
	ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДокументОснование);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекЕГАИС КАК ЧекЕГАИС
	|ГДЕ
	|	ЧекЕГАИС.ДокументОснование = &ДокументОснование
	|	И НЕ ЧекЕГАИС.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьПереданныеЧекиЕГАИС(ДокументОснование)
	
	Возврат ИнтеграцияЕГАИСРТ.ЕстьПереданныеЧекиЕГАИС(ДокументОснование);
	
КонецФункции

&НаСервере
Процедура СформироватьТекстДокументаЕГАИС()
	
	ИнтеграцияЕГАИСРТ.СформироватьТекстДокументаЕГАИС(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеШтрихкодаУпаковки(Организация, Магазин, Штрихкод, КлючСвязи, Номенклатура, Характеристика)
	
	Возврат ИнтеграцияЕГАИСРТ.СформироватьДанныеПоАкцизнымМаркам(Организация, Магазин, Штрихкод, КлючСвязи, Номенклатура, Характеристика);
		
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьПробитЧек(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваров.ПробитЧек КАК ПробитЧек
	|ИЗ
	|	Документ.РеализацияТоваров КАК РеализацияТоваров
	|ГДЕ
	|	РеализацияТоваров.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	
	Возврат РезультатЗапроса.ПробитЧек;	
	
КонецФункции

#КонецОбласти

#Область ГИСМ

&НаСервере
Процедура СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукцииСервер()
	
	ИнтеграцияГИСМ_РТ.СформироватьТекстУведомлениеОбОтгрузкеМаркированнойПродукции(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстУведомленияОбОтгрузкеГИСМОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияГИСМКлиентРТ.ТекстУведомленияОбОтгрузкеГИСМОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СПАРКРиски

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()

	ОбновитьОтображениеИндексыСПАРК();

КонецПроцедуры

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()

	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Однострочный");
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ЭтотОбъект.ИндексыСПАРКРиски,
		Неопределено,
		Объект.Контрагент, // Искать по ссылке
		ЭтотОбъект,
		ПараметрыОтображения,
		Истина);

КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
		СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу"   , ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", 
									ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВШапке(Объект));
		СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента");
		
		СтруктураМарки = Новый Структура;
		СтруктураМарки.Вставить("Дата", Объект.Дата);
		
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураМарки);
		СтруктураДействий.Вставить("ОчиститьДанныеПоЗаказу");
		
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПроставитьПродавца", Объект.Продавец);
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьКэшированныеЗначенияДляУчетаСерий(ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий, Ложь);
		ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(ТекущаяСтрока, Объект.ЦенаВключаетНДС);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);

		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
			ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьКэшированныеЗначенияДляУчетаСерий(ТекущаяСтрока,
			КэшированныеЗначения,ПараметрыУказанияСерий,Ложь);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатовВСтроке(ТекущаяСтрока);
		
		Если ПропуститьАвтоматическийРасчетСкидок Тогда
			ПропуститьАвтоматическийРасчетСкидок = Ложь;
		КонецЕсли;
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
	КонецЦикла;
	
	КопированиеСтрокСервер.ОчиститьБуферОбмена();
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТабличнойЧасти)
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки, Объект[ИмяТабличнойЧасти]);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти
