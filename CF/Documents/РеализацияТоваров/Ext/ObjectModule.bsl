#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьДокумент(СтандартнаяОбработка, ДанныеЗаполнения);
	ОбщегоНазначенияРТ.ПроверитьИспользованиеОрганизации(,,Организация);
	УчетНДС.СкорректироватьНДСВТЧДокумента(ЭтотОбъект, Товары);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// &ЗамерПроизводительности
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.РеализацияТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПродажиСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	ПродажиСервер.ОтразитьПродажиПоДисконтнымКартам(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	
	Если ДополнительныеСвойства.ИспользуетсяКомиссионнаяТорговля Тогда
		ЗапасыСервер.ОтразитьТоварыКОформлениюОтчетовКомитенту(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияСерийныхНомеров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	ПродажиСервер.ОтразитьЗаказыПокупателей(ДополнительныеСвойства, Движения, Отказ);
	БонусныеБаллыСервер.ОтразитьБонусныеБаллы(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	РегистрыНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля(ДополнительныеСвойства);

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	ДополнительныеСвойства.Вставить("Отказ", Отказ);
	
	Если НЕ Отказ Тогда
		РезультатОбработкиНакоплений = СкидкиНаценкиВызовСервера.РезультатОбработкиНакопленийВДисконтномСервере(Ссылка);
		Если РезультатОбработкиНакоплений.Свойство("СообщениеПользователю") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатОбработкиНакоплений.СообщениеПользователю);
		КонецЕсли;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("РеализацияТоваровПроведение",ВремяНачалаЗамера,Товары.Количество(), "Вес по табличной части ""Товары""");
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;

	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,Документы.РеализацияТоваров.ПараметрыУказанияСерий(ЭтотОбъект),Отказ);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);

	МаркетинговыеАкцииСервер.ПроверитьЦеныСертификатов(
		ЭтотОбъект,
		"Товары",
		Отказ
	);
	
	МаркетинговыеАкцииСервер.ПроверитьЗаполнениеТабличнойЧастиСерийныеНомера(
		ЭтотОбъект,
		"Товары",
		"СерийныеНомера",
		Отказ
	);
	
	МаркетинговыеАкцииСервер.ПроверитьДвиженияСерийныхНомеров(
		ЭтотОбъект,
		"Товары",
		"СерийныеНомера",
		Отказ
	);
	
	МаркетинговыеАкцииСервер.ПроверитьОкончаниеАбсолютныхСроковДействияСертификатов(
		ЭтотОбъект,
		"Товары",
		Отказ,
	);
	
	Если ЭтотОбъект.АкцизныеМарки.Количество() > 0 Тогда 
		СтруктураДляПроверки = ПродажиСервер.СтруктураДляПроверкиАкцизныхМарок();
		СтруктураДляПроверки.Объект 			= ЭтотОбъект;
		СтруктураДляПроверки.ИмяТаблицыТоваров 	= "АкцизныеМарки";
		СтруктураДляПроверки.Отказ 				= Отказ;
		СтруктураДляПроверки.ОрганизацияЕГАИС 	= Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
													Организация, Магазин);
		
		ПродажиСервер.ПроверитьАкцизныеМаркиПередЗаписьюЧека(СтруктураДляПроверки);
		Если СтруктураДляПроверки.Отказ Тогда 
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(Организация, Магазин, Дата) Тогда
		ДанныеЕГАИСДостаточны = Истина;
		ПродажиСервер.ПодготовкаДанныхДляПередачиДанныеВЕГАИС(ЭтотОбъект, ДанныеЕГАИСДостаточны);
		Если НЕ ДанныеЕГАИСДостаточны Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ИспользуетсяКомиссионнаяТорговля = ДополнительныеСвойства.ИспользуетсяКомиссионнаяТорговля;
	ИспользуетсяУчетИмпортныхТоваров = ДополнительныеСвойства.ИспользуетсяУчетИмпортныхТоваров;
	
	СформироватьСписокРегистровДляКонтроля(ДополнительныеСвойства);

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	Если НЕ Отказ Тогда
		РезультатОбработкиНакоплений = СкидкиНаценкиВызовСервера.РезультатОбработкиНакопленийВДисконтномСервере(Ссылка);
		Если РезультатОбработкиНакоплений.Свойство("СообщениеПользователю") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатОбработкиНакоплений.СообщениеПользователю);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.СерийныеНомера.ОчиститьВДокументеНеиспользуемыеСерийныеНомера(Товары, СерийныеНомера);
	ОбщегоНазначенияРТ.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект,Документы.РеализацияТоваров.ПараметрыУказанияСерий(ЭтотОбъект));
	
	Документы.СчетФактураВыданный.ПроверитьРеквизитыСчетФактуры(Ссылка, ПометкаУдаления, Организация);
	
	ПроведениеСервер.УстановитьРежимПроведения(Проведен, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбщегоНазначенияРТ.УстановитьНовоеЗначениеРеквизита(
		ЭтотОбъект,
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС),
		"СуммаДокумента");
		
	ДополнительныеСвойства.Вставить("Отказ", Отказ);
	
	// ИнтеграцияГИСМ
	ЕстьМаркируемаяПродукцияГИСМ = ИнтеграцияГИСМ_РТ.ЕстьМаркируемаяПродукцияГИСМ(Товары);
	// Конец ИнтеграцияГИСМ
	
	// ЕГАИС
	Если ИнтеграцияЕГАИСРТ.ЕстьПереданныеЧекиЕГАИС(Ссылка) Тогда
		СообщениеПользователю = НСтр("ru = 'Документ передан в ЕГАИС, изменения невозможны'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю,,,, Отказ);
	КонецЕсли;
	// Конец ЕГАИС
	
КонецПроцедуры

// Процедура - обработчик события "ПриКопировании".
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
	СкидкиРассчитаны = Ложь;
	ЕстьМаркируемаяПродукцияГИСМ = Ложь;
	СкидкиНаценкиСервер.ОтменитьСкидки(ЭтотОбъект, "Товары");
	Серии.Очистить();
	СерийныеНомера.Очистить();
	БонусныеБаллыКНачислению.Очистить();
	
	
	КоличествоТоваров = Товары.Количество();
	Если НЕ КоличествоТоваров = 0 Тогда
		Товары.ЗагрузитьКолонку(Новый Массив(Товары.Количество()), "КлючСвязиСерийныхНомеров");
	КонецЕсли;
	
	ПробитЧек = Ложь;
	НомерЧекаККМ = 0;
	
	АкцизныеМарки.Очистить();
	
	УчетНДС.СкорректироватьНДСВТЧДокумента(ЭтотОбъект, Товары);
	
	ИнициализироватьДокумент(Истина);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка ИЛИ ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяСчетФактура = Истина;
	
	Документы.СчетФактураВыданный.АктуализироватьСчетФактуру(ЭтотОбъект.Ссылка, ЭтотОбъект.Проведен, ТребуетсяСчетФактура);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Инициализирует документ
//
Процедура ИнициализироватьДокумент(СтандартнаяОбработка, ДанныеЗаполнения = Неопределено)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
		Если ДанныеЗаполнения.Свойство("Магазин")
			И НЕ ЗначениеЗаполнено(Магазин) Тогда
			Склад  = ЗначениеНастроекПовтИсп.ПолучитьСкладПродажиПоУмолчанию(ДанныеЗаполнения.Магазин,,Склад, Ответственный);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Организация")
			И НЕ ЗначениеЗаполнено(Организация) Тогда
			БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ДанныеЗаполнения.Организация,,БанковскийСчетОрганизации);
		КонецЕсли;
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		
		Магазин = ДанныеЗаполнения.КассаККМ.Магазин;
		Организация = ДанныеЗаполнения.Организация;
		Контрагент = ДанныеЗаполнения.Контрагент;
		ЗаказПокупателя = ДанныеЗаполнения.ЗаказПокупателя;
		ПриходныйКассовыйОрдер = ДанныеЗаполнения.Ссылка;
		Склад = Магазин.СкладПродажи;
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		ОбщегоНазначенияРТ.ПроверитьВозможностьВводаНаОсновании(ДанныеЗаполнения);
		
		Магазин 		= ДанныеЗаполнения.Магазин;
		Организация 	= ДанныеЗаполнения.Организация;
		Контрагент 		= ДанныеЗаполнения.Контрагент;
		ЗаказПокупателя = ДанныеЗаполнения;
		Склад 			= Магазин.СкладПродажи;
		УчитыватьНДС 	= ДанныеЗаполнения.УчитыватьНДС;
		ЦенаВключаетНДС = ДанныеЗаполнения.ЦенаВключаетНДС;

	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда

		ИнтеграцияВЕТИСРТ.ЗаполнитьРеализациюТоваровНаОснованииИсходящейТранспортнойОперацииВЕТИС(ЭтотОбъект, ДанныеЗаполнения,, СтандартнаяОбработка);

	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СтатусЗаказа = ДанныеЗаполнения.Статус;
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			Если ДанныеЗаполнения.Свойство("Статус") Тогда
				СтатусЗаказа = ДанныеЗаполнения.Статус;
			Иначе
				СтатусЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПокупателя, "Статус");
			КонецЕсли;
		Иначе
			СтатусЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПокупателя, "Статус");
		КонецЕсли;
		Если СтатусЗаказа = Перечисления.СтатусыЗаказовПокупателей.НеСогласован Тогда
			ТекстОшибки = НСтр("ru='Заказ не согласован.
			|Заполнение документа не выполнено.'");
			
			ВызватьИсключение ТекстОшибки;
		ИначеЕсли СтатусЗаказа = Перечисления.СтатусыЗаказовПокупателей.Закрыт Тогда
			ТекстОшибки = НСтр("ru='Заказ закрыт.
			|Заполнение документа не выполнено.'");
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		РозничныеПродажиСервер.ЗаполнитьПоОстаткамЗаказа(ЭтотОбъект, ЗаказПокупателя);
		
	КонецЕсли;
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Магазин       = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Магазин);
	Склад         = ЗначениеНастроекПовтИсп.ПолучитьСкладПродажиПоУмолчанию(Магазин,,Склад, Ответственный);
	Если ЗначениеЗаполнено(Склад) Тогда
		Организация = Склад.Организация;
	КонецЕсли;
	Организация   = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация, Ответственный);
	Контрагент    = ЗначениеНастроекПовтИсп.ПолучитьПокупателяПоУмолчанию(Ответственный, Контрагент);
	БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация,,БанковскийСчетОрганизации);
	Продавец      = ЗначениеНастроекПовтИсп.ПолучитьПродавцаПоУмолчанию(Ответственный, Продавец);
	
	ВидНалога = ПодключаемоеОборудованиеРТ.ВидНалогаПоОрганизацииИСкладу(ТекущаяДатаСеанса(), Организация, Склад);
	
КонецПроцедуры

// Процедура формирует массив имен регистров для контроля проведения.
//
Процедура СформироватьСписокРегистровДляКонтроля(ДополнительныеСвойства)

	Массив = Новый Массив;
	
	ИспользуетсяКомиссионнаяТорговля = ДополнительныеСвойства.ИспользуетсяКомиссионнаяТорговля;
	ИспользуетсяУчетИмпортныхТоваров = ДополнительныеСвойства.ИспользуетсяУчетИмпортныхТоваров;
	
	// При проведении выполняется контроль превышения остатков на складах.
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Массив.Добавить(Движения.ТоварыНаСкладах);
		Массив.Добавить(Движения.ДвиженияСерийныхНомеров);
		
	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	ДополнительныеСвойства.ДляПроведения.Вставить("ПопыткиПродажПревышающихОстаток");

КонецПроцедуры

#КонецОбласти

#КонецЕсли
