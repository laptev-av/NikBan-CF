#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьОтборДинамическихСписков("Список,ДенежныеСредстваКПоступлению", "Организация,Касса");
	
	ЗаполнитьСписокХозяйственныхОпераций();
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Организация = Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
	
	Элементы.ОтборКасса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Организация);
	
	ОбщегоНазначенияРТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список", "Дата");
	
	Элементы.ГруппаСоздать.Видимость = ПравоДоступа("Добавление", Метаданные.Документы.ПриходныйКассовыйОрдер);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанПриходныйКассовыйОрдер" Тогда
		ОбновитьДинамическиеСписки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Касса = Настройки.Получить("Касса");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Организация   = Настройки.Получить("Организация");
	Иначе
		Организация = Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Касса = Справочники.Кассы.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ХозяйственнаяОперация = Настройки.Получить("ХозяйственнаяОперация");
	ХозяйственнаяОперацияКПоступлению = Настройки.Получить("ХозяйственнаяОперацияКПоступлению");
	
	УстановитьОтборДинамическихСписков("Список", "ХозяйственнаяОперация");
	УстановитьОтборДинамическихСписков("Список, ДенежныеСредстваКПоступлению", "Организация, Касса");
	УстановитьОтборДинамическихСписков("ДенежныеСредстваКПоступлению", "ХозяйственнаяОперацияКПоступлению");
	Элементы.ОтборКасса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                 Истина, "Документ.ПриходныйКассовыйОрдер.Форма.ФормаДокумента.Открытие");
        
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Документ.ПриходныйКассовыйОрдер.Форма.ФормаСписка.Открытие");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаПКОВыемкаДСИзКассыККМПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьДинамическиеСписки();
	
	Если ТекущаяСтраница = Элементы.ГруппаСписокПКО Тогда
		Элементы.ГруппаХозяйственнаяОперация.ТекущаяСтраница = Элементы.ГруппаОтборОперация;
	Иначе
		Элементы.ГруппаХозяйственнаяОперация.ТекущаяСтраница = Элементы.ГруппаОтборОперацияКПоступлению;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков("Список,ДенежныеСредстваКПоступлению", "Организация, Касса");
	
	Элементы.ОтборКасса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКассаПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков("Список,ДенежныеСредстваКПоступлению", "Касса");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОперацияПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков("Список", "ХозяйственнаяОперация");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОперацияКПоступлениюПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписков("ДенежныеСредстваКПоступлению", "ХозяйственнаяОперацияКПоступлению");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДенежныеСредстваКПоступлению

&НаКлиенте
Процедура ДенежныеСредстваКПоступлениюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(,Элементы.ДенежныеСредстваКПоступлению.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Копирование Тогда
	
		НовыйДокументПриходныйКассовыйОрдер(0);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НовыйДокументПКОВознаграждениеКомитента(Команда)
	НовыйДокументПриходныйКассовыйОрдер(8);
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументПКОПоступлениеДенежныхСредствИзКассыККМ(Команда)
	
	НовыйДокументПриходныйКассовыйОрдер(1);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументПКОВозвратДенежныхСредствОтПоставщика(Команда)
	
	НовыйДокументПриходныйКассовыйОрдер(2);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументПКОПоступлениеДенежныхСредствИзБанка(Команда)
	
	НовыйДокументПриходныйКассовыйОрдер(3);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументПКОПоступлениеДенежныхСредствИзДругойКассы(Команда)
	
	НовыйДокументПриходныйКассовыйОрдер(4);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументПКОПоступлениеДенежныхСредствИзДругойОрганизации(Команда)
	
	НовыйДокументПриходныйКассовыйОрдер(5);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументПКОВнутренняяПередачаДС(Команда)
	
	НовыйДокументПриходныйКассовыйОрдер(7);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйДокументПКОПрочиеДоходы(Команда)
	
	НовыйДокументПриходныйКассовыйОрдер(6);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаПринятьОплату(Команда)
	
	Если Элементы.ДенежныеСредстваКПоступлению.ТекущиеДанные = Неопределено Тогда
		Возврат;
	Иначе
		СтруктураОснования = Новый Структура;
		СтруктураОснования.Вставить("ДокументОснования", Элементы.ДенежныеСредстваКПоступлению.ТекущиеДанные.Ссылка);
		СтруктураОснования.Вставить("Касса", Касса);
		
		НовыйДокументПриходныйКассовыйОрдер(1, СтруктураОснования);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенныеДенежныеСредстваКПоступлению(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.ДенежныеСредстваКПоступлению, ДенежныеСредстваКПоступлению);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура НовыйДокументПриходныйКассовыйОрдер(ХозяйственнаяОперацияИндекс, Основание = Неопределено)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
								Истина, "Документ.ПриходныйКассовыйОрдер.Форма.ФормаДокумента.СозданиеНового");

	СтруктураПараметры = Новый Структура;
	
	Если Основание = Неопределено Тогда
		ХозОперация = СписокХозяйственныхОпераций[ХозяйственнаяОперацияИндекс].Значение;
		СтруктураПараметры.Вставить("Основание", Новый Структура("ХозяйственнаяОперация, Организация, Касса", ХозОперация, Организация, Касса));
	Иначе
		СтруктураПараметры.Вставить("Основание", Основание);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ХозяйственнаяОперация) И НЕ ХозяйственнаяОперация = ХозОперация Тогда
		ХозяйственнаяОперация = ХозОперация;
		УстановитьОтборДинамическихСписков("Список", "ХозяйственнаяОперация");
	КонецЕсли;
	
	ОткрытьФорму("Документ.ПриходныйКассовыйОрдер.ФормаОбъекта", СтруктураПараметры, Элементы.Список);
	
КонецПроцедуры

// Функция получает значение отбора по имени реквизита для динамического списка.
//
&НаСервере
Функция ЗначениеОтбораДляДинамическогоСписка(ИмяРеквизита, ПараметрВидСравнения, Список, ИмяСписка)
	Перем ЗначениеОтбора;
	
	Если ИмяРеквизита = "Касса" Тогда
		ЗначениеОтбора = Новый СписокЗначений();
		ЗначениеОтбора.Добавить(ЭтаФорма[ИмяРеквизита]);
		ЗначениеОтбора.Добавить(Справочники.Кассы.ПустаяСсылка());
		ПараметрВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		Если ИмяСписка = "ДенежныеСредстваКПоступлению" Тогда
			ОтборыСписковКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Магазин", ?(ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизита]), ЭтаФорма[ИмяРеквизита].Магазин, Неопределено), Истина);
		КонецЕсли;
	Иначе
		ЗначениеОтбора = ЭтаФорма[ИмяРеквизита];
	КонецЕсли;
	Возврат ЗначениеОтбора;
	
КонецФункции

// Процедура обновляет динамические списки формы.
// - Список
// - ДенежныеСредстваКПоступлению
&НаКлиенте
Процедура ОбновитьДинамическиеСписки()
	
	Элементы.Список.Обновить();
	Элементы.ДенежныеСредстваКПоступлению.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокХозяйственныхОпераций()
	
	СписокХозяйственныхОпераций.Очистить();
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента); // 0
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ); // 1
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика); // 2
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка); // 3
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы); // 4
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);// 5
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПрочиеДоходы); // 6
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств); // 7
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВознаграждениеОтКомитента); // 8

КонецПроцедуры

// Процедура устанавливает отбор динамических списков формы.
// Параметры:
//  ИменаДинамическихСписков - Строка - Имена динамических списков на которые устанавливается отбор. В случае, более
//                                      одного имени списка, они разделяются запятыми.
//  ИменаРеквизитов - Строка - Имена реквизитов динамических списков. В случае, более одного имени списка, они
//                             разделяются запятыми.
&НаСервере
Процедура УстановитьОтборДинамическихСписков(ИменаДинамическихСписков, ИменаРеквизитов)
	Перем ПараметрВидСравнения, ЗначениеОтбора;
	
	СтруктураДинамическихСписков = Новый Структура(ИменаДинамическихСписков);
	СтруктураИменРеквизитов = Новый Структура(ИменаРеквизитов);
	Для Каждого НаименованиеДинамическогоСписка Из СтруктураДинамическихСписков Цикл
		ДинамическийСписок = ЭтаФорма[НаименованиеДинамическогоСписка.Ключ];
		Для Каждого НаименованиеРеквизита Из СтруктураИменРеквизитов Цикл
			ИмяРеквизита = НаименованиеРеквизита.Ключ;
			ЗначениеОтбора = ЗначениеОтбораДляДинамическогоСписка(ИмяРеквизита, ПараметрВидСравнения, ДинамическийСписок, НаименованиеДинамическогоСписка.Ключ);
			
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
				ДинамическийСписок,
				ИмяРеквизита,
				ЗначениеОтбора,
				ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизита]),
				ПараметрВидСравнения);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти