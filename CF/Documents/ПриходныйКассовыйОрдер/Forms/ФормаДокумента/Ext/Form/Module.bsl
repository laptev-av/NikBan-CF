
// Используется механизмом обработки изменения реквизитов ТЧ.
&НаКлиенте
Перем КэшированныеЗначения;

#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОповещениеВопросПроведениеПередПечатьюЧека(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Попытка
			Если ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
				НапечататьЧекКлиент();
			КонецЕсли;
		Исключение
			ПоказатьПредупреждение(,НСтр("ru = 'Не удалось выполнить проведение документа'"));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЭтоФискальнаяОперация = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
							Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы
							Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВознаграждениеОтКомитента;
						
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование();
	
	ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,
		КартинкаСостоянияДокумента,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		РазрешеноПроведение);
	
	Магазин = Объект.Касса.Магазин;
	НастроитьФормуПоДополнительнымПравам();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(Объект.Касса) Тогда
			КассаПриИзмененииСервер();
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ
				  И ЗначениеЗаполнено(Объект.ДокументОснование) 
				  И ЗначениеЗаполнено(Объект.ДокументОснование.Магазин) Тогда
				Магазин = Объект.ДокументОснование.Магазин;
		КонецЕсли;
		
		УправлениеЭлементамиФормы();
		
		ОбщегоНазначенияРТ.ЗаполнитьШапкуДокумента(Объект,
			КартинкаСостоянияДокумента,
			Элементы.КартинкаСостоянияДокумента.Подсказка,
			РазрешеноПроведение);
			
		ЗаполнениеПризнаковСпособовРасчета();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОтчетОРозничныхПродажах) Тогда
		
		ТекстДекорации = НСтр("ru = '%1'");
		РеквизитыОтчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ОтчетОРозничныхПродажах, "Номер, Дата");
		
		ТекстДекорации = СтрЗаменить(ТекстДекорации, "%1", 
			ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыОтчета, НСтр("ru = 'Отчет о розничных продажах'"), "ДФ=dd.MM.yy"));
		
		Элементы.ДекорацияОтчетОРозничныхПродажах.Заголовок = ТекстДекорации;
		
	Иначе
		
		Элементы.ДекорацияОтчетОРозничныхПродажах.Видимость = Ложь;
		
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
	Элементы.РасшифровкаПлатежаПризнакСпособаРасчета.Видимость = ЭтоФискальнаяОперация;
	Элементы.ЗаказПокупателя.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
	
	ДоступностьПечатиЧека = Объект.Проведен И НЕ ТолькоПросмотр И Объект.ПробиватьЧекиПоКассеККМ;
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"НапечататьЧек",
																"Доступность", 
																ДоступностьПечатиЧека);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНеоплаченныхДокументов.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНеоплаченныхДокументов(ВыбранноеЗначение);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ВходитВКассовуюКнигу = ФинансыСервер.ОпределитьВхождениеВКассовуюКнигу(Объект.Ссылка);
	
	УправлениеЭлементамиФормы();
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(
		Объект,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение);
		
	ДоступностьПечатиЧека = Объект.Проведен И НЕ ТолькоПросмотр И Объект.ПробиватьЧекиПоКассеККМ;
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"НапечататьЧек",
																"Доступность", 
																ДоступностьПечатиЧека);
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// &ЗамерПроизводительности	
    Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
	                                            "Документ.ПриходныйКассовыйОрдер.ФормаДокумента.Запись",
                                                          Ложь);
	
	ПараметрыЗаписи.Вставить("Замер", Замер);	
	
	Если Модифицированность Тогда
		ФинансыКлиент.ПересчетСуммыДокументаПоРасшифровкеПлатежа(Объект, ЭтаФорма, Отказ, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.Ответственный.Пустая() Тогда
		ТекущийОбъект.Ответственный = Пользователи.ТекущийПользователь()
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьДоступностьЭлементовПоСтатусуСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияРТКлиентСервер.ОбновитьСостояниеДокумента(
		Объект,
		Элементы.КартинкаСостоянияДокумента.Подсказка,
		КартинкаСостоянияДокумента,
		РазрешеноПроведение);
	
	УстановитьДоступностьЭлементовИФормы();
	
	Оповестить("ЗаписанПриходныйКассовыйОрдер");
	
	ДоступностьПечатиЧека = Объект.Проведен И НЕ ТолькоПросмотр И Объект.ПробиватьЧекиПоКассеККМ;
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"НапечататьЧек",
																"Доступность", 
																ДоступностьПечатиЧека);
																
    // &ЗамерПроизводительности						
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыЗаписи.Замер);
																
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
		Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента");
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	Объект.РасшифровкаПлатежа.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Касса) Тогда
		КассаПриИзмененииСервер();
		
		Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
			ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
		КонецЕсли;
	Иначе
		Магазин = ПредопределенноеЗначение("Справочник.Магазины.ПустаяСсылка");
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ") Тогда
			Объект.ДокументОснование = ПредопределенноеЗначение("Документ.ВыемкаДенежныхСредствИзКассыККМ.ПустаяСсылка");
		ИначеЕсли Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка") Тогда
			Объект.БанковскийСчет = ПредопределенноеЗначение("Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка");
		КонецЕсли;
		
		МагазинПриИзмененииКлиент();
		УстановитьДоступностьБанковскогоСчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	СуммаДокументаПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПрочийДоходПриИзменении(Элемент)
	
	КонтрагентПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Функция ДокументОснованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ЗаполнитьДокументНаОснованииДокументаОснование();
	Иначе
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ") Тогда
			Объект.КассаККМ = ПредопределенноеЗначение("Справочник.КассыККМ.ПустаяСсылка");
		КонецЕсли;
		
		УстановитьСвязьПараметровВыбораДокументаОснованияПоХозОперации();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДекорацияОтчетОРозничныхПродажахНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ОтчетОРозничныхПродажах) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Объект.ОтчетОРозничныхПродажах);
		ПараметрыФормы.Вставить("ТекущийЭлемент", "ПрочаяВыручка");
		
		ПараметрыТекущейСтроки = Новый Структура;
		ПараметрыТекущейСтроки.Вставить("Контрагент", Объект.Контрагент);
		ПараметрыТекущейСтроки.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
		ПараметрыТекущейСтроки.Вставить("ВидОплаты", ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные"));
		
		ПараметрыФормы.Вставить("ТекущаяСтрока", ПараметрыТекущейСтроки);
		ПараметрыФормы.Вставить("ТекущийРеквизитОбъекта", "ПрочаяВыручка");
		
		ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		СуммаОстаток = Объект.СуммаДокумента - Объект.РасшифровкаПлатежа.Итог("Сумма");
		Элемент.ТекущиеДанные.Сумма = СуммаОстаток;
		Элемент.ТекущиеДанные.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект.РасшифровкаПлатежа, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект.РасшифровкаПлатежа, Истина);
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НЕ СтрокаТаблицы = Неопределено И 
		НЕ СтрокаТаблицы.СпособРасчетаИзмененВРучную Тогда
		ЗаполнениеПризнакаСпособаРасчета(СтрокаТаблицы.ДокументРасчетовСКонтрагентом, 
										 СтрокаТаблицы.Сумма, 
										 СтрокаТаблицы.ПризнакСпособаРасчета,
										 Объект.ЗаказПокупателя)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтатьяДвиженияДенежныхСредств = СтрокаТаблицы.СтатьяДвиженияДенежныхСредств;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументРасчетовСКонтрагентом) Тогда
			
			РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзмененииСервер(СтрокаТаблицы.Сумма, СтрокаТаблицы.ДокументРасчетовСКонтрагентом);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПризнакСпособаРасчетаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	СтрокаТаблицы.СпособРасчетаИзмененВРучную = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НапечататьЧек(Команда)
	
	Если Объект.ПробитЧек Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросПроведениеПередПечатьюЧека", ЭтотОбъект);
	
	Если ФинансыКлиент.ПроверитьВозможностьПечатиЧека(ОбработчикОповещения, ЭтотОбъект) Тогда
		НапечататьЧекКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВТомЧислеНДС(Команда)
	
	ЗаполнитьВТомЧислеНДССервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьНеоплаченные(Команда)
	
Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Касса)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		АдресХранилищаРасшифровкаПлатежа = ПоместитьВХранилищеРасшифровкуПлатежа();
	Иначе
		АдресХранилищаРасшифровкаПлатежа = "";
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин", 		ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Касса, "Магазин"));
	ПараметрыФормы.Вставить("Контрагент", 	Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация", 	Объект.Организация);
	ПараметрыФормы.Вставить("ФормаОплаты", 	ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная"));
	ПараметрыФормы.Вставить("Операция", 	Объект.ХозяйственнаяОперация);
	ПараметрыФормы.Вставить("АдресХранилищаРасшифровкаПлатежа", АдресХранилищаРасшифровкаПлатежа);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);

	ОткрытьФорму("Обработка.ПодборНеоплаченныхДокументов.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	УстановитьДоступностьЭлементовПоСтатусуСервер(Истина);
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВТомЧислеНДССервер()
	
	МассивДокументов = Объект.РасшифровкаПлатежа.Выгрузить(,"ДокументРасчетовСКонтрагентом").ВыгрузитьКолонку("ДокументРасчетовСКонтрагентом");
	МассивДокументов.Добавить(Объект.ДокументОснование);
	Объект.ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(
		Объект.СуммаДокумента,
		МассивДокументов,
		Ложь,
		Документы.ПриходныйКассовыйОрдер.НДССАванса(Объект),
		Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()
	
	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.Дата.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьДату);
	
	ИзменятьУчетДС = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователяСУчетомИзмененныхПрав(ПланыВидовХарактеристик.ПраваПользователей.ИзменятьУчетДенежныхСредствВКассовыхДокументах);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Касса) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Касса"" не заполнено'"), Объект, "Объект.Касса",,Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Контрагент"" не заполнено'"), Объект, "Объект.Контрагент",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНеоплаченныхДокументов(ВыбранноеЗначение)
	
	ТаблицаДокументов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресКорзиныВХранилище);
	Объект.РасшифровкаПлатежа.Очистить();
	
	Для каждого Строка Из ТаблицаДокументов Цикл
		
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтатьяДвиженияДенежныхСредств) Тогда
			НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(Объект.РасшифровкаПлатежа, Истина);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Управление свойствами элементов формы.

&НаСервере
Процедура УстановитьДоступностьКнопкиПечатиЧека()
	
	НапечататьЧекДоступность = Ложь;
	
	Кнопка = Элементы.Найти("НапечататьЧек");
	Если Кнопка <> Неопределено Тогда
		
		ХозОперация = Объект.ХозяйственнаяОперация;
		
		Если ХозОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента 
			Или ХозОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы
			Или ХозОперация = Перечисления.ХозяйственныеОперации.ВознаграждениеОтКомитента Тогда
	
			НапечататьЧекДоступность = Истина;
		КонецЕсли;
		
		Кнопка.Доступность = НапечататьЧекДоступность;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязьПараметровВыбораДокументаОснованияПоХозОперации()
	
	ЭтоОрганизацияИзНастроекПользователя = ?(Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("Структура"), Параметры.Основание.Свойство("ОрганизацияИзНастроекПользователя"), Ложь);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораКассы(Объект, Элементы.Касса, ЭтоОрганизацияИзНастроекПользователя);
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.КассаПолучатель", "Объект.Касса"));
		Элементы.ДокументОснование.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу));
		Элементы.ДокументОснование.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.КассаПолучатель", "Объект.Касса"));
		Элементы.ДокументОснование.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств));
		Элементы.ДокументОснование.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.КассаПолучатель", "Объект.Касса"));
		Элементы.ДокументОснование.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию));
		Элементы.ДокументОснование.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));
		Элементы.ДокументОснование.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		МассивПараметров = Новый Массив();
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", "Объект.Организация"));
		НовыеПараметры = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.ДокументОснование.ПараметрыВыбора = НовыеПараметры;
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование)
			И ЗначениеЗаполнено(Объект.ДокументОснование.Магазин) Тогда
			
			МассивПараметров = Новый Массив();
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Магазин" , "Магазин"           , РежимИзмененияСвязанногоЗначения.Очищать));
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));
			Элементы.Касса.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура ограничивает выбора типа для элементов формы
// РасшифровкаПлатежаДокументРасчетовСКонтрагентом
// ДокументОснование.
&НаСервере
Процедура УстановитьОграничениеТипаПоХозяйственнойОперации()
	
	МассивТиповОграниченийДокументРасчетов = Документы.ПриходныйКассовыйОрдер.ОграничениеТипаДокументаРасчетовПоХозяйственнойОперации(Объект.ХозяйственнаяОперация);
	МассивТиповОграниченийДокументРасходаИзКассы = Документы.ПриходныйКассовыйОрдер.ОграничениеТипаДокументаОснованияРасходаИзКассы(Объект.ХозяйственнаяОперация);
	Если МассивТиповОграниченийДокументРасчетов.Количество() > 0.00 Тогда
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ВыбиратьТип = МассивТиповОграниченийДокументРасчетов.Количество() > 1;
		Элементы.РасшифровкаПлатежаДокументРасчетовСКонтрагентом.ОграничениеТипа = Новый ОписаниеТипов(МассивТиповОграниченийДокументРасчетов);
	КонецЕсли;
	Если МассивТиповОграниченийДокументРасходаИзКассы.Количество() > 0.00 Тогда
		Элементы.ДокументОснование.ВыбиратьТип = МассивТиповОграниченийДокументРасчетов.Количество() > 1;
		Элементы.ДокументОснование.ОграничениеТипа = Новый ОписаниеТипов(МассивТиповОграниченийДокументРасходаИзКассы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвойстваЭлементовФормыПоХозяйственнойОперации()
	
	УстановитьВидимостьЭлементамПоХозяйственнойОперации();
	УстановитьОграничениеТипаПоХозяйственнойОперации();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементамПоХозяйственнойОперации()

	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ПриходныйКассовыйОрдер.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);

	ОбщегоНазначенияРТ.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	Если Элементы.ЗаполнитьВТомЧислеНДС.Видимость <> Элементы.ВТомЧислеНДС.Видимость Тогда
		Элементы.ЗаполнитьВТомЧислеНДС.Видимость = Элементы.ВТомЧислеНДС.Видимость;
	КонецЕсли;
	
КонецПроцедуры

// В процедуре выполняется установка свойств элементов формы.
//
&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	ОбновитьСвойстваЭлементовФормыПоХозяйственнойОперации();
	УстановитьДоступностьКнопкиПечатиЧека();
	УстановитьСвязьПараметровВыбораДокументаОснованияПоХозОперации();
	СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(Объект.ХозяйственнаяОперация);
	
	Элементы.РасшифровкаПлатежаПодобратьНеоплаченные.Видимость = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика;
	УстановитьДоступностьБанковскогоСчета();
	
	УстановитьДоступностьЭлементовИФормы();
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьБанковскогоСчета()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка Тогда
		Элементы.БанковскийСчет.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер(РазрешитьРедактирование = Ложь)
	
	Если НЕ ВходитВКассовуюКнигу Тогда
		Элементы.ФормаИзменить.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.ФормаИзменить.Видимость = Истина;
	КонецЕсли;
	
	ТолькоПросмотрЭлементов = ВходитВКассовуюКнигу И Объект.Проведен;
	
	Элементы.ФормаИзменить.Доступность = ТолькоПросмотрЭлементов;
	
	Если РазрешитьРедактирование Тогда
		ТолькоПросмотрЭлементов = Ложь;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
		
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("БанковскийСчет");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("КонтрагентПрочийДоход");
	МассивЭлементов.Добавить("ДокументОснование");
	МассивЭлементов.Добавить("Касса");
	МассивЭлементов.Добавить("СуммаДокумента");
	
	МассивЭлементов.Добавить("РасшифровкаПлатежа");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", ТолькоПросмотрЭлементов);
	
	МассивЭлементов = Новый Массив;
	
	МассивЭлементов.Добавить("РасшифровкаПлатежаПодобратьНеоплаченные");
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Не ТолькоПросмотрЭлементов);
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИзменить", "Доступность", ТолькоПросмотрЭлементов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовИФормы()
	
	ХозОперация = Объект.ХозяйственнаяОперация;
	ЭтоФискальнаяОперация = ХозОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
						Или ХозОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы
						Или ХозОперация = Перечисления.ХозяйственныеОперации.ВознаграждениеОтКомитента;

	ЭтотОбъект.ТолькоПросмотр = ЭтотОбъект.ТолькоПросмотр 
								ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты 
								ИЛИ Объект.ПробитЧек
								ИЛИ Объект.СменаЗакрыта;
	
	ДоступностьПечатиЧека = Объект.Проведен И НЕ ТолькоПросмотр И Объект.ПробиватьЧекиПоКассеККМ;
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"НапечататьЧек",
																"Доступность", 
																ДоступностьПечатиЧека);
	Элементы.ВидНалога.Доступность = НЕ ЭтотОбъект.ТолькоПросмотр
									 И Объект.ПробиватьЧекиПоКассеККМ;
	
	Элементы.НапечататьЧек.Видимость   = ЭтоФискальнаяОперация;
	Элементы.ВидНалога.Видимость       = ЭтоФискальнаяОперация;
	
	Элементы.КассаККМ.Видимость = Элементы.КассаККМ.Видимость И НЕ ЭтоФискальнаяОперация;
	Элементы.КассаККМДляФискальныхОпераций.Видимость = ЭтоФискальнаяОперация;
	Элементы.НомерЧекаККМ.Видимость = ЭтоФискальнаяОперация;
	
	Элементы.КассаККМДляФискальныхОпераций.Доступность = Объект.ПробиватьЧекиПоКассеККМ;
	
	// Ограничиваем согласно прав пользователя.
	Элементы.КассаККМДляФискальныхОпераций.ТолькоПросмотр = НЕ ИзменятьУчетДС;
	
	Элементы.ДекорацияВнесенВКассовуюКнигу.Видимость = ВходитВКассовуюКнигу;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики изменений реквизитов.

&НаКлиенте
Процедура КонтрагентПриИзмененииКлиент()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) И Не ЗначениеЗаполнено(Объект.ПринятоОт) Тогда
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
		КонтрагентПриИзмененииСервер(СтруктураПараметров);
		Объект.ПринятоОт = СтруктураПараметров.ПринятоОт;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзмененииКлиент()
	
	ФинансыКлиент.ПересчетСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента);
	ЗаполнениеПризнаковСпособовРасчета();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументНаОснованииДокументаОснование()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ Тогда
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			Магазин = Объект.ДокументОснование.КассаККМ.Магазин;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСвязьПараметровВыбораДокументаОснованияПоХозОперации();
КонецПроцедуры

&НаСервере
Процедура КассаПриИзмененииСервер()
	СтруктураРеквизитов = ДенежныеСредстваСервер.ПолучитьРеквизитыКассы(Объект.Касса);
	Объект.Организация = СтруктураРеквизитов.Организация;
	Магазин = Объект.Касса.Магазин;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ Тогда
		Если ЗначениеЗаполнено(Объект.ДокументОснование) 
			И (СтруктураРеквизитов.Организация <> Объект.ДокументОснование.Организация
			ИЛИ СтруктураРеквизитов.Магазин <> Объект.ДокументОснование.Магазин) Тогда
			Объект.ДокументОснование = Документы.ВыемкаДенежныхСредствИзКассыККМ.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка Тогда
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			РеквизитыБанковскогоСчета = Справочники.БанковскиеСчетаОрганизаций.РеквизитыБанковскогоСчетаОрганизации(Объект.БанковскийСчет);
			Если РеквизитыБанковскогоСчета.Организация <> Объект.Организация Тогда
				Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
						Объект.Организация,
						Перечисления.ФормыОплаты.Безналичная);
			КонецЕсли;
		Иначе
			Объект.БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Магазин) Тогда
		Объект.ВидНалога = ПодключаемоеОборудованиеРТ.ВидНалогаПоОрганизацииИСкладу(Объект.Дата,
																						Объект.Организация,
																							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "СкладПродажи"));
	Иначе
		Объект.ВидНалога = Перечисления.ВидыНалогов.ПустаяСсылка();
	КонецЕсли;
	
	МагазинПриИзмененииСервер();
	УстановитьДоступностьБанковскогоСчета();
	
	Объект.ПробиватьЧекиПоКассеККМ = Объект.Касса.ПробиватьЧекиПоКассеККМ;
	Элементы.КассаККМДляФискальныхОпераций.Доступность = Объект.ПробиватьЧекиПоКассеККМ;
	Объект.КассаККМ = Объект.Касса.КассаККМ;
	
	ДоступностьПечатиЧека = Объект.Проведен И НЕ ТолькоПросмотр И Объект.ПробиватьЧекиПоКассеККМ;
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"НапечататьЧек",
																"Доступность", 
																ДоступностьПечатиЧека);
	
	Элементы.ВидНалога.Доступность = НЕ ЭтотОбъект.ТолькоПросмотр
									 И Объект.ПробиватьЧекиПоКассеККМ;
	
	ЗаполнениеПризнаковСпособовРасчета();
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер(СтруктураПараметров)
	
	СтруктураПараметров.Вставить("ПринятоОт", Справочники.Контрагенты.ПолучитьНаименованиеКонтрагента(СтруктураПараметров.Контрагент));
	ЗаполнениеПризнаковСпособовРасчета();
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВХранилищеРасшифровкуПлатежа()

	РасшифровкаПлатежа = Объект.РасшифровкаПлатежа.Выгрузить();
	
	Адрес = ПоместитьВоВременноеХранилище(РасшифровкаПлатежа, УникальныйИдентификатор);
	
	Возврат Адрес;

КонецФункции

&НаКлиенте
Процедура МагазинПриИзмененииКлиент()
	
	Для Каждого Строка Из Объект.РасшифровкаПлатежа Цикл 
		
		Строка.ДокументРасчетовСКонтрагентом = Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура МагазинПриИзмененииСервер()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РасшифровкаПлатежа", Объект.РасшифровкаПлатежа.Выгрузить(,"ДокументРасчетовСКонтрагентом"));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом
		|ПОМЕСТИТЬ ДокРасчетов
		|ИЗ
		|	&РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокРасчетов.ДокументРасчетовСКонтрагентом.Магазин КАК Магазин
		|ИЗ
		|	ДокРасчетов КАК ДокРасчетов
		|ГДЕ НЕ ДокРасчетов.ДокументРасчетовСКонтрагентом.Магазин ЕСТЬ NULL";

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если Магазин = Выборка.Магазин Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектФормы = РеквизитФормыВЗначение("Объект");
	РасшифровкаПлатежа = ОбъектФормы.РасшифровкаПлатежа;
	
	РасшифровкаПлатежа.ЗагрузитьКолонку(Новый Массив(РасшифровкаПлатежа.Количество()), "ДокументРасчетовСКонтрагентом");
	Объект.РасшифровкаПлатежа.Загрузить(РасшифровкаПлатежа.Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция ВходящиеДанныеДляФРСервер(РаспределениеВыручкиПоСекциям, НомерЧека)
	
	Возврат Документы.ПриходныйКассовыйОрдер.ПодготовитьДанныеДляПробитияЧека(Объект.Ссылка, РаспределениеВыручкиПоСекциям, НомерЧека);
	
КонецФункции 

&НаКлиенте
Процедура НапечататьЧекКлиент()
	
	Перем Отказ, ИдентификаторУстройства, ИспользоватьКассуБезПодключенияОборудования, РаспределениеВыручкиПоСекциям;
	
	ПодготовитьИПроверитьПечатьЧека(Отказ, ИдентификаторУстройства, ИспользоватьКассуБезПодключенияОборудования, РаспределениеВыручкиПоСекциям);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ИспользоватьКассуБезПодключенияОборудования Тогда
		
		Если НомерДокументаКассыККМ[Объект.КассаККМ] <> Неопределено Тогда
			Объект.НомерЧекаККМ  = НомерДокументаКассыККМ[Объект.КассаККМ];
		Иначе
			Объект.НомерЧекаККМ  = ПорядковыйНомерПродажи;
		КонецЕсли;
		Объект.ПробитЧек     = Истина;
		
		Модифицированность = Истина;
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
		Если РезультатЗаписи = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ +	1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ИдентификаторУстройства <> Неопределено Тогда
        
        // &ЗамерПроизводительности 
        Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
                                                    "Документ.ПриходныйКассовыйОрдер.Форма.ФормаДокумента.Команда.ПробитьЧек",
                                                               Ложь);
        
        // Готовим данные
		НомерЧека = НомерДокументаКассыККМ[Объект.КассаККМ] + 1;
		ОбщиеПараметры  = ВходящиеДанныеДляФРСервер(РаспределениеВыручкиПоСекциям, НомерЧека);
		
		ЭтаФорма.Доступность = Ложь;
		
		Контекст = Новый Структура("ИдентификаторУстройства, Замер", ИдентификаторУстройства, Замер);
		
		Оповещение = Новый ОписаниеОповещения("НапечататьЧекКлиентЗавершение", ЭтотОбъект, Контекст);
		
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(Оповещение, 
										УникальныйИдентификатор, 
										ОбщиеПараметры, 
										ИдентификаторУстройства);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиентЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		// Установить полученное значение номера чека реквизиту документа.
		Если ЗначениеЗаполнено(РезультатВыполнения.ВыходныеПараметры[1]) Тогда
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		Иначе
			Объект.НомерЧекаККМ = НомерДокументаКассыККМ[Объект.КассаККМ];
		КонецЕсли; 
		
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
		Если РезультатЗаписи = Истина Тогда
			НомерДокументаКассыККМ[Объект.КассаККМ] = Объект.НомерЧекаККМ +	1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		КонецЕсли;
		
		ПараметрыОперации.Вставить("ТипИнкассации", 0);
		ПараметрыОперации.Вставить("Сумма"        , Объект.СуммаДокумента);
		
		Оповещение = Новый ОписаниеОповещения("НапечататьЧекКлиентИнкассацияЗавершение", ЭтотОбъект, ПараметрыОперации);
		МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(Оповещение, УникальныйИдентификатор, ПараметрыОперации, ПараметрыОперации.ИдентификаторУстройства); 
		
	Иначе
		ЭтаФорма.Доступность = Истина;
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
									|Чек не напечатан на фискальном устройстве.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
    
    // &ЗамерПроизводительности 
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыОперации.Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекКлиентИнкассацияЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При операции внесения/выемки произошла ошибка.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		Объект.ПробитЧек    = Истина;
		Модифицированность  = Истина;
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
	ДоступностьПечатиЧека = Объект.Проведен И НЕ ТолькоПросмотр И Объект.ПробиватьЧекиПоКассеККМ;
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"НапечататьЧек",
																"Доступность", 
																ДоступностьПечатиЧека);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьИПроверитьПечатьЧека(Отказаться, 
										  ИдентификаторУстройства, 
										  ИспользоватьКассуБезПодключенияОборудования,
										  РаспределениеВыручкиПоСекциям)
	
	Отказаться = Ложь;
	
	Если ЗначениеЗаполнено(Объект.КассаККМ)  Тогда
		ПараметрыКассыККМ       = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(Объект.КассаККМ);
		ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
		
		РаспределениеВыручкиПоСекциям = ПараметрыКассыККМ.РаспределениеВыручкиПоСекциям;
		ИспользоватьКассуБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
		
		КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		
		ТекстОшибки = НСтр("ru='Кассовая смена не открыта!'");
		Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Объект.Дата, ТекстОшибки) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				"Объект.КассаККМ",
				,
				Отказаться);
			
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru='Не выбрана касса ККМ!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект.КассаККМ",
			,
			Отказаться);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзмененииСервер(Сумма, ДокументРасчетовСКонтрагентом)
	
	Сумма = ДенежныеСредстваВызовСервера.ПолучитьСуммуДокумента(ДокументРасчетовСКонтрагентом);
	Если ТипЗнч(ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.РеализацияТоваров")
		ИЛИ ТипЗнч(ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		Объект.ВидНалога = ПодключаемоеОборудованиеРТ.ВидНалогаПоОрганизацииИСкладу(Объект.Дата, Объект.Организация, ДокументРасчетовСКонтрагентом.Склад);
	ИначеЕсли ТипЗнч(ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ЧекККМ") Тогда
		Объект.ВидНалога = ДокументРасчетовСКонтрагентом.ВидНалога;
	ИначеЕсли ТипЗнч(ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		Сумма = ДенежныеСредстваВызовСервера.ПолучитьСуммаВознаграждения(ДокументРасчетовСКонтрагентом);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеПризнакаСпособаРасчета(ДокументРасчетовСКонтрагентом, СуммаПлатежа, ПризнакСпособаРасчета, ЗаказПокупателя)
	
	ХозОперация = Объект.ХозяйственнаяОперация;
	
	Если ХозОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		Или ХозОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы
		Или ХозОперация = Перечисления.ХозяйственныеОперации.ВознаграждениеОтКомитента Тогда
	
		Если НЕ ЗначениеЗаполнено(ДокументРасчетовСКонтрагентом) Тогда
			Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
				Если СуммаПлатежа >= ЗаказПокупателя.СуммаДокумента Тогда
					ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаПолная;
				Иначе
					ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПредоплатаЧастичная;
				КонецЕсли;
			Иначе
				ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.Аванс;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.РеализацияТоваров") 
			Или ТипЗнч(ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ЧекККМ") Тогда
			ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ОплатаКредита;
		КонецЕсли;
	Иначе
		ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеПризнаковСпособовРасчета()
	
	Для каждого СтрокаРасшифровкиПлатежа Из Объект.РасшифровкаПлатежа Цикл
		ЗаполнениеПризнакаСпособаРасчета(СтрокаРасшифровкиПлатежа.ДокументРасчетовСКонтрагентом, 
										 СтрокаРасшифровкиПлатежа.Сумма, 
										 СтрокаРасшифровкиПлатежа.ПризнакСпособаРасчета,
										 Объект.ЗаказПокупателя)
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти