#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция получает реквизиты документа для обмена с конфигурацией "Бухгалтерия предприятия".
//
// Параметры:
//	ДокументСсылка - Документ, для которого необходимо получить реквизиты.
//
// Возвращаемое значение:
//	Структура - Структура реквизитов документа.
//
Функция РеквизитыДокументаДляОбменаСБухгалтерией(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств.КорреспондирующийСчет КАК КорреспондирующийСчет,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочиеДоходы)
	|	И ДанныеДокумента.СтатьяДвиженияДенежныхСредств.КорреспондирующийСчет <> """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.НомерСтроки");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КорреспондирующийСчет = Выборка.КорреспондирующийСчет;
		СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДвиженияДенежныхСредств;
	Иначе
		КорреспондирующийСчет = "";
		СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	КонецЕсли;                              	
	
	Если Найти(КорреспондирующийСчет, "66") <> 0
		ИЛИ Найти(КорреспондирующийСчет, "67") <> 0 Тогда
		ВидОперации = "РасчетыПоКредитамИЗаймам";
	Иначе
		ВидОперации = "ПрочееПоступление";  		
	КонецЕсли;
		
	СтруктураРеквизитов = Новый Структура("ВидОперации, Счет, СтатьяДвиженияДенежныхСредств",
		ВидОперации,
		КорреспондирующийСчет,
		СтатьяДвиженияДенежныхСредств);
	
	Возврат СтруктураРеквизитов;
		
КонецФункции

// Функция формирует структуру шаблона чека по умолчанию из макета документа Приходный кассовый ордер.
//
Функция СформироватьПервичнуюСтруктуруШаблона(ИерархическийШаблон, ИмяОбъекта, ПервичнаяСтруктура, Загружать) Экспорт
	
	// Загрузим ИерархическийШаблон из макета.
	Если Загружать Тогда
		ТекстовыйДокумент = Документы.ПриходныйКассовыйОрдер.ПолучитьМакет("ШаблонФискальногоЧекаПоУмолчанию");
		Попытка
			Шаблон = ЗначениеИзСтрокиВнутр(ТекстовыйДокумент.ПолучитьТекст());
			Если ТипЗнч(Шаблон) <> Тип("ДеревоЗначений") Тогда
				Загружать = Ложь;
			КонецЕсли;
		Исключение
			Загружать = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если Загружать Тогда
		ИерархическийШаблон = Шаблон.Скопировать();
	Иначе
		НоваяГруппа = ИерархическийШаблон.Строки.Добавить();
		НоваяГруппа.Элемент = НСтр("ru = 'Шапка'");
		НоваяГруппа.Идентификатор = УправлениеШаблонами.ПолучитьИдентификатор();
		НоваяГруппа.ТипЭлемента = "ОбластьЧека";
		НоваяГруппа.ИмяМакета   = "ПоляШаблонаШапка";
		НоваяГруппа.ИмяОбъекта = ИмяОбъекта;
		
		НоваяГруппа = ИерархическийШаблон.Строки.Добавить();
		НоваяГруппа.Элемент = НСтр("ru = 'Табличная часть ""Расшифровка платежа"" (Шапка)'");
		НоваяГруппа.Идентификатор = УправлениеШаблонами.ПолучитьИдентификатор();
		НоваяГруппа.ТипЭлемента = "ОбластьЧека";
		НоваяГруппа.ИмяМакета   = "ПоляШаблонаТЧ";
		НоваяГруппа.ИмяОбъекта = ИмяОбъекта;
		
		НоваяГруппа = ИерархическийШаблон.Строки.Добавить();
		НоваяГруппа.Элемент = НСтр("ru = 'Табличная часть ""Расшифровка платежа"" (Подвал)'");
		НоваяГруппа.Идентификатор = УправлениеШаблонами.ПолучитьИдентификатор();
		НоваяГруппа.ТипЭлемента = "ОбластьЧека";
		НоваяГруппа.ИмяМакета   = "ПоляШаблонаТЧ";
		НоваяГруппа.ИмяОбъекта = ИмяОбъекта;
		
		НоваяГруппа = ИерархическийШаблон.Строки.Добавить();
		НоваяГруппа.Элемент = НСтр("ru = 'Подвал'");
		НоваяГруппа.Идентификатор = УправлениеШаблонами.ПолучитьИдентификатор();
		НоваяГруппа.ТипЭлемента = "ОбластьЧека";
		НоваяГруппа.ИмяМакета   = "ПоляШаблонаШапка";
		НоваяГруппа.ИмяОбъекта = ИмяОбъекта;
	КонецЕсли;
	Возврат Документы.ПриходныйКассовыйОрдер.ПустаяСсылка();
	
КонецФункции

// Функция выполняет добавление фискальных строк в дерево шаблона перед формированием
//  по нему представления чека ПКО.
//
// Параметры:
//  КопияШаблона          - КоллекцияСтрокДереваЗначений
//                          Коллекция строк в которую необходимо добавить фискальные строки.
//  ШиринаЧека            - Число
//                          Ширина чека в символах.
//  ОднаФискальнаяСтрока  - Булево
//                          Определяется наличие режима одна фискальная строка.
//
// Возвращаемое значение:
//   КоллекцияСтрокДереваЗначений   - Коллекция строк дерева значений.
//
Функция СформироватьФискальныеСтроки(КопияШаблона, ШиринаЧека, ОднаФискальнаяСтрока) Экспорт

	// Шапка
	
	Если ШиринаЧека < 18 Тогда
		Возврат КопияШаблона;
	КонецЕсли;
	
	ФР_Строка_0_0 = КопияШаблона.Строки.Найти("Шапка",,Ложь);
	Если ФР_Строка_0_0 <> Неопределено Тогда 
		
		// Первая фискальная строка
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР1");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "Таблица");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР1");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ВставитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, 0, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , НСтр("ru = 'Касса № 01'"));
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР2");
		ПараметрыФункции.Вставить("Ширина"          , 10);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		Если ШиринаЧека >= 25 Тогда
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.Касса.Организация.ИНН%%");
			ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаКассаОрганизацияИНН");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР3");
			ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека - 10);
			ПараметрыФункции.Вставить("РазмещениеТекста", 1); // Обрезать
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ПараметрыФункции.Вставить("Префикс"         , "ИНН: ");
			ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		КонецЕсли;
		
		// Вторая фискальная строка
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР4");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "Таблица");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР4");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ВставитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, 1, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.Date%%");
		ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаDate");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР5");
		ПараметрыФункции.Вставить("Ширина"          , 16);
		ПараметрыФункции.Вставить("РазмещениеТекста", 2); // Забивать
		ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
		ПараметрыФункции.Вставить("Префикс"         , "Дата  ");
		ПараметрыФункции.Вставить("Формат"         , "ДЛФ=D");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		// Третья фискальная строка
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР7");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "Таблица");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР7");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ВставитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, 2, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.Date%%");
		ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаDate");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР8");
		ПараметрыФункции.Вставить("Ширина"          , 11);
		ПараметрыФункции.Вставить("РазмещениеТекста", 2); // Забивать
		ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
		ПараметрыФункции.Вставить("Префикс"         , "Время ");
		ПараметрыФункции.Вставить("Формат"          , "ДФ=чч:мм");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		Если ШиринаЧека >= 23 Тогда
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.НомерЧекаККМ%%");
			ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаНомерЧекаККМ");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР9");
			ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека-11);
			ПараметрыФункции.Вставить("РазмещениеТекста", 2); // Забивать
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ПараметрыФункции.Вставить("Префикс"         , "ЧЕК.№ ");
			ПараметрыФункции.Вставить("Формат"          , "ЧЦ=6; ЧВН=; ЧГ=0");
			ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		КонецЕсли;
		
	КонецЕсли;
	
	// Подвал
	
	ФР_Строка_0_0 = КопияШаблона.Строки.Найти("Подвал",,Ложь);
	Если ФР_Строка_0_0 <> Неопределено И ОднаФискальнаяСтрока Тогда
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР11");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "Таблица");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР11");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "Всего:");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР12");
		ПараметрыФункции.Вставить("Ширина"          , 6);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.СуммаДокумента%%");
		ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаСуммаДокумента");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР13");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека - 6);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ПараметрыФункции.Вставить("Формат"          , "ЧДЦ=2");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
	КонецЕсли;
	
	Если ФР_Строка_0_0 <> Неопределено Тогда
		
		Пробелы50 = "**************************************************";
		Пробелы = "";
		МинимальноеКоличествоСтрок = Цел(ШиринаЧека/50);
		Для Счетчик = 0 По МинимальноеКоличествоСтрок Цикл
			Пробелы = Пробелы + Пробелы50;
		КонецЦикла;
		Пробелы = Лев(Пробелы, ШиринаЧека);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , Пробелы);
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР14");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ФР15");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "Таблица");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР15");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ФР_Строка_1_0 = ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "ИТОГ");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР16");
		ПараметрыФункции.Вставить("Ширина"          , 4);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Лево");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%Ссылка.СуммаДокумента%%");
		ПараметрыФункции.Вставить("ИмяКолонки"      , "СсылкаСуммаДокумента");
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР17");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека - 4);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ПараметрыФункции.Вставить("Формат"          , "ЧДЦ=2");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_1_0.Строки, ПараметрыФункции);
		
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИмяЭлемента"     , Пробелы);
		ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаТекста");
		ПараметрыФункции.Вставить("Идентификатор"   , "ФР18");
		ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
		ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
		ПараметрыФункции.Вставить("Выравнивание"    , "Право");
		ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, ПараметрыФункции);
		
	КонецЕсли;
	
	// Табличная часть
	
	Если НЕ ОднаФискальнаяСтрока Тогда
		
		ФР_Строка_0_0 = КопияШаблона.Строки.Найти("Табличная часть ""Расшифровка платежа"" (Подвал)",,Ложь);
		
		Если ФР_Строка_0_0 <> Неопределено Тогда
			
			ПараметрыФункции = Новый Структура;
			ПараметрыФункции.Вставить("ИмяЭлемента"     , "%%РасшифровкаПлатежа.СуммаПлатежа%%");
			ПараметрыФункции.Вставить("ИмяКолонки"      , "РасшифровкаПлатежаСуммаПлатежа");
			ПараметрыФункции.Вставить("ТипЭлемента"     , "СтрокаДанных");
			ПараметрыФункции.Вставить("Идентификатор"   , "ФР19");
			ПараметрыФункции.Вставить("Ширина"          , ШиринаЧека);
			ПараметрыФункции.Вставить("РазмещениеТекста", 0); // Переносить
			ПараметрыФункции.Вставить("Формат"          , "ЧДЦ=2"); // Переносить
			ПараметрыФункции.Вставить("Выравнивание"    , "Право");
			ПараметрыФункции.Вставить("Префикс"         , "=");
			ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(ФР_Строка_0_0.Строки, ПараметрыФункции);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КопияШаблона;
	
КонецФункции

// Функция получает структуру массивов (макет) для чека ПКО.
//
// Параметры:
//  Ссылка      - <ДокументСсылка.ПриходныйКассовыйОрдер>, Ссылка на документ ПКО.
//  ШаблонЧека  - <ДеревоЗначений>, Шаблон чека
//  ШиринаЧека  - <Число>, Ширина чека в символах.
//  Параметры   - <Структура>, Вспомогательные параметры
//
// Возвращаемое значение:
//   <Структура>   - Структура массивов (макет) текстовых строк.
//
Функция МакетФискальногоЧека(Ссылка, ШаблонЧека, ШиринаЧека, Параметры) Экспорт
	
	ТаблицаРасшифровкаПлатежа = Новый ТаблицаЗначений;
	
	Значение = Неопределено;
	Если Параметры.Свойство("КэшТаблицыРезультатаКомпоновки", Значение) Тогда
		ТаблицыРезультатаКомпоновки        = Значение;
	Иначе
		// Значение по умолчанию
		ТаблицыРезультатаКомпоновки = УправлениеШаблонами.ВыполнитьКомпоновкуДанныхДляИерархическогоШаблона(ШаблонЧека, Ссылка, Параметры.СхемаКомпоновкиДанных, Параметры.КомпоновщикМакета);
		Параметры.Вставить("КэшТаблицыРезультатаКомпоновки", ТаблицыРезультатаКомпоновки);
	КонецЕсли;
	
	Для каждого Таблицы Из ТаблицыРезультатаКомпоновки.Строки Цикл
		
		Если Таблицы.ЧастьЗапроса = "РасшифровкаПлатежа" Тогда
			ТаблицаРасшифровкаПлатежа = Таблицы.Строки;
		КонецЕсли;
		
	КонецЦикла;
	
	Структура = УправлениеШаблонами.ПолучитьИдентификаторыПользовательскихПолей(ШаблонЧека);
	
	// Механизм кэширования макетов.
	Если Параметры.КэшМакетов = Неопределено Тогда
		Структура.Вставить("КэшМакетов", Новый Соответствие);
	Иначе
		Структура.Вставить("КэшМакетов", Параметры.КэшМакетов);
	КонецЕсли;
	
	СтруктураМассивы = Новый Структура;
	
	// Подготовка Шапки и Подвала
	СтрокаШапка = ШаблонЧека.Строки.Найти("Шапка",,Ложь);
	Если СтрокаШапка <> Неопределено Тогда
		Если ТаблицаРасшифровкаПлатежа.Количество() > 0 Тогда
			УправлениеШаблонами.ЗаполнитьСтруктуруПараметровШаблонаПоСтрокеТЧ(ТаблицаРасшифровкаПлатежа.Родитель, Структура, СтрокаШапка);
		КонецЕсли;
		УправлениеШаблонами.ЗаполнитьСоставныеСтрокиПоСтруктуре(СтрокаШапка, Структура);
		
		МассивШапка = Новый Массив;
		Для каждого Строка2Уровня Из СтрокаШапка.Строки Цикл
			Значение = УправлениеШаблонами.ПолучитьМассивСтрокДляСтрокиДереваШаблона(Строка2Уровня, Структура);
			Соответствие = Новый Соответствие;
			Соответствие.Вставить(Строка2Уровня, Значение);
			МассивШапка.Добавить(Соответствие);
		КонецЦикла;
		СтруктураМассивы.Вставить("Шапка",МассивШапка);
		
	КонецЕсли;
	
	СтрокаПодвал = ШаблонЧека.Строки.Найти("Подвал",,Ложь);
	Если СтрокаШапка <> Неопределено Тогда
		Если ТаблицаРасшифровкаПлатежа.Количество() > 0 Тогда
			УправлениеШаблонами.ЗаполнитьСтруктуруПараметровШаблонаПоСтрокеТЧ(ТаблицаРасшифровкаПлатежа.Родитель, Структура, СтрокаПодвал);
		КонецЕсли;
		УправлениеШаблонами.ЗаполнитьСоставныеСтрокиПоСтруктуре(СтрокаПодвал, Структура);
		
		МассивПодвал = Новый Массив;
		Для каждого Строка2Уровня Из СтрокаПодвал.Строки Цикл
			Значение = УправлениеШаблонами.ПолучитьМассивСтрокДляСтрокиДереваШаблона(Строка2Уровня, Структура);
			Соответствие = Новый Соответствие;
			Соответствие.Вставить(Строка2Уровня, Значение);
			МассивПодвал.Добавить(Соответствие);
		КонецЦикла;
		
		СтруктураМассивы.Вставить("Подвал",МассивПодвал);
	КонецЕсли;
	
	// Итоговая строка идет последней, ее не включаем в ТЧ.
	КоличествоСтрокРезультата = ТаблицаРасшифровкаПлатежа.Количество() - 1;
	Для Счетчик = 0 По КоличествоСтрокРезультата Цикл
		
		ТелоШапка = ШаблонЧека.Строки.Найти("Табличная часть ""Расшифровка платежа"" (Шапка)",,Ложь);
		УправлениеШаблонами.ЗаполнитьСтруктуруПараметровШаблонаПоСтрокеТЧ(ТаблицаРасшифровкаПлатежа[Счетчик], Структура, ТелоШапка);
		УправлениеШаблонами.ЗаполнитьСоставныеСтрокиПоСтруктуре(ТелоШапка, Структура);
		
		МассивТелоШапка = Новый Массив;
		Для каждого Строка2Уровня Из ТелоШапка.Строки Цикл
			Значение = УправлениеШаблонами.ПолучитьМассивСтрокДляСтрокиДереваШаблона(Строка2Уровня, Структура);
			Соответствие = Новый Соответствие;
			Соответствие.Вставить(Строка2Уровня, Значение);
			МассивТелоШапка.Добавить(Соответствие);
		КонецЦикла;
		
		ТелоПодвал = ШаблонЧека.Строки.Найти("Табличная часть ""Расшифровка платежа"" (Подвал)",,Ложь);
		УправлениеШаблонами.ЗаполнитьСтруктуруПараметровШаблонаПоСтрокеТЧ(ТаблицаРасшифровкаПлатежа[Счетчик], Структура, ТелоПодвал);
		УправлениеШаблонами.ЗаполнитьСоставныеСтрокиПоСтруктуре(ТелоПодвал, Структура);
		
		МассивТелоПодвал = Новый Массив;
		Для каждого Строка2Уровня Из ТелоПодвал.Строки Цикл
			Значение = УправлениеШаблонами.ПолучитьМассивСтрокДляСтрокиДереваШаблона(Строка2Уровня, Структура);
			Соответствие = Новый Соответствие;
			Соответствие.Вставить(Строка2Уровня, Значение);
			МассивТелоПодвал.Добавить(Соответствие);
		КонецЦикла;
		
		СтруктураМассивы.Вставить("ТелоШапка_"+Счетчик,МассивТелоШапка);
		СтруктураМассивы.Вставить("ТелоПодвал_"+Счетчик,МассивТелоПодвал);
		
	КонецЦикла;
	
	СтруктураМассивы.Вставить("РезультатКомпоновкиДанных", ТаблицаРасшифровкаПлатежа);
	СтруктураМассивы.Вставить("КоличествоСтрокТабличнойЧасти", Счетчик);
	СтруктураМассивы.Вставить("ШиринаЧека", ШиринаЧека);
	
	// Механизм кэширования макетов.
	Кэш = Структура.КэшМакетов;
	
	Возврат СтруктураМассивы;
	
КонецФункции

// Получает ссылку на документ Приходный кассовый ордер по хозяйственной операции для настройки шаблона чека.
//
Функция ДокументДляШаблонаЧека() Экспорт
	Перем ДокументДляПечатиШаблона;
	
	ДокументДляПечатиШаблона = Документы.ПриходныйКассовыйОрдер.ПустаяСсылка();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПриходныйКассовыйОрдер.Ссылка
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДокументДляПечатиШаблона = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ДокументДляПечатиШаблона;
	
КонецФункции

// Функция возвращает массив типов для ограничения типов элемента формы РасшифровкаПлатежаДокументРасчетовСКонтрагентом.
// Параметры:
//           ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хоз. операции документа для которого
//                                                                              необходимо получить массив типов.
// Возвращаемое значение:
//           МассивТиповОграничений - Массив - Массив типов ограничивающих типы для реквизита формы
//                                             РасшифровкаПлатежаДокументРасчетовСКонтрагентом.
//
Функция ОграничениеТипаДокументаРасчетовПоХозяйственнойОперации(ХозяйственнаяОперация) Экспорт
	
	Перем МассивТиповОграничений;
	
	МассивТиповОграничений = Новый Массив();
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
		
		МассивТиповОграничений.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
		МассивТиповОграничений.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		
		МассивТиповОграничений.Добавить(Тип("ДокументСсылка.РеализацияТоваров"));
		МассивТиповОграничений.Добавить(Тип("ДокументСсылка.ЧекККМ"));
		
	КонецЕсли;
	
	Возврат МассивТиповОграничений;
	
КонецФункции

// Функция возвращает массив типов для ограничения типов элемента формы ДокументОснование.
// Параметры:
//           ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хоз. операции документа для которого
//                                                                              необходимо получить массив типов.
// Возвращаемое значение:
//           МассивТиповОграничений - Массив - Массив типов ограничивающих типы для реквизита формы ДокументОснование.
//
Функция ОграничениеТипаДокументаОснованияРасходаИзКассы(ХозяйственнаяОперация) Экспорт
	
	Перем МассивТиповОграничений;
	МассивТиповОграничений = Новый Массив();
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
		
		МассивТиповОграничений.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ Тогда
		
		МассивТиповОграничений.Добавить(Тип("ДокументСсылка.ВыемкаДенежныхСредствИзКассыККМ"));
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		МассивТиповОграничений.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		
	КонецЕсли;
	
	Возврат МассивТиповОграничений;
	
КонецФункции

// Процедура заполняет массивы реквизитов, зависимых от хозяйственной операции документа.
// Параметры:
//           ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хоз. операции документа для которого
//                                                                              необходимо получить массив реквизитов.
//           МассивВсехРеквизитов - Неопределено - Выходной параметр с типом Массив в который будут помещены имена всех
//                                                 реквизитов документов.
//           МассивРеквизитовОперации - Неопределено - Выходной параметр с типом Массив в который будут помещены имена
//                                                     реквизитов по виду операции документа.
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("Организация");
	МассивВсехРеквизитов.Добавить("Касса");
	МассивВсехРеквизитов.Добавить("Контрагент");
	МассивВсехРеквизитов.Добавить("КонтрагентПрочийДоход");
	МассивВсехРеквизитов.Добавить("ДокументОснование");
	МассивВсехРеквизитов.Добавить("БанковскийСчет");
	МассивВсехРеквизитов.Добавить("КассаККМ");
	МассивВсехРеквизитов.Добавить("ВТомЧислеНДС");
	МассивВсехРеквизитов.Добавить("СуммаДокумента");
	МассивВсехРеквизитов.Добавить("ОтчетОРозничныхПродажах");
	МассивВсехРеквизитов.Добавить("ПробиватьЧекиПоКассеККМ");
	МассивВсехРеквизитов.Добавить("ДоговорПлатежногоАгента");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.Сумма");
	
	МассивРеквизитовОперации = Новый Массив;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
		МассивРеквизитовОперации.Добавить("Организация");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("Контрагент");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("ВТомЧислеНДС");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Сумма");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		МассивРеквизитовОперации.Добавить("Организация");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("КассаККМ");
		МассивРеквизитовОперации.Добавить("ВТомЧислеНДС");
		МассивРеквизитовОперации.Добавить("Контрагент");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Сумма");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом");
		МассивРеквизитовОперации.Добавить("ПробиватьЧекиПоКассеККМ");
		МассивРеквизитовОперации.Добавить("ОтчетОРозничныхПродажах");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы Тогда
		МассивРеквизитовОперации.Добавить("Организация");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("КассаККМ");
		МассивРеквизитовОперации.Добавить("КонтрагентПрочийДоход");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("ВТомЧислеНДС");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Сумма");
		МассивРеквизитовОперации.Добавить("ПробиватьЧекиПоКассеККМ");
		МассивРеквизитовОперации.Добавить("ОтчетОРозничныхПродажах");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ Тогда
		МассивРеквизитовОперации.Добавить("Организация");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("КассаККМ");
		МассивРеквизитовОперации.Добавить("ДокументОснование");
		МассивРеквизитовОперации.Добавить("ДоговорПлатежногоАгента");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка Тогда
		МассивРеквизитовОперации.Добавить("Организация");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("БанковскийСчет");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы Тогда
		МассивРеквизитовОперации.Добавить("Организация");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("ДокументОснование");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
		МассивРеквизитовОперации.Добавить("Организация");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("ДокументОснование");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		МассивРеквизитовОперации.Добавить("Организация");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("ДокументОснование");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВознаграждениеОтКомитента Тогда
		
		МассивРеквизитовОперации.Добавить("Организация");
		МассивРеквизитовОперации.Добавить("Касса");
		МассивРеквизитовОперации.Добавить("КассаККМ");
		МассивРеквизитовОперации.Добавить("ВТомЧислеНДС");
		МассивРеквизитовОперации.Добавить("Контрагент");
		МассивРеквизитовОперации.Добавить("СуммаДокумента");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Сумма");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом");
		МассивРеквизитовОперации.Добавить("ПробиватьЧекиПоКассеККМ");
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет отбор на хозяйственную операцию, устанавливаемый на список выбора документа Приходный кассовый ордер в
// форме элемента справочника хранилище шаблонов.
//
Функция СвязьПараметровВыбораНаХозяйственнуюОперацию() Экспорт
	МассивПараметровВыбора = Новый Массив();
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента));
	Возврат Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецФункции

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	ДанныеДокумента.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	ТекстЗапроса = ТекстЗапросаТаблицаДенежныеСредстваНаличные() + ПолучитьРазделитьЗапросов()
		+ ТекстЗапросаТаблицаДенежныеСредстваКПоступлениюНаличные() + ПолучитьРазделитьЗапросов()
		+ ТекстЗапросаТаблицаРасчетыСПоставщиками() + ПолучитьРазделитьЗапросов()
		+ ТекстЗапросаТаблицаДенежныеСредстваККМ() + ПолучитьРазделитьЗапросов()
		+ ТекстЗапросаТаблицаРасчетыСКлиентами();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	
	ИспользоватьРасчетыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыСКлиентами");
	Запрос.УстановитьПараметр("ИспользоватьРасчетыСКлиентами", ИспользоватьРасчетыСКлиентами);
	
	МассивПустыхДокументовРасчета = Новый Массив;
	МассивПустыхДокументовРасчета.Добавить(Документы.РеализацияТоваров.ПустаяСсылка());
	МассивПустыхДокументовРасчета.Добавить(Документы.ЧекККМ.ПустаяСсылка());
	МассивПустыхДокументовРасчета.Добавить(Неопределено);
	
	Запрос.УстановитьПараметр("МассивПустыхДокументовРасчета", МассивПустыхДокументовРасчета);
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", ЗначениеНастроекПовтИсп.ПредопределеннаяСтатьяДвиженияДенежныхСредств(Реквизиты.ХозяйственнаяОперация));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваНаличные",               МассивРезультатов[0].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваКПоступлениюНаличные",   МассивРезультатов[1].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПоставщиками",                   МассивРезультатов[2].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваККМ",                    МассивРезультатов[3].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСКлиентами",                      МассивРезультатов[4].Выгрузить());
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Приходный кассовый ордер
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПКО";
	КомандаПечати.Представление = НСтр("ru = 'Приходный кассовый ордер'");
	КомандаПечати.ДополнительныеПараметры.Вставить("Представление", КомандаПечати.Представление);
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПКО") Тогда
	
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПКО",
				ПараметрыПечати.Представление, 
				СформироватьПечатнуюФормуКО1(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

Функция ПодготовитьДанныеДляПробитияЧека(ДокументСсылка, РаспределениеВыручкиПоСекциям, НомерЧека) Экспорт
	
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	// Общие параметры чека
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("КассаККМ");
	СтруктураРеквизитов.Вставить("Касса");
	СтруктураРеквизитов.Вставить("ШаблонПКО", "Касса.ШаблонПКО");
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("Дата");
	СтруктураРеквизитов.Вставить("Ответственный");
	СтруктураРеквизитов.Вставить("ДоговорПлатежногоАгента");
	СтруктураРеквизитов.Вставить("ВидНалога");
	СтруктураРеквизитов.Вставить("СуммаДокумента");
	СтруктураРеквизитов.Вставить("ПринятоОт");
	СтруктураРеквизитов.Вставить("Основание");
	СтруктураРеквизитов.Вставить("ЗаказПокупателя");
	СтруктураРеквизитов.Вставить("ХозяйственнаяОперация");
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("НаименованиеПолное");
	СтруктураРеквизитов.Вставить("ИНН");
	СтруктураРеквизитов.Вставить("КПП");
	РеквизитыОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.Организация, СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЭлектронныйЧекSMSПередаютсяПрограммой1С");
	СтруктураРеквизитов.Вставить("ЭлектронныйЧекEmailПередаютсяПрограммой1С");
	СтруктураРеквизитов.Вставить("СерийныйНомер");
	СтруктураРеквизитов.Вставить("Магазин");
	СтруктураРеквизитов.Вставить("Код");
	СтруктураРеквизитов.Вставить("СпособФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.СпособФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ДопустимоеРасхождениеФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.ДопустимоеРасхождениеФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ТипОборудования", "ПодключаемоеОборудование.ТипОборудования");
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.КассаККМ, СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Наименование");
	СтруктураРеквизитов.Вставить("ИНН");
	РеквизитыКассир = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДокумента.Ответственный.ФизическоеЛицо, СтруктураРеквизитов);
	
	Если РеквизитыДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	Иначе
		ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратРасходаДенежныхСредств;
	КонецЕсли;
	
	ОбщиеПараметры.Электронно = Ложь;
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.ДокументОснование = ДокументСсылка;
	
	ОбщиеПараметры.Кассир          = РеквизитыКассир.Наименование;
	ОбщиеПараметры.Вставить("ИмяКассира", РеквизитыКассир.Наименование);
	ОбщиеПараметры.КассирИНН       = РеквизитыКассир.ИНН;
	
	ОбщиеПараметры.Организация    = РеквизитыДокумента.Организация;
	ОбщиеПараметры.ОрганизацияНазвание = РеквизитыОрганизация.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = РеквизитыОрганизация.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = РеквизитыОрганизация.КПП;
	ОбщиеПараметры.НомерКассы     = РеквизитыКассыККМ.Код;
	ОбщиеПараметры.НомерЧека      = НомерЧека;
	
	ОбщиеПараметры.НомерСмены = 1;
	
	СведенияООрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(РеквизитыДокумента.Организация, РеквизитыДокумента.Дата);
	АдресМагазина = ОбщегоНазначенияРТ.АдресМагазина(РеквизитыКассыККМ.Магазин);
	
	СерийныйНомер = РеквизитыКассыККМ.СерийныйНомер;
	Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда
		СерийныйНомер = "1";
	КонецЕсли;
	
	ОбщиеПараметры.АдресРасчетов = АдресМагазина;
	ОбщиеПараметры.МестоРасчетов = Строка(РеквизитыКассыККМ.Магазин) + " " + АдресМагазина;
	ОбщиеПараметры.АдресМагазина = АдресМагазина;
	ОбщиеПараметры.НаименованиеМагазина = Строка(РеквизитыКассыККМ.Магазин);
	
	ОбщиеПараметры.СерийныйНомер = СерийныйНомер;
	ОбщиеПараметры.СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложенияККТ(РеквизитыДокумента.Организация, 
																				РеквизитыДокумента.ВидНалога);
	
	ПодключаемоеОборудованиеРТ.ЗаполнитьПараметрыПлатежногоДоговора(ОбщиеПараметры, 
																	РеквизитыДокумента.ДоговорПлатежногоАгента,
																	РеквизитыДокумента.СуммаДокумента);
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.ДоговорПлатежногоАгента) Тогда
		НомерСекции = РаспределениеВыручкиПоСекциям.СоответствиеДоговоровСекциям.Получить(РеквизитыДокумента.ДоговорПлатежногоАгента);
	Иначе
		НомерСекции = РаспределениеВыручкиПоСекциям.НомерСекцииДляПриходныхКассовыхОрдеров;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("НомерСекции", НомерСекции);
	
	РасшифровкаПлатежа = РасшифровкаПлатежа(ДокументСсылка);
	
	СуммаДокументовРасчетов = 0;
	
	ДобавленыДанныеПоЗаказу = Ложь;
	
	Для Каждого СтрокаПлатежа Из РасшифровкаПлатежа Цикл
		ПараметрыДокумента.Вставить("ПризнакСпособаРасчета", СтрокаПлатежа.ПризнакСпособаРасчета);
		Если ЗначениеЗаполнено(СтрокаПлатежа.ДокументРасчетовСКонтрагентом) Тогда
			ПодключаемоеОборудованиеРТ.ДобавитьСтрокиДляФискализацииТоваров(СтрокаПлатежа.ДокументРасчетовСКонтрагентом, 
																			ПараметрыДокумента, 
																			ОбщиеПараметры, 
																			СуммаДокументовРасчетов);
		ИначеЕсли ЗначениеЗаполнено(РеквизитыДокумента.ЗаказПокупателя) И НЕ ДобавленыДанныеПоЗаказу Тогда
			ПодключаемоеОборудованиеРТ.ДобавитьСтрокиДляФискализацииТоваров(РеквизитыДокумента.ЗаказПокупателя, 
																			ПараметрыДокумента, 
																			ОбщиеПараметры, 
																			СуммаДокументовРасчетов);
			ДобавленыДанныеПоЗаказу = Истина;
		Иначе // Это аванс
			СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
			
			СтрокаПозицииЧека.Наименование = НСтр("ru = 'Оплата от:'") + " " + РеквизитыДокумента.ПринятоОт + Символы.ПС
				+ НСтр("ru = 'Основание:'") + " " + РеквизитыДокумента.Основание;
			СтрокаПозицииЧека.Количество     = 1;
			СтрокаПозицииЧека.Цена           = СтрокаПлатежа.Сумма;
			СтрокаПозицииЧека.ЦенаСоСкидками = СтрокаПлатежа.Сумма;
			СтрокаПозицииЧека.Сумма          = СтрокаПлатежа.Сумма;
			СтрокаПозицииЧека.НомерСекции    = НомерСекции;
			Если ОбщиеПараметры.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ОСН Тогда
				ЗначСтавкиНДС = УчетНДС.СтавкаНДСПоУмолчанию(ДокументСсылка.Дата);
				СтрокаПозицииЧека.СтавкаНДС = ПодключаемоеОборудованиеРТ.СтавкаНДСВФорматеБПО(ЗначСтавкиНДС, Истина);	
			Иначе
				СтрокаПозицииЧека.СтавкаНДС      = Неопределено;
			КонецЕсли;
			СтрокаПозицииЧека.ПризнакСпособаРасчета = СтрокаПлатежа.ПризнакСпособаРасчета;
			СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПлатежВыплата;
			
			ПодключаемоеОборудованиеРТ.ЗаполнитьПараметрыПлатежногоДоговораВСтроке(ОбщиеПараметры, СтрокаПозицииЧека);
			
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
			СуммаДокументовРасчетов = СуммаДокументовРасчетов + СтрокаПлатежа.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	ОбщиеПараметры.КассаККМ 		= РеквизитыДокумента.КассаККМ;
	ОбщиеПараметры.ШаблонЧека 		= РеквизитыДокумента.ШаблонПКО;
	ОбщиеПараметры.ТорговыйОбъект 	= РеквизитыКассыККМ.Магазин;
	
	Если РеквизитыКассыККМ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		// При необходимости будет проведен формато-логический контроль
		ОбщиеПараметры.СпособФорматноЛогическогоКонтроля = РеквизитыКассыККМ.СпособФорматноЛогическогоКонтроля;
		ОбщиеПараметры.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = РеквизитыКассыККМ.ДопустимоеРасхождениеФорматноЛогическогоКонтроля;
		Если ФорматноЛогическийКонтрольКлиентСервер.НуженФорматноЛогическийКонтроль(ОбщиеПараметры) Тогда
			ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаОплаты = Новый Структура();
	СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Наличные);
	СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Наличные'"));
	СтрокаОплаты.Вставить("Сумма", РеквизитыДокумента.СуммаДокумента);
	ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	РазницаСумм = СуммаДокументовРасчетов - РеквизитыДокумента.СуммаДокумента;
	Если РазницаСумм > 0 Тогда
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты",Перечисления.ТипыОплатыККТ.Постоплата);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Постоплата'"));
		СтрокаОплаты.Вставить("Сумма", РазницаСумм);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции // ПодготовитьДанныеДляПробитияЧека()

Функция НДССАванса(Объект) Экспорт
	
	СистемаНалогообложения = ПодключаемоеОборудованиеРТ.ПолучитьСистемуНалогообложенияККТ(Объект.Организация, 
																				Объект.ВидНалога);
	Если НЕ СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ОСН Тогда
		Возврат 0;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ПризнакСпособаРасчета", Перечисления.ПризнакиСпособаРасчета.Аванс);
	
	МассивСтрок = Объект.РасшифровкаПлатежа.НайтиСтроки(СтруктураПоиска);
	
	ОбщаяСуммаАванса = 0;
	Для каждого ЭлементМассиваСтрок Из МассивСтрок Цикл
		ОбщаяСуммаАванса = ОбщаяСуммаАванса + ЭлементМассиваСтрок.Сумма;
	КонецЦикла;
	
	Если Объект.Дата >= УчетНДС.ДатаПереходногоПериода() Тогда 
		Возврат Окр(ОбщаяСуммаАванса * 20 /120, 2, 1);
	Иначе 
		Возврат Окр(ОбщаяСуммаАванса * 18 /118, 2, 1);
	КонецЕсли;
	
КонецФункции // НДССАванса()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаТаблицаДенежныеСредстваНаличные()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Касса КАК Касса,
	|	ДанныеДокумента.Касса.Магазин КАК Магазин,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧастьРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств ЕСТЬ NULL 
	|				ИЛИ ТабличнаяЧастьРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|			ТОГДА &СтатьяДвиженияДенежныхСредств
	|		ИНАЧЕ ТабличнаяЧастьРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	ЕСТЬNULL(ТабличнаяЧастьРасшифровкаПлатежа.Сумма, ДанныеДокумента.СуммаДокумента) КАК Сумма
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТабличнаяЧастьРасшифровкаПлатежа
	|		ПО (ТабличнаяЧастьРасшифровкаПлатежа.Ссылка = ДанныеДокумента.Ссылка)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧастьРасшифровкаПлатежа.НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСКлиентами()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Касса.Магазин КАК Магазин,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(ТабличнаяЧастьРасшифровкаПлатежа.Сумма, ДанныеДокумента.СуммаДокумента) КАК Сумма,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТабличнаяЧастьРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом, ДанныеДокумента.Ссылка) В (&МассивПустыхДокументовРасчета)
	|			ТОГДА ДанныеДокумента.Ссылка
	|		ИНАЧЕ ЕСТЬNULL(ТабличнаяЧастьРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом, ДанныеДокумента.Ссылка)
	|	КОНЕЦ КАК ДокументРасчета,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧастьРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ЧекККМ
	|				ИЛИ ТабличнаяЧастьРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ЧекККМ
	|			ТОГДА ТабличнаяЧастьРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.ЗаказПокупателя
	|		ИНАЧЕ ДанныеДокумента.ЗаказПокупателя
	|	КОНЕЦ КАК ЗаказПокупателя
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТабличнаяЧастьРасшифровкаПлатежа
	|		ПО (ТабличнаяЧастьРасшифровкаПлатежа.Ссылка = ДанныеДокумента.Ссылка)
	|ГДЕ
	|	&ИспользоватьРасчетыСКлиентами
	|	И ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧастьРасшифровкаПлатежа.НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДенежныеСредстваККМ()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.КассаККМ КАК КассаККМ,
	|	ДанныеДокумента.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	ЕСТЬNULL(ТабличнаяЧастьРасшифровкаПлатежа.Сумма, ДанныеДокумента.СуммаДокумента) КАК Сумма
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТабличнаяЧастьРасшифровкаПлатежа
	|		ПО (ТабличнаяЧастьРасшифровкаПлатежа.Ссылка = ДанныеДокумента.Ссылка)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|	И ДанныеДокумента.ПробиватьЧекиПоКассеККМ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.ДоговорПлатежногоАгента,
	|	ЕСТЬNULL(ТабличнаяЧастьРасшифровкаПлатежа.Сумма, ДанныеДокумента.СуммаДокумента)
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТабличнаяЧастьРасшифровкаПлатежа
	|		ПО (ТабличнаяЧастьРасшифровкаПлатежа.Ссылка = ДанныеДокумента.Ссылка)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|	И ДанныеДокумента.ПробиватьЧекиПоКассеККМ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДенежныеСредстваКПоступлениюНаличные()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата                   	КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 	КАК ВидДвижения,
	|	ДанныеДокумента.Организация            	КАК Организация,
	|	ДанныеДокумента.Касса                  	КАК Касса,
	|	ДанныеДокумента.ДокументОснование      	КАК ДокументПередачи,
	|	ДанныеДокумента.ХозяйственнаяОперация  	КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СуммаДокумента         	КАК Сумма,
	|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РасходныйКассовыйОрдер).Касса КАК КассаОтправитель
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|	)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата                     КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)   КАК ВидДвижения,
	|	ДанныеДокумента.Организация              КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)  КАК Касса,
	|	ДанныеДокумента.ДокументОснование        КАК ДокументПередачи,
	|	ДанныеДокумента.ХозяйственнаяОперация    КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СуммаДокумента           КАК Сумма,
	|	ДанныеДокумента.КассаККМ                 КАК КассаОтправитель
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСПоставщиками()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.Магазин ЕСТЬ НЕ NULL 
	|			ТОГДА РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом.Магазин
	|		ИНАЧЕ РасшифровкаПлатежа.Ссылка.Касса.Магазин
	|	КОНЕЦ КАК Магазин,
	|	&Контрагент КАК Поставщик,
	|	РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом КАК ДокументРасчета,
	|	РасшифровкаПлатежа.Сумма КАК Сумма,
	|	РасшифровкаПлатежа.Сумма КАК КОплате,
	|	0 КАК КПоступлению,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) КАК ФормаОплаты,
	|	ЛОЖЬ КАК Взаимозачет
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика)
	|	И РасшифровкаПлатежа.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьРазделитьЗапросов()

	СтрокаРазделителя = 
	"
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат СтрокаРазделителя

КонецФункции // ПолучитьРазделитьЗапросов()
 

///////////////////////////////////////////////////////////////////////////////
// Печать

Функция СформироватьПечатнуюФормуКО1(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент();
	СинонимДокумента   = НСтр("ru='Приходный кассовый ордер'");
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйКассовыйОрдер_ПФ_MXL_КО1";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ссылка                КАК Ссылка,
	|	КорреспондирующийСчет КАК КорреспондирующийСчет
	|ИЗ
	|	КорСчета
	|;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриходныйКассовыйОрдер.Номер                         КАК Номер,
	|	ПриходныйКассовыйОрдер.Дата                          КАК ДатаДокумента,
	|	ПриходныйКассовыйОрдер.Ссылка                        КАК Ссылка,
	|	ПриходныйКассовыйОрдер.Организация                   КАК Организация,
	|	ПриходныйКассовыйОрдер.Организация                   КАК ЮрФизЛицо,
	|	ПриходныйКассовыйОрдер.Организация                   КАК Руководители,
	|	ПриходныйКассовыйОрдер.Организация.Префикс           КАК Префикс,
	|	ПриходныйКассовыйОрдер.СуммаДокумента                КАК Сумма,
	|	ПриходныйКассовыйОрдер.ХозяйственнаяОперация         КАК ХозяйственнаяОперация,
	|	ПриходныйКассовыйОрдер.Контрагент                    КАК Контрагент,
	|	ПриходныйКассовыйОрдер.Контрагент.Представление      КАК ФИОПолучателя,
	|	ПриходныйКассовыйОрдер.Приложение                    КАК Приложение,
	|	ПриходныйКассовыйОрдер.Основание                     КАК Основание,
	|	ПриходныйКассовыйОрдер.Контрагент.НаименованиеПолное КАК НаименованиеПолное,
	|	ПриходныйКассовыйОрдер.Контрагент.Наименование       КАК Наименование,
	|	ПриходныйКассовыйОрдер.ПринятоОт                     КАК ПринятоОт,
	|	ПриходныйКассовыйОрдер.ДокументОснование             КАК ДокументОснование,
	|	ПриходныйКассовыйОрдер.ВТомЧислеНДС                  КАК ВТомЧислеНДС,
	|	ПриходныйКассовыйОрдер.Ответственный.ФизическоеЛицо  КАК Кассир,
	|	""50.01""                                            КАК КодДебета
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриходныйКассовыйОрдер.Дата,
	|	ПриходныйКассовыйОрдер.Ссылка
	|";
	
	Запрос.МенеджерВременныхТаблиц = ДенежныеСредстваСервер.ПолучитьМенеджерТаблицыКорСчетов(Документы.ПриходныйКассовыйОрдер.ПустаяСсылка(), МассивОбъектов);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаКорСчетаДебет = МассивРезультатов[0].Выгрузить();
	ДанныеПечати = МассивРезультатов[1].Выбрать();
	
	ПервыйДокумент = Истина;
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ПриходныйКассовыйОрдер");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		ЕстьРасчетыСКонтрагентами = ДенежныеСредстваСервер.ЕстьРасчетыСКонтрагентами(ДанныеПечати.ХозяйственнаяОперация);
		
		СведенияОбОрганизации = ФормированиеПечатныхФормСервер.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаДокумента);
		
		// Шапка накладной
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
		ОбластьМакета.Параметры.СуммаРубКоп       = ФормированиеПечатныхФормСервер.СуммаРубКоп(ДанныеПечати.Сумма);
		ОбластьМакета.Параметры.Сумма             = Формат(ДанныеПечати.Сумма, "ЧЦ=15; ЧДЦ=2");
		ОбластьМакета.Параметры.СуммаПрописью     = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(ДанныеПечати.Сумма);
		ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
		ОбластьМакета.Параметры.ДатаДокумента     = ДанныеПечати.ДатаДокумента;
		ОбластьМакета.Параметры.НомерДокумента    = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер, ПустаяСтрока(ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы")), Истина);
		ОбластьМакета.Параметры.ВТомЧисле         = ДанныеПечати.ВТомЧислеНДС + ?(ДанныеПечати.ВТомЧислеНДС = НСтр("ru = 'Без налога (НДС)'"), "", " " + НСтр("ru = 'руб.'"));
		
		МассивКорСчетов = ТаблицаКорСчетаДебет.НайтиСтроки(Новый Структура("Ссылка", ДанныеПечати.Ссылка));
		КодыСчетДебет = "";
		Для каждого СтрокаКорСчета Из МассивКорСчетов Цикл
			КодыСчетДебет = КодыСчетДебет + "," + СтрокаКорСчета.КорреспондирующийСчет;
		КонецЦикла;
		
		ОбластьМакета.Параметры.Субсчет = Сред(КодыСчетДебет, 2);
		
		Руководители = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(ДанныеПечати.Руководители, КонецДня(ДанныеПечати.ДатаДокумента));
		
		Бухгалтер    = Руководители.ГлавныйБухгалтер;
		
		ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = Бухгалтер;
		ОбластьМакета.Параметры.ФИОКассира            = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ДанныеПечати.Кассир);
		
		ОбластьМакета.Параметры.ПринятоОт  = ДанныеПечати.ПринятоОт;
		ОбластьМакета.Параметры.Основание  = ДанныеПечати.Основание;
		ОбластьМакета.Параметры.Приложение = ДанныеПечати.Приложение;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция РасшифровкаПлатежа(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Сумма КАК Сумма,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ПризнакСпособаРасчета КАК ПризнакСпособаРасчета
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &ДокументСсылка";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

#КонецОбласти

#КонецЕсли
