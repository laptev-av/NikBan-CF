#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Заказ поставщику
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаказПоставщику";
	КомандаПечати.Представление = НСтр("ru = 'Заказ поставщику'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

// Инициализирует таблицы значений, содержащие данные документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст ="ВЫБРАТЬ
				|	ДанныеДокумента.Ссылка КАК Ссылка,
				|	ДанныеДокумента.Магазин КАК Магазин,
				|	ДанныеДокумента.Контрагент КАК Контрагент,
				|	ДанныеДокумента.Магазин.ИспользоватьОрдернуюСхемуПриПоступлении КАК ПоступлениеПоОрдернойСхеме,
				|	НЕ ДанныеДокумента.Магазин.СкладУправляющейСистемы КАК ФормироватьДвижения,
				|	ДанныеДокумента.Дата КАК Период,
				|	ДанныеДокумента.Склад КАК Склад,
				|	ДанныеДокумента.Договор КАК Договор,
				|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
				|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
				|	ДанныеДокумента.Закрыт КАК Закрыт,
				|	ДанныеДокумента.ДатаПоступления КАК ДатаПоступления
				|ИЗ
				|	Документ.ЗаказПоставщику КАК ДанныеДокумента
				|ГДЕ
				|	ДанныеДокумента.Ссылка = &Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	ПоступлениеТоваров.Ссылка
				|ИЗ
				|	Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
				|ГДЕ
				|	ПоступлениеТоваров.ЗаказПоставщику = &Ссылка
				|	И ПоступлениеТоваров.Проведен";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Реквизиты = РезультатЗапроса[0].Выбрать();
	Реквизиты.Следующий();
	
	ОбщегоНазначенияРТ.ПеренестиСтрокуВыборкиВПараметрыЗапроса(РезультатЗапроса[0], Реквизиты, Запрос);
	Запрос.УстановитьПараметр("ПоступлениеПоОрдернойСхеме", Реквизиты.ПоступлениеПоОрдернойСхеме И НЕ (Реквизиты.Закрыт И РезультатЗапроса[1].Пустой()));
	
	ПериодОбновления = Константы.ПериодОбновленияПоставляемойНоменклатуры.Получить();
	Запрос.УстановитьПараметр("ПериодОбновления", ПериодОбновления);
	
	Запрос.Текст = 
	"//0 ВтТаблицаТовары
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                  КАК НомерСтроки,
	|	ТаблицаТовары.Ссылка                       КАК Ссылка,
	|	ТаблицаТовары.Номенклатура                 КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаТовары.Характеристика               КАК Характеристика,
	|   ТаблицаТовары.Количество                   КАК Количество,
	|   &Контрагент                                КАК Контрагент,
	|   &Магазин                                   КАК Магазин,
	|   &Склад                                     КАК Склад
	|ПОМЕСТИТЬ ВтТаблицаТовары
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары            КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|   И &ФормироватьДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1 ТаблицаНоменклатураПоставщиков
	|ВЫБРАТЬ
	|	ТаблицаТовары.Магазин                    КАК Магазин,
	|	ТаблицаТовары.Контрагент                 КАК Поставщик,
	|	ТаблицаТовары.Номенклатура               КАК Номенклатура,
	|	ТаблицаТовары.Характеристика             КАК Характеристика
	|ИЗ
	|	ВтТаблицаТовары                          КАК ТаблицаТовары
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|ПО
	|	НоменклатураПоставщиков.Поставщик = ТаблицаТовары.Контрагент
	|	И НоменклатураПоставщиков.Магазин = ТаблицаТовары.Магазин
	|	И НоменклатураПоставщиков.Номенклатура = ТаблицаТовары.Номенклатура
	|	И НоменклатураПоставщиков.Характеристика = ТаблицаТовары.Характеристика
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоставщикиНоменклатуры КАК ПоставщикиНоменклатуры
	|	ПО ТаблицаТовары.Контрагент = ПоставщикиНоменклатуры.Поставщик
	|ГДЕ
	|	(НЕ ЕСТЬNULL(ТаблицаТовары.Ссылка.Контрагент.УчастникЭДО, Истина))
	|	И НоменклатураПоставщиков.Поставщик ЕСТЬ NULL
	|	И &ФормироватьДвижения И &ПериодОбновления <= &Период
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Магазин,
	|	ТаблицаТовары.Контрагент,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// 2 ТаблицаТоварыКПоступлению
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&ДатаПоступления                       КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Количество               КАК Количество,
	|	ТаблицаТовары.Ссылка                   КАК ДокументОснование
	|ИЗ
	|	ВтТаблицаТовары                        КАК ТаблицаТовары
	|ГДЕ
	|	&ПоступлениеПоОрдернойСхеме
	|	И НЕ &Закрыт
	|	И &ФормироватьДвижения
	|	И (НЕ ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// 3 ЗаказыТоваров
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Магазин                  КАК Магазин,
	|	ТаблицаТовары.Ссылка                   КАК Заказ,
	|	ТаблицаТовары.Контрагент               КАК Поставщик,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Количество               КАК Количество
	|ИЗ
	|	ВтТаблицаТовары                        КАК ТаблицаТовары
	|ГДЕ
	|	&ФормироватьДвижения
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// 4 РасчетыСПоставщиками
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Магазин                               КАК Магазин,
	|	&Контрагент                            КАК Поставщик,
	|	&Ссылка                                КАК ДокументРасчета,
	|	0                                      КАК Сумма,
	|	&СуммаДокумента                        КАК КОплате,
	|	0                                      КАК КПоступлению,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка) КАК ФормаОплаты,
	|	ЛОЖЬ                                   КАК Взаимозачет,
	|	ЛОЖЬ                                   КАК СторноЗаказаПоставщику
	|ГДЕ
	|	&ФормироватьДвижения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Магазин                               КАК Магазин,
	|	&Контрагент                            КАК Поставщик,
	|	&Ссылка                                КАК ДокументРасчета,
	|	0                                      КАК Сумма,
	|	0                                      КАК КОплате,
	|	&СуммаДокумента                        КАК КПоступлению,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка) КАК ФормаОплаты,
	|	ЛОЖЬ КАК Взаимозачет,
	|	ЛОЖЬ                                   КАК СторноЗаказаПоставщику
	|ГДЕ
	|	&ФормироватьДвижения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Магазин                               КАК Магазин,
	|	&Контрагент                            КАК Поставщик,
	|	&Ссылка                                КАК ДокументРасчета,
	|	0                                      КАК Сумма,
	|	&СуммаДокумента                        КАК КОплате,
	|	0                                      КАК КПоступлению,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка) КАК ФормаОплаты,
	|	ЛОЖЬ                                   КАК Взаимозачет,
	|	ИСТИНА                                 КАК СторноЗаказаПоставщику
	|ГДЕ
	|	&ФормироватьДвижения И &Закрыт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Магазин                               КАК Магазин,
	|	&Контрагент                            КАК Поставщик,
	|	&Ссылка                                КАК ДокументРасчета,
	|	0                                      КАК Сумма,
	|	0                                      КАК КОплате,
	|	&СуммаДокумента                        КАК КПоступлению,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка) КАК ФормаОплаты,
	|	ЛОЖЬ                                   КАК Взаимозачет,
	|	ИСТИНА                                 КАК СторноЗаказаПоставщику
	|ГДЕ
	|	&ФормироватьДвижения И &Закрыт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Магазин                               КАК Магазин,
	|	&Контрагент                            КАК Поставщик,
	|	&Ссылка                                КАК ДокументРасчета,
	|	ЭтапыОплат.Сумма                       КАК Сумма,
	|	ЭтапыОплат.Сумма                       КАК КОплате,
	|	0                                      КАК КПоступлению,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Взаимозачет) КАК ФормаОплаты,
	|	ЛОЖЬ                                   КАК Взаимозачет,
	|	ЛОЖЬ                                   КАК СторноЗаказаПоставщику
	|ИЗ
	|	Документ.ЗаказПоставщику.ЭтапыОплат КАК ЭтапыОплат
	|ГДЕ
	|	ЭтапыОплат.Ссылка = &Ссылка
	|	И ЭтапыОплат.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Взаимозачет)
	|	И &ФормироватьДвижения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Магазин                               КАК Магазин,
	|	&Контрагент                            КАК Поставщик,
	|	ЭтапыОплат.ДокументВзаимозачета        КАК ДокументРасчета,
	|	ЭтапыОплат.Сумма                       КАК Сумма,
	|	ЭтапыОплат.Сумма                       КАК КОплате,
	|	0                                      КАК КПоступлению,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка) КАК ФормаОплаты,
	|	ИСТИНА                                 КАК Взаимозачет,
	|	ЛОЖЬ                                   КАК СторноЗаказаПоставщику
	|ИЗ
	|	Документ.ЗаказПоставщику.ЭтапыОплат КАК ЭтапыОплат
	|ГДЕ
	|	ЭтапыОплат.Ссылка = &Ссылка
	|	И ЭтапыОплат.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Взаимозачет)
	|	И &ФормироватьДвижения
	|;
	|";
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ТаблицыДляДвижений.Вставить("ТаблицаНоменклатураПоставщиков", Результат[1].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаТоварыКПоступлению"		, Результат[2].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаЗаказыТоваров"			, Результат[3].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПоставщиками"	, Результат[4].Выгрузить());
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказПоставщику") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказПоставщику", 
			НСтр("ru = 'Заказ поставщику'"), 
			ПечатьЗаказПоставщику(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.ШаблоныСообщений

////////////////////////////////////////////////////////////////////////////////
// Шаблоны сообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Подсказка      - Строка - Расширенная информация о реквизите.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** Подсказка      - Строка - Расширенная информация о вложении.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиSMS, ПредметСообщения, "Контрагент", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * ВариантОтправки - Строка - Варианты отправки письма: "Кому", "Копия", "СкрытаяКопия", "ОбратныйАдреса";
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
	ШаблоныСообщений.ЗаполнитьПолучателей(ПолучателиПисьма, ПредметСообщения, "Контрагент");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция формирует печатную форму документа.
//
Функция ПечатьЗаказПоставщику(МассивОбъектов, ОбъектыПечати)
	
	КолонкаКодов       = ФормированиеПечатныхФормСервер.ИмяДополнительнойКолонки();
	ВыводитьКоды       = НЕ ПустаяСтрока(КолонкаКодов);
	ВыводитьУпаковки   = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента   = НСтр("ru='Заказ поставщику'");

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщику_ЗаказПоставщику";
		
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка                               КАК Ссылка,
	|	Документ.Номер                                КАК Номер,
	|	Документ.Дата                                 КАК Дата,
	|	Документ.Организация                          КАК Покупатель,
	|	Документ.Контрагент                           КАК Поставщик,
	|	Документ.Ответственный.ФизическоеЛицо         КАК Ответственный,
	|	Документ.Организация.Префикс                  КАК Префикс,
	|	Документ.УчитыватьНДС                         КАК УчитыватьНДС,
	|	Документ.ЦенаВключаетНДС                      КАК ЦенаВключаетНДС,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Контрагент)            КАК ПоставщикПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Организация)           КАК ПокупательПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Ответственный.ФизическоеЛицо) КАК ОтветственныйПредставление
	|ИЗ
	|	Документ.ЗаказПоставщику КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|	И Документ.Проведен
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	" + ?(ВыводитьКоды, "ТаблицаТовары.Номенклатура." + КолонкаКодов +" КАК КолонкаКодов,", "") + "
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Упаковка.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ПредставлениеЕдиницыИзмеренияУпаковки,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.Ссылка КАК Ссылка 
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка");
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПоставщику.ПФ_MXL_ЗаказПоставщику");
	
	
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
	
	ОбластьШапкаТаблицыНачало 	= Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
	ОбластьСтрокаТаблицыНачало 	= Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
	ОбластьПодвалТаблицыНачало 	= Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
	
	ОбластьШапкаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьСтрокаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
	ОбластьПодвалТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
	
	ОбластьШапкаТаблицыКолонкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов; 
	
	ОбластьШапкаТаблицыКолонкаУпаковок 		= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаУпаковок");
	ОбластьСтрокаТаблицыКолонкаУпаковок 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаУпаковок");
	ОбластьПодвалТаблицыКолонкаУпаковок		= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаУпаковок");
	
	ОбластьКолонкаТоваров = Макет.Область("КолонкаТоваров");
	
	Если НЕ ВыводитьКоды Тогда
		
		ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		
	КонецЕсли;
	
	Если НЕ ВыводитьУпаковки Тогда
		
		ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаУпаковокКоличество").ШиринаКолонки
		+ Макет.Область("КолонкаУпаковокПредставление").ШиринаКолонки;
		
	КонецЕсли;
	
	ОбластьШапкаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
	ОбластьСтрокаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
	ОбластьПодвалТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
		
	ОбластьШапкаТаблицыКонец 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	ОбластьСтрокаТаблицыКонец 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КонецСтроки");
	ОбластьПодвалТаблицыКонец 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");
	
	ОбластьПодписей       = Макет.ПолучитьОбласть("Подписи");
	ОбластьИтого          = Макет.ПолучитьОбласть("Итого");
	ОбластьИтогоНДС       = Макет.ПолучитьОбласть("ИтогоНДС");
	ОбластьСуммаПрописью  = Макет.ПолучитьОбласть("СуммаПрописью");
	
	ВыборкаПоДокументам = Результаты[0].Выбрать();
	
	ВыборкаПоТабличнымЧастям = Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	ПервыйДокумент = Истина;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НЕ ПервыйДокумент Тогда
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// ЗАГОЛОВОК
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ФормированиеПечатныхФормСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// ШАПКА
		ОбластьШапка.Параметры.Заполнить(ВыборкаПоДокументам);
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаКодов);
			
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров);
		
		Если ВыводитьУпаковки Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаУпаковок);
			
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);
		ВсегоНаименований  = 0;
		Итого              = 0;
		ИтогоНДС           = 0;
	
		// СТРОКИ ТЧ
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
			
			Если ВыводитьКоды Тогда
				
				ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Артикул = ВыборкаПоСтрокамТЧ["КолонкаКодов"];
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
				
			КонецЕсли;
			
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаПоСтрокамТЧ.НоменклатураПредставление,ВыборкаПоСтрокамТЧ.ХарактеристикаПредставление);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
			
			Если ВыводитьУпаковки Тогда
				
				ОбластьСтрокаТаблицыКолонкаУпаковок.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаУпаковок);
				
			КонецЕсли;
			
			ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);
			
			ВсегоНаименований = ВсегоНаименований + 1;
			Итого             = Итого + ВыборкаПоСтрокамТЧ.Сумма;
			ИтогоНДС          = ИтогоНДС + ВыборкаПоСтрокамТЧ.СуммаНДС;
	
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаКодов);
			
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
		
		Если ВыводитьУпаковки Тогда
			
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаУпаковок);
			
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
		
		// ИТОГО
		ТекстИтоговойСтроки = НСтр("ru = '%Итого%'");
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%",ФормированиеПечатныхФормСервер.ФорматСумм(Итого));
		ОбластьИтого.Параметры.Итого = ТекстИтоговойСтроки;
						
		ТекстИтоговойСтроки = НСтр("ru = '%Итого%'");
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%",ФормированиеПечатныхФормСервер.ФорматСумм(ИтогоНДС));
		
		Если НЕ ВыборкаПоДокументам.УчитыватьНДС Тогда
			ТекстИтоговойСтроки = НСтр("ru = 'Без НДС'");
		КонецЕсли;
		
		ОбластьИтогоНДС.Параметры.ИтогоНДС = ТекстИтоговойСтроки;
		ОбластьИтогоНДС.Параметры.НДС = ?(ВыборкаПоДокументам.ЦенаВключаетНДС, НСтр("ru='В том числе НДС:'"), НСтр("ru='Сумма НДС:'"));
		
		ТабличныйДокумент.Вывести(ОбластьИтого);
		ТабличныйДокумент.Вывести(ОбластьИтогоНДС);
		
		// СУММА ПРОПИСЬЮ
		
		ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%, на сумму %Итого%'");
		СуммаКПрописи = Итого + ?(ВыборкаПоДокументам.ЦенаВключаетНДС, 0, ИтогоНДС);
		
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%Итого%", ФормированиеПечатныхФормСервер.ФорматСумм(СуммаКПрописи));
				
		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
		ОбластьСуммаПрописью.Параметры.СуммаПрописью = ФормированиеПечатныхФормСервер.СформироватьСуммуПрописью(СуммаКПрописи);
			
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		
		// ПОДПИСИ
		ОбластьПодписей.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьПодписей.Параметры.ОтветственныйПредставление = ФормированиеПечатныхФормСервер.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецЕсли
