#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Перем ОписаниеТиповОбъектовКОтправкеНазад;
Перем ОписаниеТиповОбъектовКФормированиюОстатков;
Перем ОписаниеТиповПеремещениеТоваров;
Перем ОписаниеТиповВводНачальныхОстатковУзла;
Перем ОписаниеТиповОтчетОРозничныхПродажах;
Перем ТребуетсяПровестиВводНачальныхОстатковУзла;
Перем МассивОбъектовКФормированиюОстатков;
Перем МассивОтчетовОРозничныхПродажах;
Перем ОписаниеТиповПеремещение;
Перем ЭтоГлавныйУзел;


Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ИмяУзла = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(Ссылка);
	ПредопределенныйУзел = ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена(ИмяУзла);
	
	Если ПредопределенныйУзел = Ссылка
		ИЛИ ПланыОбмена.ГлавныйУзел() = Ссылка Тогда
				
		МассивНепроверяемыхРеквизитов = Новый Массив;
		МассивНепроверяемыхРеквизитов.Добавить("РежимВыгрузкиИнформативныхОстатков");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаНачалаВыгрузкиДокументов");
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоНовый()
		Или (ДатаНачалаВыгрузкиДокументов <> Ссылка.ДатаНачалаВыгрузкиДокументов
		И ПланыОбмена.ГлавныйУзел() = Неопределено) Тогда
		РегистрыСведений.ИзмененияОбщихДанныхУзлов.ЗарегистрироватьИзменения(Ссылка);
	КонецЕсли;
	
	Если ОбменДаннымиСервер.НадоВыполнитьОбработчикПослеЗагрузкиДанных(ЭтотОбъект, Ссылка) Тогда
		ПослеЗагрузкиДанных(Отказ);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Если ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументов) 
			И ЗначениеЗаполнено(Код) Тогда
			
			УстановитьСсылкуНового(ПланыОбмена.ПоМагазину.ПолучитьСсылку(Новый УникальныйИдентификатор));
			ОбменДаннымиПереопределяемый.ЗаполнитьОстатки(Магазины.ВыгрузитьКолонку("Магазин"), ПолучитьСтруктуруЗаполненияВводаОстатковУзла(Истина), , Отказ);
		КонецЕсли;
	Иначе
		Если Документы.ВводНачальныхОстатковУзла.ВозможноВвестиВводОстатковДляУзла(Ссылка) Тогда
			ВводОстатков = Документы.ВводНачальныхОстатковУзла.НайтиПоРеквизиту("КодУзлаОбмена", Код);
			Если ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументов) Тогда
				Если ВводОстатков.Пустая() Тогда 
					ОбменДаннымиПереопределяемый.ЗаполнитьОстатки(, ПолучитьСтруктуруЗаполненияВводаОстатковУзла(Ложь), ВводОстатков, Отказ);
				ИначеЕсли НачалоДня(ВводОстатков.Дата) <> ДатаНачалаВыгрузкиДокументов Тогда
					ВыборкаДокументов = Документы.ВводНачальныхОстатковУзла.Выбрать(,, Новый Структура("КодУзлаОбмена", Код), "Дата");
					ПервоеВхождение = Истина;
					Пока ВыборкаДокументов.Следующий() Цикл
						ДокументВыборки = ВыборкаДокументов.ПолучитьОбъект();
						Если ПервоеВхождение Тогда
							ВводОстатков = ДокументВыборки.Ссылка;
							ПервоеВхождение = Ложь;
							Продолжить;
						КонецЕсли; 
						ДокументВыборки.УстановитьПометкуУдаления(Истина);
					КонецЦикла;
					
					ОбменДаннымиПереопределяемый.ЗаполнитьОстатки(, ПолучитьСтруктуруЗаполненияВводаОстатковУзла(Ложь), ВводОстатков, Отказ);
					
					Если Не Отказ Тогда
						ДополнительныеСвойства.Вставить("ПолучениеСообщенияОбмена");
						ПланыОбмена.ЗарегистрироватьИзменения(Ссылка);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если Не ВводОстатков.Пустая() Тогда
					Попытка
						ОбъектВводОстатков = ВводОстатков.ПолучитьОбъект();
						ОбъектВводОстатков.Удалить();
					Исключение
						Инфо  = ИнформацияОбОшибке();
						Отказ = Истина;
						ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными.Удаление документа ""Ввод начальных остатков узла""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,Инфо);
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Документы.ВводНачальныхОстатковУзла.ВозможноПровестиВводОстатковВУзле(Ссылка) Тогда
			
			ВыборкаДокументов = Документы.ВводНачальныхОстатковУзла.Выбрать(,, Новый Структура("КодУзлаОбмена", Код), "Дата");
			Пока ВыборкаДокументов.Следующий() Цикл
				ДокументВыборки = ВыборкаДокументов.ПолучитьОбъект();
				Если ДокументВыборки <> Неопределено
					И НЕ ДокументВыборки.ПометкаУдаления
					И НЕ ДокументВыборки.Проведен Тогда
					ДокументВыборки.Узел = Ссылка;
					Если НЕ ОбменДаннымиПереопределяемый.ЗаписатьВводОстатков(ДокументВыборки, РежимЗаписиДокумента.Проведение) Тогда
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьОбъект(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПослеЗагрузкиДанных(Отказ)
	
	Если ТребуетсяПровестиВводНачальныхОстатковУзла Тогда
		
		ВводОстатков = Документы.ВводНачальныхОстатковУзла.НайтиПоРеквизиту("КодУзлаОбмена", ПланыОбмена.ПоМагазину.ЭтотУзел().Код);
		Если НЕ ВводОстатков.Пустая() И НЕ ВводОстатков.ПометкаУдаления Тогда

			ОбъектВводОстатков = ВводОстатков.ПолучитьОбъект();
			ДатаСверткиПодчиненных = ВводОстатков.Дата;
			Если Не ЭтоНовый() И ДатаНачалаВыгрузкиДокументов <> ДатаСверткиПодчиненных И ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	ПоМагазину.Ссылка
				|ИЗ
				|	ПланОбмена.ПоМагазину КАК ПоМагазину
				|ГДЕ
				|	ПоМагазину.Ссылка <> &ТекущийУзел
				|	И ПоМагазину.Ссылка <> &ЭтотУзел";
				
				Запрос.УстановитьПараметр("ТекущийУзел", Ссылка);
				Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ПоМагазину.ЭтотУзел());
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					УзелОбмена = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					УзелОбмена.ДатаНачалаВыгрузкиДокументов = ДатаСверткиПодчиненных;
					УзелОбмена.ДополнительныеСвойства.Вставить("Загрузка", Истина);
					УзелОбмена.Записать();
				КонецЦикла;
				
			КонецЕсли;
			
			ВыборкаДокументов = Документы.ВводНачальныхОстатковУзла.Выбрать(,, Новый Структура("КодУзлаОбмена", ПланыОбмена.ПоМагазину.ЭтотУзел().Код), "Дата");
			Пока ВыборкаДокументов.Следующий() Цикл
				ДокументВыборки = ВыборкаДокументов.ПолучитьОбъект();
				Если ДокументВыборки <> Неопределено
					И НЕ ДокументВыборки.ПометкаУдаления
					И НЕ ДокументВыборки.Проведен Тогда

					Если НЕ ОбменДаннымиПереопределяемый.ЗаписатьВводОстатков(ДокументВыборки, РежимЗаписиДокумента.Проведение) Тогда
						Отказ = Истина;
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивОбъектовКФормированиюОстатков.Количество() > 0 Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПеремещениеТоваров.Ссылка,
		|	ПеремещениеТоваров.Дата КАК Дата,
		|	ПеремещениеТоваров.МоментВремени КАК МоментВремени,
		|	ПеремещениеТоваров.Проведен
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|ГДЕ
		|	ПеремещениеТоваров.Ссылка В(&МассивОбъектовКФормированиюОстатков)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	АктОРасхожденияхПриПриемкеТоваров.Ссылка,
		|	АктОРасхожденияхПриПриемкеТоваров.Дата,
		|	АктОРасхожденияхПриПриемкеТоваров.МоментВремени,
		|	АктОРасхожденияхПриПриемкеТоваров.Проведен
		|ИЗ
		|	Документ.АктОРасхожденияхПриПриемкеТоваров КАК АктОРасхожденияхПриПриемкеТоваров
		|ГДЕ
		|	АктОРасхожденияхПриПриемкеТоваров.Ссылка В(&МассивОбъектовКФормированиюОстатков)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	МоментВремени");
		
		Запрос.УстановитьПараметр("МассивОбъектовКФормированиюОстатков", МассивОбъектовКФормированиюОстатков);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ТоварыНаСкладах = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
				ТоварыНаСкладах.Отбор.Регистратор.Установить(Выборка.Ссылка);
				
				Если Выборка.Проведен Тогда
					
					ДополнительныеСвойстваОбъекта = Новый Структура;
					ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Выборка.Ссылка, ДополнительныеСвойстваОбъекта);
					
					Документы[Выборка.Ссылка.Метаданные().Имя].ИнициализироватьДанныеДокумента(Выборка.Ссылка, ДополнительныеСвойстваОбъекта);
					
					ТаблицаДвижений = ДополнительныеСвойстваОбъекта.ТаблицыДляДвижений.ТаблицаТоварыНаСкладах;
					
					Если ТаблицаДвижений.Колонки.Найти("Регистратор") = Неопределено Тогда
						ТаблицаДвижений.Колонки.Добавить("Регистратор");
						ТаблицаДвижений.ЗаполнитьЗначения(Выборка.Ссылка, "Регистратор");
					КонецЕсли;
					
					ТоварыНаСкладах.Загрузить(ТаблицаДвижений);
				КонецЕсли;
				
				Попытка
				
					ТоварыНаСкладах.ОбменДанными.Отправитель = Ссылка;
					ТоварыНаСкладах.Записать();
					
				Исключение
					
					Инфо = ИнформацияОбОшибке();
					ТекстСообщенияОбОшибке = НСтр("ru = 'Ошибка при формировании остатков документа: %1. 
					|При загрузке данных из магазина: %2'");
					ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, КраткоеПредставлениеОшибки(Инфо), Ссылка);
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными.Загрузка данных'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,Инфо);
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоГлавныйУзел Тогда
		БонусныеБаллыСервер.ПровестиОтчетыОПродажахПриОбмене(МассивОтчетовОРозничныхПродажах, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад)
	
	ТипЭлемента = ТипЗнч(ЭлементДанных);
	Если ОписаниеТиповОбъектовКФормированиюОстатков.СодержитТип(ТипЭлемента) Тогда
		Если ЗначениеЗаполнено(ЭлементДанных.Ссылка) Тогда
			МассивОбъектовКФормированиюОстатков.Добавить(ЭлементДанных.Ссылка);
		ИначеЕсли ЭлементДанных.Проведен Тогда
			ЭлементДанных.ОбменДанными.Отправитель = Ссылка;
			ЭлементДанных.ОбменДанными.Загрузка = Истина;
			ЭлементДанных.Записать(РежимЗаписиДокумента.Запись);
			МассивОбъектовКФормированиюОстатков.Добавить(ЭлементДанных.Ссылка);
		КонецЕсли;
	ИначеЕсли  ЭтоГлавныйУзел И ОписаниеТиповОтчетОРозничныхПродажах.СодержитТип(ТипЭлемента) Тогда
		Если ЭлементДанных.Проведен Тогда
			МассивОтчетовОРозничныхПродажах.Добавить(ЭлементДанных.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеТиповПеремещение.СодержитТип(ТипЭлемента) Тогда
		ОбновитьПеремещениеПоТТН(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад)
	
	ТипЭлемента = ТипЗнч(ЭлементДанных);
	Если ОписаниеТиповВводНачальныхОстатковУзла.СодержитТип(ТипЭлемента) Тогда
		ТребуетсяПровестиВводНачальныхОстатковУзла = Истина;
	КонецЕсли;
	
	Если ОписаниеТиповПеремещение.СодержитТип(ТипЭлемента) Тогда
		ОбновитьПеремещениеПоТТН(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьОбъект(ДанныеЗаполнения)
	
	Если Не ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаВыгрузкиДокументов	= НачалоГода(ТекущаяДатаСеанса());

КонецПроцедуры

// Функция получает Структуру заполнения для документа Ввод остатков Узла.
//
Функция ПолучитьСтруктуруЗаполненияВводаОстатковУзла(НовыйУзел)
	
	СтруктураЗаполненияВводаОстатков = Новый Структура;
	СтруктураЗаполненияВводаОстатков.Вставить("Дата", ДатаНачалаВыгрузкиДокументов);
	Если НовыйУзел Тогда
		СтруктураЗаполненияВводаОстатков.Вставить("Узел", ПолучитьСсылкуНового());
	Иначе
		СтруктураЗаполненияВводаОстатков.Вставить("Узел", Ссылка);
	КонецЕсли;
	СтруктураЗаполненияВводаОстатков.Вставить("КодУзлаОбмена", Код);
	СтруктураЗаполненияВводаОстатков.Вставить("Комментарий");
	СтруктураЗаполненияВводаОстатков.Вставить("ПометкаУдаления");
	
	Возврат СтруктураЗаполненияВводаОстатков;
	
КонецФункции

Процедура ОбновитьПеремещениеПоТТН(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад)
	
	Если НЕ ЗначениеЗаполнено(ЭлементДанных.ТТНВходящаяЕГАИС) Тогда
		Если ЭлементДанных.ЭтоНовый() Тогда
			ИдентификаторПеремещения = СокрЛП(ЭлементДанных.ПолучитьСсылкуНового().УникальныйИдентификатор());
		Иначе
			ИдентификаторПеремещения = СокрЛП(ЭлементДанных.Ссылка.УникальныйИдентификатор());
		КонецЕсли;
		ТТН = ИнтеграцияЕГАИСРТ.НайтиТТНПоИдентификаторуПеремещения(ИдентификаторПеремещения);
		Если ЗначениеЗаполнено(ТТН) Тогда
			ЭлементДанных.ТТНВходящаяЕГАИС = ТТН;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

ОписаниеТиповОбъектовКОтправкеНазад = Новый ОписаниеТипов("РегистрНакопленияНаборЗаписей.ТоварыОрганизаций");
ОписаниеТиповОбъектовКФормированиюОстатков = Новый ОписаниеТипов("ДокументОбъект.ПеремещениеТоваров, ДокументОбъект.АктОРасхожденияхПриПриемкеТоваров");
ОписаниеТиповПеремещениеТоваров = Новый ОписаниеТипов("ДокументОбъект.ПеремещениеТоваров, ДокументСсылка.ПеремещениеТоваров");
ОписаниеТиповВводНачальныхОстатковУзла = Новый ОписаниеТипов("ДокументОбъект.ВводНачальныхОстатковУзла, ДокументСсылка.ВводНачальныхОстатковУзла");
ОписаниеТиповОтчетОРозничныхПродажах = Новый ОписаниеТипов("ДокументОбъект.ОтчетОРозничныхПродажах");
ОписаниеТиповПеремещение = Новый ОписаниеТипов("ДокументОбъект.ПеремещениеТоваров");

ТребуетсяПровестиВводНачальныхОстатковУзла = Ложь;
МассивОбъектовКФормированиюОстатков = Новый Массив;
МассивОтчетовОРозничныхПродажах = Новый Массив;

ЭтоГлавныйУзел = ПланыОбмена.ГлавныйУзел() = Неопределено;

#КонецОбласти

#КонецЕсли
