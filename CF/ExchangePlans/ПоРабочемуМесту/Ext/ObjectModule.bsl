#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Перем МассивОбъектовКПроведению;
Перем ОписаниеТиповОбъектовКПроведению;
Перем ОписаниеТиповПеремещение;

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ОбменДаннымиСервер.НадоВыполнитьОбработчикПослеЗагрузкиДанных(ЭтотОбъект, Ссылка) Тогда
		ПослеЗагрузкиДанных(Отказ);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьОбъект(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	ИмяУзла = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(Ссылка);
	ПредопределенныйУзел = ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена(ИмяУзла);
	
	Если (НЕ ЭтоНовый())
		И (ПредопределенныйУзел = Ссылка 
		ИЛИ ПланыОбмена.ГлавныйУзел() = Ссылка) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Магазин");
		МассивНепроверяемыхРеквизитов.Добавить("РабочееМесто");
		
	КонецЕсли;	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад)
	
	Если ОписаниеТиповОбъектовКПроведению.СодержитТип(ТипЗнч(ЭлементДанных)) Тогда
		Если ЗначениеЗаполнено(ЭлементДанных.Ссылка) Тогда
			МассивОбъектовКПроведению.Добавить(ЭлементДанных.Ссылка);
		ИначеЕсли ЭлементДанных.Проведен Тогда
			ЭлементДанных.ОбменДанными.Отправитель = Ссылка;
			ЭлементДанных.ОбменДанными.Загрузка = Истина;
			ЭлементДанных.ДополнительныеСвойства.Вставить("ЗагрузкаДанныхИзРабочегоМеста");
			ЭлементДанных.Записать(РежимЗаписиДокумента.Запись);
			МассивОбъектовКПроведению.Добавить(ЭлементДанных.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ТипЭлемента = ТипЗнч(ЭлементДанных);
	
	Если ОписаниеТиповПеремещение.СодержитТип(ТипЭлемента) Тогда
		ОбновитьПеремещениеПоТТН(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад)
	
	ТипЭлемента = ТипЗнч(ЭлементДанных);
	
	Если ОписаниеТиповПеремещение.СодержитТип(ТипЭлемента) Тогда
		ОбновитьПеремещениеПоТТН(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗагрузкиДанных(Отказ)
	
	Если МассивОбъектовКПроведению.Количество() > 0 Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЧекККМ.Ссылка КАК Ссылка,
		|	ЧекККМ.Дата КАК Дата,
		|	ЧекККМ.МоментВремени КАК МоментВремени,
		|	ЧекККМ.Проведен КАК Проведен
		|ИЗ
		|	Документ.ЧекККМ КАК ЧекККМ
		|ГДЕ
		|	ЧекККМ.Ссылка В(&МассивОбъектовКПроведению)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	МоментВремени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка,
		|	ОтчетОРозничныхПродажах.Дата КАК Дата,
		|	ОтчетОРозничныхПродажах.МоментВремени КАК МоментВремени,
		|	ОтчетОРозничныхПродажах.Проведен КАК Проведен
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|ГДЕ
		|	ОтчетОРозничныхПродажах.Ссылка В(&МассивОбъектовКПроведению)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтчетОРозничныхПродажах.Дата,
		|	ОтчетОРозничныхПродажах.МоментВремени");
		
		Запрос.УстановитьПараметр("МассивОбъектовКПроведению",МассивОбъектовКПроведению);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Для Инд = 0 По 1 Цикл
			
			Если НЕ РезультатЗапроса[Инд].Пустой() Тогда
				
				Выборка = РезультатЗапроса[Инд].Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					Попытка
						
						ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
						
						Если Выборка.Проведен Тогда
							
							РежимЗаписи = РежимЗаписиДокумента.Проведение;
							
						Иначе	
							
							РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
							
						КонецЕсли;
						
						ДокументОбъект.ОбменДанными.Отправитель = Ссылка;
						ДокументОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаДанныхИзРабочегоМеста");
						ДокументОбъект.Записать(РежимЗаписи);
						
					Исключение
						
						Инфо = ИнформацияОбОшибке();
						ТекстСообщенияОбОшибке = НСтр("ru = 'Ошибка при проведении документа: %1. 
						|При загрузке данных по рабочему месту: %2'");
						ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, КраткоеПредставлениеОшибки(Инфо), Ссылка);
						ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными.Загрузка данных'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,Инфо);
						
					КонецПопытки;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПеремещениеПоТТН(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад)
	
	Если НЕ ЗначениеЗаполнено(ЭлементДанных.ТТНВходящаяЕГАИС) Тогда
		Если ЭлементДанных.ЭтоНовый() Тогда
			ИдентификаторПеремещения = СокрЛП(ЭлементДанных.ПолучитьСсылкуНового().УникальныйИдентификатор());
		Иначе
			ИдентификаторПеремещения = СокрЛП(ЭлементДанных.Ссылка.УникальныйИдентификатор());
		КонецЕсли;
		ТТН = ИнтеграцияЕГАИСРТ.НайтиТТНПоИдентификаторуПеремещения(ИдентификаторПеремещения);
		Если ЗначениеЗаполнено(ТТН) Тогда
			ЭлементДанных.ТТНВходящаяЕГАИС = ТТН;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьОбъект(ДанныеЗаполнения)
	
	Если Не ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаВыгрузкиДокументов	= НачалоГода(ТекущаяДатаСеанса());

КонецПроцедуры

#КонецОбласти

ОписаниеТиповОбъектовКПроведению = Новый ОписаниеТипов("ДокументОбъект.ЧекККМ, ДокументОбъект.ОтчетОРозничныхПродажах");
МассивОбъектовКПроведению = Новый Массив;
ОписаниеТиповПеремещение = Новый ОписаниеТипов("ДокументОбъект.ПеремещениеТоваров");

#КонецЕсли
