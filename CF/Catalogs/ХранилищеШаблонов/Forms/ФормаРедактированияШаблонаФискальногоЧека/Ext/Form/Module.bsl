
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОповещениеВыбораШаблонаЧека(ОтветФормы, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	Если ТипЗнч(ОтветФормы) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ОтветФормы);
		СформироватьМакетФискальногоЧека();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаШаблонаПоУмолчанию(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ОбъектМетаданных = "Документ.ЧекККМ"
		ИЛИ Параметры.ОбъектМетаданных = "Документ.ПриходныйКассовыйОрдер"
		ИЛИ Параметры.ОбъектМетаданных = "Документ.РасходныйКассовыйОрдер"
		Тогда
		ЗагрузитьШаблонПоУмолчаниюСервер(Параметры.ОбъектМетаданных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОчиститьШаблон(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьШаблонСервер(Параметры.ОбъектМетаданных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеИмпортироватьШаблонИзФайла(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Расширение = "txt";
	ДиалогВыбораФайла.Фильтр = "Шаблон фискального чека(*.txt)|*.txt";
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
										"ВыборФайлаИмпортаШаблонаЗавершение",
										ЭтотОбъект,
										ДополнительныеПараметры);
	ДиалогВыбораФайла.Показать(ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаИмпортаШаблонаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено
		И ВыбранныеФайлы.Количество() > 0 Тогда
		ДополнительныеПараметры.Вставить("ИмяФайла", ВыбранныеФайлы[0]);
		ОбработчикОповещения = Новый ОписаниеОповещения(
										"ИмпортШаблонаИзФайлаЗавершение",
										ЭтотОбъект,
										ДополнительныеПараметры);
		НачатьПомещениеФайлов(ОбработчикОповещения, Неопределено, ВыбранныеФайлы[0], Ложь) 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортШаблонаИзФайлаЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы.Количество() > 0 Тогда
		АдресФайла = ПомещенныеФайлы[0].Хранение;
		ИмпортироватьШаблонИзФайлаСервер(Параметры.ОбъектМетаданных, АдресФайла);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		// отмена
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	Иначе
		ПараметрЗакрытия = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЭкспортироватьШаблонВФайл(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено
		И ВыбранныеФайлы.Количество() > 0 Тогда
		ПолноеИмяФайла = ВыбранныеФайлы[0];
		АдресФайлаНаСервере = ЭкспортШаблонаВФайлСервер();
		Если ЗначениеЗаполнено(АдресФайлаНаСервере) Тогда
			ПолучитьФайл(АдресФайлаНаСервере, ПолноеИмяФайла, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка корректности типа метаданных, для которого необходимо получить шаблон.
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(Параметры.ОбъектМетаданных);
	ИмяОбъектаМетаданных = МетаданныеОбъекта.Имя;
	
	Если МетаданныеОбъекта = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден объект метаданных: %1'"),
			Параметры.ОбъектМетаданных
		);
		ВызватьИсключение ТекстОшибки;

	КонецЕсли;
	// Проверка корректности эталонного шаблона.
	ОшибкаЗагрузкиЭталонногоШаблона = Ложь;
	ТекстовыйДокумент = Справочники.ХранилищеШаблонов.ПолучитьМакет("ПустойШаблонЧека");
	Попытка
		ПустоеДерево = ЗначениеИзСтрокиВнутр(ТекстовыйДокумент.ПолучитьТекст());
		Если ТипЗнч(ПустоеДерево) <> Тип("ДеревоЗначений") Тогда
			ОшибкаЗагрузкиЭталонногоШаблона = Истина;
		КонецЕсли;
	Исключение
		ОшибкаЗагрузкиЭталонногоШаблона = Истина;
	КонецПопытки;
	Если ОшибкаЗагрузкиЭталонногоШаблона Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка загрузки эталонного шаблона'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ДокументДляШаблонаЧека = Неопределено;
	ПараметрВыбораДокументаДляШаблонаЧека = Неопределено;
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя());
	Если МенеджерОбъекта <> Неопределено Тогда
		
		ИмяСтраницыКомпоновщикаНастроек = "";
		Для Каждого Макет Из МетаданныеОбъекта.Макеты Цикл
			Если Макет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных 
				И СтрЧислоВхождений(Макет.Имя, "ПоляШаблона") > 0.00
				И Элементы.Найти("СКД" + МетаданныеОбъекта.Имя + Макет.Имя) <> Неопределено Тогда
				
				ИмяСтраницыКомпоновщикаНастроек = "СКД" + МетаданныеОбъекта.Имя + Макет.Имя;
				
				СхемаКомпоновкиДанных = МенеджерОбъекта.ПолучитьМакет(Макет.Имя);
				URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
				ИсточникДоступныхНастроекКомпоновкиДанных = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
				ЭтаФорма[ИмяСтраницыКомпоновщикаНастроек].Инициализировать(ИсточникДоступныхНастроекКомпоновкиДанных);
				СтрокаМакета = СписокИсточникДоступныхНастроек.Добавить();
				СтрокаМакета.URLСхемы = URLСхемы;
				СтрокаМакета.ИмяСтраницы = ИмяСтраницыКомпоновщикаНастроек;
				Если Макет.Имя = "ПоляШаблона" Тогда
					ДокументДляШаблонаЧека = МенеджерОбъекта.ДокументДляШаблонаЧека();
					ПараметрВыбораДокументаДляШаблонаЧека = МенеджерОбъекта.СвязьПараметровВыбораНаХозяйственнуюОперацию();
					мСхемаКомпоновкиДанных = URLСхемы;
					мСхемаКомпоновкиДанныхАдрес = URLСхемы;
					
					мКомпоновщикМакета = Новый КомпоновщикНастроекКомпоновкиДанных;
					мКомпоновщикМакета.Инициализировать(ИсточникДоступныхНастроекКомпоновкиДанных);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ШаблонОбъекта = ?(ПустаяСтрока(Параметры.АдресШаблона), Неопределено, ПолучитьИзВременногоХранилища(Параметры.АдресШаблона));
	
	// Проверка структуры загружаемого шаблона.
	// Корректный шаблон должен удовлетворять следующим правилам:
	// - Дерево соответствует по структуре колонок дереву на форме.
	
	СтруктураШаблонаКорректна = Истина;
	Если ТипЗнч(ШаблонОбъекта) = Тип("Структура") Тогда
		Для каждого КолонкаШаблона Из ПустоеДерево.Колонки Цикл
			Если ШаблонОбъекта.Шаблон.Колонки.Найти(КолонкаШаблона.Имя) = Неопределено Тогда
				СтруктураШаблонаКорректна = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	МодифицированностьПараметр = Ложь;
	Если ТипЗнч(ШаблонОбъекта) = Тип("Структура") И СтруктураШаблонаКорректна Тогда
		// Прочитать значения из структуры.
		Если ШаблонОбъекта.Шаблон.Колонки.Найти("ИндексКартинки") = Неопределено Тогда
			ШаблонОбъекта.Шаблон.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число"));
		КонецЕсли;
		ЗначениеВРеквизитФормы(ШаблонОбъекта.Шаблон, "ШаблонЧека");
		ШаблонОбъекта.Свойство("ШиринаЧека"          ,мШиринаЧека);
		Если мШиринаЧека = Неопределено Тогда
			мШиринаЧека = 32;
		КонецЕсли; 
		ШаблонОбъекта.Свойство("ОднаФискальнаяСтрока",ОднаФискальнаяСтрока);
		Если ОднаФискальнаяСтрока = Неопределено Тогда
			ОднаФискальнаяСтрока = Истина;
		КонецЕсли; 
		ШаблонОбъекта.Свойство("ЧекККМ"              ,ЧекККМ);
		
	Иначе
		// Если структура шаблона не корректна...
		Если НЕ СтруктураШаблонаКорректна Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Структура шаблона не корректна. Загружен шаблон по умолчанию.'"));
		КонецЕсли;
		ОбъектШаблонЧека = Новый ДеревоЗначений();
		// Формирование структуры по умолчанию.
		ЧекККМ = ПечатьФискальныхЧеков.СформироватьПервичнуюСтруктуруИерархическогоШаблона(ОбъектШаблонЧека, Параметры.ОбъектМетаданных, ПустоеДерево);
		Если ОбъектШаблонЧека.Колонки.Найти("ИндексКартинки") = Неопределено Тогда
			ОбъектШаблонЧека.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число"));
		КонецЕсли;
		ЗначениеВРеквизитФормы(ОбъектШаблонЧека, "ШаблонЧека");
		// Режим одна фискальная строка включен по умолчанию.
		ОднаФискальнаяСтрока = Истина;
		мШиринаЧека = 32;
		МодифицированностьПараметр = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЧекККМ) И ЧекККМ.ПолучитьОбъект() = Неопределено Тогда
		ЧекККМ = Документы.ЧекККМ.ПустаяСсылка();
	КонецЕсли;
	Если ПараметрВыбораДокументаДляШаблонаЧека <> Неопределено Тогда
		Элементы.ЧекККМ.ПараметрыВыбора = ПараметрВыбораДокументаДляШаблонаЧека;
	КонецЕсли;
	
	// Поиск документа для тестирования шаблона.
	Если НЕ ЗначениеЗаполнено(ЧекККМ) Тогда
		ЧекККМ = ДокументДляШаблонаЧека;
	КонецЕсли;
	
	мСписокОшибочныхПолей = Новый Соответствие();
	КомпоновщикНастроек = ЭтаФорма["СКД" + ИмяОбъектаМетаданных + "ПоляШаблона"];
	ПолучитьСписокОшибочныхПолейСКД(РеквизитФормыВЗначение("ШаблонЧека", Тип("ДеревоЗначений")), мСписокОшибочныхПолей, КомпоновщикНастроек);
	Попытка
		СформироватьМакетФискальногоЧека(МодифицированностьПараметр);
	Исключение
		СтрокаОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(ЧекККМ) Тогда
		мКомпоновщикМакета = Новый КомпоновщикНастроекКомпоновкиДанных;
		мСхемаКомпоновкиДанныхАдрес = "";
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ШаблонСохраняется = Истина;
	Если ПараметрЗакрытия = Неопределено И Модифицированность Тогда
		
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Шаблон был изменен. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Да);
		
	Иначе
		
		Если Модифицированность Тогда
			Структура = Новый Структура();
			Структура.Вставить("ЧекККМ", ЧекККМ);
			Структура.Вставить("ОднаФискальнаяСтрока", ОднаФискальнаяСтрока);
			Структура.Вставить("ШиринаЧека", мШиринаЧека);
			Оповестить("ИзмененШаблонЧека", ПоместитьВоВременноеХранилищеШаблон(Структура), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СписокШиринаЧекаПриИзменении(Элемент)
	Перем ТекстСообщения;
	МассивНайденныхСтрок = Новый Массив();
	НайтиСтрокиВШаблонеПоУсловию("ТипЭлемента","Таблица", МассивНайденныхСтрок, ШаблонЧека);
	
	МаксимальнаяШиринаТаблицы = 0;
	Для Каждого СтрокаШаблонаТаблица Из МассивНайденныхСтрок Цикл
		ШиринаТаблицы = 0;
		Для каждого Строка Из СтрокаШаблонаТаблица.ПолучитьЭлементы() Цикл
			ШиринаТаблицы = ШиринаТаблицы + Строка.Ширина;
		КонецЦикла;
		Если ШиринаТаблицы > МаксимальнаяШиринаТаблицы Тогда
			МаксимальнаяШиринаТаблицы = ШиринаТаблицы;
		КонецЕсли;
	КонецЦикла;
	
	ТекстСообщения = "";
	
	Если МаксимальнаяШиринаТаблицы > мШиринаЧека Тогда
		// Ширина чека устанавливается равной ширине таблицы.
		мШиринаЧека = МаксимальнаяШиринаТаблицы;
		ТекстСообщения = НСтр("ru = 'Ширина таблицы шаблона превышает ширину чека.'") + Символы.ПС +
						 НСтр("ru = 'Установлена новая ширина чека:'") + " " + МаксимальнаяШиринаТаблицы + " " + НСтр("ru = 'символов.'");
	КонецЕсли;
	
	Для каждого Строка0Уровня Из ШаблонЧека.ПолучитьЭлементы() Цикл
		Для каждого Строка1Уровня Из Строка0Уровня.ПолучитьЭлементы() Цикл
			Строка1Уровня.Ширина = мШиринаЧека;
		КонецЦикла;
	КонецЦикла;
	
	ШаблонЧека.НайтиПоИдентификатору(Элементы.ШаблонЧека.ТекущиеДанные.ПолучитьИдентификатор()).Свойство("Идентификатор", ИдентификаторТекущейСтрокиШаблона);
	
	СписокШиринаЧекаПриИзмененииСервер();
	
	ПриДобавленииНовойСтрокиШаблона();
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ПоказатьПредупреждение(,ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекККМПриИзменении(Элемент)
	
	мКэшМакетовАдрес = "";
	мКэшТаблицыРезультатаКомпоновкиАдрес = "";
	СформироватьМакетФискальногоЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ОднаФискальнаяСтрокаПриИзменении(Элемент)
	
	СформироватьМакетФискальногоЧека();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпоновщикНастроекСКДПриходныйКассовыйОрдерПоляШаблона

&НаКлиенте
Процедура КомпоновщикНастроекСКДПриходныйКассовыйОрдерПоляШаблонаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДобавитьРеквизитДокументаВШаблонЧека(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпоновщикНастроекСКДПриходныйКассовыйОрдерПоляШаблонаШапка

&НаКлиенте
Процедура КомпоновщикНастроекСКДПриходныйКассовыйОрдерПоляШаблонаШапкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДобавитьРеквизитДокументаВШаблонЧека(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпоновщикНастроекСКДПриходныйКассовыйОрдерПоляШаблонаТЧ

&НаКлиенте
Процедура КомпоновщикНастроекСКДПриходныйКассовыйОрдерПоляШаблонаТЧВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДобавитьРеквизитДокументаВШаблонЧека(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпоновщикНастроекСКДРасходныйКассовыйОрдерПоляШаблона

&НаКлиенте
Процедура КомпоновщикНастроекСКДРасходныйКассовыйОрдерПоляШаблонаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДобавитьРеквизитДокументаВШаблонЧека(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпоновщикНастроекСКДРасходныйКассовыйОрдерПоляШаблонаТЧ

&НаКлиенте
Процедура КомпоновщикНастроекСКДРасходныйКассовыйОрдерПоляШаблонаТЧВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДобавитьРеквизитДокументаВШаблонЧека(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпоновщикНастроекСКДРасходныйКассовыйОрдерПоляШаблонаШапка

&НаКлиенте
Процедура КомпоновщикНастроекСКДРасходныйКассовыйОрдерПоляШаблонаШапкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДобавитьРеквизитДокументаВШаблонЧека(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпоновщикНастроекСКДЧекККМПоляШаблона

&НаКлиенте
Процедура КомпоновщикНастроекСКДЧекККМПоляШаблонаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДобавитьРеквизитДокументаВШаблонЧека(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпоновщикНастроекСКДЧекККМПоляШаблонаТЧ_Товары

&НаКлиенте
Процедура КомпоновщикНастроекСКДЧекККМПоляШаблонаТЧ_ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДобавитьРеквизитДокументаВШаблонЧека(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпоновщикНастроекСКДЧекККМПоляШаблонаШапка

&НаКлиенте
Процедура КомпоновщикНастроекСКДЧекККМПоляШаблонаШапкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДобавитьРеквизитДокументаВШаблонЧека(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпоновщикНастроекСКДЧекККМПоляШаблонаПодарки

&НаКлиенте
Процедура КомпоновщикНастроекСКДЧекККМПоляШаблонаПодаркиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДобавитьРеквизитДокументаВШаблонЧека(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпоновщикНастроекСКДЧекККМПоляШаблонаТЧ_Подарки

&НаКлиенте
Процедура КомпоновщикНастроекСКДЧекККМПоляШаблонаТЧ_ПодаркиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДобавитьРеквизитДокументаВШаблонЧека(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпоновщикНастроекСКДЧекККМПоляШаблонаШапкаПодарки

&НаКлиенте
Процедура КомпоновщикНастроекСКДЧекККМПоляШаблонаШапкаПодаркиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДобавитьРеквизитДокументаВШаблонЧека(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыШаблонЧека

&НаКлиенте
Процедура ШаблонЧекаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ШаблонЧека.НайтиПоИдентификатору(ВыбраннаяСтрока).ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока = ШаблонЧека.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Идентификатор = РодительскаяСтрокаШаблонаЧека(ТекущаяСтрока).Идентификатор;
	Идентификатор = ТекущаяСтрока.Идентификатор;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Идентификатор", Идентификатор);
	СтруктураПараметров.Вставить("мКэшМакетовАдрес", мКэшМакетовАдрес);
	СтруктураПараметров.Вставить("мСтрокаДерева", ШаблонЧека);
	СтруктураПараметров.Вставить("Формат", ТекущаяСтрока.Формат);
	СтруктураПараметров.Вставить("ШиринаСтроки", ТекущаяСтрока.Ширина);
	СтруктураПараметров.Вставить("РазмещениеТекста", ТекущаяСтрока.РазмещениеТекста);
	СтруктураПараметров.Вставить("Выравнивание", ТекущаяСтрока.Выравнивание);
	СтруктураПараметров.Вставить("Наименование", ТекущаяСтрока.Элемент);
	СтруктураПараметров.Вставить("Вычислять", ТекущаяСтрока.Вычислять);
	СтруктураПараметров.Вставить("Префикс", ТекущаяСтрока.Префикс);
	СтруктураПараметров.Вставить("Постфикс", ТекущаяСтрока.Постфикс);
	СтруктураПараметров.Вставить("ТипЭлемента", ТекущаяСтрока.ТипЭлемента);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	
	Обработчик = Новый ОписаниеОповещения("ОповещениеВыбораШаблонаЧека", ЭтотОбъект, ДополнительныеПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ХранилищеШаблонов.Форма.ФормаРедактированияПараметров", СтруктураПараметров, ЭтаФорма,,,, Обработчик, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЧекаПередУдалением(Элемент, Отказ)
	
	ДанныеТекущейСтроки = Элементы.ШаблонЧека.ДанныеСтроки(Элементы.ШаблонЧека.ТекущаяСтрока);
	Если Элементы.ШаблонЧека.ТекущаяСтрока = Неопределено
		ИЛИ ДанныеТекущейСтроки.ПолучитьРодителя() = Неопределено
	Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Идентификатор = РодительскаяСтрокаШаблонаЧека(ДанныеТекущейСтроки).Идентификатор;
	КоллекцияСтрокТекущейСтроки = КоллекцияСтрокДляРодителяТекущейСтрокиШаблона();
	Родитель = ДанныеТекущейСтроки.ПолучитьРодителя();
	Индекс = КоллекцияСтрокТекущейСтроки.Индекс(ДанныеТекущейСтроки);
	ИДСтроки = ДанныеТекущейСтроки.ПолучитьИдентификатор();
	
	Если Родитель.ПолучитьЭлементы().Количество() = 1 Тогда
		Элементы.ШаблонЧека.ТекущаяСтрока = 1;
	Иначе
		Элементы.ШаблонЧека.ТекущаяСтрока = ?(ИДСтроки=0,ИДСтроки+1,ИДСтроки)-1;
	КонецЕсли;
	КоллекцияСтрокТекущейСтроки.Удалить(Индекс);
	Модифицированность = Истина;
	ШаблонЧекаПередУдалениемСервер(Идентификатор);
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЧекаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЧекаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавитьПользовательскуюСтрокуВШаблонЧека("Строка", "СтрокаТекста");
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЧекаПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.ШаблонЧека.ДанныеСтроки(Элементы.ШаблонЧека.ТекущаяСтрока);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Итератор = 0 По МАКС(Элементы.ШаблонЧекаГруппаКнопок.ПодчиненныеЭлементы.Количество(),
							Элементы.ШаблонЧекаГруппаРедактированияСтрокШаблона.ПодчиненныеЭлементы.Количество(),
							Элементы.ШаблонЧекаКонтекстноеМенюГруппаМеню.ПодчиненныеЭлементы.Количество(),
							Элементы.ШаблонЧекаГруппаРедактированияСтрокШаблона.ПодчиненныеЭлементы.Количество()) - 1
	Цикл
		Если Итератор <= Элементы.ШаблонЧекаГруппаКнопок.ПодчиненныеЭлементы.Количество() - 1 Тогда
			УстановитьДоступностьКомандеФормыДляШаблонаЧека(Элементы.ШаблонЧекаГруппаКнопок, Элементы.ШаблонЧекаГруппаКнопок.ПодчиненныеЭлементы.Получить(Итератор).Имя, Истина);
		КонецЕсли;
		Если Итератор <= Элементы.ШаблонЧекаГруппаРедактированияСтрокШаблона.ПодчиненныеЭлементы.Количество()  - 1 Тогда
			УстановитьДоступностьКомандеФормыДляШаблонаЧека(Элементы.ШаблонЧекаГруппаРедактированияСтрокШаблона, Элементы.ШаблонЧекаГруппаРедактированияСтрокШаблона.ПодчиненныеЭлементы.Получить(Итератор).Имя, Истина);
		КонецЕсли;
		
		Если Итератор <= Элементы.ШаблонЧекаКонтекстноеМенюГруппаМеню.ПодчиненныеЭлементы.Количество() - 1 Тогда
			УстановитьДоступностьКомандеФормыДляШаблонаЧека(Элементы.ШаблонЧекаКонтекстноеМенюГруппаМеню, Элементы.ШаблонЧекаКонтекстноеМенюГруппаМеню.ПодчиненныеЭлементы.Получить(Итератор).Имя, Истина);
		КонецЕсли;
		Если Итератор <= Элементы.ШаблонЧекаКонтекстноеМенюГруппаСтрокШаблонаМеню.ПодчиненныеЭлементы.Количество() - 1 Тогда
			УстановитьДоступностьКомандеФормыДляШаблонаЧека(Элементы.ШаблонЧекаКонтекстноеМенюГруппаСтрокШаблонаМеню, Элементы.ШаблонЧекаКонтекстноеМенюГруппаСтрокШаблонаМеню.ПодчиненныеЭлементы.Получить(Итератор).Имя, Ложь);
		КонецЕсли;
		
	КонецЦикла;
	// Управление кнопкой командной панели добавить таблицу.
	Если НЕ (ТекущаяСтрока.ПолучитьРодителя() = Неопределено
		ИЛИ ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя() = Неопределено)
	Тогда
		УстановитьДоступностьКомандеФормыДляШаблонаЧека(Элементы.ШаблонЧека.КоманднаяПанель, "ДобавитьСтрокуТаблицы", Ложь);
	КонецЕсли;
	// Управление кнопкой командной панели добавить таблицу.
	Если ТекущаяСтрока.ПолучитьРодителя() = Неопределено Тогда
		УстановитьДоступностьКомандеФормыДляШаблонаЧека(Элементы.ШаблонЧекаГруппаКнопок, "УдалитьТекущуюСтроку", Ложь);
		УстановитьДоступностьКомандеФормыДляШаблонаЧека(Элементы.ШаблонЧекаКонтекстноеМенюГруппаМеню, "УдалитьТекущуюСтрокуМеню", Ложь);
	КонецЕсли;
	
	Если ТекущаяСтрока.ТипЭлемента = "СоставнаяСтрока" 
		ИЛИ ТекущаяСтрока.ТипЭлемента = "Таблица" Тогда
		
		УстановитьДоступностьКомандеФормыДляШаблонаЧека(Элементы.ШаблонЧекаГруппаРедактированияСтрокШаблона, "ДобавитьПользовательскуюСтроку", Истина);
		УстановитьДоступностьКомандеФормыДляШаблонаЧека(Элементы.ШаблонЧекаГруппаРедактированияСтрокШаблона, "ДобавитьСоставнуюСтроку", Истина);
		
		УстановитьДоступностьКомандеФормыДляШаблонаЧека(Элементы.ШаблонЧекаКонтекстноеМенюГруппаСтрокШаблонаМеню, "ДобавитьПользовательскуюСтрокуМеню", Истина);
		УстановитьДоступностьКомандеФормыДляШаблонаЧека(Элементы.ШаблонЧекаКонтекстноеМенюГруппаСтрокШаблонаМеню, "ДобавитьСоставнуюСтрокуМеню", Истина);
		
	ИначеЕсли ТекущаяСтрока.ТипЭлемента = "ОбластьЧека" Тогда
		УстановитьДоступностьКомандеФормыДляШаблонаЧека(Элементы.ШаблонЧекаГруппаРедактированияСтрокШаблона, "ДобавитьПользовательскуюСтроку", Истина);
		УстановитьДоступностьКомандеФормыДляШаблонаЧека(Элементы.ШаблонЧекаГруппаРедактированияСтрокШаблона, "ДобавитьСоставнуюСтроку", Истина);
		УстановитьДоступностьКомандеФормыДляШаблонаЧека(Элементы.ШаблонЧекаГруппаРедактированияСтрокШаблона, "ДобавитьСтрокуТаблицы", Истина);
		
		УстановитьДоступностьКомандеФормыДляШаблонаЧека(Элементы.ШаблонЧекаКонтекстноеМенюГруппаСтрокШаблонаМеню, "ДобавитьПользовательскуюСтрокуМеню", Истина);
		УстановитьДоступностьКомандеФормыДляШаблонаЧека(Элементы.ШаблонЧекаКонтекстноеМенюГруппаСтрокШаблонаМеню, "ДобавитьСоставнуюСтрокуМеню", Истина);
		УстановитьДоступностьКомандеФормыДляШаблонаЧека(Элементы.ШаблонЧекаКонтекстноеМенюГруппаСтрокШаблонаМеню, "ДобавитьСтрокуТаблицыМеню", Истина);
		
	КонецЕсли;
	
	ИмяМакета = НаименованиеМакетаШаблонаЧека(ТекущаяСтрока).ИмяМакета;
	
	// Доступные поля макета для каждой системной строки шаблона.
	Если ИмяМакета <> мТекущееИмяМакета Тогда
		Элементы.ГруппаКомпоновщикиНастроек.ТекущаяСтраница = Элементы["СКД"+ ИмяОбъектаМетаданных + ИмяМакета];
		мТекущееИмяМакета = ИмяМакета;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЧекаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЭкспортШаблонаВФайл(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Расширение = "txt";
	ДиалогВыбораФайла.Фильтр = "Шаблон фискального чека(*.txt)|*.txt";
	
	ДополнительныеПараметры = Новый Структура;
	ОбработчикОповещения = Новый ОписаниеОповещения(
										"ОповещениеЭкспортироватьШаблонВФайл",
										ЭтотОбъект,
										ДополнительныеПараметры);
	ДиалогВыбораФайла.Показать(ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПримерЧека(Команда)
	
	СформироватьМакетФискальногоЧека(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШаблонПоУмолчанию(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаШаблонаПоУмолчанию", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Текущий шаблон будет заменен на шаблон по умолчанию?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьШаблон(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеОчиститьШаблон", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Очистить текущий шаблон?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьШаблонИзФайла(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеИмпортироватьШаблонИзФайла", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Текущий шаблон будет потерян. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗакрытьФорму(Команда)
	
	ПараметрЗакрытия = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВШаблонСтрокуТабличногоТипаИзМеню(Команда)
	
	ТекущаяСтрока = Элементы.ШаблонЧека.ДанныеСтроки(Элементы.ШаблонЧека.ТекущаяСтрока);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПользовательскуюСтрокуВШаблонЧека(НСтр("ru = 'Строка таблицы'"), "Таблица", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВШаблонСтрокуТабличногоТипа(Команда)
	
	ДобавитьПользовательскуюСтрокуВШаблонЧека(НСтр("ru = 'Строка таблицы'"), "Таблица");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВШаблонСтрокуСоставногоТипаИзМеню(Команда)
	
	ТекущаяСтрока = Элементы.ШаблонЧека.ДанныеСтроки(Элементы.ШаблонЧека.ТекущаяСтрока);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПользовательскуюСтрокуВШаблонЧека(НСтр("ru = 'Составная строка'"), "СоставнаяСтрока", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВШаблонСтрокуСоставногоТипа(Команда)
	
	ДобавитьПользовательскуюСтрокуВШаблонЧека(НСтр("ru = 'Составная строка'"), "СоставнаяСтрока");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВШаблонСтрокуПроизвольногоТекстаИзМеню(Команда)
	
	ТекущаяСтрока = Элементы.ШаблонЧека.ДанныеСтроки(Элементы.ШаблонЧека.ТекущаяСтрока);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПользовательскуюСтрокуВШаблонЧека("Строка", "СтрокаТекста", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВШаблонСтрокуПроизвольногоТекста(Команда)
	
	ДобавитьПользовательскуюСтрокуВШаблонЧека("Строка", "СтрокаТекста");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВШаблонДоступнуюСтроку(Команда)
	Если ТипЗнч(ЭтаФорма.ТекущийЭлемент) = Тип("ТаблицаФормы") Тогда
		Если Найти(ЭтаФорма.ТекущийЭлемент.Имя, "КомпоновщикНастроек") > 0.00 Тогда
			Для Каждого ВыбраннаяСтрока Из ЭтаФорма.ТекущийЭлемент.ВыделенныеСтроки Цикл
				ДобавитьРеквизитДокументаВШаблонЧека(ЭтаФорма.ТекущийЭлемент, ВыбраннаяСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеИОтображениеВнешнегоВидаПримераЧека

// Выполняет формирование изображения фискального чека по заданному шаблону.
//
// Параметры:
//  НовоеЗначениеМодифицированностиФормы - <Булево> - Значение Истина означает, что процедура вызвана при изменении
//                                                    реквизитов влияющих на изменение шаблона чека.
//
&НаСервере
Процедура СформироватьМакетФискальногоЧека(НовоеЗначениеМодифицированностиФормы = Истина)
	
	Модифицированность = ?(Модифицированность = Истина, Модифицированность, НовоеЗначениеМодифицированностиФормы);
	ПоказатьПримерФискальногоЧека();
	
КонецПроцедуры

// Выполняет формирование макета фискального чека.
//
&НаСервере
Процедура ПоказатьПримерФискальногоЧека()
	
	ПолеТабличногоДокумента.Очистить();
	Если НЕ ЗначениеЗаполнено(ЧекККМ) Тогда
		Возврат;
	КонецЕсли;
	мСоответствиеОбластиСтрокеДерева = Новый Соответствие;
	
	// Подставим в шаблон фискальные строки чека...
	КопияШаблона = ПечатьФискальныхЧеков.СформироватьФискальныеСтрокиМакетаФискальногоЧека(Параметры.ОбъектМетаданных, РеквизитФормыВЗначение("ШаблонЧека", Тип("ДеревоЗначений")).Скопировать(), мШиринаЧека, ОднаФискальнаяСтрока);
	
	ПараметрыПолученияМакета = Новый Структура();
	ПараметрыПолученияМакета.Вставить("СхемаКомпоновкиДанных", ПолучитьИзВременногоХранилища(мСхемаКомпоновкиДанныхАдрес));
	ПараметрыПолученияМакета.Вставить("КомпоновщикМакета", мКомпоновщикМакета);
	КэшМакетов = ?(ПустаяСтрока(мКэшМакетовАдрес), Новый Соответствие(), ПолучитьИзВременногоХранилища(мКэшМакетовАдрес));
	ПараметрыПолученияМакета.Вставить("КэшМакетов", КэшМакетов);
	ПараметрыПолученияМакета.Вставить("ИмяМакета", мИмяМакета);
	мКэшТаблицыРезультатаКомпоновкиОбъект = ?(ПустаяСтрока(мКэшТаблицыРезультатаКомпоновкиАдрес), Новый ДеревоЗначений(), ПолучитьИзВременногоХранилища(мКэшТаблицыРезультатаКомпоновкиАдрес));
	
	Если мКэшТаблицыРезультатаКомпоновкиОбъект.Строки.Количество() > 0.00 Тогда
		ПараметрыПолученияМакета.Вставить("КэшТаблицыРезультатаКомпоновки", мКэшТаблицыРезультатаКомпоновкиОбъект);
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЧекККМ);
	Если МенеджерОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Соответствие = МенеджерОбъекта.МакетФискальногоЧека(ЧекККМ, КопияШаблона, мШиринаЧека, ПараметрыПолученияМакета);
	
	мСхемаКомпоновкиДанныхАдрес = ПоместитьВоВременноеХранилище(ПараметрыПолученияМакета.СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	мКэшТаблицыРезультатаКомпоновкиАдрес = ПоместитьВоВременноеХранилище(ПараметрыПолученияМакета.КэшТаблицыРезультатаКомпоновки.Скопировать(), Новый УникальныйИдентификатор);
	мКомпоновщикМакета     = ПараметрыПолученияМакета.КомпоновщикМакета;
	мКэшМакетовАдрес       = ПоместитьВоВременноеХранилище(ПараметрыПолученияМакета.КэшМакетов, Новый УникальныйИдентификатор);
	мИмяМакета             = ПараметрыПолученияМакета.ИмяМакета;
	
	КоличествоСтрокТабличнойЧасти = Соответствие["КоличествоСтрокТабличнойЧасти"];
	РезультатКомпоновкиДанных     = Соответствие["РезультатКомпоновкиДанных"];
	
	// Конвертируем текстовый документ в табличный.
	ТекстовыйДокумент = Справочники.ХранилищеШаблонов.ПолучитьМакет("ТабличныйШаблон");
	Область = ТекстовыйДокумент.ПолучитьОбласть("Строка|Колонка");
	ПолеТабличногоДокумента.Вывести(ТекстовыйДокумент.ПолучитьОбласть("ПерваяСтрока|Колонка"));
	
	// Секция шапка чека...
	ПоказатьВнешнийВидЧека(Соответствие["Шапка"], ПолеТабличногоДокумента, Область, мСоответствиеОбластиСтрокеДерева);
	
	// Секция табличная часть чека...
	Если КоличествоСтрокТабличнойЧасти <> Неопределено Тогда
		Для СчетчикСтрок = 0 По КоличествоСтрокТабличнойЧасти - 1 Цикл
			ПоказатьВнешнийВидЧека(Соответствие["ТелоШапка_"+СчетчикСтрок], ПолеТабличногоДокумента, Область, мСоответствиеОбластиСтрокеДерева);
			ПоказатьВнешнийВидЧека(Соответствие["ТелоПодвал_"+СчетчикСтрок], ПолеТабличногоДокумента, Область, мСоответствиеОбластиСтрокеДерева);
		КонецЦикла;
	КонецЕсли;
	// Секция подвал чека...
	ПоказатьВнешнийВидЧека(Соответствие["Подвал"], ПолеТабличногоДокумента, Область, мСоответствиеОбластиСтрокеДерева);
	
	ПолеТабличногоДокумента.Вывести(ТекстовыйДокумент.ПолучитьОбласть("ПоследняяСтрока|Колонка"));
	
	// Подгоняем размер первой колонки под ширину символов.
	ОбластьПервойКолонки = ПолеТабличногоДокумента.Область("C2");
	ОбластьПервойКолонки.ШиринаКолонки = мШиринаЧека * 1.14321 + 0.7;
	
КонецПроцедуры

// Формирует пример шаблона чека на основании данных выбранного документа.
//
// Параметры:
//  СтрокиДляПечатиПримера - <Массив> - Массив строк которые будут выведены для отображения внешнего вида чека.
//  ТабличныйДокумент      - <ТабличныйДокумент> - табличный документ в который необходимо вывести массив строк.
//  Область                - <ОбластьТабличногоДокумента> - область макета табличного документа для вывода строк.
//
&НаСервере
Процедура ПоказатьВнешнийВидЧека(СтрокиДляПечатиПримера, ТабличныйДокумент, Область, мСоответствиеОбластиСтрокеДерева)
	
	Если СтрокиДляПечатиПримера <> Неопределено Тогда
		Для каждого Соответствие Из СтрокиДляПечатиПримера Цикл
			Для каждого ЭлементСоответствия Из Соответствие Цикл
				СтрокаДерева = ЭлементСоответствия.Ключ;
				МассивСтрок = ЭлементСоответствия.Значение;
				Для каждого СтрокаМассива Из МассивСтрок Цикл
					Строка = СтрокаМассива;
					Область.Параметры.Текст = Строка;
					ВыведеннаяОбласть = ПолеТабличногоДокумента.Вывести(Область);
					ВыведеннаяОбласть.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
					мСоответствиеОбластиСтрокеДерева.Вставить(ВыведеннаяОбласть, СтрокаДерева);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИмпортЭкспортШаблонПоУмолчаниюОчисткаСохранениеШаблонаЧека

&НаСервере
Функция ЭкспортШаблонаВФайлСервер()
	
	АдресФайла = "";
	ШаблонЧекаОбъект = РеквизитФормыВЗначение("ШаблонЧека", Тип("ДеревоЗначений"));
	ИмяВременногоФайла = КаталогВременныхФайлов() + Новый УникальныйИдентификатор + ".xml";
	СохранениеВыполнено = ЗначениеВФайл(ИмяВременногоФайла, ШаблонЧекаОбъект);
	Если СохранениеВыполнено Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтаФорма.УникальныйИдентификатор);
		УдалитьФайлы(ИмяВременногоФайла);
	КонецЕсли;
	
	Возврат АдресФайла;
	
КонецФункции

&НаСервере
Процедура ИмпортироватьШаблонИзФайлаСервер(ОбъектМетаданных, АдресФайла)
	
	Попытка
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
		ИмяВременногоФайла = КаталогВременныхФайлов() + Новый УникальныйИдентификатор + ".xml";
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		СтрокаСДеревомШаблонаФискальногоЧека = ЗначениеИзФайла(ИмяВременногоФайла);
		УдалитьФайлы(ИмяВременногоФайла);
		ТекстовыйДокумент = Справочники.ХранилищеШаблонов.ПолучитьМакет("ПустойШаблонЧека");
		
		Загружать = Истина;
		ПустоеДерево = ЗначениеИзСтрокиВнутр(ТекстовыйДокумент.ПолучитьТекст());
		Если ТипЗнч(ПустоеДерево) <> Тип("ДеревоЗначений")
			ИЛИ ТипЗнч(СтрокаСДеревомШаблонаФискальногоЧека) <> Тип("ДеревоЗначений") Тогда
			Загружать = Ложь;
		Иначе
			// Выполним проверку иерархического шаблона на корректность структуры колонок.
			Для каждого КолонкаШаблона Из ПустоеДерево.Колонки Цикл
				Если СтрокаСДеревомШаблонаФискальногоЧека.Колонки.Найти(КолонкаШаблона.Имя) = Неопределено Тогда
					Загружать = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			// Выполним проверку иерархического шаблона на принадлежность объекту.
			Для каждого Строка Из СтрокаСДеревомШаблонаФискальногоЧека.Строки Цикл
				Если НЕ Строка.ИмяОбъекта = ОбъектМетаданных Тогда
					Загружать = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		Загружать = Ложь;
	КонецПопытки;
	
	Если Загружать Тогда
		ШаблонЧекаОбъект = СтрокаСДеревомШаблонаФискальногоЧека.Скопировать();
		ЗначениеВРеквизитФормы(ШаблонЧекаОбъект, "ШаблонЧека");
		
		мКэшМакетовАдрес = "";
		мКэшТаблицыРезультатаКомпоновкиАдрес = "";
		
		СформироватьМакетФискальногоЧека();
	Иначе
		ТекстОшибки = НСтр("ru = 'Ошибка загрузки шаблона!'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьШаблонПоУмолчаниюСервер(ОбъектМетаданных)
	
	Если ОбъектМетаданных = "Документ.ЧекККМ" Тогда
		ТекстовыйДокумент = Документы.ЧекККМ.ПолучитьМакет("ШаблонФискальногоЧекаПоУмолчанию");
	ИначеЕсли ОбъектМетаданных = "Документ.ПриходныйКассовыйОрдер" Тогда
		ТекстовыйДокумент = Документы.ПриходныйКассовыйОрдер.ПолучитьМакет("ШаблонФискальногоЧекаПоУмолчанию");
	ИначеЕсли ОбъектМетаданных = "Документ.РасходныйКассовыйОрдер" Тогда
		ТекстовыйДокумент = Документы.РасходныйКассовыйОрдер.ПолучитьМакет("ШаблонФискальногоЧекаПоУмолчанию");
	КонецЕсли;
	ПустоеДерево = ЗначениеИзСтрокиВнутр(ТекстовыйДокумент.ПолучитьТекст());
	
	Загружать = Истина;
	
	Попытка
		ШаблонПустоеДерево = ЗначениеИзСтрокиВнутр(ТекстовыйДокумент.ПолучитьТекст());
		Если ТипЗнч(ШаблонПустоеДерево) <> Тип("ДеревоЗначений") Тогда
			Загружать = Ложь;
		Иначе
			
			// Выполним проверку иерархического шаблона на корректность структуры колонок.
			Для каждого КолонкаШаблона Из ПустоеДерево.Колонки Цикл
				Если ШаблонПустоеДерево.Колонки.Найти(КолонкаШаблона.Имя) = Неопределено Тогда
					Загружать = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			// Выполним проверку иерархического шаблона на принадлежность объекту.
			Для каждого Строка Из ШаблонПустоеДерево.Строки Цикл
				Если НЕ Строка.ИмяОбъекта = ОбъектМетаданных Тогда
					Загружать = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		Загружать = Ложь;
	КонецПопытки;
	
	Если Загружать Тогда
		ШаблонЧекаПустоеДерево = ШаблонПустоеДерево.Скопировать();
		ЗначениеВРеквизитФормы(ШаблонЧекаПустоеДерево, "ШаблонЧека");
		
		мКэшМакетовАдрес = "";
		мКэшТаблицыРезультатаКомпоновкиАдрес = "";
		
		СформироватьМакетФискальногоЧека();
	Иначе
		ТекстОшибки = НСтр("ru = 'Ошибка загрузки шаблона по умолчанию!'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьШаблонСервер(ОбъектМетаданных)
	
	ТекстовыйДокумент = Справочники.ХранилищеШаблонов.ПолучитьМакет("ПустойШаблонЧека");
	Попытка
		ПустоеДерево = ЗначениеИзСтрокиВнутр(ТекстовыйДокумент.ПолучитьТекст());
	Исключение
		Возврат;
	КонецПопытки;
	Если ТипЗнч(ПустоеДерево) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектШаблонЧека = ПустоеДерево.Скопировать();
	
	ПечатьФискальныхЧеков.СформироватьПервичнуюСтруктуруИерархическогоШаблона(ОбъектШаблонЧека, ОбъектМетаданных, ПустоеДерево, Ложь);
	
	ЗначениеВРеквизитФормы(ОбъектШаблонЧека, "ШаблонЧека");
	
	мКэшМакетовАдрес = "";
	мКэшТаблицыРезультатаКомпоновкиАдрес = "";
	
	СформироватьМакетФискальногоЧека();
	
КонецПроцедуры

&НаСервере
Процедура ШаблонЧекаПередУдалениемСервер(Идентификатор)
	
	Если ПустаяСтрока(мКэшМакетовАдрес) Тогда
		Возврат;
	КонецЕсли;
	мКэшМакетов = ПолучитьИзВременногоХранилища(мКэшМакетовАдрес);
	мКэшМакетов.Удалить(Идентификатор);
	мКэшМакетовАдрес = ПоместитьВоВременноеХранилище(мКэшМакетов, Новый УникальныйИдентификатор);
	
	СформироватьМакетФискальногоЧека();
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеШаблон(Структура)
	ОбъектШаблонЧека = РеквизитФормыВЗначение("ШаблонЧека", Тип("ДеревоЗначений"));
	ШаблонСтруктура = Новый Структура;
	ШаблонСтруктура.Вставить("Шаблон", ОбъектШаблонЧека);
	ШаблонСтруктура.Вставить("ЧекККМ", Структура.ЧекККМ);
	ШаблонСтруктура.Вставить("ШиринаЧека", Структура.ШиринаЧека);
	ШаблонСтруктура.Вставить("ОднаФискальнаяСтрока", Структура.ОднаФискальнаяСтрока);
	Возврат ПоместитьВоВременноеХранилище(ШаблонСтруктура, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ДобавитьРеквизитДокументаВШаблонЧека(Элемент, ВыбраннаяСтрока, СтандартнаяОбработка = Ложь)
	
	РеквизитКомпоновщикНастроек = СтрЗаменить(Элемент.Имя, "КомпоновщикНастроек", "");
	текСтр = ЭтаФорма[РеквизитКомпоновщикНастроек].Настройки.ДоступныеПоляПорядка.ПолучитьОбъектПоИдентификатору(ВыбраннаяСтрока);
	
	СтандартнаяОбработка = Ложь;
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	Если текСтр = Неопределено Тогда
		Возврат;
	ИначеЕсли текСтр.Папка Тогда
		Элементы[Элемент.Имя].Развернуть(ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;
	
	ДобавитьДоступныеСтрокиШаблонаВШаблонЧека(Строка(текСтр.Поле));
	ПриДобавленииНовойСтрокиШаблона();
	
КонецПроцедуры

&НаКлиенте
Функция НаименованиеМакетаШаблонаЧека(ТекущаяСтрока)
	
	Если ТекущаяСтрока.ПолучитьРодителя() = Неопределено Тогда
		Возврат ТекущаяСтрока;
	Иначе
		Возврат НаименованиеМакетаШаблонаЧека(ТекущаяСтрока.ПолучитьРодителя());
	КонецЕсли;
	
КонецФункции

// Устанавливает доступность команде для таблицы редактирования шаблона чека.
//
// Параметры:
//  ПанельКонтекстноеМеню - <КоманднаяПанель> - Панель или контекстное меню для команд которых устанавливается
//                                              доступность.
//  ИмяКоманды            - <Строка> - Имя команды
//  ФлагДоступности       - <Булево> - устанавливаемая доступность.
//
&НаКлиенте
Процедура УстановитьДоступностьКомандеФормыДляШаблонаЧека(ПанельКонтекстноеМеню, ИмяКоманды, ФлагДоступности)
	
	Кнопка = ПанельКонтекстноеМеню.ПодчиненныеЭлементы.Найти(ИмяКоманды);
	Если Кнопка <> Неопределено Тогда
		Кнопка.Доступность = ФлагДоступности;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСтрокиВШаблонеПоУсловию(КолонкаПоиска, ЗначениеПоиска, МассивНайденныхСтрок, ШаблонЧекаПараметр)
	
	Для Каждого СтрокаШаблона Из ШаблонЧекаПараметр.ПолучитьЭлементы() Цикл
		Если СтрокаШаблона[КолонкаПоиска] = ЗначениеПоиска Тогда
			МассивНайденныхСтрок.Добавить(СтрокаШаблона);
		КонецЕсли;
		НайтиСтрокиВШаблонеПоУсловию(КолонкаПоиска, ЗначениеПоиска, МассивНайденныхСтрок, СтрокаШаблона);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СписокШиринаЧекаПриИзмененииСервер()
	
	// Изменились макеты. Очистим кэш.
	мКэшМакетовАдрес = "";
	
	СформироватьМакетФискальногоЧека();
	
КонецПроцедуры

// Добавляет произвольную строку в шаблон чека.
// Параметры:
//  ИмяЭлемента - <Строка> - Предопределенное название добавляемой строки, принимает значения:
//                          "Составная строка", "Строка", "Строка таблицы".
//  ТипЭлемента - <Строка> - Возможные значения:
//                          "Таблица" строка которая для пользователя будет представлена в виде таблицы.
//                          "СоставнаяСтрока" строка в состав которой можно добавить несколько значений.
//                          "СтрокаТекста" строка которая будет содержать произвольную текстовую информацию.
//
&НаКлиенте
Процедура ДобавитьПользовательскуюСтрокуВШаблонЧека(ИмяЭлемента, ТипЭлемента, КоллекцияСтрок = Неопределено)
	
	ДобавитьСтрокуВШаблонЧека(ИмяЭлемента, ТипЭлемента, КоллекцияСтрок);
	ПриДобавленииНовойСтрокиШаблона();
	
КонецПроцедуры

// Возвращает родительскую строку для выбранной строки шаблона.
//
// Параметры:
//  СтрокаДереваШаблонаЧеков  - СтрокаДереваЗначений - Строка шаблона чека.
//
&НаКлиенте
Функция РодительскаяСтрокаШаблонаЧека(СтрокаДереваШаблонаЧеков)
	
	Если СтрокаДереваШаблонаЧеков.ПолучитьРодителя() = Неопределено
		ИЛИ СтрокаДереваШаблонаЧеков.ПолучитьРодителя().ПолучитьРодителя() = Неопределено
	Тогда
		Возврат СтрокаДереваШаблонаЧеков;
	Иначе
		Возврат РодительскаяСтрокаШаблонаЧека(СтрокаДереваШаблонаЧеков.ПолучитьРодителя());
	КонецЕсли;
	
КонецФункции

// Возвращает коллекцию строк в которую входит текущая строка шаблона.
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  <КоллекцияСтрокДереваЗначений> - коллекцию строк в которую входит текущая строка шаблона.
//
&НаКлиенте
Функция КоллекцияСтрокДляРодителяТекущейСтрокиШаблона()
	
	ТекущаяСтрока = Элементы.ШаблонЧека.ДанныеСтроки(Элементы.ШаблонЧека.ТекущаяСтрока);
	
	Если ТекущаяСтрока.ПолучитьРодителя() = Неопределено Тогда
		КоллекцияСтрок = ТекущаяСтрока.ПолучитьЭлементы();
	Иначе
		КоллекцияСтрок = ТекущаяСтрока.ПолучитьРодителя().ПолучитьЭлементы();
	КонецЕсли;
	
	Возврат КоллекцияСтрок;
	
КонецФункции

// Выполняет получение списка строк шаблона, которые ссылаются
//  на несуществующие реквизиты СКД(Схемы Компоновки Данных).
//
// Параметры:
//  Шаблон  - ДеревоЗначений - шаблон, в котором необходимо произвести проверку.
//  Список  - СписокЗначений - результирующий список.
//
&НаСервере
Процедура ПолучитьСписокОшибочныхПолейСКД(Шаблон, Список, КомпоновщикНастроек)
	
	Для каждого Строка Из Шаблон.Строки Цикл
		Если Строка.ТипЭлемента = "СтрокаДанных" Тогда
			ПолеСКД = КомпоновкаДанныхСервер.НайтиПолеСКДПоПолномуИмени(КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, СтрЗаменить(Строка.Элемент,"%%",""));
			Если ПолеСКД = Неопределено Тогда
				Список.Вставить(Строка.Элемент, Истина);
			КонецЕсли;
		Иначе
			ПолучитьСписокОшибочныхПолейСКД(Строка, Список, КомпоновщикНастроек);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет добавление строки с заданными параметрами в шаблон чека (дерево значений "ШаблонЧека").
//
// Параметры:
//  Имя            - Строка                       - Имя элемента шаблона.
//  ТипЭлемента    - Строка                       - Тип элемента шаблона.
//  КоллекцияСтрок - КоллекцияСтрокДереваЗначений - коллекция строк в которую необходимо добавить строку.
//  ИмяКолонки     - Строка                       - Имя колонки в результате запроса.
//
&НаСервере
Процедура ДобавитьСтрокуВШаблонЧека(ИмяЭлемента, ТипЭлемента, Знач КоллекцияСтрок = Неопределено, ИмяКолонки = "")
	
	ДеревоШаблонЧека = РеквизитФормыВЗначение("ШаблонЧека");
	ТекущаяСтрока = ШаблонЧека.НайтиПоИдентификатору(Элементы.ШаблонЧека.ТекущаяСтрока);
	ТекущаяСтрока = ДеревоШаблонЧека.Строки.Найти(ТекущаяСтрока.Идентификатор, "Идентификатор", Истина);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КоллекцияСтрок = Неопределено Тогда
		Если ТекущаяСтрока.Уровень() = 0 ИЛИ (ТекущаяСтрока.ТипЭлемента = "СоставнаяСтрока" И ТипЭлемента = "СтрокаДанных")
			ИЛИ (ТекущаяСтрока.ТипЭлемента = "Таблица" И ТипЭлемента = "СтрокаДанных") Тогда
			КоллекцияСтрок = ТекущаяСтрока.Строки;
		Иначе
			КоллекцияСтрок = ТекущаяСтрока.Родитель.Строки;
		КонецЕсли;
	Иначе
		КоллекцияСтрок = ТекущаяСтрока.Строки;
	КонецЕсли;
	КомпоновщикНастроек = ЭтаФорма[Элементы.ГруппаКомпоновщикиНастроек.ТекущаяСтраница.Имя];
	// Формат для примитивных типов.
	ФорматнаяСтрока = "";
	Если ТипЭлемента = "СтрокаДанных" Тогда
		ПолеСКД = КомпоновкаДанныхСервер.НайтиПолеСКДПоПолномуИмени(КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.Элементы, СтрЗаменить(ИмяЭлемента,"%%",""));
		ТипПоляСКД = ПолеСКД.Тип;
		Если ТипПоляСКД.СодержитТип(Тип("Число")) Тогда
			Если ТипПоляСКД.КвалификаторыЧисла.РазрядностьДробнойЧасти = 0
				И ТипПоляСКД.КвалификаторыЧисла.Разрядность = 0 Тогда
				ФорматнаяСтрока = "ЧЦ=15; ЧДЦ=2; ЧГ=0";
			Иначе
				ФорматнаяСтрока = "ЧДЦ="+ТипПоляСКД.КвалификаторыЧисла.РазрядностьДробнойЧасти+"; ЧЦ="+ТипПоляСКД.КвалификаторыЧисла.Разрядность+"; ЧГ=0";
			КонецЕсли;
		ИначеЕсли ТипПоляСКД.СодержитТип(Тип("Булево")) Тогда
			ФорматнаяСтрока = "БЛ=Нет; БИ=Да";
		ИначеЕсли ТипПоляСКД.СодержитТип(Тип("Дата")) Тогда
			ФорматнаяСтрока = "ДФ=dd.MM.yyyy";
		КонецЕсли;
		
		ОписаниеТипа = ТипПоляСКД;
		
	Иначе
		
		ОписаниеТипа = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная));
		
	КонецЕсли;
	
	ШиринаЭлемента = мШиринаЧека;
	РазмещениеТекста = 1; // Обрезать
	Выравнивание = "Лево";
	
	// Настройка ширины колонок для строки таблицы.
	Если КоллекцияСтрок.Родитель.Уровень() > 0 И КоллекцияСтрок.Родитель.ТипЭлемента = "Таблица" Тогда
		// Переносить
		РазмещениеТекста = 0;
		Если ТипЭлемента = "СтрокаДанных" Тогда
			ПолеСКД = КомпоновкаДанныхСервер.НайтиПолеСКДПоПолномуИмени(КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.Элементы, СтрЗаменить(ИмяЭлемента,"%%",""));
			ТипПоляСКД = ПолеСКД.Тип;
			Если ТипПоляСКД.СодержитТип(Тип("Число")) Тогда
				Если ТипПоляСКД.КвалификаторыЧисла.РазрядностьДробнойЧасти = 0
					И ТипПоляСКД.КвалификаторыЧисла.Разрядность = 0 Тогда
					ШиринаЭлемента = 16; // 15 Знак на числовые символы + 1 знак на точку.
				Иначе
					ШиринаЭлемента = ТипПоляСКД.КвалификаторыЧисла.Разрядность+?(ТипПоляСКД.КвалификаторыЧисла.РазрядностьДробнойЧасти = 0,0,1);
				КонецЕсли;
				Выравнивание = "Право";
			ИначеЕсли ТипПоляСКД.СодержитТип(Тип("Булево")) Тогда
				ШиринаЭлемента = 3; // Нет - самое длинное слово
				Выравнивание = "Право";
			ИначеЕсли ТипПоляСКД.СодержитТип(Тип("Дата")) Тогда
				ШиринаЭлемента = 10;
				Выравнивание = "Право";
			Иначе
				// Ссылочные типы и т.п.
				ШиринаЭлемента = 10;
			КонецЕсли;
		Иначе
			ШиринаЭлемента = 10;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("ИмяЭлемента"     , ИмяЭлемента);
	ПараметрыФункции.Вставить("ОписаниеТипа"    , ОписаниеТипа);
	ПараметрыФункции.Вставить("ТипЭлемента"     , ТипЭлемента);
	ПараметрыФункции.Вставить("Ширина"          , ШиринаЭлемента);
	ПараметрыФункции.Вставить("РазмещениеТекста", РазмещениеТекста); // Переносить
	ПараметрыФункции.Вставить("Выравнивание"    , Выравнивание);
	ПараметрыФункции.Вставить("Формат"          , ФорматнаяСтрока);
	ПараметрыФункции.Вставить("ИмяКолонки"      , ИмяКолонки);
	НоваяСтрока = ПечатьФискальныхЧеков.ДобавитьСтрокуВКоллекциюСтрокДерева(КоллекцияСтрок, ПараметрыФункции);
	ИдентификаторТекущейСтрокиШаблона = НоваяСтрока.Идентификатор;
	мКэшМакетовАдрес = "";
	ЗначениеВРеквизитФормы(ДеревоШаблонЧека, "ШаблонЧека");
	СформироватьМакетФискальногоЧека();
	
КонецПроцедуры

// Возвращает имя поля в шаблоне по имени поля (добавляет "%%" ИмяПоля "%%").
// Параметры:
//  ИмяПоля - <Строка> - Имя поля которое нужно форматировать.
// Возвращаемое значение:
// ФорматированноеИмяПоля - <Строка> - Параметр ИмяПоля форматируется по маске "%%" ИмяПоля "%%".
//
&НаСервере
Функция ФорматированноеИмяПоляВШаблоне(ИмяПоля)
	
	ЗаменяемоеИмя = ИмяПоля;
	ФорматированноеИмяПоля = "%%" + ?(ЗаменяемоеИмя = Неопределено, ИмяПоля, ЗаменяемоеИмя) + "%%";
	Возврат ФорматированноеИмяПоля;
	
КонецФункции

// Добавляет в шаблон чека выбранную строку из доступных строк шаблона.
//  Параметры
//   ДоступнаяСтрокаШаблона - <СтрокаДереваЗначений> - Строка которая будет добавляться в шаблон чека.
//
&НаСервере
Процедура ДобавитьДоступныеСтрокиШаблонаВШаблонЧека(ДоступнаяСтрокаШаблона)
	
	Значение = ФорматированноеИмяПоляВШаблоне(ДоступнаяСтрокаШаблона);
	ТекущаяСтрокаШаблона = ШаблонЧека.НайтиПоИдентификатору(Элементы.ШаблонЧека.ТекущаяСтрока);
	Если ТекущаяСтрокаШаблона = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = ''Не выбрана группа.'"));
		Возврат;
	Иначе
		ДобавитьСтрокуВШаблонЧека(Значение, "СтрокаДанных", , СтрЗаменить(СтрЗаменить(Значение,".",""),"%%",""));
	КонецЕсли;
	
	// Очистка кэша
	мКэшТаблицыРезультатаКомпоновкиАдрес = "";
	мКэшМакетовАдрес = "";
	СформироватьМакетФискальногоЧека();
	
КонецПроцедуры

&НаКлиенте
Функция ТекущаяСтрокаВШаблоне(ИдентификаторТекущейСтрокиШаблона, СтрокиШаблонаЧека)
	
	Если ПустаяСтрока(ИдентификаторТекущейСтрокиШаблона) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого СтрокаШаблона Из СтрокиШаблонаЧека.ПолучитьЭлементы() Цикл
		Если СтрокаШаблона.Идентификатор = ИдентификаторТекущейСтрокиШаблона Тогда
			Возврат СтрокаШаблона;
		КонецЕсли;
		ЗначениеСтрокаШаблона = ТекущаяСтрокаВШаблоне(ИдентификаторТекущейСтрокиШаблона, СтрокаШаблона);
		Если ЗначениеСтрокаШаблона <> Неопределено Тогда
			Возврат ЗначениеСтрокаШаблона;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПриДобавленииНовойСтрокиШаблона()
	
	СтрокаШаблона = ТекущаяСтрокаВШаблоне(ИдентификаторТекущейСтрокиШаблона, ШаблонЧека);
	Если СтрокаШаблона <> Неопределено Тогда
		Элементы.ШаблонЧека.ТекущаяСтрока = СтрокаШаблона.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
