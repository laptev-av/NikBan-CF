
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(СтрокаШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(СтрокаШтрихкода) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(СтрокаШтрихкода);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = Новый Структура;
	Если ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", НСтр("ru = 'Для штриховых номеров установка магнитного кода не предусмотрена.'"));
	Иначе
		Объект.КодСерийногоНомера = МагнитныйКод;
		Модифицированность = Истина;
	КонецЕсли;
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(СтрокаШтрихкода) Экспорт
	
	СтруктураРезультат = Новый Структура;
	Если ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Магнитный Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", НСтр("ru = 'Для магнитных номеров установка штрихкода кода не предусмотрена.'"));
	Иначе
		Штрихкод = СтрокаШтрихкода;
		ТипШтрихкодаРТ = ПодключаемоеОборудованиеРТВызовСервера.ОпределитьТипШтрихкода(Штрихкод);
		Модифицированность = Истина;
	КонецЕсли;
	Возврат СтруктураРезультат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
		
	ТипСерийногоНомера = Объект.Владелец.ТипСерийногоНомера;
	
	УправлениеЭлементамиФормыНаСервере();
	
	Если ТипСерийногоНомера <> Перечисления.ТипыСерийныхНомеровСертификатов.Магнитный Тогда
		
		СтруктураШтрихкода = ПодключаемоеОборудованиеРТВызовСервера.ПолучитьШтрихкод(Объект.Ссылка);
				
		Если СтруктураШтрихкода <> Неопределено Тогда
			
			Штрихкод          = СтруктураШтрихкода.Штрихкод;
			ТипШтрихкодаРТ    = СтруктураШтрихкода.ТипШтрихкода;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	Состояние = СостояниеСерийногоНомера();
	Элементы.Состояние.Видимость = НЕ ПустаяСтрока(Состояние);

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Владелец.Пустая() Тогда
		
		Отказ = Истина;
		ПоказатьПредупреждение(,НСтр("ru = 'Не задан владелец номера подарочного сертификата'"));
	Иначе
		// ПодключаемоеОборудование
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
		// Конец ПодключаемоеОборудование
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры 

// Процедура - обработчик события "ПриЗаписиНаСервере" формы.
//
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если (ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой
		ИЛИ ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Смешанный) Тогда
		
		НаборЗаписейШтрихкодов = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		НаборЗаписейШтрихкодов.Отбор.Владелец.Установить(ТекущийОбъект.Ссылка);
		НаборЗаписейШтрихкодов.Записать();
		
		ЗаписьШтрихкода              = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		ЗаписьШтрихкода.Владелец     = ТекущийОбъект.Ссылка;
		ЗаписьШтрихкода.ТипШтрихкода = ТипШтрихкодаРТ;
		ЗаписьШтрихкода.Штрихкод     = Штрихкод;
				
		Если ЗаписьШтрихкода.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128 Тогда
			
			ЗаписьШтрихкода.ПредставлениеШтрихкода = ЗаписьШтрихкода.Штрихкод;
			
		КонецЕсли;
		
		Если НЕ ЗаписьШтрихкода.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ	Отказ Тогда
			ЗаписьШтрихкода.Записать(Истина);			
		КонецЕсли;
		
	Иначе // Магнитная карта не должна иметь штрихкода.
		
		НаборЗаписейШтрихкодов = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		НаборЗаписейШтрихкодов.Отбор.Владелец.Установить(ТекущийОбъект.Ссылка);
		НаборЗаписейШтрихкодов.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписьюНаСервере" формы.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Магнитный
		И НЕ ПустаяСтрока(Штрихкод) Тогда		
		Штрихкод = "";                   		
	КонецЕсли;
	
	Если ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой Тогда		
		ТекущийОбъект.Наименование = Штрихкод;
	Иначе
		ТекущийОбъект.Наименование = ТекущийОбъект.КодСерийногоНомера;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроверкиЗаполненияНаСервере" формы.
//
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой Тогда
		Если ПроверяемыеРеквизиты.Найти("КодСерийногоНомера") <> Неопределено Тогда       			
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("КодСерийногоНомера"));			
		КонецЕсли;	                                                                       		
	КонецЕсли;	
	
	Если ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Магнитный Тогда
		Если ПроверяемыеРеквизиты.Найти("Штрихкод") <> Неопределено Тогда                 			
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Штрихкод"));         			
		КонецЕсли;			
		Если ПроверяемыеРеквизиты.Найти("ТипШтрихкодаРТ") <> Неопределено Тогда             			
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ТипШтрихкодаРТ"));     			
		КонецЕсли;	                                                                      				
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриОткрытии" поля "КодСерийногоНомера".
//
&НаКлиенте
Процедура КодСерийногоНомераПриИзменении(Элемент)
	
	УстановитьНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодПриИзменении(Элемент)
	ПолученШтрихкодИзСШК(Штрихкод); 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает наименование серийного номера.
//
&НаКлиенте
Процедура УстановитьНаименование()
	
	Если ТипСерийногоНомера = ПредопределенноеЗначение("Перечисление.ТипыСерийныхНомеровСертификатов.Штриховой") Тогда
		
		Объект.Наименование = Штрихкод;
		
	Иначе
		
		Объект.Наименование = Объект.КодСерийногоНомера;
		
	КонецЕсли;
	
КонецПроцедуры 

// Управляет доступностью и видимостью элементов формы на сервере.
//
&НаСервере
Процедура УправлениеЭлементамиФормыНаСервере()
		
	Элементы.КодСерийногоНомера.Доступность               = НЕ (ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой);
	Элементы.Штрихкод.Доступность                         = НЕ (ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Магнитный);
	Элементы.ТипШтрихкодаРТ.Доступность                     = Элементы.Штрихкод.Доступность;
	Элементы.Штрихкод.АвтоОтметкаНезаполненного           = Элементы.Штрихкод.Доступность;
	Элементы.ТипШтрихкодаРТ.АвтоОтметкаНезаполненного       = Элементы.Штрихкод.Доступность;
	Элементы.Штрихкод.ОтметкаНезаполненного               = Элементы.Штрихкод.Доступность;
	Элементы.ТипШтрихкодаРТ.ОтметкаНезаполненного           = Элементы.Штрихкод.Доступность;
		
КонецПроцедуры

&НаСервере
Функция СостояниеСерийногоНомера()
	Состояние = НСтр("ru = 'Не было движений'");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЕСТЬNULL(ДвиженияСерийныхНомеров.АналитикаХозяйственнойОперации, """") КАК Состояние,
	|	ЕСТЬNULL(ДвиженияСерийныхНомеров.Отправитель, """") КАК Отправитель,
	|	ЕСТЬNULL(ДвиженияСерийныхНомеров.Получатель, """") КАК Получатель
	|ИЗ
	|	РегистрСведений.ДвиженияСерийныхНомеров КАК ДвиженияСерийныхНомеров
	|ГДЕ
	|	ДвиженияСерийныхНомеров.СерийныйНомер = &СерийныйНомер
	|УПОРЯДОЧИТЬ ПО
	|	ДвиженияСерийныхНомеров.Период УБЫВ,
	|	ДвиженияСерийныхНомеров.Регистратор УБЫВ";
	Запрос.УстановитьПараметр("СерийныйНомер", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Состояние) Тогда
			Состояние = НСтр("ru = '%1 в %2'");
			Состояние = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							Состояние,
							Выборка.Состояние,
							?(ЗначениеЗаполнено(Выборка.Получатель), Выборка.Получатель, Выборка.Отправитель));
		КонецЕсли;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

#КонецОбласти
