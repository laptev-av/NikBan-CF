#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Осуществляет проверку корректности правил округления в строке тч ПравилаОкругленияЦены.
//
// Параметры:
// СтрокаПравилОкругления  - Строка табличной части ПравилаОкругленияЦены.
// ВерхняяГраницаДиапазона - Число - значение верхней границы диапазона цен.
// Отказ                   - Булево - признак, указывающий на некорректность правил округления.
//
Процедура ПроверитьКорректностьПравилОкругленияЦеныВСтроке(Знач СтрокаПравилОкругления, Знач ВерхняяГраницаДиапазона, Отказ) Экспорт
	
		Если ЗначениеЗаполнено(СтрокаПравилОкругления.ТочностьОкругления) И ВерхняяГраницаДиапазона > 0 
			И СтрокаПравилОкругления.ТочностьОкругления >= ВерхняяГраницаДиапазона Тогда
			
			ТекстОшибки = НСтр("ru='Точность округления в строке %НомерСтроки% списка ""Правила округления цены"" должна быть меньше нижней границы диапазона цен в следующей строке'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаПравилОкругления.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				Ценообразование.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ("ПравилаОкругленияЦены", СтрокаПравилОкругления.НомерСтроки, "ТочностьОкругления"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПравилОкругления.ПсихологическоеОкругление) 
			И ВерхняяГраницаДиапазона > 0 И СтрокаПравилОкругления.ПсихологическоеОкругление >= ВерхняяГраницаДиапазона Тогда
			
			ТекстОшибки = НСтр("ru='Психологическое округление в строке %НомерСтроки% списка ""Правила округления цены"" должно быть меньше нижней границы диапазона цен в следующей строке'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаПравилОкругления.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				Ценообразование.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ("ПравилаОкругленияЦены", СтрокаПравилОкругления.НомерСтроки, "ПсихологическоеОкругление"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПравилОкругления.ТочностьОкругления)
			И СтрокаПравилОкругления.ПсихологическоеОкругление >= СтрокаПравилОкругления.ТочностьОкругления Тогда
			
			ТекстОшибки = НСтр("ru='Психологическое округление в строке %НомерСтроки% списка ""Правила округления цены"" должно быть меньше точности округления'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", СтрокаПравилОкругления.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				Ценообразование.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ("ПравилаОкругленияЦены", СтрокаПравилОкругления.НомерСтроки, "ПсихологическоеОкругление"),
				,
				Отказ);
			
		КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ПроверитьУникальностьИдентификатора() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(НСтр("ru='В базе данных уже содержится вид цены с идентификатором ''%Идентификатор%''. Идентификатор должен быть уникальным.'"), "%Идентификатор%", Идентификатор),
			ЭтотОбъект, 
			"Идентификатор",
			"Объект",
			Отказ);
	КонецЕсли;
		
	Для Индекс = 0 По ПравилаОкругленияЦены.Количество() - 1 Цикл
		
		СтрокаПравилОкругления = ПравилаОкругленияЦены[Индекс];
		ВерхняяГраницаДиапазона = ?(Индекс < ПравилаОкругленияЦены.Количество() - 1, ПравилаОкругленияЦены[Индекс + 1].НижняяГраницаДиапазонаЦен, -1);
		ПроверитьКорректностьПравилОкругленияЦеныВСтроке(СтрокаПравилОкругления, ВерхняяГраницаДиапазона, Отказ);
		
	КонецЦикла;
	
	Если НЕ ЦенообразованиеПереопределяемый.ИспользуютсяВалюты() Тогда
		
		ПроверяемыйРеквизитВалюта = ПроверяемыеРеквизиты.Найти("ВалютаЦены");
		
		Если ПроверяемыйРеквизитВалюта <> Неопределено Тогда
			
			 ПроверяемыеРеквизиты.Удалить(ПроверяемыйРеквизитВалюта);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравилаОкругленияЦены.Количество() > 1 Тогда
		ПравилаОкругленияЦены.Сортировать("НижняяГраницаДиапазонаЦен");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Идентификатор = "";
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Осуществляет поиск идентификатора, совпадающего с заполненным в объекте.
//
// Возвращаемое значение:
// Булево
// Истина, если идентификатор не найден, Ложь в противном случае.
//
Функция ПроверитьУникальностьИдентификатора()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	1 КАК Поле1
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.Идентификатор = &Идентификатор
		|	И ВидыЦен.Ссылка <> &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#КонецЕсли