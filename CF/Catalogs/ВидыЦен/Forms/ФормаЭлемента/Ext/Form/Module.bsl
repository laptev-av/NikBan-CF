
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбработкаРазблокированияРеквизитовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		Если НЕ ОбщегоНазначенияРТВызовСервера.ЭтоПолноправныйПользователь() Тогда
			Элементы.РедактироватьСхемуКомпоновкиДанных.Доступность = Ложь;
		КонецЕсли;
		РазблокироватьДополнительныеРеквизитыОбъекта();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулыАлгоритмРасчетаЦеныНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Элементы.Формулы.ТекущиеДанные.АлгоритмРасчетаЦены = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторПсихологическогоОкругленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДополнительныеПараметры.СтрокаПравилОкругления.ПсихологическоеОкругление = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторСхемыКомпоновкиДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПрименитьИзмененияКСхемеКомпоновкиДанных(ДополнительныеПараметры.СхемаКомпоновкиДанных, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторФормулЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.АлгоритмРасчетаЦены = Результат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчик механизма "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Подсистема запрета редактирования ключевых реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	ЗаблокироватьДополнительныеРеквизитыОбъекта();
	
	Если Объект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ПустаяСсылка() Тогда
		Объект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗадаватьВручную;
	КонецЕсли;
	
	// Заполнение списка схем компоновки данных.
	ПризнакПредопределенногоМакета = Врег("Предопределенный");
	ДлинаПризнакаПредопределенногоМакета = СтрДлина(ПризнакПредопределенногоМакета);
	Макеты = Метаданные.Справочники.ВидыЦен.Макеты;
	Для Каждого Макет Из Макеты Цикл
		Если Макет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных Тогда
			Если ВРег(Прав(Макет.Имя, ДлинаПризнакаПредопределенногоМакета)) = ПризнакПредопределенногоМакета Тогда
				Элементы.СхемаКомпоновкиДанных.СписокВыбора.Добавить(Макет.Имя, Макет.Синоним);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Доступность редактирования СКД.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.РедактироватьСхемуКомпоновкиДанных.Доступность = Пользователи.ЭтоПолноправныйПользователь();
	КонецЕсли;
	
	Элементы.СхемаКомпоновкиДанных.СписокВыбора.Добавить("", НСтр("ru = 'Произвольный'"));
	
	ИспользоватьЦеновыеГруппы = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	
	СпособЗаданияЦеныПриИзмененииНаСервере();
	
	Если ИспользоватьЦеновыеГруппы Тогда
		Элементы.СтраницыПравилаРасчета.ТекущаяСтраница = Элементы.СтраницаПравилаРасчетаСЦеновымиГруппами;
	Иначе
		Элементы.СтраницыПравилаРасчета.ТекущаяСтраница = Элементы.СтраницаПравилаРасчетаБезЦеновыхГрупп;
	КонецЕсли;
	
	СпособЗаданияЦенЗаполнятьПоДаннымИБ          = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ;
	СпособЗаданияЦенРассчитыватьПоДругимВидамЦен = Перечисления.СпособыЗаданияЦен.РассчитыватьПоДругимВидамЦен;
	
	МетодОкругления = ?(Объект.ОкруглятьВБольшуюСторону, 1, 0);
	
	Если Объект.Ссылка.Пустая() Тогда
		НастроитьТаблицуПравилОкругленияСервер();
	КонецЕсли;
	
	ИспользуютсяВалюты         = ЦенообразованиеПереопределяемый.ИспользуютсяВалюты(); 
	ИспользуютсяХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользуютсяУпаковки       = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	Если НЕ ИспользуютсяВалюты Тогда
		
		Элементы.ВалютаЦены.Видимость = Ложь;
		Элементы.ВалютаЦены.Доступность = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьВидимостьСтраниц(ЭтотОбъект);
	ДоступностьКонструктораПсихологическогоОкругления();
	ДобавитьПредлагаемоеЗначениеИдентификатораВСписокВыбора();
	
	Элементы.СтраницыСКД.ТекущаяСтраница = Элементы.СтраницаТолстыйКлиент;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	#Если ТолстыйКлиентОбычноеПриложение Или ТолстыйКлиентУправляемоеПриложение Тогда
	Если Тип(ВыбранноеЗначение) = Тип("СхемаКомпоновкиДанных") Тогда
		СхемаКомпоновкиДанных = Новый ХранилищеЗначения(ВыбранноеЗначение);
	КонецЕсли;
	#КонецЕсли

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	МетодОкругления = ?(Объект.ОкруглятьВБольшуюСторону, 1, 0);
	
	Если Объект.СпособЗаданияЦены = СпособЗаданияЦенЗаполнятьПоДаннымИБ Тогда
		Элементы.ГруппаСтраницыСпособЗаданияЦены.ТекущаяСтраница = Элементы.СтраницаСКД;
	ИначеЕсли Объект.СпособЗаданияЦены = СпособЗаданияЦенРассчитыватьПоДругимВидамЦен Тогда
		Элементы.ГруппаСтраницыСпособЗаданияЦены.ТекущаяСтраница = Элементы.СтраницаПравилаРасчета;
	Иначе
		Элементы.ГруппаСтраницыСпособЗаданияЦены.ТекущаяСтраница = Элементы.СтраницаНазначатьВручную;
	КонецЕсли;
	
	НастроитьТаблицуПравилОкругленияСервер();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ОкруглятьВБольшуюСторону = ?(МетодОкругления = 1 , Истина, Ложь);
	
	ТекущийОбъект.ЦеновыеГруппы.Очистить();
	ТекущийОбъект.ВлияющиеВидыЦен.Очистить();
	
	
	Если ТекущийОбъект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
		Или ТекущийОбъект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) Тогда
			Если ХранилищеСхемыКомпоновкиДанных <> Неопределено Тогда
				
				Если Ценообразование.ПроверитьСхемуКомпоновкиДанных(ХранилищеСхемыКомпоновкиДанных.Получить()) Тогда
					ТекущийОбъект.ХранилищеСхемыКомпоновкиДанных = ХранилищеСхемыКомпоновкиДанных;
				Иначе
					Отказ = Истина;
				КонецЕсли;
				
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Необходимо настроить схему компоновки данных для заполнения цен.'"),
					Объект.Ссылка,
					,
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = ХранилищеНастроекКомпоновкиДанных;
		
	ИначеЕсли ТекущийОбъект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоДругимВидамЦен Тогда
		
		Если ИспользоватьЦеновыеГруппы Тогда
			
			ТекущийОбъект.АлгоритмРасчетаЦены = Формулы[0].АлгоритмРасчетаЦены;
			
			Для Индекс = 1 По Формулы.Количество() - 1 Цикл
				
				НоваяСтрока                     = ТекущийОбъект.ЦеновыеГруппы.Добавить();
				НоваяСтрока.ЦеноваяГруппа       = Формулы[Индекс].ЦеноваяГруппа;
				НоваяСтрока.АлгоритмРасчетаЦены = Формулы[Индекс].АлгоритмРасчетаЦены;
				
				ИзвлечьБазовыеЦеныИзФормулы(ТекущийОбъект, Формулы[Индекс].АлгоритмРасчетаЦены);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ИзвлечьБазовыеЦеныИзФормулы(ТекущийОбъект, ТекущийОбъект.АлгоритмРасчетаЦены);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Подсистема запрета редактирования ключевых реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	НастроитьТаблицуПравилОкругленияСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Если Объект.СпособЗаданияЦены = СпособЗаданияЦенРассчитыватьПоДругимВидамЦен Тогда
		
		Если ИспользоватьЦеновыеГруппы Тогда
			
			Если Формулы.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Формулы[0].АлгоритмРасчетаЦены) Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Не заполнена колонка ""Алгоритм расчета цены"" в строке 1 списка ""Формулы""""'"),
					Объект,
					"Формулы[0].АлгоритмРасчетаЦены",
					,
					Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Формулы.Количество() > 1 Тогда
				
				// Для корректного вычисления цен в таблице Формулы не должно быть дублей ценовых групп и пустых строк.
				ТаблицаЦеновыхГрупп = Новый ТаблицаЗначений;
				ТаблицаЦеновыхГрупп.Колонки.Добавить("НомерСтроки",         Новый ОписаниеТипов("Число"));
				ТаблицаЦеновыхГрупп.Колонки.Добавить("ЦеноваяГруппа",       Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"));
				ТаблицаЦеновыхГрупп.Колонки.Добавить("АлгоритмРасчетаЦены", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1000)));
				
				Для ТекИндекс = 1 По Формулы.Количество()-1 Цикл
					
					НоваяСтрока = ТаблицаЦеновыхГрупп.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Формулы[ТекИндекс]);
					НоваяСтрока.НомерСтроки = ТекИндекс+1;
					
				КонецЦикла;
				
				Запрос = Новый Запрос("
				|ВЫБРАТЬ
				|	ВременнаяТаблицаЦеновыеГруппы.НомерСтроки         КАК НомерСтроки,
				|	ВременнаяТаблицаЦеновыеГруппы.ЦеноваяГруппа       КАК ЦеноваяГруппа,
				|	ВременнаяТаблицаЦеновыеГруппы.АлгоритмРасчетаЦены КАК АлгоритмРасчетаЦены
				|ПОМЕСТИТЬ
				|	ВременнаяТаблицаЦеновыеГруппы
				|ИЗ
				|	&ТаблицаЦеновыхГрупп КАК ВременнаяТаблицаЦеновыеГруппы
				|;
				|ВЫБРАТЬ
				|	ВременнаяТаблицаЦеновыеГруппы.НомерСтроки         КАК НомерСтроки,
				|	ВременнаяТаблицаЦеновыеГруппы.ЦеноваяГруппа       КАК ЦеноваяГруппа,
				|	ВременнаяТаблицаЦеновыеГруппы.АлгоритмРасчетаЦены КАК АлгоритмРасчетаЦены,
				|	ВЫБОР
				|		КОГДА
				|			ВременнаяТаблицаЦеновыеГруппы.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
				|		ТОГДА
				|			ИСТИНА
				|		ИНАЧЕ
				|			ЛОЖЬ
				|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЦеноваяГруппа,
				|	ВЫБОР
				|		КОГДА
				|			ВременнаяТаблицаЦеновыеГруппы.АлгоритмРасчетаЦены = """"
				|		ТОГДА
				|			ИСТИНА
				|		ИНАЧЕ
				|			ЛОЖЬ
				|	КОНЕЦ КАК ЕстьОшибкиЗаполненияАлгоритмРасчетаЦены
				|ИЗ
				|	ВременнаяТаблицаЦеновыеГруппы КАК ВременнаяТаблицаЦеновыеГруппы
				|ГДЕ
				|	ВременнаяТаблицаЦеновыеГруппы.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
				|	ИЛИ ВременнаяТаблицаЦеновыеГруппы.АлгоритмРасчетаЦены = """"
				|УПОРЯДОЧИТЬ ПО
				|	НомерСтроки ВОЗР
				|;
				|ВЫБРАТЬ
				|	МАКСИМУМ(ВременнаяТаблицаЦеновыеГруппы.НомерСтроки)    КАК НомерСтроки,
				|	ВременнаяТаблицаЦеновыеГруппы.ЦеноваяГруппа            КАК ЦеноваяГруппа
				|ИЗ
				|	ВременнаяТаблицаЦеновыеГруппы КАК ВременнаяТаблицаЦеновыеГруппы
				|ГДЕ
				|	ВременнаяТаблицаЦеновыеГруппы.ЦеноваяГруппа <> ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
				|СГРУППИРОВАТЬ ПО
				|	ВременнаяТаблицаЦеновыеГруппы.ЦеноваяГруппа
				|ИМЕЮЩИЕ
				|	КОЛИЧЕСТВО (*) > 1
				|УПОРЯДОЧИТЬ ПО
				|	НомерСтроки ВОЗР
				|;
				|");
				
				Запрос.УстановитьПараметр("ТаблицаЦеновыхГрупп", ТаблицаЦеновыхГрупп);
				
				МассивРезультатов = Запрос.ВыполнитьПакет();
				
				ВыборкаПустыхЗначений = МассивРезультатов[1].Выбрать();
				ВыборкаДублей = МассивРезультатов[2].Выбрать();
				
				Пока ВыборкаПустыхЗначений.Следующий() Цикл
					
					Если ВыборкаПустыхЗначений.ЕстьОшибкиЗаполненияЦеноваяГруппа Тогда
						
						ТекстОшибки = НСтр("ru='Не заполнена колонка ""Ценовая группа"" в строке ""%НомерСтроки%"" списка ""Формулы""'");
						ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ВыборкаПустыхЗначений.НомерСтроки);
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						Объект,
						Ценообразование.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ("Формулы", ВыборкаПустыхЗначений.НомерСтроки, "ЦеноваяГруппа"),
						,
						Отказ);
						
					КонецЕсли;
					
					Если ВыборкаПустыхЗначений.ЕстьОшибкиЗаполненияАлгоритмРасчетаЦены Тогда
						
						ТекстОшибки = НСтр("ru='Не заполнена колонка ""Алгоритм расчета цены"" в строке ""%НомерСтроки%"" списка ""Формулы""'");
						ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ВыборкаПустыхЗначений.НомерСтроки);
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						Объект,
						Ценообразование.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ("Формулы", ВыборкаПустыхЗначений.НомерСтроки, "АлгоритмРасчетаЦены"),
						,
						Отказ);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Пока ВыборкаДублей.Следующий() Цикл
					
					ТекстОшибки = НСтр("ru='Ценовая группа ""%ЦеноваяГруппа%"" повторяется'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ЦеноваяГруппа%", ВыборкаДублей.ЦеноваяГруппа);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					Объект,
					Ценообразование.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ("Формулы", ВыборкаДублей.НомерСтроки, "ЦеноваяГруппа"),
					,
					Отказ);
					
				КонецЦикла;
				
				
			КонецЕсли;
			
			ТекИндекс = 0;
			
			Для Каждого Формула Из Формулы Цикл
				
				ТекстОшибки = НСтр("ru='В формуле для ценовой группы ""%ЦеноваяГруппа%"" обнаружены ошибки'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ЦеноваяГруппа%", Формула.ЦеноваяГруппа);
				
				Если Не РаботаСФормуламиКлиентСервер.ПроверитьФормулу(Формула.АлгоритмРасчетаЦены, МассивБазовыхВидовЦенСервер(), "Формулы[" + ТекИндекс + "].АлгоритмРасчетаЦены", ТекстОшибки) Тогда
					Отказ = Истина;
				КонецЕсли;
				ТекИндекс = ТекИндекс + 1;
				
			КонецЦикла;
			
			
		Иначе
			
			Если Не ЗначениеЗаполнено(Объект.АлгоритмРасчетаЦены) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Поле ""Алгоритм расчета цены"" не заполнено'"),
				Объект,
				"Объект.АлгоритмРасчетаЦены",
				,
				Отказ);
				
			Иначе
				
				Если НЕ РаботаСФормуламиКлиентСервер.ПроверитьФормулу(Объект.АлгоритмРасчетаЦены, МассивБазовыхВидовЦенСервер(), "Объект.АлгоритмРасчетаЦены") Тогда
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьЦеновыеГруппы И Объект.ПорогиСрабатывания.Количество() > 0 Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
        |	ПорогиСрабатывания.ЦеноваяГруппа КАК ЦеноваяГруппа,
        |	ПорогиСрабатывания.НомерСтроки КАК НомерСтроки,
        |	1 КАК КоличествоГрупп
        |ПОМЕСТИТЬ ПорогиСрабатывания
        |ИЗ
        |	&ПорогиСрабатывания КАК ПорогиСрабатывания
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ПорогиСрабатывания.ЦеноваяГруппа КАК ЦеноваяГруппа,
        |	ПорогиСрабатывания.НомерСтроки КАК НомерСтроки,
        |	ПорогиСрабатывания.КоличествоГрупп КАК КоличествоГрупп
        |ИЗ
        |	ПорогиСрабатывания КАК ПорогиСрабатывания
        |
        |УПОРЯДОЧИТЬ ПО
        |	НомерСтроки
        |
        |ИТОГИ
        |	МИНИМУМ(НомерСтроки) КАК НомерСтроки,
        |	СУММА(КоличествоГрупп) КАК КоличествоГрупп
        |ПО
		|	ЦеноваяГруппа
		|");
		Запрос.УстановитьПараметр("ПорогиСрабатывания", Объект.ПорогиСрабатывания.Выгрузить());
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			Если Выборка.КоличествоГрупп > 1 Тогда
				ВыборкаДублей = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				ТекстОшибки = НСтр("ru = 'Ценовая группа ""%1"" повторяется'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Выборка.ЦеноваяГруппа);
				Пока ВыборкаДублей.Следующий() Цикл
					ПутьКСтроке = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ПорогиСрабатывания", ВыборкаДублей.НомерСтроки, "ЦеноваяГруппа");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						Объект,
						ПутьКСтроке);
				КонецЦикла;
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВалютаЦеныПриИзменении(Элемент)
	
	НастроитьТаблицуПравилОкругления();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ОбновитьПредлагаемоеЗначениеИдентификатора();
	
КонецПроцедуры

&НаКлиенте
Процедура НижняяГраницаДиапазонаЦенПриИзменении(Элемент)
	
	НастроитьТаблицуПравилОкругления();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособЗаданияЦеныПриИзменении(Элемент)
	
	НастроитьВидимостьСтраниц(ЭтотОбъект);
	СпособЗаданияЦеныПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаКомпоновкиДанныхПриИзменении(Элемент)
	
	СхемаКомпоновкиДанныхПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТочностьОкругленияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		Элементы.ТочностьОкругления.СписокВыбора.Очистить();
		ЗначениеОкругления             = 0.01;
		ЧетноеПриращение               = Ложь;
		МаксимальноеЗначениеОкругления = 1000;
		ГраницаДиапазонаЦен            = ВерхняяГраницаДиапазонаЦен(Элементы.ПравилаОкругленияЦены.ТекущиеДанные);
		
		Пока ЗначениеОкругления <= МаксимальноеЗначениеОкругления 
			И (ЗначениеОкругления <= ГраницаДиапазонаЦен Или ГраницаДиапазонаЦен < 0) Цикл
			
			Элементы.ТочностьОкругления.СписокВыбора.Добавить(ЗначениеОкругления);
			ЗначениеОкругления = ЗначениеОкругления * ?(ЧетноеПриращение, 2, 5);
			ЧетноеПриращение   = Не ЧетноеПриращение;
			
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПравилаОкругленияЦены

&НаКлиенте
Процедура ПравилаОкругленияЦеныПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Если Объект.ПравилаОкругленияЦены.Количество() > 1 Тогда
			
			БазовоеЗначениеГраницы = Объект.ПравилаОкругленияЦены[Объект.ПравилаОкругленияЦены.Количество() - 2].НижняяГраницаДиапазонаЦен ;
			
			Если Не ЗначениеЗаполнено(БазовоеЗначениеГраницы) Тогда
				БазовоеЗначениеГраницы = 1;
			КонецЕсли;
			
			Элемент.ТекущиеДанные.НижняяГраницаДиапазонаЦен = БазовоеЗначениеГраницы * 10;
			
		КонецЕсли;
		
		НастроитьТаблицуПравилОкругления();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОкругленияЦеныПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		
		Для Каждого СтрокаПравилОкругления Из Объект.ПравилаОкругленияЦены Цикл
			
			Если СтрокаПравилОкругления <> Элемент.ТекущиеДанные 
				И СтрокаПравилОкругления.НижняяГраницаДиапазонаЦен = Элемент.ТекущиеДанные.НижняяГраницаДиапазонаЦен Тогда
				
				Сообщение = НСтр("ru = 'Для диапазона от %НижняяГраница% уже заданы правила округления.'");
				ЗначениеНижнейГраницы = Элемент.ТекущиеДанные.НижняяГраницаДиапазонаЦен;
				
				Если ИспользуютсяВалюты 
					И ЗначениеЗаполнено(Объект.ВалютаЦены) Тогда
					
					ЗначениеНижнейГраницы = Строка(ЗначениеНижнейГраницы) + " " + Объект.ВалютаЦены;
					
				КонецЕсли;
				
				Сообщение = СтрЗаменить(Сообщение, "%НижняяГраница%", ЗначениеНижнейГраницы);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Сообщение,
					Объект,
					ЦенообразованиеВызовСервера.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ(
							"ПравилаОкругленияЦены",
							Объект.ПравилаОкругленияЦены.Индекс(Элемент.ТекущиеДанные) + 1,
							"НижняяГраницаДиапазонаЦен"),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОкругленияЦеныПослеУдаления(Элемент)
	
	НастроитьТаблицуПравилОкругления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОкругленияЦеныПриАктивизацииСтроки(Элемент)
	
	ДоступностьКонструктораПсихологическогоОкругления();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФормулы

&НаКлиенте
Процедура ФормулыАлгоритмРасчетаЦеныНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = ПараметрыФормыРедактированияЦены(Элементы.Формулы.ТекущиеДанные.АлгоритмРасчетаЦены);
	ОбработчикОповещения = Новый ОписаниеОповещения("ФормулыАлгоритмРасчетаЦеныНачалоВыбораЗавершение", ЭтотОбъект);
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "ОбщаяФорма.КонструкторФормул.Открытие");
        
    ОткрытьФорму("ОбщаяФорма.КонструкторФормул", ПараметрыОткрытия, ЭтотОбъект, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование И Элемент.ТекущаяСтрока = 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулыПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущаяСтрока = 0 Тогда
		Отказ = Истина;
	Иначе
		ТекущаяЦеноваяГруппа = -1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулыПриАктивизацииСтроки(Элемент)
	
	Элемент.ПодчиненныеЭлементы.ФормулыЦеноваяГруппа.ТолькоПросмотр = Элемент.ТекущаяСтрока = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.ЦеноваяГруппа = Неопределено Тогда
		Элемент.ТекущиеДанные.ЦеноваяГруппа = ПредопределенноеЗначение("Справочник.ЦеновыеГруппы.ПустаяСсылка")
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КонструкторПсихологическогоОкругления(Команда)
	
	СтрокаПравилОкругления = Элементы.ПравилаОкругленияЦены.ТекущиеДанные;
	
	Если СтрокаПравилОкругления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВерхняяГраницаДиапазона  = ВерхняяГраницаДиапазонаЦен(СтрокаПравилОкругления);
	ИдентификаторСтрокиПравилОкругления = СтрокаПравилОкругления.ПолучитьИдентификатор();

	Если Не ПроверитьКорректностьЗаполненияПравилОкругления(ИдентификаторСтрокиПравилОкругления, ВерхняяГраницаДиапазона) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаПравилОкругления.ТочностьОкругления)
		И (СтрокаПравилОкругления.ТочностьОкругления < ВерхняяГраницаДиапазона)
			Или ВерхняяГраницаДиапазона = -1 Тогда
		ВерхняяГраницаДиапазона = СтрокаПравилОкругления.ТочностьОкругления;
	КонецЕсли;
	
	ОкруглятьВБольшуюСторону = ?(МетодОкругления = 1 , Истина, Ложь);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТочностьОкругления", СтрокаПравилОкругления.ТочностьОкругления);
	ПараметрыОткрытия.Вставить("ОкруглятьВБольшуюСторону", ОкруглятьВБольшуюСторону);
	ПараметрыОткрытия.Вставить("ПсихологическоеОкругление", СтрокаПравилОкругления.ПсихологическоеОкругление);
	ПараметрыОткрытия.Вставить("ГраницаДиапазонаЦен", ВерхняяГраницаДиапазона);
	ПараметрыОткрытия.Вставить("ПримерЧисло", СтрокаПравилОкругления.НижняяГраницаДиапазонаЦен);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаПравилОкругления", СтрокаПравилОкругления);
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"КонструкторПсихологическогоОкругленияЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
        
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Справочник.ВидыЦен.Форма.КонструкторПсихологическогоОкругления.Открытие");
        
	ОткрытьФорму("Справочник.ВидыЦен.Форма.КонструкторПсихологическогоОкругления",
		ПараметрыОткрытия,
		ЭтотОбъект,
		,
		,
		,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторСхемыКомпоновкиДанных(Команда)
	
	ЗаголовокФормыСКД = НСтр("ru = 'Настройка схемы компоновки данных для вида цены ""%1""'");
	ЗаголовокФормыСКД = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокФормыСКД, Объект.Наименование);
	
	Адреса = ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище();
	
	ОбработчикОповещения = Новый ОписаниеОповещения("КонструкторСхемыКомпоновкиДанныхЗавершение", ЭтотОбъект, Адреса);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("НеПомещатьНастройкиВСхемуКомпоновкиДанных", Истина);
	ПараметрыОткрытия.Вставить("НеРедактироватьСхемуКомпоновкиДанных", Ложь);
	ПараметрыОткрытия.Вставить("НеНастраиватьУсловноеОформление", Истина);
	ПараметрыОткрытия.Вставить("НеНастраиватьВыбор", Истина);
	ПараметрыОткрытия.Вставить("НеНастраиватьПорядок", Истина);
	ПараметрыОткрытия.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("АдресСхемыКомпоновкиДанных", Адреса.СхемаКомпоновкиДанных);
	ПараметрыОткрытия.Вставить("АдресНастроекКомпоновкиДанных", Адреса.НастройкиКомпоновкиДанных);
	ПараметрыОткрытия.Вставить("Заголовок", ЗаголовокФормыСКД);
	
	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных",
		ПараметрыОткрытия,
		ЭтотОбъект,
		,
		,
		,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура КонструкторФормул(Команда)
	
	ПараметрыОткрытия = ПараметрыФормыРедактированияЦены(Объект.АлгоритмРасчетаЦены);
	ОбработчикОповещения = Новый ОписаниеОповещения("КонструкторФормулЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.КонструкторФормул", ПараметрыОткрытия, ЭтотОбъект, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторФормулТекущейСтроки(Команда)
	
	Если Элементы.Формулы.ТекущиеДанные <> Неопределено Тогда
		
		ПараметрыОткрытия = ПараметрыФормыРедактированияЦены(Элементы.Формулы.ТекущиеДанные.АлгоритмРасчетаЦены);
		ОбработчикОповещения = Новый ОписаниеОповещения("ФормулыАлгоритмРасчетаЦеныНачалоВыбораЗавершение", ЭтотОбъект);
        
        // &ЗамерПроизводительности
     	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
 		         Истина, "ОбщаяФорма.КонструкторФормул.Открытие");

        
        ОткрытьФорму("ОбщаяФорма.КонструкторФормул", ПараметрыОткрытия, ЭтотОбъект, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)

	Если Не Объект.Ссылка.Пустая() Тогда
		ДополнительныеПараметры = Новый Структура;
		ОбработчикОповещения = Новый ОписаниеОповещения("ОбработкаРазблокированияРеквизитовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект, ОбработчикОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормулу(Команда)
	
	Если ИспользоватьЦеновыеГруппы Тогда
		
		Если Элементы.Формулы.ТекущиеДанные <> Неопределено Тогда
			
			Формула = Элементы.Формулы.ТекущиеДанные.АлгоритмРасчетаЦены;
			ИндексЭлемента = Формулы.Индекс( Формулы.НайтиПоИдентификатору(Элементы.Формулы.ТекущиеДанные.ПолучитьИдентификатор()));
			ОчиститьСообщения();
			РаботаСФормуламиКлиент.ПроверитьФормулуИнтерактивно(Формула, МассивБазовыхВидовЦен(), "Формулы[" + ИндексЭлемента + "].АлгоритмРасчетаЦены");
			
		КонецЕсли;
		
	Иначе
		
		ОчиститьСообщения();
		РаботаСФормуламиКлиент.ПроверитьФормулуИнтерактивно(Объект.АлгоритмРасчетаЦены, МассивБазовыхВидовЦен(), "АлгоритмРасчетаЦены");
		
	КонецЕсли;

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Осуществляет поиск верхней границы диапазона цен.
//
// Возвращаемое значение:
// Строка таблицы правил округления.
// Если верхней границы нет возвращает -1.
//
&НаКлиенте
Функция ВерхняяГраницаДиапазонаЦен(СтрокаПравилОкругления)
	
	Индекс = Объект.ПравилаОкругленияЦены.Индекс(СтрокаПравилОкругления);
	
	Если Индекс < Объект.ПравилаОкругленияЦены.Количество() - 1 Тогда
		Возврат Объект.ПравилаОкругленияЦены[Индекс + 1].НижняяГраницаДиапазонаЦен;
	КонецЕсли;
	
	Возврат -1;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПредлагаемоеЗначениеИдентификатораВСписокВыбора()
	
	Элементы.Идентификатор.СписокВыбора[0].Значение = ПолучитьИдентификатор(Объект.Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьКонструктораПсихологическогоОкругления()
	
	Если КонструкторОкругленияДоступен Тогда
		Элементы.КоманднаяПанельПравилаОкругленияЦеныКонструкторПсихологическогоОкругления.Доступность = Элементы.ПравилаОкругленияЦены.ТекущиеДанные <> Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуБазовыхЦен()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыЦен.Ссылка         КАК Ссылка,
		|	ВидыЦен.Идентификатор  КАК Идентификатор,
		|	ВидыЦен.ВлияющиеВидыЦен.(
		|		ВлияющийВидЦен     КАК ВлияющийВидЦен
		|	)
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|ГДЕ
		|	ВидыЦен.Ссылка <> &ТекущаяЦена";
		
	Запрос.УстановитьПараметр("ТекущаяЦена", Объект.Ссылка);
	ТаблицаВидовЦен = Запрос.Выполнить().Выгрузить();
	
	ТекущийМассив = Новый Массив();
	ТекущийМассив.Добавить(Объект.Ссылка);
	
	Пока ТекущийМассив.Количество() > 0 Цикл
		
		МассивУдаляемых = Новый Массив();
		
		Для Каждого СтрокаТаблицы Из ТаблицаВидовЦен Цикл
			
			Для Каждого ВидЦены Из ТекущийМассив Цикл
				
				Если СтрокаТаблицы.ВлияющиеВидыЦен.Найти(ВидЦены, "ВлияющийВидЦен") <> Неопределено Тогда
					
					МассивУдаляемых.Добавить(СтрокаТаблицы);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ТекущийМассив.Очистить();
		
		Для Каждого УдаляемаяСтрока Из МассивУдаляемых Цикл
			
			ТекущийМассив.Добавить(УдаляемаяСтрока.Ссылка);
			ТаблицаВидовЦен.Удалить(УдаляемаяСтрока);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаВидовЦен.Колонки.Удалить(ТаблицаВидовЦен.Колонки.ВлияющиеВидыЦен);
	ЗначениеВРеквизитФормы(ТаблицаВидовЦен, "ДоступныеБазовыеВидыЦен");
	
КонецПроцедуры

&НаСервере
Процедура ИзвлечьБазовыеЦеныИзФормулы(ТекущийОбъект, Формула)
	
	МассивЭлементов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Формула, "[");
	
	Для Индекс = 1 По МассивЭлементов.Количество() - 1 Цикл
		
		Если ЗначениеЗаполнено(МассивЭлементов[Индекс]) Тогда
			
			ОкончаниеИдентификатора = Найти(МассивЭлементов[Индекс], "]");
			
			Если ОкончаниеИдентификатора > 0 Тогда
				
				БазоваяЦенаИдентификатор = Лев(МассивЭлементов[Индекс], ОкончаниеИдентификатора - 1);
				БазовыеЦены = ДоступныеБазовыеВидыЦен.НайтиСтроки(Новый Структура("Идентификатор", БазоваяЦенаИдентификатор));
				
				Если БазовыеЦены.Количество() > 0 Тогда
					
					Если ТекущийОбъект.ВлияющиеВидыЦен.НайтиСтроки(Новый Структура("ВлияющийВидЦен", БазовыеЦены[0])).Количество() = 0 Тогда
						ТекущийОбъект.ВлияющиеВидыЦен.Добавить().ВлияющийВидЦен = БазовыеЦены[0].Ссылка;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСтраницуПравилРасчета(ИнициализироватьОсновнуюФормулу)
	
	Если Не СтраницаПравилРасчетаИнициализирована Тогда
		
		Если ИспользоватьЦеновыеГруппы Тогда
			
			ТекущаяЦеноваяГруппа  = -1;
			Формула               = Формулы.Добавить();
			Формула.ЦеноваяГруппа = НСтр("ru='<Все ценовые группы>'");
			
			Если ИнициализироватьОсновнуюФормулу Тогда
				Формула.АлгоритмРасчетаЦены = Объект.АлгоритмРасчетаЦены;
			КонецЕсли;
			
			Для Каждого СтрокаЦеноваяГруппа Из Объект.ЦеновыеГруппы Цикл
				
				Формула                     = Формулы.Добавить();
				Формула.ЦеноваяГруппа       = СтрокаЦеноваяГруппа.ЦеноваяГруппа;
				Формула.АлгоритмРасчетаЦены = СтрокаЦеноваяГруппа.АлгоритмРасчетаЦены;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаполнитьТаблицуБазовыхЦен();
		ПостроитьДеревоОператоров();
		
		СтраницаПравилРасчетаИнициализирована = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьСтраниц(Форма)
	
	Если Форма.Объект.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ")
		Или Форма.Объект.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении") Тогда
		Форма.Элементы.ГруппаСтраницыСпособЗаданияЦены.ТекущаяСтраница = Форма.Элементы.СтраницаСКД;
	ИначеЕсли Форма.Объект.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.РассчитыватьПоДругимВидамЦен") Тогда
		Форма.Элементы.ГруппаСтраницыСпособЗаданияЦены.ТекущаяСтраница = Форма.Элементы.СтраницаПравилаРасчета;
	Иначе
		Форма.Элементы.ГруппаСтраницыСпособЗаданияЦены.ТекущаяСтраница = Форма.Элементы.СтраницаНазначатьВручную;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьТаблицуПравилОкругления()
	
	Если Объект.ПравилаОкругленияЦены.Количество() > 1 Тогда
		НастроитьТаблицуПравилОкругленияСервер();
	Иначе
		
		Если Объект.ПравилаОкругленияЦены.Количество() = 1 Тогда
			
			Если Объект.ПравилаОкругленияЦены[0].НижняяГраницаДиапазонаЦен = 0 Тогда
				ЦеновойДиапазон = НСтр("ru = '<Все цены>'");
			Иначе
				
				ЦеновойДиапазон = НСтр("ru = 'Свыше %НачалоДиапазона%'");
				ЦеновойДиапазон = СтрЗаменить(ЦеновойДиапазон, "%НачалоДиапазона%", Объект.ПравилаОкругленияЦены[0].НижняяГраницаДиапазонаЦен);
				
				Если ЗначениеЗаполнено(Объект.ВалютаЦены) Тогда
					ЦеновойДиапазон = ЦеновойДиапазон + " " + Объект.ВалютаЦены;
				КонецЕсли;
				
			КонецЕсли;
			
			Объект.ПравилаОкругленияЦены[0].ЦеновойДиапазон = ЦеновойДиапазон;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьТаблицуПравилОкругленияСервер()
	
	Если Объект.ПравилаОкругленияЦены.Количество() > 0 Тогда
		Объект.ПравилаОкругленияЦены.Сортировать("НижняяГраницаДиапазонаЦен");
	КонецЕсли;
	
	Для Индекс = 0 По Объект.ПравилаОкругленияЦены.Количество() - 1 Цикл
		
		Если Объект.ПравилаОкругленияЦены.Количество() = 1 И Объект.ПравилаОкругленияЦены[Индекс].НижняяГраницаДиапазонаЦен = 0 Тогда
			ЦеновойДиапазон = НСтр("ru = '<Все цены>'");
		Иначе
			
			Если Индекс = Объект.ПравилаОкругленияЦены.Количество() - 1 Тогда
				
				ЦеновойДиапазон = НСтр("ru = 'Свыше %НачалоДиапазона%'");
				ЦеновойДиапазон = СтрЗаменить(ЦеновойДиапазон, "%НачалоДиапазона%", Объект.ПравилаОкругленияЦены[Индекс].НижняяГраницаДиапазонаЦен);
				
			Иначе
				
				ЦеновойДиапазон = НСтр("ru = 'От %НачалоДиапазона% до %ОкончаниеДиапазона%'");
				ЦеновойДиапазон = СтрЗаменить(ЦеновойДиапазон, "%НачалоДиапазона%",    Объект.ПравилаОкругленияЦены[Индекс].НижняяГраницаДиапазонаЦен);
				ЦеновойДиапазон = СтрЗаменить(ЦеновойДиапазон, "%ОкончаниеДиапазона%", Объект.ПравилаОкругленияЦены[Индекс + 1].НижняяГраницаДиапазонаЦен);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.ВалютаЦены) Тогда
				ЦеновойДиапазон = ЦеновойДиапазон + " " + Объект.ВалютаЦены;
			КонецЕсли;
			
		КонецЕсли;
		
		Объект.ПравилаОкругленияЦены[Индекс].ЦеновойДиапазон = ЦеновойДиапазон;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредлагаемоеЗначениеИдентификатора()
	
	Если Не Элементы.Идентификатор.ТолькоПросмотр Тогда
		Объект.Идентификатор = ПолучитьИдентификатор(Объект.Наименование);
	КонецЕсли;
	ДобавитьПредлагаемоеЗначениеИдентификатораВСписокВыбора();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьXML(Значение)
	
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, Значение);
	Возврат Запись.Закрыть();
	
КонецФункции

&НаСервере
Функция ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище()
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	
	// Схема
	Если ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) ИЛИ ХранилищеСхемыКомпоновкиДанных = Неопределено Тогда
		СхемаИНастройки = Справочники.ВидыЦен.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(Объект.Ссылка, Объект.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	Иначе
		СхемаКомпоновкиДанных = ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаКомпоновкиДанных = Справочники.ВидыЦен.СформироватьНовуюСхемуКомпоновкиДанных();
	КонецЕсли;
	
	Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	// Настройки
	Настройки = ХранилищеНастроекКомпоновкиДанных.Получить();
	Если ЗначениеЗаполнено(Настройки) Тогда
		Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Адреса;
	
КонецФункции

// Вычисляет значение идентификатора вида цен в соответствии с правилами
// именования идентификаторов.
//
// Возвращаемое значение:
// Строка
// Идентификатор, соответствующий правилам именования идентификаторов.
//
&НаКлиенте
Функция ПолучитьИдентификатор(СтрНаименование)
	
	Разделители	=  " .,+,-,/,*,?,=,<,>,(,)%!@#$%&*""№:;{}[]?()\|/`~'^_";
	
	Идентификатор = "";
	БылСпецСимвол = Ложь;
	
	Для СчетчикСимволов = 1 По СтрДлина(СтрНаименование) Цикл
		
		Символ = Сред(СтрНаименование, СчетчикСимволов, 1);
		
		Если Найти(Разделители, Символ) <> 0 Тогда
			БылСпецСимвол = Истина;
		ИначеЕсли БылСпецСимвол Тогда
			БылСпецСимвол = Ложь;
			Идентификатор = Идентификатор + ВРег(Символ);
		Иначе
			Идентификатор = Идентификатор + Символ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Идентификатор;
	
КонецФункции

&НаКлиенте
Функция МассивБазовыхВидовЦен()
	
	БазовыеВидыЦенМассив = Новый Массив();
	
	Для Каждого ВидЦены Из ДоступныеБазовыеВидыЦен Цикл
		БазовыеВидыЦенМассив.Добавить(ВидЦены.Идентификатор);
	КонецЦикла;
	
	Возврат БазовыеВидыЦенМассив;
	
КонецФункции

&НаСервере
Функция МассивБазовыхВидовЦенСервер()
	
	БазовыеВидыЦенМассив = Новый Массив();
	
	Для Каждого ВидЦены Из ДоступныеБазовыеВидыЦен Цикл
		БазовыеВидыЦенМассив.Добавить(ВидЦены.Идентификатор);
	КонецЦикла;
	
	Возврат БазовыеВидыЦенМассив;
	
КонецФункции

&НаКлиенте
Функция ПараметрыФормыРедактированияЦены(Формула)
	
	МассивВидовЦен = МассивБазовыхВидовЦен();
	ЗаголовокВидовЦен = НСтр("ru = 'Доступные виды цен'");
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Формула", Формула);
	СтруктураРезультат.Вставить("Операнды", МассивВидовЦен);
	СтруктураРезультат.Вставить("ОперандыЗаголовок", ЗаголовокВидовЦен);
	СтруктураРезультат.Вставить("Операторы", АдресХранилищаДереваОператоров);
	
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ПостроитьДеревоОператоров()
	
	Дерево = РаботаСФормуламиПереопределяемый.ПостроитьДеревоОператоров();
	
	АдресХранилищаДереваОператоров = ПоместитьВоВременноеХранилище(Дерево, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ПрименитьИзмененияКСхемеКомпоновкиДанных(АдресСхемыКомпоновкиДанныхВХранилище, АдресНастроекКомпоновкиДанных)
	
	Если ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) Тогда
		
		СхемаИНастройки = Справочники.ВидыЦен.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(Объект.Ссылка, Объект.СхемаКомпоновкиДанных);
		
		// Если схема компоновки данных из макета <> полученной из редактора схеме компоновки данных.
		Если ПолучитьXML(СхемаИНастройки.СхемаКомпоновкиДанных) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище)) Тогда
			Объект.СхемаКомпоновкиДанных   = "";
			ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище));
		КонецЕсли;
		
		// Полученные настройки могут быть равны настройкам по умолчанию схемы.
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Попытка
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаИНастройки.СхемаКомпоновкиДанных));
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
		КонецПопытки;
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаИНастройки.СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		КомпоновщикНастроек.Восстановить();
		Если ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки()) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных)) Тогда
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных));
		Иначе
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
		КонецЕсли;
		
	Иначе
		
		Схема = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище);
		ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(Схема);
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Попытка
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
		КонецПопытки;
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КомпоновщикНастроек.Восстановить();
		Если ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки()) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных)) Тогда
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных));
		Иначе
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьКорректностьЗаполненияПравилОкругления(Знач ИдентификаторСтрокиПравилОкругления,Знач ВерхняяГраницаДиапазона)
	
	СтрокаПравилОкругления = Объект.ПравилаОкругленияЦены.НайтиПоИдентификатору(ИдентификаторСтрокиПравилОкругления);
	
	Если СтрокаПравилОкругления = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Отказ = Ложь;
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	СправочникОбъект.ПроверитьКорректностьПравилОкругленияЦеныВСтроке(СтрокаПравилОкругления, ВерхняяГраницаДиапазона, Отказ);
	
	Возврат Не Отказ;
	
КонецФункции

&НаСервере
Процедура СпособЗаданияЦеныПриИзмененииНаСервере()
	
	Если (Объект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
		Или Объект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении) Тогда
		
		СхемаИНастройки = Справочники.ВидыЦен.ОписаниеИСхемаКомпоновкиДанныхПоИмениМакета(Объект.Ссылка, Объект.СхемаКомпоновкиДанных);
		
		ХранилищеСхемыКомпоновкиДанных    = Новый ХранилищеЗначения(СхемаИНастройки.СхемаКомпоновкиДанных);
		ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(СхемаИНастройки.НастройкиКомпоновкиДанных);
		
	КонецЕсли;
	
	Если Не СтраницаПравилРасчетаИнициализирована
		И Объект.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоДругимВидамЦен Тогда
		
		ИнициализироватьСтраницуПравилРасчета(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СхемаКомпоновкиДанныхПриИзмененииНаСервере()
	
	ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьДополнительныеРеквизитыОбъекта()
	
	ЭтоНовыйОбъект = Объект.Ссылка.Пустая();
	Если ЭтоНовыйОбъект Тогда
		КонструкторОкругленияДоступен = Истина;
	Иначе
		Элементы.Формулы.ТолькоПросмотр = Истина;
		Элементы.КоманднаяПанельФормулыКонструкторФормул.Доступность = Ложь;
		Элементы.КоманднаяПанельПравилаОкругленияЦеныКонструкторПсихологическогоОкругления.Доступность = Ложь;
		КонструкторОкругленияДоступен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьДополнительныеРеквизитыОбъекта()
	
	Элементы.Формулы.ТолькоПросмотр = Ложь;
	Элементы.КоманднаяПанельФормулыКонструкторФормул.Доступность = Истина;
	Элементы.КоманднаяПанельПравилаОкругленияЦеныКонструкторПсихологическогоОкругления.Доступность = Истина;
	КонструкторОкругленияДоступен = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	СообщитьОбНДС();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПриПродажеПриИзменении(Элемент)
	СообщитьОбНДС();
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбНДС()
	Если Объект.ИспользоватьПриПродаже И НЕ Объект.ЦенаВключаетНДС Тогда
		СтрокаСообщения = НСтр("ru = 'В соответствии с п. 6 статьи 168 НК РФ рекомендуется включать НДС в цену продажи (даже если организация не является плательщиком НДС).'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , "ЦенаВключаетНДС", "Объект");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
