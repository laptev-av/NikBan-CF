#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция СписокТоваровПоПравилу(ПравилоОбмена) Экспорт
	
	СтруктураРеквизитовПравила = Новый Структура;
	СтруктураРеквизитовПравила.Вставить("Склад", "Склад");
	СтруктураРеквизитовПравила.Вставить("Магазин", "Склад.Магазин");
	СтруктураРеквизитовПравила.Вставить("ФорматМагазина", "Склад.Магазин.ФорматМагазина");
	СтруктураРеквизитовПравила.Вставить("ВыгружатьГруппыТоваров", "ВыгружатьГруппыТоваров");
	СтруктураРеквизитовПравила.Вставить("НастройкиКомпоновкиДанных", "НастройкиКомпоновкиДанных");
	СтруктураРеквизитовПравила.Вставить("ТипПодключаемогоОборудования", "ТипПодключаемогоОборудования"); 
	
	РеквизитыПравила = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПравилоОбмена, СтруктураРеквизитовПравила);
	Склад = РеквизитыПравила.Склад;
	Магазин = РеквизитыПравила.Магазин;
	ФорматМагазина = РеквизитыПравила.ФорматМагазина;
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Магазин);
	Если ИспользоватьАссортимент Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованием.ПолучитьМакет("ОбновлениеКодовSKUАссортимент");
	Иначе
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованием.ПолучитьМакет("ОбновлениеКодовSKU");
	КонецЕсли;
	
	// Подготовка компоновщика макета компоновки данных, загрузка настроек.
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	Компоновщик.ЗагрузитьНастройки(РеквизитыПравила.НастройкиКомпоновкиДанных.Получить());
	Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	// Заполнение структуры отчета и выбранных полей.
	Компоновщик.Настройки.Структура.Очистить();
	
	ГруппировкаДетальныеЗаписи = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДетальныеЗаписи.Использование = Истина;
	
	Компоновщик.Настройки.Выбор.Элементы.Очистить();
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Номенклатура");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Группа");
	ВыбранноеПоле.Использование = Истина;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Характеристика");
		ВыбранноеПоле.Использование = Истина;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Упаковка");
		ВыбранноеПоле.Использование = Истина;
	КонецЕсли;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("SKU");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Весовой");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("ЭтоГруппа");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("ТипНоменклатуры");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("КоличествоОстаток");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Цена");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("ДоговорПлатежногоАгента");
	ВыбранноеПоле.Использование = Истина;
	
	СегментыВызовСервера.ВключитьОтборПоСегментуНоменклатурыВСКД(Компоновщик);
	
	Если ИспользоватьАссортимент Тогда
		ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(Компоновщик.Настройки, "ОбъектПланирования", ФорматМагазина);
		ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(Компоновщик.Настройки, "НаДату", ТекущаяДатаСеанса());
	КонецЕсли;
	
	// Компоновка макета и исполнение запроса.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Попытка
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Исключение
		
		ТекстСообщения = НСтр("ru='В процессе формирования списка товаров произошла ошибка.
								|Правило обмена с подключаемым оборудованием %1 требует проверки.
								|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПравилоОбмена, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
		
	КонецПопытки;
	
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("Дата");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ПравилоОбмена");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПравилоОбмена;
	КонецЕсли;
	
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("Склад");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Склад;
	КонецЕсли;
	
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ТолькоСУстановленнымиЦенами");
	ТолькоСУстановленнымиЦенами = Ложь;
	
	Если Параметр <> Неопределено Тогда
		
		ТолькоСЦенами = Новый ПолеКомпоновкиДанных("ТолькоСУстановленнымиЦенами");
		
		СписокЭлементовОтбора = Компоновщик.Настройки.Отбор.Элементы;
		
		Для каждого Элемент Из СписокЭлементовОтбора Цикл
			
			Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Если Элемент.ЛевоеЗначение = ТолькоСЦенами И Элемент.Использование Тогда
				ТолькоСУстановленнымиЦенами = Элемент.ПравоеЗначение;
			КонецЕсли;
		КонецЦикла;
		
		Параметр.Значение = ТолькоСУстановленнымиЦенами;
		
	КонецЕсли;
	
	// ИспользоватьУпаковкиНоменклатуры
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ИспользоватьУпаковкиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	Если Параметр <> Неопределено Тогда
		
		ПолеКомпоновки = Новый ПолеКомпоновкиДанных("ИспользоватьУпаковкиНоменклатуры");
		
		СписокЭлементовОтбора = Компоновщик.Настройки.Отбор.Элементы;
		
		Для Каждого Элемент Из СписокЭлементовОтбора Цикл
			
			Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Если (Элемент.ЛевоеЗначение = ПолеКомпоновки) И Элемент.Использование Тогда
				ИспользоватьУпаковкиНоменклатуры = Элемент.ПравоеЗначение;
			КонецЕсли;
		КонецЦикла;
		
		Параметр.Значение = ИспользоватьУпаковкиНоменклатуры;
		
	КонецЕсли;
	
	// ИспользоватьХарактеристикиНоменклатуры
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	Если Параметр <> Неопределено Тогда
		
		ПолеКомпоновки = Новый ПолеКомпоновкиДанных("ИспользоватьХарактеристикиНоменклатуры");
		
		СписокЭлементовОтбора = Компоновщик.Настройки.Отбор.Элементы;
		
		Для каждого Элемент Из СписокЭлементовОтбора Цикл
			
			Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Если (Элемент.ЛевоеЗначение = ПолеКомпоновки) И Элемент.Использование Тогда
				ИспользоватьХарактеристикиНоменклатуры = Элемент.ПравоеЗначение;
			КонецЕсли;
		КонецЦикла;
		
		Параметр.Значение = ИспользоватьХарактеристикиНоменклатуры;
		
	КонецЕсли;
	
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ДанныеОтчета = Новый ТаблицаЗначений();
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		ДанныеОтчета.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		ДанныеОтчета.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	КонецЕсли;
	
	Если РеквизитыПравила.ВыгружатьГруппыТоваров Тогда
		
		МассивНоменклатур = ДанныеОтчета.ВыгрузитьКолонку("Номенклатура");
		ДобавитьГруппыНоменклатуры(ДанныеОтчета, МассивНоменклатур);
		ДанныеОтчета.Свернуть("SKU, Весовой, Группа, КоличествоОстаток, Номенклатура, ТипНоменклатуры, Упаковка, Характеристика, ЭтоГруппа, Цена, ДоговорПлатежногоАгента");
		
	КонецЕсли;
	
	ПодключаемоеОборудованиеOfflineВызовСервера.ОбновитьЦены(ДанныеОтчета, Магазин);
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Группа КАК Группа,
	|	Товары.ЭтоГруппа КАК ЭтоГруппа,
	|	Товары.SKU КАК SKU,
	|	Товары.Весовой КАК Весовой,
	|	Товары.КоличествоОстаток КАК КоличествоОстаток,
	|	Товары.Цена КАК Цена,
	|	Товары.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента
	|ПОМЕСТИТЬ ТаблицаДанныхСОтбором
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ТолькоСУстановленнымиЦенами
	|				ТОГДА НЕ(Товары.Цена = 0
	|							И НЕ Товары.ЭтоГруппа)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	SKU
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыТоваровPLUНаОборудовании.КодТовараSKU КАК КодТовараSKU,
	|	КодыТоваровPLUНаОборудовании.КодТовараPLU КАК КодТовараPLU
	|ПОМЕСТИТЬ ТаблицаКодыТоваров
	|ИЗ
	|	РегистрСведений.КодыТоваровPLUНаОборудовании КАК КодыТоваровPLUНаОборудовании
	|ГДЕ
	|	КодыТоваровPLUНаОборудовании.ПравилоОбмена = &ПравилоОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныхСОтбором.SKU КАК SKU,
	|	ТаблицаКодыТоваров.КодТовараPLU КАК PLU,
	|	ТаблицаДанныхСОтбором.Номенклатура КАК Номенклатура,
	|	ТаблицаДанныхСОтбором.Характеристика КАК Характеристика,
	|	ТаблицаДанныхСОтбором.Упаковка КАК Упаковка,
	|	ТаблицаДанныхСОтбором.Группа КАК Группа,
	|	ТаблицаДанныхСОтбором.ЭтоГруппа КАК ЭтоГруппа,
	|	ТаблицаДанныхСОтбором.Цена КАК Цена,
	|	ТаблицаДанныхСОтбором.Весовой КАК Весовой,
	|	ТаблицаДанныхСОтбором.КоличествоОстаток КАК КоличествоОстаток,
	|	ВЫБОР
	|		КОГДА ТаблицаДанныхСОтбором.ЭтоГруппа
	|			ТОГДА 0
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ИндексПиктограммы,
	|	ТаблицаДанныхСОтбором.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента
	|ИЗ
	|	ТаблицаКодыТоваров КАК ТаблицаКодыТоваров
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаДанныхСОтбором КАК ТаблицаДанныхСОтбором
	|		ПО ТаблицаКодыТоваров.КодТовараSKU = ТаблицаДанныхСОтбором.SKU
	|ГДЕ
	|	НЕ ТаблицаДанныхСОтбором.Номенклатура ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоГруппа УБЫВ";
	
	ВыгрузкаНаВесы = РеквизитыПравила.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток;
	
	Если ВыгрузкаНаВесы Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//Условия" ,"");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Товары", ДанныеОтчета);
	Запрос.УстановитьПараметр("ПравилоОбмена", ПравилоОбмена);
	Запрос.УстановитьПараметр("ТолькоСУстановленнымиЦенами", ТолькоСУстановленнымиЦенами);
	Результат = Запрос.Выполнить();
	
	СписокТоваров = Запрос.Выполнить().Выгрузить();
	
	Возврат СписокТоваров;
	
КонецФункции

// Получает реквизиты объекта, которые необходимо блокировать от изменения.
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Массив - блокируемые реквизиты объекта.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	Результат.Добавить("ТипПодключаемогоОборудования");
	Результат.Добавить("СвояНумерацияPLUНаОборудовании");
	Результат.Добавить("МаксимальныйКодPLU");
	
	
	Возврат Результат;

КонецФункции

// Процедура печати справочника PLU для весов с печатью этикеток.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КодыТоваров") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КодыТоваров", НСтр("ru = 'Коды товаров'"), СформироватьПечатнуюФормуКодыТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьПечатнуюФормуКодыТоваров(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КодыТоваров";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ПравилаОбменаСПодключаемымОборудованием.КодыТоваров");
	ПервыйДокумент = Истина;
	
	Для Каждого Объект Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ВыгрузкаНаВесы = Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		Если ВыгрузкаНаВесы Тогда
			ОбластьМакета.Параметры.ТекстЗаголовка = НСтр("ru = 'Коды товаров PLU для весов с печатью этикеток'");
		Иначе
			ОбластьМакета.Параметры.ТекстЗаголовка = НСтр("ru = 'Коды товаров SKU для кассы ККМ Offline'"); 
		КонецЕсли;
		ОбластьМакета.Параметры.ПравилоОбмена  = Объект;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");   
		ОбластьКод   = Макет.ПолучитьОбласть("ШапкаТаблицы|Код");
		Если ВыгрузкаНаВесы Тогда
			ОбластьКод.Параметры.ЗаголовокКода = "PLU"; 
		Иначе
			ОбластьКод.Параметры.ЗаголовокКода = "SKU"; 
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьКод);
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		
		ОбластьКод   = Макет.ПолучитьОбласть("Строка|Код");
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|Товар");
		
		Товары = ПодключаемоеОборудованиеOfflineВызовСервера.ПолучитьТоварыДляПравила(Объект);
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			Если ВыгрузкаНаВесы И СтрокаТЧ.ЕстьОшибки Тогда
				Продолжить;
			КонецЕсли;
			
			ОбластьКод.Параметры.Код = СтрокаТЧ.PLU;
			ТабличныйДокумент.Вывести(ОбластьКод);
			ОбластьТовар.Параметры.Товар = СтрокаТЧ.Наименование;
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи.
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Ответственный = Пользователи.ТекущийПользователь();
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Объект);
	
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ДобавитьГруппыНоменклатуры(Товары, МассивНоменклатур)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СпрНоменклатура.Родитель КАК Номенклатура,
	|	МАКСИМУМ(КодыТоваровSKU.SKU) КАК SKU,
	|	СпрНоменклатура.Родитель.Родитель КАК Группа
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|		ПО СпрНоменклатура.Родитель = КодыТоваровSKU.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKUГруппы
	|		ПО СпрНоменклатура.Родитель.Родитель = КодыТоваровSKUГруппы.Номенклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка В(&МассивНоменклатур)
	|	И НЕ СпрНоменклатура.Родитель = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СпрНоменклатура.Родитель,
	|	КодыТоваровSKUГруппы.SKU,
	|	СпрНоменклатура.Родитель.Родитель";
	
	Запрос.УстановитьПараметр("МассивНоменклатур", МассивНоменклатур);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура   = Выборка.Номенклатура;
			НоваяСтрока.SKU            = Выборка.SKU;
			НоваяСтрока.Группа         = Выборка.Группа;
			НоваяСтрока.ЭтоГруппа      = Истина;
			НоваяСтрока.Весовой        = Ложь;
			НоваяСтрока.Цена           = 0;
		КонецЦикла;
		
		МассивНоменклатур = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Номенклатура");
		
		ДобавитьГруппыНоменклатуры(Товары, МассивНоменклатур);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
