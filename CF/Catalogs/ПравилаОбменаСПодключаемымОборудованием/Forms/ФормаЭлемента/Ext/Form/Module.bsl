
&НаКлиенте
Перем ОтветПередЗаписью;

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиСертификатов(СтруктураРезультат, СтрокаРезультата);
		
	Иначе
		
		ИдентификаторСтроки = НайтиСтрокуВТаблице(СтрокаРезультата);
		Если ИдентификаторСтроки = Неопределено Тогда
			Если СтрокаРезультата.Свойство("Характеристика")
				И ЗначениеЗаполнено(СтрокаРезультата.Характеристика) Тогда
				ТекстПредупреждения = НСтр("ru = 'Номенклатура ""%1"" с характеристикой ""%2"" не найдена в табличной части ""Товары""'");
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										ТекстПредупреждения,
										СтрокаРезультата.Номенклатура,
										СтрокаРезультата.Характеристика);
			Иначе
				ТекстПредупреждения = НСтр("ru = 'Номенклатура ""%1"" не найдена в табличной части ""Товары""'");
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										ТекстПредупреждения, СтрокаРезультата.Номенклатура);
			КонецЕсли;
			СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВерхняяГраницаДиапазонаSKUВесовогоТовара = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ВерхняяГраницаДиапазонаSKUВесовогоТовара");
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма); 
	Элементы.НастройкаPLU.Видимость       = Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток;
	Элементы.МаксимальныйКодPLU.Доступность = Объект.СвояНумерацияPLUНаОборудовании;
	Элементы.ТоварыPLU.Видимость          = Элементы.НастройкаPLU.Видимость;
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	Настроить();
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	МассивКомандПО = Новый Массив;
	МассивКомандПО.Добавить("ВыгрузитьДанныеВТСД");
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект, МассивКомандПО);
	
	Элементы.ТабДок.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	Элементы.ТабДок.ОтображениеСостояния.Текст = НСтр("ru = 'Данные не рассчитаны. Нажмите ""Обновить"" для заполнения таблицы.'");
	Элементы.ТабДок.ОтображениеСостояния.Видимость = Истина;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.НастройкиКомпоновкиДанных = Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки());
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Настроить();
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Подсистема запрета редактирования ключевых реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПравилаОбменаСПодключаемымОборудованием", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	НастроитьДоступностьЭлементовПрайсЛиста();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриИзменении(Элемент)
	
	ДанныеАктуальны = Ложь;
	
	НастроитьДоступностьЭлементовПрайсЛиста();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПодключаемогоОборудованияПриИзменении(Элемент)
	Настроить();
	Элементы.НастройкаPLU.Видимость = Объект.ТипПодключаемогоОборудования = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток");
	Элементы.ТоварыPLU.Видимость = Элементы.НастройкаPLU.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ТипПодключаемогоОборудованияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Настроить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьГруппыТоваровПриИзменении(Элемент)
	
	ДанныеАктуальны = Ложь;
	
	НастроитьДоступностьЭлементовПрайсЛиста();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("АдресТоваровВХранилище", ПоместитьВоВременноеХранилищеСервер());
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура РаботаСКодамиSKU(Команда)
	ОткрытьФорму("Обработка.РаботаСКодамиТоваровSKU.Форма");
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьSKU(Команда)
	
	ВыгрузкаНаВесы = Объект.ТипПодключаемогоОборудования = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток");
	
	Если ВыгрузкаНаВесы Тогда
		ТекстСообщения = НСтр("ru = 'Выполняется генерация SKU и PLU...'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Выполняется генерация SKU...'");
	КонецЕсли;
	Состояние(ТекстСообщения);
	
	
	СоздатьSKUДляТоваровСервер();
	
	Если ВыгрузкаНаВесы Тогда
		ТекстСообщения = НСтр("ru = 'Генерация SKU и PLU завершена.'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Генерация SKU завершена.'");
	КонецЕсли;
	Состояние(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьPLU(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.SKU) Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Изменение PLU доступно только для позиций с SKU'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.PLU) Тогда
			
			КлючЗаписи = СоздатьКлючЗаписиРегистра(ТекущиеДанные.PLU);
			ПараметрыФормы.Вставить("Ключ", КлючЗаписи);
			
		Иначе
			
			ПараметрыСозданияPLU = Новый Структура;
			ПараметрыСозданияPLU.Вставить("ПравилоОбмена", Объект.Ссылка);
			ПараметрыСозданияPLU.Вставить("КодSKU", ТекущиеДанные.SKU);
			
			ПараметрыФормы.Вставить("ПараметрыСозданияPLU", ПараметрыСозданияPLU);
			
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьPLUЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("РегистрСведений.КодыТоваровPLUНаОборудовании.Форма.ФормаИзмененияPLU", ПараметрыФормы,,,,,ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьPLU(Команда)
	
	ОчиститьPLUСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьPLUСервер()
	
	Для Каждого ИдентификаторСтроки Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		ВыделеннаяСтрока = Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ЗначениеЗаполнено(ВыделеннаяСтрока.PLU) Тогда
			РегистрыСведений.КодыТоваровPLUНаОборудовании.УдалитьPLU(Объект.Ссылка, ВыделеннаяСтрока.PLU);
			ВыделеннаяСтрока.PLU = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокТоваров(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется обновление списка товаров...'"));
	
	ОбновитьСписокТоваровНаСервере();
	
	НастроитьДоступностьЭлементовПрайсЛиста();
	
	Состояние(НСтр("ru = 'Обновление списка товаров завершено.'"));
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиОтбораПоУмолчанию(Команда)
	
	ЗагрузитьНастройкиОтбораПоУмолчанию();
	
	ДанныеАктуальны = Ложь;
	НастроитьДоступностьЭлементовПрайсЛиста();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПередЗаписьюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда 
		ОтветПередЗаписью = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьPLUЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока.PLU = Результат.КодТовараPLU;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьКлючЗаписиРегистра(PLU)
	
	Возврат РегистрыСведений.КодыТоваровPLUНаОборудовании.СоздатьКлючЗаписи(Новый Структура("ПравилоОбмена, КодТовараPLU, КодТовараSKU", Объект.Ссылка, PLU));
	
КонецФункции

&НаСервере
Процедура СоздатьSKUДляТоваровСервер()
	
	СоздаватьSKU = Истина;
	РегистрыСведений.КодыТоваровSKU.ОбновитьКоды_SKU_PLU(Товары.Выгрузить(), СоздаватьSKU, Объект.Ссылка);
	ОбновитьСписокТоваровНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьЭлементовПрайсЛиста()
	
	Если ДанныеАктуальны Тогда
		
		Элементы.СтраницыВПрайсЛисте.ТекущаяСтраница = Элементы.СтраницаСписокТоваров;
		
	Иначе
		
		Элементы.СтраницыВПрайсЛисте.ТекущаяСтраница = Элементы.СтраницаОтборИзменен;
	КонецЕсли;
	
	Элементы.СгенерироватьSKU.Доступность    = ДанныеАктуальны;
	Элементы.ПоискПоШтрихкоду.Доступность    = ДанныеАктуальны;
	Элементы.ВыгрузитьДанныеВТСД.Доступность = ДанныеАктуальны;
	Элементы.ИзменитьPLU.Доступность         = ДанныеАктуальны;
	Элементы.ОчиститьPLU.Доступность         = ДанныеАктуальны;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокТоваровНаСервере()
	
	Товары.Очистить();
	
	ТаблицаТоваров = Справочники.ПравилаОбменаСПодключаемымОборудованием.СписокТоваровПоПравилу(Объект.Ссылка);
	
	Если НЕ ТаблицаТоваров = Неопределено Тогда
		Товары.Загрузить(ТаблицаТоваров);
	КонецЕсли;
	
	ДанныеАктуальны = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию()
	
	Если ИспользоватьАссортимент Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованием.ПолучитьМакет("ОбновлениеКодовSKUАссортимент");
	Иначе
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованием.ПолучитьМакет("ОбновлениеКодовSKU");
	КонецЕсли;
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор)));
	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	Если ИспользоватьАссортимент Тогда
		ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.Настройки, "ОбъектПланирования", ФорматМагазина);
		ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.Настройки, "НаДату", ТекущаяДатаСеанса());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Настроить()
	
	Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Магазин");
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Магазин);
	ФорматМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "ФорматМагазина");
	
	Если ИспользоватьАссортимент Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованием.ПолучитьМакет("ОбновлениеКодовSKUАссортимент");
	Иначе
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованием.ПолучитьМакет("ОбновлениеКодовSKU");
	КонецЕсли;

	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
    КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПравилаОбменаСПодключаемымОборудованием.НастройкиКомпоновкиДанных КАК НастройкиКомпоновкиДанных
		|ИЗ
		|	Справочник.ПравилаОбменаСПодключаемымОборудованием КАК ПравилаОбменаСПодключаемымОборудованием
		|ГДЕ
		|	ПравилаОбменаСПодключаемымОборудованием.Ссылка = &ПравилоОбмена");
		
		Запрос.УстановитьПараметр("ПравилоОбмена", Объект.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			НастройкиКомпоновкиДанных = Выборка.НастройкиКомпоновкиДанных.Получить();
			Если ЗначениеЗаполнено(НастройкиКомпоновкиДанных) Тогда
				КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
			Иначе
				КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	Если ИспользоватьАссортимент Тогда
		ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.Настройки, "ОбъектПланирования", ФорматМагазина);
		ОбщегоНазначенияРТКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.Настройки, "НаДату", ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		
		Элементы.ГруппаВыгружатьГруппыТоваров.Видимость = Ложь;
		Элементы.ТоварыPLU.Видимость = Истина;
		Элементы.ИзменитьPLU.Видимость = Истина;
		Элементы.ОчиститьPLU.Видимость = Истина;
		Элементы.СгенерироватьSKU.Заголовок = НСтр("ru = 'Сгенерировать SKU, PLU'");
		
	Иначе
		
		Элементы.ГруппаВыгружатьГруппыТоваров.Видимость = Истина;
		Элементы.ТоварыPLU.Видимость = Ложь;
		Элементы.ИзменитьPLU.Видимость = Ложь;
		Элементы.ОчиститьPLU.Видимость = Ложь;
		Элементы.СгенерироватьSKU.Заголовок = НСтр("ru = 'Сгенерировать SKU'");
		
	КонецЕсли;
	
	СкладОрганизация = Объект.Склад.Организация;
	СкладОрганизацияИНН = Объект.Склад.Организация.ИНН;
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуВТаблице(СтруктураРезультат)
	
	ИдентификаторСтроки = Неопределено;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", СтруктураРезультат.Номенклатура);
	Если СтруктураРезультат.Свойство("Характеристика") Тогда
		СтруктураПоиска.Вставить("Характеристика", СтруктураРезультат.Характеристика);
	КонецЕсли;
	СтрокиТаблицы = Товары.НайтиСтроки(СтруктураПоиска);
	Если СтрокиТаблицы.Количество() > 0 Тогда
		ИдентификаторСтроки = СтрокиТаблицы[0].ПолучитьИдентификатор();
	КонецЕсли;
		
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметров)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметров, "Товары");
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеСервер()
	
	ТоварыДляВыгрузки = Товары.Выгрузить();
	ТоварыДляВыгрузки.Колонки.Добавить("НомерСтроки", ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 0));
	СчетчикСтрок = 0;
	Для Каждого СтрокаТовара Из ТоварыДляВыгрузки Цикл
		СчетчикСтрок = СчетчикСтрок + 1;
		СтрокаТовара.НомерСтроки = СчетчикСтрок;
	КонецЦикла;
	АдресВХранилище = ПоместитьВоВременноеХранилище(ТоварыДляВыгрузки, УникальныйИдентификатор);
	Возврат АдресВХранилище;
	
КонецФункции

#КонецОбласти


