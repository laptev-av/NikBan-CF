
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбработкаРазблокированияРеквизитовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ИзменитьДоступность();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеСхемыКомпоновкиДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПрименитьИзмененияКСхемеКомпоновкиДанных(ДополнительныеПараметры.СхемаКомпоновкиДанных, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЭтаФорма.Модифицированность = Истина;
		Расписание         = Результат;
		РасписаниеСтрокой  = Строка(Расписание);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Подсистема запрета редактирования ключевых реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	// Заполнение списка схем компоновки данных.
	Элементы.СхемаКомпоновкиДанных.СписокВыбора.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидПравила) Тогда
		Объект.ВидПравила = Перечисления.ВидыПравилНачисленияБонусныхБаллов.Начисление;
	КонецЕсли;
	
	СформироватьСписокВыбораДляПравила();
	
	СоответствиеНастроек = Новый Структура;
	ПредыдущаяСхемаКомпоновкиДанных = Объект.СхемаКомпоновкиДанных;
	ХранилищеНастроекКомпоновкиДанных = Объект.Ссылка.ХранилищеНастроекКомпоновкиДанных;
	ИспользуетсяПроизвольныйОтбор = ХранилищеНастроекКомпоновкиДанных.Получить() <> Неопределено;
	ХранилищеСхемыКомпоновкиДанных = Объект.Ссылка.ХранилищеСхемыКомпоновкиДанных;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПолучитьРасписаниеРегламентногоЗадания();
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Расписание", Расписание);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Использование", РегламентноеЗаданиеИспользуется);
	
	ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = ХранилищеНастроекКомпоновкиДанных;
	ТекущийОбъект.ХранилищеСхемыКомпоновкиДанных    = ХранилищеСхемыКомпоновкиДанных;
	
	Если НЕ Отказ Тогда
		Если НЕ ОбязательныеПараметрыСКДЗаполнены(ТекущийОбъект) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Подсистема запрета редактирования ключевых реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СхемаКомпоновкиДанныхПриИзменении(Элемент)
	
	СхемаКомпоновкиДанныхПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПравилаПриИзменении(Элемент)
	
	ВидПравилаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПериодДействияПриИзменении(Элемент)
	
	ИзменитьДоступность();
	
	Объект.КоличествоПериодовДействия = ИспользоватьПериодДействия;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтсрочкуНачалаДействияПриИзменении(Элемент)
	
	ИзменитьДоступность();
	
	Объект.КоличествоПериодовОтсрочкиНачалаДействия = ИспользоватьОтсрочкуНачалаДействия;
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентноеЗаданиеАктивноПриИзменении(Элемент)
	
	Элементы.НастроитьРасписание.Доступность = РегламентноеЗаданиеИспользуется;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	Если Расписание = Неопределено Тогда
		ПолучитьРасписаниеРегламентногоЗадания();
	КонецЕсли;
	
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	ДополнительныеПараметры = Новый Структура;
	ОбработчикОповещения = Новый ОписаниеОповещения("НастроитьРасписаниеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДиалогРасписания.Показать(ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСхемуКомпоновкиДанных(Команда)
	
	ЗаголовокНастройки = НСтр("ru = 'Настройка СКД для правила ""%1""'");
	ЗаголовокНастройки = СтрЗаменить(ЗаголовокНастройки, "%1", Объект.Наименование);
	
	Адреса = ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище();
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("НеПомещатьНастройкиВСхемуКомпоновкиДанных", Истина);
	ПараметрыОткрытия.Вставить("НеРедактироватьСхемуКомпоновкиДанных", Ложь);
	ПараметрыОткрытия.Вставить("НеНастраиватьУсловноеОформление", Истина);
	ПараметрыОткрытия.Вставить("НеНастраиватьВыбор", Истина);
	ПараметрыОткрытия.Вставить("НеНастраиватьПорядок", Истина);
	ПараметрыОткрытия.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("АдресСхемыКомпоновкиДанных", Адреса.СхемаКомпоновкиДанных);
	ПараметрыОткрытия.Вставить("АдресНастроекКомпоновкиДанных", Адреса.НастройкиКомпоновкиДанных);
	ПараметрыОткрытия.Вставить("Заголовок", ЗаголовокНастройки);
	
	Обработчик = Новый ОписаниеОповещения("РедактированиеСхемыКомпоновкиДанныхЗавершение", ЭтотОбъект, Адреса);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных", ПараметрыОткрытия, ЭтаФорма, , , , Обработчик, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ДополнительныеПараметры = Новый Структура;
		ОбработчикОповещения = Новый ОписаниеОповещения("ОбработкаРазблокированияРеквизитовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект, ОбработчикОповещения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ИспользоватьПериодДействия         = ?(Объект.КоличествоПериодовДействия > 0, 1, 0);
	ИспользоватьОтсрочкуНачалаДействия = ?(Объект.КоличествоПериодовОтсрочкиНачалаДействия > 0, 1, 0);
	
	ИзменитьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРасписаниеРегламентногоЗадания()
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Расписание.ВремяНачала = '00010101220000'; // в 10:00 вечера
		Расписание.ПериодПовтораДней = 1; // каждый день
		
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		ИдентификаторЗадания = Объект.РегламентноеЗадание;
		Если ТипЗнч(ИдентификаторЗадания) = Тип("УникальныйИдентификатор") Тогда
			Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
			Если Задание <> Неопределено Тогда
				Расписание = Задание.Расписание;
				РегламентноеЗаданиеИспользуется = Задание.Использование;
				РасписаниеСтрокой = Строка(Расписание);
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьXML(Значение)
	
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, Значение);
	Возврат Запись.Закрыть();
	
КонецФункции

&НаСервере
Функция ПрименитьИзмененияКСхемеКомпоновкиДанных(АдресСхемыКомпоновкиДанныхВХранилище, АдресНастроекКомпоновкиДанных)
	
	Если ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) Тогда
		
		СхемаИНастройки = Справочники.ПравилаНачисленияБонусныхБаллов.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(Объект.Ссылка, Объект.СхемаКомпоновкиДанных);
		
		// Если схема компоновки данных из макета <> полученной из редактора схеме компоновки данных.
		Если ПолучитьXML(СхемаИНастройки.СхемаКомпоновкиДанных) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище)) Тогда
			Объект.СхемаКомпоновкиДанных   = "ШаблонПроизвольнойСхемы";
			ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище));
		КонецЕсли;
		
		// Полученные настройки могут быть равны настройкам по умолчанию схемы.
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Попытка
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаИНастройки.СхемаКомпоновкиДанных));
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
		КонецПопытки;
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаИНастройки.СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		КомпоновщикНастроек.Восстановить();
		Если ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки()) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных)) Тогда
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных));
		Иначе
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
		КонецЕсли;
		
	Иначе
		
		Схема = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище);
		ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(Схема);
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Попытка
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
		КонецПопытки;
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КомпоновщикНастроек.Восстановить();
		Если ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки()) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных)) Тогда
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных));
		Иначе
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
	ИспользуетсяПроизвольныйОтбор = ХранилищеНастроекКомпоновкиДанных.Получить() <> Неопределено;
	
КонецФункции

&НаСервере
Функция ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище()
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	
	СхемаКомпоновкиДанных = Неопределено;
	
	// Схема
	Если ХранилищеСхемыКомпоновкиДанных = Неопределено Тогда
		Если ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) Тогда
			СхемаИНастройки = Справочники.ПравилаНачисленияБонусныхБаллов.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(Объект.Ссылка, Объект.СхемаКомпоновкиДанных);
			СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
		КонецЕсли;
	Иначе
		СхемаКомпоновкиДанных = ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		Если ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) Тогда
			СхемаИНастройки = Справочники.ПравилаНачисленияБонусныхБаллов.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(Объект.Ссылка, Объект.СхемаКомпоновкиДанных);
			СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
		Иначе
			СхемаКомпоновкиДанных = Справочники.ПравилаНачисленияБонусныхБаллов.СформироватьНовуюСхемуКомпоновкиДанных();
		КонецЕсли;
	КонецЕсли;
	
	Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	// Настройки
	Настройки = ХранилищеНастроекКомпоновкиДанных.Получить();
	Если ЗначениеЗаполнено(Настройки) Тогда
		Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Адреса;
	
КонецФункции

&НаСервере
Процедура СхемаКомпоновкиДанныхПриИзмененииНаСервере()
	
	СохранитьНастройки();
	
	Ключ = Объект.СхемаКомпоновкиДанных + "Схема";
	
	АдресВоВременномХранилище = Неопределено;
	Если ПредыдущаяСхемаКомпоновкиДанных = Объект.СхемаКомпоновкиДанных
		И СоответствиеНастроек.Свойство(Ключ, АдресВоВременномХранилище)
		И ЗначениеЗаполнено(АдресВоВременномХранилище) Тогда
		ХранилищеНастроекКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Иначе
		ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
	ИспользуетсяПроизвольныйОтбор = ХранилищеНастроекКомпоновкиДанных.Получить() <> Неопределено;
	
	ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
	
	ПредыдущаяСхемаКомпоновкиДанных = Объект.СхемаКомпоновкиДанных;
	Элементы.РедактироватьСхемуКомпоновкиДанных.Доступность = ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()

	Ключ = ПредыдущаяСхемаКомпоновкиДанных + "Схема";
	
	АдресВоВременномХранилище = Неопределено;
	АдресВоВременномХранилище = СоответствиеНастроек.Свойство(Ключ, АдресВоВременномХранилище);
	
	Если ХранилищеНастроекКомпоновкиДанных = Неопределено Тогда
		ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресВоВременномХранилище) Тогда
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
			ХранилищеНастроекКомпоновкиДанных,
			АдресВоВременномХранилище);
	Иначе
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
			ХранилищеНастроекКомпоновкиДанных,
			УникальныйИдентификатор);
	КонецЕсли;
	
	СоответствиеНастроек.Вставить(Ключ, АдресВоВременномХранилище);
	
КонецПроцедуры

&НаСервере
Процедура ВидПравилаПриИзмененииСервер()
	
	Объект.СхемаКомпоновкиДанных = "";
	СформироватьСписокВыбораДляПравила();
	ИзменитьДоступность();
	СхемаКомпоновкиДанныхПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДоступность()
	
	ЭтоНачисление = Объект.ВидПравила = Перечисления.ВидыПравилНачисленияБонусныхБаллов.Начисление;
	Элементы.ГруппаСрокДействия.Доступность = ЭтоНачисление;
	Элементы.ГруппаОтсрочкаДействия.Доступность = ЭтоНачисление;
	Если ЭтоНачисление Тогда
		Элементы.ГруппаСрокДействияПраво.Доступность = (ИспользоватьПериодДействия = 1);
		Элементы.ГруппаОтсрочкаПраво.Доступность = (ИспользоватьОтсрочкуНачалаДействия = 1);
	КонецЕсли;
	Элементы.НастроитьРасписание.Доступность = РегламентноеЗаданиеИспользуется;
	Элементы.РедактироватьСхемуКомпоновкиДанных.Доступность = ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокВыбораДляПравила()
	
	Элементы.СхемаКомпоновкиДанных.СписокВыбора.Очистить();
	
	ПризнакПредопределенногоМакета = Врег("Предопределенный");
	ДлинаПризнакаПредопределенногоМакета = СтрДлина(ПризнакПредопределенногоМакета);
	Макеты = Метаданные.Справочники.ПравилаНачисленияБонусныхБаллов.Макеты;
	Для Каждого Макет Из Макеты Цикл
		Если Макет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных Тогда
			
			Если ВРег(Прав(Макет.Имя, ДлинаПризнакаПредопределенногоМакета)) = ПризнакПредопределенногоМакета Тогда
				Если Объект.ВидПравила = Перечисления.ВидыПравилНачисленияБонусныхБаллов.Начисление
					И Лев(Макет.Имя, 10) = "Начисление" Тогда
					Элементы.СхемаКомпоновкиДанных.СписокВыбора.Добавить(Макет.Имя, Макет.Синоним);
				ИначеЕсли Объект.ВидПравила = Перечисления.ВидыПравилНачисленияБонусныхБаллов.Списание
					И Лев(Макет.Имя, 8) = "Списание" Тогда
					Элементы.СхемаКомпоновкиДанных.СписокВыбора.Добавить(Макет.Имя, Макет.Синоним);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ПредставлениеПроизвольнойСхемы = НСтр("ru = 'Произвольный'");
	Элементы.СхемаКомпоновкиДанных.СписокВыбора.Добавить("ШаблонПроизвольнойСхемы", ПредставлениеПроизвольнойСхемы);	
	
КонецПроцедуры

&НаСервере
Функция ОбязательныеПараметрыСКДЗаполнены(ТекущийОбъект)
	
	ВсеВерно = Истина;
	Если ЗначениеЗаполнено(ТекущийОбъект.СхемаКомпоновкиДанных) Тогда
		
		ПроверяемаяСхема = Неопределено;
		Если ТекущийОбъект.ХранилищеСхемыКомпоновкиДанных <> Неопределено Тогда
			ПроверяемаяСхема = ТекущийОбъект.ХранилищеСхемыКомпоновкиДанных.Получить();
		КонецЕсли;
		
		Если ПроверяемаяСхема = Неопределено Тогда
			ПроверяемаяСхема = Справочники.ПравилаНачисленияБонусныхБаллов.ПолучитьМакет(ТекущийОбъект.СхемаКомпоновкиДанных);
		КонецЕсли;
		
		Если ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных <> Неопределено Тогда
			НастройкиКомпоновкиДанных = ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных.Получить();
		КонецЕсли;
		
		// Подготовка компоновщика макета компоновки данных, загрузка настроек.
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПроверяемаяСхема));
		
		Если НастройкиКомпоновкиДанных = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(ПроверяемаяСхема.НастройкиПоУмолчанию);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
			КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
		КонецЕсли;

		НастройкиСКД = КомпоновщикНастроек.Настройки;
		СписокПараметровСКД = НастройкиСКД.ПараметрыДанных.Элементы;
		ИндексПараметра = 0;
		Для Каждого ПараметрСКД Из СписокПараметровСКД Цикл
			Если ТипЗнч(ПараметрСКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ПараметрНастроек = КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ПараметрСКД.Параметр);
				Если ПараметрНастроек <> Неопределено И ПараметрНастроек.ЗапрещатьНезаполненныеЗначения Тогда
					Если (НЕ ПараметрСКД.Использование) ИЛИ (НЕ ЗначениеЗаполнено(ПараметрСКД.Значение)) Тогда
						ТекстСообщения = НСтр("ru = 'В схеме компоновки не заполнено значение обязательного параметра ""%1""'");
						ИмяПараметраСКД = ?(ЗначениеЗаполнено(ПараметрСКД.ПредставлениеПользовательскойНастройки),
												ПараметрСКД.ПредставлениеПользовательскойНастройки,
												?(ЗначениеЗаполнено(ПараметрНастроек.Заголовок),
																	ПараметрНастроек.Заголовок,
																	ПараметрНастроек.Имя));
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяПараметраСКД);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстСообщения,
							,
							"СхемаКомпоновкиДанных",
							"Объект");
						ВсеВерно = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ИндексПараметра = ИндексПараметра + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВсеВерно;
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
