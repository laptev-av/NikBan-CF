#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если НЕ ЭтоГруппа Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(РегламентноеЗадание);
		Если Задание = Неопределено Тогда
			
			Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.АвтоматическоеНачислениеИСписаниеБонусныхБаллов);
			Задание.Использование = Ложь;
			НаименованиеЗадания = НСтр("ru = 'Расчет бонусов по правилу: %1'");
			НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеЗадания, Наименование);
			Задание.Наименование = НаименованиеЗадания;
			Задание.Записать();
			
			РегламентноеЗадание = Задание.УникальныйИдентификатор;
			
		КонецЕсли;
		
		ДополнительныеСвойства.Вставить("Задание", Задание);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		Если ВидПравила = Перечисления.ВидыПравилНачисленияБонусныхБаллов.Списание Тогда
			ПериодДействия = Перечисления.Периодичность.ПустаяСсылка();
			КоличествоПериодовДействия = 0;
			ПериодОтсрочкиНачалаДействия = Перечисления.Периодичность.ПустаяСсылка();
			КоличествоПериодовОтсрочкиНачалаДействия = 0;
		Иначе
			Если КоличествоПериодовДействия = 0 Тогда
				ПериодДействия = Перечисления.Периодичность.ПустаяСсылка();
			КонецЕсли;
			Если КоличествоПериодовОтсрочкиНачалаДействия = 0 Тогда
				ПериодОтсрочкиНачалаДействия = Перечисления.Периодичность.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если НЕ ЭтоГруппа Тогда
		УстановитьПривилегированныйРежим(Истина);
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(РегламентноеЗадание);
		Если Задание <> Неопределено Тогда
			Задание.Удалить();
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если НЕ ЭтоГруппа Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если ДополнительныеСвойства.Свойство("Задание") Тогда
			Задание = ДополнительныеСвойства.Задание;
			Если Задание = Неопределено Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
		
		ЗаданиеИзменено = Ложь;
		
		// Расписание устанавливается в форме элемента.
		Если ДополнительныеСвойства.Свойство("Расписание") 
			И ТипЗнч(ДополнительныеСвойства.Расписание) = Тип("РасписаниеРегламентногоЗадания")
			И Строка(ДополнительныеСвойства.Расписание) <> Строка(Задание.Расписание) Тогда
			Задание.Расписание = ДополнительныеСвойства.Расписание;
			ЗаданиеИзменено = Истина;
		КонецЕсли;
		
		// Использование устанавливается в форме элемента.
		Если ПометкаУдаления И Задание.Использование Тогда
			
			Задание.Использование = Ложь;
			ЗаданиеИзменено = Истина;
			
		ИначеЕсли ДополнительныеСвойства.Свойство("Использование") 
				И ДополнительныеСвойства.Использование <> Задание.Использование Тогда
				
			Задание.Использование = ДополнительныеСвойства.Использование;
			ЗаданиеИзменено = Истина;
			
		КонецЕсли;

		НаименованиеЗадания = НСтр("ru = 'Расчет бонусов по правилу: %1'");
		НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеЗадания, Наименование);
		Если Задание.Наименование <> НаименованиеЗадания Тогда
			Задание.Наименование = НаименованиеЗадания;
			ЗаданиеИзменено = Истина;
		КонецЕсли;
		
		Если Задание.Параметры.Количество() <> 1 ИЛИ Задание.Параметры[0] <> Ссылка Тогда
			ПараметрыЗадания = Новый Массив;
			ПараметрыЗадания.Добавить(Ссылка);
			Задание.Параметры = ПараметрыЗадания;
			ЗаданиеИзменено = Истина;
		КонецЕсли;
			
		Если ЗаданиеИзменено Тогда
			УстановитьПривилегированныйРежим(Истина);
			Задание.Записать();
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если ВидПравила = Перечисления.ВидыПравилНачисленияБонусныхБаллов.Списание Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПериодДействия");
		МассивНепроверяемыхРеквизитов.Добавить("КоличествоПериодовДействия");
		МассивНепроверяемыхРеквизитов.Добавить("КоличествоПериодовОтсрочкиНачалаДействия");
		МассивНепроверяемыхРеквизитов.Добавить("ПериодОтсрочкиНачалаДействия");
	Иначе
		Если КоличествоПериодовДействия = 0 Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ПериодДействия");
		КонецЕсли;
		Если КоличествоПериодовОтсрочкиНачалаДействия = 0 Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ПериодОтсрочкиНачалаДействия");
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

