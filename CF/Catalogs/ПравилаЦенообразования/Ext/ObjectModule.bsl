#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура ЗаполнитьНаборыЗначенийДоступа заполняет наборы значений доступа
// по объекту в таблице с полями:
//  - НомерНабора     Число                                     (необязательно, если набор один),
//  - ВидДоступа      ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//  - ЗначениеДоступа Неопределено, СправочникСсылка или др.    (обязательно),
//  - Чтение          Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Добавление      Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Изменение       Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Удаление        Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора).
//
//  Вызывается из процедуры УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	// Логика ограничения следующая:
	// объект доступен, если доступны все виды цен.
	// 
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		СтрокаТаб = Таблица.Добавить();
		СтрокаТаб.ЗначениеДоступа = ВидЦен;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ЦеновыеГруппы Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВидЦен) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаб = Таблица.Добавить();
		СтрокаТаб.ЗначениеДоступа = СтрокаТаблицы.ВидЦен;
	КонецЦикла;
	
	Если Таблица.Количество() = 0 Тогда
	
		СтрокаТаб = Таблица.Добавить();
		СтрокаТаб.Чтение          = Истина;
		СтрокаТаб.Изменение       = Истина;
		СтрокаТаб.ЗначениеДоступа = Справочники.ВидыЦен.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьСправочник();
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполнения".
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЦенообразованиеПереопределяемый.ИспользуютсяВалюты() Тогда
		
		ПроверяемыйРеквизитВалюта = ПроверяемыеРеквизиты.Найти("Валюта");
		
		Если ПроверяемыйРеквизитВалюта <> Неопределено Тогда
			
			ПроверяемыеРеквизиты.Удалить(ПроверяемыйРеквизитВалюта);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЦеновыеГруппы.НомерСтроки КАК НомерСтроки,
		|	ЦеновыеГруппы.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	ЦеновыеГруппы.ВидЦен КАК ВидЦен
		|ПОМЕСТИТЬ ВременнаяТаблицаЦеновыеГруппы
		|ИЗ
		|	&ЦеновыеГруппы КАК ЦеновыеГруппы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЦеноваяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЦеновыеГруппы.НомерСтроки) КАК НомерСтроки,
		|	ЦеновыеГруппы.ЦеноваяГруппа КАК ЦеноваяГруппа
		|ИЗ
		|	ВременнаяТаблицаЦеновыеГруппы КАК ЦеновыеГруппы
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеновыеГруппы.ЦеноваяГруппа
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(*) > 1
		|;");
		
		Запрос.УстановитьПараметр("ЦеновыеГруппы",ЦеновыеГруппы.Выгрузить());
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ТекстОшибки = НСтр("ru='Ценовая группа ""%ЦеноваяГруппа%"" повторяется'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ЦеноваяГруппа%", Выборка.ЦеноваяГруппа);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"ЦеновыеГруппы[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "].ЦеноваяГруппа",
				,
				Отказ);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПриКопировании".
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ИнициализироватьСправочник();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Инициализирует правило ценообразования.
//
Процедура ИнициализироватьСправочник()
	
	Ответственный      = Пользователи.ТекущийПользователь();
	ДатаНачалаДействия = ТекущаяДатаСеанса();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
