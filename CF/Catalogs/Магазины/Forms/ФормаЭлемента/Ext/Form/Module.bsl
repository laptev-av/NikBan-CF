
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбработкаРазблокированияРеквизитовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		Если Не ЗначениеЗаполнено(Объект.СкладПоступления) Тогда
			Элементы.СкладПоступления.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.СкладПродажи) Тогда
			Элементы.СкладПродажи.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьДоступностьРеквизитов();
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект, "СтраницаКонтактнаяИнформация",ПоложениеЗаголовкаЭлементаФормы.Лево);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		СоздаватьСкладыПриЗаписи = Истина;
	КонецЕсли;
	УстановитьВидимостьСкладов();
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СкладУправляющейСистемы", "Видимость", Объект.СкладУправляющейСистемы);
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаОсновные", "Видимость", НЕ Объект.СкладУправляющейСистемы);
	
	УстановитьПараметрыВыбораВидаМинимальныхЦенПродажи();
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если НЕ ЗначениеЗаполнено(Объект.СкладПоступления) Тогда
		Элементы.СкладПоступления.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СкладПродажи) Тогда
		Элементы.СкладПродажи.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Склады
	Если СоздаватьСкладыПриЗаписи Тогда
		СсылкаНовогоМагазина = Справочники.Магазины.ПолучитьСсылку(Новый УникальныйИдентификатор());
		ТекущаяСсылка = ТекущийОбъект.Ссылка;
		Если КоличествоСкладов = 0 Тогда
			
			ОбъектСклад_Ссылка = НовыйСклад(НаименованиеСклада, 
													  ТекущаяСсылка, 
													  ОрганизацияПродаж, 
													  Перечисления.ТипыСкладов.ТорговыйЗал);
			
			ТекущийОбъект.СкладПоступления = ОбъектСклад_Ссылка;
			ТекущийОбъект.СкладПродажи = ОбъектСклад_Ссылка;
			
		Иначе
			
			ОбъектСклад_Ссылка = НовыйСклад(НаименованиеСкладаПоступления, 
													  ТекущаяСсылка, 
													  Справочники.Организации.ПустаяСсылка(), 
													  Перечисления.ТипыСкладов.СкладскоеПомещение);
			
			ТекущийОбъект.СкладПоступления = ОбъектСклад_Ссылка;
			
			ОбъектСклад_Ссылка = НовыйСклад(НаименованиеСкладаПродажи, 
													  ТекущийОбъект.Ссылка, 
													  ОрганизацияПродаж, 
													  Перечисления.ТипыСкладов.ТорговыйЗал);
			
			ТекущийОбъект.СкладПродажи = ОбъектСклад_Ссылка;
			
		КонецЕсли;
		ТекущийОбъект.Записать();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
Если ИмяСобытия = "ЗагруженАдресныйКлассификатор" Тогда
		
		Элементы.ДекорацияАдресныйКлассификаторНеЗагружен.Видимость = АдресныйКлассификаторПуст();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// Подсистема запрета редактирования ключевых реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.СкладПродажи) Тогда
		Элементы.СкладПродажи.ТолькоПросмотр = Ложь;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.СкладПоступления) Тогда
		Элементы.СкладПоступления.ТолькоПросмотр = Ложь;
	КонецЕсли;
	СоздаватьСкладыПриЗаписи = Ложь;
	УстановитьВидимостьСкладов();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	

	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если СоздаватьСкладыПриЗаписи Тогда
		Если КоличествоСкладов = 0 Тогда
			МассивНепроверяемыхРеквизитов.Добавить("НаименованиеСкладаПродажи");
			МассивНепроверяемыхРеквизитов.Добавить("НаименованиеСкладаПоступления");
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("НаименованиеСклада");
		КонецЕсли;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("НаименованиеСкладаПродажи");
		МассивНепроверяемыхРеквизитов.Добавить("НаименованиеСкладаПоступления");
		МассивНепроверяемыхРеквизитов.Добавить("НаименованиеСклада");
		МассивНепроверяемыхРеквизитов.Добавить("ОрганизацияПродаж");
	КонецЕсли;
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПравилоЦенообразованияПриИзменении(Элемент)
	
	ПриИзмененииПравилоЦенообразования();
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматМагазинаПриИзменении(Элемент)
	ТекстСообщения = "";
	ФорматМагазинаПриИзмененииСервер(ТекстСообщения);
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ПоказатьОповещениеПользователя(, , ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьАссортиментПриИзменении(Элемент)
	
	Элементы.ФорматМагазина.АвтоОтметкаНезаполненного = Объект.КонтролироватьАссортимент;
	Элементы.ФорматМагазина.ОтметкаНезаполненного = Объект.КонтролироватьАссортимент;
	Элементы.ПравилоЦенообразования.Видимость = НЕ (ЦеныВАссортименте И Объект.КонтролироватьАссортимент);
	ТекстСообщения = "";
	ФорматМагазинаПриИзмененииСервер(ТекстСообщения);
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ПоказатьОповещениеПользователя(, , ТекстСообщения);
	КонецЕсли;
	
	Если НЕ Объект.КонтролироватьАссортимент Тогда
		Объект.КонтролироватьАссортиментВЗаказеПокупателя = Ложь;
	КонецЕсли;
	Элементы.КонтролироватьАссортиментВЗаказеПокупателя.Доступность = Объект.КонтролироватьАссортимент;

КонецПроцедуры

&НаКлиенте
Процедура КоличествоСкладовПриИзменении(Элемент)
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОдинСклад", "Видимость", КоличествоСкладов = 0);
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНесколькоСкладов", "Видимость", КоличествоСкладов <> 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАдресныйКлассификаторНеЗагруженОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "ЗагрузитьАдресныйКлассификатор" Тогда
		СтандартнаяОбработка = Ложь;
		АдресныйКлассификаторКлиент.ЗагрузитьАдресныйКлассификатор();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПлощадьТорговогоЗалаСкладыПриИзменении(Элемент)
	ПроверкаПлощадиТорговогоЗала();
КонецПроцедуры

&НаКлиенте
Процедура ПлощадьТорговогоЗалаОдинСкладПриИзменении(Элемент)
	ПроверкаПлощадиТорговогоЗала()
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик команды, создаваемой механизмом запрета редактирования ключевых реквизитов.
//
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ДополнительныеПараметры = Новый Структура;
		ОбработчикОповещения = Новый ОписаниеОповещения("ОбработкаРазблокированияРеквизитовЗавершение", 
			ЭтотОбъект, 
			ДополнительныеПараметры);
		ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект, 
			ОбработчикОповещения);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент");
	ЦеныВАссортименте = ПолучитьФункциональнуюОпцию("УстанавливатьВидыЦенВАссортименте");
	ИспользоватьЗаказыПокупателей = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПокупателей");
	
	Элементы.КонтролироватьАссортиментВЗаказеПокупателя.Видимость = ИспользоватьАссортимент И ИспользоватьЗаказыПокупателей;
	
	Если ИспользоватьАссортимент Тогда
		Элементы.ПравилоЦенообразования.Видимость = НЕ (ЦеныВАссортименте И Объект.КонтролироватьАссортимент);
		Элементы.ФорматМагазина.АвтоОтметкаНезаполненного = Объект.КонтролироватьАссортимент;
		Элементы.ФорматМагазина.ОтметкаНезаполненного = Объект.КонтролироватьАссортимент;
		Элементы.Ценообразование.Заголовок = НСтр("ru = 'Ценообразование и ассортиментная политика'");
	Иначе
		Элементы.Ценообразование.Заголовок = НСтр("ru = 'Ценообразование'");
	КонецЕсли;
	
	Элементы.ТипОкругленияЧекаВПользуПокупателя.Доступность = ЗначениеЗаполнено(Объект.ПорядокОкругленияСуммыЧекаВПользуПокупателя);
	Если Объект.ТипОкругленияЧекаВПользуПокупателя = 1 Тогда
		Элементы.ПорядокОкругленияСуммыЧекаВПользуПокупателя.Заголовок = НСтр("ru = 'Порядок округления строк чека'");
	Иначе
		Элементы.ПорядокОкругленияСуммыЧекаВПользуПокупателя.Заголовок = НСтр("ru = 'Порядок округления суммы чека'");
	КонецЕсли;
	
	Элементы.ДекорацияАдресныйКлассификаторНеЗагружен.Видимость = АдресныйКлассификаторПуст();
	
	Текст = СтрШаблон(
		НСтр("ru = 'Для автоподбора и выбора адресных сведений необходимо <a href = %1 >загрузить классификатор</a>.'"),
		"ЗагрузитьАдресныйКлассификатор");
		ФорматированнаяСтрока = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(Текст);
		Элементы.ДекорацияАдресныйКлассификаторНеЗагружен.Заголовок = ФорматированнаяСтрока;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПравилоЦенообразования()
	
	Если ЗначениеЗаполнено(Объект.ВидМинимальныхЦенПродажи)
	  	И ЗначениеЗаполнено(Объект.ПравилоЦенообразования) Тогда
		Если Объект.ПравилоЦенообразования.ЦенаВключаетНДС <> Объект.ВидМинимальныхЦенПродажи.ЦенаВключаетНДС Тогда
			Объект.ВидМинимальныхЦенПродажи = Справочники.ВидыЦен.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ЦенаВключаетНДС = Объект.ПравилоЦенообразования.ЦенаВключаетНДС;
	
	УстановитьПараметрыВыбораВидаМинимальныхЦенПродажи();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидаМинимальныхЦенПродажи()
	
	Если ЗначениеЗаполнено(Объект.ПравилоЦенообразования) Тогда
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ЦенаВключаетНДС", ЦенаВключаетНДС);
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ПараметрВыбора);
		МассивПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.ВидМинимальныхЦенПродажи.ПараметрыВыбора = МассивПараметровВыбора;
	Иначе
		Элементы.ВидМинимальныхЦенПродажи.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДоступностьРеквизитов()
	
	ДоступностьПравилаЦенообразования = ОбщегоНазначенияРТВызовСервера.ПроверитьДоступКРеквизиту(Объект,
		"ПравилоЦенообразования",
		"Справочник.ПравилаЦенообразования");
	ДоступностьВидаЦен                = ОбщегоНазначенияРТВызовСервера.ПроверитьДоступКРеквизиту(Объект,
		"ВидМинимальныхЦенПродажи",
		"Справочник.ВидыЦен");
	
	Элементы.ПравилоЦенообразования.Видимость   = ДоступностьПравилаЦенообразования;
	Элементы.ВидМинимальныхЦенПродажи.Видимость = ДоступностьВидаЦен;
	
	ЦенаВключаетНДС = ОбщегоНазначенияРТ.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(Объект.ПравилоЦенообразования,
		"ЦенаВключаетНДС");
	
	Элементы.КонтролироватьАссортиментВЗаказеПокупателя.Доступность = Объект.КонтролироватьАссортимент;
	
КонецПроцедуры

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры


&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	МодульУправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаСервере
Процедура ФорматМагазинаПриИзмененииСервер(ТекстСообщения)
	
	Если Объект.КонтролироватьАссортимент Тогда
		Если ЗначениеЗаполнено(Объект.ФорматМагазина) Тогда
			ПравилоФормата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ФорматМагазина, "ПравилоЦенообразования");
			Если ЗначениеЗаполнено(Объект.ПравилоЦенообразования) Тогда
				Если Объект.ПравилоЦенообразования <> ПравилоФормата Тогда
					ТекстСообщения = НСтр("ru = 'Правило ценообразования установлено в соответствии с правилом формата.'");
					Объект.ПравилоЦенообразования = ПравилоФормата;
					ПриИзмененииПравилоЦенообразования();
				КонецЕсли;
			Иначе
				Объект.ПравилоЦенообразования = ПравилоФормата;
				ПриИзмененииПравилоЦенообразования();
			КонецЕсли;
		Иначе
			Объект.ПравилоЦенообразования = Справочники.ПравилаЦенообразования.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПорядокОкругленияСуммыЧекаВПользуПокупателяПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПорядокОкругленияСуммыЧекаВПользуПокупателя) Тогда
		Элементы.ТипОкругленияЧекаВПользуПокупателя.Доступность = Истина;
	Иначе
		Элементы.ТипОкругленияЧекаВПользуПокупателя.Доступность = Ложь;
		Объект.ТипОкругленияЧекаВПользуПокупателя = 0;
		Элементы.ПорядокОкругленияСуммыЧекаВПользуПокупателя.Заголовок = НСтр("ru = 'Порядок округления суммы чека'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОкругленияЧекаВПользуПокупателяПриИзменении(Элемент)
	Если Объект.ТипОкругленияЧекаВПользуПокупателя = 1 Тогда
		Элементы.ПорядокОкругленияСуммыЧекаВПользуПокупателя.Заголовок = НСтр("ru = 'Порядок округления строк чека'");
	Иначе
		Элементы.ПорядокОкругленияСуммыЧекаВПользуПокупателя.Заголовок = НСтр("ru = 'Порядок округления суммы чека'");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСкладов()
	
	Если СоздаватьСкладыПриЗаписи Тогда
		Элементы.ГруппаСклады.Видимость = Ложь;
		Элементы.ГруппаСкладыСоздание.Видимость = Истина;
		
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОдинСклад", "Видимость", КоличествоСкладов = 0);
		ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНесколькоСкладов", "Видимость", КоличествоСкладов <> 0);
		
	Иначе
		Элементы.ГруппаСклады.Видимость = Истина;
		Элементы.ГруппаСкладыСоздание.Видимость = Ложь;
		Если НЕ ЗначениеЗаполнено(Объект.СкладПоступления) Тогда
			ПараметрыОтбора = Новый Структура("ИмяРеквизита", "СкладПоступления");
			НоваяСтрока = ЭтаФорма.ПараметрыЗапретаРедактированияРеквизитов.НайтиСтроки(ПараметрыОтбора)[0];
			НоваяСтрока.РедактированиеРазрешено = НоваяСтрока.ПравоРедактирования;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Объект.СкладПродажи) Тогда
			ПараметрыОтбора = Новый Структура("ИмяРеквизита", "СкладПродажи");
			НоваяСтрока = ЭтаФорма.ПараметрыЗапретаРедактированияРеквизитов.НайтиСтроки(ПараметрыОтбора)[0];
			НоваяСтрока.РедактированиеРазрешено = НоваяСтрока.ПравоРедактирования;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция НовыйСклад(НаименованиеСклада, СсылкаНаНовыйМагазин, Организация, ТипСклада)
	
	ОбъектСклад              = Справочники.Склады.СоздатьЭлемент();
	ОбъектСклад.Наименование = НаименованиеСклада;
	ОбъектСклад.Магазин      = СсылкаНаНовыйМагазин;
	ОбъектСклад.Организация  = Организация;
	ОбъектСклад.ТипСклада    = ТипСклада;
	ОбъектСклад.Записать();
	
	Возврат ОбъектСклад.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция АдресныйКлассификаторПуст()
	Возврат НЕ АдресныйКлассификатор.АдресныйКлассификаторЗагружен();
КонецФункции

&НаСервере
Процедура ПроверкаПлощадиТорговогоЗала()
	Если ИспользоватьАссортимент И Объект.ПлощадьТорговогоЗала > 0 И ЗначениеЗаполнено(Объект.ФорматМагазина) Тогда
		
		ВыдатьСообщение = Ложь;
		ПлощадьТорговогоЗалаМинимальная  = Объект.ФорматМагазина.ПлощадьТорговогоЗалаМинимальная;
		ПлощадьТорговогоЗалаМаксимальная = Объект.ФорматМагазина.ПлощадьТорговогоЗалаМаксимальная;
		
		Если ПлощадьТорговогоЗалаМинимальная <> 0 И ПлощадьТорговогоЗалаМинимальная > Объект.ПлощадьТорговогоЗала Тогда
			ВыдатьСообщение = Истина;
		ИначеЕсли ПлощадьТорговогоЗалаМаксимальная <> 0 И ПлощадьТорговогоЗалаМаксимальная < Объект.ПлощадьТорговогоЗала Тогда
			ВыдатьСообщение = Истина;
		КонецЕсли;
		
		Если ВыдатьСообщение Тогда
			
			ТекстСообщения = НСтр("ru = 'Площадь торгового зала не совпадает с выбранными параметрами формата магазина.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
