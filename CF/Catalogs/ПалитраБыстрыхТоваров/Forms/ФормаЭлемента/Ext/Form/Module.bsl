&НаКлиенте
Перем КэшированныеЗначения;

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		
	Иначе // Номенклатура.
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТВызовСервера.ОбработатьДанныеПоНоменклатуреИзТСДСервер(ЭтотОбъект, СтруктураПараметров);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	
	ИдентификаторСтроки = Неопределено;
	ТекущаяСтрока = НайтиСтрокуДереваРекурсивно(ДеревоБыстрыхТоваров, СтруктураПараметров);
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = ДеревоБыстрыхТоваров.НайтиПоИдентификатору(Элементы.ДеревоБыстрыхТоваров.ТекущаяСтрока);
		Если ТекущаяСтрока <> Неопределено Тогда 
			Если ТекущаяСтрока.ЭтоСтраница Тогда
				Родитель = ТекущаяСтрока;
			Иначе
				Родитель = ТекущаяСтрока.ПолучитьРодителя();
				Если Родитель = Неопределено Тогда
					Родитель = ДеревоБыстрыхТоваров.ПолучитьЭлементы()[0];
				КонецЕсли;
			КонецЕсли;
			ЭлементыДерева = Родитель.ПолучитьЭлементы();
			ЭлементДерева = ЭлементыДерева.Добавить();
			ЭлементДерева.ЭтоСтраница = Ложь;
			ЭлементДерева.НомерКартинки = 2;
			ЭлементДерева.Клавиша = "Нет";
			ЭлементДерева.Номенклатура = СтруктураПараметров.Номенклатура;
			ЭлементДерева.Характеристика = СтруктураПараметров.Характеристика;
			ЭлементДерева.Название = СтруктураПараметров.Номенклатура;
			
			ИдентификаторСтроки = ЭлементДерева.ПолучитьИдентификатор();
			Модифицированность = Истина;
		КонецЕсли;
	Иначе
		ИдентификаторСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ДобавитьНоменклатуруПоСерийномуНомеру(ЭтотОбъект, СтруктураНомера);
	Возврат ИдентификаторСтроки;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОповещениеВопросЗаписатьПриДобавленииПросмотреИзображения(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
		ДобавитьПросмотретьИзображениеДействиеПослеДобавленияПросмотра()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросЗаписатьПриДобавленииИзображения(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ДобавитьИзображениеДействиеПослеДобавления();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбновитьФормуПанелиРМК(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ЭтотОбъект.Записать() Тогда
			ВопросОбновитьФормуПанелиРМКЗавершение()
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданиеИВыборНовойХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ДеревоБыстрыхТоваров.ТекущиеДанные;
	ТекущаяСтрока.Характеристика = Результат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	Элементы.ДеревоБыстрыхТоваровКлавиша.СписокВыбора.ЗагрузитьЗначения(МассивКлавишДляАкселераторов());
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Параметры.Свойство("ЗначениеКопирования") Тогда
		ЗаполнитьДеревоБыстрыхТоваров(Параметры.ЗначениеКопирования);
	Иначе
		ЗаполнитьДеревоБыстрыхТоваров();
	КонецЕсли;
	
	Если Параметры.Свойство("НастройкаРМК") Тогда
		НастройкаРМК = Параметры.НастройкаРМК;
		НастройкаРМКПриИзмененииНаСервере();
	КонецЕсли;
	
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	ЕстьСтраницы();
	
	ТолькоПросмотрОбъекта = ЭтотОбъект.ТолькоПросмотр;
	
	// ПодключаемоеОборудование
	МассивКомандПО = Новый Массив;
	МассивКомандПО.Добавить("ДеревоБыстрыхТоваровВыгрузитьДанныеВТСД");
	МассивКомандПО.Добавить("ДеревоБыстрыхТоваровЗагрузитьДанныеИзТСД");
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект, МассивКомандПО);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		
		СтруктураВозврата = ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		Если НЕ СтруктураВозврата = Неопределено Тогда
			
			ЭлементыДерева = СтруктураВозврата.ЭлементыДерева;
			Для каждого ИдентификаторЭлемента Из ЭлементыДерева Цикл
				ЭлементДерева = ДеревоБыстрыхТоваров.НайтиПоИдентификатору(ИдентификаторЭлемента);
				
				СтруктураДействий = Новый Структура;
				
				СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ЭлементДерева.Характеристика);
				
				ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.БыстрыеТовары, ЭлементДерева, СтруктураДействий, КэшированныеЗначения);
			КонецЦикла;
			
			Элементы.ДеревоБыстрыхТоваров.Развернуть(СтруктураВозврата.ИдентификаторРодителя);
			Элементы.ДеревоБыстрыхТоваров.ТекущаяСтрока = СтруктураВозврата.ИдентификаторЭлемента;
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ВывестиОповещениеОВыбореНоменклатуры(ВыбранноеЗначение)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
		Если ВыборИзображения Тогда
			ТекущаяСтрока = ТекущаяСтрокаДереваБыстрыхТоваров();
			Если НЕ ТекущаяСтрока = Неопределено
				И НЕ ТекущаяСтрока = ЭлементКорня() Тогда
				ТекущаяСтрока.ФайлКартинки = СсылкаНаФайл;
				АдресКартинки = НавигационнаяСсылкаКартинки(ТекущаяСтрока.ФайлКартинки, УникальныйИдентификатор);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьТабличнуюЧастьБыстрыеТовары(ТекущийОбъект)
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ЭлементКорня = ДеревоБыстрыхТоваров.ПолучитьЭлементы()[0];
	Если ЭлементКорня.ПолучитьЭлементы().Количество() = 0 Тогда
	
		ТекстОшибки = НСтр("ru = 'Не введено ни одной строки в список ""Быстрых товаров"".'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Объект.Ссылка,
			"ДеревоБыстрыхТоваров",
			,
			Отказ);
	Иначе
		Если ЕстьСтраницы И НЕ ЗначениеЗаполнено(Объект.МаксимальноеКоличествоКнопокВОдномРядуНаСтранице) Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнен реквизит Максимальное количество кнопок в одном ряду на странице'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект,
				"Объект.МаксимальноеКоличествоКнопокВОдномРядуНаСтранице",
				,
				Отказ);
		КонецЕсли;
		
		ОбработкаПроверкиЗаполненияНаСервереВУзле(Отказ, ЭлементКорня.ПолучитьЭлементы())
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	Если ЗначениеЗаполнено(НастройкаРМК) Тогда
		Если НЕ Настройки.Получить("НастройкаРМК") = Неопределено Тогда
			Настройки.Удалить("НастройкаРМК");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен()
		И НЕ ТолькоПросмотрОбъекта Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиШапкиФормы

&НаКлиенте
Процедура КартинкаБыстрыеТоварыШаблонНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИмяЭлемента = Элемент.Имя;
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "Программно", "");
	
	НажатиеКнопка(ИмяЭлемента)
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияФормаПанелиРМКНажатие(Элемент)
	
	ОбновитьФормуПанелиРМККлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРМКПриИзменении(Элемент)
	НастройкаРМКПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НастройкаРМКПриИзмененииНаСервере()
	ЗакрыватьБыстрыеТоварыПриВыбореТовара = НастройкаРМК.ЗакрыватьБыстрыеТоварыПриВыбореТовара;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоБыстрыхТоваров

&НаКлиенте
Процедура ДеревоБыстрыхТоваровНоменклатураПриИзменении(Элемент)
	ТекущаяСтрока = ТекущаяСтрокаДереваБыстрыхТоваров();
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.БыстрыеТовары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.Название = ТекущаяСтрока.Номенклатура;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоБыстрыхТоваровХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваБыстрыхТоваров();
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоБыстрыхТоваровХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваБыстрыхТоваров();
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоБыстрыхТоваровКлавишаПриИзменении(Элемент)
	ТекущаяСтрока = ТекущаяСтрокаДереваБыстрыхТоваров();
	
	Если ПустаяСтрока(ТекущаяСтрока.Клавиша) Тогда
		ТекущаяСтрока.Клавиша = "Нет";
	КонецЕсли;
	
	Если ТекущаяСтрока.Клавиша = "Нет" Тогда
		ТекущаяСтрока.АкселераторAlt = Ложь;
		ТекущаяСтрока.АкселераторCtrl = Ложь;
		ТекущаяСтрока.АкселераторShift = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоБыстрыхТоваровОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущаяСтрока = ТекущаяСтрокаДереваБыстрыхТоваров();
	Если ТекущаяСтрока = Неопределено
		ИЛИ ТекущаяСтрока = ЭлементКорня() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ПалитраБыстрыхТоваровПрисоединенныеФайлы") Тогда
		ТекущаяСтрока.ФайлКартинки = ВыбранноеЗначение;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НоменклатураПрисоединенныеФайлы") Тогда
		ТекущаяСтрока.ФайлКартинки = СкопироватьФайл(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоБыстрыхТоваровФайлКартинкиНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьПросмотретьИзображениеКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоБыстрыхТоваровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ДобавитьНоменклатуру();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоБыстрыхТоваровПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если Элемент.Имя = "ДеревоБыстрыхТоваров" Тогда
		ИдентификаторЭлемента = ПараметрыПеретаскивания.Значение[0];
		ЭлементДерева = ДеревоБыстрыхТоваров.НайтиПоИдентификатору(ИдентификаторЭлемента);
		ИдентификаторРодителя = Строка;
		Если ИдентификаторРодителя = Неопределено Тогда
			ИдентификаторРодителя = ЭлементКорня().ПолучитьИдентификатор();
		КонецЕсли;
		
		ЭлементРодитель = ДеревоБыстрыхТоваров.НайтиПоИдентификатору(ИдентификаторРодителя);
		Если НЕ ЭлементДерева = Неопределено
			И НЕ ЭлементРодитель = Неопределено Тогда
			Если ЭлементДерева.ЭтоСтраница Тогда
				Если ЭлементРодитель.ПолучитьРодителя() = ЭлементДерева Тогда
					ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
					СтандартнаяОбработка = Ложь;
				ИначеЕсли НЕ ЭлементРодитель.ЭтоСтраница 
					И НЕ ЭлементРодитель.ПолучитьРодителя() = ЭлементДерева.ПолучитьРодителя() Тогда
					ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
					СтандартнаяОбработка = Ложь;
				ИначеЕсли ЭлементРодитель = ЭлементКорня() ТОгда
					ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
					СтандартнаяОбработка = Ложь;
				КонецЕсли;
			ИначеЕсли НЕ ЭлементРодитель.ЭтоСтраница Тогда
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоБыстрыхТоваровНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Если Элемент.Имя = "ДеревоБыстрыхТоваров" Тогда
		ИдентификаторЭлемента = ПараметрыПеретаскивания.Значение[0];
		ЭлементДерева = ДеревоБыстрыхТоваров.НайтиПоИдентификатору(ИдентификаторЭлемента);
		Если ЭлементДерева = ЭлементКорня() Тогда
			Выполнение = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоБыстрыхТоваровПередУдалением(Элемент, Отказ)
	
	Если Элементы.ДеревоБыстрыхТоваров.ВыделенныеСтроки.Количество() Тогда
		Для каждого ИндексВыделеннойСтроки Из Элементы.ДеревоБыстрыхТоваров.ВыделенныеСтроки Цикл
			Если ИндексВыделеннойСтроки = 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Нельзя удалить корень списока ""Быстрых товаров"".'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					Объект.Ссылка,
					"ДеревоБыстрыхТоваров[0]",
					,
					Отказ);
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоБыстрыхТоваровПослеУдаления(Элемент)
	
	ДеревоБыстрыхТоваровПослеУдаленияСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("АдресТоваровВХранилище", ПоместитьВоВременноеХранилищеСервер());
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Ложь, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЕстьКоличество", Ложь);
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	Родитель = ЭлементКорня();
	ЭлементыДерева = Родитель.ПолучитьЭлементы();
	ЭлементДерева = ЭлементыДерева.Добавить();
	ЭлементДерева.ЭтоСтраница = Истина;
	ЭлементДерева.НомерКартинки = 1;
	ЭлементДерева.Клавиша = "Нет";
	
	Элементы.ДеревоБыстрыхТоваров.Развернуть(Родитель.ПолучитьИдентификатор());
	Элементы.ДеревоБыстрыхТоваров.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
	
	ЕстьСтраницыКлиент();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	ДобавитьИзображениеКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	ТекущаяСтрока = ТекущаяСтрокаДереваБыстрыхТоваров();
	Если ТекущаяСтрока = Неопределено
		ИЛИ ТекущаяСтрока = ЭлементКорня() Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	Если ЗначениеЗаполнено(ТекущаяСтрока.ФайлКартинки) Тогда
		РаботаСФайламиКлиент.ОткрытьФормуФайла(ТекущаяСтрока.ФайлКартинки);
	Иначе
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	ТекущаяСтрока = ТекущаяСтрокаДереваБыстрыхТоваров();
	Если ТекущаяСтрока = Неопределено
		ИЛИ ТекущаяСтрока = ЭлементКорня() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.ФайлКартинки = ПредопределенноеЗначение("Справочник.ПалитраБыстрыхТоваровПрисоединенныеФайлы.ПустаяСсылка");
	АдресКартинки = "";
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(Команда)
	ТекущаяСтрока = ТекущаяСтрокаДереваБыстрыхТоваров();
	Если ТекущаяСтрока = Неопределено
		ИЛИ ТекущаяСтрока = ЭлементКорня() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	РаботаСФайламиКлиент.ОткрытьФормуВыбораФайлов(Объект.Ссылка, Элементы.ДеревоБыстрыхТоваров);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаБыстрыеТоварыТовар(Команда)
	
	ИмяКоманды = Команда.Имя;
	ИмяКоманды = СтрЗаменить(ИмяКоманды, "ПрограммноКомандаБыстрыеТовары", "");
	
	НажатиеКнопка(ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормуПанелиРМК(Команда)
	
	ОбновитьФормуПанелиРМККлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Палитру%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Палитру%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Палитру%", НСтр("ru = 'палитру быстрых товаров'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", ТекущаяДата());
	ПараметрыФормы.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	ПараметрыФормы.Вставить("РежимПодбораСУчетомМинимальныхЦен", Ложь);
	ПараметрыФормы.Вставить("ИспользоватьОтборПоТипамНоменклатуры", Неопределено);
	ПараметрыФормы.Вставить("СкрыватьКомандуОстаткиНаСкладах", Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуЗапрашиватьКоличество", Истина);
	ПараметрыФормы.Вставить("ЗаголовокКнопкиПеренести", НСтр("ru = 'Перенести в палитру'") );
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Элементы.ДеревоБыстрыхТоваров.Развернуть(ЭлементКорня().ПолучитьИдентификатор(), Истина)
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	ЭлементыДерева = ЭлементКорня().ПолучитьЭлементы();
	
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева.ЭтоСтраница Тогда
			Элементы.ДеревоБыстрыхТоваров.Свернуть(ЭлементДерева.ПолучитьИдентификатор())
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьИзображениеНоменклатуры(Команда)
	
	ТекущаяСтрока = ТекущаяСтрокаДереваБыстрыхТоваров();
	Если ТекущаяСтрока = Неопределено
		ИЛИ ТекущаяСтрока = ЭлементКорня() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	РаботаСФайламиКлиент.ОткрытьФормуВыбораФайлов(ТекущаяСтрока.Номенклатура, Элементы.ДеревоБыстрыхТоваров);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПОНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗаголовокКоманды = ЗаголовокКоманды(Элемент.Имя);
	ПоказатьОповещениеПользователя(ЗаголовокКоманды);
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ДобавитьНоменклатуру()
	
	ТекущаяСтрока = ТекущаяСтрокаДереваБыстрыхТоваров();
	Если ТекущаяСтрока.ЭтоСтраница Тогда
		Родитель = ТекущаяСтрока;
	Иначе
		Родитель = ТекущаяСтрока.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			Родитель = ЭлементКорня();
		КонецЕсли;
	КонецЕсли;
	ЭлементыДерева = Родитель.ПолучитьЭлементы();
	ЭлементДерева = ЭлементыДерева.Добавить();
	ЭлементДерева.ЭтоСтраница = Ложь;
	ЭлементДерева.НомерКартинки = 2;
	ЭлементДерева.Клавиша = "Нет";
	
	Элементы.ДеревоБыстрыхТоваров.Развернуть(Родитель.ПолучитьИдентификатор());
	Элементы.ДеревоБыстрыхТоваров.ТекущаяСтрока = ЭлементДерева.ПолучитьИдентификатор();
	Элементы.ДеревоБыстрыхТоваров.ТекущийЭлемент = Элементы.ДеревоБыстрыхТоваровНоменклатура;
	Модифицированность = Истина;
	
	Возврат ЭлементДерева;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПросмотретьИзображениеКлиент()
	
	ТекущаяСтрока = ТекущаяСтрокаДереваБыстрыхТоваров();
	
	Если ТекущаяСтрока = Неопределено
		ИЛИ ТекущаяСтрока = ЭлементКорня() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
								
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросЗаписатьПриДобавленииПросмотреИзображения", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ДобавитьПросмотретьИзображениеДействиеПослеДобавленияПросмотра()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПросмотретьИзображениеДействиеПослеДобавленияПросмотра()
	
	ТекущаяСтрока = ТекущаяСтрокаДереваБыстрыхТоваров();
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ФайлКартинки) Тогда
		ПросмотретьПрисоединенныйФайл();
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) И НЕ ТолькоПросмотрОбъекта Тогда
		ВыборИзображения = Истина;
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, ОбщегоНазначенияРТКлиент.ФильтрФайловИзображений());
		ВыборИзображения = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	
	ТекущаяСтрока = ТекущаяСтрокаДереваБыстрыхТоваров();
	
	Если ТекущаяСтрока = Неопределено
		ИЛИ ТекущаяСтрока = ЭлементКорня() Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	Если ЗначениеЗаполнено(ТекущаяСтрока.ФайлКартинки) Тогда
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущаяСтрока.ФайлКартинки, УникальныйИдентификатор);
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла);
	Иначе
		ТекстСообщения = НСтр("ru='Отсутствует изображение для просмотра'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)

	УстановитьПривилегированныйРежим(Истина);

	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;

КонецФункции

&НаКлиенте
Процедура ДобавитьИзображениеДействиеПослеДобавления()
	
	ВыборИзображения = Истина;
	ИдентификаторФайла = Новый УникальныйИдентификатор;
	РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, ОбщегоНазначенияРТКлиент.ФильтрФайловИзображений());
	ВыборИзображения = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ТекущаяСтрокаДереваБыстрыхТоваров()
	Если Элементы.ДеревоБыстрыхТоваров.ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ИдентификаторСтроки = Элементы.ДеревоБыстрыхТоваров.ТекущиеДанные.ПолучитьИдентификатор();
	ТекущаяСтрока = ДеревоБыстрыхТоваров.НайтиПоИдентификатору(ИдентификаторСтроки);
	Возврат ТекущаяСтрока;
КонецФункции

&НаКлиенте
Функция ЭлементКорня()
	Возврат ДеревоБыстрыхТоваров.ПолучитьЭлементы()[0];
КонецФункции

&НаСервере
Функция ТекущаяСтрокаДереваБыстрыхТоваровСервер()
	ТекущаяСтрока = ДеревоБыстрыхТоваров.НайтиПоИдентификатору(Элементы.ДеревоБыстрыхТоваров.ТекущаяСтрока);
	Возврат ТекущаяСтрока;
КонецФункции

&НаСервере
Функция ЭлементКорняСервер()
	Возврат ДеревоБыстрыхТоваров.ПолучитьЭлементы()[0];
КонецФункции

// Возвращает массив клавиш для акселераторов.
//
// Параметры:
//
// Возвращаемое значение:
//  Массив
//
&НаСервере
Функция МассивКлавишДляАкселераторов()
	
	МассивКлавиш = Новый Массив;
	
	// 0 ... 9
	Для Счетчик= 0 По 9 Цикл
		МассивКлавиш.Добавить("_"+Счетчик);
	КонецЦикла;
	
	// A...Z
	Для Счетчик= 65 По 90 Цикл
		МассивКлавиш.Добавить(Символ(Счетчик));
	КонецЦикла;
	
	МассивКлавиш.Добавить(Строка(Клавиша.BackSpace));
	
	// F1..F12
	Для Счетчик= 1 По 12 Цикл
		МассивКлавиш.Добавить("F"+Счетчик);
	КонецЦикла;
	
	// Num0 ... Num9 
	Для Счетчик= 0 По 9 Цикл
		МассивКлавиш.Добавить("Num"+Счетчик);
	КонецЦикла;
	
	МассивКлавиш.Добавить(Строка(Клавиша.NumAdd));
	МассивКлавиш.Добавить(Строка(Клавиша.NumDecimal));
	МассивКлавиш.Добавить(Строка(Клавиша.NumDivide));
	МассивКлавиш.Добавить(Строка(Клавиша.NumMultiply));
	МассивКлавиш.Добавить(Строка(Клавиша.NumSubtract));
	МассивКлавиш.Добавить(Строка(Клавиша.Space));
	МассивКлавиш.Добавить(Строка(Клавиша.Нет));
	
	Возврат МассивКлавиш;
	
КонецФункции

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервереВУзле(Отказ, ЭлементыУзла)
	
	Для каждого ЭлементУзла Из ЭлементыУзла Цикл
		ИдентификаторЭлемента = ЭлементУзла.ПолучитьИдентификатор();
		Если НЕ ЗначениеЗаполнено(ЭлементУзла.Название)
			И НЕ ЗначениеЗаполнено(ЭлементУзла.ФайлКартинки) Тогда
	
			ТекстОшибки = НСтр("ru = 'Необходимо или заполнить название или выбрать файл картинки'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоБыстрыхТоваров", ИдентификаторЭлемента + 1, "Название"),
				,
				Отказ);
			
		КонецЕсли;
			
		Если ЭлементУзла.ЭтоСтраница Тогда
			Если ЭлементУзла.ПолучитьЭлементы().Количество() = 0 Тогда
				ТекстОшибки = НСтр("ru = 'На странице не задано ни одной кнопки'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					Объект.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоБыстрыхТоваров", ИдентификаторЭлемента + 1, "Название"),
					,
					Отказ);
				
			КонецЕсли;
				
			ОбработкаПроверкиЗаполненияНаСервереВУзле(Отказ, ЭлементУзла.ПолучитьЭлементы())
		Иначе
			Если НЕ ЗначениеЗаполнено(ЭлементУзла.Номенклатура) Тогда
				ТекстОшибки = НСтр("ru = 'Не заполнена номенклатура'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					Объект.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоБыстрыхТоваров", ИдентификаторЭлемента + 1, "Номенклатура"),
					,
					Отказ);
			ИначеЕсли ЭлементУзла.ХарактеристикиИспользуются 
				И НЕ ЗначениеЗаполнено(ЭлементУзла.Характеристика) Тогда
				ТекстОшибки = НСтр("ru = 'Не заполнена характеристика'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					Объект.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоБыстрыхТоваров", ИдентификаторЭлемента + 1, "Характеристика"),
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьБыстрыеТовары(ПереданныйОбъект);
	
	ПереданныйОбъект.БыстрыеТовары.Очистить();
	
	ЭлементКорня = ДеревоБыстрыхТоваров.ПолучитьЭлементы()[0];
	ЗаполнитьТабличнуюЧастьБыстрыеТоварыВУзле(ПереданныйОбъект, ЭлементКорня.ПолучитьЭлементы(), 0);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьБыстрыеТоварыВУзле(ПереданныйОбъект, ЭлементыУзла,Знач НомерСтраницы);
	
	НомерТекущегоРеквизитаДопУпорядочивания = 0;
	НомерТекущейСтраницы = НомерСтраницы;
	Для каждого ЭлементУзла Из ЭлементыУзла Цикл
		СтрокаТЧ = ПереданныйОбъект.БыстрыеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ЭлементУзла);
		НомерТекущегоРеквизитаДопУпорядочивания = НомерТекущегоРеквизитаДопУпорядочивания + 1;
		СтрокаТЧ.РеквизитДопУпорядочивания = НомерТекущегоРеквизитаДопУпорядочивания;
		Если ЭлементУзла.ЭтоСтраница Тогда
			СтрокаТЧ.СтраницаРазмещения = НомерСтраницы;
			
			НомерТекущейСтраницы = НомерТекущейСтраницы + 1;
			СтрокаТЧ.НомерСтраницы = НомерТекущейСтраницы;
			ЗаполнитьТабличнуюЧастьБыстрыеТоварыВУзле(ПереданныйОбъект, ЭлементУзла.ПолучитьЭлементы(), НомерТекущейСтраницы)
		Иначе
			СтрокаТЧ.СтраницаРазмещения = НомерСтраницы;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементУзла, СтрокаТЧ, "РеквизитДопУпорядочивания, СтраницаРазмещения, НомерСтраницы");
		
		СтрокаТЧ.Шрифт = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементУзла.ШрифтФорма);
		СтрокаТЧ.Цвет = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементУзла.ЦветФорма);		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоБыстрыхТоваров(ОбъектЗаполнения = Неопределено)
	
	ЭлементыДерева = ДеревоБыстрыхТоваров.ПолучитьЭлементы();
	ЭлементКорня = ЭлементыДерева.Добавить();
	ЭлементКорня.Название = "В форме РМК";
	ЭлементКорня.ЭтоСтраница = Истина;
	ЭлементКорня.НомерКартинки = 0;
	СоответствиеНомеровСтраниц = Новый Соответствие;
	СоответствиеНомеровСтраниц.Вставить(0, ЭлементКорня);
	
	Если ОбъектЗаполнения = Неопределено Тогда
		ОбъектЗаполнения = Объект.Ссылка; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектЗаполнения) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПалитраБыстрыхТоваровБыстрыеТовары.Ссылка КАК Ссылка,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.НомерСтроки КАК НомерСтроки,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.ЭтоСтраница КАК ЭтоСтраница,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.НомерСтраницы КАК НомерСтраницы,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.СтраницаРазмещения КАК СтраницаРазмещения,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.ИмяКнопки КАК ИмяКнопки,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.Номенклатура КАК Номенклатура,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.Характеристика КАК Характеристика,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.Название КАК Название,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.ФайлКартинки КАК ФайлКартинки,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.Клавиша КАК Клавиша,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.АкселераторAlt КАК АкселераторAlt,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.АкселераторCtrl КАК АкселераторCtrl,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.АкселераторShift КАК АкселераторShift,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА ПалитраБыстрыхТоваровБыстрыеТовары.ЭтоСтраница
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК НомерКартинки,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.Шрифт КАК Шрифт,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.Цвет КАК Цвет
		|ИЗ
		|	Справочник.ПалитраБыстрыхТоваров.БыстрыеТовары КАК ПалитраБыстрыхТоваровБыстрыеТовары
		|ГДЕ
		|	ПалитраБыстрыхТоваровБыстрыеТовары.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтраницаРазмещения,
		|	РеквизитДопУпорядочивания
		|ИТОГИ ПО
		|	СтраницаРазмещения";
		
		Запрос.УстановитьПараметр("Ссылка", ОбъектЗаполнения);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		
		Пока Выборка.Следующий() Цикл
			ВыборкаНаСтранице = Выборка.Выбрать();
			
			ЭлементыРодителя = СоответствиеНомеровСтраниц.Получить(Выборка.СтраницаРазмещения).ПолучитьЭлементы();
			
			Пока ВыборкаНаСтранице.Следующий() Цикл
				ЭлементДерева = ЭлементыРодителя.Добавить();
				ЗаполнитьЗначенияСвойств(ЭлементДерева, ВыборкаНаСтранице);
				Если ЭлементДерева.ЭтоСтраница Тогда
					СоответствиеНомеровСтраниц.Вставить(ЭлементДерева.НомерСтраницы, ЭлементДерева);
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаНаСтранице.Шрифт) Тогда 
					ЭлементДерева.ШрифтФорма = ОбщегоНазначения.ЗначениеИзСтрокиXML(ВыборкаНаСтранице.Шрифт);				
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаНаСтранице.Шрифт) Тогда 
					ЭлементДерева.ЦветФорма = ОбщегоНазначения.ЗначениеИзСтрокиXML(ВыборкаНаСтранице.Цвет);				
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКнопкиНижнейПанели(Отказ, ПараметрыИнформации)
	
	МаксимальноеКоличествоКнопокВКонфигураторе = ПродажиСервер.МаксимальноеКоличествоКнопокВКонфигураторе();
	ШаблонДляЗаполненияКнопки = Неопределено;
	ШаблонПустойКартинки = Элементы.КартинкаПустаяБыстрыеТоварыШаблон;
	ШаблонДляЗаполненияКнопки = Элементы.КартинкаПО01БыстрыеТовары;
	
	Элементы.ГруппаБыстрыхТоваровРядШаблон.Видимость   = Ложь;
	Элементы.ГруппаБыстрыхТоваровРядШаблон.Доступность = Ложь;
	
	Для Каждого ЭлементКонфигуратора Из Элементы.ГруппаБыстрыхТоваровРядШаблон.ПодчиненныеЭлементы Цикл
		ЭлементКонфигуратора.Видимость   = Ложь;
		ЭлементКонфигуратора.Доступность = Ложь;
		Если ШаблонДляЗаполненияКнопки = Неопределено Тогда
			ШаблонДляЗаполненияКнопки = ЭлементКонфигуратора;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ПрограммноСозданныеЭлементы Цикл
		Если НЕ Элементы.Найти(СтрокаТаблицы.Имя) = Неопределено Тогда
			Элементы.Удалить(Элементы[СтрокаТаблицы.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	ВыводитьПолныйОстатокПустыхКартинок = Ложь;
	// Нижние операции
	Если ЗначениеЗаполнено(НастройкаРМК) И НастройкаРМК.ИспользоватьРасширеннуюНастройкуКнопокНижнейПанели И НастройкаРМК.КнопкиНижнейПанели.Количество() > 0 Тогда
		
		ИспользоватьРасширеннуюНастройкуКнопокНижнейПанели = Истина;
		// Очистить кнопки
		МаксимальноеКоличествоКнопокВКонфигураторе = 0;
		ШаблонДляЗаполненияГруппы = Неопределено;
		ШаблонДляЗаполненияКнопки = Неопределено;
		Для Каждого ЭлементГруппыПрочихОпераций Из Элементы.ГруппаПрочихОпераций.ПодчиненныеЭлементы Цикл
			МаксимальноеКоличествоКнопокВКонфигураторе = Макс(МаксимальноеКоличествоКнопокВКонфигураторе, ЭлементГруппыПрочихОпераций.ПодчиненныеЭлементы.Количество());
			ЭлементГруппыПрочихОпераций.Видимость   = Ложь;
			ЭлементГруппыПрочихОпераций.Доступность = Ложь;
			ШаблонДляЗаполненияГруппы = ЭлементГруппыПрочихОпераций;
			Для Каждого ЭлементКнопкаКонфигуратора Из ЭлементГруппыПрочихОпераций.ПодчиненныеЭлементы Цикл
				ЭлементКнопкаКонфигуратора.Видимость   = Ложь;
				ЭлементКнопкаКонфигуратора.Доступность = Ложь;
				ШаблонДляЗаполненияКнопки = ЭлементКнопкаКонфигуратора;
			КонецЦикла;
		КонецЦикла;
		
		Если НастройкаРМК.МаксимальноеКоличествоКнопокВОдномРяду > 0 Тогда
			МаксимальноеКоличествоКнопокВОдномРяду = НастройкаРМК.МаксимальноеКоличествоКнопокВОдномРяду;
		Иначе 
			МаксимальноеКоличествоКнопокВОдномРяду = МаксимальноеКоличествоКнопокВКонфигураторе;
		КонецЕсли;
		
		КоличествоКнопокНижнейПанели = НастройкаРМК.КнопкиНижнейПанели.Количество();
		
		// Рассчитать высоту панели
		КоличествоРядовКнопок = Цел(КоличествоКнопокНижнейПанели/МаксимальноеКоличествоКнопокВОдномРяду);
		
		Если Не КоличествоРядовКнопок = (КоличествоКнопокНижнейПанели/МаксимальноеКоличествоКнопокВОдномРяду) Тогда
			КоличествоРядовКнопок = КоличествоРядовКнопок + 1;
		КонецЕсли;
		
		Если КоличествоРядовКнопок > 1 Тогда
			ВыводитьПолныйОстатокПустыхКартинок = Истина;
		КонецЕсли;
		
		Элементы.ГруппаПрочихОпераций.Высота = ШаблонДляЗаполненияГруппы.Высота * КоличествоРядовКнопок + 1;
		
		// Создать группы 
		Для Ряд = 1 По КоличествоРядовКнопок Цикл
			ИмяЭлемента = "ПрограммноГруппаПрочихОперацийРяд"+Формат(Ряд,"ЧГ=0");
			ЭлементРяд = Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), Элементы.ГруппаПрочихОпераций);
			СтрокаТаблицы = ПрограммноСозданныеЭлементы.Добавить();
			СтрокаТаблицы.Имя = ИмяЭлемента;
			ЭлементРяд.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ЗаполнитьЗначенияСвойств(ЭлементРяд, ШаблонДляЗаполненияГруппы, , "Имя, Заголовок, ПутьКДаннымЗаголовка, Видимость, Доступность");
		КонецЦикла;
		
		// Заполнить кнопки
		НомерКнопки = 0;
		Для каждого СтрокаНастройкиКнопок Из НастройкаРМК.КнопкиНижнейПанели Цикл
			
			НомерКнопки = НомерКнопки + 1;
			
			НомерСтрокиНастройки = НомерКнопки;
			Ряд          = Цел((НомерСтрокиНастройки - 1) / МаксимальноеКоличествоКнопокВОдномРяду) + 1;
			ПозицияВРяду = НомерСтрокиНастройки - МаксимальноеКоличествоКнопокВОдномРяду * Цел((МаксимальноеКоличествоКнопокВОдномРяду * Ряд-1)/МаксимальноеКоличествоКнопокВОдномРяду);
			ЗаголовокКнопки = СтрокаНастройкиКнопок.ЗаголовокКнопки;
			
			ГруппаРяда = Элементы["ПрограммноГруппаПрочихОперацийРяд"+Формат(Ряд,"ЧГ=0")];
			
			// Создать кнопку формы в панели.
			СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша[СтрокаНастройкиКнопок.Клавиша], СтрокаНастройкиКнопок.АкселераторAlt, СтрокаНастройкиКнопок.АкселераторCtrl, СтрокаНастройкиКнопок.АкселераторShift);
			ИмяЭлемента = "Программно" + СтрокаНастройкиКнопок.ИмяКоманды;
			СтрокаТаблицы = ПрограммноСозданныеЭлементы.Добавить();
			СтрокаТаблицы.Имя = ИмяЭлемента;
			ЭлементПолеКартинка = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаРяда);
			ЭлементПолеКартинка.ПутьКДанным = "КартинкаШаблон";
			ЭлементПолеКартинка.Вид         = ВидПоляФормы.ПолеКартинки;
			
			ЭлементПолеКартинка.ТекстНевыбраннойКартинки = ЗаголовокКнопки;
			ЭлементПолеКартинка.Заголовок = ЗаголовокКнопки;
			
			ЗаполнитьЗначенияСвойств(ЭлементПолеКартинка, Элементы.КартинкаБыстрыеТоварыШаблон,, "Имя, Заголовок, Видимость, Доступность, ПутьКДанным, ТекстНевыбраннойКартинки");
			ЭлементПолеКартинка.УстановитьДействие("Нажатие", "КартинкаПОНажатие");
			ЭлементПолеКартинка.СочетаниеКлавиш =  СочетаниеКлавиш;
			
			РозничныеПродажиСервер.ЗаполнитьШрифтЦвет(ЭлементПолеКартинка, СтрокаНастройкиКнопок.Шрифт, СтрокаНастройкиКнопок.Цвет); 
			
		КонецЦикла;
		
		ВыводимыйОстатокПО = КоличествоРядовКнопок * МаксимальноеКоличествоКнопокВОдномРяду - КоличествоКнопокНижнейПанели;
		ГруппаРядаПО = ГруппаРяда;
		
	Иначе
		Для Каждого ЭлементГруппыПрочихОпераций Из Элементы.ГруппаПрочихОпераций.ПодчиненныеЭлементы Цикл
			МаксимальноеКоличествоКнопокВКонфигураторе = Макс(МаксимальноеКоличествоКнопокВКонфигураторе, ЭлементГруппыПрочихОпераций.ПодчиненныеЭлементы.Количество());
			ЭлементГруппыПрочихОпераций.Видимость   = Истина;
			ЭлементГруппыПрочихОпераций.Доступность = Истина;
			ШаблонДляЗаполненияГруппы = ЭлементГруппыПрочихОпераций;
			Для Каждого ЭлементКнопкаКонфигуратора Из ЭлементГруппыПрочихОпераций.ПодчиненныеЭлементы Цикл
				ЭлементКнопкаКонфигуратора.Видимость   = Истина;
				ЭлементКнопкаКонфигуратора.Доступность = Истина;
				ШаблонДляЗаполненияКнопки = ЭлементКнопкаКонфигуратора;
			КонецЦикла;
		КонецЦикла;
		МаксимальноеКоличествоКнопокВОдномРяду = МаксимальноеКоличествоКнопокВКонфигураторе;
		ВыводитьПолныйОстатокПустыхКартинок = Истина;
		ВыводимыйОстатокПО = 0;
	КонецЕсли;
	
	// Быстрые товары
	ЭлементКорня = ДеревоБыстрыхТоваров.ПолучитьЭлементы()[0];
	ОбработкаПроверкиЗаполненияНаСервереВУзле(Отказ, ЭлементКорня.ПолучитьЭлементы());
	
	Если Отказ Тогда
		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибки заполнения формы'");
		ПараметрыИнформации.ТекстИнформации     = НСтр("ru = 'Ошибки'") ;
		Возврат
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьБыстрыеТовары(Объект);
	
	Элементы.СтраницыПанельРМК.ТекущаяСтраница = Элементы.СтраницаНижнейПанели;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("СтраницаРазмещения", 0);
	
	СтрокиТЧВФормеРМК = Объект.БыстрыеТовары.НайтиСтроки(СтруктураПоиска);
	КоличествоБыстрыхТоваров = СтрокиТЧВФормеРМК.Количество();
	
	// Быстрые товары
	Если КоличествоБыстрыхТоваров > 0  Тогда
		
		// Рассчитать высоту группы
		КоличествоРядовКнопок = Цел(КоличествоБыстрыхТоваров/МаксимальноеКоличествоКнопокВОдномРяду);
		
		Если Не Цел(КоличествоБыстрыхТоваров / МаксимальноеКоличествоКнопокВОдномРяду) = (КоличествоБыстрыхТоваров / МаксимальноеКоличествоКнопокВОдномРяду) Тогда
			КоличествоРядовКнопок = КоличествоРядовКнопок + 1;
		КонецЕсли;
		
		Если КоличествоРядовКнопок > 1 Тогда
			ВыводитьПолныйОстатокПустыхКартинок = Истина;
		КонецЕсли;
		
		Элементы.ГруппаБыстрыхТоваров.Высота = Элементы.ГруппаБыстрыхТоваровРядШаблон.Высота * КоличествоРядовКнопок;
		
		// Создать группы 
		Для Ряд = 1 По КоличествоРядовКнопок Цикл
			ИмяЭлемента = "ПрограммноГруппаБыстрыхТоваровРяд"+Формат(Ряд,"ЧГ=0");
			СтрокаТаблицы = ПрограммноСозданныеЭлементы.Добавить();
			СтрокаТаблицы.Имя = ИмяЭлемента;
			ЭлементРяд = Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), Элементы.ГруппаБыстрыхТоваров);
			ЭлементРяд.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ЗаполнитьЗначенияСвойств(ЭлементРяд, Элементы.ГруппаБыстрыхТоваровРядШаблон, , "Имя, Заголовок, ПутьКДаннымЗаголовка, Видимость, Доступность");
		КонецЦикла;
		
		// Заполнить кнопки и картинки.
		НомерСтрокиНастройки = 0;
		
		КартинкиБыстрыхТоваров.Очистить();
		
		Для каждого СтрокаНастройкиКнопок Из СтрокиТЧВФормеРМК Цикл
			
			СтрокаКартинкиБыстрыхТоваров = КартинкиБыстрыхТоваров.Добавить();
			
			ИмяКнопки = "БыстрыйТовар" + Формат(СтрокаНастройкиКнопок.РеквизитДопУпорядочивания, "ЧН=0; ЧГ=0");
			НомерСтрокиНастройки = НомерСтрокиНастройки + 1;
			Ряд          = Цел((НомерСтрокиНастройки - 1) / МаксимальноеКоличествоКнопокВОдномРяду) + 1;
			ПозицияВРяду = НомерСтрокиНастройки - МаксимальноеКоличествоКнопокВОдномРяду * Цел((МаксимальноеКоличествоКнопокВОдномРяду * Ряд-1)/МаксимальноеКоличествоКнопокВОдномРяду);
			ЗаголовокКнопки = СтрокаНастройкиКнопок.Название;
			
			ГруппаРяда = Элементы["ПрограммноГруппаБыстрыхТоваровРяд"+Формат(Ряд,"ЧГ=0")];
			
			// Создать кнопку или картинку.
			ЭтоКартинка = Ложь;
			ФайлКартинки = СтрокаНастройкиКнопок.ФайлКартинки;
			Если Не ФайлКартинки.Пустая() Тогда
				ДанныеФайла = НавигационнаяСсылкаКартинки(ФайлКартинки, УникальныйИдентификатор);
				ФайлХранилище = ПолучитьИзВременногоХранилища(ДанныеФайла);
				
				Если НЕ ФайлХранилище = Неопределено Тогда
					Если ТипЗнч(ФайлХранилище) = Тип("ДвоичныеДанные") Тогда
						ЭтоКартинка = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша[СтрокаНастройкиКнопок.Клавиша], СтрокаНастройкиКнопок.АкселераторAlt, СтрокаНастройкиКнопок.АкселераторCtrl, СтрокаНастройкиКнопок.АкселераторShift);
			
			ИмяЭлемента = "Программно" + ИмяКнопки;
			СтрокаТаблицы = ПрограммноСозданныеЭлементы.Добавить();
			СтрокаТаблицы.Имя = ИмяЭлемента;
			ЭлементПолеКартинка = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаРяда);
			ЭлементПолеКартинка.ПутьКДанным = "КартинкиБыстрыхТоваров[" + Формат(НомерСтрокиНастройки - 1, "ЧН=0; ЧГ=0") + "].АдресКартинки";
			ЭлементПолеКартинка.Вид         = ВидПоляФормы.ПолеКартинки;
			
			Если ЭтоКартинка Тогда
				СтрокаКартинкиБыстрыхТоваров.АдресКартинки = ДанныеФайла;
			Иначе
				ЭлементПолеКартинка.ТекстНевыбраннойКартинки = ЗаголовокКнопки;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ЭлементПолеКартинка, Элементы.КартинкаБыстрыеТоварыШаблон,, "Имя, Заголовок, Видимость, Доступность, ПутьКДанным, ТекстНевыбраннойКартинки");
			
			ЭлементПолеКартинка.УстановитьДействие("Нажатие", "КартинкаБыстрыеТоварыШаблонНажатие");
			ЭлементПолеКартинка.СочетаниеКлавиш =  СочетаниеКлавиш;
			
			РозничныеПродажиСервер.ЗаполнитьШрифтЦвет(ЭлементПолеКартинка, СтрокаНастройкиКнопок.Шрифт, СтрокаНастройкиКнопок.Цвет); 
			
			СтрокаТаблицыБыстрыхТоваров = ТаблицаБыстрыхТоваров.Добавить();
			СтрокаТаблицыБыстрыхТоваров.ИдентификаторБыстрогоТовара = ИмяКнопки;
			СтрокаТаблицыБыстрыхТоваров.Номенклатура                = СтрокаНастройкиКнопок.Номенклатура;
			СтрокаТаблицыБыстрыхТоваров.Характеристика              = СтрокаНастройкиКнопок.Характеристика;
			СтрокаТаблицыБыстрыхТоваров.ЭтоСтраница                 = СтрокаНастройкиКнопок.ЭтоСтраница;
			СтрокаТаблицыБыстрыхТоваров.НомерСтраницы               = СтрокаНастройкиКнопок.НомерСтраницы;
			
		КонецЦикла;
		
		ВыводимыйОстатокБТ = КоличествоРядовКнопок * МаксимальноеКоличествоКнопокВОдномРяду - КоличествоБыстрыхТоваров;
		ГруппаРядаБТ = ГруппаРяда;
		
	Иначе
		Элементы.СтраницаНижнейПанели.Доступность = Ложь;
		ВыводимыйОстатокБТ = 0;
	КонецЕсли;
	
	Если ВыводитьПолныйОстатокПустыхКартинок Тогда
		
		Для Индекс = 1 По ВыводимыйОстатокПО Цикл
			ИмяЭлемента = "ПрограммноПустаяКартинкаПрочихОпераций" + Формат(Индекс,"ЧГ=0");
			ЭлементПолеКартинка = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаРядаПО);
			СтрокаТаблицы = ПрограммноСозданныеЭлементы.Добавить();
			СтрокаТаблицы.Имя = ИмяЭлемента;
			ЭлементПолеКартинка.ПутьКДанным = "КартинкаШаблон";
			ЭлементПолеКартинка.Вид         = ВидПоляФормы.ПолеКартинки;
			ЗаполнитьЗначенияСвойств(ЭлементПолеКартинка, ШаблонПустойКартинки,, "Имя, Заголовок, Видимость, ПутьКДанным, ТекстНевыбраннойКартинки");
		КонецЦикла;
		
		Для Индекс = 1 По ВыводимыйОстатокБТ Цикл
			ИмяЭлемента = "ПрограммноПустаяКартинкаБыстрыхТоваров" + Формат(Индекс,"ЧГ=0");
			СтрокаТаблицы = ПрограммноСозданныеЭлементы.Добавить();
			СтрокаТаблицы.Имя = ИмяЭлемента;
			ЭлементПолеКартинка = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаРядаБТ);
			ЭлементПолеКартинка.ПутьКДанным = "КартинкаШаблон";
			ЭлементПолеКартинка.Вид         = ВидПоляФормы.ПолеКартинки;
			ЗаполнитьЗначенияСвойств(ЭлементПолеКартинка, ШаблонПустойКартинки,, "Имя, Заголовок, Видимость, ПутьКДанным, ТекстНевыбраннойКартинки");
		КонецЦикла;
	Иначе
		Если ВыводимыйОстатокБТ > ВыводимыйОстатокПО Тогда
			ВыводимыйОстатокБТ = ВыводимыйОстатокБТ - ВыводимыйОстатокПО;
			Для Индекс = 1 По ВыводимыйОстатокБТ Цикл
				ИмяЭлемента = "ПрограммноПустаяКартинкаБыстрыхТоваров" + Формат(Индекс,"ЧГ=0");
				СтрокаТаблицы = ПрограммноСозданныеЭлементы.Добавить();
				СтрокаТаблицы.Имя = ИмяЭлемента;
				ЭлементПолеКартинка = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаРядаБТ);
				ЭлементПолеКартинка.ПутьКДанным = "КартинкаШаблон";
				ЭлементПолеКартинка.Вид         = ВидПоляФормы.ПолеКартинки;
				ЗаполнитьЗначенияСвойств(ЭлементПолеКартинка, ШаблонПустойКартинки,, "Имя, Заголовок, Видимость, ПутьКДанным, ТекстНевыбраннойКартинки");
			КонецЦикла;
		ИначеЕсли ВыводимыйОстатокПО > ВыводимыйОстатокБТ Тогда
			ВыводимыйОстатокПО = ВыводимыйОстатокПО - ВыводимыйОстатокБТ;
			Для Индекс = 1 По ВыводимыйОстатокПО Цикл
				ИмяЭлемента = "ПрограммноПустаяКартинкаПрочихОпераций" + Формат(Индекс,"ЧГ=0");
				ЭлементПолеКартинка = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаРядаПО);
				СтрокаТаблицы = ПрограммноСозданныеЭлементы.Добавить();
				СтрокаТаблицы.Имя = ИмяЭлемента;
				ЭлементПолеКартинка.ПутьКДанным = "КартинкаШаблон";
				ЭлементПолеКартинка.Вид         = ВидПоляФормы.ПолеКартинки;
				ЗаполнитьЗначенияСвойств(ЭлементПолеКартинка, ШаблонПустойКартинки,, "Имя, Заголовок, Видимость, ПутьКДанным, ТекстНевыбраннойКартинки");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НажатиеКнопка(ИдентификаторБыстрогоТовара)
	
	МассивСтрок = ТаблицаБыстрыхТоваров.НайтиСтроки(Новый Структура("ИдентификаторБыстрогоТовара", ИдентификаторБыстрогоТовара));
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		СтрокаБыстрыхТоваров = МассивСтрок[0];
		
		Если СтрокаБыстрыхТоваров.ЭтоСтраница Тогда
            
            // &ЗамерПроизводительности
            ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                     Истина, "Справочник.ПалитраБыстрыхТоваров.Форма.ФормаСтраницыБыстрыхТоваров.Открытие");

			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ПалитраБыстрыхТоваров", Объект.Ссылка);
			ПараметрыФормы.Вставить("НомерСтраницы", СтрокаБыстрыхТоваров.НомерСтраницы);
			ПараметрыФормы.Вставить("ЗакрыватьБыстрыеТоварыПриВыбореТовара", ЗакрыватьБыстрыеТоварыПриВыбореТовара);
			
			Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
			ОткрытьФорму("Справочник.ПалитраБыстрыхТоваров.Форма.ФормаСтраницыБыстрыхТоваров", ПараметрыФормы, ЭтотОбъект,,,,, Режим);
		Иначе
			ВывестиОповещениеОВыбореНоменклатуры(СтрокаБыстрыхТоваров);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбновитьФормуПанелиРМКЗавершение()
	Отказ = Ложь;
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	ЗаполнитьКнопкиНижнейПанели(Отказ, ПараметрыИнформации);
	
	Если Отказ Тогда
		Отказ = Истина;
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	Элементы.ОбновитьФормуПанелиРМК.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФормуПанелиРМККлиент()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОбновитьФормуПанелиРМК", ЭтотОбъект);
	Если Модифицированность Тогда
		Отказ = Истина;
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Отказ = Истина;
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Новый элемент. Сохранить элемент?'"), РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ВопросОбновитьФормуПанелиРМКЗавершение()
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоБыстрыхТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ДеревоБыстрыхТоваровФайлКартинки" Тогда
		СтандартнаяОбработка = Ложь;
		СтрокаДерева = ДеревоБыстрыхТоваров.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ЗначениеЗаполнено(СтрокаДерева.ФайлКартинки) Тогда
			ЗаблокироватьДанныеФормыДляРедактирования();
			ДобавитьПросмотретьИзображениеКлиент();
		ИначеЕсли НЕ ТолькоПросмотрОбъекта Тогда
			ДобавитьИзображениеКлиент();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеКлиент()
	ТекущаяСтрока = ТекущаяСтрокаДереваБыстрыхТоваров();
	
	Если ТекущаяСтрока = Неопределено
		ИЛИ ТекущаяСтрока = ЭлементКорня() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
							
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросЗаписатьПриДобавленииИзображения", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ДобавитьИзображениеДействиеПослеДобавления();
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет товары из подбора.
// Параметры: 
//  ВыбранноеЗначение - Структура
&НаСервере
Функция ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	Если ТаблицаТоваров.Количество() > 0  Тогда
		
		ТекущаяСтрока = ТекущаяСтрокаДереваБыстрыхТоваровСервер();
		Если ТекущаяСтрока.ЭтоСтраница Тогда
			Родитель = ТекущаяСтрока;
		Иначе
			Родитель = ТекущаяСтрока.ПолучитьРодителя();
			Если Родитель = Неопределено Тогда
				Родитель = ЭлементКорняСервер();
			КонецЕсли;
		КонецЕсли;
		ЭлементыДерева = Родитель.ПолучитьЭлементы();
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ЭлементыДерева", Новый Массив);
		
		Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
			
			ЭлементДерева = ЭлементыДерева.Добавить();
			ЭлементДерева.ЭтоСтраница = Ложь;
			ЭлементДерева.НомерКартинки = 2;
			ЭлементДерева.Клавиша = "Нет";
			ЭлементДерева.Номенклатура = СтрокаТовара.Номенклатура;
			ЭлементДерева.Характеристика = СтрокаТовара.Характеристика;
			ЭлементДерева.Название = ЭлементДерева.Номенклатура;
			
			СтруктураВозврата.ЭлементыДерева.Добавить(ЭлементДерева.ПолучитьИдентификатор());
			
		КонецЦикла;
		
		СтруктураВозврата.Вставить("ИдентификаторРодителя", Родитель.ПолучитьИдентификатор());
		СтруктураВозврата.Вставить("ИдентификаторЭлемента", ЭлементДерева.ПолучитьИдентификатор());
		
		Возврат СтруктураВозврата
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СкопироватьФайл(ВыбранноеЗначение)
	
	СтруктураДанныхФайла = РаботаСФайлами.ДанныеФайла(ВыбранноеЗначение);
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов", Объект.Ссылка);
	ПараметрыФайла.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
	ПараметрыФайла.Вставить("ИмяБезРасширения", СтруктураДанныхФайла.Наименование);
	ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураДанныхФайла.Расширение));
	ПараметрыФайла.Вставить("ВремяИзменения", МестноеВремя(СтруктураДанныхФайла.ДатаМодификацииУниверсальная, ЧасовойПоясСеанса()));
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", СтруктураДанныхФайла.ДатаМодификацииУниверсальная);
				
	
	ФайлКартинки = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, СтруктураДанныхФайла.СсылкаНаДвоичныеДанныеФайла, ,
					НСтр("ru = 'Файл скопирован из номенклатуры'"));
					
	
	Возврат ФайлКартинки;
	
КонецФункции

&НаСервере
Функция ЗаголовокКоманды(ИмяКоманды)
	
	Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
		Возврат Элементы["Программно" + ИмяКоманды].Заголовок;
	Иначе
		Возврат Элементы[ИмяКоманды].Заголовок;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВывестиОповещениеОВыбореНоменклатуры(Данные)
	
	ТекстОповещение = "" + Данные.Номенклатура;
	Если ЗначениеЗаполнено(Данные.Характеристика) Тогда
		ТекстОповещение = "(" + Данные.Характеристика + ")";
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ЕстьСтраницы()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПалитраБыстрыхТоваровБыстрыеТовары.НомерСтроки
		|ИЗ
		|	Справочник.ПалитраБыстрыхТоваров.БыстрыеТовары КАК ПалитраБыстрыхТоваровБыстрыеТовары
		|ГДЕ
		|	ПалитраБыстрыхТоваровБыстрыеТовары.ЭтоСтраница
		|	И ПалитраБыстрыхТоваровБыстрыеТовары.СтраницаРазмещения = 0
		|	И ПалитраБыстрыхТоваровБыстрыеТовары.Ссылка = &Ссылка";
		
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Результат = Запрос.Выполнить();
		
		ЕстьСтраницы = НЕ Результат.Пустой();
	Иначе
		ЕстьСтраницы = Ложь;
	КонецЕсли;
	
	Элементы.МаксимальноеКоличествоКнопокВОдномРядуНаСтранице.Доступность = ЕстьСтраницы;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьСтраницыКлиент()
	
	ЕстьСтраницы = Истина;
	
	Элементы.МаксимальноеКоличествоКнопокВОдномРядуНаСтранице.Доступность = ЕстьСтраницы;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоБыстрыхТоваровПослеУдаленияСервер()
	
	ЕстьСтраницы = Ложь;
	Для каждого ЭлементКорня Из ЭлементКорняСервер().ПолучитьЭлементы() Цикл
		Если ЭлементКорня.ЭтоСтраница Тогда
			ЕстьСтраницы = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Элементы.МаксимальноеКоличествоКнопокВОдномРядуНаСтранице.Доступность = ЕстьСтраницы
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента, "ДеревоБыстрыхТоваров");
	Если ИдентификаторСтроки <> Неопределено Тогда
		Элементы.ДеревоБыстрыхТоваров.ТекущийЭлемент = Элементы.ДеревоБыстрыхТоваровНоменклатура;
		Родитель = Элементы.ДеревоБыстрыхТоваров.ТекущиеДанные.ПолучитьРодителя();
		Элементы.ДеревоБыстрыхТоваров.Развернуть(Родитель.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуДереваРекурсивно(Дерево, СтруктураПараметров)
	
	ИскомаяСтрока = Неопределено;
	
	ЭлементыДерева = Дерево.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		Если СтруктураПараметров.Номенклатура = СтрокаДерева.Номенклатура Тогда
			Если ЗначениеЗаполнено(СтруктураПараметров.Характеристика) Тогда
				Если СтруктураПараметров.Характеристика = СтрокаДерева.Характеристика Тогда
					ИскомаяСтрока = СтрокаДерева;
					Прервать;
				КонецЕсли;
			Иначе
				ИскомаяСтрока = СтрокаДерева;
				Прервать;
			КонецЕсли;
		Иначе
			ИскомаяСтрока = НайтиСтрокуДереваРекурсивно(СтрокаДерева, СтруктураПараметров);
			Если ИскомаяСтрока <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИскомаяСтрока;
	
КонецФункции

&НаСервере
Функция ПоместитьВоВременноеХранилищеСервер()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки", ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 0));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Цена", ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	НомерСтроки = 0;
	ПоместитьСтрокиВоВременноеХранилищеСервер(ДеревоБыстрыхТоваров, ТаблицаТоваров, НомерСтроки);
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ТаблицаТоваров, УникальныйИдентификатор);
	Возврат АдресВХранилище;
	
КонецФункции

&НаСервере
Процедура ПоместитьСтрокиВоВременноеХранилищеСервер(Дерево, ТаблицаТоваров, НомерСтроки)
	
	СтрокиТаблицы = Дерево.ПолучитьЭлементы();
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		ПодчиненныеСтроки = СтрокаТаблицы.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() = 0 Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
				НомерСтроки = НомерСтроки + 1;
				НоваяСтрока = ТаблицаТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.НомерСтроки = НомерСтроки;
			КонецЕсли;
		Иначе
			ПоместитьСтрокиВоВременноеХранилищеСервер(СтрокаТаблицы, ТаблицаТоваров, НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
