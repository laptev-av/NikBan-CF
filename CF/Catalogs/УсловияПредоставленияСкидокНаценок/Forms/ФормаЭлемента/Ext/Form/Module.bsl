
&НаКлиенте
Перем КэшированныеЗначения;

#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбработкаРазблокированияРеквизитовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		РазблокироватьДополнительныеРеквизитыОбъекта();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПолучателяСкидкиОбработкаВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Получатели.Очистить();
		ТипПолучателяСкидкиПриИзмененииЗавершение();
	Иначе
		ТипПолучателяСкидки = ТипПолучателяСкидкиПредыдущий;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененыНастройкиВнешнейОбработки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ПараметрыВнешнейОбработки = ПолучитьИзВременногоХранилища(Результат.АдресНастроекВнешнейОбработки);
		АдресНастроекВнешнейОбработки = Результат.АдресНастроекВнешнейОбработки;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданиеИВыборНовойХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.КомплектПокупки.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ТекущаяСтрока.Характеристика = Результат;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	СкидкиНаценкиСервер.ЗаполнитьСписокЗначенийУсловийПредоставленияСкидки(Элементы.УсловиеПредоставления.СписокВыбора);
	СкидкиНаценкиСервер.ЗаполнитьСписокЗначенийВариантовНакопленияКумулятивнойСкидкиНаценки(Элементы.ВариантНакопления.СписокВыбора);
	ЗаполнитьСписокВыбораТипаПолучателей();
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	ЗаблокироватьДополнительныеРеквизитыОбъекта();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СформироватьАвтоНаименованиеНаСервере();
	Иначе
		//Это новый объект
		Объект.Наименование = СформироватьАвтоНаименованиеНаСервере();
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.КомплектПокупки);
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	Для Каждого ВариантНаименования Из Элементы.Наименование.СписокВыбора Цикл
		Если Объект.Наименование = ВариантНаименования.Значение Тогда
			ИспользуетсяАвтоНаименование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриСозданииЧтенииНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ОбновитьАвтонаименование(Модифицированность);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.КомплектПокупки);
	// Обработчик подсистемы запрета редактирования реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантНакопленияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВариантОпределенияПериодаНакопительнойСкидкиПриИзменении(Элемент)
	
	ВариантОпределенияПериодаНакопительнойСкидкиПриИзмененииНаСервере();
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеУсловияПредоставленияЗаНакопленныйОбъемПродажПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеУсловияПредоставленияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КратностьНомераЧека1ПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		СформироватьАвтоНаименованиеНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	НаименованиеИзмененоПользователем = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьОграниченияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПериодНакопленияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СегментНоменклатурыЗаНакопленныйОбъемПродажПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СегментНоменклатурыПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТипПолучателяСкидкиПриИзменении(Элемент)
	
	Если НЕ ТипПолучателяСкидкиПредыдущий = ТипПолучателяСкидки
		И Объект.Получатели.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Изменен тип получателя скидок. Очистить таблицу ""Получателей""?'");
		ОбработчикОповещения = Новый ОписаниеОповещения("ТипПолучателяСкидкиОбработкаВопроса", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ТипПолучателяСкидкиПриИзмененииЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипСравненияЗаНакопленныйОбъемПродажПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТипСравненияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПредоставленияПриИзменении(Элемент)
	
	УсловиеПредоставленияПриИзмененииНаСервере();
	Объект.Наименование = "";
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоИдентификаторуПредыдущегоЧекаПриИзменении(Элемент)
	СформироватьАвтоНаименованиеНаКлиенте();
	ОбновитьАвтонаименование();
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПредоставленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Справочник.УсловияПредоставленияСкидокНаценок.Форма.ФормаВыбора.Открытие");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВремяДействия

&НаКлиенте
Процедура ВремяДействияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолучатели

&НаКлиенте
Процедура ПолучателиПослеУдаления(Элемент)
	
	Объект.Наименование = СформироватьАвтоНаименованиеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		ЭлементСпискаВыбора = Элементы.ТипПолучателяСкидки.СписокВыбора.НайтиПоЗначению(ТипПолучателяСкидки);
		ИдентификаторЭлемента = ЭлементСпискаВыбора.ПолучитьИдентификатор();
		
		ПустоеЗначениеТипа = ТипыПолучателейСкидок.НайтиПоИдентификатору(ИдентификаторЭлемента).Значение;
		
		ТекущиеДанные.Получатель = ПустоеЗначениеТипа;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Объект.Наименование = СформироватьАвтоНаименованиеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПолучательПриИзменении(Элемент)
	
	Объект.Наименование = СформироватьАвтоНаименованиеНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомплектПокупки

&НаКлиенте
Процедура КомплектПокупкиКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.КомплектПокупки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
		Объект.КомплектПокупки, 
		ТекущаяСтрока, 
		СтруктураДействий, 
		КэшированныеЗначения);
	
	ПриИзмененииУпаковки(ТекущаяСтрока)
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектПокупкиНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.КомплектПокупки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.КомплектПокупки, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
КонецПроцедуры

&НаКлиенте
Процедура КомплектПокупкиПослеУдаления(Элемент)
	
	Объект.Наименование = СформироватьАвтоНаименованиеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектПокупкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Объект.Наименование = СформироватьАвтоНаименованиеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектПокупкиУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.КомплектПокупки.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура КомплектПокупкиУпаковкаПриИзменении(Элемент)
	
	ПриИзмененииУпаковки(Элементы.КомплектПокупки.ТекущиеДанные)
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектПокупкиХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтаФорма, Элемент, СтандартнаяОбработка, Элементы.КомплектПокупки.ТекущиеДанные);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкаВнешнейОбработки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресНастроекВнешнейОбработки", АдресНастроекВнешнейОбработки);
	ОткрытьФорму(
		ИмяФормыНастроекВнешнейОбработки,
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ИзмененыНастройкиВнешнейОбработки", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ДополнительныеПараметры = Новый Структура;
		ОбработчикОповещения = Новый ОписаниеОповещения("ОбработкаРазблокированияРеквизитовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект, ОбработчикОповещения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ТипПолучателяСкидкиПриИзмененииЗавершение()
	
	ТипПолучателяСкидкиПредыдущий = ТипПолучателяСкидки;
	Если Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ПоТипуПолучателя")
		И ТипПолучателяСкидки = "ИнформационныеКарты" Тогда
		Элементы.ПолучателиПолучатель.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка"), НСтр("ru = 'Карта не предъявлена'"));
	Иначе
		Элементы.ПолучателиПолучатель.СписокВыбора.Очистить();
	КонецЕсли;
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ВариантОпределенияПериодаНакопительнойСкидкиПриИзмененииНаСервере()
	
	Если Объект.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ВесьПериод
		ИЛИ Объект.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ПредыдущаяПокупка Тогда
		Элементы.ПериодНакопления.Видимость = Ложь;
		Элементы.ДекорацияКратный.Видимость = Ложь;
		Если Объект.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ПредыдущаяПокупка Тогда
			Если Объект.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество Тогда
				Объект.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма;
				ТекстСообщения = НСтр("ru='Вариант периода ""От предыдущей покупки"" рассчитывается только от суммы'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Объект,
				"Объект.КритерийОграниченияПримененияЗаОбъемПродаж",
				,
				Ложь);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Элементы.ПериодНакопления.Видимость = Истина;
		Элементы.ДекорацияКратный.Видимость = Истина;
	КонецЕсли;
	Если Объект.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ВесьПериод
		ИЛИ Объект.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.СНачалаТекущегоПериода Тогда
		Если НЕ Элементы.УчитыватьТекущийЧекВНакоплениях.Доступность Тогда
			Элементы.УчитыватьТекущийЧекВНакоплениях.Доступность = Истина;
		КонецЕсли;
	Иначе
		Если Элементы.УчитыватьТекущийЧекВНакоплениях.Доступность Тогда
			Элементы.УчитыватьТекущийЧекВНакоплениях.Доступность = Ложь;
			Объект.УчитыватьТекущийЧекВНакоплениях = Ложь;
			Элементы.УчитыватьПримененныеСкидкиНакопления.Доступность = Ложь;
			Объект.УчитыватьПримененныеСкидки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораТипаПолучателей()

	СкидкиНаценкиСервер.ЗаполнитьСписокЗначенийПолучателейСкидок(Элементы.ТипПолучателяСкидки.СписокВыбора);
	
	Если Объект.Получатели.Количество() > 0 Тогда
		
		Получатель = Объект.Получатели[0].Получатель;
		ТипПолучателяСкидки = Получатель.Метаданные().Имя;
	Иначе
		ТипПолучателяСкидки = "ВидыДисконтныхКарт";
	КонецЕсли;
	
	Для каждого ЭлементСписка Из Элементы.ТипПолучателяСкидки.СписокВыбора Цикл
		
		ЗначениеЭлемента = ЭлементСписка.Значение;
		
		ТипыПолучателейСкидок.Добавить(Справочники[ЗначениеЭлемента].ПустаяСсылка(),ЗначениеЭлемента);
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КритерийПримененияЗаОбъемПродажПриИзменении(Элемент)
	
	КритерийПримененияЗаОбъемПродажПриИзмененииНаСервере();
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

&НаСервере
Процедура КритерийПримененияЗаОбъемПродажПриИзмененииНаСервере()
	
	Если Объект.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество Тогда
		
		Если Объект.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ПредыдущаяПокупка Тогда
			Объект.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ПустаяСсылка();
			ТекстСообщения = НСтр("ru='Вариант периода ""От предыдущей покупки"" рассчитывается только от суммы'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Объект,
			"Объект.ВариантОпределенияПериодаНакопительнойСкидки",
			,
			Ложь);
		КонецЕсли;
		
		Элементы.УчитыватьПримененныеСкидки.Видимость = Ложь;
		
	Иначе
		
		Элементы.УчитыватьПримененныеСкидки.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАвтонаименование(Обновить = Истина)
	
	Если Не ЗначениеЗаполнено(Объект.Наименование) ИЛИ (Обновить И ИспользуетсяАвтоНаименование И Не НаименованиеИзмененоПользователем) Тогда
		Объект.Наименование = СформироватьАвтоНаименованиеНаКлиенте();
		ИспользуетсяАвтоНаименование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КоэффициентУпаковки(Упаковка)

	Возврат Упаковка.Коэффициент

КонецФункции

&НаКлиенте
Функция ОписаниеТабличнойЧастиКлиент(ИмяТаблицы, ИмяРеквизита, КоличествоЭлементов = 0)

	ОписаниеТаблицы = "";
	
	НомерЭлемента = 0;
	Для каждого ЭлементТаблицы Из Объект[ИмяТаблицы] Цикл
		
		НомерЭлемента = НомерЭлемента + 1;
		Если Не КоличествоЭлементов = 0 И (КоличествоЭлементов + 1) = НомерЭлемента Тогда
			ОписаниеТаблицы = ОписаниеТаблицы + "... ,";
		ИначеЕсли Не КоличествоЭлементов = 0 И (КоличествоЭлементов + 1) < НомерЭлемента Тогда
			Прервать;
		Иначе
			Если ЭлементТаблицы[ИмяРеквизита] = ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка") Тогда
				ОписаниеТаблицы = ОписаниеТаблицы + НСтр("ru = 'Карта не предъявлена'") + " ,";
			Иначе
				ОписаниеТаблицы = ОписаниеТаблицы + Строка(ЭлементТаблицы[ИмяРеквизита]) + " ,";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ОписаниеТаблицы = "" Тогда
	
		ОписаниеТаблицы = Лев(ОписаниеТаблицы, СтрДлина(ОписаниеТаблицы) - 2);
	
	КонецЕсли;
	
	Возврат ОписаниеТаблицы;

КонецФункции

&НаСервере
Функция ОписаниеТабличнойЧастиСервер(ИмяТаблицы, ИмяРеквизита, КоличествоЭлементов = 0)

	ОписаниеТаблицы = "";
	
	НомерЭлемента = 0;
	Для каждого ЭлементТаблицы Из Объект[ИмяТаблицы] Цикл
		
		НомерЭлемента = НомерЭлемента + 1;
		Если Не КоличествоЭлементов = 0 И (КоличествоЭлементов + 1) = НомерЭлемента Тогда
			ОписаниеТаблицы = ОписаниеТаблицы + "... ,";
		ИначеЕсли Не КоличествоЭлементов = 0 И (КоличествоЭлементов + 1) < НомерЭлемента Тогда
			Прервать;
		Иначе
			Если ЭлементТаблицы[ИмяРеквизита] = Справочники.ИнформационныеКарты.ПустаяСсылка() Тогда
				ОписаниеТаблицы = ОписаниеТаблицы + НСтр("ru = 'Карта не предъявлена'") + " ,";
			Иначе
				ОписаниеТаблицы = ОписаниеТаблицы + Строка(ЭлементТаблицы[ИмяРеквизита]) + " ,";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ОписаниеТаблицы = "" Тогда
	
		ОписаниеТаблицы = Лев(ОписаниеТаблицы, СтрДлина(ОписаниеТаблицы) - 2);
	
	КонецЕсли;
	
	Возврат ОписаниеТаблицы;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииУпаковки(ТекДанные)

	Если ЗначениеЗаполнено(ТекДанные.Упаковка)  Тогда
	
		Коэффициент = КоэффициентУпаковки(ТекДанные.Упаковка);
		
	Иначе
		
		Коэффициент = 1;
	
	КонецЕсли;
	
	ТекДанные.Количество = Коэффициент * ТекДанные.КоличествоУпаковок;

КонецПроцедуры

&НаКлиенте
Функция СформироватьАвтоНаименованиеНаКлиенте()
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	Если Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи") Тогда
		СтрокаНаименования = НСтр("ru = 'Время продажи:'");
		ПервыйДень = Истина;
		Для Каждого СтрокаТаблицы Из Объект.ВремяДействия Цикл
			ТекущееНаименование = ?(ПервыйДень, " ", ", ") + НСтр("ru = '%1 (с %2 по %3)'");
			ТекущееНаименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ТекущееНаименование,
									СтрокаТаблицы.ДеньНедели,
									Формат(СтрокаТаблицы.ВремяНачала,"ДФ=ЧЧ:мм; ДП=00:00"),
									Формат(СтрокаТаблицы.ВремяОкончания,"ДФ=ЧЧ:мм; ДП=00:00"));
			СтрокаНаименования = СтрокаНаименования + ТекущееНаименование;
			ПервыйДень = Ложь;
		КонецЦикла;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ВнешняяОбработка") Тогда
		СтрокаНаименования = НСтр("ru = 'Внешняя обработка'");
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж") Тогда
		СтрокаНаименования = "" + Объект.КритерийОграниченияПримененияЗаОбъемПродаж + " "
		+ ?(Объект.ОбластьОграничения = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе"),НСтр("ru = 'в документе'"),НСтр("ru = 'в строке'")) + " "+Объект.ТипСравнения + " "+Объект.ЗначениеУсловияОграничения
		+ ?(Объект.КритерийОграниченияПримененияЗаОбъемПродаж = ПредопределенноеЗначение("Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество"), " " + НСтр("ru = 'ед.'"), " " + НСтр("ru = 'руб.'"))
		+ ?(ЗначениеЗаполнено(Объект.СегментНоменклатурыОграничения)," " +НСтр("ru = 'по номенклатуре сегмента'")+ " " + Объект.СегментНоменклатурыОграничения, "");
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж") Тогда
		
		Если Объект.ВариантНакопления = ПредопределенноеЗначение("Перечисление.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоПартнеру") Тогда
			ВариантНакопленияСтрокой = НСтр("ru = 'по партнеру'");
		ИначеЕсли Объект.ВариантНакопления = ПредопределенноеЗначение("Перечисление.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоДисконтнойКарте") Тогда
			ВариантНакопленияСтрокой = НСтр("ru = 'по дисконтной карте'");
		Иначе
			ВариантНакопленияСтрокой = НСтр("ru = 'по торговому соглашению'");
		КонецЕсли;
		
		СтрокаНаименования = НСтр("ru = '%1 проданного товара %2'");
		СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаНаименования,
																						Объект.КритерийОграниченияПримененияЗаОбъемПродаж,
																						ВариантНакопленияСтрокой);
		
		Если Объект.ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантОпределенияПериодаНакопительнойСкидки.ВесьПериод") Тогда
			СтрокаНаименования = СтрокаНаименования + " " +НСтр("ru = 'за весь период'");
		ИначеЕсли Объект.ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантОпределенияПериодаНакопительнойСкидки.ПредыдущаяПокупка") Тогда
			СтрокаНаименования = СтрокаНаименования + " " +НСтр("ru = 'в предыдущей покупке'");
		ИначеЕсли Объект.ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантОпределенияПериодаНакопительнойСкидки.ПрошлыйПериод") Тогда
			
			Если Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый год'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлую декаду'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый день'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый квартал'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый месяц'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлую неделю'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлое полугодие'");
			КонецЕсли;
			
		ИначеЕсли Объект.ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантОпределенияПериодаНакопительнойСкидки.СНачалаТекущегоПериода") Тогда
			Если Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего года'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущей декады'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего дня'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего квартала'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего месяца'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущей недели'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего полугодия'");
			КонецЕсли;
		ИначеЕсли Объект.ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантОпределенияПериодаНакопительнойСкидки.ПрошлыйСкользящийПериод") Тогда
			
			Если Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 365 дней'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 180 дней'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 90 дней'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 30 дней'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 10 дней'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 7 дней'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущий день'");
			КонецЕсли;
			
		КонецЕсли;
		
		// Не менее (не более) 5 (5 Руб).
		СтрокаНаименования = СтрокаНаименования + " " + Объект.ТипСравнения + " " + Объект.ЗначениеУсловияОграничения
		+ ?(Объект.КритерийОграниченияПримененияЗаОбъемПродаж = ПредопределенноеЗначение("Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество"), " " + НСтр("ru = 'ед.'"), " " + НСтр("ru = 'руб.'"))
		// По номенклатуре сегмента Продукты.
		+ ?(ЗначениеЗаполнено(Объект.СегментНоменклатурыОграничения)," " + НСтр("ru = 'по номенклатуре сегмента'") + " " + Объект.СегментНоменклатурыОграничения, "");
		
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки") Тогда
		СтрокаНаименования = НСтр("ru = 'Комплект покупки:'");
		СтрокаНаименования = СтрокаНаименования + " " + ОписаниеТабличнойЧастиКлиент("КомплектПокупки", "Номенклатура");
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ВДеньРождения") Тогда
		СтрокаНаименования = НСтр("ru = 'День рождения'");
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ПорядковыйНомерПродажиКратен") Тогда
		СтрокаНаименования = НСтр("ru = 'Порядковый номер продажи кратен:'") +" "+ Объект.ПорядковыйНомерПродажиКратен;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ПоТипуПолучателя") Тогда
		
		СтрокаНаименования = НСтр("ru = 'По типу получателя скидки:'");
		
		ЭлементСпискаВыбора = Элементы.ТипПолучателяСкидки.СписокВыбора.НайтиПоЗначению(ТипПолучателяСкидки);
		Если НЕ ЭлементСпискаВыбора = Неопределено Тогда
			
			СтрокаНаименования = ЭлементСпискаВыбора.Представление + ": ";
			
		КонецЕсли;
		
		СтрокаНаименования = СтрокаНаименования + ОписаниеТабличнойЧастиКлиент("Получатели", "Получатель", 2);
		
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ОдноразовыйКод") Тогда
		Если Объект.ПоИдентификаторуПредыдущегоЧека Тогда
			СтрокаНаименования = НСтр("ru = 'При предъявлении кода предыдущего чека'");
		Иначе
			СтрокаНаименования = НСтр("ru = 'При предъявлении промокода / купона'");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	Возврат СтрокаНаименования;

КонецФункции

&НаСервере
Функция СформироватьАвтоНаименованиеНаСервере()
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	Если Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи Тогда
		СтрокаНаименования = НСтр("ru = 'Время продажи:'");
		ПервыйДень = Истина;
		Для Каждого СтрокаТаблицы Из Объект.ВремяДействия Цикл
			ТекущееНаименование = ?(ПервыйДень, " ", ", ") + НСтр("ru = '%1 (с %2 по %3)'");
			ТекущееНаименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ТекущееНаименование,
									СтрокаТаблицы.ДеньНедели,
									Формат(СтрокаТаблицы.ВремяНачала,"ДФ=ЧЧ:мм; ДП=00:00"),
									Формат(СтрокаТаблицы.ВремяОкончания,"ДФ=ЧЧ:мм; ДП=00:00"));
			СтрокаНаименования = СтрокаНаименования + ТекущееНаименование;
			ПервыйДень = Ложь;
		КонецЦикла;
		
	ИначеЕсли Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ВнешняяОбработка Тогда
		СтрокаНаименования = НСтр("ru = 'Внешняя обработка'");
		
	ИначеЕсли Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж Тогда
		СтрокаНаименования = "" + Объект.КритерийОграниченияПримененияЗаОбъемПродаж + " "
		+ ?(Объект.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе,НСтр("ru = 'в документе'"),НСтр("ru = 'в строке'")) + " "+Объект.ТипСравнения + " "+Объект.ЗначениеУсловияОграничения
		+ ?(Объект.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество, " " + НСтр("ru = 'ед.'"), " " + НСтр("ru = 'руб.'"))
		+ ?(ЗначениеЗаполнено(Объект.СегментНоменклатурыОграничения)," " +НСтр("ru = 'по номенклатуре сегмента'")+ " " + Объект.СегментНоменклатурыОграничения, "");
		
	ИначеЕсли Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж Тогда
		
		Если Объект.ВариантНакопления = Перечисления.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоПартнеру Тогда
			ВариантНакопленияСтрокой = НСтр("ru = 'по партнеру'");
		ИначеЕсли Объект.ВариантНакопления = Перечисления.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоДисконтнойКарте Тогда
			ВариантНакопленияСтрокой = НСтр("ru = 'по дисконтной карте'");
		Иначе
			ВариантНакопленияСтрокой = НСтр("ru = 'по торговому соглашению'");
		КонецЕсли;
		
		СтрокаНаименования = НСтр("ru = '%1 проданного товара %2'");
		СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаНаименования,
																						Объект.КритерийОграниченияПримененияЗаОбъемПродаж,
																						ВариантНакопленияСтрокой);
		
		Если Объект.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ВесьПериод Тогда
			СтрокаНаименования = СтрокаНаименования + " " +НСтр("ru = 'за весь период'");
		ИначеЕсли Объект.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ПрошлыйПериод Тогда
			
			Если Объект.ПериодНакопления = Перечисления.Периодичность.Год Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый год'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Декада Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлую декаду'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.День Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый день'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Квартал Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый квартал'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Месяц Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый месяц'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Неделя Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлую неделю'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Полугодие Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлое полугодие'");
			КонецЕсли;
			
		ИначеЕсли Объект.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.СНачалаТекущегоПериода Тогда
			Если Объект.ПериодНакопления = Перечисления.Периодичность.Год Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего года'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Декада Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущей декады'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.День Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего дня'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Квартал Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего квартала'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Месяц Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего месяца'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Неделя Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущей недели'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Полугодие Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего полугодия'");
			КонецЕсли;
		ИначеЕсли Объект.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантОпределенияПериодаНакопительнойСкидки.ПрошлыйСкользящийПериод Тогда
			
			Если Объект.ПериодНакопления = Перечисления.Периодичность.Год Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 365 дней'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Полугодие Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 180 дней'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Квартал Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 90 дней'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Месяц Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 30 дней'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Декада Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 10 дней'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.Неделя Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 7 дней'");
			ИначеЕсли Объект.ПериодНакопления = Перечисления.Периодичность.День Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущий день'");
			КонецЕсли;
			
		КонецЕсли;
		
		// Не менее (не более) 5 (5 Руб).
		СтрокаНаименования = СтрокаНаименования + " " + Объект.ТипСравнения + " " + Объект.ЗначениеУсловияОграничения
		+ ?(Объект.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество, " " + НСтр("ru = 'ед.'"), " " + НСтр("ru = 'руб.'")) 
		// По номенклатуре сегмента Продукты.
		+ ?(ЗначениеЗаполнено(Объект.СегментНоменклатурыОграничения)," " + НСтр("ru = 'по номенклатуре сегмента'") + " " + Объект.СегментНоменклатурыОграничения, "");
		
	ИначеЕсли Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки Тогда
		СтрокаНаименования = НСтр("ru = 'Комплект покупки:'");
		СтрокаНаименования = СтрокаНаименования + " " + ОписаниеТабличнойЧастиСервер("КомплектПокупки", "Номенклатура");
		
	ИначеЕсли Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ВДеньРождения Тогда
		СтрокаНаименования = НСтр("ru = 'День рождения'");
	ИначеЕсли Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ПорядковыйНомерПродажиКратен Тогда
		СтрокаНаименования = НСтр("ru = 'Порядковый номер продажи кратен:'") +" "+ Объект.ПорядковыйНомерПродажиКратен;
	ИначеЕсли Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ПоТипуПолучателя Тогда
		
		СтрокаНаименования = НСтр("ru = 'По типу получателя скидки:'");
		
		ЭлементСпискаВыбора = Элементы.ТипПолучателяСкидки.СписокВыбора.НайтиПоЗначению(ТипПолучателяСкидки);
		Если НЕ ЭлементСпискаВыбора = Неопределено Тогда
			
			СтрокаНаименования = ЭлементСпискаВыбора.Представление + ": ";
			
		КонецЕсли;
		
		СтрокаНаименования = СтрокаНаименования + ОписаниеТабличнойЧастиСервер("Получатели", "Получатель", 2);
		
	ИначеЕсли Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ОдноразовыйКод Тогда
		Если Объект.ПоИдентификаторуПредыдущегоЧека Тогда
			СтрокаНаименования = НСтр("ru = 'При предъявлении кода предыдущего чека'");
		Иначе
			СтрокаНаименования = НСтр("ru = 'При предъявлении промокода / купона'");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	Возврат СтрокаНаименования;

КонецФункции

&НаСервере
Процедура УсловиеПредоставленияПриИзмененииНаСервере()
	
	Элементы.ГруппаЗаРазовыйОбъемПродаж.Видимость			  = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж);
	Элементы.ГруппаЗаНакопленныйОбъемПродаж.Видимость         = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж);
	Элементы.ГруппаЗаВремяДействия.Видимость                  = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи);
	Элементы.ГруппаЗаКомплектПокупки.Видимость                = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаКомплектПокупки);
	Элементы.ГруппаВДеньРождения.Видимость                    = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ВДеньРождения);
	Элементы.ГруппаПорядковыйНомерПродажиКратен.Видимость     = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ПорядковыйНомерПродажиКратен);
	Элементы.ГруппаПоТипуПолучателя.Видимость                 = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ПоТипуПолучателя);
	Элементы.ГруппаВнешняяОбработка.Видимость                 = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ВнешняяОбработка);
	Элементы.ГруппаОдноразовыйКод.Видимость                   = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ОдноразовыйКод);
	
	Если Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи Тогда
		
		Объект.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе;
		Элементы.ОбластьОграничения.Доступность = Ложь;
	Иначе
		Элементы.ОбластьОграничения.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж 
		И Элементы.ВариантНакопления.СписокВыбора.Количество() = 1 Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.ВариантНакопления) 
			ИЛИ Элементы.ВариантНакопления.СписокВыбора.НайтиПоЗначению(Объект.ВариантНакопления) = Неопределено Тогда
			Объект.ВариантНакопления = Элементы.ВариантНакопления.СписокВыбора[0].Значение;
		КонецЕсли;
	
	КонецЕсли;
	ВариантОпределенияПериодаНакопительнойСкидкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьДополнительныеРеквизитыОбъекта()
	
	ЭтоНовыйОбъект = Объект.Ссылка.Пустая();
	Если ЭтоНовыйОбъект Тогда
		Элементы.ТипПолучателяСкидки.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ТипПолучателяСкидки.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьДополнительныеРеквизитыОбъекта()
	
	Элементы.ТипПолучателяСкидки.ТолькоПросмотр = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьТекущийЧекВНакопленияхПриИзменении(Элемент = Неопределено)
	Элементы.УчитыватьПримененныеСкидкиНакопления.Доступность = Объект.УчитыватьТекущийЧекВНакоплениях;
	Если НЕ Объект.УчитыватьТекущийЧекВНакоплениях Тогда
		Объект.УчитыватьПримененныеСкидки = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ПараметрыВнешнейОбработки = Новый ХранилищеЗначения(ПараметрыВнешнейОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешняяОбработкаПриИзменении(Элемент)
	
	ВнешняяОбработкаПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ВнешняяОбработкаПриИзмененииСервер()
	
	Элементы.НастройкаВнешнейОбработки.Доступность = ЗначениеЗаполнено(Объект.ВнешняяОбработка);
	ПараметрыВнешнейОбработки = Неопределено;
	АдресНастроекВнешнейОбработки = "";
	ОбновитьИмяФормыВнешнейОбработки();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИмяФормыВнешнейОбработки()
	
	Если ЗначениеЗаполнено(Объект.ВнешняяОбработка)
		И Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ВнешняяОбработка Тогда 
		ИмяФормыНастроекВнешнейОбработки = СкидкиНаценкиВызовСервера.ИмяФормыНастроекВнешнейОбработки(
			Объект.ВнешняяОбработка,
			АдресНастроекВнешнейОбработки);
	Иначе
		ИмяФормыНастроекВнешнейОбработки = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере(ТекущийОбъект = Неопределено)
	
	УсловиеПредоставленияПриИзмененииНаСервере();
	КритерийПримененияЗаОбъемПродажПриИзмененииНаСервере();
	Если Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж Тогда
		ВариантОпределенияПериодаНакопительнойСкидкиПриИзмененииНаСервере();
	КонецЕсли;
	
	Если Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ПоТипуПолучателя
		И ТипПолучателяСкидки = "ИнформационныеКарты" Тогда
		Элементы.ПолучателиПолучатель.СписокВыбора.Добавить(Справочники.ИнформационныеКарты.ПустаяСсылка(), НСтр("ru = 'Карта не предъявлена'"));
	Иначе
		Элементы.ПолучателиПолучатель.СписокВыбора.Очистить();
	КонецЕсли;
	ТипПолучателяСкидкиПредыдущий = ТипПолучателяСкидки;
	
	Элементы.УчитыватьПримененныеСкидкиНакопления.Доступность = Объект.УчитыватьТекущийЧекВНакоплениях;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.КомплектПокупки);
	
	Если ЗначениеЗаполнено(Объект.ВнешняяОбработка)
		И Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ВнешняяОбработка Тогда
		Если ТекущийОбъект = Неопределено Тогда
			ПараметрыВнешнейОбработки = Неопределено;
			АдресНастроекВнешнейОбработки = "";
		Иначе
			ПараметрыВнешнейОбработки = ТекущийОбъект.ПараметрыВнешнейОбработки.Получить();
			Если ПараметрыВнешнейОбработки <> Неопределено Тогда
				АдресНастроекВнешнейОбработки = ПоместитьВоВременноеХранилище(ПараметрыВнешнейОбработки, УникальныйИдентификатор);
			Иначе
				АдресНастроекВнешнейОбработки = "";
			КонецЕсли;
		КонецЕсли;
		ОбновитьИмяФормыВнешнейОбработки();
		Элементы.НастройкаВнешнейОбработки.Доступность = Истина;
	Иначе
		ПараметрыВнешнейОбработки = Неопределено;
		АдресНастроекВнешнейОбработки = "";
		Элементы.НастройкаВнешнейОбработки.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура КомплектПокупкиХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.КомплектПокупки.ТекущиеДанные, "КомплектПокупки");
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
