
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		ЗаполнитьТекущиеДанные(Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() 
		И (Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаШтрихкод
			Или Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПроверкаШтрихкодов) Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "СозданыСертификаты" Тогда
		
		Элементы.СерийныеНомера.Обновить();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	ИспользоватьНеуникальныеШтрихкоды = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИспользоватьНеуникальныеШтрихкоды");
	
	Элементы.СтраницыПомощника.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыПодвал.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	Элементы.НадписьВес.Заголовок = Строка(ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ЕдиницаИзмеренияВеса"));
	ИндивидуальныйНаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
	
	Если Параметры.Свойство("ВидНоменклатуры") И НЕ Параметры.ВидНоменклатуры.ЭтоГруппа Тогда
		Объект.ВидНоменклатуры = Параметры.ВидНоменклатуры;
	КонецЕсли;	
	
	Если Параметры.Свойство("Родитель") Тогда
		Объект.Родитель = Параметры.Родитель;
	КонецЕсли;	
	
	Если Параметры.Свойство("СтавкаНДС") Тогда
		Объект.СтавкаНДС = Параметры.СтавкаНДС;
	КонецЕсли;
	
	Если Параметры.Свойство("СозданиеНовогоШтрихКода") Тогда
		Если Параметры.СозданиеНовогоШтрихКода.Свойство("СтруктураПараметровКлиента") Тогда
			СтруктураПараметровКлиента = Параметры.СозданиеНовогоШтрихКода.СтруктураПараметровКлиента;
			СтрокаШК				= ШтрихкодыНоменклатуры.Добавить();
			СтрокаШК.Штрихкод		= СтруктураПараметровКлиента.ДанныеПО;
			СтрокаШК.ТипШтрихкода	= СтруктураПараметровКлиента.ТипШтрихкода;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПоУмолчанию();
	ПриИзмененииВидаНоменклатуры();
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПравилаИменованияНоменклатуры") Тогда
		Элементы.ВидНоменклатуры.ТолькоПросмотр = Истина;
	Иначе
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНоменклатура;
	КонецЕсли;
	
	Элементы.ТипСрокаДействия.СписокВыбора.Добавить(Перечисления.СрокДействияПодарочныхСертификатов.БезОграниченияСрока);
	Элементы.ТипСрокаДействия.СписокВыбора.Добавить(Перечисления.СрокДействияПодарочныхСертификатов.СОграничениемНаДату);
	Элементы.ТипСрокаДействия.СписокВыбора.Добавить(Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи);
	
	Элементы.СтавкаНДС.СписокВыбора.Добавить(УчетНДС.СтавкаНДСПоУмолчанию(ТекущаяДатаСеанса()));
	Элементы.СтавкаНДС.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС10);
	Элементы.СтавкаНДС.СписокВыбора.Добавить(Перечисления.СтавкиНДС.БезНДС);

	Если Параметры.Свойство("СозданиеХарактеристик") Тогда
		СозданиеХарактеристик = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("СтрокаПоиска") Тогда
		СтрокаПоиска = Параметры.СтрокаПоиска;
	Иначе
		СтрокаПоиска = "";
	КонецЕсли;
		
	// ПодключаемоеОборудование
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	УстановитьОтборХарактеристикИУпаковок();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьДоступностьРеквизитовНаКлиенте();
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	Если СозданиеХарактеристик И ИспользоватьХарактеристики Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаХарактеристики;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		ЗаполнениеПоПравилу();
	КонецЕсли;

	УправлениеСтраницамиПодвал();
	
	УстановитьЗаголовокФормы();
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРеквизитовНаКлиенте()
	
	ИндивидуальныеУпаковки = (Объект.НаборУпаковок = ИндивидуальныйНаборУпаковок  
		                         ИЛИ Не ЗначениеЗаполнено(Объект.НаборУпаковок));
	
	Элементы.ЕдиницаИзмерения.ТолькоПросмотр = Не ИндивидуальныеУпаковки;
	
КонецПроцедуры // ()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписьюНаСервере" формы.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	НоменклатураСсылка = ТекущийОбъект.Ссылка;
	
	УстановитьОтборХарактеристикИУпаковок();
		
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка); 
	НаборЗаписей.Очистить();		
	НаборЗаписей.Записать(); 
	
	Для Каждого Строка Из ДополнительныеСведения Цикл
		МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = Объект.Ссылка;
		МенеджерЗаписи.Свойство = Строка.Свойство;
		МенеджерЗаписи.Значение = Строка.Значение;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если РегистрироватьШтрихкод Тогда
		
		Если ЗавершениеРаботы Тогда
			Отказ = Истина;
		Иначе
			
			Текст = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
			Оповещение = Новый ОписаниеОповещения("ЗаписьШтрихкодаПриЗакрытии",  ЭтотОбъект);
			ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
			Отказ = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьШтрихкодаПриЗакрытии(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Отмена Тогда
		Если Результат = КодВозвратаДиалога.Да И НЕ ЗаписатьНаборНаСервере() Тогда
			Возврат;
		КонецЕсли;
		РегистрироватьШтрихкод = Ложь;
		Закрыть(НоменклатураСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	
	ОчиститьСообщения();
	ПриИзмененииВидаНоменклатуры();
	УстановитьДоступностьРеквизитовНаКлиенте();
	СформироватьНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыПараметрыИменованияПриИзменении(Элемент)
	
	ОчиститьСообщения();
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	ДополнительныеСведения.Очистить();
	Объект.Наименование = "";
	Объект.НаименованиеПолное = "";
	ПриИзмененииВидаНоменклатуры();
	УстановитьДоступностьРеквизитовНаКлиенте();
	ЗаполнениеПоПравилу();
	ОпределитьВозможностьПереходаНаСледующуюСтраницу();
	
	Элементы.ГруппаРезультат.Видимость = ИспользоватьИменованиеНоменклатурыПоПравилу;
	СформироватьНаименование();
		
КонецПроцедуры

&НаКлиенте
Процедура РегистрСведенийНаборЗаписейШтрихкодПриИзменении(Элемент)
	ЗаполнитьТекущиеДанные(Элементы.РегистрСведенийНаборЗаписей.ТекущиеДанные.Штрихкод);
КонецПроцедуры

&НаКлиенте
Процедура РегистрСведенийНаборЗаписейПриИзменении(Элемент)
	РегистрироватьШтрихкод = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НадписьИнформацияДублирующиеПозицииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивДублирующихПозиций = Новый Массив;
	
	Для Каждого Строка Из ДублиНоменклатуры Цикл
		МассивДублирующихПозиций.Добавить(Строка.Номенклатура);
	КонецЦикла;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("МассивДублирующихПозиций",МассивДублирующихПозиций);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаСпискаДублирующиеПозиции",ПараметрыОткрытия,ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура НаборУпаковокПриИзменении(Элемент)
	
	НаборУпаковокПриИзмененииСервер();
	УстановитьДоступностьРеквизитовНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПараметрИменованияПриИзменении(Элемент)
	
	ОпределитьВозможностьПереходаНаСледующуюСтраницу();
	СформироватьНаименование();
	
	МассивСтрок = ПараметрыПравилаИменования.НайтиСтроки(Новый Структура("ИмяЭлемента",Элемент.Имя));
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаПараметр = МассивСтрок[0];
		Если СтрокаПараметр.ПутьКДанным = "Объект.НаборУпаковок" Тогда
			НаборУпаковокПриИзмененииСервер();
			УстановитьДоступностьРеквизитовНаКлиенте();
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПараметрИменованияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Элемент.ОбновлениеТекстаРедактирования = ОбновлениеТекстаРедактирования.НеИспользовать;
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(ПараметрыПолученияДанных.СтрокаПоиска);
	
	МассивСтрок = ПараметрыПравилаИменования.НайтиСтроки(Новый Структура("ИмяЭлемента",Элемент.Имя));
	Для Каждого Строка Из МассивСтрок Цикл
		Строка.ДанныеПараметраСтрокой = Элемент.ТекстРедактирования;
		ПутьКДанным = Строка.ПутьКДанным;
		Если СтрНайти(ПутьКДанным,"Объект.") <> 0 Тогда
			ПутьКДанным = СтрЗаменить(ПутьКданным,"Объект.","");
			Объект[ПутьКДанным] = "";
		Иначе
			ЭтаФорма[ПутьКДанным] = "";
		КонецЕсли;
	КонецЦикла;
	
	ОпределитьВозможностьПереходаНаСледующуюСтраницу();
	СформироватьНаименование();

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСерийныеНомераПриИзменении(Элемент)
	
	ПриИзмененииИспользоватьСерийныеНомера();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипСрокаДействияПриИзменении(Элемент)
	
	ПриИзмененииТипаСрокаДействия();
		
КонецПроцедуры

&НаКлиенте
Процедура РегистрСведенийНаборЗаписейХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормыВыбора = Новый Структура;
	Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры") Тогда
		ПараметрыФормыВыбора.Вставить("ПараметрВладелец", Объект.Ссылка);
	Иначе
		ПараметрыФормыВыбора.Вставить("ПараметрВладелец", Объект.ВидНоменклатуры);
	КонецЕсли;
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрСведенийНаборЗаписейХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормыВыбора = Новый Структура;
	Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры") Тогда
		ПараметрыФормыВыбора.Вставить("ПараметрВладелец", Объект.Ссылка);
	Иначе
		ПараметрыФормыВыбора.Вставить("ПараметрВладелец", Объект.ВидНоменклатуры);
	КонецЕсли;
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработатьСозданиеИВыборНовойХарактеристики", ЭтаФорма);
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента",ПараметрыФормыВыбора,Элемент,,,,ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрСведенийНаборЗаписейУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ИспользоватьУпаковки Тогда
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец",Объект.НаборУпаковок));
		Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Иначе
         // &ЗамерПроизводительности
        ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                 Истина, "Справочник.УпаковкиНоменклатуры.Форма.ФормаСписка.Открытие");
                 
        СтандартнаяОбработка = Ложь;
		Отбор = Новый Структура("Владелец", Неопределено);
		ОткрытьФорму("Справочник.УпаковкиНоменклатуры.Форма.ФормаСписка",Новый Структура("Отбор", Отбор), ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрСведенийНаборЗаписейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Владелец = Объект.Ссылка;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РегистрСведенийНаборЗаписейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда
		Элемент.ТекущиеДанные.Штрихкод = "";
		Элемент.ТекущиеДанные.ПредставлениеШтрихкода = "";
		Элемент.ТекущиеДанные.ТипШтрихкода = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерийныеНомераПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
		
	Если ЭтаФорма.Модифицированность Тогда
		ЭтаФорма.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодыНоменклатурыШтрихкодПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ШтрихкодыНоменклатуры.ТекущиеДанные;
	ДанныеДляЗаполнения = ПолученШтрихкодИзСШК(ТекущиеДанные.Штрихкод);
	ТекущиеДанные.ТипШтрихкода = ДанныеДляЗаполнения.ТипШтрихкода;
	ОчиститьСообщения();
	ПроверитьИспользованиеШтрихкода(ТекущиеДанные.Штрихкод);

КонецПроцедуры

&НаКлиенте
Процедура ВесовойПриИзменении(Элемент)
	
	ТоварВесовой = Объект.Весовой;
	
	Если ТоварВесовой Тогда 
		Объект.РазрешитьВводДробногоКоличества = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"РазрешитьВводДробногоКоличества", 
		"Доступность",
		Не ТоварВесовой);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	ВыполнитьПереходПоСтраницам(Команда);
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	ВыполнитьПереходПоСтраницам(Команда);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьРеквизитыПоУмолчанию()
	
	СписокРеквизитовПоУмолчанию.Очистить();
	СписокРеквизитовПоУмолчанию.Добавить("СтранаПроисхождения");
	СписокРеквизитовПоУмолчанию.Добавить("Производитель");
	СписокРеквизитовПоУмолчанию.Добавить("Марка");
	СписокРеквизитовПоУмолчанию.Добавить("ТоварнаяКатегория");
	СписокРеквизитовПоУмолчанию.Добавить("ВидМехаГИСМ");
	СписокРеквизитовПоУмолчанию.Добавить("КодТНВЭД");
	СписокРеквизитовПоУмолчанию.Добавить("НаборУпаковок");
	СписокРеквизитовПоУмолчанию.Добавить("ЕдиницаИзмерения");
	СписокРеквизитовПоУмолчанию.Добавить("СтавкаНДС");
	СписокРеквизитовПоУмолчанию.Добавить("ТоварнаяГруппа");
	СписокРеквизитовПоУмолчанию.Добавить("ЦеноваяГруппа");
	СписокРеквизитовПоУмолчанию.Добавить("ВидАлкогольнойПродукцииЕГАИС");
	СписокРеквизитовПоУмолчанию.Добавить("ТипСрокаДействия");
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// Процедура управляет доступностью реквизитов формы на сервере.
//
&НаСервере
Процедура УстановитьДоступностьРеквизитовНаСервере()
	
	ЭтоУслуга = Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
	ЭтоТовар = Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
	ИндивидуальныеУпаковки = (Объект.НаборУпаковок = ИндивидуальныйНаборУпаковок
		                         ИЛИ Не ЗначениеЗаполнено(Объект.НаборУпаковок));
	
	ЭтоПодарочныйСертификат = Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат;
	
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("Весовой");
	ИменаЭлементов.Добавить("ГруппаВес");
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, ИменаЭлементов, "Видимость", ЭтоТовар);
	
	Элементы.ЕдиницаИзмерения.АвтоОтметкаНезаполненного = НЕ ЭтоУслуга;
	Элементы.ЕдиницаИзмерения.ОтметкаНезаполненного     = (НЕ ЭтоУслуга)
	И Не ЗначениеЗаполнено(Объект.ЕдиницаИзмерения)
	И ИндивидуальныеУпаковки;
	Элементы.ПодарочныеСертификаты.Видимость = ЭтоПодарочныйСертификат;
	Если ЭтоПодарочныйСертификат Тогда
		ПриИзмененииТипаСрокаДействия();
		Если Объект.ТипСрокаДействия = Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи Тогда
			Объект.ИспользоватьСерийныеНомера = Истина;
		КонецЕсли;
		ПриИзмененииИспользоватьСерийныеНомера();
	КонецЕсли;
			
	Если НЕ Элементы.ЕдиницаИзмерения.ТолькоПросмотр Тогда
		Элементы.ЕдиницаИзмерения.ТолькоПросмотр = Не ИндивидуальныеУпаковки;
	КонецЕсли;
	
	Если ЭтоУслуга Тогда
		ЭтоАгентскаяУслуга = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидНоменклатуры, "АгентскиеУслуги");
	Иначе
		ЭтоАгентскаяУслуга = Ложь;
	КонецЕсли;
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АгентскиеПлатежи", "Видимость", ЭтоАгентскаяУслуга);
	
	Если ЭтоТовар И ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		ЭтоАлкогольнаяПродукция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидНоменклатуры, "АлкогольнаяПродукция");
	Иначе
		ЭтоАлкогольнаяПродукция = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПараметрыАлкогольнойПродукции", "Видимость", ЭтоАлкогольнаяПродукция);
	
	ИспользоватьПроверкуНаВводДробногоКоличества = ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуНаВводДробногоКоличества");
	Элементы.РазрешитьВводДробногоКоличества.Видимость = ИспользоватьПроверкуНаВводДробногоКоличества;
	Элементы.ДекорацияРазрешитьВводДробногоКоличества.Видимость = ИспользоватьПроверкуНаВводДробногоКоличества;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьШтрихкодEAN13()
	
	Возврат ПодключаемоеОборудованиеРТВызовСервера.СформироватьШтрихкод();
	
КонецФункции

// Процедура передает управление на сервер для изменения отображения формы.
//
&НаСервере
Процедура ПриИзмененииВидаНоменклатуры(ОбновлятьПризнакиНоменклатуры = Истина)
	
	Если ОбновлятьПризнакиНоменклатуры Тогда
		Справочники.Номенклатура.ОбновитьПризнакиНоменклатуры(ЭтотОбъект,"Да");
	КонецЕсли;

	ПравилоИменования = Объект.ВидНоменклатуры.ПравилоИменования;

	ИспользоватьИменованиеНоменклатурыПоПравилу = РаботаСПравиламиИменования.ИспользоватьИменованиеНоменклатурыПоПравилу(Объект.ВидНоменклатуры);
	Если ИспользоватьИменованиеНоменклатурыПоПравилу Тогда
		РезультатПроверкиПравила = РаботаСПравиламиИменования.ПроверитьИспользованиеПравилаИменования(ПравилоИменования,,Объект.ВидНоменклатуры.НаборСвойств);
		Если РезультатПроверкиПравила.ЕстьОшибки Тогда
			Если ОбновлятьПризнакиНоменклатуры Тогда
				ТекстСообщения =  НСтр("ru = 'Правило именования, указанное в виде номенклатуры ""%1"", содержит ошибки. Чтобы создать номенклатуру по правилу именования необходимо их исправить.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,Объект.ВидНоменклатуры));
			КонецЕсли;	
			ИспользоватьИменованиеНоменклатурыПоПравилу = Ложь;
		ИначеЕсли РезультатПроверкиПравила.Свойство("ПравилоНельзяИспользоватьДляНабора") Тогда
			Если ОбновлятьПризнакиНоменклатуры Тогда
				ТекстСообщения =  НСтр("ru = 'В виде номенклатуры указано правило именования, которое не подходит для набора свойств ""%1"". Номенклатура будет создана без использования правила.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,Объект.ВидНоменклатуры.НаборСвойств));
			КонецЕсли;	
			ИспользоватьИменованиеНоменклатурыПоПравилу = Ложь;
		КонецЕсли;
	КонецЕсли;	
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	УстановитьДоступностьРеквизитовНаСервере();
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		Объект.ТоварнаяКатегория = Справочники.ТоварныеКатегории.ПустаяСсылка();
	КонецЕсли;
	
	ОбновитьДекорацииПараметровИменования();
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		Элементы.Наименование.ТолькоПросмотр = ИспользоватьИменованиеНоменклатурыПоПравилу И Объект.ВидНоменклатуры.ЗапретитьРедактированиеНаименования;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйШтрихкод(Команда)
	
	ЗаполнитьТекущиеДанные(СформироватьШтрихкодEAN13());
	
КонецПроцедуры

// Процедура отрабатывает изменение поля "Набор упаковок".
//
&НаСервере
Процедура НаборУпаковокПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.НаборУпаковок)
		И Объект.НаборУпаковок <> Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
		Объект.ЕдиницаИзмерения = Объект.НаборУпаковок.ЕдиницаИзмерения;
	КонецЕсли;
	ИспользоватьУпаковки = ЗначениеЗаполнено(Объект.НаборУпаковок) И Объект.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборХарактеристикИУпаковок()
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидНоменклатуры, "ИспользоватьХарактеристики,ИспользованиеХарактеристик");
		ИспользоватьХарактеристики = Реквизиты.ИспользоватьХарактеристики
		И ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ИспользованиеХарактеристик = Реквизиты.ИспользованиеХарактеристик;
		Если Реквизиты.ИспользоватьХарактеристики Тогда
			Если Реквизиты.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры Тогда
				ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Характеристики, "Владелец", Объект.Ссылка, ЗначениеЗаполнено(Объект.Ссылка));
			Иначе
				ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Характеристики, "Владелец", Объект.ВидНоменклатуры, ЗначениеЗаполнено(Объект.ВидНоменклатуры));
			КонецЕсли;
		КонецЕсли;
		
		ИспользоватьУпаковки = ЗначениеЗаполнено(Объект.НаборУпаковок)
		И ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры")
		И Объект.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга;
		Если ИспользоватьУпаковки Тогда
			Элементы.СтраницаУпаковки.Доступность = Истина;
			Если Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
				ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Упаковки, "Владелец", Объект.Ссылка, ЗначениеЗаполнено(Объект.Ссылка));
			Иначе
				ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Упаковки, "Владелец", Объект.НаборУпаковок, ЗначениеЗаполнено(Объект.НаборУпаковок));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуШтрихкодов(знач МассивХарактеристик, знач МассивУпаковок)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Ссылка
	|ПОМЕСТИТЬ ВсеУпаковки
	|ИЗ
	|	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Владелец = &ВладелецУпаковка
	|	И УпаковкиНоменклатуры.Ссылка В(&МассивУпаковок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если ИспользоватьХарактеристики Тогда
		
		Запрос.Текст = Запрос.Текст+"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка
		|ПОМЕСТИТЬ ВсеХарактеристики
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Владелец = &ВладелецХарактеристика
		|	И ХарактеристикиНоменклатуры.Ссылка В(&МассивХарактеристик)
		|"+?(МассивХарактеристик.Количество() = 0,"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|","");
	Иначе
		Запрос.Текст = Запрос.Текст+"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Ссылка
		|ПОМЕСТИТЬ ВсеХарактеристики
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст+"
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеУпаковки.Ссылка КАК Упаковка,
	|	ВсеХарактеристики.Ссылка КАК Характеристика
	|ПОМЕСТИТЬ Измерения
	|ИЗ
	|	ВсеУпаковки КАК ВсеУпаковки,
	|	ВсеХарактеристики КАК ВсеХарактеристики
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Штрихкод,
	|	Штрихкоды.Упаковка,
	|	Штрихкоды.ТипШтрихкода
	|ПОМЕСТИТЬ Штрихкоды
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Владелец = &ВладелецШтрихкода
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Измерения.Упаковка, Штрихкоды.Упаковка) КАК Упаковка,
	|	ЕСТЬNULL(Измерения.Характеристика, Штрихкоды.Характеристика) КАК Характеристика,
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	&ВладелецШтрихкода КАК Владелец,
	|	Штрихкоды.ТипШтрихкода
	|ИЗ
	|	Измерения КАК Измерения
	|		ПОЛНОЕ СОЕДИНЕНИЕ Штрихкоды КАК Штрихкоды
	|		ПО Измерения.Упаковка = Штрихкоды.Упаковка
	|			И Измерения.Характеристика = Штрихкоды.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Штрихкод";
	
	
	Если ИспользоватьХарактеристики Тогда
		Запрос.Параметры.Вставить("ВладелецХарактеристика",
		?(ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры, Объект.Ссылка,Объект.ВидНоменклатуры));
		Запрос.Параметры.Вставить("МассивХарактеристик", МассивХарактеристик);
	КонецЕсли;
	Запрос.Параметры.Вставить("ВладелецШтрихкода",Объект.Ссылка);
	Запрос.Параметры.Вставить("МассивУпаковок", МассивУпаковок);
	Если Объект.НаборУпаковок = ИндивидуальныйНаборУпаковок Тогда
		Запрос.Параметры.Вставить("ВладелецУпаковка", Объект.Ссылка);
	Иначе
		Запрос.Параметры.Вставить("ВладелецУпаковка",Объект.НаборУпаковок);
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	РегистрСведенийНаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
	
	Сч = 0;
	КоличествоСтрокНабораЗаписей = РегистрСведенийНаборЗаписей.Количество();
	Для Каждого СтрокаШтрихкод Из ШтрихкодыНоменклатуры Цикл
		Если Сч < КоличествоСтрокНабораЗаписей Тогда
			Запись = РегистрСведенийНаборЗаписей[Сч];
			ЗаполнитьЗначенияСвойств(Запись,СтрокаШтрихкод,"Штрихкод,ТипШтрихкода");
		Иначе	
			Запись = РегистрСведенийНаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись,СтрокаШтрихкод);
			Запись.Владелец = Объект.Ссылка;
		КонецЕсли;
		Сч = Сч + 1;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ЗаписатьНаборНаСервере()
	
	Набор = РеквизитФормыВЗначение("РегистрСведенийНаборЗаписей");
	Набор.Отбор.Владелец.Установить(Объект.Ссылка);
	Если Набор.ПроверитьЗаполнение() Тогда
		ТЗ = Набор.Выгрузить();
		ТЗ.Свернуть("Владелец,Штрихкод,Характеристика,ТипШтрихкода,Упаковка,ПредставлениеШтрихкода");
		Набор.Загрузить(ТЗ);
		Набор.Записать();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Отвечает за видимость необходимой страницы с кнопками, расположенными внизу.
//
&НаКлиенте
Процедура УправлениеСтраницамиПодвал()
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПроверкаШтрихкодов Тогда
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиДалее;
		Элементы.Записать.Видимость = Ложь;
		Элементы.Назад2.Видимость = Ложь;
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		Элементы.Далее.Доступность = Истина;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПараметрыИменования Тогда
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиДалее;
		Элементы.Записать.Видимость = Ложь;
		Элементы.Назад2.Видимость = Истина;
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		ОпределитьВозможностьПереходаНаСледующуюСтраницу();
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНоменклатура Тогда
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиДалее;
		Элементы.Записать.КнопкаПоУмолчанию = Не ЗначениеЗаполнено(Объект.Ссылка);  
		Элементы.Записать.Видимость = Истина;
		Элементы.Назад2.Видимость = Истина;
		Элементы.Далее.КнопкаПоУмолчанию = ЗначениеЗаполнено(Объект.Ссылка);
		Элементы.Далее.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаСерийныеНомера Тогда
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиНазадДалее;
		Элементы.Назад.Видимость = Истина;
		Элементы.Далее1.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаХарактеристики Тогда
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиНазадДалее;
		Элементы.Назад.Видимость = НЕ СозданиеХарактеристик;
		Элементы.Далее1.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаУпаковки Тогда
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиНазадДалее;
		Элементы.Назад.Видимость = Истина;
		Элементы.Далее1.КнопкаПоУмолчанию = Истина;
	Иначе
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаГотово;
		Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет переход по страницам формы.
//
// Параметры:
//  Команда  - КомандаФормы - команда, которая инициировала переход по страницам.
//
&НаКлиенте
Процедура ВыполнитьПереходПоСтраницам(Команда)
	
	ВыполнитьНеобходимыеДействияПриПереходеПоСтраницам(Команда);
	
	УправлениеСтраницамиПодвал();
	
КонецПроцедуры

// Маршрутизатор действий, выполняемых при переходе по страницам помощника.
//
// Параметры:
//  Команда  - КомандаФормы - команда, которая инициировала переход по страницам.
//
&НаКлиенте
Процедура ВыполнитьНеобходимыеДействияПриПереходеПоСтраницам(Команда)
	
	ОчиститьСообщения();
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПроверкаШтрихкодов Тогда
		Если Не ПроверитьШтрихкодыНоменклатуры() Тогда 
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПараметрыИменования;
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПараметрыИменования Тогда
		Если Команда.Имя = "Далее" Тогда
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНоменклатура;
			ПриИзмененииВидаНоменклатуры(Ложь);	
			СформироватьНаименование();
			Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Модифицированность = Истина;
			КонецЕсли;
		ИначеЕсли Команда.Имя = "Назад" Тогда
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПроверкаШтрихкодов;
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНоменклатура Тогда
		Если Команда.Имя = "Далее" Тогда
			Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Текст = НСтр("ru = 'Данные еще не записаны.
				|Переход возможен только после записи данных
				|Сохранить изменения?'");
				Оповещение = Новый ОписаниеОповещения("ЗаписьНоменклатуры",  ЭтотОбъект);
				ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет);
			Иначе
				Если Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")
					И Объект.ИспользоватьСерийныеНомера Тогда
					Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаСерийныеНомера;
					УстановитьОтборДинамическихСписков();
				ИначеЕсли ИспользоватьХарактеристики Тогда
					Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаХарактеристики;
				ИначеЕсли ИспользоватьУпаковки Тогда
					Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаУпаковки;
				Иначе
					Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаШтрихкод;
					ЗаполнитьТаблицуШтрихкодов(Элементы.Характеристики.ВыделенныеСтроки,Элементы.Упаковки.ВыделенныеСтроки);
					Элементы.РегистрСведенийНаборЗаписейХарактеристика.Видимость = ИспользоватьХарактеристики;
					Элементы.РегистрСведенийНаборЗаписейУпаковка.Видимость = ИспользоватьУпаковки;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Команда.Имя = "Назад" Тогда
			Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Элементы.ВидНоменклатурыПараметрыИменования.ТолькоПросмотр = Истина;
			Иначе
				Модифицированность = Ложь;
			КонецЕсли;
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПараметрыИменования;
			ЗаполнитьПараметрыИменования();
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаСерийныеНомера Тогда
		Если Команда.Имя = "Далее" Тогда
			Если ИспользоватьХарактеристики Тогда
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаХарактеристики;
			ИначеЕсли ИспользоватьУпаковки Тогда
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаУпаковки;
			Иначе
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаШтрихкод;
				ЗаполнитьТаблицуШтрихкодов(Элементы.Характеристики.ВыделенныеСтроки,Элементы.Упаковки.ВыделенныеСтроки);
				Элементы.РегистрСведенийНаборЗаписейХарактеристика.Видимость = ИспользоватьХарактеристики;
				Элементы.РегистрСведенийНаборЗаписейУпаковка.Видимость = ИспользоватьУпаковки;
			КонецЕсли;
		ИначеЕсли Команда.Имя = "Назад" Тогда
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНоменклатура;
		КонецЕсли;			
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаХарактеристики Тогда
		Если Команда.Имя = "Далее" Тогда
			Если ИспользоватьУпаковки Тогда
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаУпаковки;
			Иначе
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаШтрихкод;
				ЗаполнитьТаблицуШтрихкодов(Элементы.Характеристики.ВыделенныеСтроки,Элементы.Упаковки.ВыделенныеСтроки);
				Элементы.РегистрСведенийНаборЗаписейХарактеристика.Видимость = ИспользоватьХарактеристики;
				Элементы.РегистрСведенийНаборЗаписейУпаковка.Видимость = ИспользоватьУпаковки;
			КонецЕсли;
		ИначеЕсли Команда.Имя = "Назад" Тогда
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНоменклатура;
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаУпаковки Тогда
		Если Команда.Имя = "Далее" Тогда
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаШтрихкод;
			ЗаполнитьТаблицуШтрихкодов(Элементы.Характеристики.ВыделенныеСтроки,Элементы.Упаковки.ВыделенныеСтроки);
			Элементы.РегистрСведенийНаборЗаписейХарактеристика.Видимость = ИспользоватьХарактеристики;
			Элементы.РегистрСведенийНаборЗаписейУпаковка.Видимость = ИспользоватьУпаковки;
		ИначеЕсли Команда.Имя = "Назад" Тогда
			Если ИспользоватьХарактеристики Тогда
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаХарактеристики;
			Иначе
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНоменклатура;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаШтрихкод Тогда
		Если Команда.Имя = "Назад" Тогда
			Если РегистрироватьШтрихкод Тогда
				Текст = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
				Оповещение = Новый ОписаниеОповещения("ЗаписьШтрихкода",  ЭтотОбъект);
				ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
			Иначе
				Если ИспользоватьУпаковки Тогда
					Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаУпаковки;;
				ИначеЕсли ИспользоватьХарактеристики Тогда
					Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаХарактеристики;
				Иначе
					Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНоменклатура;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьНоменклатуры(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Записать() Тогда
			Если ИспользоватьХарактеристики Тогда
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаХарактеристики;
			ИначеЕсли ИспользоватьУпаковки Тогда
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаУпаковки;
			Иначе
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаШтрихкод;
				ЗаполнитьТаблицуШтрихкодов(Элементы.Характеристики.ВыделенныеСтроки,Элементы.Упаковки.ВыделенныеСтроки);
				Элементы.РегистрСведенийНаборЗаписейХарактеристика.Видимость = ИспользоватьХарактеристики;
				Элементы.РегистрСведенийНаборЗаписейУпаковка.Видимость = ИспользоватьУпаковки;
			КонецЕсли;
			УстановитьЗаголовокФормы();
			УправлениеСтраницамиПодвал();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьШтрихкода(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да ИЛИ Результат = КодВозвратаДиалога.Нет Тогда
		Если Результат = КодВозвратаДиалога.Да И НЕ ЗаписатьНаборНаСервере() Тогда
			Возврат;
		КонецЕсли;
		Если ИспользоватьУпаковки Тогда
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаУпаковки;
		ИначеЕсли ИспользоватьХарактеристики Тогда
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаХарактеристики;
		Иначе
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНоменклатура;
		КонецЕсли;
		УстановитьЗаголовокФормы();
		РегистрироватьШтрихкод = Ложь;
		УправлениеСтраницамиПодвал();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПроверкаШтрихкодов Тогда
		Заголовок = НСтр("ru = 'Проверка штрихкодов'"); 
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНоменклатура 
		Или Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПараметрыИменования Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Заголовок = НСтр("ru = 'Позиция номенклатуры (создание)'");
		Иначе
			Заголовок = Объект.Наименование+" "+НСтр("ru = '(Позиция номенклатуры)'");
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаСерийныеНомера Тогда
		Заголовок = НСтр("ru = 'Номера подарочных сертификатов ('")+Объект.Наименование+")";
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаХарактеристики Тогда
		Если ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры") Тогда
			Заголовок = НСтр("ru = 'Характеристики номенклатуры ('")+Объект.Наименование+")";
		Иначе
			Заголовок = НСтр("ru = 'Характеристики номенклатуры (Общие для вида номенклатуры)'");
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаУпаковки Тогда
		Если Объект.НаборУпаковок = ИндивидуальныйНаборУпаковок Тогда
			Заголовок = НСтр("ru = 'Упаковки ('")+Объект.Наименование+")";
		Иначе
			Заголовок = НСтр("ru = 'Упаковки ('")+Объект.НаборУпаковок+")";
		КонецЕсли;
	Иначе
		Заголовок = НСтр("ru = 'Штрихкоды номенклатуры ('")+Объект.Наименование+")";
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекущиеДанные(Штрихкод)
	
	ДанныеДляЗаполнения = ПолученШтрихкодИзСШК(Штрихкод);
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаШтрихкод Тогда
		РегистрироватьШтрихкод = Истина;
		Если Элементы.РегистрСведенийНаборЗаписей.ВыделенныеСтроки.Количество() > 1 И ИспользоватьНеуникальныеШтрихкоды Тогда
			Для каждого ИндексСтроки Из Элементы.РегистрСведенийНаборЗаписей.ВыделенныеСтроки Цикл
				Строка = Элементы.РегистрСведенийНаборЗаписей.ДанныеСтроки(ИндексСтроки);
				Строка.Штрихкод = Штрихкод;
				Строка.ТипШтрихкода = ДанныеДляЗаполнения.ТипШтрихкода;
				Строка.ПредставлениеШтрихкода = ДанныеДляЗаполнения.ПредставлениеШтрихкода;
			КонецЦикла;
		Иначе
			ТекущиеДанные = Элементы.РегистрСведенийНаборЗаписей.ТекущиеДанные;
			Если ТекущиеДанные <> Неопределено Тогда
				ТекущиеДанные.Штрихкод = Штрихкод;
				ТекущиеДанные.ТипШтрихкода = ДанныеДляЗаполнения.ТипШтрихкода;
				ТекущиеДанные.ПредставлениеШтрихкода = ДанныеДляЗаполнения.ПредставлениеШтрихкода;
			ИначеЕсли РегистрСведенийНаборЗаписей.Количество() = 0 Тогда
				Строка = РегистрСведенийНаборЗаписей.Добавить();
				Строка.Штрихкод = Штрихкод;
				Строка.Владелец = Объект.Ссылка;
				Строка.ТипШтрихкода = ДанныеДляЗаполнения.ТипШтрихкода;
				Строка.ПредставлениеШтрихкода = ДанныеДляЗаполнения.ПредставлениеШтрихкода;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Элементы.ШтрихкодыНоменклатуры.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.Штрихкод = Штрихкод;
			ТекущиеДанные.ТипШтрихкода = ДанныеДляЗаполнения.ТипШтрихкода;
		Иначе 
			Строка = ШтрихкодыНоменклатуры.Добавить();
			Строка.Штрихкод = Штрихкод;
			Строка.ТипШтрихкода = ДанныеДляЗаполнения.ТипШтрихкода;
		КонецЕсли;
		ОчиститьСообщения();
		ПроверитьИспользованиеШтрихкода(Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолученШтрихкодИзСШК(Штрихкод)
	
	ТипШтрихкодаРТ = ПодключаемоеОборудованиеРТВызовСервера.ОпределитьТипШтрихкода(Штрихкод);
	Если ТипШтрихкодаРТ = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128 Тогда
		ПредставлениеШтрихкода = Штрихкод;
	Иначе
		ПредставлениеШтрихкода = "";
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ТипШтрихкода", ТипШтрихкодаРТ);
	Результат.Вставить("ПредставлениеШтрихкода", ПредставлениеШтрихкода);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Если НЕ ЗаписатьНаборНаСервере() Тогда
		Возврат;
	Иначе
		РегистрироватьШтрихкод = Ложь;
		Закрыть(НоменклатураСсылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Если ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	УправлениеСтраницамиПодвал();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеПоПравилу()
	
	ОбновитьЭлементыДополнительныхРеквизитов();	
	ЗаполнитьПараметрыИменования();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыИменования()
	
	УдалитьРеквизитыИЭлементыПравилаИменования();
	ЗаполнитьТаблицуПараметровПравилаИменования();	
		
КонецПроцедуры

&НаСервере
Процедура УдалитьРеквизитыИЭлементыПравилаИменования()
	
	МассивУдаляемыхРеквизитов = Новый Массив;	
	
	Для Каждого Строка из ПараметрыПравилаИменования Цикл		
		
		МассивУдаляемыхРеквизитов.Добавить(Строка.ИмяЭлемента);
		
		УдаляемыйЭлемент = Элементы.Найти(Строка.ИмяЭлемента);
		Если УдаляемыйЭлемент <> Неопределено Тогда
			ЭтаФорма.Элементы.Удалить(УдаляемыйЭлемент);
		КонецЕсли;
		
		ЭлементСнятьТолькоПросмотр = Элементы.Найти(СтрЗаменить(Строка.ПутьКДанным,"Объект.",""));
		Если ЭлементСнятьТолькоПросмотр <> Неопределено Тогда
			ЭлементСнятьТолькоПросмотр.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
		УдаляемаяДекорация = Элементы.Найти("Декорация" + Строка.ИмяЭлемента);		
		Если УдаляемаяДекорация <> Неопределено Тогда
			ЭтаФорма.Элементы.Удалить(Элементы["Декорация" + Строка.ИмяЭлемента]);
		КонецЕсли;
	КонецЦикла;
	
	ЭтаФорма.ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПараметровПравилаИменования()
	
	Если Не ИспользоватьИменованиеНоменклатурыПоПравилу Тогда
		ПараметрыПравилаИменования.Очистить();
		Возврат;
	КонецЕсли;
		
	СтруктураПараметров = РаботаСПравиламиИменования.ПолучитьСтруктуруПараметровПравилаИменования(Объект.ВидНоменклатуры,?(ЭтаФорма.Свойства_ИспользоватьСвойства,ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов,Неопределено));

	ПараметрыПравилаИменования.Очистить();
	
	МассивПараметровПравила = Новый Массив;
	
	МассивПараметровДляАвтоПодбора = Новый Массив;
	ТипСтрока = Тип("Строка");
	ТипЧисло  = Тип("Число");
	
	Для Каждого Строка из СтруктураПараметров.ПараметрыПравилаИменования Цикл
		
		СтрокаПараметровПравилаИменования = ПараметрыПравилаИменования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПараметровПравилаИменования,Строка);	
		
		Если Не (СтрокаПараметровПравилаИменования.ЭтоДопРеквизит 
			Или СтрокаПараметровПравилаИменования.ЭтоДопСведение) Тогда
			СтрокаПараметровПравилаИменования.ПутьКДанным = "Объект." + СтрокаПараметровПравилаИменования.ПутьКДанным;
		КонецЕсли;
		
		МассивПараметровПравила.Добавить(Новый РеквизитФормы(Строка.ИмяЭлемента,Строка.ТипРеквизита,,Строка.ИмяПараметра));
		
		Если Строка.ТипРеквизита.СодержитТип(ТипСтрока)
			Или Строка.ТипРеквизита.СодержитТип(ТипЧисло) Тогда
			МассивПараметровДляАвтоПодбора.Добавить(Строка.ИмяЭлемента);
		КонецЕсли;
	КонецЦикла;
	
	ЭтаФорма.ИзменитьРеквизиты(МассивПараметровПравила);

	РаботаСПравиламиИменования.ДобавитьЭлементыПравилаИменования(ЭтаФорма,Элементы.ГруппаПараметрыИменованияПраво,Элементы.ГруппаПараметрыИменованияЛево);
	
	МассивСтрокПоиска = ПараметрыПравилаИменования.НайтиСтроки(Новый Структура("ПутьКДанным","Объект.СтавкаНДС"));
	Для Каждого Строка Из МассивСтрокПоиска Цикл
		ИскомыйЭлемент = Элементы.Найти(Строка.ИмяЭлемента);
		Если ИскомыйЭлемент <> Неопределено Тогда
			ИскомыйЭлемент.РежимВыбораИзСписка = Истина;
			ИскомыйЭлемент.СписокВыбора.Добавить(УчетНДС.СтавкаНДСПоУмолчанию(ТекущаяДатаСеанса()));
			ИскомыйЭлемент.СписокВыбора.Добавить(Перечисления.СтавкиНДС.НДС10);
			ИскомыйЭлемент.СписокВыбора.Добавить(Перечисления.СтавкиНДС.БезНДС);
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрокПоиска = ПараметрыПравилаИменования.НайтиСтроки(Новый Структура("ПутьКДанным","Объект.ВидНоменклатуры"));
	Для Каждого Строка Из МассивСтрокПоиска Цикл
		ИскомыйЭлемент = Элементы.Найти(Строка.ИмяЭлемента);
		Если ИскомыйЭлемент <> Неопределено Тогда
			ИскомыйЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ГруппаРезультат.Видимость = ИспользоватьИменованиеНоменклатурыПоПравилу;
	
	Для Каждого Строка Из ДополнительныеСведения Цикл
		
		МассивСтрокПараметраПравила = ПараметрыПравилаИменования.НайтиСтроки(Новый Структура("Свойство",Строка.Свойство));
		Если МассивСтрокПараметраПравила.Количество() > 0 Тогда
			СтрокаПараметра = МассивСтрокПараметраПравила[0];
			ЭтаФорма[СтрокаПараметра.ПутьКДанным] = Строка.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтроковыйПараметр из МассивПараметровДляАвтоПодбора Цикл
		Элемент = Элементы[СтроковыйПараметр];
		Элемент.УстановитьДействие("АвтоПодбор","ПараметрИменованияАвтоПодбор");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНаименование()
	
	Если Не ИспользоватьИменованиеНоменклатурыПоПравилу Тогда
		Возврат;
	КонецЕсли;
			
	Для Каждого Строка из ПараметрыПравилаИменования Цикл
		
		МассивДанных = СтрРазделить(Строка.ПутьКДанным,".",Ложь);
		ДанныеПараметра = ЭтаФорма;
		Для Каждого ЭлементДанных из МассивДанных Цикл
			ДанныеПараметра = ДанныеПараметра[ЭлементДанных];	
		КонецЦикла; 
		
		Если (ДанныеПараметра = "" Или ДанныеПараметра = 0) И Строка.ДанныеПараметраСтрокой <> "" Тогда
			ДанныеПараметра = Строка.ДанныеПараметраСтрокой;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПараметра) И Строка.ЭтоДопСведение Тогда
			СтрокиДопСведение = ДополнительныеСведения.НайтиСтроки(Новый Структура("Свойство",Строка.Свойство));
			Если СтрокиДопСведение.Количество() > 0 Тогда
				СтрокаДопСведение = СтрокиДопСведение[0];
				СтрокаДопСведение.Значение = ДанныеПараметра;
			Иначе
				СтрокаДопСведение = ДополнительныеСведения.Добавить();
				СтрокаДопСведение.Свойство = Строка.Свойство;
				СтрокаДопСведение.Значение = ДанныеПараметра;
			КонецЕсли;
		КонецЕсли;
		
		Строка.ДанныеПараметраСтрокой = Формат(ДанныеПараметра,"ДЛФ=Д; БЛ='Ложь'; БИ='" + Строка.ИмяПараметра + "'");
		
	КонецЦикла;
	
	Наименование = РаботаСПравиламиИменованияКлиентСервер.ПреобразоватьСтрокуПоПравилу(ПравилоИменования.Правило,ПараметрыПравилаИменования,"ИмяПараметра","ДанныеПараметраСтрокой");
	
	НадписьПримерНаименования = Наименование;
	Объект.Наименование = Наименование;
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНоменклатура Тогда
		Объект.НаименованиеПолное = Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоискДублей() 
		
	ДублиНоменклатуры.Очистить();
	
	СтруктураПоискаДублей = РаботаСПравиламиИменования.ПолучитьСтруктуруПоискаНоменклатуры(ЭтаФорма);
	
	Если СтруктураПоискаДублей.РеквизитыЗаполнены Тогда		
		СтруктураПоискаДублей.Вставить("ВидНоменклатуры",Объект.ВидНоменклатуры);
		Результат = РаботаСПравиламиИменования.ПоискНоменклатуры(СтруктураПоискаДублей,Объект.Ссылка);
		Выборка   = Результат.Выбрать();
		
		КоличествоДублирующихПозиций = Выборка.Количество(); 
		НадписьИнформацияДублирующиеПозиции = НСтр("ru = 'Обнаружены карточки с одинаковым наименованием (" + КоличествоДублирующихПозиций + ")'"); 
		Элементы.НадписьИнформацияДублирующиеПозиции.Видимость = КоличествоДублирующихПозиций > 0;	
		
		Пока Выборка.Следующий() Цикл
			СтрокаДублей = ДублиНоменклатуры.Добавить();
			СтрокаДублей.Номенклатура = Выборка.Номенклатура;
		КонецЦикла;
		
	Иначе 
		Элементы.НадписьИнформацияДублирующиеПозиции.Видимость = Ложь;
	КонецЕсли;
		
	Элементы.Далее.Доступность = СтруктураПоискаДублей.РеквизитыЗаполнены;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОпределитьВозможностьПереходаНаСледующуюСтраницу()
	
	Элементы.НадписьИнформацияДублирующиеПозиции.Видимость = Ложь;
	Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		Элементы.Далее.Доступность = Ложь;
		Возврат;
	ИначеЕсли Не ИспользоватьИменованиеНоменклатурыПоПравилу Тогда
		Элементы.Далее.Доступность = Истина;
		Возврат;
	КонецЕсли;
	
	ПоискДублей();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДекорацииПараметровИменования()
	
	ПустаяКартинка = БиблиотекаКартинок.Пустая;
	
	Для Каждого Элемент из Элементы.ГруппаДекорацииАртикул.ПодчиненныеЭлементы Цикл
		Элемент.Картинка = ПустаяКартинка;
	КонецЦикла;
	
	Для Каждого Элемент из Элементы.ГруппаДекорацииСтавкаНДС.ПодчиненныеЭлементы Цикл
		Элемент.Картинка = ПустаяКартинка;
	КонецЦикла;
	
	Элементы.ДекорацияДоговорПлатежногоАгента.Картинка 		= ПустаяКартинка;
	                                                    	
	Элементы.ДекорацияНоминал.Картинка 						= ПустаяКартинка;
	Элементы.ДекорацияТипСрокаДействия.Картинка 	 		= ПустаяКартинка;
	Элементы.ДекорацияДатаОкончанияДействия.Картинка    	= ПустаяКартинка;
	
	Элементы.ДекорацияВидАлкогольнойПродукцииЕГАИС.Картинка 			 = ПустаяКартинка;
	Элементы.ДекорацияОбъемДАЛ.Картинка 								 = ПустаяКартинка;
	Элементы.ДекорацияКрепость.Картинка 								 = ПустаяКартинка;
	Элементы.ДекорацияПроизводительИмпортерАлкогольнойПродукции.Картинка = ПустаяКартинка;
	
	Для Каждого Строка из ПараметрыПравилаИменования Цикл
		
		Если Строка.ЭтоДопРеквизит Или Строка.ЭтоДопСведение Тогда
			Продолжить;
		КонецЕсли;
		
		НаименованиеДекорации = Прав(Строка.ПутьКДанным,СтрДлина(Строка.ПутьКДанным) - 7);			
		ЭлементДекорация = Элементы.Найти("Декорация" + НаименованиеДекорации);
		Если ЭлементДекорация <> Неопределено Тогда 
			ЭлементДекорация.Картинка = БиблиотекаКартинок.РаботаСПравиламиИменованияПараметрПравила;
		КонецЕсли;
		ЭлементРеквизит = Элементы.Найти(НаименованиеДекорации);
		Если ЭлементРеквизит <> Неопределено Тогда
			ЭлементРеквизит.ТолькоПросмотр = Истина;
		КонецЕсли;
		
	КонецЦикла;

	Если НЕ ЭтаФорма.Свойства_ИспользоватьСвойства
			ИЛИ НЕ ЭтаФорма.Свойства_ИспользоватьДопРеквизиты Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаРодитель = Неопределено;
	
	Для Каждого Строка из ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов Цикл
		
		Если Строка.Удалено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийРодитель = Элементы[Строка.ИмяРеквизитаЗначение].Родитель;
		Если ГруппаРодитель <> ТекущийРодитель Тогда
			ГруппаРодитель = ТекущийРодитель;
			ГруппаРодитель.ШрифтЗаголовка = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,"MS Shell Dlg",8,Истина,Ложь); 		
		КонецЕсли;
		
		ИмяГруппы = "Группа" + Строка.ИмяРеквизитаЗначение;
		
		Если Элементы.Найти(ИмяГруппы) = Неопределено Тогда
			
			НоваяГруппа = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"),ГруппаРодитель);
			НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			НоваяГруппа.Объединенная = Ложь;
			
			ДекорацияПараметрИменования = Элементы.Добавить("Декорация" + Строка.ИмяРеквизитаЗначение,Тип("ДекорацияФормы"),НоваяГруппа);
			ДекорацияПараметрИменования.Вид = ВидДекорацииФормы.Картинка;
			ДекорацияПараметрИменования.Картинка = БиблиотекаКартинок.РаботаСПравиламиИменованияПараметрПравила;
			ДекорацияПараметрИменования.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
			
			Элементы.Удалить(Элементы[Строка.ИмяРеквизитаЗначение]);
			
			ЭлементНовый = Элементы.Добавить(Строка.ИмяРеквизитаЗначение,Тип("ПолеФормы"),НоваяГруппа);
			ЭлементНовый.ПутьКДанным = Строка.ИмяРеквизитаЗначение;
			ЭлементНовый.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементНовый.АвтоМаксимальнаяШирина = Ложь;
			
			Если Строка.Свойство.ДополнительныеЗначенияИспользуются Тогда
				МассивПараметровВыбора = Новый Массив;
				МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец",Строка.Свойство));				
				ЭлементНовый.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
			КонецЕсли;
			
			ЭлементНовый.УстановитьДействие("ПриИзменении","Подключаемый_ПриИзмененииДополнительногоРеквизита");
			
			СтрокиПараметрыИменования = ПараметрыПравилаИменования.НайтиСтроки(Новый Структура("ПутьКДанным",Строка.ИмяРеквизитаЗначение));
			Если СтрокиПараметрыИменования.Количество() = 0 Тогда
				ДекорацияПараметрИменования.Картинка = ПустаяКартинка;
			Иначе
				ЭлементНовый.ТолькоПросмотр = Истина;
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииИспользоватьСерийныеНомера()
	
	Элементы.ТипСерийногоНомера.Доступность               = Объект.ИспользоватьСерийныеНомера;
	Элементы.ТипСерийногоНомера.АвтоОтметкаНезаполненного = Объект.ИспользоватьСерийныеНомера;
	Элементы.ТипСерийногоНомера.ОтметкаНезаполненного     = Объект.ИспользоватьСерийныеНомера;	
	
	Если НЕ (Объект.ИспользоватьСерийныеНомера 
		И Объект.ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой) Тогда
		
		Объект.ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой;
		ПриИзмененииТипаСрокаДействия();
		
	КонецЕсли;
	
	Если НЕ Объект.ИспользоватьСерийныеНомера 
		И Объект.ТипСрокаДействия = Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи Тогда
		
		Объект.ТипСрокаДействия = Перечисления.СрокДействияПодарочныхСертификатов.БезОграниченияСрока;
		ПриИзмененииТипаСрокаДействия();
		
	КонецЕсли;
	
	Если Объект.ИспользоватьСерийныеНомера Тогда
		
		ЭлементСпискаКДобавлению = Элементы.ТипСрокаДействия.СписокВыбора.НайтиПоЗначению(Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи);
		Если ЭлементСпискаКДобавлению = Неопределено Тогда
			
			Элементы.ТипСрокаДействия.СписокВыбора.Добавить(Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи);
			
		КонецЕсли;
		
	Иначе
		
		ЭлементСпискаКУдалению = Элементы.ТипСрокаДействия.СписокВыбора.НайтиПоЗначению(Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи);
		Если ЭлементСпискаКУдалению <> Неопределено Тогда
			
			Элементы.ТипСрокаДействия.СписокВыбора.Удалить(ЭлементСпискаКУдалению);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииТипаСрокаДействия()
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПериод", "Видимость",
		Объект.ТипСрокаДействия = Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи);
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДатаОкончанияДействия", "Видимость", 
		Не Объект.ТипСрокаДействия = Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи
		И Объект.ТипСрокаДействия = Перечисления.СрокДействияПодарочныхСертификатов.СОграничениемНаДату);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическихСписков()
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СерийныеНомера, "Владелец", Объект.Ссылка , Истина, ВидСравненияКомпоновкиДанных.Равно);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерийныеНомера(Команда)
	
	Отказ = Истина;
	
	Если  ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если НЕ ПроверитьЗаполнение() Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если ЭтаФорма.Модифицированность Тогда
			
			Если Не ЭтаФорма.Записать() Тогда
				
				Возврат;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Номенклатура", Объект.Ссылка);
	
	ОткрытьФорму("Обработка.ЗаполнениеДиапазонаСерийныхНомеров.Форма", ПараметрыЗаполнения ,ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьШтрихкодыНоменклатуры()
	
	Отказ = Ложь;
	
	Сч = 1;
	Для Каждого Строка Из ШтрихкодыНоменклатуры Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Штрихкод) Тогда
			ТекстСообщения =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнена колонка ""Штрихкод"" в строке %1.'"),Сч);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ШтрихкодыНоменклатурыШтрихкод");
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.ТипШтрихкода) Тогда
			ТекстСообщения =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнена колонка ""Тип штрихкода"" в строке %1.'"),Сч);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ШтрихкодыНоменклатурыТипШтрихкода");
			Отказ = Истина;
		КонецЕсли;
		
		Сч = Сч + 1;	
	КонецЦикла;
	
	ИспользоватьНеуникальныеШтрихкоды = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИспользоватьНеуникальныеШтрихкоды");
	Если (НЕ ИспользоватьНеуникальныеШтрихкоды) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ТаблицаШтрихкодов.Штрихкод КАК Штрихкод,
		                      |	ТаблицаШтрихкодов.НомерСтроки КАК НомерСтроки,
		                      |	1 КАК Количество
		                      |ПОМЕСТИТЬ ТаблицаШтрихкодов
		                      |ИЗ
		                      |	&ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	МАКСИМУМ(Штрихкоды.Владелец) КАК Владелец,
		                      |	ТаблицаШтрихкодов.Штрихкод КАК Штрихкод,
		                      |	МИНИМУМ(ТаблицаШтрихкодов.НомерСтроки) КАК НомерСтроки
		                      |ИЗ
		                      |	ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
		                      |		ПО ТаблицаШтрихкодов.Штрихкод = Штрихкоды.Штрихкод
		                      |ГДЕ
		                      |	ТаблицаШтрихкодов.Штрихкод <> """"
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	ТаблицаШтрихкодов.Штрихкод
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	НомерСтроки
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ТаблицаШтрихкодов.Штрихкод КАК Штрихкод
		                      |ИЗ
		                      |	ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	ТаблицаШтрихкодов.Штрихкод
		                      |
		                      |ИМЕЮЩИЕ
		                      |	СУММА(ТаблицаШтрихкодов.Количество) > 1");
		
		ТаблицаШК_ДляПроверки =  ШтрихкодыНоменклатуры.Выгрузить(,"Штрихкод");
		ТаблицаШК_ДляПроверки.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число"));
		Сч = 0;
		Для Каждого Строка Из ТаблицаШК_ДляПроверки Цикл
			Строка.НомерСтроки = Сч;
			Сч = Сч + 1;	
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ТаблицаШтрихкодов",ТаблицаШК_ДляПроверки);
		
		Результат = Запрос.ВыполнитьПакет();
		Выборка = Результат[1].Выбрать();
		ТекстСообщения = "";
		
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = ТекстСообщения
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Штрихкод %1 уже существует, владелец %2.'"),
																						Выборка.Штрихкод,
																						Выборка.Владелец)
							+ Символы.ПС;
		КонецЦикла;	
		
		Если ТекстСообщения <> "" Тогда		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
				
		Выборка = Результат[2].Выбрать();
		ТекстСообщения = "";
		
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = ТекстСообщения
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Штрихкод %1 указан в таблице более одного раза.'"),
			Выборка.Штрихкод)
			+ Символы.ПС;
		КонецЦикла;	
		
		Если ТекстСообщения <> "" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаСервере
Процедура ПроверитьИспользованиеШтрихкода(Штрихкод)
	
	ИспользоватьНеуникальныеШтрихкоды = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ИспользоватьНеуникальныеШтрихкоды");
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	Штрихкоды.Владелец КАК Владелец
	                      |ИЗ
	                      |	РегистрСведений.Штрихкоды КАК Штрихкоды
	                      |ГДЕ
	                      |	Штрихкоды.Штрихкод = &Штрихкод");
	Запрос.УстановитьПараметр("Штрихкод",Штрихкод);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если ИспользоватьНеуникальныеШтрихкоды Тогда
		ТекстСообщения = НСтр("ru = 'В информационной базе разрешено использование неуникальных штрихкодов товаров.'") + Символы.ПС;
	Иначе
		ТекстСообщения = НСтр("ru = 'В информационной базе запрещено использование неуникальных штрихкодов товаров.'") + Символы.ПС;		
	КонецЕсли;
			
	ТекстСообщения = ТекстСообщения
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Штрихкод %1 уже существует, владелец %2.'"),
																						Штрихкод,
																						Выборка.Владелец);
																						
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданиеИВыборНовойХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РегистрСведенийНаборЗаписей.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ТекущиеДанные.Характеристика = Результат;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти