#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбработкаРазблокированияРеквизитовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ЭтоТовар = Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар");
		ИндивидуальныеУпаковки = (Объект.НаборУпаковок = ИндивидуальныйНаборУпаковок
		                         ИЛИ Не ЗначениеЗаполнено(Объект.НаборУпаковок));
		
		Если НЕ Элементы.ЕдиницаИзмерения.ТолькоПросмотр Тогда
			Элементы.ЕдиницаИзмерения.ТолькоПросмотр = Не ИндивидуальныеУпаковки;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.НаборУпаковок) Тогда
			Элементы.НаборУпаковок.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
		Если НЕ Объект.ИспользоватьСерийныеНомера Тогда
			Элементы.ИспользоватьСерийныеНомера.ТолькоПросмотр = Ложь;
			Элементы.ТипСерийногоНомера.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
		Если Объект.Номинал = 0 Тогда
			Элементы.Номинал.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДобавитьСерийныйНомер(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ЭтаФорма.Записать() Тогда
			
		ЗначенияЗаполнения = Новый Структура("Владелец", Объект.Ссылка);
		
		ОткрытьФорму("Справочник.СерийныеНомера.ФормаОбъекта", 
			Новый Структура("ЗначенияЗаполнения",ЗначенияЗаполнения), Элементы.СерийныеНомера);
			
		КонецЕсли;
	Иначе
		Возврат
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДобавитьИзображение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если Записать() Тогда
		
			ДобавитьИзображениеДействиеПослеДобавления();
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерезаполнитьЗначения(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = ?(Результат = КодВозвратаДиалога.Да, "Да", "Нет");
	ПриИзмененииВидаНоменклатуры(Ответ);	
	
КонецПроцедуры

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Номенклатура = Объект.Ссылка Тогда
		ТекстСообщения = НСтр("ru = 'Штрихкод %1 уже присвоен данной номенклатуре.'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Штрихкод %1 уже существует, владелец %2.'");
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураРезультат.ДанныеПО, СтрокаРезультата.Номенклатура);
	
	СообщениеПользователю = Новый СообщениеПользователю;
	СообщениеПользователю.Текст = ТекстСообщения;
	СообщениеПользователю.КлючДанных = СтрокаРезультата.Номенклатура;
	
	СтруктураРезультат.Вставить("СообщениеПользователю", СообщениеПользователю);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	Если СтруктураПараметровКлиента.Свойство("СообщениеПользователю") Тогда
		СтруктураПараметровКлиента.СообщениеПользователю.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДействияПослеЗаписиИЗакрытии) = Тип("Структура") И ДействияПослеЗаписиИЗакрытии.Свойство("СозданиеНовогоШтрихКода") Тогда
		Если ДействияПослеЗаписиИЗакрытии.СозданиеНовогоШтрихКода.СтруктураПараметровКлиента.Штрихкод = СтруктураПараметровКлиента.ДанныеПО Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Штрихкод %1 будет присвоен данной номенклатуре.'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, СтруктураПараметровКлиента.ДанныеПО, Объект.Ссылка);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Продолжить'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Отмена'"));
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("СозданиеШтрихкода_Подтверждение", ЭтотОбъект, СтруктураПараметровКлиента),
		ТекстВопроса,
		Кнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеШтрихкода_Подтверждение(РезультатВопроса, СтруктураПараметровКлиента) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураПараметровКлиента.Свойство("Штрихкод") Тогда
		СтруктураПараметровКлиента.Вставить("Штрихкод", СтруктураПараметровКлиента.ДанныеПО);
		СтруктураПараметровКлиента.Вставить("ТипШтрихкода", ПодключаемоеОборудованиеРТВызовСервера.ОпределитьТипШтрихкода(СтруктураПараметровКлиента.ДанныеПО));
	КонецЕсли;
	
	Если ТипЗнч(ДействияПослеЗаписиИЗакрытии) <> Тип("Структура") Тогда
		ДействияПослеЗаписиИЗакрытии = Новый Структура;
	КонецЕсли;
	
	ДействияПослеЗаписиИЗакрытии.Вставить("СозданиеНовогоШтрихКода", Новый Структура);
	ДействияПослеЗаписиИЗакрытии.СозданиеНовогоШтрихКода.Вставить("СтруктураПараметровКлиента", СтруктураПараметровКлиента);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
		
	// Обработчик подсистемы запрета редактирования реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
		
	УстановитьРежимРаботыСНаименованием();
	
	Элементы.ДекорацияВес.Заголовок = Строка(ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ЕдиницаИзмеренияВеса"));
	ИндивидуальныйНаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
	
	Элементы.ТипСрокаДействия.СписокВыбора.Добавить(Перечисления.СрокДействияПодарочныхСертификатов.БезОграниченияСрока);
	Элементы.ТипСрокаДействия.СписокВыбора.Добавить(Перечисления.СрокДействияПодарочныхСертификатов.СОграничениемНаДату);
	Элементы.ТипСрокаДействия.СписокВыбора.Добавить(Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи);

	ЗаполнитьРеквизитыПоУмолчанию();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьПоПараметрам();
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	//ВЕТИС
	Если НЕ ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ОсобенностьУчета = Неопределено;
		Если Параметры.Свойство("ОсобенностьУчета", ОсобенностьУчета)
			И ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС Тогда
			ЗаполнитьОбъектПоДаннымВЕТИС(Параметры);
		КонецЕсли;
	КонецЕсли;
	//Конец ВЕТИС
	
	// ПодключаемоеОборудование
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	РаботаСНоменклатурой.ПриСозданииНаСервереФормаНоменклатуры(ЭтотОбъект, Элементы.ГруппаВертикальНаименований);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	СтруктураСозданияНоменклатуры = Новый Структура;
	СтруктураСозданияНоменклатуры.Вставить("Родитель",Объект.Родитель);
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
			СтруктураСозданияНоменклатуры.Вставить("ВидНоменклатуры",Объект.ВидНоменклатуры);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда
			СтруктураСозданияНоменклатуры.Вставить("СтавкаНДС",Объект.СтавкаНДС);
		КонецЕсли;
	КонецЕсли;
	СтруктураСозданияНоменклатуры.Вставить("ЗначениеКопирования",Параметры.ЗначениеКопирования);
	ПараметрыСозданияНоменклатуры = ПоместитьВоВременноеХранилище(СтруктураСозданияНоменклатуры,УникальныйИдентификатор);

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Ссылка.Пустая() И РаботаСПравиламиИменованияВызовСервера.ИспользоватьПравилаИменования() Тогда	
		ПараметрыФормы = ПолучитьИзВременногоХранилища(ПараметрыСозданияНоменклатуры);
		ОткрытьФорму("Справочник.Номенклатура.Форма.ПомощникНового",ПараметрыФормы,ВладелецФормы);
		Отказ = Истина;	
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	АвтоНаименованиеНоменклатуры(Ложь);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ ДействияПослеЗаписиИЗакрытии = Неопределено
		И ДействияПослеЗаписиИЗакрытии.Свойство("СозданиеНовогоШтрихКода") 
		И ДействияПослеЗаписиИЗакрытии.СозданиеНовогоШтрихКода.Свойство("ОткрытьФормуСозданияШтрихКодаПриЗакрытии") Тогда
		
		Если ЗавершениеРаботы Тогда
			Отказ = Истина;
		Иначе
            
            // &ЗамерПроизводительности
            ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                     Истина, "РегистрСведений.Штрихкоды.Форма.ФормаЗаписи.Открытие");
                     
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("ТипШтрихкода, Штрихкод"));
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Владелец", Объект.Ссылка);
			ЗаполнитьЗначенияСвойств(ПараметрыФормы.ЗначенияЗаполнения, ДействияПослеЗаписиИЗакрытии.СозданиеНовогоШтрихКода.СтруктураПараметровКлиента);
			
			ОткрытьФорму("РегистрСведений.Штрихкоды.Форма.ФормаЗаписи", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.Независимый);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		ОбновитьОтображениеЗакладок();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "СозданыСертификаты" Тогда
		
		Элементы.СерийныеНомера.Обновить();

	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
		Если ВыборИзображения Тогда
			Объект.ФайлКартинки = СсылкаНаФайл;
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ДополнительныеСведения" И АвтоматическиФормироватьНаименование Тогда
		ЗаполнитьЗначенияПараметровИменования();
		Объект.Наименование = СформироватьНаименование();
		АвтоНаименованиеНоменклатуры();
		УстановитьРежимРаботыСНаименованием();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	РаботаСФайламиКлиент.ПоказатьПодтверждениеЗакрытияФормыСФайлами(ЭтотОбъект, Отказ, Ложь, Объект.Ссылка);
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписьюНаСервере" формы.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	РаботаСНоменклатурой.ПриЗаписиНаСервереФормаНоменклатуры(ЭтотОбъект, ТекущийОбъект, Отказ);
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// Подсистема запрета редактирования ключевых реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.НаборУпаковок) Тогда
		Элементы.НаборУпаковок.ТолькоПросмотр = Ложь;
	КонецЕсли;
	Если НЕ Объект.ИспользоватьСерийныеНомера Тогда
		Элементы.ИспользоватьСерийныеНомера.ТолькоПросмотр = Ложь;
		Элементы.ТипСерийногоНомера.ТолькоПросмотр         = Ложь;
	КонецЕсли;
	
	УстановитьОтборДинамическихСписков();
	
	Если НЕ ДействияПослеЗаписиИЗакрытии = Неопределено
		И ДействияПослеЗаписиИЗакрытии.Свойство("СозданиеНовогоШтрихКода") Тогда
		Если НЕ Справочники.Номенклатура.ПроверитьИспользованиеХарактеристик(ТекущийОбъект.Ссылка)
			И НЕ ЗначениеЗаполнено(ТекущийОбъект.НаборУпаковок) Тогда
			
			ЗаписьШтрихкода              = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
			ЗаписьШтрихкода.Владелец     = ТекущийОбъект.Ссылка;
			ЗаписьШтрихкода.ТипШтрихкода = ДействияПослеЗаписиИЗакрытии.СозданиеНовогоШтрихКода.СтруктураПараметровКлиента.ТипШтрихкода;
			ЗаписьШтрихкода.Штрихкод     = ДействияПослеЗаписиИЗакрытии.СозданиеНовогоШтрихКода.СтруктураПараметровКлиента.Штрихкод;
			ЗаписьШтрихкода.Записать(Истина);
			
			ДействияПослеЗаписиИЗакрытии.Удалить("СозданиеНовогоШтрихКода");
		Иначе
			
			ДействияПослеЗаписиИЗакрытии.СозданиеНовогоШтрихКода.Вставить("ОткрытьФормуСозданияШтрихКодаПриЗакрытии");
	
		КонецЕсли;
	
	КонецЕсли;
	
	ТипСерийногоНомераСсылка = ТекущийОбъект.ТипСерийногоНомера;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля "ВидНоменклатуры".
//
&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда 
		ТекстВопроса = НСтр("ru = 'Заполнить значения по умолчанию?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПерезаполнитьЗначения", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе 
		ПриИзмененииВидаНоменклатуры();
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "Наименование".
//
&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)

	УстановитьРежимРаботыСНаименованием();
	
	АвтоНаименованиеНоменклатуры();
	
	Если ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "НаборУпаковок".
//
&НаКлиенте
Процедура НаборУпаковокПриИзменении(Элемент)
	НаборУпаковокПриИзмененииСервер();
	ИндивидуальныеУпаковки = (Объект.НаборУпаковок = ИндивидуальныйНаборУпаковок
	                         ИЛИ Не ЗначениеЗаполнено(Объект.НаборУпаковок));
	
	Элементы.ЕдиницаИзмерения.ТолькоПросмотр = Не ИндивидуальныеУпаковки;
		
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);
	
КонецПроцедуры

// Процедура - обработчик события "Открытие" поля "НаборУпаковок".
//
&НаКлиенте
Процедура НаборУпаковокОткрытие(Элемент, СтандартнаяОбработка)
	Если Объект.НаборУпаковок = ИндивидуальныйНаборУпаковок Тогда
		СтандартнаяОбработка = Ложь;
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Если Не ЭтаФорма.Записать() Тогда
				ТекстСообщения = НСтр("ru='Ошибка записи элемента!'");
				ПоказатьПредупреждение(,ТекстСообщения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
        
        // &ЗамерПроизводительности
        ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                 Истина, "Справочник.УпаковкиНоменклатуры.Форма.ФормаСписка.Открытие");
                 
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", Объект.Ссылка);
	
		ОткрытьФорму("Справочник.УпаковкиНоменклатуры.Форма.ФормаСписка",Новый Структура("Отбор", Отбор), ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ТипСрокаДействия".
//
&НаКлиенте
Процедура ТипСрокаДействияПриИзменении(Элемент)
	
	ПриИзмененииТипаСрокаДействия();
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ТипСерийногоНомера".
//
&НаКлиенте
Процедура ТипСерийногоНомераПриИзменении(Элемент)
	
	ПриИзмененииТипаСерийногоНомера();
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ИспользоватьСерийныеНомера".
//
&НаКлиенте
Процедура ИспользоватьСерийныеНомераПриИзменении(Элемент)
	
	ПриИзмененииИспользоватьСерийныеНомера();
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломДобавления" поля "СерийныеНомера".
//
&НаКлиенте
Процедура СерийныеНомераПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если ЭтаФорма.Модифицированность 
			И НЕ ТипСерийногоНомераСсылка = Объект.ТипСерийногоНомера Тогда
			
			Отказ = Истина;
			ТекстВопроса = НСтр("ru = 'Элемент был изменен, записать изменения?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросДобавитьСерийныйНомер", ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			
		КонецЕсли;
		
	Иначе
		
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Элемент был изменен, записать изменения?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросДобавитьСерийныйНомер", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварнаяКатегорияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Справочник.ТоварныеКатегории.Форма.ФормаВыбора.Открытие");
             
    СтандартнаяОбработка=Ложь;
	ОткрытьФорму ("Справочник.ТоварныеКатегории.ФормаВыбора", Новый Структура("Владелец",Объект.ВидНоменклатуры), Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварнаяКатегорияПриИзменении(Элемент)
	МожноМенять=ВладелецТоварнойКатегорииСоответствуетВидуНоменклатуры();
	Если НЕ МожноМенять Тогда
		СтрокаПредупреждения = НСтр("ru='Данная категория не принадлежит выбранному виду номенклатуры'");
		ПоказатьПредупреждение(,СтрокаПредупреждения);
		Объект.ТоварнаяКатегория = Неопределено;
	КонецЕсли;
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПроизводительПриИзменении(Элемент)
	
	Объект.ПроизводительИмпортерАлкогольнойПродукции = Объект.Производитель;
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);

КонецПроцедуры

&НаКлиенте
Процедура СтранаПроисхожденияПриИзменении(Элемент)
	
	Если Объект.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия")
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СтранаПроисхождения) Тогда
		Объект.ИмпортнаяАлкогольнаяПродукция = Ложь;
	Иначе
		Объект.ИмпортнаяАлкогольнаяПродукция = Истина;
	КонецЕсли;
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "Весовой".
//
&НаКлиенте
Процедура ВесовойПриИзменении(Элемент)
	
	ТоварВесовой = Объект.Весовой;
	
	Если ТоварВесовой Тогда 
		Объект.РазрешитьВводДробногоКоличества = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"РазрешитьВводДробногоКоличества", 
		"Доступность",
		Не ТоварВесовой);
		
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Справочник.ВидыНоменклатуры.Форма.ФормаВыбора.Открытие");

КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
	         Истина, "Справочник.БазовыеЕдиницыИзмерения.Форма.ФормаВыбора.Открытие");

КонецПроцедуры

&НаКлиенте
Процедура КодТНВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Справочник.КлассификаторТНВЭД.Форма.ФормаВыбора.Открытие");
             
КонецПроцедуры

&НаКлиенте
Процедура НаборУпаковокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Справочник.НаборыУпаковок.Форма.ФормаВыбора.Открытие");
             
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	УстановитьРежимРаботыСНаименованием();
	
КонецПроцедуры

&НаКлиенте
Процедура МаркаПриИзменении(Элемент)
	
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидМехаГИСМПриИзменении(Элемент)
	
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);

КонецПроцедуры

&НаКлиенте
Процедура КодТНВЭДПриИзменении(Элемент)
	
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВидАлкогольнойПродукцииЕГАИСПриИзменении(Элемент)
	
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПроизводительИмпортерАлкогольнойПродукцииПриИзменении(Элемент)
	
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбъемДАЛПриИзменении(Элемент)
	
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);

КонецПроцедуры

&НаКлиенте
Процедура КрепостьПриИзменении(Элемент)
	
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);

КонецПроцедуры

&НаКлиенте
Процедура КиЗГИСМВидПриИзменении(Элемент)
	
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);

КонецПроцедуры

&НаКлиенте
Процедура КиЗГИСМСпособВыпускаВОборотПриИзменении(Элемент)
	
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);

КонецПроцедуры

&НаКлиенте
Процедура КиЗГИСМРазмерПриИзменении(Элемент)
	
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);

КонецПроцедуры

&НаКлиенте
Процедура КиЗГИСМGTINПриИзменении(Элемент)
	
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);

КонецПроцедуры

&НаКлиенте
Процедура НоминалПриИзменении(Элемент)
	
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияДействияПриИзменении(Элемент)
	
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);

КонецПроцедуры

&НаКлиенте
Процедура КоличествоПериодовДействияПриИзменении(Элемент)
	
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДоговорПлатежногоАгентаПриИзменении(Элемент)
	
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
		
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АртикулПриИзменении(Элемент)
		
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
		
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
		
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварнаяГруппаПриИзменении(Элемент)
		
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеноваяГруппаПриИзменении(Элемент)
		
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесПриИзменении(Элемент)
		
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьВводДробногоКоличестваПриИзменении(Элемент)
		
	ПриИзмененииПараметраИменования(Элемент.Имя,Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Обработчик команды, создаваемой механизмом запрета редактирования ключевых реквизитов.
//
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ОбработчикОповещения = Новый ОписаниеОповещения("ОбработкаРазблокированияРеквизитовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект, ОбработчикОповещения);
			
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ЗаполнитьСерийныеНомера".
//
&НаКлиенте
Процедура ЗаполнитьСерийныеНомера(Команда)
	
	Отказ = Истина;
	
	Если  ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если НЕ ПроверитьЗаполнение() Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если ЭтаФорма.Модифицированность Тогда
			
			Если Не ЭтаФорма.Записать() Тогда
				
				Возврат;
				
			КонецЕсли;
						
		КонецЕсли;
		
	Иначе
		
		Если Не ЭтаФорма.Записать() Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Номенклатура", Объект.Ссылка);
	
	ОткрытьФорму("Обработка.ЗаполнениеДиапазонаСерийныхНомеров.Форма", ПараметрыЗаполнения ,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросДобавитьИзображение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	Иначе
		ДобавитьИзображениеДействиеПослеДобавления();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	Объект.ФайлКартинки = ПредопределенноеЗначение("Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка");
	АдресКартинки = "";
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	ОчиститьСообщения();
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.ФайлКартинки);
	Иначе
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзображениеИзПрисоединенныхФайлов(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросДобавитьИзображение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	Иначе
		СтруктураПараметрыВыбора =
			Новый Структура("ВладелецФайла, ЗакрыватьПриВыборе, РежимВыбора", Объект.Ссылка, Истина, Истина);
		ОткрытьФорму(
			"Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
			СтруктураПараметрыВыбора,,,,,
			Новый ОписаниеОповещения("ВыбратьКартинкуИзПрисоединенныхФайловЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.ФайлКартинки = Результат;
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор)
	КонецЕсли;

КонецПроцедуры

// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
&НаКлиенте
Процедура Подключаемый_НачалоВыбораРаботаСНоменклатурой(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ВыбратьОбъектСервиса(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОчисткаРаботаСНоменклатурой(Элемент, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.НажатиеОчиститьНоменклатуру(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеРежимОбновления(Элемент)
	
	РаботаСНоменклатуройКлиент.НажатиеРежимОбновления(ЭтотОбъект, ПодготовитьДанныеДляИнтерактивногоЗаполнения());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьРаботаСНоменклатурой(Элемент, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ОткрытКарточкуОбъектаСервиса(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	РаботаСНоменклатуройКлиент.ИзменениеТекстаСобратьСтрокуПоиска(ЭтотОбъект, Текст, Элемент, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзменении(Элемент)
	
	РаботаСНоменклатуройКлиент.ПриИзмененииСобратьСтрокуПоиска(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗакрытиеФормыВыбораНоменклатуры(ДанныеОбъекта, ДополнительныеПараметры) Экспорт 
	
	РаботаСНоменклатуройКлиент.ОбработкаОповещенияЗакрытиеФормыВыбораНоменклатуры(
		ДанныеОбъекта, ДополнительныеПараметры, ПодготовитьДанныеДляИнтерактивногоЗаполнения());
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗакрытиеФормыЗаполнения(ПараметрыЗакрытияФормы, ДополнительныеПараметры) Экспорт 
	
	ЗаполнитьРеквизитыФормы(ПараметрыЗакрытияФормы);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляИнтерактивногоЗаполнения()
	
	Возврат РаботаСНоменклатурой.ПодготовитьДанныеДляИнтерактивногоЗаполнения(ЭтотОбъект);
			
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыФормы(ПараметрыЗакрытияФормы)
	
	РаботаСНоменклатурой.ЗаполнитьРеквизитыФормы(ЭтотОбъект, ПараметрыЗакрытияФормы);
			
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой

&НаКлиенте
Процедура РедактироватьНаименование(Команда)
	
	ПараметрыОткрытия = ПолучитьСтруктуруПараметровПравилаИменования();	
	ОбработчикОповещения = Новый ОписаниеОповещения("РедактированиеНаименованияПоПравилуЗавершение", ЭтотОбъект);		
	ОткрытьФорму("Обработка.РаботаСПравиламиИменованияНоменклатуры.Форма.РедактированиеНаименования",ПараметрыОткрытия,,,,,ОбработчикОповещения);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаОписание, Объект.Описание);
КонецПроцедуры

// Процедура устанавливает отбор динамических списков формы.
//
&НаСервере
Процедура УстановитьОтборДинамическихСписков()
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СерийныеНомера, "Владелец", Объект.Ссылка , Истина, ВидСравненияКомпоновкиДанных.Равно);
	
КонецПроцедуры // УстановитьОтборДинамическихСписков()

// Процедура управляет отображением закладок на форме.
//
&НаСервере
Процедура ОбновитьОтображениеЗакладок()
	
	НазначеныДополнительныеРеквизиты = Ложь;
	
	Для каждого ДополнительныеРеквизиты Из Элементы.СтраницаДополнительныеРеквизиты.ПодчиненныеЭлементы Цикл
		НазначеныДополнительныеРеквизиты = Истина;
		Прервать;
	КонецЦикла;
	
	Элементы.СтраницаДополнительныеРеквизиты.Видимость = НазначеныДополнительныеРеквизиты;
	Элементы.СтраницаСертификаты.Видимость = Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат;
	
	Если НЕ (НазначеныДополнительныеРеквизиты 
		И Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУчетнаяИнформация;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьОтображениеЗакладок()

// Процедура отрабатывает изменение поля "Набор упаковок".
//
&НаСервере
Процедура НаборУпаковокПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.НаборУпаковок)
		И  Объект.НаборУпаковок <> ИндивидуальныйНаборУпаковок Тогда
		Объект.ЕдиницаИзмерения = Объект.НаборУпаковок.ЕдиницаИзмерения;
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет доступностью реквизитов формы на сервере.
//
&НаСервере
Процедура УстановитьДоступностьРеквизитовНаСервере()
	
	ЭтоУслуга = Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
	ЭтоТовар = Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
	ИндивидуальныеУпаковки = (Объект.НаборУпаковок = ИндивидуальныйНаборУпаковок
	                         ИЛИ НЕ ЗначениеЗаполнено(Объект.НаборУпаковок));
	
	ЭтоПодарочныйСертификат = Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат;
	
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("Весовой");
	ИменаЭлементов.Добавить("ГруппаВес");
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, ИменаЭлементов, "Видимость", ЭтоТовар);
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ИспользованиеХарактеристик", "Видимость", Не ЭтоПодарочныйСертификат);
	
	Элементы.ЕдиницаИзмерения.АвтоОтметкаНезаполненного = НЕ ЭтоУслуга;
	Элементы.ЕдиницаИзмерения.ОтметкаНезаполненного     = (НЕ ЭтоУслуга)
	                                                      И Не ЗначениеЗаполнено(Объект.ЕдиницаИзмерения)
	                                                      И ИндивидуальныеУпаковки;
	Если ЭтоПодарочныйСертификат Тогда
		
		
		Элементы.ТипСерийногоНомера.Доступность               = Объект.ИспользоватьСерийныеНомера;
		Элементы.СерийныеНомера.Доступность                   = Объект.ИспользоватьСерийныеНомера;
		Элементы.СерийныеНомераКоманднаяПанель.Доступность    = Объект.ИспользоватьСерийныеНомера;
		
		Если Объект.ИспользоватьСерийныеНомера Тогда
			
			ЭлементСпискаКДобавлению = Элементы.ТипСрокаДействия.СписокВыбора.НайтиПоЗначению(Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи);
			Если ЭлементСпискаКДобавлению = Неопределено Тогда
				
				Элементы.ТипСрокаДействия.СписокВыбора.Добавить(Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи);
				
			КонецЕсли;
			
		Иначе
			
			ЭлементСпискаКУдалению = Элементы.ТипСрокаДействия.СписокВыбора.НайтиПоЗначению(Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи);
			Если ЭлементСпискаКУдалению <> Неопределено Тогда
				
				Элементы.ТипСрокаДействия.СписокВыбора.Удалить(ЭлементСпискаКУдалению);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПриИзмененииТипаСрокаДействия();
		ПриИзмененииТипаСерийногоНомера();
		
	КонецЕсли;
	
	Если НЕ Элементы.ЕдиницаИзмерения.ТолькоПросмотр Тогда
		
		Элементы.ЕдиницаИзмерения.ТолькоПросмотр = Не ИндивидуальныеУпаковки;
	
	КонецЕсли;
	
	Если ЭтоУслуга Тогда
		ЭтоАгентскаяУслуга = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидНоменклатуры, "АгентскиеУслуги");
	Иначе
		ЭтоАгентскаяУслуга = Ложь;
	КонецЕсли;
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорПлатежногоАгента", "Видимость", ЭтоАгентскаяУслуга);
	
	Если ЭтоТовар И ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		ЭтоАлкогольнаяПродукция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидНоменклатуры, "АлкогольнаяПродукция");
	Иначе
		ЭтоАлкогольнаяПродукция = Ложь;
	КонецЕсли;
	
	Элементы.КиЗГИСМВид.Видимость = Объект.КиЗГИСМ;
	Элементы.КиЗГИСМСпособВыпускаВОборот.Видимость = Объект.КиЗГИСМ;
	Элементы.КиЗГИСМGTIN.Видимость = Объект.КиЗГИСМ;
	Элементы.КиЗГИСМРазмер.Видимость = Объект.КиЗГИСМ;
	
	Элементы.КодТНВЭД.Видимость = Объект.ПродукцияМаркируемаяДляГИСМ;
	Элементы.ВидМехаГИСМ.Видимость = Объект.ПродукцияМаркируемаяДляГИСМ;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПараметрыАлкогольнойПродукции", "Видимость", ЭтоАлкогольнаяПродукция);
	
	Элементы.РазрешитьВводДробногоКоличества.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуНаВводДробногоКоличества");
	
КонецПроцедуры

// Процедура передает управление на сервер для изменения отображения формы.
//
&НаСервере
Процедура ПриИзмененииВидаНоменклатуры(Ответ = "")
												
	УстановитьРежимРаботыСНаименованием();
	
	Справочники.Номенклатура.ОбновитьПризнакиНоменклатуры(ЭтотОбъект, Ответ);
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	УстановитьДоступностьРеквизитовНаСервере();
	
	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		Элементы.ТоварнаяКатегория.ТолькоПросмотр = Ложь;
	Иначе
		Объект.ТоварнаяКатегория = Справочники.ТоварныеКатегории.ПустаяСсылка();
		Элементы.ТоварнаяКатегория.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура передает управление на сервер для изменения отображения формы.
//
&НаСервере
Процедура ПриИзмененииИспользоватьСерийныеНомера()
	
	Элементы.ТипСерийногоНомера.Доступность               = Объект.ИспользоватьСерийныеНомера;
	Элементы.ТипСерийногоНомера.АвтоОтметкаНезаполненного = Объект.ИспользоватьСерийныеНомера;
	Элементы.ТипСерийногоНомера.ОтметкаНезаполненного     = Объект.ИспользоватьСерийныеНомера;
	Элементы.СерийныеНомера.Доступность                   = Объект.ИспользоватьСерийныеНомера;
	Элементы.СерийныеНомераКоманднаяПанель.Доступность    = Объект.ИспользоватьСерийныеНомера;
	
	
	Если НЕ (Объект.ИспользоватьСерийныеНомера 
		И Объект.ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой) Тогда
		
		Объект.ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Штриховой;
		ПриИзмененииТипаСерийногоНомера();
		ПриИзмененииТипаСрокаДействия();
		
	КонецЕсли;
	
	Если НЕ Объект.ИспользоватьСерийныеНомера 
		И Объект.ТипСрокаДействия = Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи Тогда
		
		Объект.ТипСрокаДействия = Перечисления.СрокДействияПодарочныхСертификатов.БезОграниченияСрока;
		ПриИзмененииТипаСрокаДействия();
		
	КонецЕсли;
	
	Если Объект.ИспользоватьСерийныеНомера Тогда
		
		ЭлементСпискаКДобавлению = Элементы.ТипСрокаДействия.СписокВыбора.НайтиПоЗначению(Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи);
		Если ЭлементСпискаКДобавлению = Неопределено Тогда
			
			Элементы.ТипСрокаДействия.СписокВыбора.Добавить(Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи);
			
		КонецЕсли;
		
	Иначе
		
		ЭлементСпискаКУдалению = Элементы.ТипСрокаДействия.СписокВыбора.НайтиПоЗначению(Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи);
		Если ЭлементСпискаКУдалению <> Неопределено Тогда
			
			Элементы.ТипСрокаДействия.СписокВыбора.Удалить(ЭлементСпискаКУдалению);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура передает управление на сервер для изменения отображения формы.
//
&НаСервере
Процедура ПриИзмененииТипаСерийногоНомера()
	
	Элементы.СерийныеНомераШтрихкод.Видимость = Объект.ТипСерийногоНомера = Перечисления.ТипыСерийныхНомеровСертификатов.Смешанный;

КонецПроцедуры	

// Процедура передает управление на сервер для изменения отображения формы.
//
&НаСервере
Процедура ПриИзмененииТипаСрокаДействия()
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПериод", "Видимость",
		Объект.ТипСрокаДействия = Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи);
		
	ОбщегоНазначенияРТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаОкончанияДействия", "Видимость", 
		Не Объект.ТипСрокаДействия = Перечисления.СрокДействияПодарочныхСертификатов.ПериодПослеПродажи
		И Объект.ТипСрокаДействия = Перечисления.СрокДействияПодарочныхСертификатов.СОграничениемНаДату);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеДействиеПослеДобавления()

	ВыборИзображения = Истина;
	ИдентификаторФайла = Новый УникальныйИдентификатор;
	РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, ОбщегоНазначенияРТКлиент.ФильтрФайловИзображений());
	ВыборИзображения = Ложь;

КонецПроцедуры // ВыполнитьДобавлениеИзображения()

&НаКлиенте
Процедура АвтоНаименованиеНоменклатуры(ОбрабатыватьНаименованиеПолное = Истина)
	
	Если АвтоматическиФормироватьНаименованиеПолное И ОбрабатыватьНаименованиеПолное Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
	Элементы.НаименованиеПолное.СписокВыбора.Очистить();
	
	Элементы.НаименованиеПолное.СписокВыбора.Добавить(Объект.Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросДобавитьИзображение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		ПросмотретьПрисоединенныйФайл();
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не ЕстьПравоРедактирования Тогда
			ТекстИсключения = НСтр("ru = 'Нарушение прав доступа!'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		ДобавитьИзображениеДействиеПослеДобавления();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	ОчиститьСообщения();
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(Объект.ФайлКартинки, УникальныйИдентификатор);
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла);
	Иначе
		ТекстСообщения = НСтр("ru='Отсутствует изображение для просмотра'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)

	УстановитьПривилегированныйРежим(Истина);

	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;

КонецФункции

&НаСервере
Функция ВладелецТоварнойКатегорииСоответствуетВидуНоменклатуры()
	ВладелецСоответствует=Истина;
	Если ЗначениеЗаполнено(Объект.ТоварнаяКатегория) Тогда
		ВладелецСоответствует=Объект.ТоварнаяКатегория.Владелец=Объект.ВидНоменклатуры;
	КонецЕсли;
	Возврат ВладелецСоответствует;
КонецФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ОбновитьОтображениеЗакладок();
	УстановитьДоступностьРеквизитовНаСервере();
	УстановитьОтборДинамическихСписков();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТипСерийногоНомераСсылка = Объект.ТипСерийногоНомера;
		
		ЕстьПравоРедактирования               = ЗначениеНастроекПовтИсп.ЕстьПравоИзмененияНоменклатуры();
		ЭтаФорма.ТолькоПросмотр               = Не ЕстьПравоРедактирования;
		Элементы.АдресКартинки.ТолькоПросмотр = Не ЕстьПравоРедактирования;
	Иначе
		ЕстьПравоРедактирования = Истина;
	КонецЕсли;
	
	ДействияПослеЗаписиИЗакрытии = Новый Структура;
	Если Параметры.Свойство("СозданиеНовогоШтрихКода") Тогда
		ДействияПослеЗаписиИЗакрытии.Вставить("СозданиеНовогоШтрихКода", Параметры.СозданиеНовогоШтрихКода);
	КонецЕсли;
	
	АдресКартинки = "";
	Если НЕ Объект.ФайлКартинки.Пустая() Тогда
		Попытка
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибки);
		КонецПопытки;
	КонецЕсли;
	
	ОбщегоНазначенияРТКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаОписание, Объект.Описание);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПараметрам()
	
	Если ЗначениеЗаполнено(Параметры.ВидАлкогольнойПродукцииЕГАИС) Тогда
		Объект.ВидАлкогольнойПродукцииЕГАИС = Параметры.ВидАлкогольнойПродукцииЕГАИС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ПроизводительЕГАИС) ИЛИ ЗначениеЗаполнено(Параметры.ИмпортерЕГАИС) Тогда
		ДанныеПроизводителяИмпортера = НайтиСопоставленныхПроизводителяИмпортера(Параметры.ПроизводительЕГАИС, Параметры.ИмпортерЕГАИС);
		
		Если ЗначениеЗаполнено(ДанныеПроизводителяИмпортера.Производитель) Тогда
			Объект.Производитель = ДанныеПроизводителяИмпортера.Производитель;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПроизводителяИмпортера.ПроизводительИмпортерАлкогольнойПродукции) Тогда
			Объект.ПроизводительИмпортерАлкогольнойПродукции = ДанныеПроизводителяИмпортера.ПроизводительИмпортерАлкогольнойПродукции;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.НаименованиеНоменклатурыЕГАИС) Тогда
		Объект.Наименование = Параметры.НаименованиеНоменклатурыЕГАИС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.КрепостьЕГАИС) Тогда
		Объект.Крепость = Параметры.КрепостьЕГАИС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ОбъемЕГАИС) Тогда
		Объект.ОбъемДАЛ = Параметры.ОбъемЕГАИС / 10;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ПолноеНаименованиеНоменклатурыЕГАИС) Тогда
		Объект.НаименованиеПолное = Параметры.ПолноеНаименованиеНоменклатурыЕГАИС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Родитель) Тогда
		Объект.Родитель = Параметры.Родитель;
	КонецЕсли;
	
	Ответ = "";
	Если Параметры.Свойство("ВидНоменклатуры")
		ИЛИ ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		Ответ = "Да";
	КонецЕсли;
			
	Справочники.Номенклатура.ОбновитьПризнакиНоменклатуры(ЭтотОбъект, Ответ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоУмолчанию()
	
	СписокРеквизитовПоУмолчанию.Очистить();
	СписокРеквизитовПоУмолчанию.Добавить("СтранаПроисхождения");
	СписокРеквизитовПоУмолчанию.Добавить("Производитель");
	СписокРеквизитовПоУмолчанию.Добавить("Марка");
	СписокРеквизитовПоУмолчанию.Добавить("ТоварнаяКатегория");
	СписокРеквизитовПоУмолчанию.Добавить("ВидМехаГИСМ");
	СписокРеквизитовПоУмолчанию.Добавить("КодТНВЭД");
	СписокРеквизитовПоУмолчанию.Добавить("НаборУпаковок");
	СписокРеквизитовПоУмолчанию.Добавить("ЕдиницаИзмерения");
	СписокРеквизитовПоУмолчанию.Добавить("СтавкаНДС");
	СписокРеквизитовПоУмолчанию.Добавить("ТоварнаяГруппа");
	СписокРеквизитовПоУмолчанию.Добавить("ЦеноваяГруппа");
	СписокРеквизитовПоУмолчанию.Добавить("ВидАлкогольнойПродукцииЕГАИС");
	СписокРеквизитовПоУмолчанию.Добавить("ТипСрокаДействия");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСопоставленныхПроизводителяИмпортера(ПроизводительЕГАИС, ИмпортерЕГАИС)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("Производитель");
	Результат.Вставить("ПроизводительИмпортерАлкогольнойПродукции");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПроизводительЕГАИС", ПроизводительЕГАИС);
	Запрос.УстановитьПараметр("ИмпортерЕГАИС", ИмпортерЕГАИС);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Контрагент КАК Контрагент,
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Ссылка = &ПроизводительЕГАИС
	|	И КлассификаторОрганизацийЕГАИС.Сопоставлено
	|	И НЕ КлассификаторОрганизацийЕГАИС.СоответствуетОрганизации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Контрагент,
	|	КлассификаторОрганизацийЕГАИС.Ссылка
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Ссылка = &ИмпортерЕГАИС
	|	И КлассификаторОрганизацийЕГАИС.Сопоставлено
	|	И НЕ КлассификаторОрганизацийЕГАИС.СоответствуетОрганизации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ОрганизацияЕГАИС = ПроизводительЕГАИС Тогда
			Результат.Производитель = Выборка.Контрагент;
			Если НЕ ЗначениеЗаполнено(ИмпортерЕГАИС) Тогда
				Результат.ПроизводительИмпортерАлкогольнойПродукции = Выборка.Контрагент;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ОрганизацияЕГАИС = ИмпортерЕГАИС Тогда
			Результат.ПроизводительИмпортерАлкогольнойПродукции = Выборка.Контрагент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	ПриИзмененииПараметраИменования(Элемент.Имя);	
КонецПроцедуры

// Процедура заполняет дополнительные реквизиты и их значения.
//
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
	ОбновитьОтображениеЗакладок();

КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// ИнтеграцияГИСМ

&НаКлиенте
Процедура ПолучитьGLNПоИННКППГИСМ(Команда) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.ИНН) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""ИНН""'"), Объект.Ссылка, "Объект.ИНН");
		Возврат;
	КонецЕсли;
	
	Сообщения = Новый Массив;
	Сообщения.Добавить(ИнтеграцияГИСМВызовСервера.СообщениеЗапросаGLN(Объект.Ссылка, Объект.ИНН, Объект.КПП));
	СообщенияПоОрганизациям = ИнтеграцияГИСМКлиент.СообщенияПоОрганизациям(Сообщения);
	
	Данные = ИнтеграцияГИСМКлиент.СообщенияСледующейОрганизацииКПодписанию(СообщенияПоОрганизациям);
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	ИнтеграцияГИСМКлиент.Подписать(
		Данные.Сообщения,
		Данные.Организация,
		Новый ОписаниеОповещения("ПолучитьGLNПоИННКППГИСМ_ПриЗавершенииОперацииПодписи", ЭтотОбъект, Контекст));
	
КонецПроцедуры

Процедура ПолучитьGLNПоИННКППГИСМ_ПриЗавершенииОперацииПодписи(Сообщения, ДополнительныеПараметры) Экспорт
	
	Если Сообщения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Сообщения.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	GLN = ИнтеграцияГИСМВызовСервера.ОбработатьПодписанноеСообщениеЗапросаGLN(Сообщения[0]);
	
	Объект.GLN = GLN;
	
КонецПроцедуры
// Конец ИнтеграцияГИСМ

&НаСервере
// ИнтеграцияВЕТИС
Процедура ЗаполнитьОбъектПоДаннымВЕТИС(Параметры)
	
	// Находим нужный ыид номенклатуры
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыНоменклатуры.Ссылка КАК Ссылка,
	|	ВидыНоменклатуры.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.ПодконтрольнаяПродукцияВЕТИС
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления УБЫВ";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект.ВидНоменклатуры = Выборка.Ссылка;
		ПриИзмененииВидаНоменклатуры();
	Иначе
		 Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("НаименованиеНоменклатурыВЕТИС") Тогда
		Объект.Наименование = Параметры.НаименованиеНоменклатурыВЕТИС;
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
	Если Параметры.Свойство("ЕдиницаИзмеренияВЕТИС") Тогда
		Объект.ЕдиницаИзмерения = Параметры.ЕдиницаИзмеренияВЕТИС;
	КонецЕсли;
	
	Если Параметры.Свойство("АртикулНоменклатурыВЕТИС") Тогда
		Объект.Артикул = Параметры.АртикулНоменклатурыВЕТИС;
	КонецЕсли;
	
	Если Параметры.Свойство("СтранаПроизводства") Тогда
		Объект.СтранаПроисхождения = Параметры.СтранаПроизводства;
	КонецЕсли;
	
	Если Параметры.Свойство("Производители") Тогда
		Если ЗначениеЗаполнено(Параметры.Производители) Тогда
			ТаблицаПроизводителей = ПолучитьИзВременногоХранилища(Параметры.Производители);
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(Таблица.Производитель КАК Справочник.ПредприятияВЕТИС) КАК ПредприятиеВЕТИС
			|ПОМЕСТИТЬ ПредприятияВЕТИС
			|ИЗ
			|	&Таблица КАК Таблица
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ХозяйствующиеСубъектыВЕТИСПредприятия.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ХозяйствующиеСубъектыВЕТИС.Предприятия КАК ХозяйствующиеСубъектыВЕТИСПредприятия
			|ГДЕ
			|	ХозяйствующиеСубъектыВЕТИСПредприятия.Предприятие В
			|			(ВЫБРАТЬ
			|				КАКПРедприятияВЕТИС.ПредприятиеВЕТИС
			|			ИЗ
			|				ПРедприятияВЕТИС КАК КАКПРедприятияВЕТИС)
			|	И НЕ ХозяйствующиеСубъектыВЕТИСПредприятия.Ссылка.Контрагент = &ПустойКонтрагент";
			
			Запрос.УстановитьПараметр("Таблица", ТаблицаПроизводителей);
			Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если Выборка.Следующий() Тогда
				Объект.Производитель = Выборка.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Конец ИнтеграцияВЕТИС

&НаКлиенте
Процедура РедактированиеНаименованияПоПравилуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда		
		
		Для Каждого Строка из Результат.МассивЗаполненныхПараметров Цикл
			Если Не  Строка.Свойство("ЭтоДопСведение") Тогда
				Если Строка.ДанныеОбъекта Тогда
					Объект[Строка.ПутьКДанным] = Строка.Значение;
				Иначе
					ЭтаФорма[Строка.ПутьКДанным] = Строка.Значение;
				КонецЕсли;
			КонецЕсли;
			
			СтрокиЗначенияПараметров = ЗначенияПараметровИменования.НайтиСтроки(Новый Структура("ПутьКДанным",Строка.ПутьКДанным));
			Если СтрокиЗначенияПараметров.Количество() > 0 Тогда
				СтрокаЗначениеПараметра = СтрокиЗначенияПараметров[0];
				СтрокаЗначениеПараметра.Значение = Строка.Значение;
				СтрокаЗначениеПараметра.ДанныеПараметраСтрокой = Формат(Строка.Значение,"ДЛФ=Д; БЛ='Ложь'; БИ='" + СтрокаЗначениеПараметра.ИмяПараметра + "'");
			КонецЕсли;
			
		КонецЦикла;	
				
		Объект.Наименование = Результат.Наименование;	
		АвтоНаименованиеНоменклатуры();	
		УстановитьРежимРаботыСНаименованием();
		Модифицированность = Истина;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруПараметровПравилаИменования()
	
	СтруктураПараметров = РаботаСПравиламиИменования.ПолучитьСтруктуруПараметровПравилаИменования(Объект.ВидНоменклатуры,?(ЭтаФорма.Свойства_ИспользоватьСвойства,ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов,Неопределено));	
	СтруктураПараметров.Вставить("Номенклатура",Объект.Ссылка);
	Если ЗначенияПараметровИменования.Количество() > 0 Тогда
		СтруктураПараметров.Вставить("ЗначенияПараметровИменования",ЗначенияПараметровИменования);
	КонецЕсли;
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция СформироватьНаименование()
	
	СтруктураПараметровПравилаИменования = ПолучитьСтруктуруПараметровПравилаИменования();
	Если ЗначенияПараметровИменования.Количество() = 0 Тогда	
		РезультатЗапроса = РаботаСПравиламиИменования.ПолучитьЗначенияПараметровНоменклатуры(Объект.ВидНоменклатуры,СтруктураПараметровПравилаИменования.ПараметрыПравилаИменования,Объект.Ссылка);
		ВыборкаДанных 	 = РезультатЗапроса.Выбрать();
		Если ВыборкаДанных.Количество() > 0 Тогда 
			ВыборкаДанных.Следующий(); 
			Для Каждого СтрокаПараметр из СтруктураПараметровПравилаИменования.ПараметрыПравилаИменования Цикл
				СтрокаПараметр.ДанныеПараметраСтрокой = Формат(ВыборкаДанных[СтрокаПараметр.ИмяЭлемента],"ДЛФ=Д; БЛ='Ложь'; БИ='" + СтрокаПараметр.ИмяПараметра + "'");
			КонецЦикла;
		КонецЕсли;	
		Возврат РаботаСПравиламиИменованияКлиентСервер.ПреобразоватьСтрокуПоПравилу(СтруктураПараметровПравилаИменования.Правило,СтруктураПараметровПравилаИменования.ПараметрыПравилаИменования,"ИмяПараметра","ДанныеПараметраСтрокой");		
	Иначе
		Возврат РаботаСПравиламиИменованияКлиентСервер.ПреобразоватьСтрокуПоПравилу(СтруктураПараметровПравилаИменования.Правило,ЗначенияПараметровИменования,"ИмяПараметра","ДанныеПараметраСтрокой");
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьРежимРаботыСНаименованием()
	
	ИспользоватьИменованиеНоменклатурыПоПравилу = РаботаСПравиламиИменования.ИспользоватьИменованиеНоменклатурыПоПравилу(Объект.ВидНоменклатуры,Объект.Ссылка);
	
	Если ИспользоватьИменованиеНоменклатурыПоПравилу Тогда
		
		РезультатПроверкиПравила = РаботаСПравиламиИменования.ПроверитьИспользованиеПравилаИменования(Объект.ВидНоменклатуры.ПравилоИменования,,Объект.ВидНоменклатуры.НаборСвойств);
		Если РезультатПроверкиПравила.ЕстьОшибки
			Или РезультатПроверкиПравила.Свойство("ПравилоНельзяИспользоватьДляНабора") Тогда
			ИспользоватьИменованиеНоменклатурыПоПравилу = Ложь;
			Элементы.Наименование.ТолькоПросмотр = Ложь;
			Элементы.РедактироватьНаименование.Видимость = Ложь;
			АвтоматическиФормироватьНаименование = Ложь;
			АвтоматическиФормироватьНаименованиеПолное = Ложь;
			Элементы.ДекорацияНаименованиеНеПоПравилу.Видимость = Истина;
			Если РезультатПроверкиПравила.ЕстьОшибки Тогда
				Элементы.ДекорацияНаименованиеНеПоПравилу.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Правило именования, указанное в виде номенклатуры ""%1"", содержит ошибки.'"),Объект.ВидНоменклатуры);
			Иначе
				Элементы.ДекорацияНаименованиеНеПоПравилу.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Правило именования, указанное в виде номенклатуры, не подходит для набора свойств ""%1"".'"),Объект.ВидНоменклатуры.НаборСвойств);	
			КонецЕсли;
			Возврат;
		КонецЕсли;

		Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
			Элементы.Наименование.ТолькоПросмотр = Объект.ВидНоменклатуры.ЗапретитьРедактированиеНаименования;
		КонецЕсли;
		
		НаименованиеПоПравилу = СформироватьНаименование();

		Элементы.РедактироватьНаименование.Видимость = Истина;
		АвтоматическиФормироватьНаименование = Объект.ВидНоменклатуры.ЗапретитьРедактированиеНаименования ИЛИ Объект.Наименование = НаименованиеПоПравилу;
		АвтоматическиФормироватьНаименованиеПолное = (Объект.НаименованиеПолное = Объект.Наименование Или Объект.НаименованиеПолное = "");
		Если ЗначенияПараметровИменования.Количество() = 0 Тогда
			ЗаполнитьЗначенияПараметровИменования();
		КонецЕсли;
		
		СтрокиСПустымиПараметрами = ЗначенияПараметровИменования.НайтиСтроки(Новый Структура("ДанныеПараметраСтрокой",""));
		Если Объект.Наименование <> НаименованиеПоПравилу Тогда
			Элементы.ДекорацияНаименованиеНеПоПравилу.Подсказка = НСтр("ru = 'Наименование сформировано не по правилу.'");
			Элементы.ДекорацияНаименованиеНеПоПравилу.Видимость = Истина;
		ИначеЕсли СтрокиСПустымиПараметрами.Количество() > 0 Тогда
			Элементы.ДекорацияНаименованиеНеПоПравилу.Подсказка = НСтр("ru = 'Некоторые параметры именования не заполнены.'");
			Элементы.ДекорацияНаименованиеНеПоПравилу.Видимость = Истина;
		Иначе
			Элементы.ДекорацияНаименованиеНеПоПравилу.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.Наименование.ТолькоПросмотр = Ложь;
		Элементы.РедактироватьНаименование.Видимость = Ложь;
		Элементы.ДекорацияНаименованиеНеПоПравилу.Видимость = Ложь;
		АвтоматическиФормироватьНаименование = Ложь;
		АвтоматическиФормироватьНаименованиеПолное = Ложь;
	КонецЕсли;	
	
	Если Не ЕстьПравоРедактирования Тогда
		Элементы.РедактироватьНаименование.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЗначенияПараметровИменования()
	
	ЗначенияПараметровИменования.Очистить();
	
	СтруктураПараметровПравилаИменования = ПолучитьСтруктуруПараметровПравилаИменования();
	
	РезультатЗапроса = РаботаСПравиламиИменования.ПолучитьЗначенияПараметровНоменклатуры(Объект.ВидНоменклатуры,СтруктураПараметровПравилаИменования.ПараметрыПравилаИменования,Объект.Ссылка);
	ВыборкаДанных 	 = РезультатЗапроса.Выбрать();
	Если ВыборкаДанных.Количество() > 0 Тогда 
		ВыборкаДанных.Следующий(); 
		Для Каждого СтрокаПараметр из СтруктураПараметровПравилаИменования.ПараметрыПравилаИменования Цикл
			СтрокаЗначенияПараметров = ЗначенияПараметровИменования.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗначенияПараметров,СтрокаПараметр);
			СтрокаЗначенияПараметров.ДанныеПараметраСтрокой = Формат(ВыборкаДанных[СтрокаПараметр.ИмяЭлемента],"ДЛФ=Д; БЛ='Ложь'; БИ='" + СтрокаПараметр.ИмяПараметра + "'"); 
			СтрокаЗначенияПараметров.Значение = ВыборкаДанных[СтрокаПараметр.ИмяЭлемента];
		КонецЦикла;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииПараметраИменования(ИмяЭлемента,РеквизитОбъекта = Ложь)
	
	СтрокиЗначенияПараметров = ЗначенияПараметровИменования.НайтиСтроки(Новый Структура("ПутьКДанным",ИмяЭлемента));
	Если СтрокиЗначенияПараметров.Количество() > 0 Тогда 
		СтрокаЗначениеПараметра = СтрокиЗначенияПараметров[0];
		Если РеквизитОбъекта Тогда 
			СтрокаЗначениеПараметра.Значение = Объект[ИмяЭлемента];
		Иначе
			СтрокаЗначениеПараметра.Значение = ЭтаФорма[ИмяЭлемента];
		КонецЕсли;	
		СтрокаЗначениеПараметра.ДанныеПараметраСтрокой = Формат(СтрокаЗначениеПараметра.Значение,"ДЛФ=Д; БЛ='Ложь'; БИ='" + СтрокаЗначениеПараметра.ИмяПараметра + "'");
		Если АвтоматическиФормироватьНаименование Тогда
			Объект.Наименование = СформироватьНаименование();
			АвтоНаименованиеНоменклатуры();
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
