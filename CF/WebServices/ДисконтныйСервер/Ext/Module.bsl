
#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСуммуНакопления(ИдентификаторКарты, ДатаНачала, ДатаОкончания, ИдентификаторСегмента, ИдентификаторИсключаемогоДокумента)
	
	ДисконтнаяКарта = ДисконтныйСервер.ОбъектПоИдентификатору(ИдентификаторКарты, "ИнформационныеКарты", "Справочник");
	МассивКарт = МаркетинговыеАкцииСервер.ПолучитьИсториюДисконтнойКарты(ДатаОкончания, ДисконтнаяКарта, Ложь);
	
	Если ЗначениеЗаполнено(ИдентификаторИсключаемогоДокумента) Тогда
		ИсключаемыйДокумент = ДисконтныйСервер.ОбъектПоИдентификатору(ИдентификаторИсключаемогоДокумента, "ЧекККМ", "Документ");
	Иначе
		ИсключаемыйДокумент = Документы.ЧекККМ.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторСегмента) Тогда
		СегментНоменклатуры = ДисконтныйСервер.ОбъектПоИдентификатору(ИдентификаторСегмента, "СегментыНоменклатуры", "Справочник");
	Иначе
		СегментНоменклатуры = Неопределено;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("МассивКарт", МассивКарт);
	ПараметрыЗапроса.Вставить("ИсключаемыйДокумент", ИсключаемыйДокумент);
	ПараметрыЗапроса.Вставить("ДатаНачала", ДатаНачала);
	ПараметрыЗапроса.Вставить("ДатаОкончания", ДатаОкончания);
	ПараметрыЗапроса.Вставить("СегментНоменклатуры", СегментНоменклатуры);
	
	ДанныеНакоплений = СкидкиНаценкиСервер.ДанныеНакопленийПоКарте(ПараметрыЗапроса);
	
	СуммаНакопления = ДанныеНакоплений.СуммаНакопления;
	КоличествоНакопления = ДанныеНакоплений.КоличествоНакопления;
	
	СтрокаРезультатаЗапросаОНакопленияхТип = ФабрикаXDTO.Тип("http://localhost/rt2discountservice", "СтрокаРезультатаЗапросаОНакоплениях");
	РезультатЗапросаОНакопленияхТип = ФабрикаXDTO.Тип("http://localhost/rt2discountservice", "РезультатЗапросаОНакоплениях");
	
	РезультатЗапросаОНакоплениях = ФабрикаXDTO.Создать(РезультатЗапросаОНакопленияхТип);
	СтрокаРезультатаЗапросаОНакоплениях = ФабрикаXDTO.Создать(СтрокаРезультатаЗапросаОНакопленияхТип);
	СтрокаРезультатаЗапросаОНакоплениях.СуммаНакопления = СуммаНакопления;
	СтрокаРезультатаЗапросаОНакоплениях.КоличествоНакопления = КоличествоНакопления;
	РезультатЗапросаОНакоплениях.РезультатЗапроса.Добавить(СтрокаРезультатаЗапросаОНакоплениях);
	
	Возврат РезультатЗапросаОНакоплениях;
	
КонецФункции

Функция ПолучитьДанныеПоследнейПокупки(ИдентификаторКарты, ДатаРасчета, ИдентификаторСегмента, ИдентификаторИсключаемогоДокумента)
	
	ДисконтнаяКарта = ДисконтныйСервер.ОбъектПоИдентификатору(ИдентификаторКарты, "ИнформационныеКарты", "Справочник");
	МассивКарт = МаркетинговыеАкцииСервер.ПолучитьИсториюДисконтнойКарты(ДатаРасчета, ДисконтнаяКарта, Ложь);
	
	Если ЗначениеЗаполнено(ИдентификаторИсключаемогоДокумента) Тогда
		ИсключаемыйДокумент = ДисконтныйСервер.ОбъектПоИдентификатору(ИдентификаторИсключаемогоДокумента, "ЧекККМ", "Документ");
	Иначе
		ИсключаемыйДокумент = Документы.ЧекККМ.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторСегмента) Тогда
		СегментОтграничения = ДисконтныйСервер.ОбъектПоИдентификатору(ИдентификаторСегмента, "СегментыНоменклатуры", "Справочник");
	Иначе
		СегментОтграничения = Справочники.СегментыНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	ДанныеПредыдущейПокупки = СкидкиНаценкиСерверПереопределяемый.ДанныеПредыдущейПокупкиДляРасчетаСкидки(МассивКарт, ДатаРасчета, СегментОтграничения, ИсключаемыйДокумент);
	
	СтрокаРезультатаЗапросаОПоследнейПокупкеТип		 = ФабрикаXDTO.Тип("http://localhost/rt2discountservice", "СтрокаРезультатаЗапросаОПоследнейПокупке");
	РезультатЗапросаОПоследнейПокупкеТип			 = ФабрикаXDTO.Тип("http://localhost/rt2discountservice", "РезультатЗапросаОПоследнейПокупке");
	
	РезультатЗапросаОПоследнейПокупке = ФабрикаXDTO.Создать(РезультатЗапросаОПоследнейПокупкеТип);
	СтрокаРезультатаЗапросаОПоследнейПокупке = ФабрикаXDTO.Создать(СтрокаРезультатаЗапросаОПоследнейПокупкеТип);
	
	СтрокаРезультатаЗапросаОПоследнейПокупке.ДатаПокупки = ДанныеПредыдущейПокупки.Дата;
	СтрокаРезультатаЗапросаОПоследнейПокупке.СуммаНакопления = ДанныеПредыдущейПокупки.Сумма;
	СтрокаРезультатаЗапросаОПоследнейПокупке.КоличествоНакопления = ДанныеПредыдущейПокупки.Количество;
	
	РезультатЗапросаОПоследнейПокупке.РезультатЗапроса.Добавить(СтрокаРезультатаЗапросаОПоследнейПокупке);
	
	Возврат РезультатЗапросаОПоследнейПокупке;
	
КонецФункции

Функция ОбновитьДанныеОПродажах(ТипДокумента, ИдентификаторДокумента, ТаблицаТоваров)
	
	Документ = ДисконтныйСервер.ОбъектПоИдентификатору(ИдентификаторДокумента, ТипДокумента, "Документ");
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НаборЗаписей = РегистрыНакопления.ПродажиПоДисконтнымКартам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Документ, Истина);
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	
	ПредыдущийИдентификаторКарты = "";
	Карта = Справочники.ИнформационныеКарты.ПустаяСсылка();
	ВладелецКарты = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	Для Каждого СтрокаТаблицыПродаж Из ТаблицаТоваров.СтрокиТаблицы Цикл
		
		Период = СтрокаТаблицыПродаж.Период;
		Если ПредыдущийИдентификаторКарты <> СтрокаТаблицыПродаж.ИдентификаторКарты Тогда
			Карта = ДисконтныйСервер.ОбъектПоИдентификатору(СтрокаТаблицыПродаж.ИдентификаторКарты, "ИнформационныеКарты", "Справочник");
			ВладелецКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Карта, "ВладелецКарты");
		КонецЕсли;
		Номенклатура = ДисконтныйСервер.ОбъектПоИдентификатору(СтрокаТаблицыПродаж.ИдентификаторНоменклатуры, "Номенклатура", "Справочник");
		Характеристика = ДисконтныйСервер.ОбъектПоИдентификатору(СтрокаТаблицыПродаж.ИдентификаторХарактеристики, "ХарактеристикиНоменклатуры", "Справочник");
		
		Сумма = СтрокаТаблицыПродаж.Сумма;
		Количество = СтрокаТаблицыПродаж.Количество;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = Период;
		НоваяЗапись.Регистратор = Документ;
		НоваяЗапись.ДисконтнаяКарта = Карта;
		НоваяЗапись.ВладелецДисконтнойКарты = ВладелецКарты;
		НоваяЗапись.Номенклатура = Номенклатура;
		НоваяЗапись.Характеристика = Характеристика;
		НоваяЗапись.Сумма = Сумма;
		НоваяЗапись.Количество = Количество;
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьОстатокБонусов(ИдентификаторКарты, ДатаЗапроса)
	
	Запрос = Новый Запрос;
	
	ДисконтнаяКарта = ДисконтныйСервер.ОбъектПоИдентификатору(ИдентификаторКарты, "ИнформационныеКарты", "Справочник");
	КартаДляНакоплений = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "КартаДляНакоплений");
	Если ЗначениеЗаполнено(КартаДляНакоплений) Тогда
		ДисконтныеКарты = МаркетинговыеАкцииСервер.ПолучитьИсториюДисконтнойКарты(ДатаЗапроса, КартаДляНакоплений, Истина);
	Иначе
		ДисконтныеКарты = МаркетинговыеАкцииСервер.ПолучитьИсториюДисконтнойКарты(ДатаЗапроса, ДисконтнаяКарта, Истина);
	КонецЕсли;
	Запрос.УстановитьПараметр("ДисконтныеКарты", ДисконтныеКарты);
	Запрос.УстановитьПараметр("ДатаЗапроса", ДатаЗапроса);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИнформационныеКарты.Ссылка КАК ДисконтнаяКарта,
	|	ИнформационныеКарты.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности
	|ПОМЕСТИТЬ КартыИПрограммы
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	|ГДЕ
	|	ИнформационныеКарты.Ссылка В(&ДисконтныеКарты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(БонусныеБаллы.НачисленоОстаток), 0) КАК НачисленоОстаток,
	|	ЕСТЬNULL(СУММА(БонусныеБаллы.КСписаниюОстаток), 0) КАК КСписаниюОстаток
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы.Остатки(
	|			&ДатаЗапроса,
	|			(ДисконтнаяКарта, БонуснаяПрограммаЛояльности) В
	|				(ВЫБРАТЬ
	|					КартыИПрограммы.ДисконтнаяКарта,
	|					КартыИПрограммы.БонуснаяПрограммаЛояльности
	|				ИЗ
	|					КартыИПрограммы КАК КартыИПрограммы)) КАК БонусныеБаллы";
		
	Выборка = Запрос.Выполнить().Выбрать();
	ДатаОперации = 0;
	КоличествоБаллов = 0;
	Если Выборка.Следующий() Тогда
		ДатаОперации = ДатаЗапроса;
		НачисленоОстаток = ?(Выборка.НачисленоОстаток < 0, 0, Выборка.НачисленоОстаток);
		КСписаниюОстаток = ?(Выборка.КСписаниюОстаток < 0, 0, Выборка.КСписаниюОстаток);
		РазницаБаллов = НачисленоОстаток - КСписаниюОстаток;
		КоличествоБаллов = ?(РазницаБаллов < 0, 0, РазницаБаллов);
	КонецЕсли;
	СтрокаРезультатаЗапросаОБонусахТип = ФабрикаXDTO.Тип("http://localhost/rt2discountservice", "СтрокаРезультатаЗапросаОБонусах");
	РезультатЗапросаОБонусахТип = ФабрикаXDTO.Тип("http://localhost/rt2discountservice", "РезультатЗапросаОБонусах");
	
	РезультатЗапросаОБонусах = ФабрикаXDTO.Создать(РезультатЗапросаОБонусахТип);
	СтрокаРезультатаЗапросаОБонусах = ФабрикаXDTO.Создать(СтрокаРезультатаЗапросаОБонусахТип);
	СтрокаРезультатаЗапросаОБонусах.ДатаОперации = ДатаОперации;
	СтрокаРезультатаЗапросаОБонусах.КоличествоБаллов = КоличествоБаллов;
	РезультатЗапросаОБонусах.РезультатЗапроса.Добавить(СтрокаРезультатаЗапросаОБонусах);
	
	Возврат РезультатЗапросаОБонусах;
	
КонецФункции

Функция ПолучитьОстатокБонусовРасширенный(ИдентификаторКарты, ДатаЗапроса)
	
	ДисконтнаяКарта = ДисконтныйСервер.ОбъектПоИдентификатору(ИдентификаторКарты, "ИнформационныеКарты", "Справочник");
	ТаблицаБаллов = БонусныеБаллыСервер.ТаблицаОстаткиИДвиженияБонусныхБаллов(ДисконтнаяКарта, ДатаЗапроса);
	
	СтрокаРезультатаЗапросаОБонусахТип		 = ФабрикаXDTO.Тип("http://localhost/rt2discountservice", "СтрокаРезультатаЗапросаОБонусахРасширенного");
	РезультатЗапросаОБонусахТип			 = ФабрикаXDTO.Тип("http://localhost/rt2discountservice", "РезультатЗапросаОБонусахРасширенный");
	РезультатЗапросаОБонусах = ФабрикаXDTO.Создать(РезультатЗапросаОБонусахТип);
	
	Для Каждого СтрокаБаллов Из ТаблицаБаллов Цикл
		СтрокаРезультатаЗапросаОБонусах = ФабрикаXDTO.Создать(СтрокаРезультатаЗапросаОБонусахТип);
		СтрокаРезультатаЗапросаОБонусах.ПредставлениеПериода = СтрокаБаллов.Период;
		СтрокаРезультатаЗапросаОБонусах.КоличествоБаллов = СтрокаБаллов.Сумма;
		СтрокаРезультатаЗапросаОБонусах.Изменение = СтрокаБаллов.Изменение;
		СтрокаРезультатаЗапросаОБонусах.ТекущийОстаток = СтрокаБаллов.ТекущийОстаток;
		РезультатЗапросаОБонусах.РезультатЗапроса.Добавить(СтрокаРезультатаЗапросаОБонусах);
	КонецЦикла;
	
	Возврат РезультатЗапросаОБонусах;
	
КонецФункции

Функция ОбновитьДанныеОБонусах(ТипДокумента, ИдентификаторДокумента, ТаблицаБонусов)
	
	Документ = ДисконтныйСервер.ОбъектПоИдентификатору(ИдентификаторДокумента, ТипДокумента, "Документ");
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	НаборЗаписей = РегистрыНакопления.БонусныеБаллы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Документ, Истина);
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
	
	Для Каждого СтрокаТаблицы Из ТаблицаБонусов.СтрокиТаблицы Цикл
		
		Карта = ДисконтныйСервер.ОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторКарты, "ИнформационныеКарты", "Справочник");
		БонуснаяПрограмма = ДисконтныйСервер.ОбъектПоИдентификатору(СтрокаТаблицы.ИдентификаторБонуснойПрограммы, "БонусныеПрограммыЛояльности", "Справочник");
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = СтрокаТаблицы.Период;
		НоваяЗапись.Регистратор = Документ;
		НоваяЗапись.ДисконтнаяКарта = Карта;
		НоваяЗапись.БонуснаяПрограммаЛояльности = БонуснаяПрограмма;
		НоваяЗапись.ВидДвижения = ?(СтрокаТаблицы.ВидДвижения = 0, ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход);
		НоваяЗапись.Начислено = СтрокаТаблицы.Начислено;
		НоваяЗапись.КСписанию = СтрокаТаблицы.КСписанию;
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
	Возврат Истина;
	
КонецФункции

Функция ОбновитьДанныеОКупонах(ТипДокумента, ИдентификаторДокумента, ТаблицаКупонов)
	
	Документ = ДисконтныйСервер.ОбъектПоИдентификатору(ИдентификаторДокумента, ТипДокумента, "Документ");
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыПродаж Из ТаблицаКупонов.СтрокиТаблицы Цикл
		
		Период = ?(ЗначениеЗаполнено(СтрокаТаблицыПродаж.Период), СтрокаТаблицыПродаж.Период, ТекущаяДатаСеанса());
		Скидка = ДисконтныйСервер.ОбъектПоИдентификатору(СтрокаТаблицыПродаж.ИдентификаторСкидки, "СкидкиНаценки", "Справочник");
		КодКупона = СтрокаТаблицыПродаж.КодКупона;
		Состояние = СтрокаТаблицыПродаж.Состояние;
		Магазин = ДисконтныйСервер.ОбъектПоИдентификатору(СтрокаТаблицыПродаж.ИдентификаторМагазина, "Магазины", "Справочник");
		ПериодДействия = СтрокаТаблицыПродаж.ПериодДействия;
		
		Если ЗначениеЗаполнено(Скидка) И ЗначениеЗаполнено(КодКупона) Тогда
			НаборЗаписей = РегистрыСведений.СостоянияОднократныхСкидокИКупонов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Скидка.Установить(Скидка, Истина);
			НаборЗаписей.Отбор.ИдентификаторСкидки.Установить(КодКупона, Истина);
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Период = Период;
			НоваяЗапись.Скидка = Скидка;
			НоваяЗапись.ИдентификаторСкидки = КодКупона;
			Если ЗначениеЗаполнено(Состояние) Тогда
				НоваяЗапись.Состояние = Перечисления.СостоянияОднократныхСкидок[Состояние];
			КонецЕсли;
			НоваяЗапись.ДокументДвижения = Документ;
			НоваяЗапись.ПериодДействия = ПериодДействия;
			НоваяЗапись.Магазин = Магазин;
			
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСкидкиПоКупону(КодКупона, ДатаЗапроса)
	
	СтрокаТаблицыКупоновТип = ФабрикаXDTO.Тип("http://localhost/rt2discountservice", "СтрокаТаблицыКупонов");
	ТаблицаКупоновТип = ФабрикаXDTO.Тип("http://localhost/rt2discountservice", "ТаблицаКупонов");
	ТаблицаКупонов = ФабрикаXDTO.Создать(ТаблицаКупоновТип);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СостоянияОднократныхСкидокИКупонов.Период КАК Период,
	|	СостоянияОднократныхСкидокИКупонов.Скидка КАК Скидка,
	|	СостоянияОднократныхСкидокИКупонов.Состояние КАК Состояние,
	|	СостоянияОднократныхСкидокИКупонов.Магазин КАК Магазин,
	|	СостоянияОднократныхСкидокИКупонов.ПериодДействия КАК ПериодДействия
	|ИЗ
	|	РегистрСведений.СостоянияОднократныхСкидокИКупонов.СрезПоследних(&Период, ИдентификаторСкидки = &ИдентификаторСкидки) КАК СостоянияОднократныхСкидокИКупонов
	|ГДЕ
	|	СостоянияОднократныхСкидокИКупонов.Скидка.СтатусДействия = &Действует
	|	И СостоянияОднократныхСкидокИКупонов.Состояние = &Активна
	|	И (СостоянияОднократныхСкидокИКупонов.ПериодДействия = &ПустаяДата
	|			ИЛИ СостоянияОднократныхСкидокИКупонов.ПериодДействия >= &Период)";
	Запрос.УстановитьПараметр("Период", ДатаЗапроса);
	Запрос.УстановитьПараметр("Действует", Перечисления.СтатусыДействияСкидок.Действует);
	Запрос.УстановитьПараметр("Активна", Перечисления.СостоянияОднократныхСкидок.Активна);
	Запрос.УстановитьПараметр("ИдентификаторСкидки", КодКупона);
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101000000"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицыКупонов = ФабрикаXDTO.Создать(СтрокаТаблицыКупоновТип);
		СтрокаТаблицыКупонов.Период = Выборка.Период;
		СтрокаТаблицыКупонов.ИдентификаторСкидки = Строка(Выборка.Скидка.УникальныйИдентификатор());
		СтрокаТаблицыКупонов.Состояние = Строка(Выборка.Состояние);
		СтрокаТаблицыКупонов.КодКупона = КодКупона;
		СтрокаТаблицыКупонов.ИдентификаторМагазина = Строка(Выборка.Магазин.УникальныйИдентификатор());
		СтрокаТаблицыКупонов.ПериодДействия = Выборка.ПериодДействия;
		
		ТаблицаКупонов.СтрокиТаблицы.Добавить(СтрокаТаблицыКупонов);
	КонецЦикла;
	
	Возврат ТаблицаКупонов;
	
КонецФункции

#КонецОбласти
