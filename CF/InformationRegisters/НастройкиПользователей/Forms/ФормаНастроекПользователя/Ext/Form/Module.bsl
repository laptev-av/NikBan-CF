
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОповещениеВопросПередЗакрытием(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВопросОЗакрытииУжеЗадан = Истина;
		
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаписатьНастройки(Пользователь, Магазин);
		Закрыть();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Закрыть();
	КонецЕсли;
	
	ВопросОЗакрытииУжеЗадан = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросПриИзмененииМагазина(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	МагазинПриИзмененииСервер(РезультатВопроса = КодВозвратаДиалога.Да);
	РазвернутьДерево(ДеревоНастроек, Элементы.ДеревоНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросПриИзмененииПользователя(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПользовательПриИзмененииСервер(РезультатВопроса = КодВозвратаДиалога.Да);
	РазвернутьДерево(ДеревоНастроек, Элементы.ДеревоНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораЗначения(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		ТекущаяСтрока = ДеревоНастроек.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
		
		Если НЕ ТекущаяСтрока = Неопределено Тогда
		
			ТекущаяСтрока.Значение = РезультатОткрытияФормы;
			Модифицированность     = Истина;
			
			Если ДополнительныеПараметры.Свойство("УстановитьОрганизациюКассы") Тогда
				ОрганизацияКассы = ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(РезультатОткрытияФормы, "Владелец");
			КонецЕсли;
			
			Если ДополнительныеПараметры.Свойство("УстановитьОрганизацию") Тогда
				Организация = РезультатОткрытияФормы;
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Пользователь) Тогда
		
		Пользователь = Параметры.Пользователь;
		ПредыдущийПользователь = Пользователь;
		Элементы.Пользователь.Видимость = Ложь;
		
		ЗаполнитьСписокМагазинов();
		
		Если СписокМагазинов.Количество() = 0 Тогда
		
			ТекстОшибки = НСтр("ru = 'Нет разрешенных магазинов для редактирования настроек.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				,
				,
				Отказ
			);
			
		Иначе
			Элементы.Магазин.СписокВыбора.ЗагрузитьЗначения(СписокМагазинов.ВыгрузитьЗначения());
			
			ЗаполнитьНастройки();
		КонецЕсли;
	
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Не определен пользователь для редактирования настроек.'");
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьДерево(ДеревоНастроек, Элементы.ДеревоНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И НЕ ВопросОЗакрытииУжеЗадан Тогда
		
		Если ЗавершениеРаботы Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru = 'Записать измененные настройки пользователя %Пользователь%?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Пользователь%", Пользователь);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросПередЗакрытием", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Да);
		
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДеревоНастроекЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ДеревоНастроек.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторТекущейСтроки", ТекущаяСтрока.ПолучитьИдентификатор());
		
		Если ТекущаяСтрока.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.НастройкиПользователей.ОсновнаяКасса") Тогда
			
			СтандартнаяОбработка = Ложь;
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Магазин", Магазин);
			Если ЗначениеЗаполнено(Организация) Тогда
				СтруктураОтбора.Вставить("Владелец", Организация);
			КонецЕсли;
			Если ЗначениеЗаполнено(ОрганизацияКассы) Тогда
				СтруктураОтбора.Вставить("Владелец", ОрганизацияКассы);
			КонецЕсли;
			ДополнительныеПараметры.Вставить("УстановитьОрганизациюКассы");
			
			ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбора);
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораЗначения", ЭтотОбъект, ДополнительныеПараметры);
			Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ОткрытьФорму("Справочник.Кассы.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, ОбработчикОповещения, Режим);
			
		ИначеЕсли ТекущаяСтрока.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.НастройкиПользователей.ОсновнаяКассаККМ") Тогда	
			
			СтандартнаяОбработка = Ложь;
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Магазин", Магазин);
			Если ЗначениеЗаполнено(Организация) Тогда
				СтруктураОтбора.Вставить("Владелец", Организация);
			КонецЕсли;
			Если ЗначениеЗаполнено(ОрганизацияКассы) Тогда
				СтруктураОтбора.Вставить("Владелец", ОрганизацияКассы);
			КонецЕсли;
				
			ДополнительныеПараметры.Вставить("УстановитьОрганизациюКассы");
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораЗначения", ЭтотОбъект, ДополнительныеПараметры);
			Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбора);
			ОткрытьФорму("Справочник.КассыККМ.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, ОбработчикОповещения, Режим);
			
		ИначеЕсли ТекущаяСтрока.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.НастройкиПользователей.ОсновнойСкладПоступления")
			ИЛИ ТекущаяСтрока.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.НастройкиПользователей.ОсновнойСкладПродажи") Тогда
			
			СтандартнаяОбработка = Ложь;
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Магазин", Магазин);
			Если ТекущаяСтрока.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.НастройкиПользователей.ОсновнойСкладПродажи") Тогда
				СтруктураОтбора.Вставить("ТипСклада", ПредопределенноеЗначение("Перечисление.ТипыСкладов.ТорговыйЗал"));
			КонецЕсли;
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораЗначения", ЭтотОбъект, ДополнительныеПараметры);
			Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбора);
			ПараметрыФормы.Вставить("ЗапретитьИзменениеМагазина", Истина);
			ОткрытьФорму("Справочник.Склады.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, ОбработчикОповещения, Режим);
			
		ИначеЕсли ТекущаяСтрока.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация") Тогда	
			
			СтандартнаяОбработка = Ложь;
			СтруктураОтбора = Новый Структура;
			Если ЗначениеЗаполнено(ОрганизацияКассы) Тогда
				СтруктураОтбора.Вставить("Ссылка", ОрганизацияКассы);
			КонецЕсли;
			
			ДополнительныеПараметры.Вставить("УстановитьОрганизацию");
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораЗначения", ЭтотОбъект, ДополнительныеПараметры);
			Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбора);
			ОткрытьФорму("Справочник.Организации.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, ОбработчикОповещения, Режим);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПриИзменении(Элемент)
	
	Если Не Модифицированность Тогда
		
		Модифицированность = Истина;
		
	КонецЕсли;

	ИзменитьОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Магазин) 
		И ЗначениеЗаполнено(ПредыдущийМагазин) Тогда
		
		Магазин = ПредыдущийМагазин;
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Записать измененные настройки по магазину %Магазин%?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Магазин%", ПредыдущийМагазин);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросПриИзмененииМагазина", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		МагазинПриИзмененииСервер();
		РазвернутьДерево(ДеревоНастроек, Элементы.ДеревоНастроек);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	
	Если НЕ ЗначениеЗаполнено(Пользователь) 
		И ЗначениеЗаполнено(ПредыдущийПользователь) Тогда
		
		Пользователь = ПредыдущийПользователь;
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Записать измененные настройки пользователя %Пользователь%?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Пользователь%", ПредыдущийПользователь);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросПриИзмененииПользователя", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПользовательПриИзмененииСервер();
		РазвернутьДерево(ДеревоНастроек, Элементы.ДеревоНастроек);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьСервер();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура формирует таблицу для записи в РС "Настройки пользователей", 
// записывает настройки
&НаСервере
Процедура ЗаписатьНастройки(ПользовательНастроек, МагазинНастроек)
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаНастроек.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.Магазины"));
	ТаблицаНастроек.Колонки.Добавить("Настройка", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.НастройкиПользователей"));
	ТаблицаНастроек.Колонки.Добавить("Значение");
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоНастроек", Тип("ДеревоЗначений"));
	
	Для каждого СтрокаДереваЗначений Из ДеревоЗначений.Строки Цикл
		
		Если СтрокаДереваЗначений.ЭтоГруппа Тогда
			
			Для каждого ПодСтрокаДерева Из СтрокаДереваЗначений.Строки Цикл
				
				СтрокаНастроек = ТаблицаНастроек.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНастроек, ПодСтрокаДерева);
				
			КонецЦикла;
				
		Иначе
			
			СтрокаНастроек = ТаблицаНастроек.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНастроек, СтрокаДереваЗначений);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаНастроек.ЗаполнитьЗначения(ПользовательНастроек, "Пользователь");
	ТаблицаНастроек.ЗаполнитьЗначения(МагазинНастроек, "Магазин");
	
	РегистрыСведений.НастройкиПользователей.ЗаписатьНастройкиПользователя(ТаблицаНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСервер()
	
	Если ПроверитьЗаполнение() Тогда
		
		ЗаписатьНастройки(Пользователь, Магазин);
		
		Если Модифицированность Тогда
			
			Модифицированность = Ложь;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Считывает настройки из РС "Настройки пользователей"
// с отбором по Пользователь и Магазин.
&НаСервере
Процедура ЗаполнитьНастройки()
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Настройки пользователя %1'");
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, Пользователь);
		ОсновнойМагазин = Пользователь.Магазин;
		
		Если ЗначениеЗаполнено(Магазин) Тогда
			
			Организация = Справочники.Организации.ПустаяСсылка();
			ОрганизацияКассы = Организация;
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Настройки.Родитель,
			|	Настройки.Ссылка,
			|	Настройки.ЭтоГруппа,
			|	ЗначениеНастроек.Значение
			|ИЗ
			|	ПланВидовХарактеристик.НастройкиПользователей КАК Настройки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК ЗначениеНастроек
			|		ПО (ЗначениеНастроек.Настройка = Настройки.Ссылка)
			|			И (ЗначениеНастроек.Пользователь = &Пользователь)
			|			И (ЗначениеНастроек.Магазин = &Магазин)
			|ГДЕ
			|	Настройки.Предопределенный
			|
			|УПОРЯДОЧИТЬ ПО
			|	Настройки.ЭтоГруппа ИЕРАРХИЯ,
			|	Настройки.Наименование");
			Запрос.УстановитьПараметр("Пользователь", Пользователь);
			Запрос.УстановитьПараметр("Магазин", Магазин);
			Выборка = Запрос.Выполнить().Выбрать();
			
			ДеревоЗначений = РеквизитФормыВЗначение("ДеревоНастроек", Тип("ДеревоЗначений"));
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Родитель.Пустая() Тогда
					
					СтрокаГруппы = ДеревоЗначений;
					
				Иначе
					
					СтрокаГруппы = ДеревоЗначений.Строки.Найти(Выборка.Родитель, "Настройка", Истина);
					
					Если СтрокаГруппы = Неопределено Тогда
						
						СтрокаГруппы = ДеревоЗначений.Строки.Добавить();
						
					КонецЕсли;
					
					СтрокаГруппы.Настройка = Выборка.Родитель;
					СтрокаГруппы.ЭтоГруппа = Истина;
					
				КонецЕсли;
				
				СтрокаНастройки = СтрокаГруппы.Строки.Найти(Выборка.Ссылка, "Настройка", Истина);
				
				Если СтрокаНастройки = Неопределено Тогда
					
					СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
					
				КонецЕсли;
				
				СтрокаНастройки.Настройка = Выборка.Ссылка;
				СтрокаНастройки.Значение = Выборка.Ссылка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
				СтрокаНастройки.ЭтоГруппа = Ложь;
				
				Если СтрокаНастройки.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация Тогда
					
					Организация = СтрокаНастройки.Значение;
					
				ИначеЕсли СтрокаНастройки.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяКасса 
					ИЛИ СтрокаНастройки.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяКассаККМ 
					И ЗначениеЗаполнено(СтрокаНастройки.Значение) Тогда
					
					ОрганизацияКассы = СтрокаНастройки.Значение;
					
				КонецЕсли;
				
			КонецЦикла;
			
			
			ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоНастроек");
			
		КонецЕсли;
		
	Иначе
		
		Заголовок = НСтр("ru = 'Выберите пользователя'");
		ОсновнойМагазин = Справочники.Магазины.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список магазинов по пользователю.
//
&НаСервере
Процедура ЗаполнитьСписокМагазинов()
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		
		ТаблицаДоступныхМагазинов = Обработки.ИзменениеТекущегоМагазина.ДоступныеМагазины(Истина, Пользователь);
		
		Если НЕ ЗначениеЗаполнено(ТаблицаДоступныхМагазинов) Тогда
		
			Возврат;
		
		КонецЕсли;
		
		СписокМагазинов.ЗагрузитьЗначения(ТаблицаДоступныхМагазинов.ВыгрузитьКолонку("Магазин"));
		
	КонецЕсли;
	
	Если СписокМагазинов.Количество() > 0 Тогда
		
		Магазин = СписокМагазинов[0].Значение;
		
		
	Иначе
		
		Магазин = Справочники.Магазины.ПустаяСсылка();
		ДеревоНастроек.ПолучитьЭлементы().Очистить();
		
	КонецЕсли;
		
	ПредыдущийМагазин = Магазин;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОрганизации()
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоНастроек", Тип("ДеревоЗначений"));
	
	СтрокаПоиска = ДеревоЗначений.Строки.Найти(ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация, "Настройка", Истина);
	Если СтрокаПоиска <> Неопределено Тогда 
		Организация = СтрокаПоиска.Значение;
	КонецЕсли;
	
	ОрганизацияКассы = Справочники.Организации.ПустаяСсылка();
	
	СтрокаПоиска = ДеревоЗначений.Строки.Найти(ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяКасса, "Настройка", Истина);
	Если СтрокаПоиска <> Неопределено 
		И ЗначениеЗаполнено(СтрокаПоиска.Значение) Тогда 
		
		ОрганизацияКассы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПоиска.Значение, "Владелец"); 
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияКассы) Тогда
		
		СтрокаПоиска = ДеревоЗначений.Строки.Найти(ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяКассаККМ, "Настройка", Истина);
		Если СтрокаПоиска <> Неопределено 
			И ЗначениеЗаполнено(СтрокаПоиска.Значение) Тогда 
			
			ОрганизацияКассы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПоиска.Значение, "Владелец"); 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Разворачивает дерево настроек на клиенте по всем уровням.
//
&НаКлиенте
Процедура РазвернутьДерево(СтрокаДерева, Элемент)
	
	ЭлементыСтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
	Для каждого ЭлементСтрокиДерева Из ЭлементыСтрокиДерева Цикл
		
		Элемент.Развернуть(ЭлементСтрокиДерева.ПолучитьИдентификатор());
		РазвернутьДерево(ЭлементСтрокиДерева, Элемент);
		
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура МагазинПриИзмененииСервер(ЗаписатьНастройки = Ложь)
	
	Если ЗаписатьНастройки Тогда
		
		ЗаписатьНастройки(Пользователь, ПредыдущийМагазин);
		Модифицированность = Ложь;
		
	КонецЕсли;
	
	ПредыдущийМагазин = Магазин;
		
	Если ЗначениеЗаполнено(Пользователь) Тогда
		
		ЗаполнитьНастройки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПользовательПриИзмененииСервер(ЗаписатьНастройки = Ложь)
	
	Если ЗаписатьНастройки Тогда
		
		ЗаписатьНастройки(ПредыдущийПользователь, Магазин);
		Модифицированность = Ложь;
		
	КонецЕсли;
	
	ПредыдущийПользователь = Пользователь;
	ЗаполнитьСписокМагазинов();
	
	Элементы.Магазин.СписокВыбора.ЗагрузитьЗначения(СписокМагазинов.ВыгрузитьЗначения());
	
	Если ЗначениеЗаполнено(Магазин) Тогда
		
		ЗаполнитьНастройки();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти