
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		
	Иначе
		
		ОбщегоНазначенияРТКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Номенклатура", СтрокаРезультата.Номенклатура);
		
		Если СтрокаРезультата.Свойство("Характеристика")
			И ЗначениеЗаполнено(СтрокаРезультата.Характеристика) Тогда
			ОбщегоНазначенияРТКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Характеристика", СтрокаРезультата.Характеристика);
		Иначе
			ОбщегоНазначенияРТКлиентСервер.УдалитьЭлементОтбораСписка(Список, "Характеристика");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Отбор.Количество() = 0 Тогда
		Элементы.ГруппаФильтры.Видимость = Ложь;
		Элементы.Список.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		Элементы.ГруппаПоставляемаяНоменклатура.Отображение = ОтображениеОбычнойГруппы.Нет;
		Элементы.ГруппаПоставляемаяНоменклатура.ОтображатьЗаголовок = Ложь;
	КонецЕсли;

	Если Параметры.Отбор.Свойство("Поставщик") Тогда
		Поставщик = Параметры.Отбор.Поставщик;
		Элементы.ОтборПоставщик.Видимость 	= Ложь;
		Элементы.Поставщик.Видимость 		= Ложь;
		Параметры.Отбор.Очистить();
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Магазин") Тогда
		Магазин = Параметры.Отбор.Магазин;
		Элементы.ОтборМагазин.Видимость = Ложь;
		Элементы.Магазин.Видимость 		= Ложь;
		Параметры.Отбор.Очистить();
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Номенклатура") Тогда
		Элементы.Номенклатура.Видимость = Ложь;
	КонецЕсли;
	
	ПериодОбновления = Константы.ПериодОбновленияПоставляемойНоменклатуры.Получить();
	
	ПризнакАктуальностиПоставляемойНоменклатуры = Константы.ПризнакАктуальностиПоставляемойНоменклатуры.Получить();
	ОбновитьСписокПоставщиковНаСервере();
	ОбновитьИнфоСтроку();
	
	Если НЕ Пользователи.РолиДоступны("ПолныеПрава, РаботаСПоставляемойНоменклатурой") Тогда
		Элементы.ГруппаФильтры.ТолькоПросмотр = Истина;
		Элементы.Список.ТолькоПросмотр = Истина;
		Элементы.ОбновитьНоменклатуруПоставщиков.Доступность = Ложь;
		Элементы.УстановитьФлажки.Доступность = Ложь;
		Элементы.СнятьФлажки.Доступность = Ложь;
	КонецЕсли;
	
	УстановитьОтборДинамическогоСписка("Магазин");
	УстановитьОтборДинамическогоСписка("Поставщик");
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "РегистрСведений.НоменклатураПоставщиков.Форма.ФормаСписка.Открытие");
             
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	ВыделитьПоставщика();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	МагазинНастроек		= Настройки.Получить("Магазин");
	КонтрагентНастроек	= Настройки.Получить("Поставщик");
	Если НЕ ЗначениеЗаполнено(Магазин) И ЗначениеЗаполнено(МагазинНастроек) Тогда
		Магазин = МагазинНастроек;
	Иначе
		Настройки.Удалить("Магазин");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Поставщик) И ЗначениеЗаполнено(КонтрагентНастроек) Тогда
		Поставщик = КонтрагентНастроек;
	Иначе
		Настройки.Удалить("Поставщик");
	КонецЕсли;
	УстановитьОтборДинамическогоСписка("Магазин");
	УстановитьОтборДинамическогоСписка("Поставщик");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеСтатистикиПоНоменклатуреПоставщиков" Тогда
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборМагазинПриИзменении(Элемент)
	
	УстановитьОтборДинамическогоСписка("Магазин");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)
	
	УстановитьОтборДинамическогоСписка("Поставщик");
	
	ВыделитьПоставщика();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПоставщиков

&НаКлиенте
Процедура СписокПоставщиковПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокПоставщиков.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ЗаписатьИзмененияВРегистрПоставщикиНоменклатуры(ТекущиеДанные.ЯвляетсяПоставщиком, ТекущиеДанные.Поставщик);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПоставщиковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЭлементДерева = СписокПоставщиков.НайтиПоИдентификатору(ВыбраннаяСтрока);
	СсылкаНаПоставщика = ЭлементДерева.Поставщик;
	
	Если ТипЗнч(СсылкаНаПоставщика) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаПоставщика) = Тип("СправочникСсылка.Магазины") Тогда
		ЭтоГруппа = Ложь;
	Иначе
		ЭтоГруппа = ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(СсылкаНаПоставщика, "ЭтоГруппа");
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		ПоказатьЗначение(,СсылкаНаПоставщика);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтбор(Команда)
	
	ОбщегоНазначенияРТКлиентСервер.УдалитьЭлементОтбораСписка(Список, "Номенклатура");
	ОбщегоНазначенияРТКлиентСервер.УдалитьЭлементОтбораСписка(Список, "Характеристика");
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ВыделенныеСтроки = Элементы.СписокПоставщиков.ВыделенныеСтроки;
	ПроставитьФлажки(ВыделенныеСтроки, Истина);
	ЗаписатьИзмененияВРегистрПоставщикиНоменклатуры(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ВыделенныеСтроки = Элементы.СписокПоставщиков.ВыделенныеСтроки;
	ПроставитьФлажки(ВыделенныеСтроки, Ложь);
	ЗаписатьИзмененияВРегистрПоставщикиНоменклатуры(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПоставщиков(Команда)
	ОбновитьСписокПоставщиковНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПериодОбновленияПриИзменении(Элемент)
	
	ПериодОбновленияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНоменклатуруПоставщиков(Команда)
	ОбновитьНоменклатуруПоставщиковНаСервере();
	Элементы.Список.Обновить();
	
	ПоказатьОповещениеПользователя(
		,,НСтр("ru = 'Регистр поставляемой номенклатуры успешно обновлен.'"),БиблиотекаКартинок.Успешно32
	);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьНоменклатуруПоставщиковНаСервере()
	ЗапасыСервер.ОбновлениеНоменклатурыПоставщиков();
	ПризнакАктуальностиПоставляемойНоменклатуры = Истина;
	ОбновитьИнфоСтроку();
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическогоСписка(ИмяРеквизита)

	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		Список,
		ИмяРеквизита,
		ЭтотОбъект[ИмяРеквизита],
		ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]));

КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокПоставщиковНаСервере()
	
	СКД = РегистрыСведений.НоменклатураПоставщиков.ПолучитьМакет("ПоставщикиНоменклатуры");
	
	ДеревоЗначенийРезультат = Новый ДеревоЗначений();
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных();
	Макет = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СКД, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ВыводВКоллекциюЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ВыводВКоллекциюЗначений.УстановитьОбъект(ДеревоЗначенийРезультат);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновкиДанных.Инициализировать(Макет,,, Истина);
	ВыводВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
	
	ДеревоЗначенийРезультат.Колонки.ПользовательскиеПоляПоле1.Имя = "ИндексКартинки";
	
	ДеревоФормы = РеквизитФормыВЗначение("СписокПоставщиков");
	ДеревоФормы.Строки.Очистить();
	ПолучитьСтрокиДерева(ДеревоФормы, ДеревоЗначенийРезультат);
	ЗначениеВРеквизитФормы(ДеревоФормы, "СписокПоставщиков");
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиДерева(ДеревоФормы, ДеревоЗначенийРезультат, СтрокаДереваРезультатВходящая = Неопределено, СтрокаДереваФормыВходящая = Неопределено)

	Если СтрокаДереваРезультатВходящая = Неопределено Тогда
		Для Каждого СтрокаДереваРезультат Из ДеревоЗначенийРезультат.Строки Цикл
			ПолучитьСтрокиДерева(ДеревоФормы, ДеревоЗначенийРезультат, СтрокаДереваРезультат);
		КонецЦикла;
	Иначе
		Если СтрокаДереваРезультатВходящая.Родитель = Неопределено Тогда
			СтрокаДереваФормы = ДеревоФормы.Строки.Добавить();
		Иначе
			СтрокаДереваФормы = СтрокаДереваФормыВходящая.Строки.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаДереваФормы, СтрокаДереваРезультатВходящая);
		
		Если СтрокаДереваФормы.Поставщик = Неопределено Тогда
			СтрокаДереваФормы.Поставщик = СтрокаДереваРезультатВходящая.ТипПоставщика;
			СтрокаДереваФормы.ИндексКартинки = "2";
		КонецЕсли;
		
		Если СтрокаДереваРезультатВходящая.Строки.Количество() > 0 Тогда
			Для Каждого СтрокаДереваРезультат Из СтрокаДереваРезультатВходящая.Строки Цикл
				ПолучитьСтрокиДерева(ДеревоФормы, ДеревоЗначенийРезультат, СтрокаДереваРезультат, СтрокаДереваФормы)
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияВРегистрПоставщикиНоменклатуры(ЯвляетсяПоставщиком, ВыделенныйПоставщик = Неопределено)
	
	Если ВыделенныйПоставщик = Неопределено Тогда
		
		Для Каждого ПоставщикИзСписка Из СписокПоставщиковКИзменению Цикл
			
			МенеджерЗаписи = РегистрыСведений.ПоставщикиНоменклатуры.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.Поставщик = ПоставщикИзСписка.Значение;
			Если ЯвляетсяПоставщиком Тогда
				МенеджерЗаписи.Записать(Истина);
			Иначе
				МенеджерЗаписи.Удалить();
			КонецЕсли;
			
		КонецЦикла;
		СписокПоставщиковКИзменению.Очистить();
	Иначе
		
		МенеджерЗаписи = РегистрыСведений.ПоставщикиНоменклатуры.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.Поставщик = ВыделенныйПоставщик;
		Если ЯвляетсяПоставщиком Тогда
			МенеджерЗаписи.Записать(Истина);
		Иначе
			МенеджерЗаписи.Удалить();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Константы.ПризнакАктуальностиПоставляемойНоменклатуры.Получить() Тогда
		УстановитьПривилегированныйРежим(Истина);
		Константы.ПризнакАктуальностиПоставляемойНоменклатуры.Установить(Ложь);
	КонецЕсли;
	
	ПризнакАктуальностиПоставляемойНоменклатуры = Ложь;
	
	ОбновитьИнфоСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьФлажки(ВыделенныеСтроки, ЗначениеФлажка)
	
	Для Каждого ЭлементВыделеннаяСтрока Из ВыделенныеСтроки Цикл
	
		СтрокаДерева = СписокПоставщиков.НайтиПоИдентификатору(ЭлементВыделеннаяСтрока);
		
		Если СтрокаДерева.ИндексКартинки >= 3 Тогда
			СтрокаДерева.ЯвляетсяПоставщиком = ЗначениеФлажка;
			СписокПоставщиковКИзменению.Добавить(СтрокаДерева.Поставщик);
		Иначе
			Строки = СтрокаДерева.ПолучитьЭлементы();
			ПроставитьФлажкиРекурсивно(Строки, ЗначениеФлажка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьФлажкиРекурсивно(Строки, ЗначениеФлажка)
	
	Для Каждого СтрокаДерева Из Строки Цикл
		
		Если СтрокаДерева.ИндексКартинки >= 3 Тогда
			СтрокаДерева.ЯвляетсяПоставщиком = ЗначениеФлажка;
			СписокПоставщиковКИзменению.Добавить(СтрокаДерева.Поставщик);
		Иначе
			Строки = СтрокаДерева.ПолучитьЭлементы();
			ПроставитьФлажкиРекурсивно(Строки, ЗначениеФлажка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПериодОбновленияПриИзмененииНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.ПериодОбновленияПоставляемойНоменклатуры.Установить(ПериодОбновления);
	Если ПризнакАктуальностиПоставляемойНоменклатуры Тогда
		Константы.ПризнакАктуальностиПоставляемойНоменклатуры.Установить(Ложь);
		ПризнакАктуальностиПоставляемойНоменклатуры = Ложь;
	КонецЕсли;
	
	ОбновитьИнфоСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьПоставщика()
	
	Если ЗначениеЗаполнено(Поставщик) Тогда
		ИдентификаторСтроки = 0;
		
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
			"Поставщик",
			ИдентификаторСтроки,
			СписокПоставщиков.ПолучитьЭлементы(),
			Поставщик,
			Ложь
		);
		
		Элементы.СписокПоставщиков.ТекущаяСтрока = ИдентификаторСтроки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнфоСтроку()
	
	Если ПризнакАктуальностиПоставляемойНоменклатуры Тогда
		
		ИнфоСтрока = "";
		Элементы.ОбновитьНоменклатуруПоставщиков.КнопкаПоУмолчанию = Ложь;
		Элементы.ИнфоСтрока.Видимость = Ложь;
	Иначе
		
		ИнфоСтрока = НСтр("ru = 'Изменены параметры обновления. Необходимо обновить записи регистра.'");
		Элементы.ОбновитьНоменклатуруПоставщиков.КнопкаПоУмолчанию = Истина;
		Элементы.ИнфоСтрока.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
