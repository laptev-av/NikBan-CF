
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОповещениеВопросПриЗаписиГрафикаРаботы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаписатьГрафикРаботыВРегистрСервер(ПредыдущееНачалоНедели);
		ЗаполнитьГрафикРаботПоСотрудникам();
		Модифицированность = Ложь;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьГрафикРаботПоСотрудникам();
		Модифицированность = Ложь;
	Иначе // Отмена
		ОтказатьсяОтГрафикаРаботПоСотрудникам();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Отбор.Свойство("Магазин") Тогда
		
		ОтборМагазин = Параметры.Отбор.Магазин;
		Элементы.ОтборМагазин.Доступность = Ложь;
		
	КонецЕсли;
	ТекущаяДата = ТекущаяДатаСеанса();
	НачалоНедели = ТекущаяДата - (ДеньНедели(ТекущаяДата)-1)*86400;
	ЗаполнитьГрафикРаботПоСотрудникам();
	
	Для каждого ПодчиненныйЭлемент Из Элементы Цикл
		
		Если СтрНайти(ПодчиненныйЭлемент.Имя,"Добавлен") > 0 
			И ТипЗнч(ПодчиненныйЭлемент) = Тип("ПолеФормы")
			Тогда
			ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			ЭлементУсловногоОформления.Использование = Истина;
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  Новый Цвет(255, 0, 0));
			
			ПозицияСимвола 	= СтрДлина(ПодчиненныйЭлемент.Имя) - СтрНайти(ПодчиненныйЭлемент.Имя,"Добавлен");
			ДеньНедели 		= Лев(ПодчиненныйЭлемент.Имя, СтрДлина(ПодчиненныйЭлемент.Имя) - ПозицияСимвола - 1);
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));			
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ТаблицаРегистра." + ДеньНедели + "Выходной");
		    ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		    ЭлементОтбора.ПравоеЗначение 	= 0;
			ЭлементОтбора.Использование 	= Истина;
			
			ОформляемоеПоле 		= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		    ОформляемоеПоле.Поле 	= Новый ПолеКомпоновкиДанных(ПодчиненныйЭлемент.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Перем ТекущееНачалоНедели;
	
	Если Не ПараметрыЗаписи.Свойство("НомерГода", ТекущееНачалоНедели) Тогда
		
		ТекущееНачалоНедели = НачалоНедели;
		
	КонецЕсли;
	
	ЗаписатьГрафикРаботыВРегистрСервер(ТекущееНачалоНедели);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	МагазинНастроек = Настройки.Получить("ОтборМагазин");
	Если НЕ ЗначениеЗаполнено(ОтборМагазин) И ЗначениеЗаполнено(МагазинНастроек) Тогда
		ОтборМагазин = МагазинНастроек;
	Иначе
		Настройки.Удалить("ОтборМагазин");
	КонецЕсли;
	ЗаполнитьГрафикРаботПоСотрудникам();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "РегистрСведений.ПланируемоеРабочееВремяСотрудников.Форма.ФормаСписка.Открытие");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборМагазинПриИзменении(Элемент)
	
	ЗаписатьГрафикРаботыВРегистрКлиент(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоНеделиПриИзменении(Элемент)
	
	ПриИзмененииНедели();

КонецПроцедуры

&НаКлиенте
Процедура ОтборМагазинОчистка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьГрафикРаботПоСотрудникам();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаРегистра

&НаКлиенте
Процедура ТаблицаРегистраПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяКолонки        = Элемент.ТекущийЭлемент.Имя;
	ТекущаяСтрока     = Элемент.ТекущиеДанные;
	ТекущийПоказатель = ТекущаяСтрока[ИмяКолонки];
	
	Если НЕ ЗначениеЗаполнено(ТекущийПоказатель) Тогда
		
		ИнтервалДерева 	= ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().РаботаСотрудник;
		ТекущаяСтрока[ИмяКолонки] = ОстатокРабочегоДняСотрудника(ТекущаяСтрока.РаботаСотрудник, ИмяКолонки, ИнтервалДерева);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРегистраПередНачаломИзменения(Элемент, Отказ)
	
	ТекущаяСтрока	= Элемент.ТекущиеДанные;
	ИмяКолонки		= Элемент.ТекущийЭлемент.Имя;
	
	Если ТекущаяСтрока.РаботаСотрудник = Неопределено 
		ИЛИ ТипЗнч(ТекущаяСтрока.РаботаСотрудник) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		ТекущаяСтрока[ИмяКолонки] = Дата('00010101');
		Отказ = Истина;
		
	Иначе
		ИнтервалДерева 	= ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().РаботаСотрудник;
		
		ПозицияСимвола 	= СтрДлина(ИмяКолонки) - СтрНайти(ИмяКолонки,"Добавлен");
		ДеньНедели 		= Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - ПозицияСимвола - 1);

		СтрокаНайдена = ПроверитьДеньНеделиВИнтервале(ДеньНедели, ИнтервалДерева);
		
		Если Не СтрокаНайдена Тогда
			ТекущаяСтрока[ИмяКолонки] = Дата('00010101');
			Отказ = Истина;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьАктуальныйГрафикРаботы(Команда)
	
	ЗаполнитьАктуальныйГрафикРаботыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаборЗаписейГрафикаРабот(Команда)
	
	ЗаписатьГрафикРаботыВРегистрКлиент(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГрафикРаботыСледующейНедели(Команда)
	
	НачалоНедели = НачалоНедели + 86400*7;
	ПриИзмененииНедели();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГрафикРаботыПрошлойНедели(Команда)
	
	НачалоНедели = НачалоНедели - 86400*7;
	ПриИзмененииНедели();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДлинуРабочегоДняПоГрафикуРаботы(Команда)
	РассчитатьДлинуРабочегоДня();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДлинуРабочегоДняПоГрафикуРаботыНаВсюНеделю(Команда)
	Для каждого УзелМагазин Из ТаблицаРегистра.ПолучитьЭлементы() Цикл
		Для каждого УзелИнтервал Из УзелМагазин.ПолучитьЭлементы() Цикл
			Для каждого УзелРабота Из УзелИнтервал.ПолучитьЭлементы() Цикл
				Для каждого СтрокаСотрудника Из УзелРабота.ПолучитьЭлементы() Цикл
					РассчитатьДлинуРабочегоДняНаНеделю(СтрокаСотрудника);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДлинуРабочегоДняПоГрафикуРаботыНаВсюНеделюДляРаботника(Команда)
	РассчитатьДлинуРабочегоДня(Истина);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьАктуальныйГрафикРаботыНаСервере()
	
	Если ПроверитьЗаполнение() Тогда
		
		ЗаполнитьГрафикРаботПоСотрудникам();
		Модифицированность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает плановое время рабочего дня по индексу интервала.
// Параметры - Интервал - Интервал
//  Возвращаемое значение - Дата.
//
&НаСервере
Функция ДлинаРабочегоДня(Интервал)
	
	РазностьВСекундах = Интервал.ОкончаниеИнтервала - Интервал.НачалоИнтервала;
	
	Если Не РазностьВСекундах = 0 Тогда
		
		Если РазностьВСекундах < 0 Тогда
			РазностьВСекундах = 86400 - РазностьВСекундах*(-1);
		КонецЕсли;
		
		ДлинаРабочегоВремени = ОбщегоНазначенияРТКлиентСервер.ПреобразоватьСекундыВДату(РазностьВСекундах);
		
	Иначе
		ДлинаРабочегоВремени = Дата("00010101000000");
		
	КонецЕсли;
	
	Возврат ДлинаРабочегоВремени;
	
КонецФункции

&НаСервере
// Возвращает остаток времени работы сотрудника.
//
// Параметры:
//   Сотрудник - Справочник.Физические лица.
//   ИмяКолонки - Строка;
//   Интервал - Интервал
//
// Возвращаемое значение:
//   Дата
//
Функция ОстатокРабочегоДняСотрудника(Сотрудник, ИмяКолонки, Интервал);
	
	РазностьВСекундах = Интервал.ОкончаниеИнтервала - Интервал.НачалоИнтервала;
	
	Если Не РазностьВСекундах = 0 Тогда
		
		Если РазностьВСекундах < 0 Тогда
			РазностьВСекундах = 86400 - РазностьВСекундах*(-1);
		КонецЕсли;
		
		Результат = ОбщегоНазначенияРТКлиентСервер.ПреобразоватьСекундыВДату(РазностьВСекундах);
		
		Для каждого УзелМагазин Из ТаблицаРегистра.ПолучитьЭлементы() Цикл
			Для каждого УзелИнтервал Из УзелМагазин.ПолучитьЭлементы() Цикл
				Для каждого РодительскийЭлемент Из УзелИнтервал.ПолучитьЭлементы() Цикл
					Для каждого СтрокаСотрудника Из РодительскийЭлемент.ПолучитьЭлементы() Цикл
						Если СтрокаСотрудника.РаботаСотрудник = Сотрудник И УзелИнтервал.РаботаСотрудник = Интервал Тогда
							Если Результат > СтрокаСотрудника[ИмяКолонки] Тогда
								Результат = ОбщегоНазначенияРТКлиентСервер.ПреобразоватьСекундыВДату(Результат - СтрокаСотрудника[ИмяКолонки]);
							Иначе
								Результат = Дата("00010101000000");
								Возврат Результат;
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		Результат = Дата("00010101000000");
		
	КонецЕсли;
	
	Возврат Результат;
	
	
КонецФункции // ОстатокРабочегоДняСотрудника()

&НаКлиенте
Процедура ПриИзмененииНедели()
	
	Если НачалоНедели < Дата(2000,1,1) Тогда
		
		НачалоНедели = ПредыдущееНачалоНедели;
		Возврат;
		
	КонецЕсли;
	
	НачалоНедели = НачалоНедели - (ДеньНедели(НачалоНедели)-1)*86400;
	ЗаписатьГрафикРаботыВРегистрКлиент(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьГрафикРаботыВРегистрСервер(ТекущееНачалоНедели)
	
	СтруктураДатИКолонок = Новый Структура;
	День = 0;
	
	Для каждого ЗначениеПеречисления Из Перечисления.ДниНедели Цикл
		
		СтруктураДатИКолонок.Вставить(Строка(ЗначениеПеречисления),НачалоДня(ТекущееНачалоНедели) + День);
		День = День + 86400;
		
	КонецЦикла;
	
	ТаблицаЗаписи = Новый ТаблицаЗначений;
	ТаблицаЗаписи.Колонки.Добавить("ИнтервалРаботыМагазинов", Новый ОписаниеТипов("СправочникСсылка.ИнтервалыРаботыМагазинов"));
	ТаблицаЗаписи.Колонки.Добавить("РаботаВыполняемаяСотрудниками", Новый ОписаниеТипов("СправочникСсылка.РаботаВыполняемаяСотрудниками"));
	ТаблицаЗаписи.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаЗаписи.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаЗаписи.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ТаблицаЗаписи.Колонки.Добавить("ДлинаРабочегоВремени", Новый ОписаниеТипов("Дата"));
	ТаблицаЗаписи.Колонки.Добавить("Очистить", Новый ОписаниеТипов("Булево"));
	
	Дерево = РеквизитФормыВЗначение("ТаблицаРегистра");
	
	Для каждого Колонка Из Дерево.Колонки Цикл
		
		ПозицияСимвола = СтрНайти(Колонка.Имя,"Добавлен");
		
		Если ПозицияСимвола > 0 Тогда
			
			ИмяЗначенияПеречисления = Лев(Колонка.Имя, ПозицияСимвола-1);
			День = СтруктураДатИКолонок[ИмяЗначенияПеречисления];
			СтруктураДатИКолонок.Вставить(Колонка.Имя, День);
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Для каждого СтрокаМагазин Из Дерево.Строки Цикл
		Для каждого СтрокаИнтервал Из СтрокаМагазин.Строки Цикл
			Для каждого СтрокаРабота Из СтрокаИнтервал.Строки Цикл
				Для каждого СтрокаСотрудник Из СтрокаРабота.Строки Цикл
					Для каждого Колонка Из Дерево.Колонки Цикл
						Если Колонка.Имя <> "РаботаСотрудник" И СтрНайти(Колонка.Имя,"Выходной") = 0 Тогда
					
							СтрокаЗаписи = ТаблицаЗаписи.Добавить();
							СтрокаЗаписи.ИнтервалРаботыМагазинов       = СтрокаИнтервал.РаботаСотрудник;
							СтрокаЗаписи.РаботаВыполняемаяСотрудниками = СтрокаРабота.РаботаСотрудник;
							СтрокаЗаписи.Сотрудник                     = СтрокаСотрудник.РаботаСотрудник;
							СтрокаЗаписи.ДлинаРабочегоВремени          = СтрокаСотрудник[Колонка.Имя];
							
							Интервал = СтрокаИнтервал.РаботаСотрудник;
							РазностьВСекундах = Интервал.ОкончаниеИнтервала - Интервал.НачалоИнтервала;
							
							Если РазностьВСекундах < 0 Тогда
								СтрокаЗаписи.Период                    = ОбщегоНазначенияРТКлиентСервер.СложитьДатуИВремя(СтруктураДатИКолонок[Колонка.Имя],СтрокаИнтервал.РаботаСотрудник.НачалоИнтервала);
								СтрокаЗаписи.ДатаОкончания             = ОбщегоНазначенияРТКлиентСервер.СложитьДатуИВремя(СтруктураДатИКолонок[Колонка.Имя] + 86400,СтрокаИнтервал.РаботаСотрудник.ОкончаниеИнтервала);
							Иначе
								СтрокаЗаписи.Период                    = ОбщегоНазначенияРТКлиентСервер.СложитьДатуИВремя(СтруктураДатИКолонок[Колонка.Имя],СтрокаИнтервал.РаботаСотрудник.НачалоИнтервала);
								СтрокаЗаписи.ДатаОкончания             = ОбщегоНазначенияРТКлиентСервер.СложитьДатуИВремя(СтруктураДатИКолонок[Колонка.Имя],СтрокаИнтервал.РаботаСотрудник.ОкончаниеИнтервала);
							КонецЕсли;
							
							СтрокаЗаписи.Очистить                      = НЕ ЗначениеЗаполнено(СтрокаСотрудник[Колонка.Имя]);
					
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	РегистрыСведений.ПланируемоеРабочееВремяСотрудников.ЗаписатьПланируемоеРабочееВремяСотрудников(ТаблицаЗаписи);
	
	СтруктураДатИКолонок.Очистить();
	ТаблицаЗаписи.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьГрафикРаботыВРегистрКлиент(БезВопроса)
	
	ПроверкаУспешна = ПроверитьЗаполнение();
	
	Если ПроверкаУспешна Тогда
		Если Модифицированность Тогда
			Если БезВопроса Тогда
				ЗаписатьГрафикРаботыВРегистрСервер(ПредыдущееНачалоНедели);
				Модифицированность = Ложь;
				ЗаполнитьГрафикРаботПоСотрудникам();
			Иначе
				ТекстВопроса = НСтр("ru = 'Записать измененные данные за неделю с %1 по %2?'");
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, 
																					   Формат(ПредыдущееНачалоНедели, "ДФ=dd.MM.yy"), 
																					   Формат(ПредыдущееНачалоНедели + 86400*7, "ДФ=dd.MM.yy"));
				
				ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросПриЗаписиГрафикаРаботы", ЭтотОбъект);
				ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			КонецЕсли;
		Иначе
			ЗаполнитьГрафикРаботПоСотрудникам();
		КонецЕсли;
	Иначе
		ОтказатьсяОтГрафикаРаботПоСотрудникам();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрафикРаботПоСотрудникам()
	
	УдаляемыеРеквизиты   = Новый Массив();
	РеквизитыФормы = ПолучитьРеквизиты("ТаблицаРегистра");
	
	Для каждого РеквизитФормы Из РеквизитыФормы Цикл
		Если Найти(РеквизитФормы.Имя,"Добавлен")
			ИЛИ Найти(РеквизитФормы.Имя,"Выходной")
			Тогда
			УдаляемыеРеквизиты.Добавить(РеквизитФормы);
		КонецЕсли;
	КонецЦикла;
	
	Если УдаляемыеРеквизиты.Количество() > 0 Тогда
		Для Инд = 0 По  УдаляемыеРеквизиты.Количество() -1 Цикл
			ИмяРеквизита            = УдаляемыеРеквизиты[Инд].Путь + "." + УдаляемыеРеквизиты[Инд].Имя;
			УдаляемыеРеквизиты[Инд] = ИмяРеквизита;
		КонецЦикла;
		ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрафикиРаботыМагазинов.ДатаКалендаря  			КАК ДатаКалендаря,
	|	Интервалы.ДеньНедели                  			КАК ДеньНедели,
	|	Интервалы.Ссылка.НачалоИнтервала      			КАК НачалоИнтервала,
	|	Интервалы.Ссылка.ОкончаниеИнтервала   			КАК ОкончаниеИнтервала,
	|	Интервалы.Ссылка.ДлинаРабочегоВремени 			КАК ДлинаРабочегоВремени,
	|	Интервалы.Ссылка                      			КАК Интервал,
	|	ГрафикиРаботыМагазинов.РабочийДень    			КАК РабочийДень,
	|	РаботыМагазинов.РаботаВыполняемаяСотрудниками 	КАК РаботаВыполняемаяСотрудниками
	|ПОМЕСТИТЬ Интервалы
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыМагазинов КАК ГрафикиРаботыМагазинов
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.ИнтервалыРаботыМагазинов.ДниНедели КАК Интервалы
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.ИнтервалыРаботыМагазинов.РаботыВыполняемыеСотрудниками КАК РаботыМагазинов
	|ПО
	|	РаботыМагазинов.Ссылка = Интервалы.Ссылка
	|ПО
	|	(ДЕНЬНЕДЕЛИ(ГрафикиРаботыМагазинов.ДатаКалендаря) = Интервалы.ДеньНедели.Порядок + 1)
	|	И ГрафикиРаботыМагазинов.Магазин = Интервалы.Ссылка.Магазин
	|ГДЕ
	|";
	Если ЗначениеЗаполнено(ОтборМагазин) Тогда
		ТекстЗапроса = ТекстЗапроса + "ГрафикиРаботыМагазинов.Магазин = &Магазин И";
		Запрос.УстановитьПараметр("Магазин", ОтборМагазин);
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|	ГрафикиРаботыМагазинов.ДатаКалендаря >= НАЧАЛОПЕРИОДА(&НачалоНедели, ДЕНЬ)
	|	И ГрафикиРаботыМагазинов.ДатаКалендаря <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоНедели, ДЕНЬ, 6), ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Интервалы.Интервал              КАК Интервал,
	|	Интервалы.ДеньНедели            КАК ДеньНедели,
	|	МАКСИМУМ(Интервалы.РабочийДень) КАК РабочийДень
	|ИЗ
	|	Интервалы КАК Интервалы
	|
	|СГРУППИРОВАТЬ ПО
	|	Интервалы.Интервал,
	|	Интервалы.ДеньНедели
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботаСотрудников.Сотрудник.Магазин 			КАК Магазин,
	|	РаботаСотрудников.Сотрудник                     КАК Сотрудник,
	|	РаботаСотрудников.РаботаВыполняемаяСотрудниками КАК Работа,
	|	РаботаСотрудников.Смена 						КАК Смена
	|ПОМЕСТИТЬ РаботаСотрудники
	|ИЗ
	|	РегистрСведений.РаботаСотрудников КАК РаботаСотрудников
	|ГДЕ
	|	(НЕ РаботаСотрудников.Сотрудник.ПометкаУдаления)
	|	И РаботаСотрудников.Сотрудник.Сотрудник
	|";
	Если ЗначениеЗаполнено(ОтборМагазин) Тогда
		ТекстЗапроса = ТекстЗапроса + "И РаботаСотрудников.Сотрудник.Магазин = &Магазин";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланируемоеВремя.Магазин 								КАК Магазин,
	|	ПланируемоеВремя.Интервал                               КАК Интервал,	
	|	ПланируемоеВремя.Работа                                 КАК Работа,
	|	ПланируемоеВремя.Сотрудник                              КАК Сотрудник,
	|	ПланируемоеВремя.ДеньНедели                             КАК ДеньНедели,
	|	ПланируемоеРабочееВремяСотрудников.ДлинаРабочегоВремени КАК ДлинаРабочегоВремени,
	|	ПланируемоеВремя.ДатаКалендаря                          КАК ДатаКалендаря,
	|	ПланируемоеВремя.РабочийДень                            КАК РабочийДень
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаботаСотрудники.Магазин   КАК Магазин,
	|		Интервалы.Интервал         КАК Интервал,
	|		РаботаСотрудники.Работа    КАК Работа,
	|		РаботаСотрудники.Сотрудник КАК Сотрудник,
	|		Интервалы.ДатаКалендаря    КАК ДатаКалендаря,
	|		Интервалы.ДеньНедели       КАК ДеньНедели,
	|		Интервалы.РабочийДень      КАК РабочийДень
	|	ИЗ
	|		Интервалы													КАК Интервалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаботаСотрудники						КАК РаботаСотрудники
	|		ПО Интервалы.Интервал.Магазин = РаботаСотрудники.Магазин
	|			И Интервалы.РаботаВыполняемаяСотрудниками = РаботаСотрудники.Работа
	|			И (Интервалы.Интервал = РаботаСотрудники.Смена
	|			ИЛИ РаботаСотрудники.Смена = ЗНАЧЕНИЕ(Справочник.ИнтервалыРаботыМагазинов.ПустаяСсылка))) КАК ПланируемоеВремя
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПланируемоеРабочееВремяСотрудников КАК ПланируемоеРабочееВремяСотрудников
	|	ПО
	|		ПланируемоеВремя.Сотрудник = ПланируемоеРабочееВремяСотрудников.Сотрудник
	|		И ПланируемоеВремя.Работа = ПланируемоеРабочееВремяСотрудников.РаботаВыполняемаяСотрудниками
	|		И ПланируемоеВремя.Интервал = ПланируемоеРабочееВремяСотрудников.ИнтервалРаботыМагазинов
	|		И (НАЧАЛОПЕРИОДА(ПланируемоеВремя.ДатаКалендаря, ДЕНЬ) = НАЧАЛОПЕРИОДА(ПланируемоеРабочееВремяСотрудников.Период, ДЕНЬ))
	|ИТОГИ
	|	МАКСИМУМ(ДлинаРабочегоВремени),
	|	МАКСИМУМ(РабочийДень)
	|ПО
	|	Магазин,
	|	Интервал,
	|	Работа,
	|	Сотрудник,
	|	ДеньНедели
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачалоНедели",НачалоНедели);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатПоИнтервалам = МассивРезультатов[1];
	ВыборкаПоИнтервалам = РезультатПоИнтервалам.Выбрать();
	
	ДобавляемыеРеквизиты = Новый Массив();
	УдаляемыеРеквизиты   = Новый Массив();
	
	СуществующиеРеквизиты = Новый Массив;
	РеквизитыФормы = ПолучитьРеквизиты("ТаблицаРегистра");
	
	Для каждого РеквизитФормы Из РеквизитыФормы Цикл
		
		Если Найти(РеквизитФормы.Имя,"Добавлен") 
			ИЛИ Найти(РеквизитФормы.Имя,"Выходной") 
			Тогда
			СуществующиеРеквизиты.Добавить(РеквизитФормы);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СуществующийРеквизит Из СуществующиеРеквизиты Цикл
		
		УдаляемыеРеквизиты.Добавить(СуществующийРеквизит);
		
	КонецЦикла;
	
	// Массив элементов - групп колонок, в которых необходимо создать доп. колонки.
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ГрПонедельник);
	МассивЭлементов.Добавить(Элементы.ГрВторник);
	МассивЭлементов.Добавить(Элементы.ГрСреда);
	МассивЭлементов.Добавить(Элементы.ГрЧетверг);
	МассивЭлементов.Добавить(Элементы.ГрПятница);
	МассивЭлементов.Добавить(Элементы.ГрСуббота);
	МассивЭлементов.Добавить(Элементы.ГрВоскресенье);
	
	ОписаниеТипов = Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Время));
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(1));
	ДеньНедели = 0;
	
		Для каждого ЭлементГруппа Из МассивЭлементов Цикл
			
				ИмяЭлемента	 = Прав(ЭлементГруппа.Имя, СтрДлина(ЭлементГруппа.Имя) - 2) + "Добавлен";
				
				ЭлементНайден = Ложь;
				
				Для каждого СуществующийРеквизит Из СуществующиеРеквизиты Цикл
					
					Если СуществующийРеквизит.Имя = ИмяЭлемента Тогда
						
						ЭлементНайден = Истина;
						СуществующийРеквизит.Заголовок = Строка(ВыборкаПоИнтервалам.Интервал);
						
						КоличествоРеквизитов = УдаляемыеРеквизиты.Количество()-1;
						Для Инд = 0 По КоличествоРеквизитов Цикл
							
							Если УдаляемыеРеквизиты[КоличествоРеквизитов-Инд] = СуществующийРеквизит Тогда
								
								УдаляемыеРеквизиты.Удалить(КоличествоРеквизитов-Инд);
								
							КонецЕсли;
							
						КонецЦикла;
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
					
				Если НЕ ЭлементНайден Тогда
					
					ЗаголовокЭлемента = НСтр("ru = """ +Прав(ЭлементГруппа.Имя, СтрДлина(ЭлементГруппа.Имя) - 2)+ """") + " " + Формат(НачалоНедели+86400*ДеньНедели,"Л=ru; ДФ=dd.MM.yy");
					Реквизит = Новый РеквизитФормы(ИмяЭлемента, ОписаниеТипов, "ТаблицаРегистра", ЗаголовокЭлемента, Истина);
					ДобавляемыеРеквизиты.Добавить(Реквизит);
					
					ИмяЭлемента	 = Прав(ЭлементГруппа.Имя, СтрДлина(ЭлементГруппа.Имя) - 2) + "Выходной";
					ЗаголовокЭлемента = НСтр("ru = """ +Прав(ЭлементГруппа.Имя, СтрДлина(ЭлементГруппа.Имя) - 2)+ """") + "Выходной";
					Реквизит = Новый РеквизитФормы(ИмяЭлемента, ОписаниеТиповЧисло, "ТаблицаРегистра", ЗаголовокЭлемента, Истина);
					ДобавляемыеРеквизиты.Добавить(Реквизит);

					ДеньНедели = ДеньНедели + 1;
					
				КонецЕсли;
		
		КонецЦикла;
		
	// Очищаем массив существующих реквизитов.
	СуществующиеРеквизиты.Очистить();
	
	КоличествоРеквизитов = УдаляемыеРеквизиты.Количество()-1;
	
	Для Инд = 0 По КоличествоРеквизитов Цикл
		
		ИмяРеквизита            = УдаляемыеРеквизиты[Инд].Путь + "." + УдаляемыеРеквизиты[Инд].Имя;
		УдаляемыеРеквизиты[Инд] = ИмяРеквизита;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	// Удаление элементов
	УдаляемыеЭлементы = Новый Массив;
	
	Для каждого ПодчиненныйЭлемент Из Элементы Цикл
		
		Если (СтрНайти(ПодчиненныйЭлемент.Имя,"Добавлен") > 0 
			ИЛИ СтрНайти(ПодчиненныйЭлемент.Имя,"Выходной") > 0)
			И ТипЗнч(ПодчиненныйЭлемент) = Тип("ПолеФормы")
			Тогда
			
			УдаляемыеЭлементы.Добавить(ПодчиненныйЭлемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		
		Элементы.Удалить(УдаляемыйЭлемент);
		
	КонецЦикла;
	
	// Добавление элементов
		Для каждого ЭлементГруппа Из МассивЭлементов Цикл
			
				Родитель                     = Элементы.ТаблицаРегистра;
				Имя							 = Прав(ЭлементГруппа.Имя, СтрДлина(ЭлементГруппа.Имя) - 2);
				Элемент                      = Элементы.Добавить(Имя + "Добавлен", Тип("ПолеФормы"), Родитель);
				Элемент.Вид                  = ВидПоляФормы.ПолеВвода;
				Элемент.ПутьКДанным          = "ТаблицаРегистра." + Имя + "Добавлен";
				Элемент.Формат               = "ДФ=ЧЧ:мм";
				Элемент.ФорматРедактирования = "ДФ=ЧЧ:мм";
				
				Родитель                     = Элементы.ТаблицаРегистра;
				Имя							 = Прав(ЭлементГруппа.Имя, СтрДлина(ЭлементГруппа.Имя) - 2);
				Элемент                      = Элементы.Добавить(Имя + "Выходной", Тип("ПолеФормы"), Родитель);
				Элемент.Вид                  = ВидПоляФормы.ПолеВвода;
				Элемент.Видимость			 = Ложь;
				Элемент.ПутьКДанным          = "ТаблицаРегистра." + Имя + "Выходной";
			
		КонецЦикла;
	
	Дерево = РеквизитФормыВЗначение("ТаблицаРегистра");
	Дерево.Строки.Очистить();
	РезультатЗапроса = МассивРезультатов[3];
	ВыборкаМагазин = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаМагазин.Следующий() Цикл
		
		СтрокаМагазин = Дерево.Строки.Добавить();
		СтрокаМагазин.РаботаСотрудник = ВыборкаМагазин.Магазин;
		ВыборкаИнтервал = ВыборкаМагазин.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаИнтервал.Следующий() Цикл
			
			СтрокаИнтервал = СтрокаМагазин.Строки.Добавить();
			СтрокаИнтервал.РаботаСотрудник = ВыборкаИнтервал.Интервал;
			ВыборкаРабота = ВыборкаИнтервал.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаРабота.Следующий() Цикл
				
				СтрокаРабота = СтрокаИнтервал.Строки.Добавить();
				СтрокаРабота.РаботаСотрудник = ВыборкаРабота.Работа;
				ВыборкаСотрудник = ВыборкаРабота.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаСотрудник.Следующий() Цикл
					
					СтрокаСотрудник = СтрокаРабота.Строки.Добавить();
					СтрокаСотрудник.РаботаСотрудник = ВыборкаСотрудник.Сотрудник;
					ВыборкаДеньНедели = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаДеньНедели.Следующий() Цикл
						
							ИмяДняНедели    					= Строка(ВыборкаДеньНедели.ДеньНедели);
							РабочийДень							= ?(ВыборкаДеньНедели.РабочийДень <> NULL, ВыборкаДеньНедели.РабочийДень, 0);
							ДлинаРабочегоВремени 				= ВыборкаДеньНедели.ДлинаРабочегоВремени;
							ИмяКолонки      					= ИмяДняНедели + "Добавлен";
							ИмяКолонкиВыходной      			= ИмяДняНедели + "Выходной";
							СтрокаСотрудник[ИмяКолонки] 		= ДлинаРабочегоВремени;
							СтрокаСотрудник[ИмяКолонкиВыходной] = РабочийДень;
							
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево,"ТаблицаРегистра");
	
	ПредыдущееНачалоНедели = НачалоНедели;
	ПредыдущийМагазин      = ОтборМагазин;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтГрафикаРаботПоСотрудникам()
	
	ОтборМагазин = ПредыдущийМагазин;
	НачалоНедели = ПредыдущееНачалоНедели;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДлинуРабочегоДня(РассчитатьНаВсюНеделю = Ложь)
	ТекущаяСтрока     = Элементы.ТаблицаРегистра.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено
		И ТекущаяСтрока.Свойство("РаботаСотрудник")
		И ТипЗнч(ТекущаяСтрока.РаботаСотрудник) = Тип("СправочникСсылка.ФизическиеЛица") 
		И ЗначениеЗаполнено(ТекущаяСтрока.РаботаСотрудник) Тогда
		
		Если РассчитатьНаВсюНеделю Тогда
			РассчитатьДлинуРабочегоДняНаНеделю(ТекущаяСтрока);
		Иначе
			ИмяКолонки = Элементы.ТаблицаРегистра.ТекущийЭлемент.Имя;
			Если Найти(ИмяКолонки,"Добавлен") > 0 Тогда
				
				ПозицияСимвола 			= СтрДлина(ИмяКолонки) - СтрНайти(ИмяКолонки,"Добавлен");
				ИмяКолонкиВыходной 		= Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - ПозицияСимвола - 1) + "Выходной";
				ИнтервалДерева 			= ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().РаботаСотрудник;
				РаботаСотрудника 		= ТекущаяСтрока.ПолучитьРодителя().РаботаСотрудник;
				Сотрудник 				= ТекущаяСтрока.РаботаСотрудник;
				ИнтервалСотрудника 		= ПолучитьСменуСотрудника(Сотрудник, РаботаСотрудника, ИнтервалДерева);
				
				Если ИнтервалСотрудника = Неопределено Тогда
					ТекущаяСтрока[ИмяКолонки] = ДлинаРабочегоДня(ИнтервалДерева);
				Иначе
					Если ИнтервалСотрудника = ИнтервалДерева Тогда
						ТекущаяСтрока[ИмяКолонки] = ?(ТекущаяСтрока[ИмяКолонкиВыходной] = 0, Дата("00010101000000"), ДлинаРабочегоДня(ИнтервалДерева));
					КонецЕсли;
				КонецЕсли;
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДлинуРабочегоДняНаНеделю(ТекущаяСтрока, ПодчиненныеЭлементыПараметр = Неопределено)
	Если ПодчиненныеЭлементыПараметр = Неопределено Тогда
		Для каждого ПодчиненныйЭлемент Из Элементы.ТаблицаРегистра.ПодчиненныеЭлементы Цикл
			РассчитатьДлинуРабочегоДняНаНеделю(ТекущаяСтрока, ПодчиненныйЭлемент);
		КонецЦикла;
	Иначе
		Если ТипЗнч(ПодчиненныеЭлементыПараметр) = Тип("ПолеФормы") Тогда
			ИмяКолонки = ПодчиненныеЭлементыПараметр.Имя;
			Если Найти(ИмяКолонки,"Добавлен") > 0 Тогда
				
				ПозицияСимвола 			= СтрДлина(ИмяКолонки) - СтрНайти(ИмяКолонки,"Добавлен");
				ИмяКолонкиВыходной 		= Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - ПозицияСимвола - 1) + "Выходной";
				ИнтервалДерева 			= ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().РаботаСотрудник;
				РаботаСотрудника 		= ТекущаяСтрока.ПолучитьРодителя().РаботаСотрудник;
				Сотрудник 				= ТекущаяСтрока.РаботаСотрудник;
				ИнтервалСотрудника 		= ПолучитьСменуСотрудника(Сотрудник, РаботаСотрудника, ИнтервалДерева);
				
				Если ИнтервалСотрудника = Неопределено Тогда
					ТекущаяСтрока[ИмяКолонки] = ДлинаРабочегоДня(ИнтервалДерева);
				Иначе
					Если ИнтервалСотрудника = ИнтервалДерева Тогда
						ТекущаяСтрока[ИмяКолонки] = ?(ТекущаяСтрока[ИмяКолонкиВыходной] = 0, Дата("00010101000000"), ДлинаРабочегоДня(ИнтервалДерева));
					КонецЕсли;
				КонецЕсли;
				Модифицированность = Истина;
			КонецЕсли;
		Иначе
			Для каждого ПодчиненныйЭлемент Из ПодчиненныеЭлементыПараметр.ПодчиненныеЭлементы Цикл
				РассчитатьДлинуРабочегоДняНаНеделю(ТекущаяСтрока, ПодчиненныйЭлемент);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСменуСотрудника(Сотрудник, РаботаСотрудника, ИнтервалДерева)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботаСотрудников.Сотрудник,
	|	РаботаСотрудников.РаботаВыполняемаяСотрудниками,
	|	РаботаСотрудников.Смена
	|ИЗ
	|	РегистрСведений.РаботаСотрудников КАК РаботаСотрудников
	|ГДЕ
	|	РаботаСотрудников.РаботаВыполняемаяСотрудниками = &РаботаВыполняемаяСотрудниками
	|	И РаботаСотрудников.Сотрудник = &Сотрудник");
	Запрос.УстановитьПараметр("РаботаВыполняемаяСотрудниками", РаботаСотрудника);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	РезультатЗапроса = Запрос.Выполнить();
	
	СменаСотрудника = Неопределено;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаРаботаСотрудников = РезультатЗапроса.Выгрузить();
		МассивСменСотрудника = ТаблицаРаботаСотрудников.НайтиСтроки(
			Новый Структура("РаботаВыполняемаяСотрудниками, Смена, Сотрудник", РаботаСотрудника, ИнтервалДерева, Сотрудник));
		Если МассивСменСотрудника.Количество() > 0 Тогда
			СменаСотрудника = МассивСменСотрудника[0].Смена;
		Иначе
			СменаСотрудника = ТаблицаРаботаСотрудников[0].Смена;
		КонецЕсли; 
	КонецЕсли;
	
	Если СменаСотрудника <> Неопределено Тогда
		Возврат СменаСотрудника;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ПроверитьДеньНеделиВИнтервале(ДеньНедели, Интервал)
	
	СтрокаНайдена = Истина;
	
	Если Интервал.ДниНедели.Найти(Перечисления.ДниНедели[ДеньНедели],"ДеньНедели") = Неопределено Тогда
		СтрокаНайдена = Ложь;
	КонецЕсли;
	
	Возврат СтрокаНайдена;
				
КонецФункции

&НаКлиенте
Процедура ТаблицаРегистраПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущаяСтрока	= Элемент.ТекущиеДанные;
	ИмяКолонки		= Элемент.ТекущийЭлемент.Имя;
	
	Если ТекущаяСтрока.РаботаСотрудник = Неопределено 
		ИЛИ ТипЗнч(ТекущаяСтрока.РаботаСотрудник) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		ТекущаяСтрока[ИмяКолонки] = Дата('00010101');
		Отказ = Истина;
		
	Иначе
		ИнтервалДерева 	= ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().РаботаСотрудник;
		
		ПозицияСимвола 	= СтрДлина(ИмяКолонки) - СтрНайти(ИмяКолонки,"Добавлен");
		ДеньНедели 		= Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - ПозицияСимвола - 1);

		СтрокаНайдена = ПроверитьДеньНеделиВИнтервале(ДеньНедели, ИнтервалДерева);
		
		Если Не СтрокаНайдена Тогда
			ТекущаяСтрока[ИмяКолонки] = Дата('00010101');
			Отказ = Истина;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти