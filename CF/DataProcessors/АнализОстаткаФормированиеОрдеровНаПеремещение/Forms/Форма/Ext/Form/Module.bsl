
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьКомиссионнуюТорговлю = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
	ИспользоватьУчетИмпортныхТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьУчетИмпортныхТоваров");
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ЗагрузитьНастройкиОтбораПоУмолчанию();
	
	Объект.Дата                                 = ТекущаяДатаСеанса();
	Элементы.ГруппаСтраницы.ТекущаяСтраница     = Элементы.ГруппаТовары;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Объект.Магазин = Настройки.Получить("Объект.Магазин");
	Объект.Склад   = Настройки.Получить("Объект.Склад");
	
	ЗаполнитьСписокОтправителей();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ПроверитьЗаполнениеОтправителей() Тогда
		
		ТекстОшибки = НСтр("ru = 'Не определены склады-отправители.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"Отправители",,
			Отказ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодАнализа.ДатаНачала)
		И ПериодАнализа.ДатаНачала > КонецДня(ТекущаяДатаСеанса()) Тогда
		
		ТекстОшибки = НСтр("ru = 'Начало периода анализа продаж больше текущей даты.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"ПериодАнализа",,
			Отказ);
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ПериодАнализа.ДатаОкончания) 
		И КонецДня(ПериодАнализа.ДатаОкончания) > КонецДня(ТекущаяДатаСеанса()) Тогда
		
		ТекстОшибки = НСтр("ru = 'Окончание периода анализа продаж больше текущей даты.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"ПериодАнализа",,
			Отказ);
				
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ПериодАнализа.ДатаОкончания) 
		И ЗначениеЗаполнено(ПериодАнализа.ДатаНачала) 
		И ПериодАнализа.ДатаНачала > ПериодАнализа.ДатаОкончания Тогда
		
		ТекстОшибки = НСтр("ru = 'Начало периода анализа продаж больше окончания периода анализа продаж.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"ПериодАнализа",,
			Отказ);
				
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Обработка.АнализОстаткаФормированиеОрдеровНаПеремещение.Форма.Форма.Открытие");

	УстановитьНеАктуальностьРасчетов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ЗаполнитьСписокОтправителей();
	УстановитьНеАктуальностьРасчетов();
		
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	ЗаполнитьСписокОтправителей();
	УстановитьНеАктуальностьРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАнализаПриИзменении(Элемент)
	УстановитьНеАктуальностьРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДнейРасчетаКПеремещениюПриИзменении(Элемент)
	УстановитьНеАктуальностьРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура ПланируемыйОстатокНаКоличествоДнейПриИзменении(Элемент)
	УстановитьНеАктуальностьРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура ВДняхТорговлиПриИзменении(Элемент)
	УстановитьНеАктуальностьРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриИзменении(Элемент)
	УстановитьНеАктуальностьРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура ОтправителиПриИзменении(Элемент)
	УстановитьНеАктуальностьРасчетов();
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТабличнойЧастиДеревотоваров

&НаКлиенте
Процедура ДеревоТоваровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Рассчитать(Команда)
	
	ОчиститьСообщения();
	РассчитатьНаСервере();
	
	Если ДеревоТоваров.ПолучитьЭлементы().Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Нет данных для заполнения'");
		Пояснение = НСтр("ru='Формирование ордеров не требуется'");
		ПоказатьОповещениеПользователя(ТекстСообщения, , Пояснение, БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	УстановитьКнопкуПоУмолчанию();

КонецПроцедуры

&НаКлиенте
Процедура Отбор(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОтбор;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКТоварам(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТовары;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОрдера(Команда)
	
	Если ДеревоТоваров.ПолучитьЭлементы().Количество() = 0 Тогда
		
		ТекстОшибки = НСтр("ru = 'Нет ни одной строки в таблице ""Товары"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"ДеревоТоваров",,);
		
	Иначе
		
		Если СформироватьОрдераНаСервере() Тогда
			
			ПоказатьОповещениеПользователя(
				НСтр("ru='Документы сформированы:'"),
				,
				НСтр("ru='Ордера на перемещение товаров сформированы.'"),
				БиблиотекаКартинок.Информация32);
						
		КонецЕсли;
	
	КонецЕсли;
	
	УстановитьКнопкуПоУмолчанию();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет загрузку настроек отбора из настроек по умолчанию.
//
&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию()
	
	СхемаКомпоновкиДанных = Обработки.АнализОстаткаФормированиеОрдеровНаПеремещение.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор))
	);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

// Заполняет дерево формы ДеревоТоваров.
//
&НаСервере
Процедура РассчитатьНаСервере()
	
	Если ПроверитьЗаполнение() Тогда
		
		Элементы.ДеревоТоваров.Видимость = Истина;
		Элементы.ТабДок.Видимость = Ложь;
		
		МассивОтправителей = Новый Массив;
		Для каждого Отправитель Из Отправители Цикл
			
			Если Отправитель.Пометка Тогда
				
				МассивОтправителей.Добавить(Отправитель.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("НачалоПериода",                      НачалоДня(ПериодАнализа.ДатаНачала));
		СтруктураПараметров.Вставить("КонецПериода",                       КонецДня(ПериодАнализа.ДатаОкончания));
		СтруктураПараметров.Вставить("Дата",                               КонецДня(Объект.Дата));
		СтруктураПараметров.Вставить("КоличествоДнейРасчетаКПеремещению",  Объект.КоличествоДнейРасчетаКПеремещению);
		СтруктураПараметров.Вставить("ДатаОкончанияДляРасчетаДнейТорговли",КонецДня(ПериодАнализа.ДатаОкончания));
		СтруктураПараметров.Вставить("ВДняхТорговли",                      Объект.ВДняхТорговли);
		СтруктураПараметров.Вставить("Магазин",                            Объект.Магазин);
		СтруктураПараметров.Вставить("СкладПолучатель",                    Объект.Склад);
		СтруктураПараметров.Вставить("СкладыПоставщики",                   МассивОтправителей);
		СтруктураПараметров.Вставить("ПланируемыйОстатокНаКоличествоДней", Объект.ПланируемыйОстатокНаКоличествоДней);
		
		УстановитьЗначениеПараметров(СтруктураПараметров);
		
		ДеревоЗначений = РеквизитФормыВЗначение("ДеревоТоваров", Тип("ДеревоЗначений"));
		ДеревоЗначений.Строки.Очистить();
		
		СхемаКомпоновкиДанных             = Обработки.АнализОстаткаФормированиеОрдеровНаПеремещение.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		Количество = КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество();
		Для Индекс = 1 По Количество Цикл
			ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы[Количество - Индекс];
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
			Если КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
				КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
			КонецЕсли;
		КонецЦикла;

		МакетКомпоновкиДанных             = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

		Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
		// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
		Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
			
			Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
			
		КонецЦикла;
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		ТаблицаНоменклатуры = РезультатЗапроса.Скопировать();
		ТаблицаНоменклатуры.Свернуть("Номенклатура, ХарактеристикиИспользуются");
		ТаблицаНоменклатурыСХарактеристиками = РезультатЗапроса.Скопировать();
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") = Истина Тогда
			ТаблицаНоменклатурыСХарактеристиками.Свернуть("Номенклатура, Характеристика, ХарактеристикиИспользуются, Потребность, КПеремещению, КоличествоОстатокСкладЗаказчик");
		Иначе
			ТаблицаНоменклатурыСХарактеристиками.Свернуть("Номенклатура","Потребность, ХарактеристикиИспользуются, КПеремещению, КоличествоОстатокСкладЗаказчик");
		КонецЕсли;
		
		Для каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
			
			СтрокаДереваНоменклатура = ДеревоЗначений.Строки.Найти(СтрокаНоменклатуры.Номенклатура, "Номенклатура");
			
			Если СтрокаДереваНоменклатура = Неопределено Тогда
				
				СтрокаДереваНоменклатура = ДеревоЗначений.Строки.Добавить();
				СтрокаДереваНоменклатура.Номенклатура = СтрокаНоменклатуры.Номенклатура;
				СтрокаДереваНоменклатура.ХарактеристикиИспользуются = СтрокаНоменклатуры.ХарактеристикиИспользуются;
			КонецЕсли;
				
			ОтборСтрок  = Новый Структура("Номенклатура", СтрокаНоменклатуры.Номенклатура);
			МассивСтрокОтправителей = РезультатЗапроса.НайтиСтроки(ОтборСтрок);
			Для каждого СтрокаОтправители Из МассивСтрокОтправителей Цикл
				
				СтрокаДереваХарактеристика = СтрокаДереваНоменклатура.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДереваХарактеристика, СтрокаОтправители);
				
			КонецЦикла;
			
			СтрокаДереваНоменклатура.КоличествоОстатокСкладПоставщик = СтрокаДереваНоменклатура.Строки.Итог("КоличествоОстатокСкладПоставщик");
			ИтоговыеПоказатели = ТаблицаНоменклатурыСХарактеристиками.Найти(СтрокаДереваНоменклатура.Номенклатура, "Номенклатура");
			ЗаполнитьЗначенияСвойств(СтрокаДереваНоменклатура, ИтоговыеПоказатели, "Потребность, КПеремещению, КоличествоОстатокСкладЗаказчик");
			
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоТоваров");
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнение списка Отправители.
// Возвращаемое значение: 
// Булево - Проверка успешна
&НаСервере
Функция ПроверитьЗаполнениеОтправителей()
	
	ОтправителиЗаполнены = Истина;
	
	Если Отправители.Количество() > 0 Тогда
		
		МассивОтправителей = Новый Массив;
		Для каждого СкладОтправитель Из Отправители Цикл
			
			Если СкладОтправитель.Пометка Тогда
				
				МассивОтправителей.Добавить(СкладОтправитель.Значение);
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		Если МассивОтправителей.Количество() = 0 Тогда
			
			ОтправителиЗаполнены = Ложь;
				
		КонецЕсли;	
				
	Иначе
		
		ОтправителиЗаполнены = Ложь;
		
	КонецЕсли;
	
	Возврат ОтправителиЗаполнены;
	
КонецФункции

// Устанавливает значения параметров компоновщика настроек.
// Параметры:
// СтруктураПараметров, Структура, Ключ - Имя параметра, Значение - значение параметра.
&НаСервере
Процедура УстановитьЗначениеПараметров(СтруктураПараметров)
	
	Для Каждого Параметр Из СтруктураПараметров Цикл
		ПараметрКомпоновкиДанных = Новый ПараметрКомпоновкиДанных(Параметр.Ключ);
		Если ПараметрКомпоновкиДанных <> Неопределено Тогда
			ПараметрКомпоновкиДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКомпоновкиДанных);
			Если ПараметрКомпоновкиДанных <> Неопределено Тогда
				ПараметрКомпоновкиДанных.Значение = Параметр.Значение;
				ПараметрКомпоновкиДанных.Использование = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Формирует документы ОрдерНаПеремещениеТоваров по строкам дерева товаров.
// Возвращаемое значение:
// Булево - Документы сформированы успешно.
&НаСервере
Функция СформироватьОрдераНаСервере()
	
	ВыполненоУспешно = Ложь;
	МассивДокументов = Новый Массив;
	
	Если ПроверитьЗаполнение() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Организация не заполнено""'"),
				,
				"Объект.Организация");
				
			Возврат ВыполненоУспешно;
			
		КонецЕсли;
		
		ДеревоЗначений = РеквизитФормыВЗначение("ДеревоТоваров", Тип("ДеревоЗначений"));
		МассивОтправителей = Новый Массив;
		ТаблицаТовары = Новый ТаблицаЗначений;
		ТаблицаТовары.Колонки.Добавить("Номенклатура");
		ТаблицаТовары.Колонки.Добавить("Характеристика");
		ТаблицаТовары.Колонки.Добавить("Количество");
		ТаблицаТовары.Колонки.Добавить("КоличествоУпаковок");
		ТаблицаТовары.Колонки.Добавить("Склад");
		
		Для каждого СтрокаНоменклатура Из ДеревоЗначений.Строки Цикл
				
			Для каждого СтрокаХарактеристика Из СтрокаНоменклатура.Строки Цикл
				
				Если МассивОтправителей.Найти(СтрокаХарактеристика.Отправитель) = Неопределено Тогда
					
					МассивОтправителей.Добавить(СтрокаХарактеристика.Отправитель);
					
				КонецЕсли;
				Если СтрокаХарактеристика.КПеремещению > 0 Тогда
					
					ИтоговоеКоличество = 0;
					Если СтрокаХарактеристика.КПеремещению <> Цел(СтрокаХарактеристика.КПеремещению) Тогда 
						ИтоговоеКоличество = Цел(СтрокаХарактеристика.КПеремещению) + 1;	
					Иначе
						ИтоговоеКоличество = СтрокаХарактеристика.КПеремещению;
					КонецЕсли;
					
					СтрокаТовары = ТаблицаТовары.Добавить();
					СтрокаТовары.Номенклатура       = СтрокаХарактеристика.Номенклатура;
					СтрокаТовары.Характеристика     = СтрокаХарактеристика.Характеристика;
					СтрокаТовары.Количество         = ИтоговоеКоличество;
					СтрокаТовары.КоличествоУпаковок = ИтоговоеКоличество;
					СтрокаТовары.Склад              = СтрокаХарактеристика.Отправитель;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Попытка
			
			СтруктураОтбора = Новый Структура;
			
			Для каждого Отправитель Из МассивОтправителей Цикл
				СтруктураОтбора.Очистить();
				СтруктураОтбора.Вставить("Склад", Отправитель);
				МассивСтрок = ТаблицаТовары.НайтиСтроки(СтруктураОтбора);
				
				Если МассивСтрок.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ОрдерНаПеремещение = Документы.ОрдерНаПеремещениеТоваров.СоздатьДокумент();
				ОрдерНаПеремещение.Дата    = ТекущаяДатаСеанса();
				ОрдерНаПеремещение.Магазин = Объект.Магазин;
				ОрдерНаПеремещение.СкладПолучатель  = Объект.Склад;
				ОрдерНаПеремещение.СкладОтправитель = Отправитель;
				ОрдерНаПеремещение.Ответственный    = Пользователи.ТекущийПользователь();
				ОрдерНаПеремещение.Организация      = Объект.Организация;
				
				Для каждого СтрокаТовары Из МассивСтрок Цикл
					
					СтрокаОрдера = ОрдерНаПеремещение.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОрдера, СтрокаТовары);
					
					ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(ОрдерНаПеремещение.Товары, СтрокаОрдера, "КлючСвязи");
					
				
				КонецЦикла;
				
				Если ОрдерНаПеремещение.Товары.Количество() > 0 Тогда 
					ЗапасыСервер.ЗаполнитьЦеныПоРозничнымЦенам(ОрдерНаПеремещение, "Товары", ОрдерНаПеремещение.Магазин, ОрдерНаПеремещение.Дата, Ложь);
				КонецЕсли;
				
				ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ОрдерНаПеремещениеТоваров.ПараметрыУказанияСерий(ОрдерНаПеремещение));
				ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(ОрдерНаПеремещение, ПараметрыУказанияСерий);
				
				ОрдерНаПеремещение.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
				МассивДокументов.Добавить(ОрдерНаПеремещение.Ссылка);
				
			КонецЦикла;
			
			ВыполненоУспешно = Истина;
			
		Исключение
			
			Инфо = ИнформацияОбОшибке();
			ТекстСообщенияОбОшибке = НСтр("ru = 'Ошибка при формировании документов: %1'");
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, КраткоеПредставлениеОшибки(Инфо));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Запасы. Создание ордера на перемещение'"), УровеньЖурналаРегистрации.Ошибка,,Инфо);
			ВыполненоУспешно = Ложь;
			
		КонецПопытки;
	
	КонецЕсли;
	
	Если ВыполненоУспешно И МассивДокументов.Количество() > 0 Тогда
		
		Для каждого СформированныйДокумент Из МассивДокументов Цикл
			
			СписокОрдеров.Добавить(СформированныйДокумент);
			
		КонецЦикла;
		
		ОбновитьПодвал();
		РассчитатьНаСервере();
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Ордера не сформированы.
									|Нет данных для заполнения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ВыполненоУспешно = Ложь;
		
	КонецЕсли;
	
	Возврат ВыполненоУспешно;
	
КонецФункции

// Добавляет на форму гиперссылки на сформированные ранее документы ОрдерНаПеремещениеТоваров.
//
&НаСервере
Процедура ОбновитьПодвал()
	
	Если СписокОрдеров.Количество() > 0 Тогда
		
		ДобавляемыеРеквизиты = Новый Массив;
		УдаляемыеРеквизиты   = Новый Массив;
		СуществующиеРеквизиты = Новый Массив;
		РеквизитыФормы = ПолучитьРеквизиты();
		
		Для каждого РеквизитФормы Из РеквизитыФормы Цикл
			
			Если Найти(РеквизитФормы.Имя,"Добавлен") Тогда
				
				СуществующиеРеквизиты.Добавить(РеквизитФормы);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого СуществующийРеквизит Из СуществующиеРеквизиты Цикл
			
			УдаляемыеРеквизиты.Добавить(СуществующийРеквизит);
			
		КонецЦикла;
		
		ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ОрдерНаПеремещениеТоваров");
		
		Для ИндексЭлемента = 0 По СписокОрдеров.Количество() - 1 Цикл
			
			ИмяЭлемента = "Добавлен" + ИндексЭлемента;
			Реквизит = Новый РеквизитФормы(ИмяЭлемента, ОписаниеТипов);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
			
		КонецЦикла;
		// Очищаем массив существующих реквизитов.
		СуществующиеРеквизиты.Очистить();
		КоличествоРеквизитов = УдаляемыеРеквизиты.Количество()-1;
		
		Для Инд = 0 По КоличествоРеквизитов Цикл
			
			ИмяРеквизита            = УдаляемыеРеквизиты[Инд].Имя;
			УдаляемыеРеквизиты[Инд] = ИмяРеквизита;
			
		КонецЦикла;
		
		ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
		// Удаление элементов
		УдаляемыеЭлементы = Новый Массив;
		
		Для каждого ПодчиненныйЭлемент Из Элементы Цикл
			
			Если Найти(ПодчиненныйЭлемент.Имя,"Добавлен") > 0 
				И ТипЗнч(ПодчиненныйЭлемент) = Тип("ПолеФормы") Тогда
				
				УдаляемыеЭлементы.Добавить(ПодчиненныйЭлемент);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
			
			Элементы.Удалить(УдаляемыйЭлемент);
			
		КонецЦикла;
		// Добавление элементов
		Для каждого Ордер Из СписокОрдеров Цикл
			
			ИндексЭлемента               = СписокОрдеров.Индекс(СписокОрдеров.НайтиПоЗначению(Ордер.Значение));
			Родитель                     = Элементы.ГруппаПодвал;
			Элемент                      = Элементы.Добавить("Добавлен"+  ИндексЭлемента, Тип("ПолеФормы"), Родитель);
			Элемент.Вид                  = ВидПоляФормы.ПолеНадписи;
			Элемент.ПутьКДанным          = "Добавлен" + ИндексЭлемента;
			Элемент.Гиперссылка          = Истина;
			Элемент.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Нет;
			
			ЭтаФорма["Добавлен" + ИндексЭлемента] = Ордер.Значение;
			
		КонецЦикла;
		
		Элементы.ГруппаПодвал.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаПодвал.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список Отправители по заданному магазину.
//
&НаСервере
Процедура ЗаполнитьСписокОтправителей()
		
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Магазин = &Магазин
		|	И Склады.Ссылка <> &Склад");
		
		Запрос.УстановитьПараметр("Склад", Объект.Склад);
		Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
		Отправители.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад"));
		Отправители.ЗаполнитьПометки(Истина);
		
	Иначе
		
		Отправители.Очистить();
		   
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКнопкуПоУмолчанию()

	Если ДеревоТоваров.ПолучитьЭлементы().Количество() > 0 Тогда
		Элементы.СформироватьОрдера.КнопкаПоУмолчанию = Истина;
		Элементы.СформироватьОрдера.Доступность = Истина;
	Иначе
		Элементы.ДеревоТоваровРассчитать.КнопкаПоУмолчанию = Истина;
		Элементы.СформироватьОрдера.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьНеАктуальностьРасчетов()
	
	ДеревоТоваров.ПолучитьЭлементы().Очистить();
	
	Элементы.ДеревоТоваров.Видимость = Ложь;
	Элементы.ТабДок.Видимость = Истина;
	
	Элементы.ТабДок.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	Элементы.ТабДок.ОтображениеСостояния.Текст = НСтр("ru = 'Данные не рассчитаны. Нажмите ""Рассчитать"" для заполнения таблицы.'");
	Элементы.ТабДок.ОтображениеСостояния.Видимость = Истина;
	
	УстановитьКнопкуПоУмолчанию();
	
КонецПроцедуры

#КонецОбласти
