
&НаКлиенте
Перем КэшированныеЗначения; // Используется механизмом обработки изменения реквизитов ТЧ.

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		
	Иначе
		
		ИдентификаторСтроки = НайтиСтрокуВТаблице(СтрокаРезультата);
		Если ИдентификаторСтроки = Неопределено Тогда
			ТекстПредупреждения = НСтр("ru = 'Номенклатура ""%1"" не найдена в табличной части ""Товары""'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтрокаРезультата.Номенклатура);
			СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		Иначе
			СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ДокументОснование", Объект.ДокументОснование) Тогда
	
		Отказ = Истина;
		Возврат;
	
	КонецЕсли;
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ЗаполнитьПоИнвентаризацииСервер();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ЗаполнениеПричин;
	
	ЗаполнитьТаблицуАналитик();
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.АналитикаХозяйственнойОперации)  Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыАналитикаХозяйственнойОперации Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.АналитикаХозяйственнойОперации = Объект.АналитикаХозяйственнойОперации;
	
	ЗаполнитьТаблицуАналитик();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ЗаполнитьТаблицуАналитик();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЗаполнитьТаблицуАналитик();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ТекущиеДанные.Количество = ТекущиеДанные.КоличествоУпаковок;
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;
	
	ЗаполнитьТаблицуАналитик();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТаблицадокументов

&НаКлиенте
Процедура ТаблицаДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ДокументСсылка);
	
	ОткрытьФорму("Документ.СписаниеТоваров.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("АдресТоваровВХранилище", ПоместитьВоВременноеХранилищеСервер());
	ДополнительныеПараметры.Вставить("ЭтоСсылочныйОбъект", Ложь);
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьПустыеСтроки(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.АналитикаХозяйственнойОперации)  Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.АналитикаХозяйственнойОперации)  Тогда
			СтрокаТаблицы.АналитикаХозяйственнойОперации = Объект.АналитикаХозяйственнойОперации;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьТаблицуАналитик();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументы(Команда)
	
	Для каждого СтрокаТаблицыДокументов Из ТаблицаДокументов Цикл
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", СтрокаТаблицыДокументов.ДокументСсылка);
		
		ОткрытьФорму("Документ.СписаниеТоваров.ФормаОбъекта", ПараметрыФормы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсеСтроки(Команда)
	
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.АналитикаХозяйственнойОперации = ПредопределенноеЗначение("Справочник.АналитикаХозяйственныхОпераций.ПустаяСсылка");
	КонецЦикла;
	
	ЗаполнитьТаблицуАналитик();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		
		СоздатьДокументыСервер();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПоИнвентаризацииСервер()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПересчетТоваровТовары.Номенклатура,
	|	ПересчетТоваровТовары.Характеристика,
	|	МАКСИМУМ(ПересчетТоваровТовары.Цена) КАК Цена
	|ПОМЕСТИТЬ ТаблицаЦен
	|ИЗ
	|	Документ.ПересчетТоваров.Товары КАК ПересчетТоваровТовары
	|ГДЕ
	|	ПересчетТоваровТовары.Ссылка.ДокументОснование = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ПересчетТоваровТовары.Номенклатура,
	|	ПересчетТоваровТовары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлениюИзлишковНедостачОстатки.Номенклатура,
	|	ТоварыКОформлениюИзлишковНедостачОстатки.Номенклатура.Наименование,
	|	ТоварыКОформлениюИзлишковНедостачОстатки.Характеристика,
	|	ТоварыКОформлениюИзлишковНедостачОстатки.КОформлениюАктовОстаток КАК Количество,
	|	ЕСТЬNULL(ТаблицаЦен.Цена, 0) КАК Цена
	|ПОМЕСТИТЬ ТаблицаЗапроса
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюИзлишковНедостач.Остатки(
	|			,
	|			ДокументОснование = &ДокументОснование
	|				И НЕ Номенклатура.ИспользоватьСерийныеНомера) КАК ТоварыКОформлениюИзлишковНедостачОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЦен КАК ТаблицаЦен
	|		ПО ТоварыКОформлениюИзлишковНедостачОстатки.Номенклатура = ТаблицаЦен.Номенклатура
	|			И ТоварыКОформлениюИзлишковНедостачОстатки.Характеристика = ТаблицаЦен.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапроса.Номенклатура,
	|	ТаблицаЗапроса.Характеристика,
	|	-ТаблицаЗапроса.Количество КАК Количество,
	|	-ТаблицаЗапроса.Количество КАК КоличествоУпаковок,
	|	ТаблицаЗапроса.Цена КАК Цена,
	|	-ТаблицаЗапроса.Количество * ТаблицаЗапроса.Цена КАК Сумма,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка
	|ИЗ
	|	ТаблицаЗапроса КАК ТаблицаЗапроса
	|ГДЕ
	|	ТаблицаЗапроса.Количество < 0";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументОснование);
	
	Результат = Запрос.Выполнить();
	Объект.Товары.Загрузить(Результат.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуАналитик()
	
	ТаблицаРасчета = Объект.Товары.Выгрузить(,"АналитикаХозяйственнойОперации, Сумма");
	ТаблицаРасчета.Колонки.Добавить("КоличествоПозиций", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРасчета.ЗаполнитьЗначения(1, "КоличествоПозиций");
	ТаблицаРасчета.Свернуть("АналитикаХозяйственнойОперации", "Сумма, КоличествоПозиций");
	
	ТаблицаАналитики.Загрузить(ТаблицаРасчета);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыСервер()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.АналитикаХозяйственнойОперации
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВЗапросе.АналитикаХозяйственнойОперации
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|ГДЕ
	|	НЕ ТаблицаВЗапросе.АналитикаХозяйственнойОперации = ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", Объект.Товары.Выгрузить(,"АналитикаХозяйственнойОперации"));
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
	
		СписаниеОбъект = Документы.СписаниеТоваров.СоздатьДокумент();
		СписаниеОбъект.АналитикаХозяйственнойОперации = СтрокаТаблицы.АналитикаХозяйственнойОперации;
		СписаниеОбъект.ДокументОснование = Объект.ДокументОснование;
		СписаниеОбъект.Дата = ТекущаяДатаСеанса();
		СписаниеОбъект.Ответственный = Пользователи.ТекущийПользователь();
		
		ЗаполнитьЗначенияСвойств(СписаниеОбъект, Объект.ДокументОснование, "Склад, Магазин, Организация");
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("АналитикаХозяйственнойОперации", СписаниеОбъект.АналитикаХозяйственнойОперации);
		
		СтрокиТовары = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаТовары Из СтрокиТовары Цикл
			
			Если СтрокаТовары.КоличествоУпаковок > 0 Тогда
				СтрокаДокумента = СписаниеОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТовары);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СписаниеОбъект.Товары.Количество() > 0 Тогда
			СписаниеОбъект.Записать();
			
			СтрокаТаблицыДокументов = ТаблицаДокументов.Добавить();
			СтрокаТаблицыДокументов.ДокументСсылка = СписаниеОбъект.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДокументы;
	Элементы.ФормаСоздатьДокументы.Видимость = Ложь;
	Элементы.ФормаОткрытьДокументы.Видимость = Истина;
	Элементы.ФормаОткрытьДокументы.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента);
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуВТаблице(СтруктураРезультат)
	
	ИдентификаторСтроки = Неопределено;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", СтруктураРезультат.Номенклатура);
	Если СтруктураРезультат.Свойство("Характеристика") Тогда
		СтруктураПоиска.Вставить("Характеристика", СтруктураРезультат.Характеристика);
	КонецЕсли;
	Если СтруктураПоиска.Количество() > 0 Тогда
		СтрокиТаблицы = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицы.Количество() = 0 Тогда
			
		Иначе
			ИдентификаторСтроки = СтрокиТаблицы[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ПоместитьВоВременноеХранилищеСервер()
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	Возврат АдресВХранилище;
	
КонецФункции

#КонецОбласти
