
&НаКлиенте
Перем КэшированныеЗначения;

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		
	Иначе // Номенклатура.
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТВызовСервера.ОбработатьДанныеПоНоменклатуреИзТСДСервер(ЭтотОбъект, СтруктураПараметров);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	
	ИдентификаторСтроки = Неопределено;
	
	ДобавленаСтрока = Ложь;
	ТекущаяСтрока = ПодключаемоеОборудованиеРТВызовСервера.ИнициализацияСтрокиТоваров(ЭтотОбъект, СтруктураПараметров, ДобавленаСтрока);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ЗавершениеОбработкиСтрокиТоваров(ЭтотОбъект, ТекущаяСтрока, СтруктураДействий);
	
	Модифицированность = Истина;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ДобавитьНоменклатуруПоСерийномуНомеру(ЭтотОбъект, СтруктураНомера);
	Возврат ИдентификаторСтроки;
	
КонецФункции

#КонецОбласти

// Процедура очистки количества/количества упаковок в табличной части.
//
&НаСервере
Процедура ОчиститьКоличество() Экспорт
	
	ОбработкаТабличнойЧастиТоварыСервер.ОчиститьКолонкиТабличнойЧасти(ЭтотОбъект, "Товары", "КоличествоУпаковок");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоАдресВременногоХранилища(Параметры.АдресТоваровВХранилище) Тогда
		
		ТекстИсключения = НСтр("ru='Не предусмотрено интерактивное открытие формы обработки.'");
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	АдресТоваровВХранилище = Параметры.АдресТоваровВХранилище;
	Заголовок              = Параметры.Заголовок;
	ТаблицаТоваров         = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);	
	Объект.Товары.Загрузить(ТаблицаТоваров);
	
	Для каждого СтрокаТоваров Из Объект.Товары Цикл
		
		СтрокаТоваров.КлючСтроки = СтрокаТоваров.НомерСтроки;
		СтрокаТоваров.КоличествоВДокументе = СтрокаТоваров.Количество;
		СтрокаТоваров.КоличествоУпаковокВДокументе = СтрокаТоваров.КоличествоУпаковок;
		СтрокаТоваров.Количество = 0;
		СтрокаТоваров.КоличествоУпаковок = 0;
		
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если Не ПеренестиВДокумент И Объект.Товары.Количество() > 0 Тогда
			
			Отказ = Истина;
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Результаты проверки не перенесены в документ. Перенести?'"), РежимДиалогаВопрос.ДаНетОтмена);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
		
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("АдресТоваровВХранилище", ПоместитьВоВременноеХранилищеСервер());
	ДополнительныеПараметры.Вставить("ЭтоСсылочныйОбъект", Ложь);
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Ложь, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОчиститьКоличество", Истина);
	ДополнительныеПараметры.Вставить("УчитыватьСерийныеНомераПриСвертке", Ложь);
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ПеренестиВДокумент = Истина;
	
	ПеренестиСтрокиВДокумент();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПеренестиДанныеВДокумент()
	
	Если ПеренестиВДокумент Тогда
		
		АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
		Структура = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
		ОповеститьОВыборе(Структура);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПодборНоменклатуры(Ответ, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Ответ) = Тип("Массив") Тогда
		Для Каждого Строка Из Ответ Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура",   Строка.Номенклатура);
			ПараметрыОтбора.Вставить("Упаковка",       Строка.Упаковка);
			ПараметрыОтбора.Вставить("Характеристика", Строка.Характеристика);
			НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденныеСтроки[0].КоличествоУпаковок = НайденныеСтроки[0].КоличествоУпаковок + Строка.Количество;
			Иначе
				НовыйПозиция = Объект.Товары.Добавить();
				НовыйПозиция.Номенклатура    = Строка.Номенклатура;
				НовыйПозиция.Упаковка        = Строка.Упаковка;
				НовыйПозиция.Характеристика  = Строка.Характеристика;
				НовыйПозиция.КоличествоУпаковок = Строка.Количество;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Помещает ТЧ Товары во временное хранилище.
// Возвращаемое значение: АдресТоваровВХранилище, Строка.
&НаСервере
Функция ПоместитьТоварыВХранилище()
	
	АдресТоваровВХранилище = ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);	
	
	Возврат АдресТоваровВХранилище;
	
КонецФункции

&НаКлиенте
Процедура ПеренестиСтрокиВДокумент()
	
	Если ПеренестиВДокумент Тогда
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("КоличествоУпаковок",0));
		ПереноситьСНулевымКоличеством = Истина;
		
		Если НайденныеСтроки.Количество() <> 0 Тогда
			
			ТекстВопроса = НСтр("ru='Переносить строки с нулевым количеством?'");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиНулевыеСтроки", ЭтотОбъект, НайденныеСтроки);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
			
		Иначе
			Модифицированность = Ложь;
			
			ПеренестиДанныеВДокумент();
		КонецЕсли;
		
	Иначе
		
		Модифицированность = Ложь;
		
		ПеренестиДанныеВДокумент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
		// отмена
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Ложь;
		
		ПеренестиДанныеВДокумент();
		Закрыть();
		
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		ПеренестиВДокумент = Истина;
		ПеренестиСтрокиВДокумент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНулевыеСтроки(Ответ, НайденныеСтроки) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Объект.Товары.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	ПеренестиДанныеВДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметров)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеСервер()
	
	ТоварыДляВыгрузки = Объект.Товары.Выгрузить();
	АдресВХранилище = ПоместитьВоВременноеХранилище(ТоварыДляВыгрузки, УникальныйИдентификатор);
	Возврат АдресВХранилище;
	
КонецФункции

#КонецОбласти
