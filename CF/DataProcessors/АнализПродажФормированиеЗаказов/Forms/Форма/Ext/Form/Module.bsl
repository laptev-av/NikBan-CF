
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОповещениеПоказатьОтбор(АдресХранилищаНастройкиКомпоновщика, ДополнительныеПараметры) Экспорт
	
	Если АдресХранилищаНастройкиКомпоновщика <> Неопределено Тогда
		
		АдресНастроек = АдресХранилищаНастройкиКомпоновщика;
		
		УстановитьБлокировкуФормы(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРезультатПослеЗакрытияДокумента(Результат, ДополнительныеПараметры) Экспорт
	
	ПоказатьОповещениеПользователя(НСтр("ru=''"),, НСтр("ru='Запущен процесс пересчета данных.'"),
									БиблиотекаКартинок.Информация32);
	РассчитатьРезультатСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковки          = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	Элементы.ПараметрыОкругления.Видимость = Не ИспользоватьУпаковки;
	Элементы.КЗаказуУпаковкаЕдИзм.Видимость = ИспользоватьУпаковки;
	// команды
	Элементы.ФормаПерейтиФормированиеЗаказов.Видимость 	= Ложь;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	НачалоПродаж         = ТекущаяДатаСеанса + 86400;
	ЖелаемаяДатаПоставки = ТекущаяДатаСеанса;
	ДатаРасчета          = ТекущаяДатаСеанса;
	
	ИзменитьВидимостьКолонок();
	
	ЗагрузитьНастройкиОтбораПоУмолчанию();
	
	УстановитьБлокировкуФормыСервер(Истина);
	
	Если НЕ ЗначениеЗаполнено(МетодПрогноза) Тогда
		МетодПрогноза = НСтр("ru = 'СреднедневныеПродажи'");
	КонецЕсли;
	СредненедельныеПродажи = МетодПрогноза = НСтр("ru = 'СредненедельныеПродажи'");
	ЭтаФорма.Элементы.РезультатПоказатьГрафикТренда.Видимость = СредненедельныеПродажи;
	
	УстановитьВидимостьДетальныхПоказателей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Обработка.АнализПродажФормированиеЗаказов.Форма.Форма.Открытие");
             
	ПроверитьПросроченныеЗаказы(ДатаРасчета, Магазин);
	УстановитьДоступностьКомандСозданияДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Магазин 							= Настройки.Получить("Магазин");
	Поставщик 							= Настройки.Получить("Поставщик");
	ПериодАнализа 						= Настройки.Получить("ПериодАнализа");
	ПланируемыйОстаток 					= Настройки.Получить("ПланируемыйОстаток");
	МетодПрогноза 						= Настройки.Получить("МетодПрогноза");
	Если НЕ ЗначениеЗаполнено(МетодПрогноза) Тогда
		МетодПрогноза = НСтр("ru = 'СреднедневныеПродажи'");
	КонецЕсли;
	СредненедельныеПродажи = МетодПрогноза = НСтр("ru = 'СредненедельныеПродажи'");
	ЭтаФорма.Элементы.РезультатПоказатьГрафикТренда.Видимость = СредненедельныеПродажи;
	
	ОкруглятьВБольшуюСторону		= Настройки.Получить("ОкруглятьВБольшуюСторону");
	ПорядокОкругления				= Настройки.Получить("ПорядокОкругления");
	
	Если НЕ ЗначениеЗаполнено(Магазин) Тогда
		Магазин 						= ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Магазин);
	КонецЕсли;
	
	Если Поставщик = Неопределено Тогда
		Ответственный					= Пользователи.ТекущийПользователь();
		Поставщик						= ЗначениеНастроекПовтИсп.ПолучитьПоставщикаПоУмолчанию(Ответственный, Поставщик);
	КонецЕсли;
	
	УстановитьВидимостьДетальныхПоказателей();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

//ОСНОВНАЯ СТРАНИЦА

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	ПроверитьПросроченныеЗаказы(ДатаРасчета, Магазин);
	УстановитьБлокировкуФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАнализаПриИзменении(Элемент)
	УстановитьБлокировкуФормы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	УстановитьБлокировкуФормы(Истина);
	УстановитьДоступностьКомандСозданияДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПродажПриИзменении(Элемент)
	УстановитьБлокировкуФормы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДнейПродажПриИзменении(Элемент)
	УстановитьБлокировкуФормы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПланируемыйОстатокПриИзменении(Элемент)
	УстановитьБлокировкуФормы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОкруглятьВБольшуюСторонуПриИзменении(Элемент)
	УстановитьБлокировкуФормы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПорядокОкругленияПриИзменении(Элемент)
	УстановитьБлокировкуФормы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура МетодПрогнозаПриИзменении(Элемент)
	
	СредненедельныеПродажи = МетодПрогноза = НСтр("ru = 'СредненедельныеПродажи'");
	ЭтаФорма.Элементы.РезультатПоказатьГрафикТренда.Видимость = СредненедельныеПродажи;
	УстановитьБлокировкуФормы(Истина);
	
КонецПроцедуры

//СТРАНИЦА ЗАКРЫТИЕ ЗАКАЗОВ

&НаКлиенте
Процедура ДатаЗакрытияЗаказовПриИзменении(Элемент)
	
	УстановитьБлокировкуФормы(Истина);
	ЗаполнитьЗаказыЗакрытиеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинЗакрытиеЗаказовПриИзменении(Элемент)
	УстановитьБлокировкуФормы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикЗакрытиеЗаказовПриИзменении(Элемент)
	УстановитьБлокировкуФормы(Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультат

&НаКлиенте
Процедура РезультатВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяПоле = Поле.Имя;
	
	Если ИмяПоле = "ОжидаемоеПоступлениеКоличество" Тогда
		Отказ = Ложь;
		ТабличныйДокументРезультат = Новый ТабличныйДокумент;
		
		ТекущаяСтрока = Элементы.Результат.ТекущаяСтрока;
		
		СформироватьРасшифровкуКПоступлению(ТекущаяСтрока, Отказ, ТабличныйДокументРезультат);
		
		Если Не Отказ Тогда
			ТабличныйДокументРезультат.Показать("Товары к поступлению");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяПоле <> "Номенклатура" И ИмяПоле <> "Характеристика"
		И ИмяПоле <> "РезультатПоставщик" И ИмяПоле <> "РезультатМагазин" Тогда 
		
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(Поле.Имя, "Результат", "");
		
	Значение = Элемент.ТекущиеДанные[ИмяРеквизита];
	Если ЗначениеЗаполнено(Значение) Тогда
		ПоказатьЗначение(,Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПометкаПриИзменении(Элемент)
	
	ПометкаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура КЗаказуУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Результат.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура КЗаказуУпаковкаПриИзменении(Элемент)
	
	ПересчитатьКоличествоУпаковок();
	ПересчитатьСуммуВСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура КЗаказуКоличествоПриИзменении(Элемент)
	
	// Пересчет упаковок
	Если ИспользоватьУпаковки Тогда
		ПересчитатьКоличествоУпаковок();
	КонецЕсли;
	ПересчитатьСуммуВСтроке();
	ОчиститьКЗаказуВозврату("КВозврату");
	
	ТекущиеДанные = Элементы.Результат.ТекущиеДанные;
	Если ТекущиеДанные.Пометка = Ложь Тогда
		ТекущиеДанные.Пометка = Истина;
		ПометкаПриИзменении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КЗаказуКоличествоУпаковокПриИзменении(Элемент)
	
	ОчиститьКЗаказуВозврату("КВозврату");
	
	ТекущиеДанные = Элементы.Результат.ТекущиеДанные;
	ТекущийКоэффициент = ?(ЗначениеЗаполнено(ТекущиеДанные.Коэффициент),ТекущиеДанные.Коэффициент, 1);
	ТекущиеДанные.КЗаказуКоличество = ТекущиеДанные.КЗаказуКоличествоУпаковок*ТекущийКоэффициент;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.КЗаказуКоличествоУпаковок) Тогда
		ТекущиеДанные.КЗаказуУпаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка");
		ТекущиеДанные.Коэффициент = 1;
	КонецЕсли;
	
	ПересчитатьСуммуВСтроке();
	
	Если ТекущиеДанные.Пометка = Ложь Тогда
		ТекущиеДанные.Пометка = Истина;
		ПометкаПриИзменении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КВозвратуКоличествоПриИзменении(Элемент)
	
	ОчиститьКЗаказуВозврату("КЗаказу");
	
	ПересчитатьСуммуВСтроке();
	
	ТекущиеДанные = Элементы.Результат.ТекущиеДанные;
	Если ТекущиеДанные.Пометка = Ложь Тогда
		ТекущиеДанные.Пометка = Истина;
		ПометкаПриИзменении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	
	ПересчитатьСуммуВСтроке();
	
	ТекущиеДанные = Элементы.Результат.ТекущиеДанные;
	Если ТекущиеДанные.Пометка = Ложь Тогда
		ТекущиеДанные.Пометка = Истина;
		ПометкаПриИзменении();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказыЗакрытие

&НаКлиенте
Процедура ЗаказыЗакрытиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗаказыЗакрытие.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

//ОСНОВНАЯ СТРАНИЦА

&НаКлиенте
Процедура ПоказатьОтбор(Команда)
	
	// Открыть редактор настроек схемы компоновки данных.
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru = 'Настройка отбора для формирования заказов'");
	
	ПараметрыФормы = Новый Структура(
			"НеПомещатьНастройкиВСхемуКомпоновкиДанных,
			|НеРедактироватьСхемуКомпоновкиДанных,
			|НеНастраиватьУсловноеОформление,
			|НеНастраиватьВыбор,
			|НеНастраиватьПорядок,
			|АдресСхемыКомпоновкиДанных,
			|АдресНастроекКомпоновкиДанных,
			|УникальныйИдентификатор,
			|Заголовок",
			Истина,
			Истина,
			Истина,
			Истина,
			Истина,
			АдресСхемыКомпоновкиДанных,
			АдресНастроек,
			ЭтаФорма.УникальныйИдентификатор,
			ЗаголовокФормыНастройкиСхемыКомпоновкиДанных);
			
	ДополнительныеПараметры = Новый Структура;
	Обработчик = Новый ОписаниеОповещения("ОповещениеПоказатьОтбор", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных",
					ПараметрыФормы,
					,
					,
					,
					,
					Обработчик,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
    
    // &ЗамерПроизводительности
    Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.АнализПродажФормированиеЗаказов.Форма.Форма.Команда.Рассчитать");
	
	РассчитатьРезультатСервер();
                 
    ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	        
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьСнятьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьСнятьФлажки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиЗакрытиеЗаказов(Команда)
	
	ДатаЗакрытияЗаказов = ДатаРасчета;
	МагазинЗакрытиеЗаказов = Магазин;
	
	Если ЗначениеЗаполнено(Поставщик) И ТипЗнч(Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПоставщикЗакрытиеЗаказовПоставщика = Поставщик;
	Иначе
		ПоставщикЗакрытиеЗаказовПоставщика = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;
	
	СменитьВидимостьСтраницы("СтраницаЗакрытиеЗаказов");
	
	ЗаполнитьЗаказыЗакрытиеСервер();
	УстановитьБлокировкуФормы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыЗаказПоставщику(Команда)
	СоздатьДокументы("ЗаказПоставщику");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыВозвратПоставщику(Команда)
	СоздатьДокументы("ВозвратПоставщику");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыЗаказНаПеремещение(Команда)
	СоздатьДокументы("ЗаказНаПеремещение");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыЗаказНаПеремещениеВозврат(Команда)
	СоздатьДокументы("ЗаказНаПеремещениеВозврат");
КонецПроцедуры

&НаКлиенте
Процедура СкрытьОтобразитьДетальныеПоказатели(Команда)
	
	ОтображатьДетальныеПоказатели = Не ОтображатьДетальныеПоказатели;
	
	УстановитьВидимостьДетальныхПоказателей();
	
КонецПроцедуры

//СТРАНИЦА ЗАКРЫТИЕ ЗАКАЗОВ

&НаКлиенте
Процедура ЗаполнитьЗаказыЗакрытие(Команда)
	
	Если НЕ ЗначениеЗаполнено(ДатаЗакрытияЗаказов) Тогда
		Текст = НСтр("ru = 'Поле ""Дата закрытия заказов"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "ДатаЗакрытияЗаказов",,);
		Возврат;
	КонецЕсли;
    
    // &ЗамерПроизводительности
    Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.АнализПродажФормированиеЗаказов.Форма.Форма.Команда.ЗаполнитьЗаказыЗакрытие");
	

	ЗаполнитьЗаказыЗакрытиеСервер();
	
	ПоказатьОповещениеПользователя(НСтр("ru=''"),, НСтр("ru='Таблица заказов перезаполнена.'"),
									БиблиотекаКартинок.Информация32);
	
	Модифицированность = Ложь;
    
    ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗакрытиеЗаказов(Команда)
    
    // &ЗамерПроизводительности
    Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.АнализПродажФормированиеЗаказов.Форма.Форма.Команда.ВыполнитьЗакрытиеЗаказов");	
    
    ВыполнитьЗакрытиеЗаказовСервер();
	ЗаполнитьЗаказыЗакрытиеСервер();
          
    ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиЗакрытиеЗаказов(Команда)
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ЗаказыЗакрытие.ВыделенныеСтроки Цикл
		СтрокаДанныеТаблица = ЗаказыЗакрытие.НайтиПоИдентификатору(ВыделеннаяСтрока);
		СтрокаДанныеТаблица.Пометка = Истина;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиЗакрытиеЗаказов(Команда)
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ЗаказыЗакрытие.ВыделенныеСтроки Цикл
		СтрокаДанныеТаблица = ЗаказыЗакрытие.НайтиПоИдентификатору(ВыделеннаяСтрока);
		СтрокаДанныеТаблица.Пометка = Ложь;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиФормированиеЗаказов(Команда)
	
	СменитьВидимостьСтраницы("ОсновнаяСтраница");
	ПроверитьПросроченныеЗаказы(ДатаРасчета, Магазин);
	
	УстановитьБлокировкуФормы(Истина);
	
КонецПроцедуры

// ПРОГНОЗИРОВАНИЕ

&НаКлиенте
Процедура ПоказатьГрафикТренда(Команда)
	
	Если ЗначениеЗаполнено(АдресДанныхПрогноза) Тогда
		ТекущаяСтрока = Элементы.Результат.ТекущиеДанные;
		
		Если ТекущаяСтрока <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
				Если ЗначениеЗаполнено(ТекущаяСтрока.Магазин) Тогда
					МагазинДиаграммы = ТекущаяСтрока.Магазин;
				Иначе
					МагазинДиаграммы = Магазин;
				КонецЕсли;
				
				НоменклатураДиаграммы = ТекущаяСтрока.Номенклатура;
				ХарактеристикаДиаграммы = ТекущаяСтрока.Характеристика;
				
				ТабличныйДокумент = СформироватьГрафикТренда();
				
				ЗаголовокДокумента = НСтр("ru = 'График продаж номенклатуры: %1'");
				ЗаголовокДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										ЗаголовокДокумента,
										НоменклатураДиаграммы);
										
				ОбластиОбъектов = Новый СписокЗначений;
				ИдентификаторПечатнойФормы = "ГрафикТренда";
				
				КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
				ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
				ПечатнаяФорма.СинонимМакета = НСтр("ru = 'График продаж номенклатуры'");
				ПечатнаяФорма.ТабличныйДокумент = ТабличныйДокумент;
				ПечатнаяФорма.ИмяФайлаПечатнойФормы = ЗаголовокДокумента;
				
				УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, ОбластиОбъектов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПометкаПриИзменении()
	
	ТекущиеДанные = Элементы.Результат.ТекущиеДанные;
	Пометка = ТекущиеДанные.Пометка;
	ТекущаяСтрока = Элементы.Результат.ТекущаяСтрока;
	ТекущийПоставщик = ТекущиеДанные.Поставщик;
	
	Если Пометка Тогда
		СчетчикПометок = СчетчикПометок + 1;
		УстановитьПометку(ТекущаяСтрока);
		УстановитьБлокировкуСтрок(ТекущийПоставщик);
	Иначе
		СчетчикПометок = СчетчикПометок - 1;
		СнятьПометку(ТекущаяСтрока, Истина, Истина);
		СнятьБлокировкуСтрок();
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчета суммы в строке.
//
&НаКлиенте
Процедура ПересчитатьСуммуВСтроке()
	ТекущиеДанные = Элементы.Результат.ТекущиеДанные;
	
	ТекущиеДанные.СуммаЗаказа = ТекущиеДанные.КЗаказуКоличество * ТекущиеДанные.Цена;
	ТекущиеДанные.СуммаВозврата = ТекущиеДанные.КВозвратуКоличество * ТекущиеДанные.Цена;
	
КонецПроцедуры

// Процедура пересчета количества упаковок в строке.
//
&НаКлиенте
Процедура ПересчитатьКоличествоУпаковок()
	ТекущиеДанные = Элементы.Результат.ТекущиеДанные;
	
	ВыбранныйКоэффициент = ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.КЗаказуУпаковка, "Коэффициент");
	ВыбранныйКоэффициент = ?(ЗначениеЗаполнено(ВыбранныйКоэффициент),ВыбранныйКоэффициент, 1);
	
	ТекущиеДанные.КЗаказуКоличество = ТекущиеДанные.КЗаказуКоличествоУпаковок*ВыбранныйКоэффициент;
	ТекущиеДанные.Цена = ТекущиеДанные.БазоваяЦена * ВыбранныйКоэффициент;
	ТекущиеДанные.Коэффициент = ВыбранныйКоэффициент;
	
КонецПроцедуры

// Процедура устаноки пометки в строках дерева значений "Результат".
//
// Параметры:
// <ТекущаяСтрока>  - <Число> - индекс текущей строки дерева значений.
//
&НаКлиенте
Процедура УстановитьПометку(ТекущаяСтрока)
	
	ЭлементДерева = Результат.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если НЕ ЭлементДерева.Пометка Тогда
		ЭлементДерева.Пометка = Истина;
		СчетчикПометок = СчетчикПометок + 1;
	КонецЕсли;
	
	ДочерниеЭлементы = ЭлементДерева.ПолучитьЭлементы();
	Для Каждого Элемент Из ДочерниеЭлементы Цикл
		УстановитьПометку(Элемент.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

// Процедура установки пометки в строках дерева значений "Результат".
//
// Параметры:
// <ТекущаяСтрока>  - <Число> - индекс текущей строки дерева значений.
//
// <ИскатьРодителя>  - <Булево> - признак поиска пометок в родительских строках.
//
// <ИскатьДочерние>  - <Булево> - признак поиска пометок в дочерних строках.
//
&НаКлиенте
Процедура СнятьПометку(ТекущаяСтрока, ИскатьРодителя, ИскатьДочерние)
	
	ЭлементДерева = Результат.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ЭлементДерева.Пометка Тогда
		ЭлементДерева.Пометка	= Ложь;
		СчетчикПометок = СчетчикПометок - 1;
	КонецЕсли;
	
	Если ИскатьРодителя Тогда
		Родитель = ЭлементДерева.ПолучитьРодителя();
		Если Родитель <> Неопределено Тогда 
			СнятьПометку(Родитель.ПолучитьИдентификатор(), Истина, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если ИскатьДочерние Тогда
		ДочерниеЭлементы = ЭлементДерева.ПолучитьЭлементы();
		Для Каждого Элемент Из ДочерниеЭлементы Цикл
			СнятьПометку(Элемент.ПолучитьИдентификатор(), Ложь, Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура снятия/установки пометок для выделенных строк.
//
// Параметры:
//  <Пометка>  - <Булево> - признак пометки
//
&НаКлиенте
Процедура УстановитьСнятьФлажки(Пометка)
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Результат.ВыделенныеСтроки Цикл
		СтрокаДанныеДерева = Результат.НайтиПоИдентификатору(ВыделеннаяСтрока);
	
		Если СтрокаДанныеДерева.Пометка <> Пометка Тогда
			Если Пометка Тогда
				УстановитьПометку(ВыделеннаяСтрока);
				УстановитьБлокировкуСтрок(СтрокаДанныеДерева.Поставщик);
			Иначе
				СнятьПометку(ВыделеннаяСтрока, Истина, Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СнятьБлокировкуСтрок();
	
КонецПроцедуры

// Процедура очистки полей "К заказу" или "К возврату" в строке дерева.
//
// Параметры:
// <ИмяПоля>  - <Строка> - Имя поля которое необходимо очистить.
//
&НаКлиенте
Процедура ОчиститьКЗаказуВозврату(ИмяПоля)
	
	ТекущиеДанные = Элементы.Результат.ТекущиеДанные;
	
	Если ИмяПоля = "КЗаказу" Тогда
		ТекущиеДанные.КЗаказуКоличество 		= 0;
		ТекущиеДанные.КЗаказуКоличествоУпаковок = 0;
		ТекущиеДанные.КЗаказуУпаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка");
	Иначе
		ТекущиеДанные.КВозвратуКоличество		= 0;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет загрузку настроек отбора из настроек по умолчанию.
//
&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию()

	УстановитьПривилегированныйРежим(Истина);

	Обработка = РеквизитФормыВЗначение("Объект");
	Если ИспользоватьАссортимент Тогда
		СхемаКомпоновкиДанных = Обработка.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанныхАссортимент");
	Иначе
		СхемаКомпоновкиДанных = Обработка.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	КонецЕсли;

	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);

	АдресНастроек = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

// Процедура заполняет дерево формы Результат.
//
&НаСервере
Процедура РассчитатьРезультатСервер()
	
	Если ПоверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
    
    ДатаРасчета = ТекущаяДатаСеанса();
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДатаРасчета"                  , ДатаРасчета);
	СтруктураПараметров.Вставить("УчитыватьТоварыКПоступлению"  , Истина);
	СтруктураПараметров.Вставить("ДатаАнализаНачало"            , НачалоДня(ПериодАнализа.ДатаНачала));
	СтруктураПараметров.Вставить("ДатаАнализаКонец"             , КонецДня(ПериодАнализа.ДатаОкончания));
	СтруктураПараметров.Вставить("ИспользоватьУпаковки"         , ИспользоватьУпаковки);
	СтруктураПараметров.Вставить("ИспользоватьЗаказыПокупателей", ИспользоватьЗаказыПокупателей);
	СтруктураПараметров.Вставить("ПериодПоставкиПо"             , КонецДня(НачалоПродаж + КоличествоДнейПродаж*86400));
	СтруктураПараметров.Вставить("КоличествоДнейПродаж"         , КоличествоДнейПродаж + ПланируемыйОстаток);
	СтруктураПараметров.Вставить("НачалоПродаж"                 , НачалоДня(НачалоПродаж));
	СтруктураПараметров.Вставить("ДнейДоНачалаПродаж"           , (НачалоДня(НачалоПродаж) - НачалоДня(ДатаРасчета))/86400);
	СтруктураПараметров.Вставить("ПорядокОкругления"            , ?(ЗначениеЗаполнено(ПорядокОкругления), ПорядокОкругления, 0.001));
	СтруктураПараметров.Вставить("ОкруглятьВБольшуюСторону"     , ОкруглятьВБольшуюСторону);
	СтруктураПараметров.Вставить("Округлять"                    , (ОкруглятьВБольшуюСторону ИЛИ ЗначениеЗаполнено(ПорядокОкругления)) И НЕ ИспользоватьУпаковки);
	
	Если ИспользоватьАссортимент Тогда
		СтруктураПараметров.Вставить("ЖелаемаяДатаПоставки", ЖелаемаяДатаПоставки);
	КонецЕсли;
	
	Если ПолучитьИзВременногоХранилища(АдресНастроек) <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(ПолучитьИзВременногоХранилища(АдресНастроек));
	КонецЕсли;
	
	Для Каждого Параметр Из СтруктураПараметров Цикл
		ПараметрКомпоновкиДанных = Новый ПараметрКомпоновкиДанных(Параметр.Ключ);
		Если ПараметрКомпоновкиДанных <> Неопределено Тогда
			ПараметрКомпоновкиДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКомпоновкиДанных);
			Если ПараметрКомпоновкиДанных <> Неопределено Тогда
				ПараметрКомпоновкиДанных.Значение = Параметр.Значение;
				ПараметрКомпоновкиДанных.Использование = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Поставщик) Тогда
		ЭлементОтбораПоставщик = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораПоставщик.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Поставщик");
		ЭлементОтбораПоставщик.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораПоставщик.Использование  = Истина;
		ЭлементОтбораПоставщик.ПравоеЗначение = Поставщик;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Магазин) Тогда
		ЭлементОтбораМагазин = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораМагазин.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Магазин");
		ЭлементОтбораМагазин.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораМагазин.Использование  = Истина;
		ЭлементОтбораМагазин.ПравоеЗначение = Магазин;
		
		ПроверитьЗаполненностьРасписания();
	КонецЕсли;
	
	ДеревоЗначенийРезультат = Новый ДеревоЗначений;
	//ДеревоЗначенийРезультат = Новый ТаблицаЗначений;
	Обработка = РеквизитФормыВЗначение("Объект");
	
	СКД = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	// Группировки
	Если Не ЗначениеЗаполнено(Поставщик) И Не ЗначениеЗаполнено(Магазин) Тогда
		ИмяГруппировки = "ПоставщикМагазин";
	ИначеЕсли ЗначениеЗаполнено(Поставщик) И Не ЗначениеЗаполнено(Магазин) Тогда
		ИмяГруппировки = "Магазин";
	ИначеЕсли Не ЗначениеЗаполнено(Поставщик) И ЗначениеЗаполнено(Магазин) Тогда
		ИмяГруппировки = "Поставщик";
	Иначе
		ИмяГруппировки = "ДетальныеЗаписи";
	КонецЕсли;

	Для Каждого ГруппировкаСКД Из КомпоновщикНастроек.Настройки.Структура Цикл
		ГруппировкаСКД.Использование = ?(ГруппировкаСКД.Имя = ИмяГруппировки, Истина, Ложь);
	КонецЦикла;

	УстановитьПривилегированныйРежим(Истина);
	// Вывод
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных();
	Макет = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СКД, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ВыводВКоллекциюЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ВыводВКоллекциюЗначений.УстановитьОбъект(ДеревоЗначенийРезультат);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновкиДанных.Инициализировать(Макет,,, Истина);
	ВыводВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(Поставщик) Тогда
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбораПоставщик);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Магазин) Тогда
		КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбораМагазин);
	КонецЕсли;
	
	Если ИспользоватьУпаковки Тогда
		ДеревоЗначенийРезультат.Колонки.КЗаказуКоличество.Имя = "КЗаказуНеИспользовать";
		ДеревоЗначенийРезультат.Колонки.КЗаказуКоличествоВУпаковках.Имя = "КЗаказуКоличество";
	КонецЕсли;
	
	ДеревоФормы = РеквизитФормыВЗначение("Результат");
	ДеревоФормы.Строки.Очистить();
	
	ДанныеПрогноза = Неопределено;
	
	Если СредненедельныеПродажи Тогда
		
		ДанныеПрогноза = СтруктураДанныхПрогноза(ДеревоЗначенийРезультат);
		АдресДанныхПрогноза = ПоместитьВоВременноеХранилище(ДанныеПрогноза, Новый УникальныйИдентификатор);
		
	КонецЕсли;
	ПолучитьСтрокиДерева(ДеревоФормы, ДеревоЗначенийРезультат, , , ДанныеПрогноза);
   	ЗначениеВРеквизитФормы(ДеревоФормы, "Результат");
	
	УстановитьБлокировкуФормыСервер(Ложь);
	
	СчетчикПометок = 0;
	БлокировкаСтрокУстановлена = Ложь;
    
КонецПроцедуры

// Процедура заполнения пустого дерева значений из другого дерева (результата СКД).
//
&НаСервере
Процедура ПолучитьСтрокиДерева(
			ДеревоФормы,
			ДеревоЗначенийРезультат,
			СтрокаДереваРезультатВходящая = Неопределено,
			СтрокаДереваФормыВходящая = Неопределено,
			ДанныеПрогноза = Неопределено)

	Если СтрокаДереваРезультатВходящая = Неопределено Тогда
		Для Каждого СтрокаДереваРезультат Из ДеревоЗначенийРезультат.Строки Цикл
			ПолучитьСтрокиДерева(ДеревоФормы, ДеревоЗначенийРезультат, СтрокаДереваРезультат, , ДанныеПрогноза);
		КонецЦикла;
	Иначе
		Если СтрокаДереваРезультатВходящая.Родитель = Неопределено Тогда
			СтрокаДереваФормы = ДеревоФормы.Строки.Добавить();
		Иначе
			СтрокаДереваФормы = СтрокаДереваФормыВходящая.Строки.Добавить();
		КонецЕсли;
		
		Для Каждого СтрокаДереваРезультат Из СтрокаДереваРезультатВходящая.Строки Цикл
			ПолучитьСтрокиДерева(ДеревоФормы, ДеревоЗначенийРезультат, СтрокаДереваРезультат, СтрокаДереваФормы, ДанныеПрогноза);
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(СтрокаДереваФормы, СтрокаДереваРезультатВходящая);
		Если ЗначениеЗаполнено(СтрокаДереваФормы.Номенклатура)
			И ТипЗнч(СтрокаДереваФормы.Поставщик) = Тип("СправочникСсылка.Магазины") Тогда
			СтрокаДереваФормы.ВнутреннийЗаказ = Истина;
		КонецЕсли;
		Если СредненедельныеПродажи Тогда
			Если ДанныеПрогноза <> Неопределено И ЗначениеЗаполнено(СтрокаДереваФормы.Номенклатура) Тогда
				СтруктураПоиска = Новый Структура;
				Если ЗначениеЗаполнено(Магазин) Тогда
					СтруктураПоиска.Вставить("Магазин", Магазин);
				Иначе
					СтруктураПоиска.Вставить("Магазин", СтрокаДереваФормы.Магазин);
				КонецЕсли;
				СтруктураПоиска.Вставить("Номенклатура", СтрокаДереваФормы.Номенклатура);
				СтруктураПоиска.Вставить("Характеристика", СтрокаДереваФормы.Характеристика);
				СтрокиПрогноза = ДанныеПрогноза.ТаблицаПрогноза.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПрогноза.Количество() > 0 Тогда
					ПрогнозДоПродаж = 0;
					ПрогнозПродаж = 0;
					Для Каждого СтрокаПрогноза Из СтрокиПрогноза Цикл
						Если СтрокаПрогноза.Дата < НачалоПродаж Тогда
							ПрогнозДоПродаж = ПрогнозДоПродаж + СтрокаПрогноза.Количество;
						Иначе
							ПрогнозПродаж = ПрогнозПродаж + СтрокаПрогноза.Количество;
						КонецЕсли;
					КонецЦикла;
					СтрокаДереваФормы.Прогноз = ПрогнозПродаж;
					СтрокаДереваФормы.ОстатокНаНачалоПродажКоличество = Макс(СтрокаДереваРезультатВходящая.ОстатокНаДатуРасчета - ПрогнозДоПродаж, 0);
					
					ИтоговаяПотребность = 0;
					ПересчитатьПотребность = Истина;
					
					Если ИспользоватьАссортимент Тогда
						Если НЕ СтрокаДереваФормы.РазрешеныЗакупки Тогда
							ПересчитатьПотребность = Ложь;
							Если НЕ СтрокаДереваФормы.РазрешеныПродажи Тогда
								ИтоговаяПотребность = Мин(СтрокаДереваФормы.ТоварыКОтгрузкеКоличество - СтрокаДереваФормы.ОстатокНаНачалоПродажКоличество, 0);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если ПересчитатьПотребность Тогда
						Если СтрокаДереваФормы.МетодРасчетаПотребности = Перечисления.МетодыРасчетаПотребности.ПоЗаказамПокупателей Тогда
							ИтоговаяПотребность = СтрокаДереваФормы.ЗаказаноОстаток
												- СтрокаДереваФормы.ОстатокНаНачалоПродажКоличество
												- СтрокаДереваФормы.ОжидаемоеПоступлениеКоличество
												- СтрокаДереваФормы.ТоварыКПоступлениюКоличество
												+ СтрокаДереваФормы.ТоварыКОтгрузкеКоличество;
						ИначеЕсли ИспользоватьЗаказыПокупателей
							И СтрокаДереваФормы.МетодРасчетаПотребности = Перечисления.МетодыРасчетаПотребности.ПоСтатистикеПродажТорговогоЗала Тогда
							ИтоговаяПотребность = Макс(СтрокаДереваФормы.ЗаказаноОстаток, ПрогнозПродаж)
												- СтрокаДереваФормы.ОстатокНаНачалоПродажКоличество
												- СтрокаДереваФормы.ОжидаемоеПоступлениеКоличество
												- СтрокаДереваФормы.ТоварыКПоступлениюКоличество
												+ СтрокаДереваФормы.ТоварыКОтгрузкеКоличество;
						Иначе //
							ИтоговаяПотребность = ПрогнозПродаж + СтрокаДереваФормы.ЗаказаноОстаток
												- СтрокаДереваФормы.ОстатокНаНачалоПродажКоличество
												- СтрокаДереваФормы.ОжидаемоеПоступлениеКоличество
												- СтрокаДереваФормы.ТоварыКПоступлениюКоличество
												+ СтрокаДереваФормы.ТоварыКОтгрузкеКоличество;
						КонецЕсли;
					КонецЕсли;
					
					Если ИспользоватьУпаковки Тогда
						Если (НЕ СтрокаДереваФормы.Весовой)
							И ИтоговаяПотребность <> Цел(ИтоговаяПотребность) Тогда
							ИтоговаяПотребность = Цел(ИтоговаяПотребность) + 1;
						КонецЕсли;
					Иначе
						Если ПорядокОкругления <> 0 Тогда
							Если ИтоговаяПотребность > 0 Тогда
								ИтоговаяПотребность = Ценообразование.ОкруглитьЦену(ИтоговаяПотребность, ПорядокОкругления, ОкруглятьВБольшуюСторону);
							ИначеЕсли ИтоговаяПотребность < 0 Тогда
								ИтоговаяПотребность = -Ценообразование.ОкруглитьЦену(-ИтоговаяПотребность, ПорядокОкругления, ОкруглятьВБольшуюСторону);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					СтрокаДереваФормы.ПотребностьКоличество = ИтоговаяПотребность;
					
					Если ИтоговаяПотребность >= 0 Тогда
						СтрокаДереваФормы.КЗаказуКоличество = ИтоговаяПотребность;
						СтрокаДереваФормы.КЗаказуКоличествоУпаковок = ИтоговаяПотребность * СтрокаДереваФормы.Коэффициент;
						Если Цел(СтрокаДереваФормы.КЗаказуКоличествоУпаковок) <> СтрокаДереваФормы.КЗаказуКоличествоУпаковок Тогда
							СтрокаДереваФормы.КЗаказуКоличествоУпаковок = Цел(СтрокаДереваФормы.КЗаказуКоличествоУпаковок) + 1;
						КонецЕсли;
						СтрокаДереваФормы.КВозвратуКоличество = 0;
						СтрокаДереваФормы.СуммаВозврата = 0;
						СтрокаДереваФормы.СуммаЗаказа = СтрокаДереваФормы.КЗаказуКоличествоУпаковок * СтрокаДереваФормы.Цена;
					Иначе
						СтрокаДереваФормы.КЗаказуКоличество = 0;
						СтрокаДереваФормы.КЗаказуКоличествоУпаковок = 0;
						СтрокаДереваФормы.КВозвратуКоличество = - ИтоговаяПотребность;
						СтрокаДереваФормы.СуммаЗаказа = 0;
						СтрокаДереваФормы.СуммаВозврата = - ИтоговаяПотребность * СтрокаДереваФормы.Цена;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДереваФормы.Номенклатура) Тогда
			Если СтрокаДереваФормы.ПотребностьКоличество = 0 Тогда
				Если (НЕ ИспользоватьАссортимент)
					ИЛИ (НЕ СтрокаДереваФормы.КонтролироватьАссортимент)
					ИЛИ (СтрокаДереваФормы.КонтролироватьАссортимент
							И НЕ СтрокаДереваФормы.РазрешеныЗакупки) Тогда
					Если СтрокаДереваРезультатВходящая.Родитель = Неопределено Тогда
						ДеревоФормы.Строки.Удалить(СтрокаДереваФормы);
					Иначе
						СтрокаДереваФормыВходящая.Строки.Удалить(СтрокаДереваФормы);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если СтрокаДереваФормы.Строки.Количество() = 0 Тогда
				Если СтрокаДереваРезультатВходящая.Родитель = Неопределено Тогда
					ДеревоФормы.Строки.Удалить(СтрокаДереваФормы);
				Иначе
					СтрокаДереваФормыВходящая.Строки.Удалить(СтрокаДереваФормы);
				КонецЕсли;
			Иначе
				ОбновитьИтогиСтроки(СтрокаДереваФормы);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СтатистикаПродажСредняяПродажа.Видимость = НЕ СредненедельныеПродажи;
	Элементы.СтатистикаПродажПрогноз.Видимость = СредненедельныеПродажи;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиСтроки(СтрокаДереваФормы)
	
	Если СтрокаДереваФормы.Строки.Количество() > 0 Тогда
		ОбщаяСумма = 0;
		ОбщаяСуммаВозврата = 0;
		Для Каждого Строка Из СтрокаДереваФормы.Строки Цикл
			ОбщаяСумма = ОбщаяСумма + Строка.СуммаЗаказа;
			ОбщаяСуммаВозврата = ОбщаяСуммаВозврата + Строка.СуммаВозврата;
		КонецЦикла;
		СтрокаДереваФормы.СуммаЗаказа = ОбщаяСумма;
		СтрокаДереваФормы.СуммаВозврата = ОбщаяСуммаВозврата;
		Если НЕ ЗначениеЗаполнено(СтрокаДереваФормы.Номенклатура) Тогда
			СтрокаДереваФормы.КЗаказуКоличество = 0;
			СтрокаДереваФормы.КЗаказуКоличествоУпаковок = 0;
			СтрокаДереваФормы.КВозвратуКоличество = 0;
			СтрокаДереваФормы.ПотребностьКоличество = 0;
		КонецЕсли;
		СтрокаДереваФормы.Строки.Сортировать("КЗаказуКоличество УБЫВ, КВозвратуКоличество");
	КонецЕсли;
	
КонецПроцедуры

// Функция проверки заполнения реквизитов формы.
//
&НаСервере
Функция ПоверитьЗаполнение()
	
	РезультатПроверки = Ложь;
	
	Если Не ЗначениеЗаполнено(ЖелаемаяДатаПоставки) Тогда
		Текст = НСтр("ru = 'Поле ""Желаемая дата поставки"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "ЖелаемаяДатаПоставки",,);
		РезультатПроверки = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЖелаемаяДатаПоставки) И ЗначениеЗаполнено(НачалоПродаж) И ЖелаемаяДатаПоставки > НачалоПродаж Тогда
		Текст = НСтр("ru = 'Желаемая дата поставки не может быть больше даты начала продаж'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "ЖелаемаяДатаПоставки",,);
		РезультатПроверки = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НачалоПродаж) Тогда
		Текст = НСтр("ru = 'Поле ""Начало продаж"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "НачалоПродаж",,);
		РезультатПроверки = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КоличествоДнейПродаж) Тогда
		Текст = НСтр("ru = 'Поле ""Количество дней продаж"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "КоличествоДнейПродаж",,);
		РезультатПроверки = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПериодАнализа) Тогда
		Текст = НСтр("ru = 'Поле ""Период анализа"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "ПериодАнализа",,);
		РезультатПроверки = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодАнализа) И Не ЗначениеЗаполнено(ПериодАнализа.ДатаНачала) Тогда
		Текст = НСтр("ru = 'Поле ""Дата начала периода анализа"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "ПериодАнализа",,);
		РезультатПроверки = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодАнализа) И Не ЗначениеЗаполнено(ПериодАнализа.ДатаОкончания) Тогда
		Текст = НСтр("ru = 'Поле ""Дата окончания периода анализа"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "ПериодАнализа",,);
		РезультатПроверки = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаРасчета) И ЗначениеЗаполнено(НачалоПродаж) И ДатаРасчета > НачалоПродаж Тогда
		Текст = НСтр("ru = 'Дата начала продаж должна быть больше текущей даты'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "НачалоПродаж",,);
		РезультатПроверки = Истина;
	КонецЕсли;
	
	Если НачалоДня(ДатаРасчета) > НачалоДня(ТекущаяДатаСеанса()) Тогда
		Текст = НСтр("ru = 'Дата расчета не может быть больше текущей'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "ДатаРасчета");
		РезультатПроверки = Истина;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Процедура создания данных для формирования документов.
//
// Параметры:
//  <МассивДанных>  - <Массив> - пустой массив, в который передаются данные для формирования.
//                 
//  <Отказ>  - <Булево> - признак возникновения ошибки.
//                 
//  <ТекстОшибки>  - <Строка> - строковое описание ошибки.
&НаСервере
Процедура СоздатьДокументыСервер(МассивДанных, ТипДокумента, Отказ, ТекстОшибки)
	
	Дерево = РеквизитФормыВЗначение("Результат");
	ТаблицаВыделенныхСтрок = РеквизитФормыВЗначение("ВыделенныеСтроки");
	ТаблицаВыделенныхСтрок.Очистить();
	ПараметрыОтбора = Новый Структура("Пометка", Истина);
	МассивСтрок = Дерево.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаМассива.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаВыделенныхСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаМассива);
		
		Если НЕ ИспользоватьУпаковки Тогда
			СтрокаМассива.КЗаказуКоличествоУпаковок = СтрокаМассива.КЗаказуКоличество;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаМассива.КЗаказуКоличествоУпаковок) Тогда
			СтрокаТаблицы.Количество = СтрокаМассива.КЗаказуКоличествоУпаковок;
			СтрокаТаблицы.Упаковка	 = СтрокаМассива.КЗаказуУпаковка;
		ИначеЕсли ЗначениеЗаполнено(СтрокаМассива.КВозвратуКоличество) Тогда
			СтрокаТаблицы.КВозврату = СтрокаМассива.КВозвратуКоличество;
		Иначе
			СтрокаТаблицы.Количество = СтрокаМассива.КЗаказуКоличество;
			СтрокаТаблицы.Упаковка	 = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
	Если ТипДокумента = "ЗаказПоставщику" Тогда
		УсловиеГде = "Таблица.Количество > 0 И 
					|ВЫБОР КОГДА Таблица.Поставщик <> Неопределено ТОГДА
					|	Таблица.Поставщик Ссылка Справочник.Контрагенты
					|ИНАЧЕ ИСТИНА КОНЕЦ"
					
	ИначеЕсли ТипДокумента = "ЗаказНаПеремещение" Тогда
		УсловиеГде = "Таблица.Количество > 0 И 
					|ВЫБОР КОГДА Таблица.Поставщик <> Неопределено ТОГДА
					|	Таблица.Поставщик Ссылка Справочник.Магазины
					|ИНАЧЕ ИСТИНА КОНЕЦ"
					
	ИначеЕсли ТипДокумента = "ВозвратПоставщику" Тогда
		УсловиеГде = "Таблица.КВозврату > 0 И 
					|ВЫБОР КОГДА Таблица.Поставщик <> Неопределено ТОГДА
					|	Таблица.Поставщик Ссылка Справочник.Контрагенты
					|ИНАЧЕ ИСТИНА КОНЕЦ"
					
	ИначеЕсли ТипДокумента = "ЗаказНаПеремещениеВозврат" Тогда
		УсловиеГде = "Таблица.КВозврату > 0 И 
					|ВЫБОР КОГДА Таблица.Поставщик <> Неопределено ТОГДА
					|	Таблица.Поставщик Ссылка Справочник.Магазины
					|ИНАЧЕ ИСТИНА КОНЕЦ"
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Поставщик) Тогда
		ТаблицаВыделенныхСтрок.ЗаполнитьЗначения(Поставщик, "Поставщик");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Магазин) Тогда
		ТаблицаВыделенныхСтрок.ЗаполнитьЗначения(Магазин, "Магазин");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Поставщик,
	|	Таблица.Магазин,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Количество,
	|	Таблица.Упаковка,
	|	Таблица.Цена,
	|	Таблица.КВозврату
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Поставщик КАК Поставщик,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	ВЫБОР КОГДА Таблица.Количество = 0 ТОГДА Таблица.КВозврату ИНАЧЕ Таблица.Количество КОНЕЦ КАК Количество,
	|	Таблица.Упаковка КАК Упаковка,
	|	Таблица.Магазин КАК Магазин,
	|	Таблица.Цена КАК Цена
	|ИЗ
	|	Таблица КАК Таблица
	|ГДЕ
	|	"+ УсловиеГде +"
	|ИТОГИ ПО
	|	Поставщик,
	|	Магазин";
	
	Запрос.УстановитьПараметр("Таблица", ТаблицаВыделенныхСтрок);
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	Запрос.УстановитьПараметр("Магазин", Магазин);

	РезультатПакет = Запрос.ВыполнитьПакет();
	РезультатЗапроса = РезультатПакет[1];
	
	Если РезультатЗапроса.Пустой() Тогда
		Отказ		= Истина;
		ТекстОшибки = НСтр("ru = 'Нет выбранных данных для формирования документов %ТипДокумента%'"); 
		
		Если ТипДокумента = "ЗаказПоставщику" Тогда
			ТипДокументаОписание = "Заказ поставщику"
		ИначеЕсли ТипДокумента = "ВозвратПоставщику" Тогда
			ТипДокументаОписание = "Возврат поставщику"
		ИначеЕсли ТипДокумента = "ЗаказНаПеремещение" Тогда
			ТипДокументаОписание = "Заказ на перемещение"
		ИначеЕсли ТипДокумента = "ЗаказНаПеремещениеВозврат" Тогда
			ТипДокументаОписание = "Заказ на перемещение (возврат)"
		КонецЕсли;
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТипДокумента%", ТипДокументаОписание);
		
		Возврат;
	КонецЕсли;
	
	ВыборкаПоставщики = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаПоставщики.Следующий();
	
	ВыборкаМагазины = ВыборкаПоставщики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	
	Пока ВыборкаМагазины.Следующий() Цикл
		
		Товары = Новый Массив;
		Реквизиты = Новый Структура;
		
		Реквизиты.Вставить("Контрагент",				ВыборкаПоставщики.Поставщик);
		Реквизиты.Вставить("Магазин",					ВыборкаМагазины.Магазин);
		Реквизиты.Вставить("ДатаПоступления",			ЖелаемаяДатаПоставки);
		
		Если ТипДокумента = "ЗаказНаПеремещениеВозврат" Тогда
			Реквизиты.Вставить("МагазинОтправитель",	ВыборкаМагазины.Магазин);
			Реквизиты.Вставить("МагазинПолучатель",		ВыборкаПоставщики.Поставщик);
		Иначе
			Реквизиты.Вставить("МагазинОтправитель",	ВыборкаПоставщики.Поставщик);
			Реквизиты.Вставить("МагазинПолучатель",		ВыборкаМагазины.Магазин);
		КонецЕсли;
		
		Реквизиты.Вставить("ЖелаемаяДатаПоступления",	ЖелаемаяДатаПоставки);
		
		Товары.Очистить();
		ВыборкаНоменклатура = ВыборкаМагазины.Выбрать();
		Пока ВыборкаНоменклатура.Следующий() Цикл
			СтрокаТовары = Новый Структура;
			СтрокаТовары.Вставить("Номенклатура",	ВыборкаНоменклатура.Номенклатура); 
			СтрокаТовары.Вставить("Характеристика",	ВыборкаНоменклатура.Характеристика);
			СтрокаТовары.Вставить("Количество",		ВыборкаНоменклатура.Количество);
			СтрокаТовары.Вставить("Упаковка",		ВыборкаНоменклатура.Упаковка);
			СтрокаТовары.Вставить("Цена",			ВыборкаНоменклатура.Цена);
			
			Товары.Добавить(СтрокаТовары);
		КонецЦикла;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Реквизиты", Реквизиты);
		СтруктураДанных.Вставить("Товары", Товары);
		МассивДанных.Добавить(СтруктураДанных); 
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирования табличного документа, результата расшифровки "Товары к поступлению".
//
// Параметры:
//  <ТекущаяСтрока>  - <Число> - индекс текущей строки дерева.
//                 
//  <Отказ>  - <Булево> - признак ошибки
//                 
//  <ТабличныйДокументРезультат>  - <Табличный документ> - Табличный документ, в который передается результат
//                                  расшифровки.
//                 
&НаСервере
Процедура СформироватьРасшифровкуКПоступлению(ТекущаяСтрока, Отказ, ТабличныйДокументРезультат)
	
	СтрокаДерева = Результат.НайтиПоИдентификатору(ТекущаяСтрока);

	Если Не ЗначениеЗаполнено(СтрокаДерева.ОжидаемоеПоступлениеКоличество) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура",	СтрокаДерева.Номенклатура);
	СтруктураПараметров.Вставить("Характеристика",	СтрокаДерева.Характеристика);
	СтруктураПараметров.Вставить("Магазин",			?(ЗначениеЗаполнено(Магазин), Магазин, СтрокаДерева.Магазин));
	СтруктураПараметров.Вставить("Период",			КонецДня(НачалоПродаж + КоличествоДнейПродаж*86400));
	
	Обработка = РеквизитФормыВЗначение("Объект");
	СКД = Обработка.ПолучитьМакет("ОжидаемоеПоступление");

	ИсточникДоступныхНастроекКомпоновкиДанных = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД);
	КомпоновщикНастроекРасшифровки = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекРасшифровки.Инициализировать(ИсточникДоступныхНастроекКомпоновкиДанных);
	КомпоновщикНастроекРасшифровки.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
	Для Каждого Параметр Из СтруктураПараметров Цикл
		ПараметрКомпоновкиДанных = Новый ПараметрКомпоновкиДанных(Параметр.Ключ);
		Если ПараметрКомпоновкиДанных <> Неопределено Тогда
			ПараметрКомпоновкиДанных = КомпоновщикНастроекРасшифровки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКомпоновкиДанных);
			Если ПараметрКомпоновкиДанных <> Неопределено Тогда
				ПараметрКомпоновкиДанных.Значение = Параметр.Значение;
				ПараметрКомпоновкиДанных.Использование = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	Макет = КомпоновщикМакета.Выполнить(СКД, КомпоновщикНастроекРасшифровки.ПолучитьНастройки(),,,);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновкиДанных.Инициализировать(Макет);

	ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент();
	ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент.УстановитьДокумент(ТабличныйДокументРезультат);
	ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных, Истина);

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура заполнения таблицы ЗаказыЗакрытие.
//
&НаСервере
Процедура ЗаполнитьЗаказыЗакрытиеСервер()
	
	ЗаказыЗакрытие.Очистить();
	ТаблицаЗаказов = ЗапасыСервер.ПолучитьЗаказыПоставщикамЗаказыНаПеремещениеДляЗакрытия(ДатаЗакрытияЗаказов, МагазинЗакрытиеЗаказов, ПоставщикЗакрытиеЗаказов);
	
	Для каждого Заказ Из ТаблицаЗаказов Цикл
		СтрокаТаблицы = ЗаказыЗакрытие.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Заказ);
	КонецЦикла;

КонецПроцедуры

// Процедура закрытия заказов поставщику из таблицы ЗаказыЗакрытие.
//
&НаСервере
Процедура ВыполнитьЗакрытиеЗаказовСервер()
	
	Для Каждого СтрокаТаблицы Из ЗаказыЗакрытие Цикл
		Если Не СтрокаТаблицы.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
		Если ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
			ДокументОбъект.ЗакрытВручную = Истина;
		ИначеЕсли ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ДокументОбъект.Закрыт = Истина;
		КонецЕсли;
			
		Попытка
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			СтрокаТаблицы.Пометка = Ложь;
			ИсторияРаботыПользователя.Добавить(СтрокаТаблицы.Ссылка);
			
			Текст = НСтр("ru = 'Документ %Заказ% закрыт.'");
			Текст = СтрЗаменить(Текст,"%Заказ%", СтрокаТаблицы.Ссылка);
			
		Исключение
			
			Текст = НСтр("ru = 'Ошибка при записи документа %Заказ%. Заказ не закрыт!'");
			Текст = СтрЗаменить(Текст,"%Заказ%", СтрокаТаблицы.Ссылка);
			
		КонецПопытки;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура установки блокировки (признак Блокировка) в строках дерева значений "Результат".
//
// Параметры:
//  <ТекущийПоставщик>  - <СправочникСсылка.Контрагенты, СправочникСсылка.Магазины> - блокировка устанавливается
//                   во все строки,кроме строк со значением поставщика равного параметру ТекущийПоставщик.
//
&НаКлиенте
Процедура УстановитьБлокировкуСтрок(ТекущийПоставщик)
	
	Если БлокировкаСтрокУстановлена Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыДерева = Результат.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Если Элемент.Поставщик <> ТекущийПоставщик Тогда
			УстановитьБлокировку(Элемент.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	БлокировкаСтрокУстановлена = Истина;
	
КонецПроцедуры

// Процедура устанавливает признак Блокировка в строке дерева значений "Результат".
//
// Параметры:
//  <ТекущаяСтрока>  - <Число> - идентификатор текущей строки.
//
&НаКлиенте
Процедура УстановитьБлокировку(ТекущаяСтрока)
	
	ЭлементДерева				= Результат.НайтиПоИдентификатору(ТекущаяСтрока);
	ЭлементДерева.Блокировка 	= Истина;
	
	ДочерниеЭлементы = ЭлементДерева.ПолучитьЭлементы();
	Для Каждого Элемент Из ДочерниеЭлементы Цикл
		УстановитьБлокировку(Элемент.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

// Процедура снятия блокировки (признак Блокировка) в строках дерева значений "Результат".
//
&НаКлиенте
Процедура СнятьБлокировкуСтрок()

	Если НЕ БлокировкаСтрокУстановлена ИЛИ СчетчикПометок <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыДерева = Результат.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл
		//Если Элемент.Поставщик <> Поставщик Тогда
			СнятьБлокировку(Элемент.ПолучитьИдентификатор());
		//КонецЕсли;
	КонецЦикла;
	
	БлокировкаСтрокУстановлена = Ложь;
	
КонецПроцедуры

// Процедура снимает признак Блокировка в строке дерева значений "Результат".
//
// Параметры:
//  <ТекущаяСтрока>  - <Число> - идентификатор текущей строки.
//
&НаКлиенте
Процедура СнятьБлокировку(ТекущаяСтрока)

	ЭлементДерева				= Результат.НайтиПоИдентификатору(ТекущаяСтрока);
	ЭлементДерева.Блокировка 	= Ложь;
	
	ДочерниеЭлементы = ЭлементДерева.ПолучитьЭлементы();
	Для Каждого Элемент Из ДочерниеЭлементы Цикл
		СнятьБлокировку(Элемент.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверки просроченных заказов поставщику и заказов на перемещения на указанную дату по магазину.
//
// Параметры:
//  <ДатаЗакрытия>  - <Дата> - Дата проверки
//
//  <Магазин>  - <СправочникСсылка.Магазины> - магазин фильтр отбора просроченных заказов.
//
&НаСервере
Процедура ПроверитьПросроченныеЗаказы(ДатаЗакрытия, Магазин)
	
	ТаблицаЗаказов = ЗапасыСервер.ПолучитьЗаказыПоставщикамЗаказыНаПеремещениеДляЗакрытия(ДатаЗакрытия, ?(ЗначениеЗаполнено(Магазин), Магазин, Неопределено));
		
	Если ТаблицаЗаказов.Количество() > 0 Тогда
		Элементы.ФормаПерейтиЗакрытиеЗаказов.Доступность = Истина;
		
		ТекстСообщения = НСтр("ru = 'Перед работой рекомендуется закрыть просроченные заказы'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		Элементы.ФормаПерейтиЗакрытиеЗаказов.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура открытия форм документов.
//
// <ТипДокумента> - <Строка> - Представление для определения типа документа: 
//                   "ЗаказПоставщику", "ВозвратПоставщику","ЗаказНаПеремещение" или "ЗаказНаПеремещениеВозврат".
//
&НаКлиенте
Процедура СоздатьДокументы(ТипДокумента)
	
	Отказ = Ложь;
	ТекстОшибки = "";
	
	Если Результат.ПолучитьЭлементы().Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Нет данных для формирования документов.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( ТекстОшибки,, "Результат",, Отказ);
		Возврат;
	КонецЕсли;
	
	МассивДанных = Новый Массив;
	СоздатьДокументыСервер(МассивДанных, ТипДокумента, Отказ, ТекстОшибки);
	
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Результат",, Отказ);
		Возврат;
	КонецЕсли;
    
    // &ЗамерПроизводительности
    Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.АнализПродажФормированиеЗаказов.Форма.Форма.Команда.СоздатьДокументы"+ТипДокумента);
	
    Для Каждого ЭлементДанных Из МассивДанных Цикл
		
		ЭлементДанных.Вставить("ОбработкаФормированиеЗаказов");
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("Основание", ЭлементДанных);
		
		РежимОткрытияФормы = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Обработчик = Новый ОписаниеОповещения("РассчитатьРезультатПослеЗакрытияДокумента", ЭтотОбъект);
		
		Если ТипДокумента = "ЗаказПоставщику" Тогда
			ОткрытьФорму("Документ.ЗаказПоставщику.ФормаОбъекта", СтруктураПараметры, ЭтаФорма,,,, Обработчик,РежимОткрытияОкна);
			
		ИначеЕсли ТипДокумента = "ВозвратПоставщику"  Тогда
			ОткрытьФорму("Документ.ВозвратТоваровПоставщику.ФормаОбъекта", СтруктураПараметры, ЭтаФорма,,,, Обработчик,РежимОткрытияОкна);
			
		ИначеЕсли ТипДокумента = "ЗаказНаПеремещение" ИЛИ ТипДокумента = "ЗаказНаПеремещениеВозврат" Тогда
			ОткрытьФорму("Документ.ЗаказНаПеремещение.ФормаОбъекта", СтруктураПараметры, ЭтаФорма,,,, Обработчик,РежимОткрытияОкна);
			
		КонецЕсли;
		
	КонецЦикла;
    
    ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

// Процедура смены страницы
//
&НаКлиенте
Процедура СменитьВидимостьСтраницы(ИмяСтраницы)

	Если ИмяСтраницы = "ОсновнаяСтраница" Тогда
		Элементы.ФормаПерейтиЗакрытиеЗаказов.Видимость 		= Истина;
		Элементы.ФормаПерейтиФормированиеЗаказов.Видимость 	= Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.ОсновнаяСтраница;
	ИначеЕсли ИмяСтраницы = "СтраницаЗакрытиеЗаказов" Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗакрытиеЗаказов;
		Элементы.ФормаПерейтиФормированиеЗаказов.Видимость 	= Истина;
		Элементы.ФормаПерейтиЗакрытиеЗаказов.Видимость 		= Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьБлокировкуФормы(Блокировать)
	
	Если Блокировать И БлокировкаФормыУстановлена Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Блокировать;
	
	Элементы.ГруппаСоздатьДокументы.Доступность = НЕ Блокировать;
	Элементы.Результат.ТолькоПросмотр = Блокировать;
	
	БлокировкаФормыУстановлена = Блокировать;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБлокировкуФормыСервер(Блокировать)
	
	Если Блокировать И БлокировкаФормыУстановлена Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Блокировать;
	
	Элементы.ГруппаСоздатьДокументы.Доступность = НЕ Блокировать;
	Элементы.Результат.ТолькоПросмотр = Блокировать;
	
	БлокировкаФормыУстановлена = Блокировать;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандСозданияДокументов()
	
	Если ЗначениеЗаполнено(Поставщик) Тогда
		
		Если ТипЗнч(Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда
			Элементы.СоздатьДокументыЗаказПоставщику.Доступность 			= Истина;
			Элементы.СоздатьДокументыВозвратПоставщику.Доступность 			= Истина;
			Элементы.СоздатьДокументыЗаказНаПеремещение.Доступность 		= Ложь;
			Элементы.СоздатьДокументыЗаказНаПеремещениеВозврат.Доступность 	= Ложь;
		ИначеЕсли ТипЗнч(Поставщик) = Тип("СправочникСсылка.Магазины") Тогда
			Элементы.СоздатьДокументыЗаказПоставщику.Доступность 			= Ложь;
			Элементы.СоздатьДокументыВозвратПоставщику.Доступность 			= Ложь;
			Элементы.СоздатьДокументыЗаказНаПеремещение.Доступность 		= Истина;
			Элементы.СоздатьДокументыЗаказНаПеремещениеВозврат.Доступность 	= Истина;
		КонецЕсли;
		
	Иначе
		Элементы.СоздатьДокументыЗаказПоставщику.Доступность 			= Истина;
		Элементы.СоздатьДокументыВозвратПоставщику.Доступность 			= Истина;
		Элементы.СоздатьДокументыЗаказНаПеремещение.Доступность 		= Истина;
		Элементы.СоздатьДокументыЗаказНаПеремещениеВозврат.Доступность 	= Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьКолонок()
	
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент");
	Элементы.АссортиментнаяПолитика.Видимость = ИспользоватьАссортимент;
	
	ИспользоватьЗаказыПокупателей = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПокупателей");
	Элементы.ЗаказыПокупателей.Видимость                 = ИспользоватьЗаказыПокупателей;
	Элементы.ЗаказаноОстаток.Видимость                   = ИспользоватьЗаказыПокупателей;
	Элементы.ЗаказыПокупателейЕдиницаИзмерения.Видимость = ИспользоватьЗаказыПокупателей;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполненностьРасписания()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	"ВЫБРАТЬ ПЕРВЫЕ 1
	               	|	ГрафикРаботы.Магазин КАК Магазин
	               	|ИЗ
	               	|	РегистрСведений.ГрафикиРаботыМагазинов КАК ГрафикРаботы
	               	|ГДЕ
	               	|	ГрафикРаботы.Магазин = &Магазин
	               	|	И ГрафикРаботы.ДатаКалендаря <= &ДатаАнализаКонец
	               	|	И ГрафикРаботы.ДатаКалендаря >= &ДатаАнализаНачало";
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ДатаАнализаКонец", КонецДня(ПериодАнализа.ДатаОкончания));
	Запрос.УстановитьПараметр("ДатаАнализаНачало", НачалоДня(ПериодАнализа.ДатаНачала));
	РезультатПроверки = Запрос.Выполнить();
	Если РезультатПроверки.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Для выбранного магазина не заполнено расписание работы'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Магазин");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДетальныхПоказателей()
	
	Элементы.ГруппаДетальныеПоказатели.Видимость = ОтображатьДетальныеПоказатели;
	Элементы.РезультатСкрытьОтобразитьДетальныеПоказатели.Пометка = ОтображатьДетальныеПоказатели;
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункцииМодуляПрогнозирвоания

&НаСервере
Функция СтруктураДанныхПрогноза(ДеревоЗначенийРезультат)
	
	СтруктураРезультат = Новый Структура;
	
	ТаблицаНачальныхЗначений = ТаблицаНачальныхЗначений(ДеревоЗначенийРезультат);
	СтруктураРезультат.Вставить("ТаблицаНачальныхЗначений", ТаблицаНачальныхЗначений);
	
	ДеревоПродаж = ДеревоПродаж(ТаблицаНачальныхЗначений);
	СтруктураРезультат.Вставить("ДеревоПродаж", ДеревоПродаж);
	
	РассчитатьТаблицыДанныхТренда(СтруктураРезультат);
	
	ТаблицаПрогноза = ТаблицаПрогноза(СтруктураРезультат);
	СтруктураРезультат.Вставить("ТаблицаПрогноза", ТаблицаПрогноза);
	
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ТаблицаНачальныхЗначений(ДеревоЗначенийРезультат)
	
	ТаблицаНачальныхЗначений = Новый ТаблицаЗначений;
	ТаблицаНачальныхЗначений.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.Магазины"));
	ТаблицаНачальныхЗначений.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаНачальныхЗначений.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	ОписаниеЧислаКоличество = ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповЧисла(17, 3);
	ТаблицаНачальныхЗначений.Колонки.Добавить("ОжидаемоеПоступлениеКоличество", ОписаниеЧислаКоличество);
	ТаблицаНачальныхЗначений.Колонки.Добавить("ЗаказаноОстаток", ОписаниеЧислаКоличество);
	ТаблицаНачальныхЗначений.Колонки.Добавить("ТоварыКПоступлениюКоличество", ОписаниеЧислаКоличество);
	ТаблицаНачальныхЗначений.Колонки.Добавить("РасчетныйОстаток", ОписаниеЧислаКоличество);
	ТаблицаНачальныхЗначений.Колонки.Добавить("ТоварыКОтгрузкеКоличество", ОписаниеЧислаКоличество);
	
	ЗаполнитьСтрокиНачальнойТаблицы(ТаблицаНачальныхЗначений, ДеревоЗначенийРезультат);
	
	ТаблицаНачальныхЗначений.Свернуть("Магазин,
									  |Номенклатура,
									  |Характеристика,
									  |ОжидаемоеПоступлениеКоличество,
									  |ЗаказаноОстаток,
									  |ТоварыКПоступлениюКоличество,
									  |РасчетныйОстаток,
									  |ТоварыКОтгрузкеКоличество");
	
	Возврат ТаблицаНачальныхЗначений;
	
КонецФункции

&НаСервере 
Процедура ЗаполнитьСтрокиНачальнойТаблицы(ТаблицаНачальныхЗначений, ДеревоЗначенийРезультат)
	
	Для Каждого СтрокаРезультата Из ДеревоЗначенийРезультат.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаРезультата.Номенклатура) Тогда
			НоваяСтрока = ТаблицаНачальныхЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
			Если ЗначениеЗаполнено(Магазин) Тогда
				НоваяСтрока.Магазин = Магазин;
			КонецЕсли;
		Иначе
			ЗаполнитьСтрокиНачальнойТаблицы(ТаблицаНачальныхЗначений, СтрокаРезультата);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция ДеревоПродаж(ТаблицаНачальныхЗначений)
	
	Запрос = Новый Запрос ("ВЫБРАТЬ
	|	Товары.Магазин,
	|	Товары.Номенклатура,
	|	Товары.Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК Цифра
	|ПОМЕСТИТЬ ТаблицаЦифр
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	6
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	7
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	8
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	9
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, ТЦ1.Цифра + 10 * ТЦ2.Цифра + 100 * ТЦ3.Цифра + 1000 * ТЦ4.Цифра + 10000 * ТЦ5.Цифра) КАК День
	|ПОМЕСТИТЬ ТаблицаДней
	|ИЗ
	|	ТаблицаЦифр КАК ТЦ1,
	|	ТаблицаЦифр КАК ТЦ2,
	|	ТаблицаЦифр КАК ТЦ3,
	|	ТаблицаЦифр КАК ТЦ4,
	|	ТаблицаЦифр КАК ТЦ5
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, ТЦ1.Цифра + 10 * ТЦ2.Цифра + 100 * ТЦ3.Цифра + 1000 * ТЦ4.Цифра + 10000 * ТЦ5.Цифра) <= &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Магазин КАК Магазин,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ТаблицаДней.День КАК День
	|ПОМЕСТИТЬ ТоварыПоДням
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДней КАК ТаблицаДней
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыПоДням.Магазин КАК Магазин,
	|	ТоварыПоДням.Номенклатура КАК Номенклатура,
	|	ТоварыПоДням.Характеристика КАК Характеристика,
	|	ТоварыПоДням.День КАК День,
	|	ЕСТЬNULL(Продажи.КоличествоОборот, 0) КАК Количество
	|ИЗ
	|	ТоварыПоДням КАК ТоварыПоДням
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Авто,
	|				(Магазин, Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						Товары.Магазин,
	|						Товары.Номенклатура,
	|						Товары.Характеристика
	|					ИЗ
	|						Товары КАК Товары)) КАК Продажи
	|		ПО ТоварыПоДням.Магазин = Продажи.Магазин
	|			И ТоварыПоДням.Номенклатура = Продажи.Номенклатура
	|			И ТоварыПоДням.Характеристика = Продажи.Характеристика
	|			И ТоварыПоДням.День = Продажи.ПериодДень
	|
	|УПОРЯДОЧИТЬ ПО
	|	День
	|
	|ИТОГИ ПО
	|	Магазин,
	|	Номенклатура,
	|	Характеристика
	|");
	
	Запрос.УстановитьПараметр("Товары", ТаблицаНачальныхЗначений);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПериодАнализа.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ПериодАнализа.ДатаОкончания));
	ДеревоПродаж = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ДеревоПродаж;
	
КонецФункции

&НаСервере
Процедура РассчитатьТаблицыДанныхТренда(СтруктураДанныхПрогноза)
	
	ТаблицаДанныхТренда = Новый ТаблицаЗначений;
	ТаблицаДанныхТренда.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.Магазины"));
	ТаблицаДанныхТренда.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДанныхТренда.Колонки.Добавить("Характеристика",   Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	ОписаниеЧислаТренда = ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповЧисла(25, 10);
	ТаблицаДанныхТренда.Колонки.Добавить("КоэффициентТренда", ОписаниеЧислаТренда);
	ОписаниеЧислаКоличество = ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповЧисла(17, 3);
	ТаблицаДанныхТренда.Колонки.Добавить("Приращение", ОписаниеЧислаКоличество);
	
	Показатели = Новый Структура;
	
	ТаблицаПродажПоДнямБезТренда = Новый ТаблицаЗначений;
	ТаблицаПродажПоДнямБезТренда.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.Магазины"));
	ТаблицаПродажПоДнямБезТренда.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПродажПоДнямБезТренда.Колонки.Добавить("Характеристика",   Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	ОписаниеДаты = ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповДаты();
	ТаблицаПродажПоДнямБезТренда.Колонки.Добавить("Дата", ОписаниеДаты);
	ТаблицаПродажПоДнямБезТренда.Колонки.Добавить("Количество", ОписаниеЧислаКоличество);
	
	Показатели.Вставить("СчетчикДней", 0);
	Показатели.Вставить("СуммаПроизведений", 0);
	Показатели.Вставить("СуммаДней", 0);
	Показатели.Вставить("СуммаПродаж", 0);
	Показатели.Вставить("СуммаКвадратовДней", 0);
	
	Показатели.Вставить("КоэффициентТренда", 0);
	Показатели.Вставить("Приращение", 0);
	
	Для Каждого СтрокаМагазина Из СтруктураДанныхПрогноза.ДеревоПродаж.Строки Цикл
		Для Каждого СтрокаНоменклатуры Из СтрокаМагазина.Строки Цикл
			Для Каждого СтрокаХарактеристики Из СтрокаНоменклатуры.Строки Цикл
				Для Каждого СтрокаПродажи Из СтрокаХарактеристики.Строки Цикл
					Показатели.СчетчикДней = Показатели.СчетчикДней + 1;
					Показатели.СуммаПроизведений = Показатели.СуммаПроизведений + Показатели.СчетчикДней * СтрокаПродажи.Количество;
					Показатели.СуммаДней = Показатели.СуммаДней + Показатели.СчетчикДней;
					Показатели.СуммаПродаж = Показатели.СуммаПродаж + СтрокаПродажи.Количество;
					Показатели.СуммаКвадратовДней = Показатели.СуммаКвадратовДней + Показатели.СчетчикДней * Показатели.СчетчикДней;
				КонецЦикла;
				
				РассчитатьКоэффициентТренда(Показатели);
				
				НоваяСтрока = ТаблицаДанныхТренда.Добавить();
				НоваяСтрока.Магазин = СтрокаМагазина.Магазин;
				НоваяСтрока.Номенклатура = СтрокаНоменклатуры.Номенклатура;
				НоваяСтрока.Характеристика = СтрокаХарактеристики.Характеристика;
				НоваяСтрока.КоэффициентТренда = Показатели.КоэффициентТренда;
				НоваяСтрока.Приращение = Показатели.Приращение;
			
				Показатели.СчетчикДней = 0;
				
				// И повторный цикл для расчета средних за вычетом тренда.
				
				Для Каждого СтрокаПродажи Из СтрокаХарактеристики.Строки Цикл
					Показатели.СчетчикДней = Показатели.СчетчикДней + 1;
					НоваяСтрока = ТаблицаПродажПоДнямБезТренда.Добавить();
					НоваяСтрока.Магазин = СтрокаМагазина.Магазин;
					НоваяСтрока.Номенклатура = СтрокаНоменклатуры.Номенклатура;
					НоваяСтрока.Характеристика = СтрокаХарактеристики.Характеристика;
					НоваяСтрока.Дата = СтрокаПродажи.День;
					НоваяСтрока.Количество = СтрокаПродажи.Количество
												- Окр(Показатели.КоэффициентТренда * Показатели.СчетчикДней + Показатели.Приращение);
					
				КонецЦикла;
				
				Показатели.СчетчикДней = 0;
				Показатели.СуммаПроизведений = 0;
				Показатели.СуммаДней = 0;
				Показатели.СуммаПродаж = 0;
				Показатели.СуммаКвадратовДней = 0;
				Показатели.КоэффициентТренда = 0;
				Показатели.Приращение = 0;
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	
	
	СтруктураДанныхПрогноза.Вставить("ТаблицаДанныхТренда", ТаблицаДанныхТренда);
	СтруктураДанныхПрогноза.Вставить("ТаблицаПродажПоДнямБезТренда", ТаблицаПродажПоДнямБезТренда);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоэффициентТренда(Показатели)
	
	Если Показатели.СчетчикДней <> 0 Тогда
		ЗнаменательТренда = Показатели.СуммаКвадратовДней
							- Показатели.СуммаДней * Показатели.СуммаДней / Показатели.СчетчикДней;
		Если ЗнаменательТренда <> 0 Тогда
			ЧислительТренда = Показатели.СуммаПроизведений
								- Показатели.СуммаДней * Показатели.СуммаПродаж / Показатели.СчетчикДней;
			Показатели.КоэффициентТренда = ЧислительТренда / ЗнаменательТренда;
		КонецЕсли;
		
		Показатели.Приращение = Окр(
									Показатели.СуммаПродаж / Показатели.СчетчикДней
									- Показатели.КоэффициентТренда * Показатели.СуммаДней / Показатели.СчетчикДней, 3);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ТаблицаПрогноза(СтруктураДанныхПрогноза)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Товары.Магазин,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Дата,
	|	Товары.Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТаблицаПродажПоДнямБезТренда КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Магазин КАК Магазин,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ДЕНЬНЕДЕЛИ(Товары.Дата) КАК ДеньНедели,
	|	СРЕДНЕЕ(Товары.Количество) КАК Количество
	|ИЗ
	|	Товары КАК Товары
	|	
	|СГРУППИРОВАТЬ ПО
	|	Товары.Магазин,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ДЕНЬНЕДЕЛИ(Товары.Дата)
	|";
	Запрос.УстановитьПараметр("ТаблицаПродажПоДнямБезТренда", СтруктураДанныхПрогноза.ТаблицаПродажПоДнямБезТренда);
	ТаблицаСреднихПоДнямНедели = Запрос.Выполнить().Выгрузить();
	
	ТаблицаПрогноза = Новый ТаблицаЗначений;
	ТаблицаПрогноза.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.Магазины"));
	ТаблицаПрогноза.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПрогноза.Колонки.Добавить("Характеристика",   Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	ОписаниеДаты = ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповДаты();
	ТаблицаПрогноза.Колонки.Добавить("Дата", ОписаниеДаты);
	
	ОписаниеЧислаКоличество = ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповЧисла(17, 3);
	ТаблицаПрогноза.Колонки.Добавить("Количество", ОписаниеЧислаКоличество);
	
	ОтборТренда = Новый Структура;
	ОтборТренда.Вставить("Магазин", Неопределено);
	ОтборТренда.Вставить("Номенклатура", Неопределено);
	ОтборТренда.Вставить("Характеристика", Неопределено);
	
	ОтборСреднихПродаж = Новый Структура;
	ОтборСреднихПродаж.Вставить("Магазин", Неопределено);
	ОтборСреднихПродаж.Вставить("Номенклатура", Неопределено);
	ОтборСреднихПродаж.Вставить("Характеристика", Неопределено);
	ОтборСреднихПродаж.Вставить("ДеньНедели", Неопределено);
	КоличествоДнейПериода = Цел((ПериодАнализа.ДатаОкончания - ПериодАнализа.ДатаНачала) / 86400);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	КоличествоДнейДоНачалаПродаж = Цел((НачалоПродаж - НачалоДня(ТекущаяДата)) / 86400);
	ВсегоДней = КоличествоДнейДоНачалаПродаж + КоличествоДнейПродаж + ПланируемыйОстаток;
	
	Для Каждого СтрокаМагазина Из СтруктураДанныхПрогноза.ДеревоПродаж.Строки Цикл
		Для Каждого СтрокаНоменклатуры Из СтрокаМагазина.Строки Цикл
			Для Каждого СтрокаХарактеристики Из СтрокаНоменклатуры.Строки Цикл
				ОтборТренда.Магазин = СтрокаХарактеристики.Магазин;
				ОтборТренда.Номенклатура = СтрокаХарактеристики.Номенклатура;
				ОтборТренда.Характеристика = СтрокаХарактеристики.Характеристика;
				СтрокиТренда = СтруктураДанныхПрогноза.ТаблицаДанныхТренда.НайтиСтроки(ОтборТренда);
				Если СтрокиТренда.Количество() > 0 Тогда
					СтрокаТренда = СтрокиТренда[0];
				Иначе
					СтрокаТренда = Неопределено;
				КонецЕсли;
				Для СчетчикДней = 1 По ВсегоДней Цикл
					ОчереднаяДатаПродаж = НачалоДня(ТекущаяДата + (СчетчикДней - 1) * 86400);
					НоваяСтрока = ТаблицаПрогноза.Добавить();
					НоваяСтрока.Магазин = СтрокаХарактеристики.Магазин;
					НоваяСтрока.Номенклатура = СтрокаХарактеристики.Номенклатура;
					НоваяСтрока.Характеристика = СтрокаХарактеристики.Характеристика;
					НоваяСтрока.Дата = ОчереднаяДатаПродаж;
					
					ОтборСреднихПродаж.Магазин = СтрокаХарактеристики.Магазин;
					ОтборСреднихПродаж.Номенклатура = СтрокаХарактеристики.Номенклатура;
					ОтборСреднихПродаж.Характеристика = СтрокаХарактеристики.Характеристика;
					ОтборСреднихПродаж.ДеньНедели = ДеньНедели(ОчереднаяДатаПродаж);
					СтрокиСреднихПродаж = ТаблицаСреднихПоДнямНедели.НайтиСтроки(ОтборСреднихПродаж);
					Если СтрокиСреднихПродаж.Количество() > 0 Тогда 
						СтрокаСреднейПродажи = СтрокиСреднихПродаж[0];
						Если СтрокаТренда = Неопределено Тогда
							НоваяСтрока.Количество = СтрокаСреднейПродажи.Количество;
						Иначе
							НоваяСтрока.Количество = СтрокаСреднейПродажи.Количество
														+ ((КоличествоДнейПериода + СчетчикДней) * СтрокаТренда.КоэффициентТренда
															+ СтрокаТренда.Приращение); 
						КонецЕсли;
						Если НоваяСтрока.Количество < 0 Тогда
							НоваяСтрока.Количество = 0;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаПрогноза;
	
КонецФункции

// ПОСТРОЕНИЕ ДИАГРАММЫ

&НаСервере
Функция СформироватьГрафикТренда()
	
	ДанныеПрогноза = ПолучитьИзВременногоХранилища(АдресДанныхПрогноза);
	
	СтруктураОтбора = Новый Структура;

	СтруктураОтбора.Вставить("Магазин", МагазинДиаграммы);
	СтруктураОтбора.Вставить("Номенклатура", НоменклатураДиаграммы);
	СтруктураОтбора.Вставить("Характеристика", ХарактеристикаДиаграммы); 
	
	СтрокиПродаж = ДанныеПрогноза.ДеревоПродаж.Строки.НайтиСтроки(СтруктураОтбора, Истина);
	ТаблицаПродаж = Новый ТаблицаЗначений;
	ТаблицаПродаж.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.Магазины"));
	ТаблицаПродаж.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПродаж.Колонки.Добавить("Характеристика",   Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ОписаниеДаты = ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповДаты();
	ТаблицаПродаж.Колонки.Добавить("День", ОписаниеДаты);
	ОписаниеЧислаКоличество = ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповЧисла(17, 3);
	ТаблицаПродаж.Колонки.Добавить("Количество", ОписаниеЧислаКоличество);
	Для Каждого СтрокаПродажи Из СтрокиПродаж Цикл
		Если ЗначениеЗаполнено(СтрокаПродажи.День) Тогда
			НоваяСтрока = ТаблицаПродаж.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПродажи);
		КонецЕсли;
	КонецЦикла;
	ТаблицаПродаж.Сортировать("День");
	
	СтрокиПрогноза = ДанныеПрогноза.ТаблицаПрогноза.НайтиСтроки(СтруктураОтбора);
	ТаблицаПрогноза = ДанныеПрогноза.ТаблицаПрогноза.Скопировать(СтрокиПрогноза);
	ТаблицаПрогноза.Сортировать("Дата");
	
	СтрокиТренда = ДанныеПрогноза.ТаблицаДанныхТренда.НайтиСтроки(СтруктураОтбора);
	Если СтрокиТренда.Количество() > 0 Тогда
		СтрокаТренда = СтрокиТренда[0];
	Иначе
		СтрокаТренда = Неопределено;
	КонецЕсли;
	
	Макет = Обработки.АнализПродажФормированиеЗаказов.ПолучитьМакет("Диаграмма");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок, 1);
	
	ОбластьПараметр = Макет.ПолучитьОбласть("Параметр");
	
	ОбластьПараметр.Параметры.ИмяПараметра = НСтр("ru = 'Период анализа:'");
	ОбластьПараметр.Параметры.ЗначениеПараметра = ПериодАнализа;
	ТабличныйДокумент.Вывести(ОбластьПараметр, 2);
	
	ПериодПрогноза = НСтр("ru = '%1 - %2'");
	ПериодПрогноза = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ПериодПрогноза,
						Формат(ТекущаяДатаСеанса(), "ДЛФ=D"),
						Формат(НачалоПродаж + (КоличествоДнейПродаж + ПланируемыйОстаток) * 86400, "ДЛФ=D"));
	ОбластьПараметр.Параметры.ИмяПараметра = НСтр("ru = 'Период прогноза:'");
	ОбластьПараметр.Параметры.ЗначениеПараметра = ПериодПрогноза;
	ТабличныйДокумент.Вывести(ОбластьПараметр, 2);
	
	ОбластьПараметр.Параметры.ИмяПараметра = НСтр("ru = 'Магазин:'");
	ОбластьПараметр.Параметры.ЗначениеПараметра = МагазинДиаграммы;
	ТабличныйДокумент.Вывести(ОбластьПараметр, 2);
	
	ОбластьПараметр.Параметры.ИмяПараметра = НСтр("ru = 'Номенклатура:'");
	ОбластьПараметр.Параметры.ЗначениеПараметра = НоменклатураДиаграммы;
	ТабличныйДокумент.Вывести(ОбластьПараметр, 2);
	
	Если ЗначениеЗаполнено(ХарактеристикаДиаграммы) Тогда
		ОбластьПараметр.Параметры.ИмяПараметра = НСтр("ru = 'Характеристика:'");
		ОбластьПараметр.Параметры.ЗначениеПараметра = ХарактеристикаДиаграммы;
		ТабличныйДокумент.Вывести(ОбластьПараметр, 2);
	КонецЕсли;
	
	Тренд = НСтр("ru = 'Нет'");
	Если СтрокаТренда <> Неопределено Тогда
		Если СтрокаТренда.КоэффициентТренда < 0 Тогда
			Тренд = НСтр("ru = 'Падающий (Коэффициент: %1, Приращение: %2)'");
			Тренд = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						Тренд,
						СтрокаТренда.КоэффициентТренда,
						СтрокаТренда.Приращение);
						
			ЦветТренда = Новый Цвет(180, 0, 180);
			ЦветПрогноза = Новый Цвет(255, 0, 0);
		ИначеЕсли СтрокаТренда.КоэффициентТренда > 0 Тогда
			Тренд = НСтр("ru = 'Растущий (Коэффициент: %1, Приращение: %2)'");
			Тренд = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						Тренд,
						СтрокаТренда.КоэффициентТренда,
						СтрокаТренда.Приращение);
						
			ЦветТренда = Новый Цвет(0, 180, 180);
			ЦветПрогноза = Новый Цвет(0, 128, 0);
		Иначе
			Тренд = НСтр("ru = 'Нет (Коэффициент: 0, Приращение: %2)'");
			Тренд = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						Тренд,
						СтрокаТренда.Приращение);
						
			ЦветТренда = Новый Цвет(180, 180, 180);
			ЦветПрогноза = Новый Цвет(0, 0, 0);
		КонецЕсли;
	КонецЕсли;
	ОбластьПараметр.Параметры.ИмяПараметра = НСтр("ru = 'Тренд:'");
	ОбластьПараметр.Параметры.ЗначениеПараметра = Тренд;
	ТабличныйДокумент.Вывести(ОбластьПараметр, 2);
	
	ОбластьДиаграмма = Макет.ПолучитьОбласть("Диаграмма");
	
	Диаграмма = ОбластьДиаграмма.Рисунки.D1.Объект;
	Диаграмма.ИсточникДанных = Неопределено;
	Диаграмма.Очистить();
	Диаграмма.БазовоеЗначение = -0.0001;
	Диаграмма.ПропускатьБазовоеЗначение = Истина;
	
	СерияПродажи = Диаграмма.УстановитьСерию("Продажи");
	СерияПродажи.Текст = "Продажи";
	СерияПродажи.Маркер = ТипМаркераДиаграммы.Круг;
	СерияПродажи.Цвет = Новый Цвет(0, 0, 200);
	
	СерияПрогноз = Диаграмма.УстановитьСерию("Прогноз");
	СерияПрогноз.Текст = "Прогноз";
	СерияПрогноз.Маркер = ТипМаркераДиаграммы.Круг;
	СерияПрогноз.Цвет = ЦветПрогноза;
	
	СерияТренд = Диаграмма.УстановитьСерию("ЛинияТренда");
	СерияТренд.Текст = "Линия тренда";
	СерияТренд.Маркер = ТипМаркераДиаграммы.Нет;
	СерияТренд.Цвет = ЦветТренда;
	
	СчетчикДней = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаПродаж Цикл
		
		СчетчикДней = СчетчикДней + 1;
		
		НоваяТочка = Диаграмма.УстановитьТочку(СтрокаТаблицы.День);
		НоваяТочка.Текст = Формат(СтрокаТаблицы.День, "ДФ = дд.ММ.гггг");
		
		Диаграмма.УстановитьЗначение(НоваяТочка, СерияПродажи, СтрокаТаблицы.Количество);
		Диаграмма.УстановитьЗначение(НоваяТочка, СерияПрогноз, -0.0001);
		
		Если СтрокаТренда <> Неопределено Тогда
			ЗначениеТренда = СчетчикДней * СтрокаТренда.КоэффициентТренда + СтрокаТренда.Приращение;
			Диаграмма.УстановитьЗначение(НоваяТочка, СерияТренд, ЗначениеТренда);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПрогноза Цикл
		
		СчетчикДней = СчетчикДней + 1;
		
		НоваяТочка = Диаграмма.УстановитьТочку(СтрокаТаблицы.Дата);
		НоваяТочка.Текст = Формат(СтрокаТаблицы.Дата, "ДФ = дд.ММ.гггг");
		
		Диаграмма.УстановитьЗначение(НоваяТочка, СерияПродажи, -0.0001);
		Диаграмма.УстановитьЗначение(НоваяТочка, СерияПрогноз, СтрокаТаблицы.Количество);
		
		Если СтрокаТренда <> Неопределено Тогда
			ЗначениеТренда = СчетчикДней * СтрокаТренда.КоэффициентТренда + СтрокаТренда.Приращение;
			Диаграмма.УстановитьЗначение(НоваяТочка, СерияТренд, ЗначениеТренда);
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластьДиаграмма, 1);
	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();;
	
	ТабличныйДокумент.ОтображатьСетку = Ложь;
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецОбласти
