#Область ПеременныеМодуля

&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ЗначениеСправочникиВидыОплатЧекаККМОплатаПодарочнымСертификатом;

&НаКлиенте
Перем ЗначениеТипОплатыНаличные;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; // Используется для передачи текущей строки в обработчик ожидания.

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
			ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		Иначе
			Объект.ДисконтнаяКарта = СтрокаРезультата.Карта;
			СтруктураРезультат.Вставить("НайденаДисконтнаяКарта");
			Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		
	//ИначеЕсли СтрокаРезультата.Свойство("ШтрихкодУпаковкиЕГАИС")
	//	И ЗначениеЗаполнено(СтрокаРезультата.ШтрихкодУпаковкиЕГАИС)
	//	И СтрокаРезультата.Свойство("ТипУпаковки")
	//	И СтрокаРезультата.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
	//	
	//	ПодключаемоеОборудованиеРТВызовСервера.ДобавитьВложенныеМарки(ЭтотОбъект, СтрокаРезультата);
	//	
	ИначеЕсли СтрокаРезультата.Свойство("Номенклатура") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
		
	Если СтрокаРезультата.Свойство("НеобходимостьВводаАкцизнойМарки") Тогда
		СтруктураРезультат.Вставить("НеобходимостьВводаАкцизнойМарки", СтрокаРезультата.НеобходимостьВводаАкцизнойМарки);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	Если СтруктураПараметровКлиента.Свойство("НайденаДисконтнаяКарта") Тогда
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			ДисконтнаяКартаПриИзменении(Неопределено);
		КонецЕсли;
	//ИначеЕсли СтруктураПараметровКлиента.Свойство("НеобходимостьВводаАкцизнойМарки")
	//	И СтруктураПараметровКлиента.Свойство("АктивизироватьСтроку") Тогда
	//	
	//	СтрокаТовара = Объект.Товары.НайтиПоИдентификатору(СтруктураПараметровКлиента.АктивизироватьСтроку);
	//	Если СтрокаТовара <> Неопределено Тогда
	//		// Интерфейс ЕГАИС
	//		ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(СтрокаТовара);
	//	КонецЕсли;
	//	
	Иначе
		ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	КонецЕсли;
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТВызовСервера.ОбработатьДанныеПоНоменклатуреИзТСДСервер(ЭтотОбъект, СтруктураПараметров);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОбработатьДанныеПослеЗагрузкиИзТСД(СтруктураПараметров) Экспорт
	
	// Интерфейс ЕГАИС
	//ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, УчетАлкогольнойПродукции);
	//ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	//ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	
	ИдентификаторСтроки = Неопределено;
	ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ТипНоменклатуры"); 
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
		СтруктураПараметров.Вставить("ТекстПредупреждения", НСтр("ru = 'Возврат подарочных сертификатов не возможен.'"));
	Иначе
		ДобавленаСтрока = Ложь;
		ТекущаяСтрока = ПодключаемоеОборудованиеРТВызовСервера.ИнициализацияСтрокиТоваров(ЭтотОбъект, СтруктураПараметров, ДобавленаСтрока);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		Если ДобавленаСтрока Тогда
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПараметровСтавкиНДССкладВШапке(Объект));
		
			СтруктураМарки = Новый Структура;
			СтруктураМарки.Вставить("Дата", Объект.Дата);
			СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураМарки);
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		КонецЕсли;
		
		ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ЗавершениеОбработкиСтрокиТоваров(ЭтотОбъект, ТекущаяСтрока, СтруктураДействий);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	КонецЕсли;
	
	//Если ИдентификаторСтроки <> Неопределено Тогда
	//	Если ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
	//		ИнтеграцияЕГАИСРТ.ОбработатьНеобходимостьВводаАкцизнойМарки(СтруктураПараметров, Объект, ТекущаяСтрока);
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	СтруктураНомера.Вставить("ТекстПредупреждения", НСтр("ru = 'Возврат подарочных сертификатов не возможен.'"));
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьВесЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ПриИзмененииТоварыКоличестваУпаковок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданиеИВыборНовойХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ТекущаяСтрока.Характеристика = Результат;
	ТоварыХарактеристикаПриИзменении(Неопределено);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыборПлатежнойКарты(ВидОплатыПлатежнаяКарта, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВидОплатыПлатежнаяКарта = Неопределено Тогда
		НоваяСтрока = Объект.Оплата.Добавить();
		НоваяСтрока.ВидОплаты = ВидОплатыПлатежнаяКарта;
		Если Объект.Оплата.Количество() > 1 Тогда
			Сумма = Объект.Товары.Итог("Сумма") - Объект.Оплата.Итог("Сумма");
			НоваяСтрока.Сумма = ?(Сумма > 0, Сумма, 0);
		КонецЕсли;
		НоваяСтрока.ТипОплаты = ТипОплатыПлатежнаяКарта;
		Элементы.Оплата.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Оплата.ТекущийЭлемент = Элементы.ОплатаСумма;
		Элементы.Оплата.ИзменитьСтроку();
		МодифицированыСохраняемыеДанные = Истина;
	КонецЕсли;
	
	УстановитьДоступностьСоздатьДокументы();
	УстановитьЭквайринговыйТерминалПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЧекаККМ(ДатаС, ДополнительныеПараметры) Экспорт
	
	Если ДатаС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	Элемент = ДополнительныеПараметры.Элемент;
	
	СтруктураПараметрыОтбора = Новый Структура;
	СтруктураПараметрыОтбора.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
	СтруктураПараметрыОтбора.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
	СтруктураПараметрыОтбора.Вставить("Дата", ДатаС);
	СтруктураПараметрыОтбора.Вставить("Магазин", Объект.Магазин);
	
	Если ЗаданРеквизитЦенаВключаетНДС Тогда
		СтруктураПараметрыОтбора.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	КонецЕсли;
	СтруктураПараметрыОтбора.Вставить("ОперацияСДенежнымиСредствами", Ложь);
	
	СтруктураПараметры = Новый Структура("СтруктураПараметрыОтбора", СтруктураПараметрыОтбора);
	СтруктураПараметры.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Документ.ЧекККМ.ФормаВыбора", СтруктураПараметры , Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаПродажи(ДатаС, ТекущаяСтрока) Экспорт
	
	Если ДатаС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Номенклатура"  , ТекущаяСтрока.Номенклатура);
	СтруктураПараметров.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
	СтруктураПараметров.Вставить("ДатаС"         , ДатаС);
	СтруктураПараметров.Вставить("Магазин"       , Объект.Магазин);
	Если ЗаданРеквизитЦенаВключаетНДС Тогда
		СтруктураПараметров.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	КонецЕсли;
	
	СписокДокументов = ЗапасыСерверВызовСервера.ПолучитьСписокДокументовСодержащихНоменклатуру(СтруктураПараметров);
	
	Если СписокДокументов.Количество() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Документы продажи данного товара не найдены!'"));
		Возврат;
	ИначеЕсли СписокДокументов.Количество() = 1 Тогда
		Выбор = СписокДокументов[0];
		ОбработатьВыборДокументаПродажи(Выбор, ТекущаяСтрока);
	Иначе
		
		Обработчик = Новый ОписаниеОповещения("ОбработатьВыборДокументаПродажи", ЭтотОбъект, ТекущаяСтрока);
		СписокДокументов.ПоказатьВыборЭлемента(Обработчик, НСтр("ru = 'Выбор документа продажи:'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДокументаПродажи(Выбор, ТекущаяСтрока) Экспорт
	
	Если НЕ Выбор = Неопределено Тогда
		
		ВыбранныйДокумент = Выбор.Значение;
		
		Если ЗначениеЗаполнено(ВыбранныйДокумент)  Тогда
			Если Тип("ДокументСсылка.ОтчетОРозничныхПродажах") = ТипЗнч(ВыбранныйДокумент) Тогда
				МетаданныеНаименование = "ОтчетОРозничныхПродажах";
			Иначе
				МетаданныеНаименование = "РеализацияТоваров";
			КонецЕсли;
			
			РезультатОтбораСтрок = ОбработкаТабличнойЧастиТоварыВызовСервера.ПолучитьСтрокиДокументаПродажиНаКлиента(ВыбранныйДокумент, МетаданныеНаименование, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика, УникальныйИдентификатор);
			
			Если ЗначениеЗаполнено(РезультатОтбораСтрок)  Тогда
                
                // &ЗамерПроизводительности
                ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                         Истина, "Обработка.ВозвратТоваровОтРозничногоПокупателя.Форма.ФормаВыбораСтрокиДокумента.Открытие");
                 
				СтруктураПараметров = Новый Структура("АдресТаблицы", РезультатОтбораСтрок);
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ТекущаяСтрока",ТекущаяСтрока);
				ДополнительныеПараметры.Вставить("ВыбранныйДокумент",ВыбранныйДокумент);
				
				Обработчик = Новый ОписаниеОповещения("ВыборСтрокиДокумента", ЭтотОбъект, ДополнительныеПараметры);
				Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
				ОткрытьФорму("Обработка.ВозвратТоваровОтРозничногоПокупателя.Форма.ФормаВыбораСтрокиДокумента", СтруктураПараметров,,,,, Обработчик, Режим);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСтрокиДокумента(СвойстваСтроки, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	ВыбранныйДокумент = ДополнительныеПараметры.ВыбранныйДокумент;
	
	Если НЕ СвойстваСтроки = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СвойстваСтроки, , "Сумма");
		
		ВыборСтрокиДокументаСервер(ТекущаяСтрока.ЧекККМ, ТекущаяСтрока.ДокументПродажи, ВыбранныйДокумент);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ());
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПриСбросеСложнойОплаты(Ответ, ДополнительныеПараметры) Экспорт
	
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Объект.ПереключательОплатаСложная = Истина;
		
		ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		УстановитьВидимостьВидовОплаты();
		УстановитьДоступность();
		УстановитьЭквайринговыйТерминалПоУмолчанию();
		
	Иначе
		ПриСбросеСложнойОплаты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеНайтиПоЧекуККМ(ВыбранныйЧек, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВыбранныйЧек = Неопределено Тогда
		
		ОчищатьТовары = Истина;
		
		Если НЕ Объект.Товары.Количество() = 0 Тогда
			
			ТекстВопроса = НСтр("ru = 'Очистить табличную часть ""Товары"" перед заполнением?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеЗаполнитьТоварыПоЧеку", ЭтотОбъект, ВыбранныйЧек);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ЗаполнитьТоварыПоЧеку(ВыбранныйЧек, ОчищатьТовары);
			МодифицированыСохраняемыеДанные = Истина;
			
			Объект.СкидкиИБонусыСторнированы = Ложь;
			УстановитьДоступностьСоздатьДокументы();
			ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
			
		КонецЕсли;
		
	Иначе
		
		Объект.СкидкиИБонусыСторнированы = Ложь;
		УстановитьДоступностьСоздатьДокументы();
		ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполнитьТоварыПоЧеку(Ответ, ВыбранныйЧек) Экспорт
	
	ОчищатьТовары = Истина;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ОчищатьТовары = Ложь;
	КонецЕсли;
	
	ЗаполнитьТоварыПоЧеку(ВыбранныйЧек, ОчищатьТовары);
	МодифицированыСохраняемыеДанные = Истина;
	
	Объект.СкидкиИБонусыСторнированы = Ложь;
	УстановитьДоступностьСоздатьДокументы();
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	// Интерфейс ЕГАИС
	//ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, УчетАлкогольнойПродукции);
	//ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	//ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФИО(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ФИОФизЛицаИП = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(Объект.ФИОФизЛица, 3);
		Объект.ФизЛицо      = Объект.ФИОФизЛицаИП;
		
		
	КонецЕсли;
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУказаниеСерий(ЗначениеВозврата, ПараметрыФормыУказанияСерий) Экспорт
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ПараметрыФормыУказанияСерий.Вставить("ЗначениеВозврата", ЗначениеВозврата);
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
		ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
	// Интерфейс ЕГАИС
	//ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	//Если не ТекущаяСтрока = Неопределено Тогда
	//	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросУспешностиОплатыКартой(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПараметрДействия = ДополнительныеПараметры.ПараметрДействия;
	
	Если НЕ (РезультатВопроса = КодВозвратаДиалога.Да) Тогда
		СтрокаСлипЧека = "";
		ТекстОписаниеОшибки = НСтр("ru = 'Операция отменена.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ЗавершитьОплатуКартой(ПараметрДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуАвторизацииЭТЗавершение(РезультатВыполнения, ПараметрДействия) Экспорт 
	
	ЭтаФорма.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
			|""%ОписаниеОшибки%"".
			|Оплата по карте не была произведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		ПараметрДействия.НомерКарты          = РезультатВыполнения.НомерКарты;
		ПараметрДействия.НомерСсылкиОперации = РезультатВыполнения.СсылочныйНомер;
		ПараметрДействия.НомерЧекаЭТ         = РезультатВыполнения.НомерЧекаЭТ;
		ПараметрДействия.СтрокаСлипЧека      = РезультатВыполнения.ТекстСлипЧека;
		ЗавершитьОплатуКартой(ПараметрДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуАвторизацииЭТ(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	ПараметрДействия = ДополнительныеПараметры.ПараметрДействия;
	
	Если ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		
		ПараметрДействия.СуммаОперации = РезультатОткрытияФормы.Сумма;
		
		Если НЕ ПараметрДействия.ПараметрыЭТ.ИспользоватьБезПодключенияОборудования Тогда
			
			ЭтаФорма.Доступность = Ложь;
			
			ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
			ПараметрыОперации.ТипТранзакции  = "AuthorizeRefund";
			ПараметрыОперации.СуммаОперации  = РезультатОткрытияФормы.Сумма;
			ПараметрыОперации.НомерЧека      = РезультатОткрытияФормы.НомерЧека;
			ПараметрыОперации.СсылочныйНомер = РезультатОткрытияФормы.СсылочныйНомер;
			
			УстройствоПечати = ПараметрДействия.ПараметрыКассыККМ.ИдентификаторУстройства;
			УстройствоПечати = ?(ПустаяСтрока(УстройствоПечати), Неопределено, УстройствоПечати);
			
			Оповещение = Новый ОписаниеОповещения("ОповещениеОткрытьФормуАвторизацииЭТЗавершение", ЭтотОбъект, ПараметрДействия);
			МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение, УникальныйИдентификатор, 
				ПараметрДействия.ПараметрыЭТ.ИдентификаторУстройства, УстройствоПечати, ПараметрыОперации);
			
		Иначе
			
			ПараметрДействия.НомерКарты          = РезультатОткрытияФормы.НомерКарты;
			ПараметрДействия.НомерСсылкиОперации = РезультатОткрытияФормы.СсылочныйНомер;
			ПараметрДействия.НомерЧекаЭТ         = РезультатОткрытияФормы.НомерЧека;
			
			ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию оплаты на эквайринговом терминале.'") + Символы.ПС;
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'") + " "+ ПараметрДействия.СуммаОперации  + Символы.ПС;
			ТекстВопроса = ТекстВопроса + Символы.ПС;
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция оплаты на эквайринговом терминале прошла успешно?'");
			
			ДополнительныеПараметры = Новый Структура; 
			ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросУспешностиОплатыКартой", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ПроверитьПраваДоступаНаОбработку(Отказ);
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ИнициализироватьОбработку(Параметры);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	НастроитьФормуПоДополнительнымПравам();
	
	Объект.ВидОплаты = Справочники.ВидыОплатЧекаККМ.Наличные;
	ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные;
	ВидОплатыНаличные = Объект.ВидОплаты;
	ТипОплатыНаличные = ТипОплаты;
	ТипОплатыПлатежнаяКарта = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта;
	
	ЭтоLinuxСервер = ОбщегоНазначенияРТВызовСервера.ЭтоLinuxСервер();
	ЭтоLinuxКлиент = ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент();
	
	КомпонентаСклоненияМожетРаботатьТолькоНаКлиенте = ЭтоLinuxСервер И НЕ ЭтоLinuxКлиент;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипыОплатВТЧСервер(Объект);
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	ПараметрыСобытийПО = Новый Структура;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ВозвратТоваровОтПокупателя.ПараметрыУказанияСерий(Объект));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
	ПриИзмененииМагазина();
	
	УстановитьВидимостьПоФО();
	УстановитьВидимостьВидовОплаты();
	УстановитьКомандыВидовОплаты();
	УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов();
	Элементы.СоздатьДокументы.Доступность = Ложь;
	
	КассаПриИзмененииСервер();
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары);
	
	// Интерфейс ЕГАИС
	УчетАлкогольнойПродукции = ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(Объект.Дата);
	//ИнтеграцияЕГАИСРТ.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, УчетАлкогольнойПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗначениеСправочникиВидыОплатЧекаККМОплатаПодарочнымСертификатом = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом");
	
	УстановитьДоступность();
	УстановитьВидимостьПодсказкиТерминала();
	УстановитьДоступностьКассы();
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	Если КомпонентаСклоненияМожетРаботатьТолькоНаКлиенте Тогда
		ОбщегоНазначенияРТКлиент.УстановитьКомпонентуСклонения(Неопределено)
	КонецЕсли;
	
	// Интерфейс ЕГАИС
	//ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	//ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТекстОшибкиОбщий = "";
	
	Если Объект.Товары.Количество() > 1 Тогда
			
		Запрос = Новый Запрос();
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТаблицаВозврата.ДокументПродажи
		|ПОМЕСТИТЬ ТаблицаВозврата
		|ИЗ
		|	&ТаблицаВозврата КАК ТаблицаВозврата
		|;
		|ВЫБРАТЬ
		|	ТаблицаВозврата.ДокументПродажи КАК ДокументПродажи
		|ИЗ
		|	ТаблицаВозврата КАК ТаблицаВозврата
		|ГДЕ
		|	ТаблицаВозврата.ДокументПродажи <> ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
		|	И ТаблицаВозврата.ДокументПродажи <> ЗНАЧЕНИЕ(Документ.РеализацияТоваров.ПустаяСсылка)
		|	И ТаблицаВозврата.ДокументПродажи <> НЕОПРЕДЕЛЕНО
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаВозврата.ДокументПродажи
		|";
		Запрос.УстановитьПараметр("ТаблицаВозврата", Объект.Товары.Выгрузить(,"ДокументПродажи"));
		ВыборкаДокументыРеализации = Запрос.ВыполнитьПакет()[1].Выбрать();
		Если ВыборкаДокументыРеализации.Количество() > 1.00 Тогда
			ТекстОшибки = Символы.ПС;
			Пока ВыборкаДокументыРеализации.Следующий() Цикл
				ТекстОшибки = ТекстОшибки + Строка(ВыборкаДокументыРеализации.ДокументПродажи) + Символы.ПС;
			КонецЦикла;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Возврат товаров должен выполняться по одному документу продажи. Выбраны следующие документы реализации: %1'"),
			ТекстОшибки);
			
			#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект,
				"Объект.Товары",
				,
				Отказ
				);
			#КонецЕсли
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Оплата.Количество() <> 0 Тогда
		Сдача = Объект.Оплата.Итог("Сумма") - (Объект.Товары.Итог("Сумма") + ?(Объект.ЦенаВключаетНДС, 0, Объект.Товары.Итог("СуммаНДС")));
		
		Если Сдача < 0 Тогда
			ТекстОшибки = НСтр("ru='Суммы недостаточно для оплаты чека!'");
				
			#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					Объект,
					?(Объект.ПереключательОплатаСложная, "Объект.Оплата", "Объект.СуммаОплаты"),
					,
					Отказ);
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаОплаты Из Объект.Оплата Цикл
		Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта И НЕ ЗначениеЗаполнено(СтрокаОплаты.ЭквайринговыйТерминал) Тогда
			Если Объект.ПереключательОплатаСложная Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнена колонка ""Терминал"" в строке %1 списка ""Оплата""'"),
				СтрокаОплаты.НомерСтроки);
				
				#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					Объект,
					"Объект.Оплата[" + (СтрокаОплаты.НомерСтроки - 1) + "].ЭквайринговыйТерминал",
					,
					Отказ
					);
				#КонецЕсли
			Иначе
				ТекстОшибки = НСтр("ru = 'Поле ""Терминал"" не заполнено'");
				
				#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					Объект,
					"ЭквайринговыйТерминал",
					,
					Отказ
					);
				#КонецЕсли
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораВидаОплаты(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОплатыПриИзменении(Элемент)
	
	ПараметрыОплаты = Новый Структура();
	ПараметрыОплаты.Вставить("ВидОплаты", Объект.ВидОплаты);
	ПараметрыОплаты.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
	
	ПриИзмененииРеквизитаОдиночнойОплатыСервер(ПараметрыОплаты);
	
	Если НЕ ПараметрыОплаты.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта") Тогда
		
		ЭквайринговыйТерминал = ПредопределенноеЗначение("Справочник.ЭквайринговыеТерминалы.ПустаяСсылка");
		
	КонецЕсли;
	ПриИзмененииОдиночнойОплаты(Истина);
	УстановитьВидимостьПодсказкиТерминала();
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
	УстановитьЭквайринговыйТерминалПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		ПриИзмененииМагазина();
		СкладПриИзменении(Неопределено);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, , СтруктураДействий, КэшированныеЗначения);
		
		ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		
	КонецЕсли;
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
	УстановитьЭквайринговыйТерминалПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОплатаСложнаяПриИзменении(Элемент)
	
	Если НЕ Объект.ПереключательОплатаСложная Тогда
		
		Если Объект.Оплата.Количество() > 1 Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПриСбросеСложнойОплаты", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Список оплат будет очищен. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ПриСбросеСложнойОплаты();
		КонецЕсли;
		
	Иначе
		
		Объект.Оплата.Очистить();
		Объект.ВидОплаты       = Неопределено;
		Объект.СуммаОплаты     = 0;
		ЭквайринговыйТерминал  = Неопределено;
		ТипОплаты              = Неопределено;
		ПроцентКомиссии = 0;
		СуммаКомиссии   = 0;
		
		ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		УстановитьВидимостьВидовОплаты();
		УстановитьДоступность();
		УстановитьЭквайринговыйТерминалПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентКомиссииПриИзменении(Элемент)
	
	ПриИзмененииОдиночнойОплаты();
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ОрганизацияПоСкладу = ОрганизацияПоПодчиненномуОбъекту(Объект.Склад);
	
	Если ЗначениеЗаполнено(ОрганизацияПоСкладу) И НЕ Объект.Организация = ОрганизацияПоСкладу Тогда
		Объект.Организация = ОрганизацияПоСкладу;
		Организация = ОрганизацияПоСкладу;
		
	КонецЕсли;
	
	ОрганизацияПриИзменении(Неопределено);
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплатыПриИзменении(Элемент)
	
	ПриИзмененииОдиночнойОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	
	Если НЕ Объект.ФизЛицо = Неопределено Тогда
		
		Если ЗаполнениеФизЛицаСервер() Тогда
			
			Объект.ФИОФизЛица = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(Объект.ФИОФизЛицаИП, 3);
			
		Иначе
			
			Объект.ФИОФизЛицаИП = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(Объект.ФИОФизЛица, 3);
			Объект.ФизЛицо = Объект.ФИОФизЛицаИП; 
			
		КонецЕсли;
		
	Иначе
		Объект.ФИОФизЛицаИП = "";
		
	КонецЕсли;
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура ФИОФизЛицаПриИзменении(Элемент)
	
	Если ТипЗнч(Объект.ФизЛицо) = Тип("Строка") Тогда
		
		Если Не СокрЛП(Объект.ФизЛицо) = "" Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьФИО", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Изменить ФИО покупателя?'"), РежимДиалогаВопрос.ДаНет);
		Иначе
			
			Объект.ФИОФизЛицаИП = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(Объект.ФИОФизЛица, 3);
			Объект.ФизЛицо      = Объект.ФИОФизЛицаИП;
			
			МодифицированыСохраняемыеДанные = Истина;
			УстановитьДоступностьСоздатьДокументы();
		КонецЕсли;
		
	Иначе
		
		МодифицированыСохраняемыеДанные = Истина;
		УстановитьДоступностьСоздатьДокументы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыйТерминалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТерминалНачалоВыбораИзСписка(Элементы.ЭквайринговыйТерминал, Объект.ВидОплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыйТерминалНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Если НЕ Объект.ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные") Тогда
		ТерминалНачалоВыбораИзСписка(Элементы.ЭквайринговыйТерминал, Объект.ВидОплаты);
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении(Элемент)
	
	ПриИзмененииОдиночнойОплаты(Истина);
	УстановитьВидимостьПодсказкиТерминала();
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	УстановитьДоступностьКассы();
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
	
	Объект.Касса = ЗначениеНастроекВызовСервера.ПолучитьКассуОрганизацииПоУмолчанию(Объект.Организация, , , Объект.Магазин);
	КассаПриИзменении(Неопределено);
	УстановитьЭквайринговыйТерминалПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	УстановитьВидимостьПодсказкиТерминала();
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
	УстановитьЭквайринговыйТерминалПоУмолчанию();
	КассаПриИзмененииСервер();
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И НомерДокументаКассыККМ[Объект.КассаККМ] = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(Объект.КассаККМ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура АналитикаХозяйственнойОперацииПриИзменении(Элемент)
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьДоступностьСоздатьДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоДокументуПриИзменении(Элемент)
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура ПриложениеПриИзменении(Элемент)
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура ДисконтнаяКартаПриИзменении(Элемент)
	ДисконтнаяКартаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаТабличныеЧастиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаОплата Тогда
		Если НЕ Объект.СкидкиИБонусыСторнированы Тогда
			ПодготовитьСкидкиИОплатуБонусамиКСторнированию();
			Объект.СкидкиИБонусыСторнированы = Истина;
			ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// ИнтеграцияЕГАИС
&НаКлиенте
Процедура ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИндексЭлемента = СтрЗаменить(Элемент.Имя, "ТекстДокументаЕГАИС", "");
	
	ИнтеграцияЕГАИСКлиент.ВыполнитьКомандуГиперссылки(ЭтотОбъект["Добавлен" + ИндексЭлемента], НавигационнаяСсылкаФорматированнойСтроки, ЭтотОбъект);
	
КонецПроцедуры
// Конец ИнтеграцияЕГАИС

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
	Объект.СкидкиИБонусыСторнированы = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если РедактированиеТЧТовары Тогда
		ТоварыВводДополнительнойИнформации(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ТоварыВводДополнительнойИнформации(Элемент, Ложь);
	// Интерфейс ЕГАИС
	//Если Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыСтатусУказанияАкцизныхМарок 
	//	И не Элементы.Товары.ТекущиеДанные = Неопределено
	//	и не Элементы.Товары.ТекущиеДанные.СтатусУказанияАкцизныхМарок = 0 Тогда
	//	ИдентификаторСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	//	ВвестиАкцизнуюМарку(ИдентификаторСтроки, Элементы.Товары.ТекущиеДанные, "КоличествоУпаковок");
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументПродажиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	// Найдем документы оплаты по диапазону.
	ДатаС = ДобавитьМесяц(Объект.Дата, -1);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДокументаПродажи", ЭтотОбъект, ТекущаяСтрока);
	ПоказатьВводЗначения(ОписаниеОповещения, ДатаС, НСтр("ru = 'Введите дату начала поиска документов:'"), ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповДаты());
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ПриИзмененииТоварыКоличестваУпаковок();
	
	// Интерфейс ЕГАИС
	//ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	//ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу" , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураМарки = Новый Структура;
	СтруктураМарки.Вставить("Дата", Объект.Дата);
	СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураМарки);
	
	СтруктураПараметровСтавкиНДС = Новый Структура;
	СтруктураПараметровСтавкиНДС.Вставить("Дата"       , Объект.Дата);
	СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
	СтруктураПараметровСтавкиНДС.Вставить("Склад"      , Объект.Склад);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВШапке", СтруктураПараметровСтавкиНДС);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ());
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьСтатусСерийИПодарочныхСертификатов(ТекущаяСтрока);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
	
	// Интерфейс ЕГАИС
	//ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ТоварыПослеУдаленияСервер();
	ЗаданРеквизитЦенаВключаетНДС = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
		ТекущаяСтрока.КлючСвязи = 0;
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);
				
	РедактированиеТЧТовары = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	РедактированиеТЧТовары = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ());
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеВЗакупках");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ());
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);


КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ());
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);

	// Интерфейс ЕГАИС
	//ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтаФорма, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ());
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ());
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЧекККМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Перем ДатаС;
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Найдем чеки по дате
	ДатаС = Объект.Дата - 14*24*60*60;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЧекаККМ", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВводЗначения(ОписаниеОповещения, ДатаС, НСтр("ru = 'Введите дату чека:'"), ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповДаты());
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЧекККМПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииТоварыЧекККМСервер(ТекущаяСтрока.ЧекККМ);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьДанныеПоДокументуПродажи", "ЧекККМ");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументПродажиПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТоварыДокументПродажиПриИзмененииНаСервере(ТекущаяСтрока.ДокументПродажи);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплата

&НаКлиенте
Процедура ОплатаВидОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораВидаОплаты(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОплатаЭквайринговыйТерминалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТерминалНачалоВыбораИзСписка(Элементы.ОплатаЭквайринговыйТерминал, Объект.ВидОплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаВидОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	
	ТекущаяСтрока.ПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииПоТерминалу(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты, Истина);
	ПересчитатьСуммуКомиссии(ТекущаяСтрока);
	
	ТекущаяСтрока.ТипОплаты = ТипОплатыПоВидуОплаты(ТекущаяСтрока.ВидОплаты);
	
	ОбновитьПолеСдача();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПроцентКомиссииПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	ПересчитатьСуммуКомиссии(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	ПересчитатьСуммуКомиссии(ТекущаяСтрока);
	
	ОбновитьПолеСдача();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаЭквайринговыйТерминалНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТерминалНачалоВыбораИзСписка(Элементы.ОплатаЭквайринговыйТерминал, Элементы.Оплата.ТекущиеДанные.ВидОплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаЭквайринговыйТерминалПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Оплата.ТекущиеДанные;
	
	ТекущаяСтрока.ПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииПоТерминалу(ТекущаяСтрока.ЭквайринговыйТерминал, ТекущаяСтрока.ВидОплаты, Истина);
	ПересчитатьСуммуКомиссии(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПриИзменении(Элемент)
	ОбновитьПолеСдача();
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		ДобавитьОплатуНаличными();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("АдресТоваровВХранилище", ПоместитьВоВременноеХранилищеСервер());
	ДополнительныеПараметры.Вставить("ЭтоСсылочныйОбъект", Ложь);
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбиратьНенайденные", Ложь);
	ДополнительныеПараметры.Вставить("ОбработатьПослеЗагрузки", Истина);
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ОповещенияПриПолученииВеса = Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект);
	ПодключаемоеОборудованиеРТКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ОповещенияПриПолученииВеса, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПечатьЗаявленияНаВозврат(Команда)
	
	Если НЕ ЗначениеЗаполнено(ВозвратТоваровОтПокупателя) Тогда
		
		ТекстСообщения = НСтр("ru = 'Документы не созданы'"); 
		ВывестиОбщееСообщение(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПечати = Новый Структура;
	
	ПараметрыПечати.Вставить("ОтКого"          , "от " + ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(Объект.ФИОФизЛицаИП, 2));
	ПараметрыПечати.Вставить("ФИОПокупателя"   , ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(Объект.ФИОФизЛицаИП, 5));
	ПараметрыПечати.Вставить("ДатаРождения"    , Формат(Объект.ДатаРождения, "ДЛФ = DD"));
	ПараметрыПечати.Вставить("ЧекНомер"        , Объект.ЧекНомер);
	ПараметрыПечати.Вставить("ЧекДата"         , Формат(Объект.ЧекДата, "ДЛФ = DD"));
	ПараметрыПечати.Вставить("ПаспортныеДанные", Объект.ПоДокументу);
	
	СтруктураРезультата = СтруктураДанныхОбОрганизации(ВозвратТоваровОтПокупателя);
	СоответствиеПолучателей = Новый Соответствие;
	
	Кому = "";
	Руководитель          = СтруктураРезультата.Руководитель;
	РуководительДолжность = СтруктураРезультата.РуководительДолжность;
	Наименование          = СтруктураРезультата.Наименование;
	Организация           = СтруктураРезультата.Организация;
	
	Если Не Руководитель = Неопределено Тогда
		Должность       = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(РуководительДолжность, 3) + " " + Наименование;
		ФИОРуководителя = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(Руководитель, 3);
		
		Кому = Должность + " " + Наименование + Символы.ПС+ ФИОРуководителя;;
	КонецЕсли;
	
	СоответствиеПолучателей.Вставить(Организация, Кому);
	ПараметрыПечати.Вставить("СоответствиеПолучателей", СоответствиеПолучателей);
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(ВозвратТоваровОтПокупателя);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ВозвратТоваровОтПокупателя",
			"ЗаявлениеНаВозврат",
			МассивДокументов,
			ЭтаФорма,
			ПараметрыПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗаявленияНаУтерянныйЧек(Команда)
	Если НЕ ЗначениеЗаполнено(ВозвратТоваровОтПокупателя) Тогда
		
		ТекстСообщения = НСтр("ru = 'Документы не созданы'"); 
		ВывестиОбщееСообщение(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПечати = Новый Структура;
	
	ПараметрыПечати.Вставить("ОтКого"          , "от " + ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(Объект.ФИОФизЛицаИП, 2));
	ПараметрыПечати.Вставить("ФИОПокупателя"   , ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(Объект.ФИОФизЛицаИП, 5));
	ПараметрыПечати.Вставить("ДатаРождения"    , Формат(Объект.ДатаРождения, "ДЛФ = DD"));
	ПараметрыПечати.Вставить("ЧекНомер"        , Объект.ЧекНомер);
	ПараметрыПечати.Вставить("ЧекДата"         , Формат(Объект.ЧекДата, "ДЛФ = DD"));
	ПараметрыПечати.Вставить("ПаспортныеДанные", Объект.ПоДокументу);
	
	СтруктураРезультата = СтруктураДанныхОбОрганизации(ВозвратТоваровОтПокупателя);
	СоответствиеПолучателей = Новый Соответствие;
	
	Кому = "";
	Руководитель          = СтруктураРезультата.Руководитель;
	РуководительДолжность = СтруктураРезультата.РуководительДолжность;
	Наименование          = СтруктураРезультата.Наименование;
	Организация           = СтруктураРезультата.Организация;
	
	Если Не Руководитель = Неопределено Тогда
		Должность       = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(РуководительДолжность, 3) + " " + Наименование;
		ФИОРуководителя = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(Руководитель, 3);
		
		Кому = Должность + " " + Наименование + Символы.ПС+ ФИОРуководителя;;
	КонецЕсли;
	
	СоответствиеПолучателей.Вставить(Организация, Кому);
	ПараметрыПечати.Вставить("СоответствиеПолучателей", СоответствиеПолучателей);
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(ВозвратТоваровОтПокупателя);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ВозвратТоваровОтПокупателя",
			"ЗаявлениеНаУтерянныйЧек",
			МассивДокументов,
			ЭтаФорма,
			ПараметрыПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗаявленияОбОшибочноПробитомЧеке(Команда)
	
	Если НЕ ЗначениеЗаполнено(ВозвратТоваровОтПокупателя) Тогда
		
		ТекстСообщения = НСтр("ru = 'Документы не созданы'"); 
		ВывестиОбщееСообщение(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПечати = Новый Структура;
	
	ПараметрыПечати.Вставить("ОтКого"          , "от " + ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(Объект.ФИОФизЛицаИП, 2));
	ПараметрыПечати.Вставить("ФИОПродавца"     , ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(Объект.ФИОФизЛицаИП, 5));
	ПараметрыПечати.Вставить("ФИОКассира"      , Объект.ФИОФизЛицаИП);
	ПараметрыПечати.Вставить("ДатаРождения"    , Формат(Объект.ДатаРождения, "ДЛФ = DD"));
	ПараметрыПечати.Вставить("ЧекНомер"        , Объект.ЧекНомер);
	ПараметрыПечати.Вставить("ЧекДата"         , Формат(Объект.ЧекДата, "ДЛФ = DD"));
	ПараметрыПечати.Вставить("ПаспортныеДанные", Объект.ПоДокументу);
	
	СтруктураРезультата = СтруктураДанныхОбОрганизации(ВозвратТоваровОтПокупателя);
	СоответствиеПолучателей = Новый Соответствие;
	
	Кому = "";
	Руководитель          = СтруктураРезультата.Руководитель;
	РуководительДолжность = СтруктураРезультата.РуководительДолжность;
	Наименование          = СтруктураРезультата.Наименование;
	Организация           = СтруктураРезультата.Организация;
	
	Если Не Руководитель = Неопределено Тогда
		Должность       = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(РуководительДолжность, 3) + " " + Наименование;
		ФИОРуководителя = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(Руководитель, 3);
			
		Кому = Должность + " " + Наименование + Символы.ПС+ ФИОРуководителя;;
	КонецЕсли;
	
	СоответствиеПолучателей.Вставить(Организация, Кому);
	ПараметрыПечати.Вставить("СоответствиеПолучателей", СоответствиеПолучателей);
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(ВозвратТоваровОтПокупателя);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ВозвратТоваровОтПокупателя",
			"ЗаявлениеОбОшибочноПробитомЧеке",
			МассивДокументов,
			ЭтаФорма,
			ПараметрыПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаБезСдачи(Команда)
	
	Объект.СуммаОплаты = СуммаВсего;
	
	ПриИзмененииОдиночнойОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПриходнаяНакладная(Команда)
	
	Если НЕ ЗначениеЗаполнено(ВозвратТоваровОтПокупателя) Тогда
		
		ТекстСообщения = НСтр("ru = 'Документы не созданы'"); 
		ВывестиОбщееСообщение(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(ВозвратТоваровОтПокупателя);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ВозвратТоваровОтПокупателя",
			"Накладная",
			МассивДокументов,
			ЭтаФорма,
			Новый Структура("ВыводитьЦены", Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьРКО(Команда)
	Если НЕ ЗначениеЗаполнено(ВозвратТоваровОтПокупателя) Тогда
		
		ТекстСообщения = НСтр("ru = 'Документы не созданы'"); 
		ВывестиОбщееСообщение(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РасходныйКассовыйОрдер) Тогда
		
		ТекстСообщения = НСтр("ru = 'Возвраты оплаты наличных средств не создавалось'"); 
		ВывестиОбщееСообщение(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(РасходныйКассовыйОрдер);
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("Представление", НСтр("ru = 'Расходный кассовый ордер'"));
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.РасходныйКассовыйОрдер",
			"РКО",
			МассивДокументов,
			ЭтаФорма,
			ПараметрыПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	
	Отказ = НЕ ПроверитьЗаполнение();
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Результат = СоздатьДокументыСервер();
	
	Если Результат Тогда
		МодифицированыСохраняемыеДанные = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьСоздатьДокументы();
	ПереключательОплатаСложнаяПриИзменении(Неопределено);
	
	// Интерфейс ЕГАИС
	//ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, УчетАлкогольнойПродукции);
	//ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	//ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоЧекуККМ(Команда)
	
	ЕстьОшибки = Ложь;
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		ТекстСообщения = НСтр("ru = 'Для поиска по чеку ККМ необходимо заполнить  ""Магазин"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Магазин");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ЧекНомер) Тогда
		ТекстСообщения = НСтр("ru = 'Для поиска по чеку ККМ необходимо заполнить  ""Номер чека"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ЧекНомер");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЕстьОшибки Тогда
		
		СтруктураПараметрыОтбора = Новый Структура;
		Если ЗначениеЗаполнено(Объект.ЧекДата) Тогда
			СтруктураПараметрыОтбора.Вставить("Дата", Объект.ЧекДата);
		КонецЕсли;
		
		СтруктураПараметрыОтбора.Вставить("Магазин", Объект.Магазин);
		СтруктураПараметрыОтбора.Вставить("Номер", Объект.ЧекНомер);
		
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			СтруктураПараметрыОтбора.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
		КонецЕсли;
		
		Если ЗаданРеквизитЦенаВключаетНДС Тогда
			СтруктураПараметрыОтбора.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
		КонецЕсли;
		СтруктураПараметрыОтбора.Вставить("Номер", Объект.ЧекНомер);
		СтруктураПараметрыОтбора.Вставить("ОперацияСДенежнымиСредствами", Ложь);
		
		СтруктураПараметры = Новый Структура("СтруктураПараметрыОтбора", СтруктураПараметрыОтбора);
		СтруктураПараметры.Вставить("РежимВыбора", Истина);
		
		Обработчик = Новый ОписаниеОповещения("ОповещениеНайтиПоЧекуККМ", ЭтотОбъект);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Документ.ЧекККМ.ФормаВыбора",СтруктураПараметры,,,,, Обработчик, Режим);
		
	Иначе
		
		УстановитьДоступностьСоздатьДокументы();
		ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежнаяКарта(Команда)
	
	ВидОплатыПлатежнаяКарта = ПолучитьВидОплатыПоТипуПлатежнаяКарта();
	
	Если НЕ ВидОплатыПлатежнаяКарта = Неопределено Тогда
		НоваяСтрока = Объект.Оплата.Добавить();
		НоваяСтрока.ВидОплаты = ВидОплатыПлатежнаяКарта;
		Если Объект.Оплата.Количество() > 1 Тогда
			Сумма = Объект.Товары.Итог("Сумма") - Объект.Оплата.Итог("Сумма");
			НоваяСтрока.Сумма = ?(Сумма > 0, Сумма, 0);
		КонецЕсли;
		
		НоваяСтрока.ТипОплаты = ТипОплатыПлатежнаяКарта;
		Элементы.Оплата.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Оплата.ТекущийЭлемент = Элементы.ОплатаСумма;
		Элементы.Оплата.ИзменитьСтроку();
		МодифицированыСохраняемыеДанные = Истина;
		
		УстановитьДоступностьСоздатьДокументы();
		УстановитьЭквайринговыйТерминалПоУмолчанию();
		
	Иначе
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("ИмяПоляОтбораЛевоеЗначение", "ТипОплаты");
		Отбор.Вставить("ПравоеЗначение"            , ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта"));
		Отбор.Вставить("Отрицание"                 , Ложь);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПлатежнойКарты", ЭтотОбъект);
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.ВидыОплатЧекаККМ.ФормаВыбора", Новый Структура("СтруктураПараметрыОтбора", Отбор),,,,, ОписаниеОповещения, Режим);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПробитиеЧекаПоДокументу(Команда)
	Перем ПараметрыКассыККМ, ПараметрыЭТ;
	
	Результат = Ложь;
	
	ИмяКоманды = Команда.Имя;
	ИндексЭлемента = СтрЗаменить(ИмяКоманды, "ПробитиеДокумента", "");
	
	ИмяЭлемента = "Добавлен" + ИндексЭлемента;
	Документ = ЭтотОбъект[ИмяЭлемента];
	
	ТипЗнчДокумент = ТипЗнч(Документ);
	Отказ = Ложь;
	ПараметрыЧека = ПараметрыЧека(Отказ, Документ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
    
    // &ЗамерПроизводительности
    Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
                                                    "Обработка.ВозвратТоваровОтРозничногоПокупателя.Форма.Форма.Команда.ПробитиеДокумента",
                                                               Ложь);

 	
	Если ТипЗнчДокумент = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		Если ПараметрыЧека.ПробитЧек Тогда
			СтрокаСообщения = НСтр("ru = 'Чек уже пробит'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			Результат = Истина;
		Иначе
                      
            ЭтаФорма.Доступность = Ложь;
			
			Контекст = Новый Структура();
			Контекст.Вставить("ИдентификаторУстройства"      , ПараметрыЧека.ИдентификаторУстройства);
			Контекст.Вставить("РаспределениеВыручкиПоСекциям", ПараметрыЧека.РаспределениеВыручкиПоСекциям);
			Контекст.Вставить("ДокументНаККМ"                , Документ);
			Контекст.Вставить("ИмяКоманды"                   , ИмяКоманды);
			Контекст.Вставить("Замер"                        , Замер);

			ПараметрыОперации = Новый Структура;
			ПараметрыОперации.Вставить("ТипИнкассации", 1);
			ПараметрыОперации.Вставить("Сумма"        , ПараметрыЧека.СуммаДокумента);
			ПараметрыОперации.Вставить("ДокументНаККМ", Документ);
			ПараметрыОперации.Вставить("РаспределениеВыручкиПоСекциям", ПараметрыЧека.РаспределениеВыручкиПоСекциям);
            
            
			Оповещение = Новый ОписаниеОповещения("НапечататьЧекКлиентИнкассацияЗавершение", ЭтотОбъект, Контекст);
			
			МенеджерОборудованияКлиент.НачатьИнкассациюНаФискальномУстройстве(Оповещение, 
																			  УникальныйИдентификатор, 
																			  ПараметрыОперации, 
																			  ПараметрыЧека.ИдентификаторУстройства); 
			
		КонецЕсли;
			
	ИначеЕсли ТипЗнчДокумент = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда
		Если ПараметрыЧека.ПробитЧек Тогда
			СтрокаСообщения = НСтр("ru = 'Чек уже пробит.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			Результат = Истина;
		ИначеЕсли ПараметрыЧека.ОплатаВыполнена Тогда
			СтрокаСообщения = НСтр("ru = 'Банковская оплата произведена ранее, но чек не пробит.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			Результат = Истина;
		Иначе
			ПараметрыФормы = Новый Структура;
			ПараметрДействия = Новый Структура;
			
			Если НЕ ПроверкаВозможностиРаботыСКартой(Документ, ПараметрыФормы, ПараметрДействия, ПараметрыКассыККМ, ПараметрыЭТ, ИмяКоманды) Тогда
				Возврат;
            КонецЕсли;
            
            // &ЗамерПроизводительности
            ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                     Истина, "Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ.Открытие");

			ПараметрыФормы.Вставить("УказатьДополнительныеДанные", Истина);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуАвторизацииЭТ", ЭтотОбъект, ДополнительныеПараметры);
			Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
			ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
			
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат Тогда 
		Элементы[ИмяКоманды].Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриСбросеСложнойОплаты()
	
	Пока Объект.Оплата.Количество() > 1 Цикл
		Объект.Оплата.Удалить(Объект.Оплата[1]);
	КонецЦикла;
	
	Если Объект.Оплата.Количество() > 0 Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Оплата[0].ВидОплаты) Тогда
			Объект.Оплата[0].ВидОплаты = ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные");
			Объект.Оплата[0].ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.Наличные");
			Объект.Оплата[0].ЭквайринговыйТерминал  = Неопределено;
			Объект.Оплата[0].ПроцентКомиссии = 0;
			Объект.Оплата[0].СуммаКомиссии   = 0;
		КонецЕсли;
		Объект.ВидОплаты              = Объект.Оплата[0].ВидОплаты;
		Объект.СуммаОплаты     = Объект.Оплата[0].Сумма;
		ЭквайринговыйТерминал  = Объект.Оплата[0].ЭквайринговыйТерминал;
		ТипОплаты              = Объект.Оплата[0].ТипОплаты;
		ПроцентКомиссии = Объект.Оплата[0].ПроцентКомиссии;
		СуммаКомиссии   = Объект.Оплата[0].СуммаКомиссии;
	Иначе
		ПриИзмененииОдиночнойОплаты();
	КонецЕсли;
	
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	УстановитьВидимостьВидовОплаты();
	УстановитьДоступность();
	УстановитьЭквайринговыйТерминалПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоЧеку(Чек, ОчищатьТовары)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧекККМТовары.Номенклатура КАК Номенклатура,
		|	ЧекККМТовары.Характеристика КАК Характеристика,
		|	ЧекККМТовары.Количество КАК Количество,
		|	ЧекККМТовары.Цена КАК Цена,
		|	ЧекККМТовары.Сумма КАК Сумма,
		|	ЧекККМТовары.СтавкаНДС КАК СтавкаНДС,
		|	ЧекККМТовары.СуммаНДС КАК СуммаНДС,
		|	ЧекККМТовары.Продавец КАК Продавец,
		|	ЧекККМТовары.Упаковка КАК Упаковка,
		|	ЧекККМТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ЧекККМТовары.Ссылка КАК ЧекККМ,
		|	ЧекККМТовары.Ссылка.ОтчетОРозничныхПродажах КАК ДокументПродажи,
		|	ЧекККМТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
		|ГДЕ
		|	ЧекККМТовары.Ссылка = &Чек
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЧекККМТовары.НомерСтроки";
		
	Запрос.УстановитьПараметр("Чек", Чек);
	Результат = Запрос.Выполнить();
	ТаблицаПродаж = Результат.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Характеристика,
	|	ЧекККМТовары.Цена,
	|	ЧекККМТовары.Количество
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Ссылка.ЧекККМПродажа = &Чек
	|	И ЧекККМТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Характеристика,
	|	ВозвратТоваровОтПокупателяТовары.Цена,
	|	ВозвратТоваровОтПокупателяТовары.Количество
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.ЧекККМ = &Чек
	|	И ВозвратТоваровОтПокупателяТовары.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.Номенклатура,
	|	ТаблицаВЗапросе.Характеристика,
	|	ТаблицаВЗапросе.Цена,
	|	СУММА(ТаблицаВЗапросе.Количество) КАК Количество
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВЗапросе.Номенклатура,
	|	ТаблицаВЗапросе.Характеристика,
	|	ТаблицаВЗапросе.Цена";
	
	Запрос.УстановитьПараметр("Чек", Чек);
	
	Результат = Запрос.Выполнить();
	ТаблицаВозвратов = Результат.Выгрузить();
	
	Для каждого СтрокаВозвратов Из ТаблицаВозвратов Цикл
		
		ВозращенноеКоличество = СтрокаВозвратов.Количество;
		Если ВозращенноеКоличество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура"  , СтрокаВозвратов.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаВозвратов.Характеристика);
		СтруктураПоиска.Вставить("Цена"          , СтрокаВозвратов.Цена);
		
		МассивСтрокПродажи = ТаблицаПродаж.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаПродаж Из МассивСтрокПродажи Цикл
			
			ПроданноеКоличество = СтрокаПродаж.Количество;
			
			Если ВозращенноеКоличество >= ПроданноеКоличество Тогда
				ВозращенноеКоличество = ВозращенноеКоличество - ПроданноеКоличество;
				ТаблицаПродаж.Удалить(СтрокаПродаж)
			Иначе
				СтрокаПродаж.Количество = ПроданноеКоличество - ВозращенноеКоличество;
				КоэффициентПересчета  = СтрокаПродаж.Количество / ПроданноеКоличество;
				ВозращенноеКоличество = 0;
				СтрокаПродаж.Сумма    = КоэффициентПересчета * СтрокаПродаж.Сумма;
				СтрокаПродаж.СуммаНДС = КоэффициентПересчета * СтрокаПродаж.СуммаНДС;
				
				СтрокаПродаж.КоличествоУпаковок = КоэффициентПересчета * СтрокаПродаж.КоличествоУпаковок;
			КонецЕсли;
			
			Если ВозращенноеКоличество <= 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьДанныеПоДокументуПродажи", "ЧекККМ");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Если ОчищатьТовары Тогда
		Объект.Товары.Загрузить(ТаблицаПродаж);
		
		Для Каждого СтрокаТоваров Из Объект.Товары Цикл
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(СтрокаТоваров, СтруктураДействий, КэшированныеЗначения);
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, СтрокаТоваров, "КлючСвязи");
		КонецЦикла;
		
	Иначе
		Для Каждого СтрокаПродаж Из ТаблицаПродаж Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПродаж);
			
			ОбработкаТабличнойЧастиТоварыСервер.ОбработатьСтрокуТЧСервер(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, НоваяСтрока, "КлючСвязи");
		КонецЦикла;
	КонецЕсли;
	
	
	Если НЕ ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Объект.ДисконтнаяКарта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Чек, "ДисконтнаяКарта");
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			ДисконтнаяКартаПриИзмененииНаСервере();
		КонецЕсли;
	КонецЕсли;
	Объект.ЦенаВключаетНДС = Чек.ЦенаВключаетНДС;
	ЗаданРеквизитЦенаВключаетНДС = Истина;
	
	ЗаполнитьСтатусыУказанияСерийСервер();
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	
	СтруктураМарки = Новый Структура;
	СтруктураМарки.Вставить("Дата", Объект.Дата);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары, СтруктураМарки);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(ТекущееПоле)
	
	ВводСерийРазрешен = Истина;
	ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма, ПараметрыУказанияСерий, ВводСерийРазрешен);
	Если НЕ ВводСерийРазрешен Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	ПараметрыФормыУказанияСерий.Вставить("ТекущееПоле", ТекущееПоле);
	ПараметрыФормыУказанияСерий.Вставить("КоличествоЕдиницДоПересчета");
	
	ОбработчикУказанияСерий = Новый ОписаниеОповещения("ОбработатьУказаниеСерий", ЭтотОбъект, ПараметрыФормыУказанияСерий);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, ПараметрыФормыУказанияСерий, ЭтаФорма,,,, ОбработчикУказанияСерий, РежимБлокировки);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОбработку(Параметры)
	
	Объект.Дата = ТекущаяДатаСеанса();
	
	Объект.Основание = НСтр("ru = 'Возврат товаров'");
	Объект.Приложение = НСтр("ru = 'Заявление от'") + " " + Формат(Объект.Дата, "ДЛФ = DD");
	
	Объект.Контрагент = Константы.КонтрагентРозничныйПокупатель.Получить();
	
	Параметры.Свойство("Склад"  ,Объект.Склад);
	Параметры.Свойство("Магазин",Объект.Магазин);
	Параметры.Свойство("Касса"  ,Объект.Касса);
	Параметры.Свойство("Организация"  ,Объект.Организация);
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Объект.Магазин       = ЗначениеНастроекПовтИсп.ПолучитьМагазинПоУмолчанию(Объект.Магазин);
	Объект.Организация   = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация, Объект.Ответственный);
	Объект.Склад         = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Объект.Магазин,,Объект.Склад, Объект.Ответственный);
	Объект.Касса         = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Объект.Организация, ,Объект.Касса, Объект.Магазин, Объект.Ответственный);
	
	
	Если ЗначениеЗаполнено(Объект.Касса) Тогда
		Объект.Организация = ОрганизацияПоПодчиненномуОбъекту(Объект.Касса, "Владелец");
	КонецЕсли;
	
	Объект.СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	Объект.АналитикаХозяйственнойОперации = ЗначениеНастроекПовтИсп.ПолучитьАналитикуХозяйственнойОперацииПоУмолчанию(Объект.АналитикаХозяйственнойОперации, Перечисления.ХозяйственныеОперации.ВозвратОтПокупателя);
	ЗначениеСправочникиВидыОплатЧекаККМОплатаПодарочнымСертификатом = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом;
	
	Если ЗначениеЗаполнено(Объект.Склад) И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Объект.Склад.Организация;
		Объект.Касса       = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Объект.Организация, ,Объект.Касса, Объект.Магазин, Объект.Ответственный);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Функция ЗаполнениеФизЛицаСервер()
	
	Результат = Истина;
	
	Если Не ТипЗнч(Объект.ФизЛицо) = Тип("Строка") И ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		
		ФизЛицоФИО = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(, Новый Структура("ФизЛицо", Объект.ФизЛицо)); 
		Объект.ФИОФизЛицаИП = ФизЛицоФИО.Фамилия + " " + ФизЛицоФИО.Имя + " " + ФизЛицоФИО.Отчество;

		Если СокрЛП(Объект.ФИОФизЛицаИП) = "" Тогда
			Объект.ФИОФизЛицаИП = Объект.ФизЛицо.Наименование;
		КонецЕсли;
		
		УдостоверениеЛичности = РегистрыСведений.ДокументыФизическихЛиц.ДокументУдостоверяющийЛичностьФизлица(Объект.Физлицо);
		
		Объект.ПоДокументу = УдостоверениеЛичности;
		
		Объект.ДатаРождения = Объект.ФизЛицо.ДатаРождения;
		
	ИначеЕсли ТипЗнч(Объект.ФизЛицо) = Тип("Строка") И Не СокрЛП(Объект.ФизЛицо) = "" Тогда
		
		Объект.ФИОФизЛицаИП = Объект.ФизЛицо;
		
	ИначеЕсли Не СокрЛП(Объект.ФИОФизЛица) = "" Тогда
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает отбор на списке выбора вида оплаты.
//
// Параметры:
//  Элемент - элемент формы
//  ДанныеВыбора 
//  СтандартнаяОбработка
//
&НаКлиенте
Процедура НачалоВыбораВидаОплаты(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Справочник.ВидыОплатЧекаККМ.Форма.ФормаВыбора.Открытие");
             
	Отбор = Новый Структура;
	СписокТиповОплаты = Новый СписокЗначений;
	СписокТиповОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПодарочныйСертификат"));
	СписокТиповОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.БанковскийКредит"));
	СписокТиповОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.Бонусы"));
	
	Отбор.Вставить("ИмяПоляОтбораЛевоеЗначение", "ТипОплаты");
	Отбор.Вставить("ПравоеЗначение"            , СписокТиповОплаты);
	Отбор.Вставить("Отрицание"                 , Истина);
	
	ОткрытьФорму("Справочник.ВидыОплатЧекаККМ.Форма.ФормаВыбора",Новый Структура("СтруктураПараметрыОтбора", Отбор), Элемент);
	
КонецПроцедуры

// Процедура заполняет склад при изменении магазина.
//
&НаСервере
Процедура ПриИзмененииМагазина()
	
	Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Объект.Магазин,,Объект.Склад, Пользователи.ТекущийПользователь());
	Объект.ЦенаВключаетНДС = ОбщегоНазначенияРТ.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(Объект.Магазин.ПравилоЦенообразования, "ЦенаВключаетНДС");
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ВозвратТоваровОтПокупателя.ПараметрыУказанияСерий(Объект));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОдиночнойОплаты(ПолучитьПроцентКомиссии = Ложь)

	ПриИзмененииРеквизитаОдиночнойОплаты("ВидОплаты", Объект.ВидОплаты);
	ПриИзмененииРеквизитаОдиночнойОплаты("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
	ПриИзмененииРеквизитаОдиночнойОплаты("Сумма", Объект.СуммаОплаты);
	
	ПараметрыОплаты = Новый Структура();
	ПараметрыОплаты.Вставить("ВидОплаты", Объект.ВидОплаты);
	ПараметрыОплаты.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
	
	ПриИзмененииРеквизитаОдиночнойОплатыСервер(ПараметрыОплаты);
	
	ТипОплаты = ПараметрыОплаты.ТипОплаты;
	ПриИзмененииРеквизитаОдиночнойОплаты("ТипОплаты", ТипОплаты);
	
	Если ПолучитьПроцентКомиссии Тогда
		ПроцентКомиссии = ПараметрыОплаты.ПроцентКомиссии;
	КонецЕсли;
	
	ПриИзмененииРеквизитаОдиночнойОплаты("ПроцентКомиссии", ПроцентКомиссии);
	
	СуммаКомиссии = Объект.СуммаОплаты * ПроцентКомиссии / 100;
	
	ПриИзмененииРеквизитаОдиночнойОплаты("СуммаКомиссии", СуммаКомиссии);
	
	УстановитьДоступность();
	
	ОбновитьПолеСдача();
	МодифицированыСохраняемыеДанные = Истина;
	УстановитьДоступностьСоздатьДокументы();
КонецПроцедуры

&НаКлиенте
// Срабатывает при изменении одиночной оплаты.
//
// Параметры:
//  ИмяРеквизита;
//  ЗначениеРеквизита
//
Процедура ПриИзмененииРеквизитаОдиночнойОплаты(ИмяРеквизита, ЗначениеРеквизита)

	Если Объект.Оплата.Количество() = 0  Тогда
		СтрокаОплаты = Объект.Оплата.Добавить();
	Иначе
		СтрокаОплаты = Объект.Оплата[0];
	КонецЕсли;
	
	СтрокаОплаты[ИмяРеквизита] = ЗначениеРеквизита;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеквизитаОдиночнойОплатыСервер(СтруктураПараметров)
	
	СтруктураПараметров.Вставить("ТипОплаты", СтруктураПараметров.ВидОплаты.ТипОплаты);
	СтруктураПараметров.Вставить("ПроцентКомиссии", ЭквайрингВызовСервера.ПолучитьПроцентКомиссииПоТерминалу(СтруктураПараметров.ЭквайринговыйТерминал, СтруктураПараметров.ВидОплаты, Истина));
	
КонецПроцедуры

&НаСервере
// Установка дисконтной карты по чеку ККМ.
//
// Параметры:
//  Нет
//
Процедура ПриИзмененииТоварыЧекККМСервер(ЧекККМ)

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ДисконтнаяКарта"        , "ДисконтнаяКарта");
	СтруктураРеквизитов.Вставить("ВладелецДисконтнойКарты", "ВладелецДисконтнойКарты");
	СтруктураРеквизитов.Вставить("ЦенаВключаетНДС"        , "ЦенаВключаетНДС");
	СтруктураРеквизитов.Вставить("Дата"                   , "Дата");
	СтруктураРеквизитов.Вставить("НомерЧекаККМ"           , "НомерЧекаККМ");
	ЗначенияРеквизитов = ОбщегоНазначенияРТ.ПолучитьЗначенияРеквизитовОбъекта(ЧекККМ, СтруктураРеквизитов);
	
	Объект.ДисконтнаяКарта         = ЗначенияРеквизитов.ДисконтнаяКарта;
	Объект.ВладелецДисконтнойКарты = ЗначенияРеквизитов.ВладелецДисконтнойКарты;
	Объект.ЦенаВключаетНДС         = ЗначенияРеквизитов.ЦенаВключаетНДС;
	ЗаданРеквизитЦенаВключаетНДС   = Истина;
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.НомерЧекаККМ) Тогда
		Объект.ЧекНомер = ЗначенияРеквизитов.НомерЧекаККМ;
		Объект.ЧекДата  = ЗначенияРеквизитов.Дата;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТерминалНачалоВыбораИзСписка(ЭлементСписка, ПараметрВидОплаты)
	
	ЭлементСписка.СписокВыбора.Очистить();
	
	СписокВыбора = ЭквайринговыйТерминалНачалоВыбораИзСпискаСервер(ПараметрВидОплаты);
	
	Для Каждого Терминал Из СписокВыбора Цикл
		ЭлементСписка.СписокВыбора.Добавить(Терминал);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЭквайринговыйТерминалНачалоВыбораИзСпискаСервер(ПараметрВидОплаты)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЭквайринговыеТерминалы.Ссылка
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы.ТарифыЗаРасчетноеОбслуживание КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Ссылка.Касса = &Касса
	|	И ЭквайринговыеТерминалы.Ссылка.Магазин = &Магазин
	|	И ЭквайринговыеТерминалы.Ссылка.Организация = &Организация
	|	И ЭквайринговыеТерминалы.ВидОплаты = &ВидОплаты
	|	И НЕ ЭквайринговыеТерминалы.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВидОплаты", ПараметрВидОплаты);
	Запрос.УстановитьПараметр("Касса",Объект.Касса);
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Серии

&НаСервере
Процедура УстановитьВидимостьСтатусыСерийИПодарочныхСертификатов()
	
	Если НЕ ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Элементы.ТоварыСтатусыСерийИПодарочныхСертификатов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку");
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);
	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура ВывестиОбщееСообщение(ТекстСообщения)

	#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстСообщения,
		Объект
		);
	#КонецЕсли
	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураЗаполненияЦены);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДополнительнымПравам()

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыЦена.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыСумма.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену);

	УправлениеПользователями.УстановитьТолькоПросмотрДляРеквизитовТабличнойЧасти(Элементы.ТоварыПродавец.ТолькоПросмотр, 
																				 ПланыВидовХарактеристик.ПраваПользователей.ИзменятьПродавца);

	РазрешитьОформлениеВозвратовОтПокупателяБезДокументовПродажи = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОформлениеВозвратовОтПокупателяБезДокументовПродажи, Ложь);
	
	Элементы.ТоварыДокументПродажи.АвтоОтметкаНезаполненного = НЕ РазрешитьОформлениеВозвратовОтПокупателяБезДокументовПродажи;
	
КонецПроцедуры

&НаКлиенте
// Процедура дополняет общую процедура заполнения подвала.
//
// Параметры:
//
Процедура ОбновитьСуммыПодвала(Знач Товары, Знач ЦенаВключаетНДС, Сумма)
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Товары, ЦенаВключаетНДС, Сумма);
	
	Элементы.ДекорацияСуммаИтого.Заголовок = Формат(Сумма, "ЧЦ=15; ЧДЦ=2; ЧН=; ЧГ=3,0");
	
	ОбновитьПолеСдача();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПолеСдача()

	Перем СуммаНаличнойОплаты,СуммаБезналичнойОплаты;
	
	ПолучитьСуммыПоВидуОплат(СуммаНаличнойОплаты, СуммаБезналичнойОплаты);

	Если СуммаБезналичнойОплаты >= СуммаВсего Тогда
		СуммаСдача = 0;
	Иначе
		СуммаСдача = Макс(СуммаНаличнойОплаты - (СуммаВсего - СуммаБезналичнойОплаты),0);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуКомиссии(ТекущаяСтрока)
	
	ТекущаяСтрока.СуммаКомиссии = ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентКомиссии / 100;
	
КонецПроцедуры

&НаСервере
Функция СтруктураДанныхОбОрганизации(ДокументВозврата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ВозвратТоваровОтПокупателя.Организация
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка = &ДокументВозврата";
	
	Запрос.УстановитьПараметр("ДокументВозврата", ДокументВозврата);
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	СтруктураРезультата = Новый Структура;
	Если Выборка.Следующий() Тогда
		
		Руководители = ФормированиеПечатныхФормСервер.ОтветственныеЛицаОрганизаций(Выборка.Организация, ТекущаяДатаСеанса(),,Истина);
		
		СтруктураРезультата.Вставить("Руководитель"         , Руководители.Руководитель);
		СтруктураРезультата.Вставить("РуководительДолжность", Руководители.РуководительДолжность);
		СтруктураРезультата.Вставить("Наименование"         , ?(СокрЛП(Выборка.Организация.НаименованиеПолное) = "", Выборка.Организация.Наименование, Выборка.Организация.НаименованиеПолное));
		СтруктураРезультата.Вставить("Организация"          , Выборка.Организация);
		
	Иначе
		
		СтруктураРезультата.Вставить("Руководитель"         , Неопределено);
		СтруктураРезультата.Вставить("РуководительДолжность", Неопределено);
		СтруктураРезультата.Вставить("Наименование"         , Неопределено);
		СтруктураРезультата.Вставить("Организация"          , Неопределено);
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОрганизацияПоПодчиненномуОбъекту(ПодчиненныйОбъект, ИмяРеквизита = "Организация")
	Возврат ПодчиненныйОбъект[ИмяРеквизита];
КонецФункции

&НаСервере
//  Возвращает отчет о розничных продажах по чеку ККМ.
//
// Параметры:
//  Чек ККМ
//
Функция ОтчетОРозничныхПродажахПоЧекуККМСервер(ЧекККМ)
	
	Возврат ЧекККМ.ОтчетОРозничныхПродажах
	
КонецФункции

&НаКлиенте
// Структура пересчета суммы НДС в строке.
//
// Параметры:
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ()

	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	
	Возврат СтруктураЗаполненияЦены;

КонецФункции

&НаСервере
// Получение суммы наличной и безналичной оплаты.
//
// Параметры:
//  СуммаНаличнойОплаты - сумма наличной о.
//
Процедура ПолучитьСуммыПоВидуОплат(СуммаНаличнойОплаты, СуммаБезналичнойОплаты)

	СуммаНаличнойОплаты = 0;
	СуммаБезналичнойОплаты = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Оплата.ВидОплаты,
	|	Оплата.Сумма
	|ПОМЕСТИТЬ ТаблицаОплат
	|ИЗ
	|	&Оплата КАК Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОплат.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ТаблицаОплат.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|						ТОГДА ТаблицаОплат.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК СуммаНаличнойОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОплат.ВидОплаты = ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА (НЕ ТаблицаОплат.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные))
	|						ТОГДА ТаблицаОплат.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК СуммаБезналичнойОплаты
	|ИЗ
	|	ТаблицаОплат КАК ТаблицаОплат";
	
	Запрос.УстановитьПараметр("Оплата", Объект.Оплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Если ЗначениеЗаполнено(Выборка.СуммаНаличнойОплаты) Тогда
			СуммаНаличнойОплаты = Выборка.СуммаНаличнойОплаты;
		КонецЕсли; 
	
		Если ЗначениеЗаполнено(Выборка.СуммаБезналичнойОплаты) Тогда
			СуммаБезналичнойОплаты = Выборка.СуммаБезналичнойОплаты;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТипОплатыПоВидуОплаты(ВидОплаты)

	Возврат ВидОплаты.ТипОплаты;

КонецФункции

&НаСервере
Процедура ПроверитьПраваДоступаНаОбработку(Отказ)

	Если Пользователи.РолиДоступны("ПолныеПрава") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПравоНаРКО = Пользователи.РолиДоступны("ДобавлениеИзменениеКассовыхОрдеров");
	ПравоНаЭквайринг = Пользователи.РолиДоступны("ДобавлениеИзменениеОплатОтПокупателяПлатежнойКартой") ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами");
	
	Если НЕ ПравоНаРКО И НЕ ПравоНаЭквайринг Тогда
		ТекстОшибки = НСтр("ru = 'У пользователя не достаточно прав для кассовых и эквайринговых операций'");
	ИначеЕсли НЕ ПравоНаРКО Тогда
		ТекстОшибки = НСтр("ru = 'У пользователя не достаточно прав для кассовых операций'");
	Иначе
		ТекстОшибки = НСтр("ru = 'У пользователя не достаточно прав для банковских операций'");
	КонецЕсли;
	
	Если НЕ ПравоНаРКО ИЛИ НЕ ПравоНаЭквайринг Тогда
		Отказ = Истина;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СоздатьДокументыСервер()

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	РезультатСтруктура = ОбработкаОбъект.СформироватьДокументы();
	
	Если РезультатСтруктура.Результат Тогда
		МассивСформированныхДокументов = РезультатСтруктура.МассивСформированныхДокументов;
		
		Для Каждого СформированныйДокумент Из МассивСформированныхДокументов Цикл
			
			Если ТипЗнч(СформированныйДокумент) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				РасходныйКассовыйОрдер = СформированныйДокумент;
				ОбработкаОбъект.РасходныйКассовыйОрдер = Неопределено;
			ИначеЕсли ТипЗнч(СформированныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
				ВозвратТоваровОтПокупателя = СформированныйДокумент;
				ОбработкаОбъект.ВозвратТоваровОтПокупателя = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		
		ОбработкаОбъект.СуммаОплаты = 0;
		ОбработкаОбъект.Оплата.Очистить();
		ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		
		ОтобразитьСформированныеДокументы(МассивСформированныхДокументов);
		
		
	КонецЕсли;
	
	Возврат РезультатСтруктура.Результат;
КонецФункции

&НаСервере
Процедура ОтобразитьСформированныеДокументы(МассивСформированныхДокументов)
	
	Элементы.Декорация1.Видимость = Ложь;
	
	Если ИндексСформированногоДокумента > 0 Тогда
		Для Счетчик = 0 По ИндексСформированногоДокумента-1 Цикл
			Элементы["Добавлен"+Счетчик].Шрифт =  Новый Шрифт(Элементы["Добавлен"+Счетчик].Шрифт,,,Ложь);
		КонецЦикла;
	КонецЕсли;

	ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ВозвратТоваровОтПокупателя, ДокументСсылка.РасходныйКассовыйОрдер,  ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой");
	
	ИндексЭлемента               = Формат(ИндексСформированногоДокумента, "ЧН=0; ЧГ=0");
	// элемент группа
	ИмяЭлементаГруппа = "ГруппаДобавлен" + ИндексЭлемента;
	Родитель                           = Элементы.ГруппаСформированныеДокументы;
	ЭлементГруппа                      = Элементы.Добавить(ИмяЭлементаГруппа, Тип("ГруппаФормы"), Родитель);
	ЭлементГруппа.Вид                  = ВидГруппыФормы.ОбычнаяГруппа;
	ЭлементГруппа.Отображение          = ОтображениеОбычнойГруппы.СлабоеВыделение;
	ЭлементГруппа.Группировка          = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ЭлементГруппа.ОтображатьЗаголовок  = Истина;
	ЭлементГруппа.Заголовок = НСтр("ru = 'Сформировано:'") + " " + ТекущаяДатаСеанса();
	
	Если ИндексСформированногоДокумента >0 Тогда
		Элементы.Переместить(ЭлементГруппа, Родитель, Элементы["ГруппаДобавлен"+ ИндексСформированногоДокумента]);
	КонецЕсли;
	
	Для каждого Документ Из МассивСформированныхДокументов Цикл
		ДобавляемыеРеквизиты = Новый Массив;
		ИндексЭлемента               = Формат(ИндексСформированногоДокумента, "ЧН=0; ЧГ=0");
		
		ИмяЭлементаГруппаДокумента = "ГруппаДокумент" + ИндексЭлемента;
		ЭлементГруппаДокумент = Элементы.Добавить(ИмяЭлементаГруппаДокумента, Тип("ГруппаФормы"), ЭлементГруппа);
		ЭлементГруппаДокумент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементГруппаДокумент.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ЭлементГруппаДокумент.Отображение         = ОтображениеОбычнойГруппы.Нет;
		ЭлементГруппаДокумент.ОтображатьЗаголовок = Ложь;
		
		// реквизит
		ИмяЭлемента = "Добавлен" + ИндексЭлемента;
		Реквизит = Новый РеквизитФормы(ИмяЭлемента, ОписаниеТипов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("ТекстДокументаЕГАИС" + ИндексЭлемента, Новый ОписаниеТипов("ФорматированнаяСтрока"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		// элемент формы
		Элемент                      = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ЭлементГруппаДокумент);
		Элемент.Вид                  = ВидПоляФормы.ПолеНадписи;
		Элемент.ПутьКДанным          = ИмяЭлемента;
		Элемент.Гиперссылка          = Истина;
		Элемент.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт,,,Истина);
		
		ЭтотОбъект[ИмяЭлемента] = Документ;
		ЭтотОбъект["ТекстДокументаЕГАИС" + ИндексЭлемента] = СформироватьТекстДокументаЕГАИС(Документ);
		
		ТипЗнчДокумент = ТипЗнч(Документ);
		
		Если ТипЗнчДокумент = Тип("ДокументСсылка.РасходныйКассовыйОрдер") 
			ИЛИ ТипЗнчДокумент = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда
			
			ВыводитьКнопку = Истина;
			
			Если ТипЗнчДокумент = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				ВыводитьКнопку = Документ.Касса.ПробиватьЧекиПоКассеККМ;
				КартинкаПО = БиблиотекаКартинок.ПодключаемоеОборудованиеФискальныйРегистратор16;
			Иначе
				КартинкаПО = БиблиотекаКартинок.ПодключаемоеОборудованиеЭквайринговыйТерминал16;
			КонецЕсли;
			
			Если ВыводитьКнопку Тогда
				// Команда печати чека
				ИмяКоманды = "ПробитиеДокумента" + ИндексЭлемента;
				КомандаФормы = ЭтотОбъект.Команды.Добавить(ИмяКоманды);
				КомандаФормы.Действие = "Подключаемый_ПробитиеЧекаПоДокументу";
				КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
				КомандаФормы.Картинка = КартинкаПО;
				Если ТипЗнчДокумент = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
					КомандаФормы.Заголовок = НСтр("ru = 'Пробить чек'");
				Иначе
					КомандаФормы.Заголовок = НСтр("ru = 'Выполнить на терминале'");
				КонецЕсли;
				ЭлементКоманды = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ЭлементГруппаДокумент);
				ЭлементКоманды.ИмяКоманды = ИмяКоманды;
				ЭлементКоманды.ТолькоВоВсехДействиях = Ложь;
			КонецЕсли;
		ИначеЕсли ТипЗнчДокумент = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			Если ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(Объект.Организация, Объект.Магазин, Объект.Дата) Тогда
				
				ПолеНадписи = Элементы.Добавить("ТекстДокументаЕГАИС" + ИндексЭлемента, Тип("ПолеФормы"), ЭлементГруппаДокумент);
				ПолеНадписи.Вид = ВидПоляФормы.ПолеНадписи;
				ПолеНадписи.ПутьКДанным = "ТекстДокументаЕГАИС" + ИндексЭлемента;
				ПолеНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				ПолеНадписи.УстановитьДействие("ОбработкаНавигационнойСсылки", "ТекстДокументаЕГАИСОбработкаНавигационнойСсылки");
			КонецЕсли;
		КонецЕсли;
		
		ИндексСформированногоДокумента = ИндексСформированногоДокумента + 1;
		
	КонецЦикла;

	Элементы.СтраницаСформированныеДокументы.Доступность = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСформированныеДокументы;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступность()
	
	ТерминалТолькоПросмотр = НЕ ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта");
	
	Элементы.ЭквайринговыйТерминал.АвтоОтметкаНезаполненного = НЕ ТерминалТолькоПросмотр;
	Если ТерминалТолькоПросмотр Тогда
		Элементы.ЭквайринговыйТерминал.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Элементы.ЭквайринговыйТерминал.ТолькоПросмотр = ТерминалТолькоПросмотр;
	Элементы.ПроцентКомиссии.ТолькоПросмотр       = ТерминалТолькоПросмотр;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКассы()
	
	Элементы.Касса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВидовОплаты()
	
	Элементы.ВидОплаты.Видимость              = НЕ Объект.ПереключательОплатаСложная;
	Элементы.СуммаОплаты.Видимость            = НЕ Объект.ПереключательОплатаСложная;
	Элементы.ОплатаБезСдачи.Видимость         = НЕ Объект.ПереключательОплатаСложная;
	Элементы.ДекорацияСуммаИтого.Видимость    = НЕ Объект.ПереключательОплатаСложная;
	Элементы.ДекорацияПодсказка1.Видимость    = НЕ Объект.ПереключательОплатаСложная;
	Элементы.ДекорацияПодсказка2.Видимость    = НЕ Объект.ПереключательОплатаСложная;
	
	Элементы.ЭквайринговыйТерминал.Видимость  = НЕ Объект.ПереключательОплатаСложная;
	Элементы.ПроцентКомиссии.Видимость        = НЕ Объект.ПереключательОплатаСложная;
	Элементы.СуммаКомиссии.Видимость          = НЕ Объект.ПереключательОплатаСложная;
	
	Элементы.Оплата.Видимость         = Объект.ПереключательОплатаСложная;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСоздатьДокументы();
	
	Если НЕ МодифицированыСохраняемыеДанные ИЛИ Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСформированныеДокументы Тогда
		Элементы.СоздатьДокументы.Доступность = Ложь;
	Иначе
		Элементы.СоздатьДокументы.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоФО()
	
	ИспользоватьОплатуПлатежнымиКартами = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами");
	
	Если НЕ ИспользоватьОплатуПлатежнымиКартами Тогда
		
		Элементы.ВидОплаты.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	Элементы.ПереключательОплатаСложная.Видимость = ИспользоватьОплатуПлатежнымиКартами;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуНаличными()
	
	НоваяСтрока = Объект.Оплата.Добавить();
	НоваяСтрока.ВидОплаты = ВидОплатыНаличные;
	НоваяСтрока.ТипОплаты = ТипОплаты;
	
	Если Объект.Оплата.Количество() > 1 Тогда
		Сумма = Объект.Товары.Итог("Сумма") - Объект.Оплата.Итог("Сумма");
		НоваяСтрока.Сумма = ?(Сумма > 0, Сумма, 0);
	КонецЕсли;
	
	Элементы.Оплата.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.Оплата.ТекущийЭлемент = Элементы.ОплатаСумма;
	
	Элементы.Оплата.ИзменитьСтроку();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидОплатыПоТипуПлатежнаяКарта()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ВидыОплатЧекаККМ.Ссылка
	|ИЗ
	|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
	|ГДЕ
	|	НЕ ВидыОплатЧекаККМ.ПометкаУдаления
	|	И ВидыОплатЧекаККМ.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьКомандыВидовОплаты()

	ПлатежнаяКарта = ЗначениеНастроекПовтИсп.ПолучитьВидОплатыПоТипу(Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта);
	
	Если ПлатежнаяКарта = Неопределено Тогда
		Элементы.ОплатаПлатежнаяКарта.Заголовок = Элементы.ОплатаПлатежнаяКарта.Заголовок + "...";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПодсказкиТерминала()
	
	Если ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта") Тогда
		
		Если ЗначениеЗаполнено(Объект.Касса) Тогда 
			Элементы.ДекорацияПодсказка2.Заголовок = "";
		Иначе
			Элементы.ДекорацияПодсказка2.Заголовок = НСтр("ru = '<нужно выбрать кассу>'");
		КонецЕсли;
	Иначе
		Элементы.ДекорацияПодсказка2.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЭквайринговыйТерминалПоУмолчанию()
	
	Если ТипОплаты = ТипОплатыПлатежнаяКарта ИЛИ Объект.ПереключательОплатаСложная Тогда
		
		Если Объект.ПереключательОплатаСложная Тогда
			
			
			Для Каждого СтрокаОплаты Из Объект.Оплата Цикл
				Если СтрокаОплаты.ТипОплаты = ТипОплатыПлатежнаяКарта Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаОплаты.ЭквайринговыйТерминал) Тогда
						ЭквайринговыйТерминалПоУмолчанию = ПолучитьЭквайринговыйТерминалПоУмолчанию(СтрокаОплаты.ВидОплаты);
						
						СтрокаОплаты.ЭквайринговыйТерминал = ЭквайринговыйТерминалПоУмолчанию;
						
						СтрокаОплаты.ПроцентКомиссии = ЭквайрингВызовСервера.ПолучитьПроцентКомиссииПоТерминалу(СтрокаОплаты.ЭквайринговыйТерминал, СтрокаОплаты.ВидОплаты, Истина);
						ПересчитатьСуммуКомиссии(СтрокаОплаты);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			ЭквайринговыйТерминал = ЭквайринговыйТерминалПоУмолчанию;
			ПриИзмененииОдиночнойОплаты(Истина);
			УстановитьВидимостьПодсказкиТерминала();
			МодифицированыСохраняемыеДанные = Истина;
			УстановитьДоступностьСоздатьДокументы();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЭквайринговыйТерминалПоУмолчанию(ВидОплаты)
	
	Результат = Справочники.ЭквайринговыеТерминалы.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Объект.Касса) Тогда
		Результат = Справочники.ЭквайринговыеТерминалы.ЭквайринговыйТерминалПоУмолчанию(Объект.Касса, Объект.Организация, Объект.Магазин, ВидОплаты);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДисконтнаяКартаПриИзмененииНаСервере()
	
	Объект.СкидкиИБонусыСторнированы = Ложь;
	
	ВладелецКарты = Объект.ДисконтнаяКарта.ВладелецКарты;
	
	Если ЗначениеЗаполнено(ВладелецКарты) Тогда
		Если ТипЗнч(ВладелецКарты) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			Объект.ФизЛицо = ВладелецКарты;
			ЗаполнениеФизЛицаСервер();
			Объект.ФИОФизЛица = ОбщегоНазначенияРТКлиентСерверПовтИсп.ПолучитьСклонениеФИО(Объект.ФИОФизЛицаИП, 3);
			
		ИначеЕсли ТипЗнч(ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			Объект.Контрагент = ВладелецКарты;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСкидкиИОплатуБонусамиКСторнированию()
	
	СкидкиНаценкиСерверПереопределяемый.ПодготовитьСкидкиИОплатуБонусамиКСторнированиюПриВозврате(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = Неопределено;
	Если СтруктураПараметровКлиента.Свойство("АктивизироватьСтроку", ИдентификаторСтроки) Тогда
		
		Если НЕ ИдентификаторСтроки = Неопределено Тогда
			Элементы.Товары.ТекущаяСтрока = ИдентификаторСтроки;
			Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок;
			ТекущийЭлемент = Элементы.Товары;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыДокументПродажиПриИзмененииНаСервере(ДокументПродажи)
	
	Если ЗначениеЗаполнено(ДокументПродажи) Тогда
		ЗаданРеквизитЦенаВключаетНДС = Истина;
		Объект.ЦенаВключаетНДС = ДокументПродажи.ЦенаВключаетНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыборСтрокиДокументаСервер(ЧекККМ, ДокументПродажи, ВыбранныйДокумент)
	
	ОтчетОРозничныхПродажах = ОтчетОРозничныхПродажахПоЧекуККМСервер(ЧекККМ);
	Если НЕ ОтчетОРозничныхПродажах = ВыбранныйДокумент Тогда
		
		ЧекККМ = Документы.ЧекККМ.ПустаяСсылка();
		
	КонецЕсли;
	
	ТоварыДокументПродажиПриИзмененииНаСервере(ДокументПродажи);
	
КонецПроцедуры

&НаСервере
Процедура КассаПриИзмененииСервер()
	
	Объект.КассаККМ = Объект.Касса.КассаККМ;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыЧека(Отказ, Документ)
	
	СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
	КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
	
	ТипЗнчДокумент = ТипЗнч(Документ);
	
	ПараметрыЧека = Новый Структура("ПробитЧек");
	
	Если ТипЗнчДокумент = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ПараметрыЧека.Вставить("АдресЧекаЕГАИС", Документ.АдресЧекаЕГАИС);
		Возврат ПараметрыЧека;
	ИначеЕсли ТипЗнчДокумент = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ПараметрыКассыККМ       = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(Объект.КассаККМ);
		ПараметрыЧека.Вставить("ИдентификаторУстройства", ПараметрыКассыККМ.ИдентификаторУстройства);
		ПараметрыЧека.Вставить("РаспределениеВыручкиПоСекциям", ПараметрыКассыККМ.РаспределениеВыручкиПоСекциям);
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru='Кассовая смена не открыта!'");
	Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, Документ.Дата, ТекстОшибки) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			,
			,
			Отказ);
			
		Возврат ПараметрыЧека;
	Иначе
		
		ПараметрыЧека.Вставить("ПробитЧек", Документ.ПробитЧек);
		ПараметрыЧека.Вставить("СуммаДокумента", Документ.СуммаДокумента);
		
		Если ТипЗнчДокумент = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда
			ПараметрыЧека.Вставить("ОплатаВыполнена", Документ.ОплатаВыполнена);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыЧека;
	
КонецФункции // ПараметрыЧека()

&НаКлиенте
Функция ПроверкаВозможностиРаботыСКартой(Документ, ПараметрыФормы, ПараметрДействия, ПараметрыКассыККМ, ПараметрыЭТ, ИмяКоманды)
	
	Перем Отказ;
	
	Результат = Истина;
	ПараметрыКассыККМ = Новый Структура();
	ПараметрыЭТ       = Новый Структура();
	
	ПолучитьНеобходимыеДанныеДляРаботыСКартой(Документ, ПараметрыФормы, ПараметрДействия, ПараметрыКассыККМ, ПараметрыЭТ);
	
	// Предварительно авторизуем операцию.
	Если ПараметрыЭТ.ИспользоватьБезПодключенияОборудования Тогда
		ПараметрыФормы.Вставить("ПоказыватьНомерКарты", Истина);
	КонецЕсли;
	
	ПараметрДействия.Вставить("ОписаниеОшибкиФР", "");
	ПараметрДействия.Вставить("ПараметрыКассыККМ", ПараметрыКассыККМ);
	ПараметрДействия.Вставить("ПараметрыЭТ", ПараметрыЭТ);
	ПараметрДействия.Вставить("СуммаОперации", 0);
	ПараметрДействия.Вставить("НомерКарты", "");
	ПараметрДействия.Вставить("НомерСсылкиОперации", "");
	ПараметрДействия.Вставить("НомерЧекаЭТ", 0);
	ПараметрДействия.Вставить("Документ", Документ);
	ПараметрДействия.Вставить("СтрокаСлипЧека", "");
	ПараметрДействия.Вставить("ИмяКоманды", ИмяКоманды);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПолучитьНеобходимыеДанныеДляРаботыСКартой(Документ, ПараметрыФормы, ПараметрДействия, ПараметрыКассыККМ, ПараметрыЭТ)
	
	ПараметрыЭТ = ЗначениеНастроекВызовСервера.ПолучитьПараметрыЭТ(Документ.ЭквайринговыйТерминал);
	ПараметрыЭТ.ИспользоватьБезПодключенияОборудования = ПараметрыЭТ.ИспользоватьБезПодключенияОборудования ИЛИ НЕ ИспользоватьПодключаемоеОборудование;
	
	Если НЕ Документ.ПробиватьЧекиПоКассеККМ Тогда
		ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(Справочники.КассыККМ.ПустаяСсылка());
	Иначе
		ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(Документ.КассаККМ);
		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(Документ.КассаККМ);
		КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
	КонецЕсли;
	ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования ИЛИ НЕ ИспользоватьПодключаемоеОборудование;
	
	ПараметрыФормы = Новый Структура("Сумма, ПределСуммы", Документ.СуммаДокумента, Документ.СуммаДокумента);
	ПараметрыФормы.Вставить("ЗапретРедактированияСуммы", Истина);
	ПараметрДействия.Вставить("НомерЧекаККМ", Документ.Номер);
	
КонецПроцедуры

&НаСервере
Функция ЗавершитьОплатуКартойСервер(ПараметрДействия, НомерЧекаККМ, ПробитЧек)
	
	Документ = ПараметрДействия.Документ;
	ДокументОбъект = Документ.ПолучитьОбъект();
	
	ДокументОбъект.НомерПлатежнойКарты = ПараметрДействия.НомерКарты;
	ДокументОбъект.ОплатаВыполнена     = Истина;
	
	Если НЕ ДокументОбъект.ПробиватьЧекиПоКассеККМ
		ИЛИ ПараметрДействия.ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
		ДокументОбъект.ПробитЧек = Истина;
		ДокументОбъект.НомерЧекаККМ = НомерЧекаККМ;
	КонецЕсли;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ПробитЧек = ДокументОбъект.ПробитЧек;
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьОплатуКартойЗавершение(РезультатВыполнения, ПараметрДействия) Экспорт
	
	Если РезультатВыполнения Тогда
		Элементы[ПараметрДействия.ИмяКоманды].Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОплатуКартой(ПараметрДействия)
	
	ПробитЧек = Ложь;
	ПараметрыДокумента = ОбщегоНазначенияРТВызовСервера.ПолучитьЗначенияРеквизитовОбъекта(ПараметрДействия.Документ, Новый Структура("КассаККМ, НомерЧекаККМ"));
	Если НомерДокументаКассыККМ[ПараметрыДокумента.КассаККМ] <> Неопределено Тогда
		НомерЧекаККМ  = НомерДокументаКассыККМ[ПараметрыДокумента.КассаККМ];
	Иначе
		НомерЧекаККМ  = ПорядковыйНомерПродажи;
	КонецЕсли; 

	РезультатЗаписи = ЗавершитьОплатуКартойСервер(ПараметрДействия, НомерЧекаККМ, ПробитЧек);
	
	Если РезультатЗаписи = Истина Тогда
		Если ПробитЧек Тогда
			НомерДокументаКассыККМ[ПараметрыДокумента.КассаККМ] = ПараметрыДокумента.НомерЧекаККМ + 1;
			ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		Иначе
			Оповещение = Новый ОписаниеОповещения("ЗавершитьОплатуКартойЗавершение", ЭтотОбъект, ПараметрДействия);
			
			ПараметрыДляЧека = Новый Структура;
			ПараметрыДляЧека.Вставить("ТипЧека",								1);
			ПараметрыДляЧека.Вставить("ТипОплаты",								1);
			ПараметрыДляЧека.Вставить("ИспользоватьПодключаемоеОборудование",	ИспользоватьПодключаемоеОборудование);
			ПараметрыДляЧека.Вставить("НаличнаяОперация",						Ложь);
			ПараметрыДляЧека.Вставить("АгентскийДоговорВШапке",					Ложь);
			ПараметрыДляЧека.Вставить("ДокументНаККМ",							ПараметрДействия.Документ);
			ПараметрыДляЧека.Вставить("КассаККМ",								ПараметрыДокумента.КассаККМ);
			
			ПодключаемоеОборудованиеРТКлиент.НачатьПробитиеЧекаКОВыполнить(Оповещение, Объект, ПараметрыДляЧека, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеСервер()
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	Возврат АдресВХранилище;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииТоварыКоличестваУпаковок(ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВводДополнительнойИнформации(Элемент, ЗавершатьРедактирование = Истина)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыУпаковка 
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатураЕдиницаИзмерения Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
		
			Если ТекущиеДанные.СтатусУказанияСерий <> 0 Тогда
				Если ЗавершатьРедактирование Тогда
					Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
				КонецЕсли;
				Если Элемент.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок Тогда
					УказатьСерии("КоличествоУпаковок");
				Иначе
					УказатьСерии("Упаковка");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияСервер()
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСуммыПодвала(Объект.Товары, Объект.ЦенаВключаетНДС, СуммаВсего);
	
	УдалитьНесвязанныеАкцизы();
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНесвязанныеАкцизы()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеАкцизы(ЭтотОбъект);
	
КонецПроцедуры

#Область ЕГАИС

&НаСервере
Функция СформироватьТекстДокументаЕГАИС(Документ)
	
	Если ТипЗнч(Документ) <> Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		Возврат "";
	КонецЕсли;
	
	ОформлениеДокументовПоПриоритетам = ИнтеграцияЕГАИСРТ.ДанныеОформленияДокументовПоПриоритетам(Документ);
	
	ЕстьАлкогольнаяПродукция = ОформлениеДокументовПоПриоритетам.Количество() > 0;
	
	Если Не ЕстьАлкогольнаяПродукция Тогда
		Возврат "";
	КонецЕсли;
	
	ФорматированныеСтроки = Новый Массив;
	Для Каждого КлючИЗначение Из ОформлениеДокументовПоПриоритетам Цикл
		Данные = КлючИЗначение.Значение;
		
		ЕстьДокументыСЧастичнымОформлением = Ложь;
		Для Каждого ДанныеДокументаЕГАИС Из Данные Цикл
			Если ДанныеДокументаЕГАИС.МассивДокументов.Количество() > 0 Тогда
				ЕстьДокументыСЧастичнымОформлением = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ДанныеДокументаЕГАИС Из Данные Цикл
			
			Если ЕстьДокументыСЧастичнымОформлением Тогда
				Если ДанныеДокументаЕГАИС.МассивДокументов.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ФорматированныеСтроки.Количество() <> 0 Тогда
				Если Данные.Количество() > 1 Тогда
					ФорматированныеСтроки.Добавить(" " + НСтр("ru = 'или'") + " ");
				Иначе
					ФорматированныеСтроки.Добавить("," + " ");
				КонецЕсли;
			КонецЕсли;
			
			ФорматированныеСтроки.Добавить(ДанныеДокументаЕГАИС.Представление);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(ФорматированныеСтроки);
	
КонецФункции

#КонецОбласти

#Область ПечатьНаОборудовании

&НаКлиенте
Процедура НапечататьЧекКлиентИнкассацияЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ОбщиеПараметры = Новый Структура();
		Отказ = Ложь;
		НомерЧека = НомерДокументаКассыККМ[Объект.КассаККМ] + 1;
		НапечататьЧекСерверИнкассацияЗавершение(ПараметрыОперации.ДокументНаККМ, 
												РезультатВыполнения, 
												ПараметрыОперации, 
												ОбщиеПараметры, 
												НомерЧека,
												Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("НапечататьЧекКлиентЗавершение", ЭтотОбъект, ПараметрыОперации);
		
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(Оповещение, 
										УникальныйИдентификатор, 
										ОбщиеПараметры, 
										ПараметрыОперации.ИдентификаторУстройства);
		
	Иначе
		ЭтаФорма.Доступность = Истина;
		ТекстСообщения = НСтр("ru = 'При операции внесения/выемки произошла ошибка.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
    
    // &ЗамерПроизводительности 
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(ПараметрыОперации.Замер);
	
КонецПроцедуры

&НаСервере
Процедура НапечататьЧекСерверИнкассацияЗавершение(ДокументНаККМ, РезультатВыполнения, ПараметрыОперации, ОбщиеПараметры, НомерЧека, Отказ)
	// Готовим данные
	ОбщиеПараметры  = ВходящиеДанныеДляФРСервер(ДокументНаККМ, ПараметрыОперации.РаспределениеВыручкиПоСекциям, НомерЧека);
КонецПроцедуры

&НаСервере
Функция ВходящиеДанныеДляФРСервер(ДокументНаККМ, РаспределениеВыручкиПоСекциям, НомерЧека)
	
	Возврат Документы.РасходныйКассовыйОрдер.ПодготовитьДанныеДляПробитияЧека(ДокументНаККМ, РаспределениеВыручкиПоСекциям, НомерЧека);
	
КонецФункции 

&НаКлиенте
Процедура НапечататьЧекКлиентЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		Отказ = Ложь;
		
		НапечататьЧекСерверЗавершение(РезультатВыполнения.ВыходныеПараметры[1], ПараметрыОперации, Отказ);
		
		ПараметрыДокумента = ОбщегоНазначенияРТВызовСервера.ПолучитьЗначенияРеквизитовОбъекта(ПараметрыОперации.ДокументНаККМ, Новый Структура("КассаККМ, НомерЧекаККМ"));
		
		Если ЗначениеЗаполнено(РезультатВыполнения.ВыходныеПараметры[1]) Тогда
			НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		Иначе
			НомерЧекаККМ = НомерДокументаКассыККМ[ПараметрыДокумента.КассаККМ];
		КонецЕсли; 

		НапечататьЧекСерверЗавершение(НомерЧекаККМ, ПараметрыОперации, Отказ);
		
		НомерДокументаКассыККМ[ПараметрыДокумента.КассаККМ] = НомерЧекаККМ + 1;
		ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		Элементы[ПараметрыОперации.ИмяКоманды].Доступность = Ложь;
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
									|Чек не напечатан на фискальном устройстве.
									|Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НапечататьЧекСерверЗавершение(НомерЧекаККМ, ПараметрыОперации, Отказ)
	
	ДокументНаККМОбъект = ПараметрыОперации.ДокументНаККМ.ПолучитьОбъект();
	
	// Установить полученное значение номера чека реквизиту документа.
	ДокументНаККМОбъект.НомерЧекаККМ = НомерЧекаККМ;
	ДокументНаККМОбъект.ПробитЧек    = Истина;
	
	Попытка
		ДокументНаККМОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Отказ = Истина;
		Возврат
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
