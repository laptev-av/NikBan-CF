#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем МассивСформированныхДокументов;

#Область ПрограммныйИнтерфейс

// Выводит в окне информацию об ошибке.
//
// Параметры:
//  ТекстОшибки - строка
//
Процедура ВывестиИнформациюОбОшибке(ТекстОшибки) Экспорт
	
	#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстОшибки,
		ЭтотОбъект
		);
	#КонецЕсли
	
КонецПроцедуры

// Процедура создает новый документ  ВозвратТоваровОтПокупателя.
//
Процедура СформироватьВозвратТоваровОтПокупателя() Экспорт

	ВозвратТоваровОтПокупателя = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
	
	ЗаполнитьЗначенияСвойств(ВозвратТоваровОтПокупателя, ЭтотОбъект);
	ВозвратТоваровОтПокупателя.Магазин               = Склад.Магазин;
	
	УчитыватьНДС = ОпределитьУчетНДС();
	ВозвратТоваровОтПокупателя.УчитыватьНДС    = УчитыватьНДС;
	ВозвратТоваровОтПокупателя.ЦенаВключаетНДС = ЦенаВключаетНДС;
	
	ВозвратТоваровОтПокупателя.УстановитьНовыйНомер();
	ВозвратТоваровОтПокупателя.Товары.Загрузить(Товары.Выгрузить());
	ВозвратТоваровОтПокупателя.Серии.Загрузить(Серии.Выгрузить());
	ВозвратТоваровОтПокупателя.АкцизныеМарки.Загрузить(АкцизныеМарки.Выгрузить());
	
	ПодключаемоеОборудованиеРТ.ЗаполнитьВидНалога(ВозвратТоваровОтПокупателя);
	
	ЕстьОшибки = Ложь;
	
	ПродажиСервер.ПроверитьВозможностьВозвратаОтПокупателя(ВозвратТоваровОтПокупателя, ЕстьОшибки, ЭтотОбъект);
	
	Если НЕ ЕстьОшибки Тогда
		ВозвратТоваровОтПокупателя.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		МассивСформированныхДокументов.Добавить(ВозвратТоваровОтПокупателя.Ссылка);
		ИсторияРаботыПользователя.Добавить(ВозвратТоваровОтПокупателя.Ссылка);
	Иначе
		ВозвратТоваровОтПокупателя.Удалить();
	КонецЕсли;
	
КонецПроцедуры

// Процедура создает новый документ  РасходныйКассовыйОрдер.
//
Процедура СформироватьРасходныйКассовыйОрдер() Экспорт

	РасходныйКассовыйОрдер = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();

	СуммаВозвратаНаличными = 0.00;
	Для Каждого СтрокаОплаты Из Оплата Цикл
		Если ЗначениеЗаполнено(СтрокаОплаты.ВидОплаты) И СтрокаОплаты.ВидОплаты = Справочники.ВидыОплатЧекаККМ.Наличные Тогда
			СуммаВозвратаНаличными = СуммаВозвратаНаличными + СтрокаОплаты.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаВозвратаНаличными = 0.00 Тогда
		
		Если Не РасходныйКассовыйОрдер.ЭтоНовый() Тогда // уже записали
			РасходныйКассовыйОрдер.Удалить();
			РасходныйКассовыйОрдер = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
		КонецЕсли;
		
		// Наличными ничего не возвращаем, значит РКО делать и не надо.
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ЗаполнениеВозвратТоваровОтРозничногоПокупателя");
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("Дата", Дата);
	СтруктураПараметров.Вставить("Касса", Касса);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	СтруктураПараметров.Вставить("Контрагент", Контрагент);
	СтруктураПараметров.Вставить("Выдать", ФИОФизЛица);
	СтруктураПараметров.Вставить("Основание", Основание);
	СтруктураПараметров.Вставить("ПоДокументу", ПоДокументу);
	СтруктураПараметров.Вставить("Приложение", Приложение + НСтр("ru = ', Чек №'")+ " " + ЧекНомер + " " + НСтр("ru = 'от'") + " " + Формат(ЧекДата, "ДЛФ=DD"));
	СтруктураПараметров.Вставить("СуммаДокумента", СуммаВозвратаНаличными);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("ДокументРасчетовСКонтрагентом", ВозвратТоваровОтПокупателя.Ссылка);
	СтруктураПараметров.Вставить("Ответственный", Ответственный);
	
	СтруктураПараметров.Вставить("КассаККМ", Касса.КассаККМ);
	СтруктураПараметров.Вставить("ПробиватьЧекиПоКассеККМ", Касса.ПробиватьЧекиПоКассеККМ);
	
	РасходныйКассовыйОрдер.Заполнить(СтруктураПараметров);
	
	РасходныйКассовыйОрдер.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	МассивСформированныхДокументов.Добавить(РасходныйКассовыйОрдер.Ссылка);
	ИсторияРаботыПользователя.Добавить(РасходныйКассовыйОрдер.Ссылка);
КонецПроцедуры

// Сообщение пользователю
//
Процедура СообщитьПользователюСУчетомРежима(ТекстОшибки) Экспорт
	
	#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки);
	#КонецЕсли
	

КонецПроцедуры

// Формирует документы возврата.
//
// Возвращаемое значение:
//  Булево - Результат, формирования документов.
//
Функция СформироватьДокументы() Экспорт
	
	Результат = Истина;
	МассивСформированныхДокументов = Новый Массив;
	
	ПредупредитьОБК = Ложь;
	Для Каждого СтрокаОплаты Из Оплата Цикл
		Если ЗначениеЗаполнено(СтрокаОплаты.ВидОплаты)
		 И СтрокаОплаты.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.БанковскийКредит Тогда
			ПредупредитьОБК = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПредупредитьОБК Тогда
		ТекстОшибки = НСтр("ru = 'Документы возврата денежных средств по банковскому кредиту сформированы не были.'") + Символы.ПС + 
					  НСтр("ru = 'Автоматическое оформление возврата денежных средств по кредиту не реализовано в системе.'");
		СообщитьПользователюСУчетомРежима(ТекстОшибки)
	КонецЕсли;
	
	УдалитьДокументы();
	
	Попытка
		СформироватьВозвратТоваровОтПокупателя();
	Исключение
		
		ТекстОшибки = НСтр("ru = 'ru='Документы не сформированы!'") + Символы.ПС +
					  НСтр("ru = 'Не удалось сформировать документ ""Возврат товаров от покупателя""'");
		
		СообщитьПользователюСУчетомРежима(ТекстОшибки);
		Результат = Ложь;
		
	КонецПопытки;
	
	Попытка
		
		СформироватьОплатуОтПокупателяПлатежнойКартой();
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'ru='Документы не сформированы!'") + Символы.ПС +
					  НСтр("ru = 'Не удалось сформировать документ ""Операция по платежной карте""'");
			
		СообщитьПользователюСУчетомРежима(ТекстОшибки);
		
		Результат = Ложь;
		
	КонецПопытки;
	
	Попытка
		
		СформироватьРасходныйКассовыйОрдер();
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'ru='Документы не сформированы!'") + Символы.ПС +
					  НСтр("ru = 'Не удалось сформировать документ ""Расходный кассовый ордер""'");
			
		СообщитьПользователюСУчетомРежима(ТекстОшибки);
		
		Результат = Ложь;
		
	КонецПопытки;
	
	Если Не Результат Тогда
		УдалитьДокументы();
	Иначе
		ТекстОшибки = НСтр("ru='Документы успешно созданы!'");
			
		СообщитьПользователюСУчетомРежима(ТекстОшибки);
	КонецЕсли;
	
	РезультатСтруктура = Новый Структура;
	РезультатСтруктура.Вставить("Результат", Результат);
	РезультатСтруктура.Вставить("МассивСформированныхДокументов", МассивСформированныхДокументов);
	Возврат РезультатСтруктура;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	РазрешитьОформлениеВозвратовОтПокупателяБезДокументовПродажи = УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОформлениеВозвратовОтПокупателяБезДокументовПродажи, Ложь);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если РазрешитьОформлениеВозвратовОтПокупателяБезДокументовПродажи Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ДокументПродажи");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Склад");
	
	Если ПереключательОплатаСложная Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СуммаОплаты");
		МассивНепроверяемыхРеквизитов.Добавить("ВидОплаты");
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Оплата");
		МассивНепроверяемыхРеквизитов.Добавить("Оплата.ВидОплаты");
		МассивНепроверяемыхРеквизитов.Добавить("Оплата.Сумма");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Касса) 
		ИЛИ НЕ Касса.ПробиватьЧекиПоКассеККМ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КассаККМ");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,Документы.ВозвратТоваровОтПокупателя.ПараметрыУказанияСерий(ЭтотОбъект),Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьОплатуОтПокупателяПлатежнойКартой()
	
	СуммаВозвратаПлатежнойКартой = 0.00;
	Для Каждого СтрокаОплаты Из Оплата Цикл
		Если ЗначениеЗаполнено(СтрокаОплаты.ВидОплаты)
		 И СтрокаОплаты.ВидОплаты.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
			СуммаВозвратаПлатежнойКартой = СуммаВозвратаПлатежнойКартой + СтрокаОплаты.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаВозвратаПлатежнойКартой = 0.00 Тогда
		// Платежными картами ничего не возвращаем, значит возврат покупателю платежной картой делать и не надо.
		Возврат;
	КонецЕсли;
	
	// Получим таблицу оплат, свернутую по виду оплат.
	СвернутыеОплаты = Оплата.Выгрузить();
	
	Для Каждого СтрокаОплаты Из СвернутыеОплаты Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаОплаты.ВидОплаты)
		 ИЛИ СтрокаОплаты.ВидОплаты.ТипОплаты <> Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта Тогда
			Продолжить;
		КонецЕсли;
		
		ОплатаОтПокупателяПлатежнойКартой = Документы.ОплатаОтПокупателяПлатежнойКартой.СоздатьДокумент();
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ЗаполнениеВозвратТоваровОтРозничногоПокупателя");
		СтруктураПараметров.Вставить("Организация", Организация);
		СтруктураПараметров.Вставить("Дата", Дата);
		СтруктураПараметров.Вставить("Магазин", Магазин);
		СтруктураПараметров.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
		СтруктураПараметров.Вставить("ЭквайринговыйТерминал", СтрокаОплаты.ЭквайринговыйТерминал);
		СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
		СтруктураПараметров.Вставить("ДокументРасчетовСКонтрагентом", ВозвратТоваровОтПокупателя.Ссылка);
		СтруктураПараметров.Вставить("Эквайрер", ?(ЗначениеЗаполнено(СтрокаОплаты.ЭквайринговыйТерминал), СтрокаОплаты.ЭквайринговыйТерминал.Эквайрер, Справочники.Контрагенты.ПустаяСсылка()));
		СтруктураПараметров.Вставить("ВидОплаты", СтрокаОплаты.ВидОплаты);
		СтруктураПараметров.Вставить("Контрагент", Контрагент);
		СтруктураПараметров.Вставить("СуммаДокумента", СтрокаОплаты.Сумма);
		СтруктураПараметров.Вставить("ПроцентКомиссии", СтрокаОплаты.ПроцентКомиссии);
		СтруктураПараметров.Вставить("СуммаКомиссии", СтрокаОплаты.СуммаКомиссии);
		СтруктураПараметров.Вставить("Ответственный", Ответственный);
		
		СтруктураПараметров.Вставить("КассаККМ", Касса.КассаККМ);
		СтруктураПараметров.Вставить("ПробиватьЧекиПоКассеККМ", Касса.ПробиватьЧекиПоКассеККМ);
		
		ОплатаОтПокупателяПлатежнойКартой.Заполнить(СтруктураПараметров);
		ОплатаОтПокупателяПлатежнойКартой.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		
		// Поместим ссылку на документ в список, чтобы в случае переформирования документов удалить старые.
		СписокДокументовОплатаОтПокупателяПлатежнойКартой.Добавить(ОплатаОтПокупателяПлатежнойКартой.Ссылка);
		
		МассивСформированныхДокументов.Добавить(ОплатаОтПокупателяПлатежнойКартой.Ссылка);
		ИсторияРаботыПользователя.Добавить(ОплатаОтПокупателяПлатежнойКартой.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Удаляет документы из базы
//
Процедура УдалитьДокументы()
	
	// Очищает список перед созданием.
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СсылкаНаДокумент Из СписокДокументовОплатаОтПокупателяПлатежнойКартой Цикл
		
		ДокументОбъект = СсылкаНаДокумент.Значение.ПолучитьОбъект();
		
		Если ДокументОбъект.Проведен Тогда 
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		КонецЕсли;
		
		ДокументОбъект.ПометкаУдаления = Истина;
		ДокументОбъект.Записать();
		ДокументОбъект.Удалить();
		
	КонецЦикла;
	
	СписокДокументовОплатаОтПокупателяПлатежнойКартой.Очистить();
	
	Если ЗначениеЗаполнено(ВозвратТоваровОтПокупателя.Ссылка) Тогда
		
		ДокументОбъект = ВозвратТоваровОтПокупателя.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		КонецЕсли;
		
		ДокументОбъект.ПометкаУдаления = Истина;
		ДокументОбъект.Записать();
		ДокументОбъект.Удалить();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РасходныйКассовыйОрдер.Ссылка) Тогда
		
		ДокументОбъект = РасходныйКассовыйОрдер.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		КонецЕсли;
		
		ДокументОбъект.ПометкаУдаления = Истина;
		ДокументОбъект.Записать();
		ДокументОбъект.Удалить();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьУчетНДС()
	
	Для Каждого СтрокаТоваров Из Товары Цикл
		
		Если СтрокаТоваров.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецЕсли
