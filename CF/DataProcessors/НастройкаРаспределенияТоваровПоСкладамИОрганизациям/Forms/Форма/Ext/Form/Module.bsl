
#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ПриВыбореМагазина(Ответ, Режим) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если Режим = "РаспределениеПоступления" Тогда
			
			Пояснение = НСтр("ru = 'распределения по поступлению'");
			
		ИначеЕсли Режим = "РаспределениеРеализацииУслуг" Тогда
			
			Пояснение = НСтр("ru = 'распределения услуг по организациям'");
			
		ИначеЕсли Режим = "РаспределениеРеализации" Тогда
			
			Пояснение = НСтр("ru = 'распределения по реализации'");
			
		КонецЕсли;
		
		ЗаписьВРегистр(ПредыдущийМагазин);
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Сохранение:'"),
		,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сохранены настройки %1'"),
		Пояснение),
		БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	ПредыдущийМагазин = Объект.Магазин;
	ОбновитьДанныеСписков();
	Элементы.ТоварныеГруппыСклады.ТекущийЭлемент = Элементы.ТоварнаяГруппа;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеУстановитьРежимРаспределениеРеализацииУслуг(Ответ, Режим) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если Режим = "РаспределениеПоступления" Тогда
			
			Пояснение = НСтр("ru = 'распределения по поступлению'");
			
		ИначеЕсли Режим = "РаспределениеРеализацииУслуг" Тогда
			
			Пояснение = НСтр("ru = 'распределения услуг по организациям'");
			
		ИначеЕсли Режим = "РаспределениеРеализации" Тогда
			
			Пояснение = НСтр("ru = 'распределения по реализации'");
			
		КонецЕсли;
		
		ЗаписьВРегистр();
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Сохранение:'"),
		,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сохранены настройки %1'"),
		Пояснение),
		БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Режим = "РаспределениеРеализацииУслуг";
	ИзменитьРежим(Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеУстановитьРежимРаспределениеРеализации(Ответ, Режим) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если Режим = "РаспределениеПоступления" Тогда
			
			Пояснение = НСтр("ru = 'распределения по поступлению'");
			
		ИначеЕсли Режим = "РаспределениеРеализацииУслуг" Тогда
			
			Пояснение = НСтр("ru = 'распределения услуг по организациям'");
			
		ИначеЕсли Режим = "РаспределениеРеализации" Тогда
			
			Пояснение = НСтр("ru = 'распределения по реализации'");
			
		КонецЕсли;
		
		ЗаписьВРегистр();
		
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Сохранение:'"),
		,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сохранены настройки %1'"),
		Пояснение),
		БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	Модифицированность = Ложь;
	Режим = "РаспределениеРеализации";
	ИзменитьРежим(Режим);
	Элементы.ТоварныеГруппыСклады.ТекущийЭлемент = Элементы.ТоварнаяГруппа;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеУстановитьРежимРаспределениеПоступления(Ответ, Режим) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если Режим = "РаспределениеПоступления" Тогда
			
			Пояснение = НСтр("ru = 'распределения по поступлению'");
			
		ИначеЕсли Режим = "РаспределениеРеализацииУслуг" Тогда
			
			Пояснение = НСтр("ru = 'распределения услуг по организациям'");
			
		ИначеЕсли Режим = "РаспределениеРеализации" Тогда
			
			Пояснение = НСтр("ru = 'распределения по реализации'");
			
		КонецЕсли;
		
		ЗаписьВРегистр();
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Сохранение:'"),
		,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сохранены настройки %1'"),
		Пояснение),
		БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Режим = "РаспределениеПоступления";
	ИзменитьРежим(Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСклада(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено 
		И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Склады") Тогда
		
		Элементы.УточнениеПоРабочимМестам.ТекущиеДанные.Склад = ВыбранноеЗначение;
		Элементы.УточнениеПоРабочимМестам.ЗакончитьРедактированиеСтроки(Ложь);
		
		УточнениеПоРабочимМестамПриИзменении(Неопределено)
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Магазин") Тогда
		
		Объект.Магазин = Параметры.Магазин;
		
	КонецЕсли;
	
	Если Параметры.Свойство("Режим") Тогда
		
		Режим = Параметры.Режим;
		
	Иначе
		
		Режим = "РаспределениеПоступления";
		УстановитьЗаголовокФормы();
		
	КонецЕсли;
	
	Если Параметры.Свойство("ЗапретитьИзменениеРежима") Тогда
		
		Элементы.Режим.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ЗапретитьИзменениеМагазина") Тогда
		
		Элементы.Магазин.Видимость = Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		
		ИзменитьРежим();
		
	КонецЕсли;
		
	ПредыдущийМагазин = Объект.Магазин;
	
	ОбновитьТекстОписания();
	
	Если Режим = "РаспределениеПоступления" Тогда
		
		Элементы.УточнениеПоРабочимМестам.Видимость = Ложь;
		Элементы.ЗаполнитьПоПоступлению.Видимость = Ложь;
		Элементы.ТоварныеГруппыСкладыВидНалога.Видимость = Ложь;
		
	ИначеЕсли Режим = "РаспределениеРеализацииУслуг" Тогда
		
		Элементы.УточнениеПоРабочимМестам.Видимость = Ложь;
		Элементы.ЗаполнитьПоПоступлению.Видимость = Ложь;
		Элементы.ТоварныеГруппыСкладыВидНалога.Видимость = Истина;
		
	Иначе
		
		Элементы.УточнениеПоРабочимМестам.Видимость = Истина;
		Элементы.ЗаполнитьПоПоступлению.Видимость  = Истина;
		Элементы.ТоварныеГруппыСкладыВидНалога.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для каждого СтрокаУточнения Из УточнениеПоРабочимМестам Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаУточнения.Склад) Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Склад"" в строке %1 не заполнено'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, УточнениеПоРабочимМестам.Индекс(СтрокаУточнения)+1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				,
				"УточнениеПоРабочимМестам["+УточнениеПоРабочимМестам.Индекс(СтрокаУточнения)+ "].Склад",
				,
				Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаУточнения.ТоварнаяГруппа) Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Товарная группа"" в строке %1 не заполнено'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, УточнениеПоРабочимМестам.Индекс(СтрокаУточнения)+1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				,
				"УточнениеПоРабочимМестам["+УточнениеПоРабочимМестам.Индекс(СтрокаУточнения)+ "].ТоварнаяГруппа",
				,
				Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаУточнения.ТоварнаяГруппа) Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Рабочее место"" в строке %1 не заполнено'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, УточнениеПоРабочимМестам.Индекс(СтрокаУточнения)+1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				,
				"УточнениеПоРабочимМестам["+УточнениеПоРабочимМестам.Индекс(СтрокаУточнения)+ "].РабочееМесто",
				,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
	ПроверкаДублей = УточнениеПоРабочимМестам.Выгрузить(,"ТоварнаяГруппа, РабочееМесто");
	ПроверкаДублей.Колонки.Добавить("КоличествоДублей",Новый ОписаниеТипов("Число"));
	ПроверкаДублей.ЗаполнитьЗначения(1, "КоличествоДублей");
	ПроверкаДублей.Свернуть("ТоварнаяГруппа, РабочееМесто", "КоличествоДублей");
	Для каждого СтрокаДублей Из ПроверкаДублей Цикл
		Если СтрокаДублей.КоличествоДублей > 1 Тогда 
			СтруктураОтбора = Новый Структура("ТоварнаяГруппа, РабочееМесто", СтрокаДублей.ТоварнаяГруппа, СтрокаДублей.РабочееМесто);
			МассивСтрок = УточнениеПоРабочимМестам.НайтиСтроки(СтруктураОтбора);
			ТекстСообщения = НСтр("ru = 'Строка %1 дублируется, строк с одинаковой товарной группой и рабочим местом 
			|в таблице быть не должно.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, УточнениеПоРабочимМестам.Индекс(МассивСтрок[0])+1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				,
				"УточнениеПоРабочимМестам["+УточнениеПоРабочимМестам.Индекс(МассивСтрок[0])+ "]",
				,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) 
		И ЗначениеЗаполнено(ПредыдущийМагазин) Тогда
		
		Объект.Магазин = ПредыдущийМагазин;
		Возврат;
		
	КонецЕсли;
	
	ПроверкаУспешна = НеобходимыеДанныеЗаполнены();
	
	Если ПроверкаУспешна Тогда
		
		Если Модифицированность Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Записать измененные данные по магазину %1?'"), ПредыдущийМагазин);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПриВыбореМагазина", ЭтотОбъект, Режим);
			ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ПредыдущийМагазин = Объект.Магазин;
			ОбновитьДанныеСписков();
			Элементы.ТоварныеГруппыСклады.ТекущийЭлемент = Элементы.ТоварнаяГруппа;
			
		КонецЕсли;
		
	Иначе
		
		Объект.Магазин = ПредыдущийМагазин;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварныеГруппыСклады

&НаКлиенте
Процедура ТоварныеГруппыСкладыПриИзменении(Элемент)
	
	ИмяТекущегоЭлемента = Элемент.ТекущийЭлемент.Имя;
		
	Если Найти(ИмяТекущегоЭлемента,"Добавлен") > 0 Тогда
		
		Модифицированность = Истина;
		ТекущаяСтрока = Элементы.ТоварныеГруппыСклады.ТекущиеДанные;
		
		Если ТекущаяСтрока <> Неопределено Тогда
				
			Для Инд = 0 По Склады.Количество()-1 Цикл
				
				ИмяЭлемента = "Добавлен" + Инд;
				
				Если ИмяТекущегоЭлемента <> ИмяЭлемента Тогда
					
					ТекущаяСтрока[ИмяЭлемента] = Ложь;
					
				КонецЕсли;
				
			КонецЦикла;
				
		КонецЕсли;
				
	КонецЕсли;
	
	ОбновитьТекстОписания();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУточнениеПоРабочимМестам

&НаКлиенте
Процедура УточнениеПоРабочимМестамПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ОбновитьТекстОписания();
	
КонецПроцедуры

&НаКлиенте
Процедура УточнениеПоРабочимМестамСкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Магазин", Объект.Магазин);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборСклада", ЭтотОбъект);
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		         Истина, "Справочник.Склады.Форма.ФормаВыбора.Открытие");
	
	ОткрытьФорму("Справочник.Склады.Форма.ФормаВыбора", Новый Структура("МножественныйВыбор, Отбор", Ложь, СтруктураОтбора), ЭтаФорма,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УточнениеПоРабочимМестамРабочееМестоПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ОбновитьТекстОписания();
	
КонецПроцедуры

&НаКлиенте
Процедура УточнениеПоРабочимМестамТоварнаяГруппаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ОбновитьТекстОписания();
	
КонецПроцедуры

&НаКлиенте
Процедура УточнениеПоРабочимМестамСкладПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ОбновитьТекстОписания();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьРежимНастройкиРаспределениеПоступления(Команда)
	
	ПроверкаУспешна = НеобходимыеДанныеЗаполнены();
	
	Если ПроверкаУспешна Тогда
		
		Если Модифицированность Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Записать измененные данные распределения по магазину %1?'"), Объект.Магазин);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеУстановитьРежимРаспределениеПоступления", ЭтотОбъект, Режим);
			ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			Режим = "РаспределениеПоступления";
			ИзменитьРежим();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимНастройкиРаспределениеРеализации(Команда)
	
	ПроверкаУспешна = НеобходимыеДанныеЗаполнены();
	
	Если ПроверкаУспешна Тогда
		
		Если Модифицированность Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Записать измененные данные распределения по магазину %1?'"), Объект.Магазин);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеУстановитьРежимРаспределениеРеализации", ЭтотОбъект, Режим);
			ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			Режим = "РаспределениеРеализации";
			ИзменитьРежим();
			Элементы.ТоварныеГруппыСклады.ТекущийЭлемент = Элементы.ТоварнаяГруппа;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимНастройкиРаспределениеРеализацииУслуг(Команда)
	ПроверкаУспешна = НеобходимыеДанныеЗаполнены();
	
	Если ПроверкаУспешна Тогда
		
		Если Модифицированность Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Записать измененные данные распределения по магазину %1?'"), Объект.Магазин);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеУстановитьРежимРаспределениеРеализацииУслуг", ЭтотОбъект, Режим);
			ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
			
		Иначе
		
		Режим = "РаспределениеРеализацииУслуг";
		ИзменитьРежим();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзменения(Команда)
	
	ПроверкаУспешна = НеобходимыеДанныеЗаполнены();
	
	Если ПроверкаУспешна Тогда
		
		Если Модифицированность Тогда
			
			Если Режим = "РаспределениеПоступления" Тогда
				
				Пояснение = НСтр("ru = 'распределения по поступлению'");
				
			ИначеЕсли Режим = "РаспределениеРеализацииУслуг" Тогда
				
				Пояснение = НСтр("ru = 'распределения услуг по организациям'");
				
			ИначеЕсли Режим = "РаспределениеРеализации" Тогда
				
				Пояснение = НСтр("ru = 'распределения по реализации'");
				
			КонецЕсли;
            
            // &ЗамерПроизводительности
            Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.НастройкаРаспределенияТоваровПоСкладамИОрганизациям.Форма.Форма.Команда.ПрименитьИзменения");

			ЗаписьВРегистр();
			ПоказатьОповещениеПользователя(
			НСтр("ru = 'Сохранение:'"),
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сохранены настройки %1'"),
			Пояснение),
			БиблиотекаКартинок.Информация32);
			ОбновитьДанныеСписков();
			Элементы.ТоварныеГруппыСклады.ТекущийЭлемент = Элементы.ТоварнаяГруппа;
            
            ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);

		КонецЕсли;
		
		Модифицированность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлению(Команда)
    
    // &ЗамерПроизводительности
    Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.НастройкаРаспределенияТоваровПоСкладамИОрганизациям.Форма.Форма.Команда.ЗаполнитьПоПоступлению");
	
    ОбновитьДанныеСписков(Истина);
    
    ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура изменяет режим, перезаполняет данные формы.
//
&НаСервере
Процедура ИзменитьРежим(УстановленныйРежим = "")
	
	ОбновитьДанныеСписков(,УстановленныйРежим);
	УстановитьЗаголовокФормы(УстановленныйРежим);
	
КонецПроцедуры

// Процедура записывает данные в РС 
// РаспределениеПоступлений или СкладыПродажи
// в зависимости от режима.
// Параметры:
// Магазин записи - значение магазина, которым будет заполнено 
// измерение регистра.
&НаСервере
Процедура ЗаписьВРегистр(МагазинЗаписи = Неопределено)
	
	Таблица = РеквизитФормыВЗначение("ТоварныеГруппыСклады");
	
	ТаблицаЗаписи = Новый ТаблицаЗначений;
	ТаблицаЗаписи.Колонки.Добавить("ТоварнаяГруппа", Новый ОписаниеТипов("СправочникСсылка.ТоварныеГруппы"));
	Если Режим = "РаспределениеРеализацииУслуг" Тогда
		ТаблицаЗаписи.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаЗаписи.Колонки.Добавить("ВидНалога", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНалогов"));
	Иначе
		ТаблицаЗаписи.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;
	ТаблицаЗаписи.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.Магазины"));
	ТаблицаЗаписи.Колонки.Добавить("Очистить", Новый ОписаниеТипов("Булево"));
	
	Если Режим = "РаспределениеРеализации" Тогда
		
		ТаблицаЗаписи.Колонки.Добавить("РабочееМесто", Новый ОписаниеТипов("СправочникСсылка.РабочиеМеста"));
		
	КонецЕсли;	
	
	СтруктураСкладовИКолонок = Новый Структура;
	
	Для каждого Колонка Из Таблица.Колонки Цикл
		
		ПозицияСимвола = Найти(Колонка.Имя,"Добавлен");
		
		Если  ПозицияСимвола > 0 Тогда
			
			ИндексСклада = Число(Прав(Колонка.Имя,СтрДлина(Колонка.Имя) - ПозицияСимвола - 7));
			СтруктураСкладовИКолонок.Вставить(Колонка.Имя,Склады[ИндексСклада].Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ТоварныеГруппыСклады Цикл
		
		ЕстьПометка = Ложь;
		
		Для каждого Колонка Из Таблица.Колонки Цикл
			
			Если СтруктураСкладовИКолонок.Свойство(Колонка.Имя) Тогда
				
				ЕстьПометка = СтрокаТаблицы[Колонка.Имя];
				
				Если ЕстьПометка Тогда
					
					СтрокаЗаписи = ТаблицаЗаписи.Добавить();
					СтрокаЗаписи.ТоварнаяГруппа = СтрокаТаблицы.ТоварнаяГруппа;
					
					Если Режим = "РаспределениеРеализацииУслуг" Тогда
						СтрокаЗаписи.Организация = СтруктураСкладовИКолонок[Колонка.Имя];
						СтрокаЗаписи.ВидНалога = СтрокаТаблицы.ВидНалога;
					Иначе
						СтрокаЗаписи.Склад = СтруктураСкладовИКолонок[Колонка.Имя];
					КонецЕсли;
					
					СтрокаЗаписи.Очистить = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЕстьПометка Тогда
			
			СтрокаЗаписи = ТаблицаЗаписи.Добавить();
			СтрокаЗаписи.ТоварнаяГруппа = СтрокаТаблицы.ТоварнаяГруппа;
			СтрокаЗаписи.Очистить = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если Режим = "РаспределениеПоступления" Тогда
		
		ТаблицаЗаписи.ЗаполнитьЗначения(?(МагазинЗаписи = Неопределено, Объект.Магазин, МагазинЗаписи) ,"Магазин");
		РегистрыСведений.РаспределениеПоступлений.ЗаписатьДанныеВРегистр(ТаблицаЗаписи);
		
	ИначеЕсли Режим = "РаспределениеРеализацииУслуг" Тогда
		
		ТаблицаЗаписи.ЗаполнитьЗначения(?(МагазинЗаписи = Неопределено, Объект.Магазин, МагазинЗаписи) ,"Магазин");
		РегистрыСведений.РаспределениеПродажУслугПоОрганизациям.ЗаписатьДанныеВРегистр(ТаблицаЗаписи);
	Иначе
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	РаспределениеПродаж.ТоварнаяГруппа,
		|	РаспределениеПродаж.РабочееМесто,
		|	РаспределениеПродаж.Склад
		|ПОМЕСТИТЬ УточнениеПоРабочимМестам
		|ИЗ
		|	&УточнениеПоРабочимМестам КАК РаспределениеПродаж
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаспределениеПродаж.ТоварнаяГруппа,
		|	РаспределениеПродаж.РабочееМесто,
		|	РаспределениеПродаж.Склад,
		|	ИСТИНА КАК Очистить
		|ИЗ
		|	РегистрСведений.РаспределениеПродаж КАК РаспределениеПродаж
		|		ЛЕВОЕ СОЕДИНЕНИЕ УточнениеПоРабочимМестам КАК УточнениеПоРабочимМестам
		|		ПО РаспределениеПродаж.ТоварнаяГруппа = УточнениеПоРабочимМестам.ТоварнаяГруппа
		|			И РаспределениеПродаж.РабочееМесто = УточнениеПоРабочимМестам.РабочееМесто
		|			И РаспределениеПродаж.Склад = УточнениеПоРабочимМестам.Склад
		|ГДЕ
		|	УточнениеПоРабочимМестам.ТоварнаяГруппа ЕСТЬ NULL 
		|	И РаспределениеПродаж.Магазин = &Магазин
		|	И (НЕ РаспределениеПродаж.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))");
		Запрос.УстановитьПараметр("Магазин",(?(МагазинЗаписи = Неопределено, Объект.Магазин, МагазинЗаписи)));
		Запрос.УстановитьПараметр("УточнениеПоРабочимМестам", УточнениеПоРабочимМестам.Выгрузить());
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаЗаписи = ТаблицаЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗаписи, Выборка);
			
		КонецЦикла;
		
		Для каждого СтрокаУточнения Из УточнениеПоРабочимМестам Цикл
			СтрокаЗаписи = ТаблицаЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗаписи, СтрокаУточнения);
		КонецЦикла;
		
		ТаблицаЗаписи.ЗаполнитьЗначения(?(МагазинЗаписи = Неопределено, Объект.Магазин, МагазинЗаписи) ,"Магазин");
		РегистрыСведений.РаспределениеПродаж.ЗаписатьДанныеВРегистр(ТаблицаЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура перезаполняет данные из РС в зависимости от выбранного режима.
//
&НаСервере
Процедура ОбновитьДанныеСписков(ЗаполнитьПоПоступлению = Ложь, УстановленныйРежим = "")
	
	Режим = ?(ЗначениеЗаполнено(УстановленныйРежим), УстановленныйРежим, Режим);
	
	Если Режим = "РаспределениеПоступления" Тогда

		Элементы.УточнениеПоРабочимМестам.Видимость = Ложь;
		Элементы.ЗаполнитьПоПоступлению.Видимость = Ложь;
		Элементы.ТоварныеГруппыСкладыВидНалога.Видимость = Ложь;
		
	ИначеЕсли Режим = "РаспределениеРеализацииУслуг" Тогда
		
		Элементы.УточнениеПоРабочимМестам.Видимость = Ложь;
		Элементы.ЗаполнитьПоПоступлению.Видимость = Ложь;
		Элементы.ТоварныеГруппыСкладыВидНалога.Видимость = Истина;
		
	Иначе
		
		Элементы.УточнениеПоРабочимМестам.Видимость = Истина;
		Элементы.ЗаполнитьПоПоступлению.Видимость  = Истина;
		Элементы.ТоварныеГруппыСкладыВидНалога.Видимость = Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
		
	Если Режим = "РаспределениеПоступления" Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Ссылка КАК Склад,
		|	Склады.ТипСклада КАК ТипСклада
		|ПОМЕСТИТЬ ТаблицаСкладов
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	(НЕ Склады.ЭтоГруппа)
		|	И Склады.Магазин = &Магазин
		|	И НЕ Склады.Ссылка = &СкладРаспределения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Склады.Склад КАК ОбъектРаспределения,
		|	Склады.ТипСклада КАК ТипСклада
		|ИЗ
		|	ТаблицаСкладов КАК Склады
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МатрицаГрупп.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|	МатрицаГрупп.ТоварныеГруппыНаименование КАК ТоварныеГруппыНаименование,
		|	МатрицаГрупп.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА НастройкиРаспределения.ТоварнаяГруппа ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Использовать
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварныеГруппы.Ссылка КАК ТоварнаяГруппа,
		|		ТоварныеГруппы.Наименование КАК ТоварныеГруппыНаименование,
		|		Склады.Склад КАК Склад
		|	ИЗ
		|		Справочник.ТоварныеГруппы КАК ТоварныеГруппы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК Склады
		|			ПО (ИСТИНА)
		|	ГДЕ
		|		(НЕ ТоварныеГруппы.ЭтоГруппа)) КАК МатрицаГрупп
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РаспределениеПоступлений.Склад КАК Склад,
		|			РаспределениеПоступлений.ТоварнаяГруппа КАК ТоварнаяГруппа
		|		ИЗ
		|			РегистрСведений.РаспределениеПоступлений КАК РаспределениеПоступлений
		|		ГДЕ
		|			РаспределениеПоступлений.Магазин = &Магазин) КАК НастройкиРаспределения
		|		ПО МатрицаГрупп.ТоварнаяГруппа = НастройкиРаспределения.ТоварнаяГруппа
		|			И МатрицаГрупп.Склад = НастройкиРаспределения.Склад
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварныеГруппыНаименование,
		|	МатрицаГрупп.Склад
		|ИТОГИ ПО
		|	ТоварнаяГруппа";
		
		Запрос.УстановитьПараметр("СкладРаспределения", Объект.Магазин.СкладПоступления);
		
	ИначеЕсли Режим = "РаспределениеРеализацииУслуг" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация
		|ПОМЕСТИТЬ ТаблицаОбъектовРаспределения
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	(Организации.Ссылка <> &ОрганизацияРаспределения
		|				И &КоличествоОрганизаций > 1
		|			ИЛИ &КоличествоОрганизаций = 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыРаспределения.Организация КАК ОбъектРаспределения
		|ИЗ
		|	ТаблицаОбъектовРаспределения КАК ОбъектыРаспределения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МатрицаГрупп.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|	НастройкиРаспределения.ВидНалога КАК ВидНалога,
		|	МатрицаГрупп.ТоварныеГруппыНаименование КАК ТоварныеГруппыНаименование,
		|	МатрицаГрупп.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА НастройкиРаспределения.ТоварнаяГруппа ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Использовать
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварныеГруппы.Ссылка КАК ТоварнаяГруппа,
		|		ТоварныеГруппы.Наименование КАК ТоварныеГруппыНаименование,
		|		ОбъектыРаспределения.Организация КАК Организация
		|	ИЗ
		|		Справочник.ТоварныеГруппы КАК ТоварныеГруппы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОбъектовРаспределения КАК ОбъектыРаспределения
		|			ПО (ИСТИНА)
		|	ГДЕ
		|		НЕ ТоварныеГруппы.ЭтоГруппа) КАК МатрицаГрупп
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РаспределениеПродажУслугПоОрганизациям.Организация КАК Организация,
		|			РаспределениеПродажУслугПоОрганизациям.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|			РаспределениеПродажУслугПоОрганизациям.ВидНалога КАК ВидНалога
		|		ИЗ
		|			РегистрСведений.РаспределениеПродажУслугПоОрганизациям КАК РаспределениеПродажУслугПоОрганизациям
		|		ГДЕ
		|			РаспределениеПродажУслугПоОрганизациям.Магазин = &Магазин) КАК НастройкиРаспределения
		|		ПО МатрицаГрупп.ТоварнаяГруппа = НастройкиРаспределения.ТоварнаяГруппа
		|			И МатрицаГрупп.Организация = НастройкиРаспределения.Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварныеГруппыНаименование,
		|	МатрицаГрупп.Организация
		|ИТОГИ ПО
		|	ТоварнаяГруппа";
		
		Запрос.УстановитьПараметр("КоличествоОрганизаций", Справочники.Организации.КоличествоОрганизаций());
		Запрос.УстановитьПараметр("ОрганизацияРаспределения", Объект.Магазин.СкладПродажи.Организация);
		
	ИначеЕсли Режим = "РаспределениеРеализации"
		И НЕ ЗаполнитьПоПоступлению Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Ссылка КАК Склад,
		|	Склады.ТипСклада КАК ТипСклада
		|ПОМЕСТИТЬ ТаблицаСкладов
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	(НЕ Склады.ЭтоГруппа)
		|	И Склады.Магазин = &Магазин
		|	И (НЕ Склады.Ссылка = &СкладРаспределения)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Склады.Склад КАК ОбъектРаспределения,
		|	Склады.ТипСклада КАК ТипСклада
		|ИЗ
		|	ТаблицаСкладов КАК Склады
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МатрицаГрупп.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|	МатрицаГрупп.ТоварныеГруппыНаименование КАК ТоварныеГруппыНаименование,
		|	МатрицаГрупп.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА НастройкиРаспределения.ТоварнаяГруппа ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Использовать
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварныеГруппы.Ссылка КАК ТоварнаяГруппа,
		|		ТоварныеГруппы.Наименование КАК ТоварныеГруппыНаименование,
		|		Склады.Склад КАК Склад
		|	ИЗ
		|		Справочник.ТоварныеГруппы КАК ТоварныеГруппы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК Склады
		|			ПО (ИСТИНА)
		|	ГДЕ
		|		(НЕ ТоварныеГруппы.ЭтоГруппа)) КАК МатрицаГрупп
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РаспределениеПродаж.Склад КАК Склад,
		|			РаспределениеПродаж.ТоварнаяГруппа КАК ТоварнаяГруппа
		|		ИЗ
		|			РегистрСведений.РаспределениеПродаж КАК РаспределениеПродаж
		|		ГДЕ
		|			РаспределениеПродаж.Магазин = &Магазин
		|			И РаспределениеПродаж.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка)) КАК НастройкиРаспределения
		|		ПО МатрицаГрупп.ТоварнаяГруппа = НастройкиРаспределения.ТоварнаяГруппа
		|			И МатрицаГрупп.Склад = НастройкиРаспределения.Склад
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварныеГруппыНаименование,
		|	МатрицаГрупп.Склад
		|ИТОГИ ПО
		|	ТоварнаяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаспределениеПродаж.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|	РаспределениеПродаж.РабочееМесто КАК РабочееМесто,
		|	РаспределениеПродаж.Склад КАК Склад
		|ИЗ
		|	РегистрСведений.РаспределениеПродаж КАК РаспределениеПродаж
		|ГДЕ
		|	РаспределениеПродаж.Магазин = &Магазин
		|	И (НЕ РаспределениеПродаж.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))";
		Запрос.УстановитьПараметр("СкладРаспределения", Объект.Магазин.СкладПродажи);
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Ссылка КАК Склад,
		|	Склады.ТипСклада КАК ТипСклада
		|ПОМЕСТИТЬ ТаблицаСкладов
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	(НЕ Склады.ЭтоГруппа)
		|	И Склады.Магазин = &Магазин
		|	И (НЕ Склады.Ссылка = &СкладРаспределения)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Склады.Склад КАК ОбъектРаспределения,
		|	Склады.ТипСклада КАК ТипСклада
		|ИЗ
		|	ТаблицаСкладов КАК Склады
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МатрицаГрупп.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|	МатрицаГрупп.ТоварныеГруппыНаименование КАК ТоварныеГруппыНаименование,
		|	МатрицаГрупп.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА НастройкиРаспределения.ТоварнаяГруппа ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Использовать
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТоварныеГруппы.Ссылка КАК ТоварнаяГруппа,
		|		ТоварныеГруппы.Наименование КАК ТоварныеГруппыНаименование,
		|		Склады.Склад КАК Склад
		|	ИЗ
		|		Справочник.ТоварныеГруппы КАК ТоварныеГруппы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК Склады
		|			ПО (ИСТИНА)
		|	ГДЕ
		|		(НЕ ТоварныеГруппы.ЭтоГруппа)) КАК МатрицаГрупп
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РаспределениеПоступлений.Склад КАК Склад,
		|			РаспределениеПоступлений.ТоварнаяГруппа КАК ТоварнаяГруппа
		|		ИЗ
		|			РегистрСведений.РаспределениеПоступлений КАК РаспределениеПоступлений
		|		ГДЕ
		|			РаспределениеПоступлений.Магазин = &Магазин) КАК НастройкиРаспределения
		|		ПО МатрицаГрупп.ТоварнаяГруппа = НастройкиРаспределения.ТоварнаяГруппа
		|			И МатрицаГрупп.Склад = НастройкиРаспределения.Склад
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварныеГруппыНаименование,
		|	МатрицаГрупп.Склад
		|ИТОГИ ПО
		|	ТоварнаяГруппа";
		Запрос.УстановитьПараметр("СкладРаспределения", Объект.Магазин.СкладПродажи);
		
	КонецЕсли;
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ДобавляемыеРеквизиты = Новый Массив();
	УдаляемыеРеквизиты   = Новый Массив();
	Склады.Очистить();
	СуществующиеРеквизиты = Новый Массив;
	РеквизитыФормы = ПолучитьРеквизиты("ТоварныеГруппыСклады");
	
	Для каждого РеквизитФормы Из РеквизитыФормы Цикл
		
		Если Найти(РеквизитФормы.Имя,"Добавлен") Тогда
			
			СуществующиеРеквизиты.Добавить(РеквизитФормы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СуществующийРеквизит Из СуществующиеРеквизиты Цикл
		
		УдаляемыеРеквизиты.Добавить(СуществующийРеквизит);
		
	КонецЦикла;
	
	ОписаниеТипов = Новый ОписаниеТипов("Булево");
	// 1 - Заполнение списка складов.
	ВыборкаПоСкладам = РезультатыЗапроса[1].Выбрать();
		
	Пока ВыборкаПоСкладам.Следующий() Цикл
		
		Склады.Добавить(ВыборкаПоСкладам.ОбъектРаспределения);
		ИндексЭлемента = Склады.Количество() -1;
		ИмяЭлемента = "Добавлен" + ИндексЭлемента;
		Реквизит = Новый РеквизитФормы(ИмяЭлемента, ОписаниеТипов,"ТоварныеГруппыСклады", Строка(ВыборкаПоСкладам.ОбъектРаспределения),Истина);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
	КонецЦикла;
	// Очищаем массив существующих реквизитов.
	СуществующиеРеквизиты.Очистить();
	КоличествоРеквизитов = УдаляемыеРеквизиты.Количество()-1;
	
	Для Инд = 0 По КоличествоРеквизитов Цикл
		
		ИмяРеквизита            = УдаляемыеРеквизиты[Инд].Путь + "." + УдаляемыеРеквизиты[Инд].Имя;
		УдаляемыеРеквизиты[Инд] = ИмяРеквизита;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	// Удаление элементов
	УдаляемыеЭлементы = Новый Массив;
	
	Для каждого ПодчиненныйЭлемент Из Элементы Цикл
		
		Если Найти(ПодчиненныйЭлемент.Имя,"Добавлен") > 0 
			И ТипЗнч(ПодчиненныйЭлемент) = Тип("ПолеФормы") Тогда
			
			УдаляемыеЭлементы.Добавить(ПодчиненныйЭлемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		
		Элементы.Удалить(УдаляемыйЭлемент);
		
	КонецЦикла;
	// Добавление элементов
	ВыборкаПоСкладам.Сбросить();
	
	Пока ВыборкаПоСкладам.Следующий() Цикл
		
		ИндексЭлемента               = Склады.Индекс(Склады.НайтиПоЗначению(ВыборкаПоСкладам.ОбъектРаспределения));	
		Родитель                     = Элементы.ТоварныеГруппыСклады;
		Элемент                      = Элементы.Добавить("Добавлен"+  ИндексЭлемента, Тип("ПолеФормы"), Родитель);
		Элемент.Вид                  = ВидПоляФормы.ПолеФлажка;
		Элемент.ПутьКДанным          = "ТоварныеГруппыСклады.Добавлен" + ИндексЭлемента;
		
	КонецЦикла;
	
	// 2 - Таблица товарных групп.
	Таблица = РеквизитФормыВЗначение("ТоварныеГруппыСклады");
	Таблица.Очистить();
	ВыборкаПоГруппам = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Режим = "РаспределениеПоступления" Тогда
		
		Пока ВыборкаПоГруппам.Следующий() Цикл
			
			СтрокаГруппы = Таблица.Добавить();
			СтрокаГруппы.ТоварнаяГруппа = ВыборкаПоГруппам.ТоварнаяГруппа;
			ВыборкаПоСкладам = ВыборкаПоГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоСкладам.Следующий() Цикл
				
				ИндексСклада = Склады.Индекс(Склады.НайтиПоЗначению(ВыборкаПоСкладам.Склад));
				ИмяКолонки   = "Добавлен" + ИндексСклада;
				СтрокаГруппы[ИмяКолонки] = ВыборкаПоСкладам.Использовать;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли Режим = "РаспределениеРеализацииУслуг" Тогда
		
		Пока ВыборкаПоГруппам.Следующий() Цикл
			
			СтрокаГруппы = Таблица.Добавить();
			СтрокаГруппы.ТоварнаяГруппа = ВыборкаПоГруппам.ТоварнаяГруппа;
			ВыборкаПоОрганизациям = ВыборкаПоГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоОрганизациям.Следующий() Цикл
				
				ИндексСклада = Склады.Индекс(Склады.НайтиПоЗначению(ВыборкаПоОрганизациям.Организация));
				ИмяКолонки   = "Добавлен" + ИндексСклада;
				СтрокаГруппы[ИмяКолонки] = ВыборкаПоОрганизациям.Использовать;
				СтрокаГруппы.ВидНалога = ВыборкаПоОрганизациям.ВидНалога;
				
			КонецЦикла;
			
		КонецЦикла;
	Иначе
		
		Пока ВыборкаПоГруппам.Следующий() Цикл
			
			СтрокаГруппы = Таблица.Добавить();
			СтрокаГруппы.ТоварнаяГруппа = ВыборкаПоГруппам.ТоварнаяГруппа;
			ВыборкаПоСкладам = ВыборкаПоГруппам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоСкладам.Следующий() Цикл
				
				ИндексСклада = Склады.Индекс(Склады.НайтиПоЗначению(ВыборкаПоСкладам.Склад));
				ИмяКолонки   = "Добавлен" + ИндексСклада;
				СтрокаГруппы[ИмяКолонки] = ВыборкаПоСкладам.Использовать;
				
			КонецЦикла;
			
		КонецЦикла;

		Если НЕ ЗаполнитьПоПоступлению Тогда
			УточнениеПоРабочимМестам.Загрузить(РезультатыЗапроса[3].Выгрузить());
		Иначе
			УточнениеПоРабочимМестам.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Таблица,"ТоварныеГруппыСклады");
	
	ОбновитьТекстОписания();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы(УстановленныйРежим = "")
	
	Режим = ?(ЗначениеЗаполнено(УстановленныйРежим), УстановленныйРежим, Режим);
	
	Если Режим = "РаспределениеПоступления" Тогда
		
		Заголовок = НСтр("ru = 'Распределение приемки товаров по складам'");
		
		Элементы.ФормаУстановитьРежимНастройкиРаспределениеПоступления.Пометка = Истина;
		Элементы.ФормаУстановитьРежимНастройкиРаспределениеРеализации.Пометка = Ложь;
		Элементы.ФормаУстановитьРежимНастройкиРаспределениеРеализацииУслуг.Пометка = Ложь;
		
	ИначеЕсли Режим = "РаспределениеРеализацииУслуг" Тогда
		
		Заголовок = НСтр("ru = 'Распределение продаж услуг по организациям'");
		
		Элементы.ФормаУстановитьРежимНастройкиРаспределениеПоступления.Пометка = Ложь;
		Элементы.ФормаУстановитьРежимНастройкиРаспределениеРеализации.Пометка = Ложь;
		Элементы.ФормаУстановитьРежимНастройкиРаспределениеРеализацииУслуг.Пометка = Истина;
		
	ИначеЕсли Режим = "РаспределениеРеализации" Тогда
		
		Заголовок = НСтр("ru = 'Распределение продаж по складам'");
		
		Элементы.ФормаУстановитьРежимНастройкиРаспределениеПоступления.Пометка = Ложь;
		Элементы.ФормаУстановитьРежимНастройкиРаспределениеРеализации.Пометка = Истина;
		Элементы.ФормаУстановитьРежимНастройкиРаспределениеРеализацииУслуг.Пометка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет заполнение необходимых реквизитов
// без использования стандартной обработки проверки заполнения.
// Возвращаемое значение: Булево - проверка успешна.
&НаКлиенте
Функция НеобходимыеДанныеЗаполнены()
	
	ЕстьОшибки = Ложь;
		
	Если Режим = "РаспределениеРеализации" Тогда
			
		ЕстьОшибки = НЕ ПроверитьЗаполнение();
			
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
			
			ТекстСообщения = НСтр("ru = 'Поле ""Магазин"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.Магазин",,ЕстьОшибки);
			
		КонецЕсли;

	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

// Обновляет текст описания задаваемых настроек распределения.
&НаСервере
Процедура ОбновитьТекстОписания()
	
	Описание = "";
	ОписаниеРаспределенияПоСкладу = "";
	ОписаниеРаспределенияПоТоварнымГруппам = "";
	ОписаниеРаспределенияПоРабочимМестам = "";
	
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		
		Если Режим = "РаспределениеПоступления" Тогда
			
			Если ЗначениеЗаполнено(Объект.Магазин.СкладПоступления) Тогда
				
				ОписаниеРаспределенияПоСкладу = НСтр("ru = 'Распределять поступления по умолчанию на склад ""%1"" магазина ""%2"".
				|'");
				ОписаниеРаспределенияПоСкладу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеРаспределенияПоСкладу, Объект.Магазин.СкладПоступления, Объект.Магазин);
				
			Иначе
				
				ОписаниеРаспределенияПоСкладу = НСтр("ru = 'Не задан склад приемки для магазина ""%1"". 
				|Заполните склад поступления.
				|'");
				ОписаниеРаспределенияПоСкладу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеРаспределенияПоСкладу, Объект.Магазин);
				
			КонецЕсли;
			
			ОписаниеРаспределенияПоТоварнымГруппам = НСтр("ru = 'Уточнение по товарным группам:
			|'");
			
			ТекстУточненияПоСкладам = "";
			Для каждого ТекущаяСтрока Из ТоварныеГруппыСклады Цикл
				
				Для Инд = 0 По Склады.Количество()-1 Цикл
					
					ИмяЭлемента = "Добавлен" + Инд;
					Если ТекущаяСтрока[ИмяЭлемента] = Истина Тогда
						
						ТекстУточненияПоСкладамПодстрока = НСтр("ru = 'Для товаров с группой ""%1"" приходовать товар на склад ""%2"".
						|'");
						ТекстУточненияПоСкладамПодстрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстУточненияПоСкладамПодстрока, ТекущаяСтрока.ТоварнаяГруппа, Склады[Инд].Значение); 
						
						ТекстУточненияПоСкладам = ТекстУточненияПоСкладам + ТекстУточненияПоСкладамПодстрока;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если ТекстУточненияПоСкладам = "" Тогда
				ОписаниеРаспределенияПоТоварнымГруппам = ОписаниеРаспределенияПоТоварнымГруппам + НСтр("ru = 'Не задано.'");
			Иначе
				ОписаниеРаспределенияПоТоварнымГруппам = ОписаниеРаспределенияПоТоварнымГруппам + ТекстУточненияПоСкладам;
			КонецЕсли;
			
		ИначеЕсли Режим = "РаспределениеРеализацииУслуг" Тогда
			
			Если ЗначениеЗаполнено(Объект.Магазин.СкладПродажи) Тогда
				
				ОписаниеРаспределенияПоСкладу = НСтр("ru = 'Распределять продажи услуг по умолчанию на организацию ""%1"".
				|'");
				ОписаниеРаспределенияПоСкладу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеРаспределенияПоСкладу, Объект.Магазин.СкладПродажи.Организация);
				
			Иначе
				
				ОписаниеРаспределенияПоСкладу = НСтр("ru = 'Не задан склад продажи для магазина ""%1"". 
				|Заполните склад продажи.
				|'");
				ОписаниеРаспределенияПоСкладу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеРаспределенияПоСкладу, Объект.Магазин);
				
			КонецЕсли;
			
			ОписаниеРаспределенияПоТоварнымГруппам = НСтр("ru = 'Уточнение по товарным группам:
			|'");
			
			ТекстУточненияПоСкладам = "";
			Для каждого ТекущаяСтрока Из ТоварныеГруппыСклады Цикл
				
				Для Инд = 0 По Склады.Количество()-1 Цикл
					
					ИмяЭлемента = "Добавлен" + Инд;
					Если ТекущаяСтрока[ИмяЭлемента] = Истина Тогда
						
						ТекстУточненияПоСкладам = ТекстУточненияПоСкладам + НСтр("ru = 'Для товаров с группой ""%1"" оформлять продажу услуги по организации ""%2"".
						|'");
						ТекстУточненияПоСкладам = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстУточненияПоСкладам, ТекущаяСтрока.ТоварнаяГруппа, Склады[Инд].Значение); 
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если ТекстУточненияПоСкладам = "" Тогда
				ОписаниеРаспределенияПоТоварнымГруппам = ОписаниеРаспределенияПоТоварнымГруппам + НСтр("ru = 'Не задано.'");
			Иначе
				ОписаниеРаспределенияПоТоварнымГруппам = ОписаниеРаспределенияПоТоварнымГруппам + ТекстУточненияПоСкладам;
			КонецЕсли;
			
		ИначеЕсли Режим = "РаспределениеРеализации" Тогда
			
			Если ЗначениеЗаполнено(Объект.Магазин.СкладПродажи) Тогда
				
				ОписаниеРаспределенияПоСкладу = НСтр("ru = 'Распределять продажи по умолчанию на склад ""%1"" магазина ""%2"" (""%3"").
				|'");
				ОписаниеРаспределенияПоСкладу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеРаспределенияПоСкладу, 
																										Объект.Магазин.СкладПродажи, 
																										Объект.Магазин, 
																										Объект.Магазин.СкладПродажи.Организация);
				
			Иначе
				
				ОписаниеРаспределенияПоСкладу = НСтр("ru = 'Не задан склад продажи для магазина ""%1"". 
				|Заполните склад продажи.
				|'");
				ОписаниеРаспределенияПоСкладу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеРаспределенияПоСкладу, 
																										Объект.Магазин);
				
			КонецЕсли;
			
			ОписаниеРаспределенияПоТоварнымГруппам = НСтр("ru = 'Уточнение по товарным группам:
			|'");
			
			ТекстУточненияПоСкладам = "";
			Для каждого ТекущаяСтрока Из ТоварныеГруппыСклады Цикл
				
				Для Инд = 0 По Склады.Количество()-1 Цикл
					
					ИмяЭлемента = "Добавлен" + Инд;
					Если ТекущаяСтрока[ИмяЭлемента] = Истина Тогда
						
						ТекстУточненияПоСкладам = ТекстУточненияПоСкладам + НСтр("ru = 'Для товаров с группой ""%1"" продавать товар со склада ""%2"" (""%3"").
						|'");
						ТекстУточненияПоСкладам = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстУточненияПоСкладам, 
																										  ТекущаяСтрока.ТоварнаяГруппа, 
																										  Склады[Инд].Значение,
																										  Склады[Инд].Значение.Организация); 
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если ТекстУточненияПоСкладам = "" Тогда
				ОписаниеРаспределенияПоТоварнымГруппам = ОписаниеРаспределенияПоТоварнымГруппам + НСтр("ru = 'Не задано.'");
			Иначе
				ОписаниеРаспределенияПоТоварнымГруппам = ОписаниеРаспределенияПоТоварнымГруппам + ТекстУточненияПоСкладам;
			КонецЕсли;
			
			ОписаниеРаспределенияПоРабочимМестам = НСтр("ru = 'Уточнение по рабочим местам:
			|'");
			Если УточнениеПоРабочимМестам.Количество() > 0 Тогда
				ТекстУточненияПоРабочимМестам  = "";
				Для каждого ТекущаяСтрока Из УточнениеПоРабочимМестам Цикл
					Если ЗначениеЗаполнено(ТекущаяСтрока.Склад)
						И ЗначениеЗаполнено(ТекущаяСтрока.РабочееМесто)
						И ЗначениеЗаполнено(ТекущаяСтрока.ТоварнаяГруппа) Тогда
						
						ТекстУточненияПоРабочимМестам = ТекстУточненияПоРабочимМестам + НСтр("ru = 'Для товаров с группой ""%1"" продавать товар со склада ""%2"" (""%3"") с рабочего места ""%4"".
						|'");
						ТекстУточненияПоРабочимМестам = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстУточненияПоРабочимМестам, 
																												ТекущаяСтрока.ТоварнаяГруппа, 
																												ТекущаяСтрока.Склад, 
																												ТекущаяСтрока.Склад.Организация, 
																												ТекущаяСтрока.РабочееМесто); 
						
					КонецЕсли;
				КонецЦикла;
				
				Если ТекстУточненияПоРабочимМестам = "" Тогда
					ОписаниеРаспределенияПоРабочимМестам = ОписаниеРаспределенияПоРабочимМестам + НСтр("ru = 'Не задано.'");
				Иначе
					ОписаниеРаспределенияПоРабочимМестам = ОписаниеРаспределенияПоРабочимМестам + ТекстУточненияПоРабочимМестам;
				КонецЕсли;
				
			Иначе
				ОписаниеРаспределенияПоРабочимМестам = ОписаниеРаспределенияПоРабочимМестам + НСтр("ru = 'Не задано.'");
			КонецЕсли;
			
			
		КонецЕсли;
		Описание = ОписаниеРаспределенияПоСкладу + ОписаниеРаспределенияПоТоварнымГруппам + ОписаниеРаспределенияПоРабочимМестам;
	Иначе
		Описание = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти