
&НаКлиенте
Перем КэшированныеЗначения;

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	ИдентификаторСтроки = Неопределено;
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		
	Иначе // Номенклатура.
		
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		
	КонецЕсли;
	
	Если не ИдентификаторСтроки = Неопределено Тогда
		СтрокаФакт = Объект.ТоварыФакт.НайтиПоИдентификатору(ИдентификаторСтроки);
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаФакт);
		ИдентификаторыСтрокДерева = ПолучитьМассивИдентификаторовКонечныхСтрок(ТоварыДерево, СтруктураПоиска);
		Если не ИдентификаторыСтрокДерева.Количество() = 0 Тогда
			Элементы.ТоварыДерево.ТекущаяСтрока = ИдентификаторыСтрокДерева[0];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	ПриИзмененииТоварыКоличестваУпаковок("ТоварыДеревоКоличествоУпаковокФакт");
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТВызовСервера.ОбработатьДанныеПоНоменклатуреИзТСДСервер(ЭтотОбъект, СтруктураПараметров);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	
	ДобавленаСтрока = Ложь;
	ТекущаяСтрока = ПодключаемоеОборудованиеРТВызовСервера.ИнициализацияСтрокиТоваров(ЭтотОбъект, СтруктураПараметров, ДобавленаСтрока, "ТоварыФакт");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ЗавершениеОбработкиСтрокиТоваров(ЭтотОбъект, ТекущаяСтрока, СтруктураДействий, "ТоварыФакт");
	
	ДеревоЗначений = РеквизитФормыВЗначение("ТоварыДерево");
	
	СтруктураПоискаПоНоменклатуре = Новый Структура("Номенклатура, Упаковка");
	ЗаполнитьЗначенияСвойств(СтруктураПоискаПоНоменклатуре, СтруктураПараметров);
	МассивСтрок = ДеревоЗначений.Строки.НайтиСтроки(СтруктураПоискаПоНоменклатуре, Истина);
	
	Если МассивСтрок.Количество() = 0 Тогда 
		
		Если ЗначениеЗаполнено(СтруктураПараметров.Характеристика) Тогда 
			
			НоваяСтрокаРодитель = ДеревоЗначений.Строки.Добавить();
			НоваяСтрокаРодитель.Номенклатура = СтруктураПараметров.Номенклатура;
			НоваяСтрокаРодитель.ПрямоеРедактированиеКоличестваФакт = Ложь;
			НоваяСтрокаРодитель.ПрямоеРедактированиеКоличестваПеремещения = Ложь;
			НоваяСтрокаРодитель.ЭтоГруппа = Истина;
			
			НоваяСтрока = НоваяСтрокаРодитель.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПараметров);
			ЗаполнитьКоличествоФакт(НоваяСтрока, СтруктураПараметров.Количество);
			
		Иначе 
			
			НоваяСтрока = ДеревоЗначений.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПараметров);
			ЗаполнитьКоличествоФакт(НоваяСтрока, СтруктураПараметров.Количество);
			
		КонецЕсли;
		
	Иначе 
		
		ХарактеристикаНайдена = Ложь;
		Для каждого СтрокаМассива Из МассивСтрок Цикл
		
			Если СтрокаМассива.Характеристика = СтруктураПараметров.Характеристика Тогда 
				
				ЗаполнитьКоличествоФакт(СтрокаМассива, СтруктураПараметров.Количество);
				
				ХарактеристикаНайдена = Истина;
				
			КонецЕсли;
		
		КонецЦикла;
		
		Если Не ХарактеристикаНайдена Тогда 
			
			СтрокаРодитель = МассивСтрок[0];
			НоваяСтрока = СтрокаРодитель.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПараметров);
			ЗаполнитьКоличествоФакт(НоваяСтрока, СтруктураПараметров.Количество);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "ТоварыДерево");
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьКоличествоФакт(Строка, Количество)
	
	Строка.КоличествоФакт = Строка.КоличествоФакт + Количество;
	Строка.КоличествоУпаковокФакт = Строка.КоличествоУпаковокФакт + Количество;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("СерийныйНомер", СтруктураНомера.СерийныйНомер);
	СтрокиСертификата = ЭтотОбъект.Объект.СерийныеНомераФакт.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиСертификата.Количество() > 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Номер подарочного сертификата ""%1"" уже присутствует в документе.'")
							  + Символы.ПС + НСтр("ru = 'Повторный ввод данных не требуется.'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ТекстПредупреждения,
								СтруктураНомера.СерийныйНомер);
		СтруктураНомера.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		
		СтруктураПоискаТовара = Новый Структура;
		СтруктураПоискаТовара.Вставить("КлючСвязиСерийныхНомеров", СтрокиСертификата[0].КлючСвязиСерийныхНомеров);
		СтрокиТоваров = ЭтотОбъект.Объект.ТоварыФакт.НайтиСтроки(СтруктураПоискаТовара);
		
		Если СтрокиТоваров.Количество() > 0 Тогда
			ИдентификаторСтроки = СтрокиТоваров[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	Иначе
		
		Если СтруктураНомера.Свойство("Количество") Тогда
			СтруктураНомера.Количество = 1;
		КонецЕсли;
		ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ДобавитьНоменклатуруПоСерийномуНомеру(ЭтотОбъект, СтруктураНомера);
		Если ИдентификаторСтроки <> Неопределено Тогда
			
			ТекущаяСтрока = ЭтотОбъект.Объект.ТоварыФакт.НайтиПоИдентификатору(ИдентификаторСтроки);
			
			Если ТекущаяСтрока.КлючСвязиСерийныхНомеров = 0 Тогда
				ДобавляемыеНомера = Новый Массив;
				ДобавляемыеНомера.Добавить(СтруктураНомера.СерийныйНомер);
				ТекущаяСтрока.КлючСвязиСерийныхНомеров = ОбработкаТабличнойЧастиТоварыСервер.ДобавитьСерийныеНомераВТабличнуюЧасть(
																ЭтотОбъект.Объект.СерийныеНомераФакт, 
																ДобавляемыеНомера, 
																0);
			Иначе
				НоваяСтрока = ЭтотОбъект.Объект.СерийныеНомераФакт.Добавить();
				НоваяСтрока.СерийныйНомер = СтруктураНомера.СерийныйНомер;
				НоваяСтрока.КлючСвязиСерийныхНомеров = ТекущаяСтрока.КлючСвязиСерийныхНомеров;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

#КонецОбласти

#Область СобытяФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьПараметрыРаспределения();
	ЗаполнитьПараметрыРаспределения(Параметры, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьВидФормы();
	ИнициализироватьВариантыРаспределенияТоваров();
	ИнициализироватьСкладыРаспределения();
	
	ОбновитьДанныеФормы();
	НастроитьВидФормыПослеЧтенияДанных();
	КонтролироватьОстатокПриПроведении = УправлениеПользователямиВызовСервера.ПолучитьБулевоЗначениеПраваПользователя(
										ПредопределенноеЗначение("ПланВидовХарактеристик.ПраваПользователей.КонтролироватьОстатокПриПроведении"),
										Истина,
										ПараметрыСеанса.ТекущийПользователь);
										
	МассивКомандПО = Новый Массив;
	МассивКомандПО.Добавить("ТоварыДеревоПоискПоШтрихкоду");
	МассивКомандПО.Добавить("ТоварыДеревоПоискПоМагнитномуКоду");
	МассивКомандПО.Добавить("ТоварыДеревоВыгрузитьДанныеВТСД");
	МассивКомандПО.Добавить("ТоварыДеревоЗагрузитьДанныеИзТСД");
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтаФорма, МассивКомандПО);
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если (не ПараметрыРаспределения.ОрдернаяСхема и ПараметрыРаспределения.ОдинСклад
		и не ПараметрыРаспределения.ОформлениеРасхожденийПриПриемке)
		или (ПараметрыРаспределения.СборТоваровДляОтгрузки и ПараметрыРаспределения.ОдинСклад)
		или (не ПараметрыРаспределения.ОрдернаяСхема и ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
		ТекстСообщения = НСтр("ru = 'Выполнение операции не требуется'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	ОбновитьЗаголовокТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если не ЗавершениеРаботы Тогда
		СохранитьДанные();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда	
		
		ИдентификаторСтроки = ОбработкаВыбораНаСервере(ВыбранноеЗначение);
		Если Не ИдентификаторСтроки = Неопределено Тогда
			Элементы.ТоварыДерево.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
		
		ОбновитьЗаголовокТовары();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработкаВыбораНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	ТаблицаСерийныхНомеров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресСерийныхНомеровВХранилище);
	
	ЕстьСерийныеНомера = ТаблицаСерийныхНомеров.Количество() > 0;
	
	СтруктураПоиска = СтруктураПоиска();
	СтруктураПоиска.СоСкладом.Удалить("Упаковка");
	
	СтруктураТЧ = Новый Структура("СтрокиТЧ", Новый Массив());
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ОстаткиТоваров = ПолучитьОстаткиТоваров(ТаблицаТоваров, Объект.Магазин);
	
	ДобавленаСтрока = Ложь;
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска.БезСклада, СтрокаТовара);
		СтрокиПоФакту = Объект.ТоварыФакт.НайтиСтроки(СтруктураПоиска.БезСклада);
		
		Если СтрокиПоФакту.Количество() = 0 Тогда
			
			ДобавленаСтрока = Истина;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска.СоСкладом, СтрокаТовара);
			
			НоваяСтрокаПоФакту = Объект.ТоварыФакт.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПоФакту, СтрокаТовара);
			СтруктураТЧ.СтрокиТЧ.Добавить(НоваяСтрокаПоФакту);
			
			Для Каждого СкладРаспределения Из СкладыРаспределения Цикл
				
				НоваяСтрокаПеремещение = Объект.ТоварыПеремещение.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПеремещение, СтрокаТовара, "Номенклатура, Характеристика, Упаковка");
				НоваяСтрокаПеремещение.Склад = СкладРаспределения.Склад;
				
				СтруктураПоиска.СоСкладом.Склад = СкладРаспределения.Склад;
				СтрокиОстатка = ОстаткиТоваров.НайтиСтроки(СтруктураПоиска.СоСкладом);
				Если не СтрокиОстатка.Количество() = 0 Тогда
					НоваяСтрокаПеремещение.КоличествоОстаток = СтрокиОстатка[0].КоличествоОстаток;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			СтрокиПоФакту[0].Количество = СтрокиПоФакту[0].Количество + СтрокаТовара.Количество;
			СтрокиПоФакту[0].КоличествоУпаковок = СтрокиПоФакту[0].КоличествоУпаковок + СтрокаТовара.КоличествоУпаковок;
			СтруктураТЧ.СтрокиТЧ.Добавить(СтрокиПоФакту[0]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, КэшированныеЗначения);
	
	Если ДобавленаСтрока Тогда
	
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.ТоварыФакт);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.ТоварыФакт);
		
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.ТоварыПеремещение);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.ТоварыПеремещение);
		
	конецЕсли;
		
	ЗаполнитьДеревоТоваровПоТабличнымЧастям(СтруктураТЧ.СтрокиТЧ);
	
	ИдентификаторыПоследнейДобавленнойСтроки = ПолучитьМассивИдентификаторовКонечныхСтрок(ТоварыДерево, СтруктураПоиска.БезСклада);
	Если ИдентификаторыПоследнейДобавленнойСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ИдентификаторыПоследнейДобавленнойСтроки[0];
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФормы(ПолноеОбновление = Ложь)
	
	Объект.ТоварыРаспоряжение.Очистить();
	Объект.СерииРаспоряжение.Очистить();
	Объект.СерийныеНомераРаспоряжение.Очистить();
	
	Если ПараметрыРаспределения.ОрдернаяСхема или ПолноеОбновление Тогда
		Объект.ТоварыФакт.Очистить();
		Объект.СерииФакт.Очистить();
		Объект.СерийныеНомераФакт.Очистить();
	КонецЕсли;
	
	Объект.ТоварыПеремещение.Очистить();
	Объект.СерийныеНомераПеремещение.Очистить();
	
	ТоварыДерево.ПолучитьЭлементы().Очистить();
	
	Если ПараметрыРаспределения.ОрдернаяСхема и не ПараметрыРаспределения.СборТоваровДляОтгрузки Тогда
		ЗаполнитьТоварыРаспоряжениеПоРегиструНакопления();
	Иначе
		ЗаполнитьТоварыРаспоряжениеПоДокументу();
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ПоступлениеТоваров")
		или ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		Если ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументРаспоряжение, "ТТНВходящаяЕГАИС")) Тогда
			ПараметрыРаспределения.ПоступлениеПоТТНЕГАИС = Истина;
		Иначе
			ПараметрыРаспределения.ПоступлениеПоТТНЕГАИС = Ложь;
		КонецЕсли;
	Иначе
		ПараметрыРаспределения.ПоступлениеПоТТНЕГАИС = Ложь;
	КонецЕсли;
	
	Если ПолноеОбновление Тогда
		УдалитьСохранненныеДанные();
	КонецЕсли;
	
	ИнициализироватьТоварыПоФакту();
	ВосстановитьДанныеФакт();
	ИнициализироватьТоварыПеремещение();
	ВосстановитьДанныеПеремещение();
	
	ПараметрыУказанияСерий = Обработки.ПомощникПриемкиОтгрузки.ПараметрыУказанияСерий(Объект.ДокументРаспоряжение, ПараметрыРаспределения);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.ТоварыРаспоряжение);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.ТоварыФакт);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.ТоварыПеремещение);
	
	ПараметрыУказанияСерий.Вставить("ИмяТЧТовары", "ТоварыФакт");
	ПараметрыУказанияСерий.Вставить("ИмяТЧСерии", "СерииФакт");
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.ТоварыРаспоряжение);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.ТоварыФакт);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.ТоварыПеремещение);
	
	ЗаполнитьДеревоТоваровПоТабличнымЧастям();
	
	ОбновитьОформленныеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТовары Тогда
		ДоступностьКоманд = Истина;
	Иначе
		ДоступностьКоманд = Ложь;
	КонецЕсли;
	
	Элементы.КомандыФормы.Доступность = ДоступностьКоманд;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияДереваТоваров

&НаКлиенте
Процедура ТоварыДеревоПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ТоварыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПрямоеРедактированиеКоличестваФакт Тогда
		РежимРедактированияФакт = РежимРедактированияКолонки.ВходПриВводе;
	Иначе
		РежимРедактированияФакт = РежимРедактированияКолонки.Вход;
	КонецЕсли;
	
	Если ТекущиеДанные.ПрямоеРедактированиеКоличестваПеремещения Тогда
		РежимРедактированияПеремещения = РежимРедактированияКолонки.ВходПриВводе;
	Иначе
		РежимРедактированияПеремещения = РежимРедактированияКолонки.Вход;
	КонецЕсли;
	
	Элементы.ТоварыДеревоКоличествоУпаковокФакт.РежимРедактирования = РежимРедактированияФакт;
	Для Каждого СкладРаспределения Из СкладыРаспределения Цикл
		Элементы[СкладРаспределения.ИмяКолонкиКоличествоУпаковок].РежимРедактирования = РежимРедактированияПеремещения;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТоварыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыДеревоКоличествоУпаковокРаспоряжение Тогда
		
		СтруктураПоиска = СтруктураПоиска();
		ЗаполнитьЗначенияСвойств(СтруктураПоиска.БезСклада, ТекущиеДанные);
		СтрокиТЧТоварыРаспоряжение = Объект.ТоварыРаспоряжение.НайтиСтроки(СтруктураПоиска.БезСклада);
		
		Если Не СтрокиТЧТоварыРаспоряжение.Количество() = 0 и (СтрокиТЧТоварыРаспоряжение[0].ИспользоватьСерийныеНомера ИЛИ НЕ СтрокиТЧТоварыРаспоряжение[0].СтатусУказанияСерий = 0) Тогда
			СтандартнаяОбработка = Ложь;
			Если СтрокиТЧТоварыРаспоряжение[0].ИспользоватьСерийныеНомера Тогда
				ВвестиПодарочныеСертификаты(СтрокиТЧТоварыРаспоряжение[0], Объект.СерийныеНомераРаспоряжение);
			Иначе
				УказатьСерии(СтрокиТЧТоварыРаспоряжение[0], "ТоварыРаспоряжение", "СерииРаспоряжение");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыДеревоКоличествоУпаковокФакт Тогда
		
		СтруктураПоиска = СтруктураПоиска();
		ЗаполнитьЗначенияСвойств(СтруктураПоиска.БезСклада, ТекущиеДанные);
		СтрокиТЧТоварыФакт = Объект.ТоварыФакт.НайтиСтроки(СтруктураПоиска.БезСклада);
		
		Если Не СтрокиТЧТоварыФакт.Количество() = 0 и (СтрокиТЧТоварыФакт[0].ИспользоватьСерийныеНомера ИЛИ НЕ СтрокиТЧТоварыФакт[0].СтатусУказанияСерий = 0) Тогда
			СтандартнаяОбработка = Ложь;
			Если СтрокиТЧТоварыФакт[0].ИспользоватьСерийныеНомера Тогда
				ВвестиПодарочныеСертификаты(СтрокиТЧТоварыФакт[0], Объект.СерийныеНомераФакт);
			Иначе
				УказатьСерии(СтрокиТЧТоварыФакт[0], "ТоварыФакт", "СерииФакт");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли не Элемент.ТекущийЭлемент.Родитель = ЭтаФорма
			и не Элемент.ТекущийЭлемент.Родитель.Родитель = ЭтаФорма
			и не Элемент.ТекущийЭлемент.Родитель.Родитель.Родитель = ЭтаФорма
			и Элемент.ТекущийЭлемент.Родитель.Родитель.Родитель = Элементы.ТоварыДеревоГруппаКоличествоПеремещение Тогда
		
		СтруктураПоиска = СтруктураПоиска();
		ЗаполнитьЗначенияСвойств(СтруктураПоиска.СоСкладом, ТекущиеДанные);
		СтруктураПоиска.СоСкладом.Склад = ОпределитьСклад(Элемент.ТекущийЭлемент).Склад;
		СтрокиТЧТоварыПеремещение = Объект.ТоварыПеремещение.НайтиСтроки(СтруктураПоиска.СоСкладом);
		
		Если СтрокиТЧТоварыПеремещение.Количество() = 0 Тогда
			СтрокаТЧПеремещение = Объект.ТоварыПеремещение.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧПеремещение, СтруктураПоиска.СоСкладом);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска.БезСклада, СтруктураПоиска.СоСкладом);
			СтрокиТЧФакт = Объект[ПараметрыРаспределения.БазоваяТаблицаДляРаспределения].НайтиСтроки(СтруктураПоиска.БезСклада);
			СтрокаТЧПеремещение.ИспользоватьСерийныеНомера = СтрокиТЧФакт[0].ИспользоватьСерийныеНомера;
		Иначе
			СтрокаТЧПеремещение = СтрокиТЧТоварыПеремещение[0];
		КонецЕсли;
		
		Если СтрокаТЧПеремещение.ИспользоватьСерийныеНомера Тогда
			СтандартнаяОбработка = Ложь;
			ВвестиПодарочныеСертификаты(СтрокаТЧПеремещение, Объект.СерийныеНомераПеремещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ТоварыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		Элементы.ТоварыДерево.ЗакончитьРедактированиеСтроки(Истина);
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыДеревоЦена Тогда
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		СтруктураПоиска.Вставить("Упаковка", ТекущиеДанные.Упаковка);
		
		Если не Объект.ТоварыРаспоряжение.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ТоварыДерево.ТекущиеДанные;
	ТекущаяСтрока = Элементы.ТоварыДерево.ТекущаяСтрока;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	СтруктураПоиска.Вставить("Упаковка", ТекущиеДанные.Упаковка);
	
	Если не Объект.ТоварыРаспоряжение.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		ТекстОповещения = НСтр("ru = 'Удаление строки перенесенной из документа невозможно'");
		ПоказатьОповещениеПользователя(,, ТекстОповещения, БиблиотекаКартинок.Ошибка32);
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если ТекущиеДанные.ЭтоГруппа И не ТоварыДерево.НайтиПоИдентификатору(ТекущаяСтрока).ПолучитьЭлементы().Количество() = 0 Тогда
			ТекстОповещения = НСтр("ru = 'Удаление не пустой группы невозможно'");
			ПоказатьОповещениеПользователя(,, ТекстОповещения, БиблиотекаКартинок.Ошибка32);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ТоварыДерево.ВыделенныеСтроки.Количество() > 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
		СтрокиФакт = Объект.ТоварыФакт.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаФакт Из СтрокиФакт Цикл
			Объект.ТоварыФакт.Удалить(СтрокаФакт);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоКоличествоУпаковокФактПриИзменении(Элемент)
	
	ПриИзмененииТоварыКоличестваУпаковок(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТоварыДеревоКоличествоУпаковокПеремещениеПриИзменении(Элемент)
	
	ПриИзмененииТоварыКоличестваУпаковок(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТоварыКоличестваУпаковок(ИмяЭлемента, ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = Элементы.ТоварыДерево.ТекущиеДанные;
		ТекущаяСтрока = Элементы.ТоварыДерево.ТекущаяСтрока;
	Иначе
		ТекущиеДанные = ТоварыДерево.НайтиПоИдентификатору(ТекущаяСтрока);
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// обновление табличных частей
	
	СтруктураПоиска = СтруктураПоиска();
	ЗаполнитьЗначенияСвойств(СтруктураПоиска.БезСклада, ТекущиеДанные);
	Если ИмяЭлемента = "ТоварыДеревоКоличествоУпаковокФакт" Тогда
		СтрокиТЧ = Объект.ТоварыФакт.НайтиСтроки(СтруктураПоиска.БезСклада);
		ТЧ = Объект.ТоварыФакт;
		СтруктураОбновления = СтруктураОбновленияТоваровНаКлиенте(ТекущаяСтрока,, Истина,);
	Иначе
		СкладРаспределения = СкладыРаспределения.НайтиСтроки(Новый Структура("ИмяКолонкиКоличествоУпаковок", ИмяЭлемента));
		ЗаполнитьЗначенияСвойств(СтруктураПоиска.СоСкладом, ТекущиеДанные);
		СтруктураПоиска.СоСкладом.Склад = СкладРаспределения[0].Склад;
		СтрокиТЧ = Объект.ТоварыПеремещение.НайтиСтроки(СтруктураПоиска.СоСкладом);
		ТЧ = Объект.ТоварыПеремещение;
		СтруктураОбновления = СтруктураОбновленияТоваровНаКлиенте(ТекущаяСтрока,,, Истина);
	КонецЕсли;
	
	ОбновитьТабличныеЧастиПоДеревуТоваров(Объект.ТоварыРаспоряжение, Объект.ТоварыФакт, Объект.ТоварыПеремещение, СтруктураОбновления);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если Не ЗначениеЗаполнено(КэшированныеЗначения) Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(ТЧ, СтрокиТЧ[0], СтруктураДействий, КэшированныеЗначения);
	
	Если ИмяЭлемента = "ТоварыДеревоКоличествоУпаковокФакт" Тогда
		ТекущиеДанные.КоличествоФакт = СтрокиТЧ[0].Количество;
	Иначе
		ТекущиеДанные[СкладРаспределения[0].ИмяКолонкиКоличество] = СтрокиТЧ[0].Количество;
	КонецЕсли;
	
	// отклонения
	КоличествоОтклонение = ТекущиеДанные.КоличествоУпаковокФакт - ТекущиеДанные.КоличествоУпаковокРаспоряжение;
	Если КоличествоОтклонение = 0 Тогда
		ТекущиеДанные.КоличествоУпаковокОтклонение = "";
	Иначе
		ТекущиеДанные.КоличествоУпаковокОтклонение = "(" + Строка(КоличествоОтклонение) + ")";
	КонецЕсли;
	
	// количество на основной склад
	КоличествоКПеремещению = 0;
	КоличествоУпаковокКПеремещению = 0;
	ИмяКолонкиКоличествоОсновногоСклада = "";
	ИмяКолонкиКоличествоУпаковокОсновногоСклада = "";
	Для Каждого СкладРаспределения Из СкладыРаспределения Цикл
		Если Не СкладРаспределения.Склад = СтруктураОбновления.ОсновнойСклад Тогда
			КоличествоКПеремещению = КоличествоКПеремещению + ТекущиеДанные[СкладРаспределения.ИмяКолонкиКоличество];
			КоличествоУпаковокКПеремещению = КоличествоУпаковокКПеремещению + ТекущиеДанные[СкладРаспределения.ИмяКолонкиКоличествоУпаковок];
		Иначе
			ИмяКолонкиКоличествоОсновногоСклада = СкладРаспределения.ИмяКолонкиКоличество;
			ИмяКолонкиКоличествоУпаковокОсновногоСклада = СкладРаспределения.ИмяКолонкиКоличествоУпаковок;
		КонецЕсли;
	КонецЦикла;
	Если РаботаСФактом Тогда
		ТекущиеДанные[ИмяКолонкиКоличествоОсновногоСклада] = Макс(ТекущиеДанные.КоличествоФакт - КоличествоКПеремещению, 0);
		ТекущиеДанные[ИмяКолонкиКоличествоУпаковокОсновногоСклада] = Макс(ТекущиеДанные.КоличествоУпаковокФакт - КоличествоУпаковокКПеремещению, 0);
	Иначе
		ТекущиеДанные[ИмяКолонкиКоличествоОсновногоСклада] = Макс(ТекущиеДанные.КоличествоРаспоряжение - КоличествоКПеремещению, 0);
		ТекущиеДанные[ИмяКолонкиКоличествоУпаковокОсновногоСклада] = Макс(ТекущиеДанные.КоличествоУпаковокРаспоряжение - КоличествоУпаковокКПеремещению, 0);
	КонецЕсли;
	
	// контроль количества
	СтруктураПроверки = ПодготовитьСтруктураПроверкиКоличестваНаКлиенте(ТекущиеДанные);
	ТекущиеДанные.ЕстьОшибкиЗаполнения = не ПроверитьКоличества(СтруктураПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТоварыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	СтруктураПоиска.Вставить("Упаковка", ТекущиеДанные.Упаковка);
	
	СтрокиФакт = Объект.ТоварыФакт.НайтиСтроки(СтруктураПоиска);
	Если не СтрокиФакт.Количество() = 0 Тогда
		СтрокиФакт[0].Цена = ТекущиеДанные.Цена;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработкаСерийИСертификатов

&НаКлиенте
Процедура ВвестиПодарочныеСертификаты(СтрокаТЧ, ТЧСерийныеНомера)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиСерийныеНомераНоменклатурыВТЧ(ЭтаФорма, ТЧСерийныеНомера, СтрокаТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодбораПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры) Экспорт
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПослеВводаНомеровПодарочныхСертификатов(НовыеСерийныеНомера, ДополнительныеПараметры);
	
	ПересчетКоличества = ДополнительныеПараметры.ПересчетКоличества;
	
	Если ПересчетКоличества Тогда
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		КэшированныеЗначения = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		СтруктураПоиска = СтруктураПоиска();
		ЗаполнитьЗначенияСвойств(СтруктураПоиска.БезСклада, ДополнительныеПараметры.СтрокаТЧ);
		ИдентификаторыСтрокДерева = ПолучитьМассивИдентификаторовКонечныхСтрок(ТоварыДерево, СтруктураПоиска.БезСклада);
		
		Если ДополнительныеПараметры.ТЧСерийныеНомера = Объект.СерийныеНомераФакт Тогда
			ТЧ = Объект.ТоварыФакт;
			СтруктураОбновления = СтруктураОбновленияТоваровНаКлиенте(ИдентификаторыСтрокДерева[0],, Истина);
		ИначеЕсли ДополнительныеПараметры.ТЧСерийныеНомера = Объект.СерийныеНомераПеремещение Тогда
			ТЧ = Объект.ТоварыПеремещение;
			СтруктураОбновления = СтруктураОбновленияТоваровНаКлиенте(ИдентификаторыСтрокДерева[0],,, Истина);
		КонецЕсли;
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(ТЧ, ДополнительныеПараметры.СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
		
		ОбновитьДеревоТоваровПоТабличнымЧастям(ТоварыДерево, СтруктураОбновления);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(СтрокаТЧ, ИмяТЧТовары, ИмяТЧСерии)
	
	ДанныеСтроки = Новый Структура("Номенклатура, Характеристика, Упаковка, Количество, КоличествоУпаковок, Цена, ИдентификаторСтроки, КлючСвязиСерийныхНомеров, СтатусУказанияСерий, ХарактеристикиИспользуются");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТЧ);
	
	ПараметрыУказанияСерий.Вставить("ИмяТЧТовары", ИмяТЧТовары);
	ПараметрыУказанияСерий.Вставить("ИмяТЧСерии", ИмяТЧСерии);
	ПараметрыУказанияСерий.Вставить("ТекущиеДанные", ДанныеСтроки);
	ПараметрыУказанияСерий.Вставить("ТекущаяСтрока", СтрокаТЧ.ПолучитьИдентификатор());
	
	Если ИмяТЧТовары = "ТоварыРаспоряжение" Тогда
		ПараметрыУказанияСерий.Вставить("ТолькоПросмотр", Истина);
	Иначе
		Если ПараметрыУказанияСерий.Свойство("ТолькоПросмотр") Тогда
			ПараметрыУказанияСерий.Удалить("ТолькоПросмотр");
		конецЕсли;
	КонецЕсли;
	
	ВводСерийРазрешен = Истина;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма, ПараметрыУказанияСерий, ВводСерийРазрешен);
	Если НЕ ВводСерийРазрешен Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеИдентификатор = СтрокаТЧ.ПолучитьИдентификатор();
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	ПараметрыФормыУказанияСерий.Вставить("ИдентификаторСтроки", СтрокаТЧ.ПолучитьИдентификатор());
	
	ОбработчикУказанияСерий = Новый ОписаниеОповещения("ОбработатьУказаниеСерий", ЭтотОбъект, ПараметрыФормыУказанияСерий);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, ПараметрыФормыУказанияСерий, ЭтаФорма,,,, ОбработчикУказанияСерий, РежимБлокировки);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьУказаниеСерий(ЗначениеВозврата, ПараметрыФормыУказанияСерий) Экспорт
	
	Если ЗначениеВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий.Вставить("ЗначениеВозврата", ЗначениеВозврата);
	ОбработатьУказаниеСерийНаСервере(ПараметрыФормыУказанияСерий);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Объект.ТоварыФакт);
	
	ИдентификаторСтрокиДерева = ИдентификаторСтрокиДереваПоИдентификаторуСтрокиТЧ(ТоварыДерево, Объект.ТоварыФакт, ПараметрыФормыУказанияСерий.ИдентификаторСтроки);
	СтруктураОбновления = СтруктураОбновленияТоваровНаКлиенте(ИдентификаторСтрокиДерева,, Истина);
	ОбновитьДеревоТоваровПоТабличнымЧастям(ТоварыДерево, СтруктураОбновления);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийНаСервере(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий, СтруктураДействий);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КомандыФормы

#Область КомандыПодключаемогоОборудования

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	АдресТоваровВХранилище = ПоместитьТоварыРаспоряжениеВоВременноеХранилище();
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "ТоварыРаспоряжение");
	ДополнительныеПараметры.Вставить("ЭтоСсылочныйОбъект", Ложь);
	ДополнительныеПараметры.Вставить("АдресТоваровВХранилище", АдресТоваровВХранилище);
	
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыРаспоряжениеВоВременноеХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ТоварыРаспоряжение.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", "ТоварыРаспоряжение");
	ДополнительныеПараметры.Вставить("ЭтоСсылочныйОбъект", Ложь);
	
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НастройкиРаспределения(Команда)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                 Истина, "Справочник.ВариантыРаспределенияТоваров.Форма.ФормаСписка.Открытие");

	ОткрытьФорму("Справочник.ВариантыРаспределенияТоваров.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатура(Команда)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Обработка.ПодборТоваров.Форма.Форма.Открытие");
             
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Дата", ТекущаяДата());
	ПараметрыФормы.Вставить("Склад", Объект.ОсновнойСклад);
	ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
	ПараметрыФормы.Вставить("Контрагент", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
	ПараметрыФормы.Вставить("СсылкаНаПоступление", Объект.ДокументРаспоряжение);
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРаспределение(Команда)
	
	Если Объект[ПараметрыРаспределения.БазоваяТаблицаДляРаспределения].Итог("Количество") = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет товаров для выполнения распределения. Заполните колонку По факту'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если не ПараметрыРаспределения.ОрдернаяСхема или ПараметрыРаспределения.СборТоваровДляОтгрузки Тогда
		Если Объект.ТоварыПеремещение.Итог("Количество") = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Нет товаров для выполнения распределения. Заполните количество в колонках складов'");
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтрокиДляПроверки = ПолучитьМассивИдентификаторовВсехКонечныхСтрок(ТоварыДерево);
	ОчиститьСообщения();
	Отказ = Ложь;
	Для Каждого ИдентификаторСтроки Из СтрокиДляПроверки Цикл
		СообщениеПользователю = Новый СообщениеПользователю();
		ДанныеСтрокиДерева = ТоварыДерево.НайтиПоИдентификатору(ИдентификаторСтроки);
		СтруктураПроверки = ПодготовитьСтруктураПроверкиКоличестваНаКлиенте(ДанныеСтрокиДерева, СообщениеПользователю);
		Если не ПроверитьКоличества(СтруктураПроверки) Тогда
			ДанныеСтрокиДерева.ЕстьОшибкиЗаполнения = Истина;
			Отказ = Истина;
			СообщениеПользователю.Сообщить();
		Иначе
			ДанныеСтрокиДерева.ЕстьОшибкиЗаполнения = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеСерийНаСервере(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапуска = ВыполнитьРаспределениеВФоне();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыполненияРаспределения", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапуска, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьРаспределениеВФоне()
	
	ПараметрыЗадания = Новый Структура();
	
	ПараметрыЗадания.Вставить("ДокументРаспоряжение", Объект.ДокументРаспоряжение);
	ПараметрыЗадания.Вставить("Магазин", Объект.Магазин);
	ПараметрыЗадания.Вставить("ОсновнойСклад", Объект.ОсновнойСклад);
	ПараметрыЗадания.Вставить("Ответственный", ПараметрыСеанса.ТекущийПользователь);
	
	ПараметрыЗадания.Вставить("ПараметрыРаспределения", ПараметрыРаспределения);
	ПараметрыЗадания.Вставить("СкладыРаспределения", Новый ХранилищеЗначения(СкладыРаспределения.Выгрузить()));
	
	ПараметрыЗадания.Вставить("ТоварыФакт", Новый ХранилищеЗначения(Объект.ТоварыФакт.Выгрузить()));
	ПараметрыЗадания.Вставить("СерийныеНомераФакт", Новый ХранилищеЗначения(Объект.СерийныеНомераФакт.Выгрузить()));
	ПараметрыЗадания.Вставить("СерииФакт", Новый ХранилищеЗначения(Объект.СерииФакт.Выгрузить()));
	
	ПараметрыЗадания.Вставить("ТоварыПеремещение", Новый ХранилищеЗначения(Объект.ТоварыПеремещение.Выгрузить()));
	ПараметрыЗадания.Вставить("СерийныеНомераПеремещение", Новый ХранилищеЗначения(Объект.СерийныеНомераПеремещение.Выгрузить()));
	
	ВыполняемыйМетод = "Обработки.ПомощникПриемкиОтгрузки.ВыполнитьРаспределениеВФоне";
	НаименованиеЗадания = НСтр("ru = 'Помощник приемки/отгрузки фоновые действия'");
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗадания, ПараметрыВыполнения);
	
	Возврат РезультатЗапуска;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыполненияРаспределения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		ОбновитьДанные = Истина;
		
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если РезультатВыполнения.Результат Тогда
			
			ОбновитьДанные = Истина;
			
			Если ПараметрыРаспределения.Операция = "Приемка" Тогда
				Если ПараметрыРаспределения.ОрдернаяСхема Тогда
					ТекстОповещения = НСтр("ru = 'Товары успешно приняты'");
				Иначе
					ТекстОповещения = НСтр("ru = 'Товары успешно распределены'");
				КонецЕсли;
			Иначе // Отгрузка
				Если ПараметрыРаспределения.ОрдернаяСхема и не ПараметрыРаспределения.СборТоваровДляОтгрузки Тогда
					ТекстОповещения = НСтр("ru = 'Товары успешно отгружены'");
				Иначе
					ТекстОповещения = НСтр("ru = 'Товары успешно собраны'");
				КонецЕсли;
			КонецЕсли;
			ПоказатьОповещениеПользователя(,, ТекстОповещения, БиблиотекаКартинок.Успешно32);
			
		Иначе
			
			ОбновитьДанные = Ложь;
		
			Сообщить(РезультатВыполнения.ТекстОшибки);
			
		КонецЕсли;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбновитьДанные = Ложь;
		
		Сообщить(Результат.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
	Если ОбновитьДанные Тогда
		
		ОбновитьОформленныеДокументы();
		УдалитьСохранненныеДанные();
		
		ОбновитьДанныеФормы();
		НастроитьВидФормыПослеЧтенияДанных();
		ОбновитьЗаголовокТовары();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьРасхождения(Команда)
	
	ЕстьРасхождения = Ложь;
	Если ПараметрыРаспределения.ОрдернаяСхема Тогда
		ЕстьРасхождения = ЕстьРасхожденияПоОрдерам();
	Иначе
		Для Каждого СтрокаФакт Из Объект.ТоварыФакт Цикл
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Номенклатура", СтрокаФакт.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", СтрокаФакт.Характеристика);
			СтрокиРаспоряжение = Объект.ТоварыРаспоряжение.НайтиСтроки(СтруктураПоиска);
			Если СтрокиРаспоряжение.Количество() = 0 Тогда
				ЕстьРасхождения = Истина;
				Прервать;
			ИначеЕсли не СтрокиРаспоряжение[0].Количество = СтрокаФакт.Количество Тогда
				ЕстьРасхождения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЕстьРасхождения Тогда
		ТекстСообщения = НСтр("ru = 'Расхождений нет'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыРаспределения.ОрдернаяСхема И не Объект.ТоварыФакт.Итог("Количество") = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Перед оформлением расхождений завершите приемку товаров'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтрокиДляПроверки = ПолучитьМассивИдентификаторовВсехКонечныхСтрок(ТоварыДерево);
	ОчиститьСообщения();
	Отказ = Ложь;
	Для Каждого ИдентификаторСтроки Из СтрокиДляПроверки Цикл
		СообщениеПользователю = Новый СообщениеПользователю();
		ДанныеСтрокиДерева = ТоварыДерево.НайтиПоИдентификатору(ИдентификаторСтроки);
		СтруктураПроверки = ПодготовитьСтруктураПроверкиКоличестваНаКлиенте(ДанныеСтрокиДерева, СообщениеПользователю);
		Если не ПроверитьКоличества(СтруктураПроверки) Тогда
			ДанныеСтрокиДерева.ЕстьОшибкиЗаполнения = Истина;
			Отказ = Истина;
			СообщениеПользователю.Сообщить();
		Иначе
			ДанныеСтрокиДерева.ЕстьОшибкиЗаполнения = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеСерийНаСервере(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапуска = ВыполнитьОформлениеВФоне();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеОформленияРасхождений", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапуска, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьОформлениеВФоне()
	
	ПараметрыЗадания = Новый Структура();
	
	ПараметрыЗадания.Вставить("ДокументРаспоряжение", Объект.ДокументРаспоряжение);
	ПараметрыЗадания.Вставить("Магазин", Объект.Магазин);
	ПараметрыЗадания.Вставить("ОсновнойСклад", Объект.ОсновнойСклад);
	ПараметрыЗадания.Вставить("Ответственный", ПараметрыСеанса.ТекущийПользователь);
	
	ПараметрыЗадания.Вставить("ПараметрыРаспределения", ПараметрыРаспределения);
	ПараметрыЗадания.Вставить("СкладыРаспределения", Новый ХранилищеЗначения(СкладыРаспределения.Выгрузить()));
	
	ПараметрыЗадания.Вставить("ТоварыФакт", Новый ХранилищеЗначения(Объект.ТоварыФакт.Выгрузить()));
	ПараметрыЗадания.Вставить("СерийныеНомераФакт", Новый ХранилищеЗначения(Объект.СерийныеНомераФакт.Выгрузить()));
	ПараметрыЗадания.Вставить("СерииФакт", Новый ХранилищеЗначения(Объект.СерииФакт.Выгрузить()));
	
	ПараметрыЗадания.Вставить("ТоварыПеремещение", Новый ХранилищеЗначения(Объект.ТоварыПеремещение.Выгрузить()));
	ПараметрыЗадания.Вставить("СерийныеНомераПеремещение", Новый ХранилищеЗначения(Объект.СерийныеНомераПеремещение.Выгрузить()));
	
	ВыполняемыйМетод = "Обработки.ПомощникПриемкиОтгрузки.ОформитьРасхожденияВФоне";
	НаименованиеЗадания = НСтр("ru = 'Помощник приемки/отгрузки фоновые действия'");
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗадания, ПараметрыВыполнения);
	
	Возврат РезультатЗапуска;
	
КонецФункции

&НаКлиенте
Процедура ПослеОформленияРасхождений(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		ОбновитьДанные = Истина;
		
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		ОбновитьДанные = Истина;
		
		Если ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
			ТекстОповещения = НСтр("ru = 'Расхождения отражены в документе поступления'");
		Иначе // Перемещение
			ТекстОповещения = НСтр("ru = 'Создан документ Акт расхождений'");
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(,, ТекстОповещения, БиблиотекаКартинок.Успешно32);
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбновитьДанные = Ложь;
		
		Сообщить(Результат.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
	Если ОбновитьДанные Тогда
		
		ОбновитьОформленныеДокументы();
		ПараметрыРаспределения.ОформлениеРасхожденийПриПриемкеВыполнено = Истина;
		УдалитьСохранненныеДанные();
		
		ОбновитьДанныеФормы();
		НастроитьВидФормыПослеЧтенияДанных();
		ОбновитьЗаголовокТовары();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеСерийНаСервере(Отказ)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТекстСообщения = "";
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеСерий(ОбработкаОбъект, ПараметрыУказанияСерий, Отказ,, Ложь, ТекстСообщения);
	Если Отказ Тогда
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьРасхожденияПоОрдерам()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыКПоступлениюОстатки.Номенклатура,
	|	ТоварыКПоступлениюОстатки.Характеристика,
	|	ТоварыКПоступлениюОстатки.Склад,
	|	ТоварыКПоступлениюОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(, ДокументОснование = &ДокументПоступления) КАК ТоварыКПоступлениюОстатки";
	Если ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ЗаказПоставщику = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументРаспоряжение, "ЗаказПоставщику");
		Если ЗначениеЗаполнено(ЗаказПоставщику) Тогда
			Запрос.УстановитьПараметр("ДокументПоступления", ЗаказПоставщику);
		Иначе
			Запрос.УстановитьПараметр("ДокументПоступления", Объект.ДокументРаспоряжение);
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ДокументПоступления", Объект.ДокументРаспоряжение);
	КонецЕсли;
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЗаполнение(Команда)
	
	ТекстВопроса = НСтр("ru = 'Все изменения будут потеряны, продолжить?'");
	ОписаниеОтвета = Новый ОписаниеОповещения("ОбновитьЗаполнениеПодтверждение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаполнениеПодтверждение(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОбновитьДанныеФормы(Истина);
		НастроитьВидФормыПослеЧтенияДанных();
		ОбновитьЗаголовокТовары();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРазвернутьВсе(Команда)
	
	Для Каждого ЭлементДерева Из ТоварыДерево.ПолучитьЭлементы() Цикл
		Элементы.ТоварыДерево.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвернутьВсе(Команда)
	
	Для Каждого ЭлементДерева Из ТоварыДерево.ПолучитьЭлементы() Цикл
		Элементы.ТоварыДерево.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРасхождения(Команда)
	
	Элементы.ТоварыДеревоПоказатьРасхождения.Пометка = не Элементы.ТоварыДеревоПоказатьРасхождения.Пометка;
	
	Если Элементы.ТоварыДеревоПоказатьРасхождения.Пометка Тогда
		
		МассивДанныхСтрокСРасхождениями = Новый Массив();
		МассивИдентификаторовВсехСтрок = ПолучитьМассивИдентификаторовВсехКонечныхСтрок(ТоварыДерево);
		Для Каждого ИдентификаторСтрокиДерева Из МассивИдентификаторовВсехСтрок Цикл
			ДанныеСтроки = ТоварыДерево.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
			Если не ДанныеСтроки.КоличествоРаспоряжение = ДанныеСтроки.КоличествоФакт Тогда
				СтруктураДанныхСтроки = Новый Структура("Номенклатура, Характеристика, Упаковка");
				ЗаполнитьЗначенияСвойств(СтруктураДанныхСтроки, ДанныеСтроки);
				МассивДанныхСтрокСРасхождениями.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		
		ТоварыДерево.ПолучитьЭлементы().Очистить();
		ЗаполнитьДеревоТоваровПоТабличнымЧастям(МассивДанныхСтрокСРасхождениями);
		
	Иначе
		
		ЗаполнитьДеревоТоваровПоТабличнымЧастям();
		
	КонецЕсли;
	
	ДеревоРазвернутьВсе(Неопределено);
	
КонецПроцедуры

#Область КомандыПечати

&НаКлиенте
Процедура ПечатьОписьНоменклатурыПоВсемСкладам(Команда)
	
	СтруктураПечати = Новый Структура();
	
	Для Каждого СтрокаСклада Из СкладыРаспределения Цикл
		
		СтруктураПоиска = Новый Структура("Склад", СтрокаСклада.Склад);
		Товары = ПоместитьТоварыВХранилищеДляПечати(Объект.ТоварыПеремещение, СтруктураПоиска);
		Серии = ПоместитьСерииВХранилищеДляПечати(Объект.СерииФакт, Новый Структура("Номенклатура", 1));
		Если Товары = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(Объект.ДокументРаспоряжение);
		
		Основание = "Распределение товаров по документу " + Объект.ДокументРаспоряжение;
		
		ИмяДокумента = "Обработка.ПомощникПриемкиОтгрузки";
		
		СтруктураПечати = Новый Структура();
		СтруктураПечати.Вставить("Представление", "Опись номенклатуры");
		СтруктураПечати.Вставить("ПечатьПоДокументу", Ложь);
		СтруктураПечати.Вставить("Основание", Основание);
		СтруктураПечати.Вставить("Склад", СтрокаСклада.Склад);
		СтруктураПечати.Вставить("Магазин", Объект.Магазин);
		СтруктураПечати.Вставить("Распоряжение", Объект.ДокументРаспоряжение);
		СтруктураПечати.Вставить("Товары", Товары);
		СтруктураПечати.Вставить("Серии", Серии);
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
				ИмяДокумента,
				"ОписьНоменклатуры",
				МассивДокументов,
				ЭтаФорма,
				СтруктураПечати);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьОписьНоменклатурыПоРаспоряжению(Команда)
	
	СтруктураПечати = Новый Структура();
	
	Товары = ПоместитьТоварыВХранилищеДляПечати(Объект.ТоварыРаспоряжение,, ПараметрыРаспределения.ПриемкаВслепую);
	Серии = ПоместитьСерииВХранилищеДляПечати(Объект.СерииРаспоряжение,, ПараметрыРаспределения.ПриемкаВслепую);
	Если Товары = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Нет данных для печати'");
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.ДокументРаспоряжение);
	
	Основание = "Приемка товаров по документу " + Объект.ДокументРаспоряжение;
	ИмяДокумента = "Обработка.ПомощникПриемкиОтгрузки";
	
	СтруктураПечати = Новый Структура();
	СтруктураПечати.Вставить("Представление", "Опись номенклатуры");
	СтруктураПечати.Вставить("ПечатьПоДокументу", Ложь);
	СтруктураПечати.Вставить("Основание", Основание);
	СтруктураПечати.Вставить("Склад", Объект.ОсновнойСклад);
	СтруктураПечати.Вставить("Магазин", Объект.Магазин);
	СтруктураПечати.Вставить("Распоряжение", Объект.ДокументРаспоряжение);
	СтруктураПечати.Вставить("Товары", Товары);
	СтруктураПечати.Вставить("Серии", Серии);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			ИмяДокумента,
			"ОписьНоменклатуры",
			МассивДокументов,
			ЭтаФорма,
			СтруктураПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьОписьНоменклатурыПоФакту(Команда)
	
	СтруктураПечати = Новый Структура();
	
	Товары = ПоместитьТоварыВХранилищеДляПечати(Объект.ТоварыФакт);
	Серии = ПоместитьСерииВХранилищеДляПечати(Объект.СерииФакт);
	Если Товары = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Нет данных для печати'");
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.ДокументРаспоряжение);
	
	Основание = "Приемка товаров по документу " + Объект.ДокументРаспоряжение;
	ИмяДокумента = "Обработка.ПомощникПриемкиОтгрузки";
	
	СтруктураПечати = Новый Структура();
	СтруктураПечати.Вставить("Представление", "Опись номенклатуры");
	СтруктураПечати.Вставить("ПечатьПоДокументу", Ложь);
	СтруктураПечати.Вставить("Основание", Основание);
	СтруктураПечати.Вставить("Склад", Объект.ОсновнойСклад);
	СтруктураПечати.Вставить("Магазин", Объект.Магазин);
	СтруктураПечати.Вставить("Распоряжение", Объект.ДокументРаспоряжение);
	СтруктураПечати.Вставить("Товары", Товары);
	СтруктураПечати.Вставить("Серии", Серии);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			ИмяДокумента,
			"ОписьНоменклатуры",
			МассивДокументов,
			ЭтаФорма,
			СтруктураПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПечатьОписьНоменклатурыПоПеремещению(Команда)
	
	СтруктураПечати = Новый Структура();
	
	СтруктураПоискаСклада = Новый Структура();
	СтруктураПоискаСклада.Вставить("ИмяЭлементаПечатьОписьНоменклатуры", Команда.Имя);
	СтрокиСклада = СкладыРаспределения.НайтиСтроки(СтруктураПоискаСклада);
	Если СтрокиСклада.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Склад", СтрокиСклада[0].Склад);
	Товары = ПоместитьТоварыВХранилищеДляПечати(Объект.ТоварыПеремещение, СтруктураПоиска);
	Серии = ПоместитьСерииВХранилищеДляПечати(Объект.СерииФакт, Новый Структура("Номенклатура", 1));
	Если Товары = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Нет данных для печати'");
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.ДокументРаспоряжение);
	
	Основание = "Распределение товаров по документу " + Объект.ДокументРаспоряжение;
	
	ИмяДокумента = "Обработка.ПомощникПриемкиОтгрузки";
	
	СтруктураПечати = Новый Структура();
	СтруктураПечати.Вставить("Представление", "Опись номенклатуры");
	СтруктураПечати.Вставить("ПечатьПоДокументу", Ложь);
	СтруктураПечати.Вставить("Основание", Основание);
	СтруктураПечати.Вставить("Склад", СтрокиСклада[0].Склад);
	СтруктураПечати.Вставить("Магазин", Объект.Магазин);
	СтруктураПечати.Вставить("Распоряжение", Объект.ДокументРаспоряжение);
	СтруктураПечати.Вставить("Товары", Товары);
	СтруктураПечати.Вставить("Серии", Серии);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			ИмяДокумента,
			"ОписьНоменклатуры",
			МассивДокументов,
			ЭтаФорма,
			СтруктураПечати);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоместитьТоварыВХранилищеДляПечати(Знач ТабличнаяЧасть, Отбор = Неопределено, БезКоличества = Ложь)
	
	Если Отбор = Неопределено Тогда
		ТаблицаРезультат = ТабличнаяЧасть.Выгрузить();
	Иначе
		ТаблицаРезультат = ТабличнаяЧасть.Выгрузить(Отбор);
	КонецЕсли;
	
	МассивНулевыхСтрок = Новый Массив();
	Для Каждого Строка Из ТаблицаРезультат Цикл
		Если Строка.Количество = 0 Тогда
			МассивНулевыхСтрок.Добавить(Строка);
		конецЕсли;
	КонецЦикла;
	
	Для Каждого НулеваяСтрока Из МассивНулевыхСтрок Цикл
		ТаблицаРезультат.Удалить(НулеваяСтрока);
	КонецЦикла;
	
	Если БезКоличества Тогда
		Для Каждого СтрокаТовары Из ТаблицаРезультат Цикл
			СтрокаТовары.Количество = 0;
			СтрокаТовары.КоличествоУпаковок = 0;
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицаРезультат.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый ХранилищеЗначения(ТаблицаРезультат);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоместитьСерииВХранилищеДляПечати(Знач ТабличнаяЧасть, Отбор = Неопределено, БезКоличества = Ложь)
	
	Если Отбор = Неопределено Тогда
		ТаблицаРезультат = ТабличнаяЧасть.Выгрузить();
	Иначе
		ТаблицаРезультат = ТабличнаяЧасть.Выгрузить(Отбор);
	КонецЕсли;
	
	МассивНулевыхСтрок = Новый Массив();
	Для Каждого Строка Из ТаблицаРезультат Цикл
		Если Строка.Количество = 0 Тогда
			МассивНулевыхСтрок.Добавить(Строка);
		конецЕсли;
	КонецЦикла;
	
	Для Каждого НулеваяСтрока Из МассивНулевыхСтрок Цикл
		ТаблицаРезультат.Удалить(НулеваяСтрока);
	КонецЦикла;
	
	Если БезКоличества Тогда
		Для Каждого СтрокаТовары Из ТаблицаРезультат Цикл
			СтрокаТовары.Количество = 0;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Новый ХранилищеЗначения(ТаблицаРезультат);
	
КонецФункции

&НаКлиенте
Процедура ОстаткиТоваров(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Отбор", Новый Структура());
	ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыОтчета.Вставить("КлючВарианта", "ОстаткиНаСкладах");
	ПараметрыОтчета.Вставить("КлючПользовательскихНастроек", Неопределено);
	
	МассивНоменклатуры = Новый Массив();
	Для Каждого СтрокаТовары Из Объект[ПараметрыРаспределения.БазоваяТаблицаДляРаспределения] Цикл
		Если МассивНоменклатуры.Найти(СтрокаТовары.Номенклатура) = Неопределено Тогда
			МассивНоменклатуры.Добавить(СтрокаТовары.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОтчета.Отбор.Вставить("Номенклатура", МассивНоменклатуры);
	ПараметрыОтчета.Отбор.Вставить("Магазин", Объект.Магазин);
	
	ОткрытьФорму("Отчет.ВедомостьПоТоварамНаСкладах.Форма", ПараметрыОтчета, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыРаспределения

&НаКлиенте
Процедура ЗаполнитьФактПоРаспоряжению(Команда)
	
	МассивИдентификаторовСтрокДляОбработки = ПолучитьМассивИдентификаторовКонечныхСтрок(ТоварыДерево, , Элементы.ТоварыДерево.ВыделенныеСтроки);
	
	СтруктураПоиска = СтруктураПоиска();
	
	Для Каждого Строка Из МассивИдентификаторовСтрокДляОбработки Цикл
		
		СтрокаТовары = ТоварыДерево.НайтиПоИдентификатору(Строка);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска.БезСклада, СтрокаТовары);
		
		СтрокиТоварыРаспоряжение = Объект.ТоварыРаспоряжение.НайтиСтроки(СтруктураПоиска.БезСклада);
		СтрокиТоварыФакт = Объект.ТоварыФакт.НайтиСтроки(СтруктураПоиска.БезСклада);
		
		Если не СтрокиТоварыРаспоряжение.Количество() = 0 и не СтрокиТоварыФакт.Количество() = 0 Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокиТоварыФакт[0], СтрокиТоварыРаспоряжение[0], "Количество, КоличествоУпаковок");
			Если не СтрокиТоварыРаспоряжение[0].СтатусУказанияСерий = 0 Тогда
				СтрокиТоварыФакт[0].СтатусУказанияСерий = СтрокиТоварыРаспоряжение[0].СтатусУказанияСерий;
				СтрокиТоварыФакт[0].СтатусыСерийИПодарочныхСертификатов = СтрокиТоварыРаспоряжение[0].СтатусыСерийИПодарочныхСертификатов;
			КонецЕсли;
			
			СтруктураПоискаСерийныеНомера = Новый Структура("КлючСвязиСерийныхНомеров");
			ЗаполнитьЗначенияСвойств(СтруктураПоискаСерийныеНомера, СтрокиТоварыРаспоряжение[0], "КлючСвязиСерийныхНомеров");
			СерийныеНомераТекущейСтроки = Объект.СерийныеНомераРаспоряжение.НайтиСтроки(СтруктураПоискаСерийныеНомера);
			
			Для Каждого СтрокаСерийныхНомеров Из СерийныеНомераТекущейСтроки Цикл
				ЗаполнитьЗначенияСвойств(Объект.СерийныеНомераФакт.Добавить(), СтрокаСерийныхНомеров);
			КонецЦикла;
			
			СтруктураПоискаСерий = Новый Структура("Номенклатура, Характеристика");
			ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтрокиТоварыРаспоряжение[0], "Номенклатура, Характеристика");
			СерииТекущейСтроки = Объект.СерииРаспоряжение.НайтиСтроки(СтруктураПоискаСерий);
			
			Для Каждого СтрокаСерий Из СерииТекущейСтроки Цикл
				ЗаполнитьЗначенияСвойств(Объект.СерииФакт.Добавить(), СтрокаСерий);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураОбновления = СтруктураОбновленияТоваровНаКлиенте(МассивИдентификаторовСтрокДляОбработки,, Истина);
	ОбновитьДеревоТоваровПоТабличнымЧастям(ТоварыДерево, СтруктураОбновления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОстатки(Команда)
	
	Элементы.ТоварыДеревоПоказатьОстатки.Пометка = Не Элементы.ТоварыДеревоПоказатьОстатки.Пометка;
	
	Для Каждого СкладРаспределения Из СкладыРаспределения Цикл
		Элементы[СкладРаспределения.ИмяКолонкиОстаток].Видимость = Элементы.ТоварыДеревоПоказатьОстатки.Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РаспределитьНаОдинСклад(Команда) Экспорт
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ИмяЭлементаРаспределитьНаОдинСклад", Команда.Имя);
	СтрокиТаблицыСкладов = СкладыРаспределения.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиТаблицыСкладов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СкладРаспределения = СтрокиТаблицыСкладов[0].Склад;
	
	МассивИдентификаторовСтрокДляОбработки = ПолучитьМассивИдентификаторовКонечныхСтрок(ТоварыДерево,, Элементы.ТоварыДерево.ВыделенныеСтроки);
	
	СтруктураПоиска = СтруктураПоиска();
	
	МассивСтрокДерева = Новый Массив();
	
	Для Каждого Строка Из МассивИдентификаторовСтрокДляОбработки Цикл
		
		СтрокаТовары = ТоварыДерево.НайтиПоИдентификатору(Строка);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска.БезСклада, СтрокаТовары);
		
		СтрокиПеремещения = Объект.ТоварыПеремещение.НайтиСтроки(СтруктураПоиска.БезСклада);
		СтрокиФакт = Объект[ПараметрыРаспределения.БазоваяТаблицаДляРаспределения].НайтиСтроки(СтруктураПоиска.БезСклада);
		
		Если СтрокиПеремещения.Количество() = 0 или СтрокиФакт.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаПеремещения Из СтрокиПеремещения Цикл
			СтрокаПеремещения.Количество = 0;
			СтрокаПеремещения.КоличествоУпаковок = 0;
			Если СтрокаПеремещения.ИспользоватьСерийныеНомера Тогда
				СтрокиСН = Объект.СерийныеНомераПеремещение.НайтиСтроки(Новый Структура("КлючСвязиСерийныхНомеров", СтрокаПеремещения.КлючСвязиСерийныхНомеров));
				Для Каждого СтрокаСН Из СтрокиСН Цикл
					Объект.СерийныеНомераПеремещение.Удалить(СтрокаСН);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска.СоСкладом, СтруктураПоиска.БезСклада);
		СтруктураПоиска.СоСкладом.Склад = СкладРаспределения;
		
		СтрокиПеремещения = Объект.ТоварыПеремещение.НайтиСтроки(СтруктураПоиска.СоСкладом);
		СтрокиПеремещения[0].Количество = СтрокиФакт[0].Количество;
		СтрокиПеремещения[0].КоличествоУпаковок = СтрокиФакт[0].КоличествоУпаковок;
		
		СтрокиПеремещения[0].Склад = СкладРаспределения;
		
		Если СтрокиПеремещения[0].ИспользоватьСерийныеНомера Тогда
			
			МассивСНФакт = Новый Массив();
			СтрокиСНФакт = Объект.СерийныеНомераФакт.НайтиСтроки(Новый Структура("КлючСвязиСерийныхНомеров", СтрокиФакт[0].КлючСвязиСерийныхНомеров));
			Для Каждого СтрокаСНФакт Из СтрокиСНФакт Цикл
				МассивСНФакт.Добавить(СтрокаСНФакт.СерийныйНомер);
			КонецЦикла;
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("СтрокаТЧ", СтрокиПеремещения[0]);
			ДополнительныеПараметры.Вставить("ТЧСерийныеНомера", Объект.СерийныеНомераПеремещение);
			ДополнительныеПараметры.Вставить("КоличествоУпаковок", 0);
			ДополнительныеПараметры.Вставить("ТекущийКлючСвязи", 0);
			ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
			
			ОбработкаТабличнойЧастиТоварыКлиент.ПослеВводаНомеровПодарочныхСертификатов(МассивСНФакт, ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураОбновления = СтруктураОбновленияТоваровНаКлиенте(МассивИдентификаторовСтрокДляОбработки,,, Истина);
	ОбновитьДеревоТоваровПоТабличнымЧастям(ТоварыДерево, СтруктураОбновления);
	УстановитьВидимостьКолонокСкладов();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РаспределитьНаОдинСкладОстаток(Команда) Экспорт
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ИмяЭлементаПереместитьОстатокНаСклад", Команда.Имя);
	СтрокиТаблицыСкладов = СкладыРаспределения.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиТаблицыСкладов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СкладРаспределения = СтрокиТаблицыСкладов[0].Склад;
	
	МассивИдентификаторовСтрокДляОбработки = ПолучитьМассивИдентификаторовКонечныхСтрок(ТоварыДерево,, Элементы.ТоварыДерево.ВыделенныеСтроки);
	
	СтруктураПоиска = СтруктураПоиска();
	
	МассивСтрокДерева = Новый Массив();
	
	Для Каждого Строка Из МассивИдентификаторовСтрокДляОбработки Цикл
		
		СтрокаТовары = ТоварыДерево.НайтиПоИдентификатору(Строка);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска.БезСклада, СтрокаТовары);
		
		СтрокиПеремещения = Объект.ТоварыПеремещение.НайтиСтроки(СтруктураПоиска.БезСклада);
		СтрокиФакт = Объект[ПараметрыРаспределения.БазоваяТаблицаДляРаспределения].НайтиСтроки(СтруктураПоиска.БезСклада);
		
		Если СтрокиПеремещения.Количество() = 0 или СтрокиФакт.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоРаспределено = 0;
		КоличествоУпаковокРаспределено = 0;
		МассивСНРаспределено = Новый Массив();
		Для Каждого СтрокаПеремещения Из СтрокиПеремещения Цикл
			Если СтрокаПеремещения.Склад = Объект.ОсновнойСклад Тогда
				Продолжить;
			КонецЕсли;
			КоличествоРаспределено = КоличествоРаспределено + СтрокаПеремещения.Количество;
			КоличествоУпаковокРаспределено = КоличествоУпаковокРаспределено + СтрокаПеремещения.КоличествоУпаковок;
			Если СтрокаПеремещения.ИспользоватьСерийныеНомера Тогда
				Если СтрокаПеремещения.Склад = СкладРаспределения Тогда
					Продолжить;
				КонецЕсли;
				СтрокиСН = Объект.СерийныеНомераПеремещение.НайтиСтроки(Новый Структура("КлючСвязиСерийныхНомеров", СтрокаПеремещения.КлючСвязиСерийныхНомеров));
				Для Каждого СтрокаСН Из СтрокиСН Цикл
					МассивСНРаспределено.Добавить(СтрокаСН.СерийныйНомер);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска.СоСкладом, СтруктураПоиска.БезСклада);
		СтруктураПоиска.СоСкладом.Склад = СкладРаспределения;
		
		СтрокиПеремещения = Объект.ТоварыПеремещение.НайтиСтроки(СтруктураПоиска.СоСкладом);
		
		СтрокиПеремещения[0].Количество = СтрокиПеремещения[0].Количество + Макс(СтрокиФакт[0].Количество - КоличествоРаспределено, 0);
		СтрокиПеремещения[0].КоличествоУпаковок = СтрокиПеремещения[0].КоличествоУпаковок + Макс(СтрокиФакт[0].КоличествоУпаковок - КоличествоУпаковокРаспределено, 0);
		
		Если СтрокиПеремещения[0].ИспользоватьСерийныеНомера Тогда
			
			МассивСНПеремещение = Новый Массив();
			СтрокиСНФакт = Объект.СерийныеНомераФакт.НайтиСтроки(Новый Структура("КлючСвязиСерийныхНомеров", СтрокиФакт[0].КлючСвязиСерийныхНомеров));
			Для Каждого СтрокаСНФакт Из СтрокиСНФакт Цикл
				Если МассивСНРаспределено.Найти(СтрокаСНФакт.СерийныйНомер) = Неопределено Тогда
					МассивСНПеремещение.Добавить(СтрокаСНФакт.СерийныйНомер);
				КонецЕсли;
			КонецЦикла;
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("СтрокаТЧ", СтрокиПеремещения[0]);
			ДополнительныеПараметры.Вставить("ТЧСерийныеНомера", Объект.СерийныеНомераПеремещение);
			ДополнительныеПараметры.Вставить("КоличествоУпаковок", 0);
			ДополнительныеПараметры.Вставить("ТекущийКлючСвязи", 0);
			ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
			
			ОбработкаТабличнойЧастиТоварыКлиент.ПослеВводаНомеровПодарочныхСертификатов(МассивСНПеремещение, ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураОбновления = СтруктураОбновленияТоваровНаКлиенте(МассивИдентификаторовСтрокДляОбработки,,, Истина);
	ОбновитьДеревоТоваровПоТабличнымЧастям(ТоварыДерево, СтруктураОбновления);
	
	УстановитьВидимостьКолонокСкладов();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоОстаткам(Команда)
	
	СтруктураПоискаВарианта = Новый Структура();
	СтруктураПоискаВарианта.Вставить("ВариантРаспределенияТоваров", ПредопределенноеЗначение("Справочник.ВариантыРаспределенияТоваров.ПриОтгрузкеПоОстаткам"));
	
	СтрокиВарианта = ВариантыРаспределенияТоваров.НайтиСтроки(СтруктураПоискаВарианта);
	
	Если СтрокиВарианта.Количество() = 0 Тогда
		
		ТекстОповещения = НСтр("ru = 'Вариант распределения недоступен, необходимо обратиться к администратору'");
		ПоказатьПредупреждение(, ТекстОповещения);
		Возврат;
		
	Иначе
		
		Если СтрокиВарианта[0].ПрименятьНастройкиАвтоматически Тогда
			
			РаспределитьПоОстаткамНаСервере();
			
		Иначе
			
			ОписаниеОповещения = Новый ОписаниеОповещения("РаспределитьПоОстаткамПослеВводаНастроек", ЭтотОбъект);
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Магазин", Объект.Магазин);
			СтруктураПараметров.Вставить("ВариантРаспределенияТоваров", СтрокиВарианта[0].ВариантРаспределенияТоваров);
			СтруктураПараметров.Вставить("СохранениеНастроек", Ложь);
			СтруктураПараметров.Вставить("ЗаголовокОсновнойКнопки", "Выполнить");
            
            // &ЗамерПроизводительности
            ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                     Истина, "Справочник.ВариантыРаспределенияТоваров.Форма.ФормаНастройкиРаспределенияПоОстаткам.Открытие");

			ОткрытьФорму("Справочник.ВариантыРаспределенияТоваров.Форма.ФормаНастройкиРаспределенияПоОстаткам", СтруктураПараметров,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоОстаткамПослеВводаНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаспределитьПоОстаткамНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьПоОстаткамНаСервере(РезультатЗакрытия = Неопределено)
	
	МассивИдентификаторовСтрокДляОбработки = ПолучитьМассивИдентификаторовКонечныхСтрок(ТоварыДерево,, Элементы.ТоварыДерево.ВыделенныеСтроки);
	ТаблицаТовары = Объект[ПараметрыРаспределения.БазоваяТаблицаДляРаспределения].Выгрузить(Новый Массив(), "Номенклатура, Характеристика, Количество");
	
	ОчиститьКоличествоПеремещение(Элементы.ТоварыДерево.ВыделенныеСтроки);
	
	Если ПараметрыРаспределения.БазоваяТаблицаДляРаспределения = "ТоварыФакт" Тогда
		ИмяКолонкиПотребность = "КоличествоФакт";
	Иначе
		ИмяКолонкиПотребность = "КоличествоРаспоряжение";
	КонецЕсли;
	Для Каждого ИдентификаторСтроки Из МассивИдентификаторовСтрокДляОбработки Цикл
		СтрокаТовары = ТоварыДерево.НайтиПоИдентификатору(ИдентификаторСтроки);
		НоваяСтрокаТовары = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТовары);
		НоваяСтрокаТовары.Количество = СтрокаТовары[ИмяКолонкиПотребность];
	КонецЦикла;
	
	Если РезультатЗакрытия = Неопределено Тогда
		ТаблицаПриоритетаСкладов = Справочники.ВариантыРаспределенияТоваров.НастройкиРаспределения(Справочники.ВариантыРаспределенияТоваров.ПриОтгрузкеПоОстаткам, Объект.Магазин);
	Иначе
		ТаблицаПриоритетаСкладов = РезультатЗакрытия.НастройкиВарианта.Получить();
	КонецЕсли;
	
	Если ТаблицаПриоритетаСкладов = Неопределено Тогда
		ВызватьИсключение "Не настроено распределение товаров по остаткам. Обратитесь к Администратору";
	КонецЕсли;
	СтруктураПоискаИспользуемыхСкладов = Новый Структура("ИспользоватьДляРаспределения", Истина);
	ИспользуемыеСклады = ТаблицаПриоритетаСкладов.Скопировать(СтруктураПоискаИспользуемыхСкладов, "Склад").ВыгрузитьКолонку("Склад");
	//ТаблицаПриоритетаСкладов.Сортировать("Приоритет");
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Количество
	|ПОМЕСТИТЬ втТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаОстатки.Склад,
	|	ТаблицаОстатки.КоличествоОстаток - ТаблицаОстатки.РезервОстаток КАК Остаток
	|ИЗ
	|	втТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				Номенклатура В
	|						(ВЫБРАТЬ
	|							втТаблицаТовары.Номенклатура
	|						ИЗ
	|							втТаблицаТовары)
	|					И Склад В (&Склады)) КАК ТаблицаОстатки
	|		ПО ТаблицаТовары.Номенклатура = ТаблицаОстатки.Номенклатура
	|			И ТаблицаТовары.Характеристика = ТаблицаОстатки.Характеристика
	|ГДЕ
	|	ТаблицаОстатки.КоличествоОстаток - ТаблицаОстатки.РезервОстаток > 0";
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	Запрос.УстановитьПараметр("Склады", ИспользуемыеСклады);
	ОстаткиТоваров = Запрос.Выполнить().Выгрузить();
	
	СтруктураПоискаОстатка = Новый Структура("Номенклатура, Характеристика, Склад");
	СтруктураТЧ = Новый Структура();
	СтруктураТЧ.Вставить("СтрокиТЧ", Новый Массив());
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		КоличествоТребуется = СтрокаТовары.Количество;
		
		Для Каждого Склад Из ТаблицаПриоритетаСкладов Цикл
			
			Если Склад.Склад = Объект.ОсновнойСклад Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не Склад.ИспользоватьДляРаспределения Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоискаОстатка, СтрокаТовары);
			СтруктураПоискаОстатка.Склад = Склад.Склад;
			НайденныеСтроки = ОстаткиТоваров.НайтиСтроки(СтруктураПоискаОстатка);
			
			Если не НайденныеСтроки.Количество() = 0 Тогда
				
				СтрокиПеремещения = Объект.ТоварыПеремещение.НайтиСтроки(СтруктураПоискаОстатка);
				СтрокиПеремещения[0].Количество = Мин(КоличествоТребуется, СтрокиПеремещения[0].КоличествоОстаток);
				СтруктураТЧ.СтрокиТЧ.Добавить(СтрокиПеремещения[0]);
				
				КоличествоТребуется = КоличествоТребуется - СтрокиПеремещения[0].Количество;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("НеобходимоОбработатьВсюТЧ");
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	СтруктураОбновления = СтруктураОбновленияТоваровНаСервере(МассивИдентификаторовСтрокДляОбработки,,, Истина);
	ОбновитьДеревоТоваровПоТабличнымЧастям(ТоварыДерево, СтруктураОбновления);
	
	УстановитьВидимостьКолонокСкладов();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоПотребностям(Команда)
	
	СтруктураПоискаВарианта = Новый Структура();
	СтруктураПоискаВарианта.Вставить("ВариантРаспределенияТоваров", ПредопределенноеЗначение("Справочник.ВариантыРаспределенияТоваров.ПриПоступленииПоПотребностям"));
	
	СтрокиВарианта = ВариантыРаспределенияТоваров.НайтиСтроки(СтруктураПоискаВарианта);
	
	Если СтрокиВарианта.Количество() = 0 Тогда
		
		ТекстОповещения = НСтр("ru = 'Вариант распределения недоступен, необходимо обратиться к администратору'");
		ПоказатьПредупреждение(, ТекстОповещения);
		Возврат;
		
	Иначе
		
		Если СтрокиВарианта[0].ПрименятьНастройкиАвтоматически Тогда
			
			РаспределитьПоПотребностямНаСервере();
			
		Иначе
			
			ОписаниеОповещения = Новый ОписаниеОповещения("РаспределитьПоПотребностямПослеВводаНастроек", ЭтотОбъект);
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Магазин", Объект.Магазин);
			СтруктураПараметров.Вставить("ВариантРаспределенияТоваров", СтрокиВарианта[0].ВариантРаспределенияТоваров);
			СтруктураПараметров.Вставить("СохранениеНастроек", Ложь);
			СтруктураПараметров.Вставить("ЗаголовокОсновнойКнопки", "Выполнить");
            
            // &ЗамерПроизводительности
            ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                     Истина, "Справочник.ВариантыРаспределенияТоваров.Форма.ФормаСписка.Открытие");

			ОткрытьФорму("Справочник.ВариантыРаспределенияТоваров.Форма.ФормаНастройкиРаспределенияПоПотребностям", СтруктураПараметров,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоПотребностямПослеВводаНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаспределитьПоПотребностямНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьПоПотребностямНаСервере(РезультатЗакрытия = Неопределено)
	
	МассивИдентификаторовСтрокДляОбработки = ПолучитьМассивИдентификаторовКонечныхСтрок(ТоварыДерево,, Элементы.ТоварыДерево.ВыделенныеСтроки);
	ТаблицаТовары = Объект[ПараметрыРаспределения.БазоваяТаблицаДляРаспределения].Выгрузить(Новый Массив(), "Номенклатура, Характеристика, Упаковка, Количество, ИспользоватьСерийныеНомера, КлючСвязиСерийныхНомеров");
	
	ОчиститьКоличествоПеремещение(Элементы.ТоварыДерево.ВыделенныеСтроки);
	
	СтруктураПоиска = СтруктураПоиска();
	
	Для Каждого ИдентификаторСтроки Из МассивИдентификаторовСтрокДляОбработки Цикл
		СтрокаТовары = ТоварыДерево.НайтиПоИдентификатору(ИдентификаторСтроки);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска.БезСклада, СтрокаТовары);
		СтрокиФакт = Объект[ПараметрыРаспределения.БазоваяТаблицаДляРаспределения].НайтиСтроки(СтруктураПоиска.БезСклада);
		Если не СтрокиФакт.Количество() = 0 Тогда
			НоваяСтрокаТовары = ТаблицаТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокиФакт[0]);
		КонецЕсли;
	КонецЦикла;
	
	Если РезультатЗакрытия = Неопределено Тогда
		ТаблицаПриоритетаСкладов = Справочники.ВариантыРаспределенияТоваров.НастройкиРаспределения(Справочники.ВариантыРаспределенияТоваров.ПриПоступленииПоПотребностям, Объект.Магазин);
	Иначе
		ТаблицаПриоритетаСкладов = РезультатЗакрытия.НастройкиВарианта.Получить();
	КонецЕсли;
	
	Если ТаблицаПриоритетаСкладов = Неопределено Тогда
		ВызватьИсключение "Не настроено распределение товаров по остаткам. Обратитесь к Администратору";
	КонецЕсли;
	СтруктураПоискаИспользуемыхСкладов = Новый Структура("ИспользоватьДляРаспределения", Истина);
	ИспользуемыеСклады = ТаблицаПриоритетаСкладов.Скопировать(СтруктураПоискаИспользуемыхСкладов, "Склад").ВыгрузитьКолонку("Склад");
	
	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	ОписаниеДаты = Новый ОписаниеТипов("Дата",,, КвалификаторДаты);
	
	ТаблицаПриоритетаСкладов.Колонки.Добавить("ДатаНачалаАнализаПродаж", ОписаниеДаты);
	ТаблицаПриоритетаСкладов.Колонки.Добавить("ДатаОкончанияАнализаПродаж", ОписаниеДаты);
	
	МинимальнаяДатаНачала = Неопределено;
	МаксимальнаяДатаОкончания = Неопределено;
	Для Каждого СтрокаСклада Из ТаблицаПриоритетаСкладов Цикл
		Период = СтрокаСклада.ПериодАнализаПродаж;
		СтрокаСклада.ДатаНачалаАнализаПродаж = Период.ДатаНачала;
		СтрокаСклада.ДатаОкончанияАнализаПродаж = Период.ДатаОкончания;
		Если МинимальнаяДатаНачала = Неопределено Тогда
			МинимальнаяДатаНачала = СтрокаСклада.ДатаНачалаАнализаПродаж;
		ИначеЕсли СтрокаСклада.ДатаНачалаАнализаПродаж < МинимальнаяДатаНачала  Тогда
			МинимальнаяДатаНачала = СтрокаСклада.ДатаНачалаАнализаПродаж;
		КонецЕсли;
		Если МаксимальнаяДатаОкончания = Неопределено Тогда
			МаксимальнаяДатаОкончания = СтрокаСклада.ДатаОкончанияАнализаПродаж;
		ИначеЕсли СтрокаСклада.ДатаОкончанияАнализаПродаж > МаксимальнаяДатаОкончания Тогда
			МаксимальнаяДатаОкончания = СтрокаСклада.ДатаОкончанияАнализаПродаж;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Упаковка
	|ПОМЕСТИТЬ втТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСклады.Склад,
	|	ТаблицаСклады.Максимум,
	|	ТаблицаСклады.Минимум,
	|	ТаблицаСклады.СтраховойЗапас,
	|	ТаблицаСклады.ДатаНачалаАнализаПродаж,
	|	ТаблицаСклады.ДатаОкончанияАнализаПродаж
	|ПОМЕСТИТЬ втТаблицаСклады
	|ИЗ
	|	&ТаблицаСклады КАК ТаблицаСклады
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Упаковка,
	|	ТаблицаСклады.Склад КАК Склад,
	|	МАКСИМУМ(ТаблицаСклады.Максимум) КАК Максимум,
	|	МАКСИМУМ(ТаблицаСклады.Минимум) КАК Минимум,
	|	МАКСИМУМ(ТаблицаСклады.СтраховойЗапас) КАК СтраховойЗапас,
	|	МАКСИМУМ(РАЗНОСТЬДАТ(ТаблицаСклады.ДатаНачалаАнализаПродаж, ТаблицаСклады.ДатаОкончанияАнализаПродаж, ДЕНЬ)) КАК КоличествоДней,
	|	МАКСИМУМ(ЕСТЬNULL(ТаблицаОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТаблицаОстатки.РезервОстаток, 0)) КАК Остаток,
	|	СУММА(ЕСТЬNULL(ТаблицаПродаж.КоличествоОборот, 0)) КАК КоличествоПродано
	|ИЗ
	|	втТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаСклады КАК ТаблицаСклады
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				Номенклатура В
	|						(ВЫБРАТЬ
	|							втТаблицаТовары.Номенклатура
	|						ИЗ
	|							втТаблицаТовары)
	|					И Склад В (&Склады)) КАК ТаблицаОстатки
	|		ПО ТаблицаТовары.Номенклатура = ТаблицаОстатки.Номенклатура
	|			И ТаблицаТовары.Характеристика = ТаблицаОстатки.Характеристика
	|			И (ТаблицаСклады.Склад = ТаблицаОстатки.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(
	|				&МинимальнаяДатаНачала,
	|				&МаксимальнаяДатаОкончания,
	|				День,
	|				Склад В (&Склады)
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							втТаблицаТовары.Номенклатура
	|						ИЗ
	|							втТаблицаТовары)) КАК ТаблицаПродаж
	|		ПО ТаблицаТовары.Номенклатура = ТаблицаПродаж.Номенклатура
	|			И ТаблицаТовары.Характеристика = ТаблицаПродаж.Характеристика
	|			И (ТаблицаСклады.Склад = ТаблицаПродаж.Склад)
	|ГДЕ
	|	ТаблицаПродаж.Период МЕЖДУ ТаблицаСклады.ДатаНачалаАнализаПродаж И ТаблицаСклады.ДатаОкончанияАнализаПродаж
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Упаковка,
	|	ТаблицаСклады.Склад";
	Запрос.УстановитьПараметр("МинимальнаяДатаНачала", МинимальнаяДатаНачала);
	Запрос.УстановитьПараметр("МаксимальнаяДатаОкончания", МаксимальнаяДатаОкончания);
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	Запрос.УстановитьПараметр("ТаблицаСклады", ТаблицаПриоритетаСкладов);
	Запрос.УстановитьПараметр("Склады", ИспользуемыеСклады);
	ОстаткиПродажиТоваров = Запрос.Выполнить().Выгрузить();
	
	СтруктураТЧ = Новый Структура();
	СтруктураТЧ.Вставить("СтрокиТЧ", Новый Массив());
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		КоличествоЕсть = СтрокаТовары.Количество;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска.БезСклада, СтрокаТовары);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска.СоСкладом, СтрокаТовары);
		
		ДоступныеСН = Новый Массив();
		Если СтрокаТовары.ИспользоватьСерийныеНомера Тогда
			СтрокиСерийныеНомераФакт = Объект.СерийныеНомераФакт.НайтиСтроки(Новый Структура("КлючСвязиСерийныхНомеров", СтрокаТовары.КлючСвязиСерийныхНомеров));
			Для Каждого СтрокиСН Из СтрокиСерийныеНомераФакт Цикл
				ДоступныеСН.Добавить(СтрокиСН.СерийныйНомер);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого Склад Из ТаблицаПриоритетаСкладов Цикл
			
			Если Склад.Склад = Объект.ОсновнойСклад Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска.СоСкладом.Склад = Склад.Склад;
			СтрокиПеремещения = Объект.ТоварыПеремещение.НайтиСтроки(СтруктураПоиска.СоСкладом);
			Если СтрокиПеремещения.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокиПеремещения[0].Количество = 0;
			
			Если Не Склад.ИспользоватьДляРаспределения Тогда
				Продолжить;
			КонецЕсли;
			
			НайденныеСтроки = ОстаткиПродажиТоваров.НайтиСтроки(СтруктураПоиска.СоСкладом);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоПродаетсяВДень = НайденныеСтроки[0].КоличествоПродано / НайденныеСтроки[0].КоличествоДней;
			КоличествоДнейПродажНаТекущемОстатке = НайденныеСтроки[0].Остаток / КоличествоПродаетсяВДень;
			
			ДостигнутПорогЗаказа = КоличествоДнейПродажНаТекущемОстатке <= НайденныеСтроки[0].Минимум;
			Потребность = (НайденныеСтроки[0].Максимум + НайденныеСтроки[0].СтраховойЗапас) * КоличествоПродаетсяВДень - НайденныеСтроки[0].Остаток;
			
			Если Не ДостигнутПорогЗаказа Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиПеремещения = Объект.ТоварыПеремещение.НайтиСтроки(СтруктураПоиска.СоСкладом);
			СтрокиПеремещения[0].Количество = Мин(ОкруглитьДляРаспределения(Потребность), КоличествоЕсть);
			СтруктураТЧ.СтрокиТЧ.Добавить(СтрокиПеремещения[0]);
			
			Если СтрокаТовары.ИспользоватьСерийныеНомера Тогда
				
				МассивСНЭтойСтроки = Новый Массив();
				Для НомерСН = 0 По СтрокиПеремещения[0].Количество - 1 Цикл
					МассивСНЭтойСтроки.Добавить(ДоступныеСН[НомерСН]);
				КонецЦикла;
				
				ДополнительныеПараметры = Новый Структура();
				ДополнительныеПараметры.Вставить("СтрокаТЧ", СтрокиПеремещения[0]);
				ДополнительныеПараметры.Вставить("ТЧСерийныеНомера", Объект.СерийныеНомераПеремещение);
				ДополнительныеПараметры.Вставить("КоличествоУпаковок", 0);
				ДополнительныеПараметры.Вставить("ТекущийКлючСвязи", 0);
				ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
				
				ОбработкаТабличнойЧастиТоварыСервер.ПослеВводаНомеровПодарочныхСертификатов(МассивСНЭтойСтроки, ДополнительныеПараметры);
				
			КонецЕсли;
			
			КоличествоЕсть = КоличествоЕсть - СтрокиПеремещения[0].Количество;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("НеобходимоОбработатьВсюТЧ");
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	СтруктураОбновления = СтруктураОбновленияТоваровНаСервере(МассивИдентификаторовСтрокДляОбработки,,, Истина);
	ОбновитьДеревоТоваровПоТабличнымЧастям(ТоварыДерево, СтруктураОбновления);
	
	УстановитьВидимостьКолонокСкладов();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоПравиламРаспределения(Команда)
	
	РаспределитьПоПравиламРаспределенияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьПоПравиламРаспределенияНаСервере()
	
	МассивВыделенныхСтрок = Элементы.ТоварыДерево.ВыделенныеСтроки;
	МассивИдентификаторовСтрокДляОбработки = ПолучитьМассивИдентификаторовКонечныхСтрок(ТоварыДерево,, МассивВыделенныхСтрок);
	
	ОчиститьКоличествоПеремещение(Элементы.ТоварыДерево.ВыделенныеСтроки);
	
	МассивНоменклатуры = Новый Массив();
	Для Каждого ВыделеннаяСтрока Из МассивВыделенныхСтрок Цикл
		СтрокаДерева = ТоварыДерево.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если МассивНоменклатуры.Найти(СтрокаДерева.Номенклатура) = Неопределено Тогда
			МассивНоменклатуры.Добавить(СтрокаДерева.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ТоварнаяГруппа,
	|	ЕСТЬNULL(Распределение.Склад, Магазины.СкладПоступления) КАК Склад
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеПоступлений КАК Распределение
	|		ПО Номенклатура.ТоварнаяГруппа = Распределение.ТоварнаяГруппа
	|			И (Распределение.Магазин = &Магазин)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины КАК Магазины
	|		ПО (Магазины.Ссылка = &Магазин)
	|ГДЕ
	|	Номенклатура.Ссылка В(&МассивНоменклатуры)";
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	РаспределениеНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	СтрокиДляОбработки = ПолучитьМассивИдентификаторовКонечныхСтрок(ТоварыДерево, , МассивВыделенныхСтрок);
	СтруктураПоиска = СтруктураПоиска();
	
	СтруктураТЧ = Новый Структура();
	СтруктураТЧ.Вставить("СтрокиТЧ", Новый Массив());
	
	Для Каждого ИдентификаторВыделеннойСтроки Из СтрокиДляОбработки Цикл
		
		ВыделеннаяСтрока = ТоварыДерево.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска.БезСклада, ВыделеннаяСтрока);
		
		СтрокиФакт = Объект[ПараметрыРаспределения.БазоваяТаблицаДляРаспределения].НайтиСтроки(СтруктураПоиска.БезСклада);
		СтрокаРаспределения = РаспределениеНоменклатуры.Найти(СтрокиФакт[0].Номенклатура, "Номенклатура");
		
		Если СтрокиФакт.Количество() = 0 или СтрокаРаспределения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиПеремещение = Объект.ТоварыПеремещение.НайтиСтроки(СтруктураПоиска.БезСклада);
		
		ДоступныеСН = Новый Массив();
		Если СтрокиФакт[0].ИспользоватьСерийныеНомера Тогда
			СтрокиСерийныеНомераФакт = Объект.СерийныеНомераФакт.НайтиСтроки(Новый Структура("КлючСвязиСерийныхНомеров", СтрокиФакт[0].КлючСвязиСерийныхНомеров));
			Для Каждого СтрокиСН Из СтрокиСерийныеНомераФакт Цикл
				ДоступныеСН.Добавить(СтрокиСН.СерийныйНомер);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрокаПеремещение Из СтрокиПеремещение Цикл
			
			Если СтрокаПеремещение.Склад = СтрокаРаспределения.Склад Тогда
				СтрокаПеремещение.Количество = СтрокиФакт[0].Количество;
			Иначе
				СтрокаПеремещение.Количество = 0;
			КонецЕсли;
			
			СтруктураТЧ.СтрокиТЧ.Добавить(СтрокаПеремещение);
			
			Если СтрокаПеремещение.ИспользоватьСерийныеНомера Тогда
				
				МассивСНЭтойСтроки = Новый Массив();
				Для НомерСН = 0 По СтрокаПеремещение.Количество - 1 Цикл
					МассивСНЭтойСтроки.Добавить(ДоступныеСН[НомерСН]);
				КонецЦикла;
				Для Каждого ИспользованныйСН Из МассивСНЭтойСтроки Цикл
					ДоступныеСН.Удалить(ДоступныеСН.Найти(ИспользованныйСН));
				КонецЦикла;
				
				ДополнительныеПараметры = Новый Структура();
				ДополнительныеПараметры.Вставить("СтрокаТЧ", СтрокаПеремещение);
				ДополнительныеПараметры.Вставить("ТЧСерийныеНомера", Объект.СерийныеНомераПеремещение);
				ДополнительныеПараметры.Вставить("КоличествоУпаковок", 0);
				ДополнительныеПараметры.Вставить("ТекущийКлючСвязи", 0);
				ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
				
				ОбработкаТабличнойЧастиТоварыСервер.ПослеВводаНомеровПодарочныхСертификатов(МассивСНЭтойСтроки, ДополнительныеПараметры);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("НеобходимоОбработатьВсюТЧ");
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	СтруктураОбновления = СтруктураОбновленияТоваровНаСервере(МассивИдентификаторовСтрокДляОбработки,,, Истина);
	ОбновитьДеревоТоваровПоТабличнымЧастям(ТоварыДерево, СтруктураОбновления);
	
	УстановитьВидимостьКолонокСкладов();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РаспределитьПоПроизвольномуВарианту(Команда)
	
	СтруктураПоискаВарианта = Новый Структура();
	СтруктураПоискаВарианта.Вставить("ИмяКомандыФормы", Команда.Имя);
	СтрокиВариантов = ВариантыРаспределенияТоваров.НайтиСтроки(СтруктураПоискаВарианта);
	Если СтрокиВариантов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокиВариантов[0].ПрименятьНастройкиАвтоматически Тогда
		
		РаспределитьПоПроизвольномуВариантуНаСервере(СтрокиВариантов[0].ВариантРаспределенияТоваров);
		
	Иначе
		
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("ВариантРаспределенияТоваров", СтрокиВариантов[0].ВариантРаспределенияТоваров);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("РаспределитьПоПроизвольномуВариантуПослеВводаНастроек", ЭтотОбъект, ПараметрыОповещения);
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Магазин", Объект.Магазин);
		СтруктураПараметров.Вставить("ВариантРаспределенияТоваров", СтрокиВариантов[0].ВариантРаспределенияТоваров);
		СтруктураПараметров.Вставить("СохранениеНастроек", Ложь);
		СтруктураПараметров.Вставить("ЗаголовокОсновнойКнопки", "Выполнить");
		
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(СтрокиВариантов[0].ВнешняяОбработка);
		ИмяФормыНастроек = "ВнешняяОбработка." + ИмяОбработки + ".Форма.Настройки";
		ОткрытьФорму(ИмяФормыНастроек, СтруктураПараметров,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоПроизвольномуВариантуПослеВводаНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаспределитьПоПроизвольномуВариантуНаСервере(ДополнительныеПараметры.ВариантРаспределенияТоваров, Результат);
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьПоПроизвольномуВариантуНаСервере(ВариантРаспределения, РезультатЗакрытия = Неопределено)
	
	МассивИдентификаторовСтрокДляОбработки = ПолучитьМассивИдентификаторовКонечныхСтрок(ТоварыДерево,, Элементы.ТоварыДерево.ВыделенныеСтроки);
	
	ОчиститьКоличествоПеремещение(МассивИдентификаторовСтрокДляОбработки);
	
	Если РезультатЗакрытия = Неопределено Тогда
		НастройкиВарианта = Неопределено;
	Иначе
		НастройкиВарианта = РезультатЗакрытия.НастройкиВарианта;
	КонецЕсли;
	
	МассивВыделенныхИдентивикаторовТоварыПоФакту = Новый Массив();
	Для Каждого ИдентификаторВыделенной Из МассивИдентификаторовСтрокДляОбработки Цикл
		
		ВыделеннаяСтрока = ТоварыДерево.НайтиПоИдентификатору(ИдентификаторВыделенной);
		
		СтруктураПоиска = СтруктураПоиска();
		ЗаполнитьЗначенияСвойств(СтруктураПоиска.БезСклада, ВыделеннаяСтрока);
		
		НайденныеСтроки = Объект.ТоварыФакт.НайтиСтроки(СтруктураПоиска.БезСклада);
		Если не НайденныеСтроки.Количество() = 0 Тогда
			МассивВыделенныхИдентивикаторовТоварыПоФакту.Добавить(НайденныеСтроки[0].ПолучитьИдентификатор());
		КонецЕсли;
		
	КонецЦикла;
	
	Справочники.ВариантыРаспределенияТоваров.ВыполнитьРаспределениеТоваров(Объект.Магазин, ВариантРаспределения, Объект[ПараметрыРаспределения.БазоваяТаблицаДляРаспределения], Объект.СерийныеНомераФакт, Объект.ТоварыПеремещение, Объект.СерийныеНомераПеремещение, ЭтаФорма, НастройкиВарианта, МассивВыделенныхИдентивикаторовТоварыПоФакту);
	
	СтруктураОбновления = СтруктураОбновленияТоваровНаСервере(,,, Истина);
	ОбновитьДеревоТоваровПоТабличнымЧастям(ТоварыДерево, СтруктураОбновления);
	
	УстановитьВидимостьКолонокСкладов();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьКоличествоПеремещение(МассивИдентификаторовСтрокДерева)
	
	МассивИдентификаторовСтрокДляОбработки = ПолучитьМассивИдентификаторовКонечныхСтрок(ТоварыДерево,, МассивИдентификаторовСтрокДерева);
	
	СтруктураПоиска = СтруктураПоиска();
	
	Для Каждого ВыделеннаяСтрока Из МассивИдентификаторовСтрокДляОбработки Цикл
		
		СтрокаДерева = ТоварыДерево.НайтиПоИдентификатору(ВыделеннаяСтрока);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска.БезСклада, СтрокаДерева);
		
		СтрокиПеремещения = Объект.ТоварыПеремещение.НайтиСтроки(СтруктураПоиска.БезСклада);
		Для Каждого СтрокаПеремещения Из СтрокиПеремещения Цикл
			СтрокаПеремещения.Количество = 0;
			СтрокаПеремещения.КоличествоУпаковок = 0;
			Если СтрокаПеремещения.ИспользоватьСерийныеНомера Тогда
				СтрокиСН = Объект.СерийныеНомераПеремещение.НайтиСтроки(Новый Структура("КлючСвязиСерийныхНомеров", СтрокаПеремещения.КлючСвязиСерийныхНомеров));
				Для Каждого СтрокаСН Из СтрокиСН Цикл
					Объект.СерийныеНомераПеремещение.Удалить(СтрокаСН);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОсновныеСлужебныеПроцедуры

&НаСервере
Процедура ИнициализироватьПараметрыРаспределения()
	
	ПараметрыРаспределения = Новый Структура();
	
	ПараметрыРаспределения.Вставить("Операция");
	ПараметрыРаспределения.Вставить("ОрдернаяСхема");
	ПараметрыРаспределения.Вставить("ОдинСклад");
	ПараметрыРаспределения.Вставить("ОформлениеРасхожденийПриПриемке");
	ПараметрыРаспределения.Вставить("ОформлениеРасхожденийПриПриемкеВыполнено");
	ПараметрыРаспределения.Вставить("СборТоваровДляОтгрузки");
	ПараметрыРаспределения.Вставить("ПриемкаВслепую");
	ПараметрыРаспределения.Вставить("ОтображатьВВидеДерева");
	ПараметрыРаспределения.Вставить("БазоваяТаблицаДляРаспределения");
	ПараметрыРаспределения.Вставить("ЕстьПодчиненныеЭлементыВДереве");
	ПараметрыРаспределения.Вставить("ПоступлениеПоТТНЕГАИС");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыРаспределения(Параметры, Отказ)
	
	Если Параметры.Свойство("Распоряжение") Тогда
		Объект.ДокументРаспоряжение = Параметры.Распоряжение;
	Иначе
		ТекстОшибки = НСтр("ru = 'Обработка предназначена для открытия в контексте документа'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
	КонецЕсли;
	
	Если не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументРаспоряжение, "Проведен") Тогда
		ТекстОшибки = НСтр("ru = 'Перед выполнением операции необходимо провести документ'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		Если Параметры.Свойство("Операция") Тогда
			ПараметрыРаспределения.Операция = Параметры.Операция;
			Если ПараметрыРаспределения.Операция = "Отгрузка" Тогда
				РеквизитыРаспоряжения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДокументРаспоряжение, "МагазинОтправитель, СкладОтправитель");
				Объект.Магазин = РеквизитыРаспоряжения.МагазинОтправитель;
				Объект.ОсновнойСклад = РеквизитыРаспоряжения.СкладОтправитель;
				РеквизитОпределенияОрдернойСхемы = "ИспользоватьОрдернуюСхемуПриПеремещении";
			Иначе // Приемка
				РеквизитыРаспоряжения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДокументРаспоряжение, "МагазинПолучатель, СкладПолучатель");
				Объект.Магазин = РеквизитыРаспоряжения.МагазинПолучатель;
				Объект.ОсновнойСклад = РеквизитыРаспоряжения.СкладПолучатель;
				РеквизитОпределенияОрдернойСхемы = "ИспользоватьОрдернуюСхемуПриПеремещении";
			КонецЕсли;
		Иначе
			ТекстОшибки = НСтр("ru = 'Невозможно определить тип операции'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		
		ПараметрыРаспределения.Операция = "Отгрузка";
		Объект.Магазин = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументРаспоряжение, "МагазинОтправитель");
		Объект.ОсновнойСклад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "СкладПоступления");
		РеквизитОпределенияОрдернойСхемы = "ИспользоватьОрдернуюСхемуПриОтгрузке";
		
	ИначеЕсли ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказПокупателя") или
		ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.РеализацияТоваров") или
		ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ПараметрыРаспределения.Операция = "Отгрузка";
		РеквизитыРаспоряжения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДокументРаспоряжение, "Магазин, Склад");
		Объект.Магазин = РеквизитыРаспоряжения.Магазин;
		Объект.ОсновнойСклад = РеквизитыРаспоряжения.Склад;
		РеквизитОпределенияОрдернойСхемы = "ИспользоватьОрдернуюСхемуПриОтгрузке";
		
	ИначеЕсли ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказПоставщику") или
		ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ПоступлениеТоваров") или
		ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ПараметрыРаспределения.Операция = "Приемка";
		РеквизитыРаспоряжения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДокументРаспоряжение, "Магазин, Склад");
		Объект.Магазин = РеквизитыРаспоряжения.Магазин;
		Объект.ОсновнойСклад = РеквизитыРаспоряжения.Склад;
		РеквизитОпределенияОрдернойСхемы = "ИспользоватьОрдернуюСхемуПриПоступлении";
		
	Иначе
		ТекстОшибки = НСтр("ru = 'Тип документа не поддерживается'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если РеквизитОпределенияОрдернойСхемы = Неопределено Тогда
		ПараметрыРаспределения.ОрдернаяСхема = Ложь;
	Иначе
		ПараметрыРаспределения.ОрдернаяСхема = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, РеквизитОпределенияОрдернойСхемы);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(1) КАК КоличествоСкладов
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ПометкаУдаления
	|	И Склады.Магазин = &Магазин";
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	ПараметрыРаспределения.ОдинСклад = не Запрос.Выполнить().Выгрузить()[0].КоличествоСкладов > 1;
	
	ПараметрыРаспределения.ОформлениеРасхожденийПриПриемке = 
		ПараметрыРаспределения.Операция = "Приемка"
			и (ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ПоступлениеТоваров")
				или (ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров")
						и не ПараметрыРаспределения.ОрдернаяСхема));
	
	ПараметрыРаспределения.ОформлениеРасхожденийПриПриемкеВыполнено = 
		ПараметрыРаспределения.ОформлениеРасхожденийПриПриемке
		и ( (ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ПоступлениеТоваров")
				и ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументРаспоряжение, "ЕстьРасхождения"))
			или (ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров")
					и ЗначениеЗаполнено(Документы.АктОРасхожденияхПриПриемкеТоваров.АктРасхожденийПоПеремещению(Объект.ДокументРаспоряжение))) );
		
	ПараметрыРаспределения.СборТоваровДляОтгрузки = 
		ПараметрыРаспределения.Операция = "Отгрузка"
			и (ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение")
				или ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказПокупателя"));
	
	ПараметрыРаспределения.ПриемкаВслепую = не УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ДоступностьКолонкиКПоступлению, Ложь);
	ПриемкаВслепую = ПараметрыРаспределения.ПриемкаВслепую;
	
	Если (ПараметрыРаспределения.ОрдернаяСхема или ПараметрыРаспределения.ОформлениеРасхожденийПриПриемке) и не ПараметрыРаспределения.СборТоваровДляОтгрузки Тогда
		ПараметрыРаспределения.БазоваяТаблицаДляРаспределения = "ТоварыФакт";
	Иначе
		ПараметрыРаспределения.БазоваяТаблицаДляРаспределения = "ТоварыРаспоряжение";
	КонецЕсли;
	
	ПараметрыРаспределения.ОтображатьВВидеДерева = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидФормы()
	
	// заголовок формы и заголовки основных элементов
	Если ПараметрыРаспределения.Операция = "Отгрузка" Тогда
		Если ПараметрыРаспределения.СборТоваровДляОтгрузки Тогда
			Заголовок = НСтр("ru = 'Сбор товаров: %1'");
			Элементы.ФормаВыполнитьРаспределение.Заголовок = НСтр("ru = 'Собрать товары'");
			Элементы.ДокументРаспоряжение.Заголовок = НСтр("ru = 'Заказ'");
			Элементы.ФормаОбновитьЗаполнение.Заголовок = НСтр("ru = 'Перезаполнить по заказу'");
		ИначеЕсли ПараметрыРаспределения.ОрдернаяСхема Тогда
			Если ПараметрыРаспределения.ОдинСклад Тогда
				Заголовок = НСтр("ru = 'Отгрузка товаров: %1'");
				Элементы.ФормаВыполнитьРаспределение.Заголовок = НСтр("ru = 'Отгрузить товары'");
				Элементы.ДокументРаспоряжение.Заголовок = НСтр("ru = 'Распоряжение'");
				Элементы.ФормаОбновитьЗаполнение.Заголовок = НСтр("ru = 'Перезаполнить по распоряжению'");
			Иначе
				Заголовок = НСтр("ru = 'Отгрузка товаров: %1'");
				Элементы.ФормаВыполнитьРаспределение.Заголовок = НСтр("ru = 'Собрать и отгрузить товары'");
				Элементы.ДокументРаспоряжение.Заголовок = НСтр("ru = 'Распоряжение'");
				Элементы.ФормаОбновитьЗаполнение.Заголовок = НСтр("ru = 'Перезаполнить по распоряжению'");
			КонецЕсли;
		Иначе
			Если ПараметрыРаспределения.ОдинСклад Тогда
				// не открывать
			Иначе
				Заголовок = НСтр("ru = 'Сбор товаров: %1'");
				Элементы.ФормаВыполнитьРаспределение.Заголовок = НСтр("ru = 'Собрать товары'");
				Элементы.ДокументРаспоряжение.Заголовок = НСтр("ru = 'Документ отгрузки'");
				Элементы.ФормаОбновитьЗаполнение.Заголовок = НСтр("ru = 'Перезаполнить по документу отгрузки'");
			КонецЕсли;
		КонецЕсли;
		Элементы.ГруппаРаспределение.Заголовок = НСтр("ru = 'Списать'");
		Элементы.ГруппаРаспределение.Картинка = БиблиотекаКартинок.СобратьСоСкладов;
	Иначе // Приемка
		Если ПараметрыРаспределения.ОрдернаяСхема Тогда
			Если ПараметрыРаспределения.ОдинСклад Тогда
				Заголовок = НСтр("ru = 'Приемка товаров: %1'");
				Элементы.ФормаВыполнитьРаспределение.Заголовок = НСтр("ru = 'Принять товары'");
				Элементы.ДокументРаспоряжение.Заголовок = НСтр("ru = 'Распоряжение'");
				Элементы.ФормаОбновитьЗаполнение.Заголовок = НСтр("ru = 'Перезаполнить по распоряжению'");
			Иначе
				Заголовок = НСтр("ru = 'Приемка товаров: %1'");
				Элементы.ФормаВыполнитьРаспределение.Заголовок = НСтр("ru = 'Принять товары'");
				Элементы.ДокументРаспоряжение.Заголовок = НСтр("ru = 'Распоряжение'");
				Элементы.ФормаОбновитьЗаполнение.Заголовок = НСтр("ru = 'Перезаполнить по распоряжению'");
			КонецЕсли;
		Иначе
			Если ПараметрыРаспределения.ОдинСклад Тогда
				Заголовок = НСтр("ru = 'Приемка товаров: %1'");
				Элементы.ФормаВыполнитьРаспределение.Заголовок = "";
				Элементы.ДокументРаспоряжение.Заголовок = НСтр("ru = 'Документ поступления'");
				Элементы.ФормаОбновитьЗаполнение.Заголовок = НСтр("ru = 'Перезаполнить по документу поступления'");
			Иначе
				Заголовок = НСтр("ru = 'Распределение товаров: %1'");
				Элементы.ФормаВыполнитьРаспределение.Заголовок = НСтр("ru = 'Распределить товары'");
				Элементы.ДокументРаспоряжение.Заголовок = НСтр("ru = 'Документ поступления'");
				Элементы.ФормаОбновитьЗаполнение.Заголовок = НСтр("ru = 'Перезаполнить по документу поступления'");
			КонецЕсли;
		КонецЕсли;
		Элементы.ГруппаРаспределение.Заголовок = НСтр("ru = 'Разместить'");
		Элементы.ГруппаРаспределение.Картинка = БиблиотекаКартинок.РаспределитьПоСкладам;
	КонецЕсли;
	ПредставлениеРаспоряжения = Строка(Объект.ДокументРаспоряжение);
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, ПредставлениеРаспоряжения);
	
	// доступность приемки и распределения товаров
	Если ПараметрыРаспределения.ОрдернаяСхема Тогда
		Если ПараметрыРаспределения.Операция = "Отгрузка" Тогда
			Если ПараметрыРаспределения.ОдинСклад Тогда
				ДоступностьРаботы = Пользователи.РолиДоступны("ДобавлениеИзменениеРасходныхОрдеровНаТовары");
			Иначе
				ДоступностьРаботы = Пользователи.РолиДоступны("ДобавлениеИзменениеРасходныхОрдеровНаТовары")
									и Пользователи.РолиДоступны("ДобавлениеИзменениеОрдеровНаПеремещениеТоваров");
			КонецЕсли;
		Иначе // приемка
			Если ПараметрыРаспределения.ОдинСклад Тогда
				ДоступностьРаботы = Пользователи.РолиДоступны("ДобавлениеИзменениеПриходныхОрдеровНаТовары");
			Иначе
				ДоступностьРаботы = Пользователи.РолиДоступны("ДобавлениеИзменениеПриходныхОрдеровНаТовары")
									и Пользователи.РолиДоступны("ДобавлениеИзменениеОрдеровНаПеремещениеТоваров");
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДоступностьРаботы = Пользователи.РолиДоступны("ДобавлениеИзменениеОрдеровНаПеремещениеТоваров");
	КонецЕсли;
	
	Если Не ДоступностьРаботы Тогда
		Элементы.ФормаВыполнитьРаспределение.Доступность = Ложь;
		Элементы.ФормаОформитьРасхождения.Доступность = Ложь;
		Элементы.ФормаОбновитьЗаполнение.Доступность = Ложь;
		Элементы.ТоварыДеревоКоманднаяПанель1.Доступность = Ложь;
		Элементы.ТоварыДерево.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// основные кнопки
	Элементы.ФормаВыполнитьРаспределение.Видимость = не ПараметрыРаспределения.ОдинСклад или ПараметрыРаспределения.ОрдернаяСхема;
	Элементы.ФормаОформитьРасхождения.Видимость = ПараметрыРаспределения.ОформлениеРасхожденийПриПриемке;
	Элементы.ТоварыДеревоРаспределитьПоПотребностям.Видимость = ПараметрыРаспределения.Операция = "Приемка";
	Элементы.ТоварыДеревоРаспределитьПоОстаткам.Видимость = ПараметрыРаспределения.Операция = "Отгрузка";
	Элементы.ФормаНастройкиРаспределения.Видимость = Пользователи.РолиДоступны("ДобавлениеИзменениеВариантовРаспределения");
	Элементы.ВидимостьСкладов.Видимость = не ПараметрыРаспределения.ОдинСклад;
	
	// командная панель
	Элементы.ГруппаРаспределение.Видимость = не ПараметрыРаспределения.ОдинСклад;
	Элементы.ТоварыДеревоПечатьОписьНоменклатурыПоВсемСкладам.Видимость = не ПараметрыРаспределения.ОдинСклад;
	
	Если ПараметрыРаспределения.Операция = "Отгрузка" Тогда
		ЗаголовокВсе = НСтр("ru = 'Все количество с одного склада'");
		ЗаголовокОстаток = НСтр("ru = 'Оставшееся количество со склада'");
	Иначе // Приемка
		ЗаголовокВсе = НСтр("ru = 'Все количество на один склад'");
		ЗаголовокОстаток = НСтр("ru = 'Оставшееся количество на склад'");
	КонецЕсли;
	Элементы.ГруппаВсеНаОдинСклад.Заголовок = ЗаголовокВсе;
	Элементы.ГруппаОстатокНаСклад.Заголовок = ЗаголовокОстаток;
	//Элементы.ТоварыДеревоКонтекстноеМенюРаспределитьНаОдинСклад.Заголовок = ЗаголовокВсе;
	//Элементы.ТоварыДеревоКонтекстноеМенюРаспределитьНаОдинСкладОстаток.Заголовок = ЗаголовокОстаток;
	
	// товары дерево
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	Элементы.ТоварыДеревоХарактеристика.Видимость = ИспользоватьХарактеристики;
	
	// количество факт и кнопки заполнения факта
	РаботаСФактом = (ПараметрыРаспределения.ОрдернаяСхема или ПараметрыРаспределения.ОформлениеРасхожденийПриПриемке) и не ПараметрыРаспределения.СборТоваровДляОтгрузки;
	Элементы.ТоварыДеревоГруппаКоличествоУпаковокФакт.Видимость = РаботаСФактом;
	Элементы.ТоварыДеревоЗаполнитьФактПоРаспоряжению.Видимость = РаботаСФактом;
	Элементы.ТоварыДеревоГруппаПодключаемоеОборудование.Видимость = РаботаСФактом;
	Элементы.ТоварыДеревоКоличествоУпаковокОтклонение.Видимость = РаботаСФактом;
	Элементы.ТоварыДеревоПечатьОписьНоменклатурыПоФакту.Видимость = РаботаСФактом;
	Элементы.ТоварыДеревоГруппаОстатокРаспоряжение.Видимость = не РаботаСФактом;
	
	// количество по документу (слепая приемка)
	Элементы.ТоварыДеревоГруппаКоличествоУпаковокРаспоряжение.Видимость = не ПараметрыРаспределения.ПриемкаВслепую;
	Элементы.ТоварыДеревоЗаполнитьФактПоРаспоряжению.Видимость = Элементы.ТоварыДеревоЗаполнитьФактПоРаспоряжению.Видимость и не ПараметрыРаспределения.ПриемкаВслепую;
	Элементы.ТоварыДеревоКоличествоУпаковокОтклонение.Видимость = Элементы.ТоварыДеревоКоличествоУпаковокОтклонение.Видимость и не ПараметрыРаспределения.ПриемкаВслепую;
	
	// склады в таблице
	Если ПараметрыРаспределения.Операция = "Отгрузка" Тогда
		Если ПараметрыРаспределения.ОрдернаяСхема Тогда
			Элементы.ТоварыДеревоКоличествоУпаковокРаспоряжение.Заголовок = НСтр("ru = 'К отгрузке'");
		Иначе
			Если ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение") или ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				Элементы.ТоварыДеревоКоличествоУпаковокРаспоряжение.Заголовок = НСтр("ru = 'К отгрузке'");
			Иначе
				Элементы.ТоварыДеревоКоличествоУпаковокРаспоряжение.Заголовок = НСтр("ru = 'Отгружено'");
			КонецЕсли;
		КонецЕсли;
	Иначе // Приемка
		Если ПараметрыРаспределения.ОрдернаяСхема Тогда
			Элементы.ТоварыДеревоКоличествоУпаковокРаспоряжение.Заголовок = НСтр("ru = 'К поступлению'");
		Иначе
			Если ПараметрыРаспределения.ОформлениеРасхожденийПриПриемке Тогда
				Элементы.ТоварыДеревоКоличествоУпаковокРаспоряжение.Заголовок = НСтр("ru = 'По документу'");
			Иначе
				Элементы.ТоварыДеревоКоличествоУпаковокРаспоряжение.Заголовок = НСтр("ru = 'Поступило'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ТоварыДеревоКоличествоУпаковокФакт.Подсказка = НСтр("ru = 'Количество факт, отклонение'");
	
	Элементы.ТоварыДеревоПоказатьРасхождения.Видимость =
		Элементы.ТоварыДеревоГруппаКоличествоУпаковокРаспоряжение.Видимость
			и Элементы.ТоварыДеревоГруппаКоличествоУпаковокФакт.Видимость;
	
	Элементы.ТоварыДеревоГруппаКоличествоПеремещение.Видимость = не ПараметрыРаспределения.ОдинСклад;
	Если ПараметрыРаспределения.Операция = "Отгрузка" Тогда
		Элементы.ТоварыДеревоГруппаКоличествоПеремещение.Заголовок = НСтр("ru = ', из них со складов'");
	Иначе
		Элементы.ТоварыДеревоГруппаКоличествоПеремещение.Заголовок = НСтр("ru = ', из них переместить'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидФормыПослеЧтенияДанных()
	
	Если СкладыРаспределения.Количество() > 2 Тогда
		ДоступноПеремещениеОстатка = Истина;
	Иначе
		ДоступноПеремещениеОстатка = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаОстатокНаСклад.Видимость = ДоступноПеремещениеОстатка;
	
	КоличествоДокументов = ОформленныеДокументы.Количество();	
	
	Если КоличествоДокументов = 0 Тогда
		ЗаголовокСтраницыДокументы = НСтр("ru = 'Созданные документы'");
		ДоступностьСтраницыДокументы = Ложь;
	Иначе
		ЗаголовокСтраницыДокументы = НСтр("ru = 'Созданные документы (%1)'");
		ЗаголовокСтраницыДокументы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокСтраницыДокументы, КоличествоДокументов);
		ДоступностьСтраницыДокументы = Истина;
	КонецЕсли;
	Элементы.СтраницаОформленныеДокументы.Заголовок = ЗаголовокСтраницыДокументы;
	Элементы.СтраницаОформленныеДокументы.Доступность = ДоступностьСтраницыДокументы;
	
	Элементы.ТоварыДеревоГруппаРаботыСДеревом.Видимость = ПараметрыРаспределения.ЕстьПодчиненныеЭлементыВДереве;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьВариантыРаспределенияТоваров()
	
	Если ПараметрыРаспределения.ОдинСклад Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Вариант.Ссылка КАК ВариантРаспределенияТоваров,
	|	Вариант.Предопределенный КАК Предопределенный,
	|	Вариант.ВнешняяОбработка КАК ВнешняяОбработка,
	|	ЕСТЬNULL(Настройки.ПрименятьАвтоматически, ЛОЖЬ) КАК ПрименятьНастройкиАвтоматически
	|ИЗ
	|	Справочник.ВариантыРаспределенияТоваров КАК Вариант
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовРаспределенияТоваров КАК Настройки
	|		ПО Вариант.Ссылка = Настройки.ВариантРаспределенияТоваров
	|			И (Вариант.ИндивидуальныеНастройкиДляМагазинов
	|					И Настройки.Магазин = &Магазин
	|				ИЛИ НЕ Вариант.ИндивидуальныеНастройкиДляМагазинов
	|					И Настройки.Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))
	|ГДЕ
	|	НЕ Вариант.ПометкаУдаления
	|	И (Вариант.Предопределенный
	|			ИЛИ НЕ Вариант.ВнешняяОбработка = ЗНАЧЕНИЕ(Справочник.ДополнительныеОтчетыИОбработки.ПустаяСсылка))";
	
	Если ПараметрыРаспределения.Операция = "Отгрузка" Тогда
		Запрос.Текст = Запрос.Текст + " и Вариант.ИспользоватьПриОтгрузке";
	Иначе
		Запрос.Текст = Запрос.Текст + " и Вариант.ИспользоватьПриПоступлении";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НовСтр = ВариантыРаспределенияТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Результат);
		
		Если не Результат.Предопределенный Тогда
			
			НовСтр.ИмяКомандыФормы = "Распределить" + СтрЗаменить(Строка(Результат.ВариантРаспределенияТоваров.УникальныйИдентификатор()), "-", "");
			
			НоваяКоманда = Команды.Добавить(НовСтр.ИмяКомандыФормы);
			НоваяКоманда.Действие = "Подключаемый_РаспределитьПоПроизвольномуВарианту";
			НоваяКоманда.Заголовок = Строка(НовСтр.ВариантРаспределенияТоваров);
			
			ЭлементКнопкаВыполнитьРаспределение = Элементы.Добавить(НовСтр.ИмяКомандыФормы, Тип("КнопкаФормы"), Элементы.ТоварыДеревоГруппаРаспределитьДополнительно);
			ЭлементКнопкаВыполнитьРаспределение.ИмяКоманды = НовСтр.ИмяКомандыФормы;
			ЭлементКнопкаВыполнитьРаспределение.Заголовок = Строка(НовСтр.ВариантРаспределенияТоваров);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыРаспоряжениеПоДокументу()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыДокумента.Номенклатура,
	|	ТоварыДокумента.Характеристика,
	|	ТоварыДокумента.Упаковка,
	|	ТоварыДокумента.Количество,
	|	ТоварыДокумента.КоличествоУпаковок,
	|	&ТекстПоляЦена КАК Цена,
	|	&ТекстПоляИдентификаторСтроки КАК ИдентификаторСтроки,
	|	&ТекстПоляКлючСвязи КАК КлючСвязиСерийныхНомеров,
	|	&ТекстПоляСтатусСерий КАК СтатусУказанияСерий
	|ИЗ
	|	&ТаблицаТоварыДокумента КАК ТоварыДокумента
	|ГДЕ
	|	ТоварыДокумента.Ссылка = &ДокументРаспоряжение";
	Запрос.УстановитьПараметр("ДокументРаспоряжение", Объект.ДокументРаспоряжение);
	
	ОсновнаяТаблицаДокумента = Объект.ДокументРаспоряжение.Метаданные().ПолноеИмя();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаТоварыДокумента", ОсновнаяТаблицаДокумента + ".Товары");
	
	Если ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляИдентификаторСтроки", "ТоварыДокумента.ИдентификаторСтроки");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляИдентификаторСтроки", "0");
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказПокупателя")
		или ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		или ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение")
		или ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляКлючСвязи", "0");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляКлючСвязи", "ТоварыДокумента.КлючСвязиСерийныхНомеров");
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказПокупателя")
		или ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		или ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение")
		или ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляСтатусСерий", "0");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляСтатусСерий", "ТоварыДокумента.СтатусУказанияСерий");
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляЦена", "0");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляЦена", "ТоварыДокумента.Цена");
	КонецЕсли;
	
	Если не ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказПокупателя")
		и не ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		и не ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение")
		и не ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СерийныеНомераДокумента.СерийныйНомер,
		|	СерийныеНомераДокумента.КлючСвязиСерийныхНомеров
		|ИЗ
		|	&ТаблицаСерийныеНомераДокумента КАК СерийныеНомераДокумента
		|ГДЕ
		|	СерийныеНомераДокумента.Ссылка = &ДокументРаспоряжение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СерииДокумента.Номенклатура,
		|	СерииДокумента.Характеристика,
		|	СерииДокумента.Серия,
		|	СерииДокумента.Количество
		|ИЗ
		|	&ТаблицаСерииДокумента КАК СерииДокумента
		|ГДЕ
		|	СерииДокумента.Ссылка = &ДокументРаспоряжение";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаСерийныеНомераДокумента", ОсновнаяТаблицаДокумента + ".СерийныеНомера");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаСерииДокумента", ОсновнаяТаблицаДокумента + ".Серии");
		
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Объект.ТоварыРаспоряжение.Загрузить(МассивРезультатов[0].Выгрузить());
	
	Если не ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказПокупателя")
		и не ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		и не ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение")
		и не ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		Объект.СерийныеНомераРаспоряжение.Загрузить(МассивРезультатов[1].Выгрузить());
		Объект.СерииРаспоряжение.Загрузить(МассивРезультатов[2].Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыРаспоряжениеПоРегиструНакопления()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыДокумента.Номенклатура,
	|	ТоварыДокумента.Характеристика,
	|	МАКСИМУМ(ТоварыДокумента.Упаковка) КАК Упаковка,
	|	СУММА(ТоварыДокумента.Количество) КАК Количество,
	|	МАКСИМУМ(&ТекстПоляЦена) КАК Цена,
	|	МАКСИМУМ(&ТекстПоляИдентификаторСтроки) КАК ИдентификаторСтроки,
	|	МАКСИМУМ(&ТекстПоляКлючСвязи) КАК КлючСвязиСерийныхНомеров,
	|	МАКСИМУМ(&ТекстПоляСтатусСерий) КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ ТоварыДокумента
	|ИЗ
	|	&ТаблицаТоварыДокумента КАК ТоварыДокумента
	|ГДЕ
	|	ТоварыДокумента.Ссылка = &ДокументРаспоряжение
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыДокумента.Номенклатура,
	|	ТоварыДокумента.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДокумента.Номенклатура,
	|	ТоварыДокумента.Характеристика,
	|	ТоварыДокумента.Упаковка,
	|	ВЫБОР
	|		КОГДА ТоварыДокумента.Количество > ЕСТЬNULL(ОстаткиРН.КоличествоОстаток, 0)
	|			ТОГДА ОстаткиРН.КоличествоОстаток
	|		ИНАЧЕ ТоварыДокумента.Количество
	|	КОНЕЦ КАК Количество,
	|	ТоварыДокумента.Цена,
	|	ТоварыДокумента.ИдентификаторСтроки,
	|	ТоварыДокумента.КлючСвязиСерийныхНомеров,
	|	ТоварыДокумента.СтатусУказанияСерий
	|ИЗ
	|	ТоварыДокумента КАК ТоварыДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ТаблицаОстаткиРегистраНакопления(
	|				,
	|				ДокументОснование = &ДокументОснование
	|					И Склад = &ОсновнойСклад) КАК ОстаткиРН
	|		ПО ТоварыДокумента.Номенклатура = ОстаткиРН.Номенклатура
	|			И ТоварыДокумента.Характеристика = ОстаткиРН.Характеристика
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ТоварыДокумента.Количество > ЕСТЬNULL(ОстаткиРН.КоличествоОстаток, 0)
	|			ТОГДА ОстаткиРН.КоличествоОстаток
	|		ИНАЧЕ ТоварыДокумента.Количество
	|	КОНЕЦ > 0
	|";
	Если ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ЗаказПоставщику = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументРаспоряжение, "ЗаказПоставщику");
		Если ЗначениеЗаполнено(ЗаказПоставщику) Тогда
			Запрос.УстановитьПараметр("ДокументОснование", ЗаказПоставщику);
		Иначе
			Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументРаспоряжение);
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументРаспоряжение);
	КонецЕсли;
	Запрос.УстановитьПараметр("ДокументРаспоряжение", Объект.ДокументРаспоряжение);
	Запрос.УстановитьПараметр("ОсновнойСклад", Объект.ОсновнойСклад);
	
	ОсновнаяТаблицаДокумента = Объект.ДокументРаспоряжение.Метаданные().ПолноеИмя();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаТоварыДокумента", ОсновнаяТаблицаДокумента + ".Товары");
	Если ПараметрыРаспределения.Операция = "Отгрузка" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаОстаткиРегистраНакопления", "РегистрНакопления.ТоварыКОтгрузке.Остатки");
	Иначе // Приемка
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаОстаткиРегистраНакопления", "РегистрНакопления.ТоварыКПоступлению.Остатки");
	КонецЕсли;
	
	Если не ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляЦена", "ТоварыДокумента.Цена");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляЦена", "0");
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляИдентификаторСтроки", "ТоварыДокумента.ИдентификаторСтроки");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляИдентификаторСтроки", "0");
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказПокупателя")
		или ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		или ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение")
		или ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляКлючСвязи", "0");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляКлючСвязи", "ТоварыДокумента.КлючСвязиСерийныхНомеров");
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказПокупателя")
		или ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		или ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение")
		или ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляСтатусСерий", "0");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляСтатусСерий", "ТоварыДокумента.СтатусУказанияСерий");
	КонецЕсли;
	
	Если не ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказПокупателя")
		и не ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		и не ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение")
		и не ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СерийныеНомераДокумента.СерийныйНомер,
		|	СерийныеНомераДокумента.КлючСвязиСерийныхНомеров
		|ИЗ
		|	&ТаблицаСерийныеНомераДокумента КАК СерийныеНомераДокумента
		|ГДЕ
		|	СерийныеНомераДокумента.Ссылка = &ДокументРаспоряжение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СерииДокумента.Номенклатура,
		|	СерииДокумента.Характеристика,
		|	СерииДокумента.Серия,
		|	СерииДокумента.Количество
		|ИЗ
		|	&ТаблицаСерииДокумента КАК СерииДокумента
		|ГДЕ
		|	СерииДокумента.Ссылка = &ДокументРаспоряжение";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаСерийныеНомераДокумента", ОсновнаяТаблицаДокумента + ".СерийныеНомера");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаСерииДокумента", ОсновнаяТаблицаДокумента + ".Серии");
		
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Объект.ТоварыРаспоряжение.Загрузить(МассивРезультатов[1].Выгрузить());
	
	Если не ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказПокупателя")
		и не ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		и не ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение")
		и не ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		Объект.СерийныеНомераРаспоряжение.Загрузить(МассивРезультатов[2].Выгрузить());
		Объект.СерииРаспоряжение.Загрузить(МассивРезультатов[3].Выгрузить());
		
	КонецЕсли;
	
	СтруктураТЧ = Новый Структура();
	СтруктураТЧ.Вставить("СтрокиТЧ", Объект.ТоварыРаспоряжение);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("НеобходимоОбработатьВсюТЧ");
	ОбработкаТабличнойЧастиТоварыСервер.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, Неопределено);
	
	СтруктураДействий = Новый Структура();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТоварыПоФакту()
	
	Для Каждого СтрокаРаспоряжение Из Объект.ТоварыРаспоряжение Цикл
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Упаковка");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРаспоряжение);
		
		СтрокиФакт = Объект.ТоварыФакт.НайтиСтроки(СтруктураПоиска);
		Если СтрокиФакт.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(Объект.ТоварыФакт.Добавить(), СтрокаРаспоряжение, "Номенклатура, Характеристика, Упаковка, ИдентификаторСтроки, КлючСвязиСерийныхНомеров, Цена");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТоварыПеремещение()
	
	НоменклатураХарактеристика = Объект[ПараметрыРаспределения.БазоваяТаблицаДляРаспределения].Выгрузить(, "Номенклатура, Характеристика, Упаковка");
	НоменклатураХарактеристика.Свернуть("Номенклатура, Характеристика, Упаковка");
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Упаковка
	|ПОМЕСТИТЬ втТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкладыРаспределения.Склад
	|ПОМЕСТИТЬ втСкладыРаспределения
	|ИЗ
	|	&СкладыРаспределения КАК СкладыРаспределения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Упаковка,
	|	СкладыРаспределения.Склад,
	|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) - ЕСТЬNULL(Остатки.РезервОстаток, 0) КАК КоличествоОстаток
	|ИЗ
	|	втТаблицаТовары КАК ТаблицаТовары
	|		ПОЛНОЕ СОЕДИНЕНИЕ втСкладыРаспределения КАК СкладыРаспределения
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				Склад.Магазин = &Магазин
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							втТаблицаТовары.Номенклатура
	|						ИЗ
	|							втТаблицаТовары)) КАК Остатки
	|		ПО ТаблицаТовары.Номенклатура = Остатки.Номенклатура
	|			И ТаблицаТовары.Характеристика = Остатки.Характеристика
	|			И (СкладыРаспределения.Склад = Остатки.Склад)";
	Запрос.УстановитьПараметр("ТаблицаТовары", НоменклатураХарактеристика);
	Запрос.УстановитьПараметр("СкладыРаспределения", СкладыРаспределения.Выгрузить());
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	Объект.ТоварыПеремещение.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Область ФункцииРаботыСоСкладами

&НаСервере
Процедура ИнициализироватьСкладыРаспределения()
	
	НоменклаутраРаспоряжения = Объект.ДокументРаспоряжение.Товары.Выгрузить(, "Номенклатура");
	НоменклаутраРаспоряжения.Свернуть("Номенклатура");
	МассивНоменклатуры = НоменклаутраРаспоряжения.ВыгрузитьКолонку("Номенклатура");
	
	СохраненнаяВидимостьСкладов = ВосстановитьДанныеВидимостьСкладов();
	
	ПорядокСкладов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПомощникПриемкиОтгрузки", "ПорядокСкладов");
	Если ПорядокСкладов = Неопределено Тогда
		ПорядокСкладов = СкладыРаспределения.Выгрузить(, "Склад, Порядок");
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПорядокСкладов.Склад,
	|	ПорядокСкладов.Порядок
	|ПОМЕСТИТЬ втПорядокСкладов
	|ИЗ
	|	&ПорядокСкладов КАК ПорядокСкладов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладах.Склад,
	|	ТоварыНаСкладах.Номенклатура,
	|	КОЛИЧЕСТВО(1) КАК Количество
	|ПОМЕСТИТЬ втЧастотныеСкладыНоменклатуры
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|ГДЕ
	|	ТоварыНаСкладах.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТоварыНаСкладах.Регистратор ССЫЛКА Документ.ОрдерНаПеремещениеТоваров
	|	И ТоварыНаСкладах.Номенклатура В(&МассивНоменклатуры)
	|	И НЕ ТоварыНаСкладах.Регистратор.ДокументОснование.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладах.Склад,
	|	ТоварыНаСкладах.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЧастотныеСкладыНоменклатуры.Номенклатура,
	|	МАКСИМУМ(втЧастотныеСкладыНоменклатуры.Количество) КАК Количество
	|ПОМЕСТИТЬ втМаксимальныеКоличестваДляНоменклатуры
	|ИЗ
	|	втЧастотныеСкладыНоменклатуры КАК втЧастотныеСкладыНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	втЧастотныеСкладыНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СкладНоменклатура.Склад
	|ПОМЕСТИТЬ втЧастотныеСклады
	|ИЗ
	|	втЧастотныеСкладыНоменклатуры КАК СкладНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксимальныеКоличестваДляНоменклатуры КАК Номенклатура1
	|		ПО СкладНоменклатура.Номенклатура = Номенклатура1.Номенклатура
	|			И СкладНоменклатура.Количество = Номенклатура1.Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад,
	|	ВЫБОР
	|		КОГДА Склады.Ссылка = &ОсновнойСклад
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ ЧастотныеСклады.Склад ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НачальнаяВидимость
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЧастотныеСклады КАК ЧастотныеСклады
	|		ПО Склады.Ссылка = ЧастотныеСклады.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокСкладов КАК ПорядокСкладов
	|		ПО Склады.Ссылка = ПорядокСкладов.Склад
	|ГДЕ
	|	НЕ Склады.ПометкаУдаления
	|	И Склады.Магазин = &Магазин
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕСТЬNULL(ПорядокСкладов.Порядок, 99)";
	Запрос.УстановитьПараметр("ПорядокСкладов", ПорядокСкладов);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("ДатаНачала", ТекущаяДата() - 30*24*60*60);
	Запрос.УстановитьПараметр("ДатаОкончания", ТекущаяДата());
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	Запрос.УстановитьПараметр("ОсновнойСклад", Объект.ОсновнойСклад);
	
	УстановитьПривилегированныйРежим(Истина);
	ВсеСкладыМагазина = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если СохраненнаяВидимостьСкладов = Неопределено Тогда
		СтрокиВидимыхСкладов = ВсеСкладыМагазина.НайтиСтроки(Новый Структура("НачальнаяВидимость", Истина));
	Иначе
		СтрокиВидимыхСкладов = СохраненнаяВидимостьСкладов.НайтиСтроки(Новый Структура("Видимость", Истина));
	КонецЕсли;
	
	Если СтрокиВидимыхСкладов.Количество() = 0 Тогда
		НачальнаяВидимостьОсновногоСклада = Ложь;
	Иначе
		НачальнаяВидимостьОсновногоСклада = Истина;
	КонецЕсли;
	
	Порядок = 0;
	Для Каждого Склад Из ВсеСкладыМагазина Цикл
		
		Если Склад.Склад = Объект.ОсновнойСклад Тогда
			НачальнаяВидимостьТекущегоСклада = НачальнаяВидимостьОсновногоСклада;
		ИначеЕсли СохраненнаяВидимостьСкладов = Неопределено Тогда
			НачальнаяВидимостьТекущегоСклада = Склад.НачальнаяВидимость;
		Иначе
			СохраненныеСтроки = СохраненнаяВидимостьСкладов.НайтиСтроки(Новый Структура("Склад", Склад.Склад));
			Если СохраненныеСтроки.Количество() = 0 Тогда
				НачальнаяВидимостьТекущегоСклада = Ложь;
			Иначе
				НачальнаяВидимостьТекущегоСклада = СохраненныеСтроки[0].Видимость;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьСкладРаспределения(Склад.Склад, НачальнаяВидимостьТекущегоСклада, Порядок);
		Порядок = Порядок + 1;
		
	КонецЦикла;
	
	УстановитьВидимостьКолонокСкладов();
	
КонецПроцедуры

&НаСервере
Функция ДобавитьСкладРаспределения(СкладСсылка, Видимость, Порядок) Экспорт
	
	СуфиксИменЭлементов = СтрЗаменить(Строка(СкладСсылка.УникальныйИдентификатор()), "-", "");
	
	НовыйСклад = СкладыРаспределения.Добавить();
	НовыйСклад.Склад = СкладСсылка;
	НовыйСклад.ЗаголовокЭлементов = Строка(СкладСсылка);
	НовыйСклад.Видимость = Видимость;
	НовыйСклад.Порядок = Порядок;
	
	НовыйСклад.ИмяГруппы = "Группа" + СуфиксИменЭлементов;
	НовыйСклад.ИмяКолонкиКоличество = "Количество" + СуфиксИменЭлементов;
	НовыйСклад.ИмяКолонкиКоличествоУпаковок = "КоличествоУпаковок" + СуфиксИменЭлементов;
	НовыйСклад.ИмяКолонкиОстаток = "КоличествоОстаток" + СуфиксИменЭлементов;
	НовыйСклад.ИмяКолонкиСтатусыСерий = "СтатусыСерий" + СуфиксИменЭлементов;
	НовыйСклад.ИмяЭлементаПечатьОписьНоменклатуры = "ПечатьОпись" + СуфиксИменЭлементов;
	НовыйСклад.ИмяЭлементаРаспределитьНаОдинСклад = "КнопкаВсеНаСклад" + СуфиксИменЭлементов;
	НовыйСклад.ИмяЭлементаПереместитьОстатокНаСклад = "КнопкаОстатокНаСклад" + СуфиксИменЭлементов;
	
	ДобавитьРеквизитыНовогоСклада(НовыйСклад);
	
	ДобавитьЭлементыНовогоСклада(НовыйСклад);
	
	Возврат НовыйСклад.ПолучитьИдентификатор();
	
КонецФункции

&НаСервере
Функция ДобавитьРеквизитыНовогоСклада(НовыйСклад)
	
	КвалификаторЧисла = Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный);
	ОписаниеТипаКоличественногоРеквизита = Новый ОписаниеТипов("Число", КвалификаторЧисла);
	
	КвалификаторЧисла = Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой);
	ОписаниеТипаРеквизитаОстаток = Новый ОписаниеТипов("Число", КвалификаторЧисла);
	
	КвалификаторЧисла = Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный);
	ОписаниеТипаРеквизитаСтатусСерий = Новый ОписаниеТипов("Число", КвалификаторЧисла);
	
	МассивДобавляемыхРеквизитов = Новый Массив();
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НовыйСклад.ИмяКолонкиКоличество, ОписаниеТипаКоличественногоРеквизита, "ТоварыДерево", НовыйСклад.ЗаголовокЭлементов, Истина));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НовыйСклад.ИмяКолонкиКоличествоУпаковок, ОписаниеТипаКоличественногоРеквизита, "ТоварыДерево", НовыйСклад.ЗаголовокЭлементов, Истина));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НовыйСклад.ИмяКолонкиСтатусыСерий, ОписаниеТипаРеквизитаСтатусСерий, "ТоварыДерево", НовыйСклад.ЗаголовокЭлементов, Истина));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(НовыйСклад.ИмяКолонкиОстаток, ОписаниеТипаРеквизитаОстаток, "ТоварыДерево", НовыйСклад.ЗаголовокЭлементов, Истина));
	
	НоваяКомандаФормы = ЭтаФорма.Команды.Добавить(НовыйСклад.ИмяЭлементаПечатьОписьНоменклатуры);
	НоваяКомандаФормы.Действие = "Подключаемый_ПечатьОписьНоменклатурыПоПеремещению";
	НоваяКомандаФормы.Заголовок = НовыйСклад.ЗаголовокЭлементов;
	
	НоваяКомандаФормы = ЭтаФорма.Команды.Добавить(НовыйСклад.ИмяЭлементаРаспределитьНаОдинСклад);
	НоваяКомандаФормы.Действие = "Подключаемый_РаспределитьНаОдинСклад";
	НоваяКомандаФормы.Заголовок = НовыйСклад.ЗаголовокЭлементов;
	
	НоваяКомандаФормы = ЭтаФорма.Команды.Добавить(НовыйСклад.ИмяЭлементаПереместитьОстатокНаСклад);
	НоваяКомандаФормы.Действие = "Подключаемый_РаспределитьНаОдинСкладОстаток";
	НоваяКомандаФормы.Заголовок = НовыйСклад.ЗаголовокЭлементов;
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
КонецФункции

&НаСервере
Функция ДобавитьЭлементыНовогоСклада(НовыйСклад)
	
	ГруппаНовогоСклада = Элементы.Добавить(НовыйСклад.ИмяГруппы, Тип("ГруппаФормы"), Элементы.ТоварыДеревоГруппаКоличествоПеремещение);
	ГруппаНовогоСклада.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаНовогоСклада.Группировка = ГруппировкаКолонок.Вертикальная;
	ГруппаНовогоСклада.Видимость = НовыйСклад.Видимость;
	ГруппаНовогоСклада.ТолькоПросмотр = НовыйСклад.Склад = Объект.ОсновнойСклад;
	
	ГруппаКоличествоНовогоСклада = Элементы.Добавить(НовыйСклад.ИмяКолонкиКоличество + "Количество", Тип("ГруппаФормы"), ГруппаНовогоСклада);
	ГруппаКоличествоНовогоСклада.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаКоличествоНовогоСклада.Группировка = ГруппировкаКолонок.ВЯчейке;
	
	ЭлементСтатусСерий = Элементы.Добавить(НовыйСклад.ИмяКолонкиСтатусыСерий, Тип("ПолеФормы"), ГруппаКоличествоНовогоСклада);
	ЭлементСтатусСерий.Вид = ВидПоляФормы.ПолеКартинки;
	ЭлементСтатусСерий.ПутьКДанным = "ТоварыДерево." + НовыйСклад.ИмяКолонкиСтатусыСерий;
	ЭлементСтатусСерий.Ширина = 1;
	ЭлементСтатусСерий.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементСтатусСерий.КартинкаЗначений = БиблиотекаКартинок.СтатусыСерийИПодарочныхСертификатов;
	
	ЭлементКоличествоУпаковок = Элементы.Добавить(НовыйСклад.ИмяКолонкиКоличествоУпаковок, Тип("ПолеФормы"), ГруппаКоличествоНовогоСклада);
	ЭлементКоличествоУпаковок.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементКоличествоУпаковок.ПутьКДанным = "ТоварыДерево." + НовыйСклад.ИмяКолонкиКоличествоУпаковок;
	ЭлементКоличествоУпаковок.УстановитьДействие("ПриИзменении", "Подключаемый_ТоварыДеревоКоличествоУпаковокПеремещениеПриИзменении");
	ЭлементКоличествоУпаковок.Ширина = 8;
	ЭлементКоличествоУпаковок.Заголовок = НовыйСклад.ЗаголовокЭлементов;
	ЭлементКоличествоУпаковок.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	ЭлементКоличествоУпаковок.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
	Если НовыйСклад.Склад = Объект.ОсновнойСклад Тогда
		ЭлементКоличествоУпаковок.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
	КонецЕсли;
	
	ЭлементКоличествоОстаток = Элементы.Добавить(НовыйСклад.ИмяКолонкиОстаток, Тип("ПолеФормы"), ГруппаНовогоСклада);
	ЭлементКоличествоОстаток.Вид = ВидПоляФормы.ПолеНадписи;
	ЭлементКоличествоОстаток.ПутьКДанным = "ТоварыДерево." + НовыйСклад.ИмяКолонкиОстаток;
	ЭлементКоличествоОстаток.Ширина = 8;
	ЭлементКоличествоОстаток.ОтображатьВШапке = Ложь;
	ЭлементКоличествоОстаток.Видимость = Элементы.ТоварыДеревоПоказатьОстатки.Пометка;
	ЭлементКоличествоОстаток.ВыделятьОтрицательные = Истина;
	ЭлементКоличествоОстаток.Шрифт = Новый Шрифт(ЭлементКоличествоОстаток.Шрифт,,,,,,, 85);
	ЭлементКоличествоОстаток.ЦветТекста = ЦветаСтиля.РезультатУспехЦвет;
	ЭлементКоличествоОстаток.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
	
	ЭлементКнопкаПечатьОпись = Элементы.Добавить(НовыйСклад.ИмяЭлементаПечатьОписьНоменклатуры, Тип("КнопкаФормы"), Элементы.Печать);
	ЭлементКнопкаПечатьОпись.ИмяКоманды = НовыйСклад.ИмяЭлементаПечатьОписьНоменклатуры;
	ЭлементКнопкаПечатьОпись.Заголовок = НовыйСклад.ЗаголовокЭлементов;
	
	ЭлементКнопкаПереместитьВсе = Элементы.Добавить(НовыйСклад.ИмяЭлементаРаспределитьНаОдинСклад, Тип("КнопкаФормы"), Элементы.ГруппаВсеНаОдинСклад);
	ЭлементКнопкаПереместитьВсе.ИмяКоманды = НовыйСклад.ИмяЭлементаРаспределитьНаОдинСклад;
	ЭлементКнопкаПереместитьВсе.Заголовок = НовыйСклад.ЗаголовокЭлементов;
	
	ЭлементКнопкаПереместитьОстаток = Элементы.Добавить(НовыйСклад.ИмяЭлементаПереместитьОстатокНаСклад, Тип("КнопкаФормы"), Элементы.ГруппаОстатокНаСклад);
	ЭлементКнопкаПереместитьОстаток.ИмяКоманды = НовыйСклад.ИмяЭлементаПереместитьОстатокНаСклад;
	ЭлементКнопкаПереместитьОстаток.Заголовок = НовыйСклад.ЗаголовокЭлементов;
	
КонецФункции

&НаКлиенте
Функция ОпределитьСклад(ТекущийЭлемент1)
	
	НайденныеСкладыРаспределения = СкладыРаспределения.НайтиСтроки(Новый Структура("ИмяКолонкиКоличествоУпаковок", ТекущийЭлемент1.Имя));
	Если НайденныеСкладыРаспределения.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайденныеСкладыРаспределения[0];
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВидимостьСкладов(Команда)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Обработка.ПомощникПриемкиОтгрузки.Форма.ФормаВыбораСкладов.Открытие");

	СписокСкладов = Новый СписокЗначений();
	ИндЭлемента = 0;
	Пока ИндЭлемента < СкладыРаспределения.Количество() Цикл
		СтрокиСкладов = СкладыРаспределения.НайтиСтроки(Новый Структура("Порядок", ИндЭлемента));
		СписокСкладов.Добавить(СтрокиСкладов[0].Склад,, СтрокиСкладов[0].Видимость);
		ИндЭлемента = ИндЭлемента + 1;
	КонецЦикла;
	
	ПараметрыВыбораСкладов = Новый Структура();
	ПараметрыВыбораСкладов.Вставить("СписокСкладов", СписокСкладов);
	ПараметрыВыбораСкладов.Вставить("ОсновнойСклад", Объект.ОсновнойСклад);
	ПараметрыВыбораСкладов.Вставить("хзСкладыПеремещения", ПодготовитьТаблицуПеремещенияНаСклады());
	
	ОписаниеВыбора = Новый ОписаниеОповещения("ПослеВыбораСкладов", ЭтотОбъект);
	
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("Обработка.ПомощникПриемкиОтгрузки.Форма.ФормаВыбораСкладов", ПараметрыВыбораСкладов,,,,, ОписаниеВыбора, РежимБлокировки);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьТаблицуПеремещенияНаСклады()
	
	СкладыПеремещения = Объект.ТоварыПеремещение.Выгрузить(, "Склад, КоличествоУпаковок");
	СкладыПеремещения.Колонки.Добавить("КоличествоПозиций", СкладыПеремещения.Колонки.КоличествоУпаковок.ТипЗначения);
	Для Каждого СтрокаПеремещения Из СкладыПеремещения Цикл
		Если СтрокаПеремещения.КоличествоУпаковок = 0 Тогда
			СтрокаПеремещения.КоличествоПозиций = 0;
		Иначе
			СтрокаПеремещения.КоличествоПозиций = 1;
		КонецЕсли;
	КонецЦикла;
	СкладыПеремещения.Свернуть("Склад", "КоличествоПозиций");
	
	Возврат Новый ХранилищеЗначения(СкладыПеремещения);
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораСкладов(РезультатВыбора, ПараметрыВыбора) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоставСкладовИзменен = Ложь;
	
	Порядок = 0;
	Для Каждого ЭлементСписка Из РезультатВыбора Цикл
		
		СтруктураПоиска = Новый Структура("Склад", ЭлементСписка.Значение);
		СтрокиСкладовРаспределения = СкладыРаспределения.НайтиСтроки(СтруктураПоиска);
		Если не СтрокиСкладовРаспределения[0].Видимость = ЭлементСписка.Пометка
			или не СтрокиСкладовРаспределения[0].Порядок = Порядок Тогда
			СоставСкладовИзменен = Истина;
			СтрокиСкладовРаспределения[0].Видимость = ЭлементСписка.Пометка;
			СтрокиСкладовРаспределения[0].Порядок = Порядок;
		КонецЕсли;
		
		Порядок = Порядок + 1;
		
	КонецЦикла;
	
	Если СоставСкладовИзменен Тогда
		УстановитьВидимостьКолонокСкладов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКолонокСкладов()
	
	КоличествоВидимых = 0;
	ЕстьПеремещенияНаСкрытыеСклады = Ложь;
	
	Для Каждого СкладРаспределения Из СкладыРаспределения Цикл
		Элементы[СкладРаспределения.ИмяГруппы].Видимость = СкладРаспределения.Видимость;
		Элементы[СкладРаспределения.ИмяЭлементаПечатьОписьНоменклатуры].Видимость = СкладРаспределения.Видимость;
		Элементы[СкладРаспределения.ИмяЭлементаРаспределитьНаОдинСклад].Видимость = СкладРаспределения.Видимость;
		Элементы[СкладРаспределения.ИмяЭлементаПереместитьОстатокНаСклад].Видимость = СкладРаспределения.Видимость;
		Если СкладРаспределения.Видимость Тогда
			КоличествоВидимых = КоличествоВидимых + 1;
		ИначеЕсли Не ЕстьПеремещенияНаСкрытыеСклады Тогда
			СтрокиПеремещения = Объект.ТоварыПеремещение.НайтиСтроки(Новый Структура("Склад", СкладРаспределения.Склад));
			Для Каждого СтрокаПеремещения Из СтрокиПеремещения Цикл
				Если не СтрокаПеремещения.Количество = 0 Тогда
					ЕстьПеремещенияНаСкрытыеСклады = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ПорядокЭлементов = СкладыРаспределения.Выгрузить(, "ИмяГруппы, Порядок");
	ПорядокЭлементов.Сортировать("Порядок");
	Для Каждого ЭлементПорядка Из ПорядокЭлементов Цикл
		
		ТекущийЭлемент = Элементы.ТоварыДеревоГруппаКоличествоПеремещение.ПодчиненныеЭлементы[ЭлементПорядка.ИмяГруппы];
		ТекущаяПозиция = Элементы.ТоварыДеревоГруппаКоличествоПеремещение.ПодчиненныеЭлементы[ЭлементПорядка.Порядок];
		Если не ТекущийЭлемент = ТекущаяПозиция Тогда
			Элементы.Переместить(ТекущийЭлемент, ТекущийЭлемент.Родитель, ТекущаяПозиция);
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоДоступных = СкладыРаспределения.Количество();
	
	Если КоличествоВидимых = 0 Тогда
		СтрокаДоступно = ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоДоступных, НСтр("ru='Доступен, Доступно, Доступно'"), Ложь);
		СтрокаСкладов = ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоДоступных, НСтр("ru='склад, склада, складов'"), Ложь);
		ЗаголовокСкладов = СтрокаДоступно + " " + Строка(КоличествоДоступных) + " " + СтрокаСкладов;
		ЗаголовокСкладов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокСкладов, КоличествоДоступных);
	Иначе
		СтрокаПоказаны = ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоВидимых, НСтр("ru='Показан, Показано, Показано'"), Ложь);
		СтрокаСкладов = ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоДоступных, НСтр("ru='склада, складов, складов'"), Ложь);
		ЗаголовокСкладов = СтрокаПоказаны + " " + Строка(КоличествоВидимых) + НСтр("ru = ' из '") + Строка(КоличествоДоступных) + " " + СтрокаСкладов;
	КонецЕсли;
	
	Элементы.ВидимостьСкладов.Заголовок = ЗаголовокСкладов;
	
	Если КоличествоВидимых = 0 Тогда
		ЗаголовокФакта = Строка(Объект.ОсновнойСклад);
	Иначе
		ЗаголовокФакта = НСтр("ru = 'По факту'");
	КонецЕсли;
	Элементы.ТоварыДеревоКоличествоУпаковокФакт.Заголовок = ЗаголовокФакта;
	
	
КонецПроцедуры

// В связи с тем, что функция БСП устарела.
// А функция замены не совсем подходит.
// Так как не содержит дополнительных параметров.
// Принято решение эту функцию сохранить персонально в обработке.
Функция ЧислоЦифрамиПредметИсчисленияПрописью(Знач Значение, Знач ПараметрыПредметаИсчисления,
	Знач ДобавлятьЧислоКРезультату = Истина) Экспорт
	
	Результат = ?(ДобавлятьЧислоКРезультату, Формат(Значение, "ЧН=0") + " ", "");
	ПредставленияПредмета = Новый Массив;
	
	ПараметрыПредметаИсчисления = СтрРазделить(ПараметрыПредметаИсчисления, ",");
	Для Каждого Параметр Из ПараметрыПредметаИсчисления Цикл
		ПредставленияПредмета.Добавить(СокрЛП(Параметр));
	КонецЦикла;
	
	Значение = Значение % 100;
	Если Значение > 20 Тогда
		Значение = Значение % 10;
	КонецЕсли;
	
	Индекс = ?(Значение = 1, 0, ?(Значение > 1 И Значение < 5, 1, 2));
	Результат = Результат + ПредставленияПредмета[Индекс];
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФункцииРаботыСДеревомТоваров

// Процедура заполняет отображаемое дерево товаров по табличным частям обработки
&НаСервере
Процедура ЗаполнитьДеревоТоваровПоТабличнымЧастям(ТаблицаТовары = Неопределено)
	
	ЭлементыДерева = ТоварыДерево.ПолучитьЭлементы();
	
	Если ТаблицаТовары = Неопределено Тогда
		
		ЭлементыДерева.Очистить();
		
		ТаблицаТовары = Объект[ПараметрыРаспределения.БазоваяТаблицаДляРаспределения];
		
	КонецЕсли;
	
	МассивСтрокДерева = Новый Массив();
	
	ДобавленыПодчиненныеСтроки = Ложь;
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
		
		Если ПараметрыРаспределения.ОтображатьВВидеДерева И ЗначениеЗаполнено(СтрокаТовары.Характеристика) Тогда
			КоллекцияРодитель = Неопределено;
			Для Каждого СтрокаКоллекции Из ЭлементыДерева Цикл
				Если СтрокаКоллекции.Номенклатура = СтрокаТовары.Номенклатура Тогда
					КоллекцияРодитель = СтрокаКоллекции.ПолучитьЭлементы();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если КоллекцияРодитель = Неопределено Тогда
				НоваяСтрокаКоллекции = ЭлементыДерева.Добавить();
				НоваяСтрокаКоллекции.Номенклатура = СтрокаТовары.Номенклатура;
				НоваяСтрокаКоллекции.ПрямоеРедактированиеКоличестваФакт = Ложь;
				НоваяСтрокаКоллекции.ПрямоеРедактированиеКоличестваПеремещения = Ложь;
				НоваяСтрокаКоллекции.ЭтоГруппа = Истина;
				КоллекцияРодитель = НоваяСтрокаКоллекции.ПолучитьЭлементы();
			КонецЕсли;
			ДобавленыПодчиненныеСтроки = Истина;
		Иначе
			КоллекцияРодитель = ЭлементыДерева;
		КонецЕсли;
		
		СуществующаяСтрока = Неопределено;
		Для Каждого ЭлементДерева Из КоллекцияРодитель Цикл
			Если СтрокаТовары.Номенклатура = ЭлементДерева.Номенклатура и СтрокаТовары.Характеристика = ЭлементДерева.Характеристика и СтрокаТовары.Упаковка = ЭлементДерева.Упаковка Тогда
				СуществующаяСтрока = ЭлементДерева;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СуществующаяСтрока = Неопределено Тогда
			НоваяСтрокаДерева = КоллекцияРодитель.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, СтрокаТовары);
			МассивСтрокДерева.Добавить(НоваяСтрокаДерева.ПолучитьИдентификатор());
		Иначе
			МассивСтрокДерева.Добавить(СуществующаяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураОбновления = СтруктураОбновленияТоваровНаСервере(МассивСтрокДерева, Истина, Истина, Истина);
	ОбновитьДеревоТоваровПоТабличнымЧастям(ТоварыДерево, СтруктураОбновления);
	
	ПараметрыРаспределения.ЕстьПодчиненныеЭлементыВДереве = ДобавленыПодчиненныеСтроки;
	
КонецПроцедуры

// Функция обновляет отображаемое дерево товаров по табличным частям обработки
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДеревоТоваровПоТабличнымЧастям(ТоварыДерево, СтруктураОбновления)
	
	СтруктураПоиска = СтруктураПоиска();
	
	Для Каждого ИдентификаторСтроки Из СтруктураОбновления.МассивОбновляемыхСтрок Цикл
		
		СтрокаДерева = ТоварыДерево.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска.БезСклада, СтрокаДерева);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска.СоСкладом, СтрокаДерева);
		
		Если СтруктураОбновления.ОбновитьКоличествоРаспоряжение Тогда
			СтрокиРаспоряжение = СтруктураОбновления.ТоварыРаспоряжение.НайтиСтроки(СтруктураПоиска.БезСклада);
			Если не СтрокиРаспоряжение.Количество() = 0 Тогда
				СтрокаДерева.КоличествоРаспоряжение = СтрокиРаспоряжение[0].Количество;
				СтрокаДерева.КоличествоУпаковокРаспоряжение = СтрокиРаспоряжение[0].КоличествоУпаковок;
				СтрокаДерева.СтатусыСерийИПодарочныхСертификатовРаспоряжение = СтрокиРаспоряжение[0].СтатусыСерийИПодарочныхСертификатов;
				СтрокаДерева.Цена = СтрокиРаспоряжение[0].Цена;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураОбновления.ОбновитьКоличествоФакт Тогда
			СтрокиФакт = СтруктураОбновления.ТоварыФакт.НайтиСтроки(СтруктураПоиска.БезСклада);
			СтрокаДерева.КоличествоФакт = СтрокиФакт[0].Количество;
			СтрокаДерева.КоличествоУпаковокФакт = СтрокиФакт[0].КоличествоУпаковок;
			СтрокаДерева.СтатусыСерийИПодарочныхСертификатовФакт = СтрокиФакт[0].СтатусыСерийИПодарочныхСертификатов;
			СтрокаДерева.ПрямоеРедактированиеКоличестваФакт = СтрокиФакт[0].СтатусыСерийИПодарочныхСертификатов = 0;
		КонецЕсли;
		
		Если СтруктураОбновления.ОбновитьКоличествоПеремещение Тогда
			
			СтрокиПеремещение = СтруктураОбновления.ТоварыПеремещение.НайтиСтроки(СтруктураПоиска.БезСклада);
			
			Для Каждого СтрокаПеремещения Из СтрокиПеремещение Цикл
				
				Если СтруктураОбновления.МассивОбновляемыхСкладов.Найти(СтрокаПеремещения.Склад) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НастройкиСклада = СтруктураОбновления.СкладыРаспределения.НайтиСтроки(Новый Структура("Склад", СтрокаПеремещения.Склад));
				
				СтрокаДерева[НастройкиСклада[0].ИмяКолонкиКоличество] = СтрокаПеремещения.Количество;
				СтрокаДерева[НастройкиСклада[0].ИмяКолонкиКоличествоУпаковок] = СтрокаПеремещения.КоличествоУпаковок;
				СтрокаДерева[НастройкиСклада[0].ИмяКолонкиОстаток] = СтрокаПеремещения.КоличествоОстаток;
				СтрокаДерева[НастройкиСклада[0].ИмяКолонкиСтатусыСерий] = СтрокаПеремещения.СтатусыСерийИПодарочныхСертификатов;
				СтрокаДерева.ПрямоеРедактированиеКоличестваПеремещения = СтрокаПеремещения.СтатусыСерийИПодарочныхСертификатов = 0;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// отклонения
		КоличествоОтклонение = СтрокаДерева.КоличествоУпаковокФакт - СтрокаДерева.КоличествоУпаковокРаспоряжение;
		Если КоличествоОтклонение = 0 Тогда
			СтрокаДерева.КоличествоУпаковокОтклонение = "";
		Иначе
			СтрокаДерева.КоличествоУпаковокОтклонение = "(" + Строка(КоличествоОтклонение) + ")";
		КонецЕсли;
		
		// количество на основной склад
		КоличествоКПеремещению = 0;
		КоличествоУпаковокКПеремещению = 0;
		ИмяКолонкиКоличествоОсновногоСклада = "";
		ИмяКолонкиКоличествоУпаковокОсновногоСклада = "";
		Для Каждого СкладРаспределения Из СтруктураОбновления.СкладыРаспределения Цикл
			Если Не СкладРаспределения.Склад = СтруктураОбновления.ОсновнойСклад Тогда
				КоличествоКПеремещению = КоличествоКПеремещению + СтрокаДерева[СкладРаспределения.ИмяКолонкиКоличество];
				КоличествоУпаковокКПеремещению = КоличествоУпаковокКПеремещению + СтрокаДерева[СкладРаспределения.ИмяКолонкиКоличествоУпаковок];
			Иначе
				ИмяКолонкиКоличествоОсновногоСклада = СкладРаспределения.ИмяКолонкиКоличество;
				ИмяКолонкиКоличествоУпаковокОсновногоСклада = СкладРаспределения.ИмяКолонкиКоличествоУпаковок;
			КонецЕсли;
		КонецЦикла;
		Если СтруктураОбновления.РаботаСФактом Тогда
			СтрокаДерева[ИмяКолонкиКоличествоОсновногоСклада] = Макс(СтрокаДерева.КоличествоФакт - КоличествоКПеремещению, 0);
			СтрокаДерева[ИмяКолонкиКоличествоУпаковокОсновногоСклада] = Макс(СтрокаДерева.КоличествоУпаковокФакт - КоличествоУпаковокКПеремещению, 0);
		Иначе
			СтрокаДерева[ИмяКолонкиКоличествоОсновногоСклада] = Макс(СтрокаДерева.КоличествоРаспоряжение - КоличествоКПеремещению, 0);
			СтрокаДерева[ИмяКолонкиКоличествоУпаковокОсновногоСклада] = Макс(СтрокаДерева.КоличествоУпаковокРаспоряжение - КоличествоУпаковокКПеремещению, 0);
		КонецЕсли;
		
		// контроль количества
		СтруктураПроверки = ПодготовитьСтруктураПроверкиКоличестваНаКлиентеНаСервереБезКонтекста(СтрокаДерева, СтруктураОбновления);
		СтрокаДерева.ЕстьОшибкиЗаполнения = не ПроверитьКоличества(СтруктураПроверки);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция обновляет содержимое табличных частей по содержимому дерева товаров
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТабличныеЧастиПоДеревуТоваров(ТоварыРаспоряжение, ТоварыФакт, ТоварыПеремещение, СтруктураОбновления)
	
	СтруктураПоиска = СтруктураПоиска();
	
	Для Каждого ИдентификаторСтроки Из СтруктураОбновления.МассивОбновляемыхСтрок Цикл
		
		СтрокаДерева = СтруктураОбновления.ТоварыДерево.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска.БезСклада, СтрокаДерева);
		
		Если СтруктураОбновления.ОбновитьКоличествоРаспоряжение Тогда
			СтрокиРаспоряжение = СтруктураОбновления.ТоварыРаспоряжение.НайтиСтроки(СтруктураПоиска.БезСклада);
			Если не СтрокиРаспоряжение.Количество() = 0 Тогда
				СтрокиРаспоряжение[0].Количество = СтрокаДерева.КоличествоРаспоряжение;
				СтрокиРаспоряжение[0].КоличествоУпаковок = СтрокаДерева.КоличествоУпаковокРаспоряжение;
				СтрокиРаспоряжение[0].СтатусыСерийИПодарочныхСертификатов = СтрокаДерева.СтатусыСерийИПодарочныхСертификатовРаспоряжение;
				СтрокиРаспоряжение[0].Цена = СтрокаДерева.Цена;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураОбновления.ОбновитьКоличествоФакт Тогда
			СтрокиФакт = СтруктураОбновления.ТоварыФакт.НайтиСтроки(СтруктураПоиска.БезСклада);
			Если не СтрокиФакт.Количество() = 0 Тогда
				СтрокиФакт[0].Количество = СтрокаДерева.КоличествоФакт;
				СтрокиФакт[0].КоличествоУпаковок = СтрокаДерева.КоличествоУпаковокФакт;
				СтрокиФакт[0].СтатусыСерийИПодарочныхСертификатов = СтрокаДерева.СтатусыСерийИПодарочныхСертификатовФакт;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураОбновления.ОбновитьКоличествоПеремещение Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска.СоСкладом, СтрокаДерева);
			Для Каждого Склад Из СтруктураОбновления.МассивОбновляемыхСкладов Цикл
				СтруктураПоиска.СоСкладом.Склад = Склад;
				СтрокиПеремещение = СтруктураОбновления.ТоварыПеремещение.НайтиСтроки(СтруктураПоиска.СоСкладом);
				НастройкиСклада = СтруктураОбновления.СкладыРаспределения.НайтиСтроки(Новый Структура("Склад", Склад));
				Если не НастройкиСклада.Количество() = 0 Тогда
					СтрокиПеремещение[0].Количество = СтрокаДерева[НастройкиСклада[0].ИмяКолонкиКоличество];
					СтрокиПеремещение[0].КоличествоУпаковок = СтрокаДерева[НастройкиСклада[0].ИмяКолонкиКоличествоУпаковок];
					СтрокиПеремещение[0].КоличествоОстаток = СтрокаДерева[НастройкиСклада[0].ИмяКолонкиОстаток];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Функция подготавливает на клиенте структуру настроек для обновления дерева товаров
&НаКлиенте
Функция СтруктураОбновленияТоваровНаКлиенте(ИдентификаторСтрокиДерева = Неопределено, ОбновитьКоличествоРаспоряжение = Ложь, ОбновитьКоличествоФакт = Ложь, ОбновитьКоличествоПеремещение = Ложь)
	
	СтруктураРезультат = Новый Структура();
	
	СтруктураРезультат.Вставить("ТоварыРаспоряжение", Объект.ТоварыРаспоряжение);
	СтруктураРезультат.Вставить("ТоварыФакт", Объект.ТоварыФакт);
	СтруктураРезультат.Вставить("ТоварыПеремещение", Объект.ТоварыПеремещение);
	СтруктураРезультат.Вставить("СкладыРаспределения", СкладыРаспределения);
	СтруктураРезультат.Вставить("ПараметрыРаспределения", ПараметрыРаспределения);
	СтруктураРезультат.Вставить("ТоварыДерево", ТоварыДерево);
	СтруктураРезультат.Вставить("БазоваяТаблицаДляРаспределения", ПараметрыРаспределения.БазоваяТаблицаДляРаспределения);
	СтруктураРезультат.Вставить("ОсновнойСклад", Объект.ОсновнойСклад);
	СтруктураРезультат.Вставить("РаботаСФактом", РаботаСФактом);
	СтруктураРезультат.Вставить("КонтролироватьОстатокПриПроведении", КонтролироватьОстатокПриПроведении);
	
	Если ИдентификаторСтрокиДерева = Неопределено Тогда
		МассивОбновляемыхСтрок = ПолучитьМассивИдентификаторовВсехКонечныхСтрок(ТоварыДерево);
	ИначеЕсли ТипЗнч(ИдентификаторСтрокиДерева) = Тип("Массив") Тогда
		МассивОбновляемыхСтрок = ИдентификаторСтрокиДерева;
	Иначе
		МассивОбновляемыхСтрок = Новый Массив();
		МассивОбновляемыхСтрок.Добавить(ИдентификаторСтрокиДерева);
	КонецЕсли;
	СтруктураРезультат.Вставить("МассивОбновляемыхСтрок", МассивОбновляемыхСтрок);
	
	СтруктураРезультат.Вставить("ОбновитьКоличествоРаспоряжение", ОбновитьКоличествоРаспоряжение);
	СтруктураРезультат.Вставить("ОбновитьКоличествоФакт", ОбновитьКоличествоФакт);
	
	Если ТипЗнч(ОбновитьКоличествоПеремещение) = Тип("Булево") Тогда
		СтруктураРезультат.Вставить("ОбновитьКоличествоПеремещение", ОбновитьКоличествоПеремещение);
		Если ОбновитьКоличествоПеремещение Тогда
			МассивОбновляемыхСкладов = Новый Массив();
			Для Каждого СкладРаспределения Из СкладыРаспределения Цикл
				МассивОбновляемыхСкладов.Добавить(СкладРаспределения.Склад);
			КонецЦикла;
			СтруктураРезультат.Вставить("МассивОбновляемыхСкладов", МассивОбновляемыхСкладов);
		КонецЕсли;
	Иначе
		СтруктураРезультат.Вставить("ОбновитьКоличествоПеремещение", Истина);
		Если ТипЗнч("ОбновитьКоличествоПеремещение") = Тип("Массив") Тогда
			СтруктураРезультат.Вставить("МассивОбновляемыхСкладов", ОбновитьКоличествоПеремещение);
		Иначе
			МассивОбновляемыхСкладов = Новый Массив();
			МассивОбновляемыхСкладов.Добавить(ОбновитьКоличествоПеремещение);
			СтруктураРезультат.Вставить("МассивОбновляемыхСкладов", МассивОбновляемыхСкладов);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

//Функция подготавливает на сервере структуру настроек для обновления дерева товаров
&НаСервере
Функция СтруктураОбновленияТоваровНаСервере(ИдентификаторСтрокиДерева = Неопределено, ОбновитьКоличествоРаспоряжение = Ложь, ОбновитьКоличествоФакт = Ложь, ОбновитьКоличествоПеремещение = Ложь)
	
	СтруктураРезультат = Новый Структура();
	
	СтруктураРезультат.Вставить("ТоварыРаспоряжение", Объект.ТоварыРаспоряжение);
	СтруктураРезультат.Вставить("ТоварыФакт", Объект.ТоварыФакт);
	СтруктураРезультат.Вставить("ТоварыПеремещение", Объект.ТоварыПеремещение);
	СтруктураРезультат.Вставить("СкладыРаспределения", СкладыРаспределения);
	СтруктураРезультат.Вставить("ПараметрыРаспределения", ПараметрыРаспределения);
	СтруктураРезультат.Вставить("ТоварыДерево", ТоварыДерево);
	СтруктураРезультат.Вставить("БазоваяТаблицаДляРаспределения", ПараметрыРаспределения.БазоваяТаблицаДляРаспределения);
	СтруктураРезультат.Вставить("ОсновнойСклад", Объект.ОсновнойСклад);
	СтруктураРезультат.Вставить("РаботаСФактом", РаботаСФактом);
	СтруктураРезультат.Вставить("КонтролироватьОстатокПриПроведении", КонтролироватьОстатокПриПроведении);
	
	Если ИдентификаторСтрокиДерева = Неопределено Тогда
		МассивОбновляемыхСтрок = ПолучитьМассивИдентификаторовВсехКонечныхСтрок(ТоварыДерево);
	ИначеЕсли ТипЗнч(ИдентификаторСтрокиДерева) = Тип("Массив") Тогда
		МассивОбновляемыхСтрок = ИдентификаторСтрокиДерева;
	Иначе
		МассивОбновляемыхСтрок = Новый Массив();
		МассивОбновляемыхСтрок.Добавить(ИдентификаторСтрокиДерева);
	КонецЕсли;
	СтруктураРезультат.Вставить("МассивОбновляемыхСтрок", МассивОбновляемыхСтрок);
	
	СтруктураРезультат.Вставить("ОбновитьКоличествоРаспоряжение", ОбновитьКоличествоРаспоряжение);
	СтруктураРезультат.Вставить("ОбновитьКоличествоФакт", ОбновитьКоличествоФакт);
	
	Если ТипЗнч(ОбновитьКоличествоПеремещение) = Тип("Булево") Тогда
		СтруктураРезультат.Вставить("ОбновитьКоличествоПеремещение", ОбновитьКоличествоПеремещение);
		Если ОбновитьКоличествоПеремещение Тогда
			МассивОбновляемыхСкладов = Новый Массив();
			Для Каждого СкладРаспределения Из СкладыРаспределения Цикл
				МассивОбновляемыхСкладов.Добавить(СкладРаспределения.Склад);
			КонецЦикла;
			СтруктураРезультат.Вставить("МассивОбновляемыхСкладов", МассивОбновляемыхСкладов);
		КонецЕсли;
	Иначе
		СтруктураРезультат.Вставить("ОбновитьКоличествоПеремещение", Истина);
		Если ТипЗнч("ОбновитьКоличествоПеремещение") = Тип("Массив") Тогда
			СтруктураРезультат.Вставить("МассивОбновляемыхСкладов", ОбновитьКоличествоПеремещение);
		Иначе
			МассивОбновляемыхСкладов = Новый Массив();
			МассивОбновляемыхСкладов.Добавить(ОбновитьКоличествоПеремещение);
			СтруктураРезультат.Вставить("МассивОбновляемыхСкладов", МассивОбновляемыхСкладов);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Инициализирует структуру поиска по таблицам
&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПоиска()
	
	СтруктураПоиска = Новый Структура();
	
	СтруктураПоиска.Вставить("СоСкладом", Новый Структура("Номенклатура, Характеристика, Упаковка, Склад"));
	СтруктураПоиска.Вставить("БезСклада", Новый Структура("Номенклатура, Характеристика, Упаковка"));
	СтруктураПоиска.Вставить("ПоНоменклатуре", Новый Структура("Номенклатура"));
	
	Возврат СтруктураПоиска;
	
КонецФункции

// Функция собирает идентификаторы всех строк дерева, не имеющих подчиненных строк
// Параметры:
//		ДеревоЗначений - дерево строки которого необходимо получить
//		МассивРезультат - служебный параметр, указывать не требуется
// Возвращаемое значение:
//		Массив - идентификаторы строк дерева
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивИдентификаторовВсехКонечныхСтрок(ДеревоЗначений, МассивРезультат = Неопределено)
	
	Если МассивРезультат = Неопределено Тогда
		МассивРезультат = Новый Массив();
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ДеревоЗначений.ПолучитьЭлементы() Цикл
		Если ТекущаяСтрока.ЭтоГруппа Тогда
			ПолучитьМассивИдентификаторовВсехКонечныхСтрок(ТекущаяСтрока, МассивРезультат);
		Иначе
			МассивРезультат.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРезультат;
	
КонецФункции

// Функция собирает идентификаторы конечных строк по заданному отбору или массиву идентификаторов строк
// Параметры:
//		ДеревоЗначений - дерево строки которого необходимо получить
//		Отбор - Массив (идентификаторов строк) или Структура (отбора)
//		МассивРезультат - служебный параметр, указывать не требуется
// Возвращаемое значение:
//		Массив - идентификаторы строк дерева
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивИдентификаторовКонечныхСтрок(ДеревоЗначений, Отбор = Неопределено, МассивИдентификаторовСтрокДляОбхода = Неопределено, МассивРезультат = Неопределено, ИсходноеДерево = Неопределено)
	
	Если МассивРезультат = Неопределено Тогда
		МассивРезультат = Новый Массив();
	КонецЕсли;
	
	Если ИсходноеДерево = Неопределено Тогда
		ИсходноеДерево = ДеревоЗначений;
	КонецЕсли;
	
	Если МассивИдентификаторовСтрокДляОбхода = Неопределено Тогда
		МассивИдентификаторовСтрокДляОбхода = Новый Массив();
		Для Каждого Стр Из ДеревоЗначений.ПолучитьЭлементы() Цикл
			МассивИдентификаторовСтрокДляОбхода.Добавить(Стр.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ИдентификаторСтроки Из МассивИдентификаторовСтрокДляОбхода Цикл
		ТекущаяСтрока = ИсходноеДерево.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущаяСтрока.ЭтоГруппа Тогда
			МассивПодчиненных = Новый Массив();
			Для Каждого ПодчиненнаяСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
				МассивПодчиненных.Добавить(ПодчиненнаяСтрока.ПолучитьИдентификатор());
			КонецЦикла;
			ПолучитьМассивИдентификаторовКонечныхСтрок(ТекущаяСтрока, Отбор, МассивПодчиненных, МассивРезультат, ИсходноеДерево);
		Иначе
			Если ТипЗнч(Отбор) = Тип("Структура") Тогда
				ВсеУсловияВыполнены = Истина;
				Для Каждого ЭлементОтбора Из Отбор Цикл
					Если Не ТекущаяСтрока[ЭлементОтбора.Ключ] = ЭлементОтбора.Значение Тогда
						ВсеУсловияВыполнены = Ложь;
					КонецЕсли;
				КонецЦикла;
				Если ВсеУсловияВыполнены и МассивРезультат.Найти(ИдентификаторСтроки) = Неопределено Тогда
					МассивРезультат.Добавить(ИдентификаторСтроки);
				КонецЕсли;
			Иначе
				Если МассивРезультат.Найти(ИдентификаторСтроки) = Неопределено Тогда
					МассивРезультат.Добавить(ИдентификаторСтроки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРезультат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторСтрокиДереваПоИдентификаторуСтрокиТЧ(ДеревоЗначений, ТабличнаяЧасть, ИдентификаторСтроки)
	
	ДанныеСтрокиТЧ = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
	СтруктураПоиска = СтруктураПоиска();
	ЗаполнитьЗначенияСвойств(СтруктураПоиска.БезСклада, ДанныеСтрокиТЧ);
	
	ИдентификаторыСтрокРезультат = ПолучитьМассивИдентификаторовКонечныхСтрок(ДеревоЗначений, СтруктураПоиска.БезСклада);
	Если ИдентификаторыСтрокРезультат.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ИдентификаторыСтрокРезультат[0];
	КонецЕсли;
	
КонецФункции

// Функция подготавливает структуру параметров для проверки корректности указания количеств в строке дерева товаров
// Параметры:
//		ТекущиеДанные - данные строки дерева
//		СообщениеПользвателю - Сообщение текст которого необходимо заполнить
// Возвращаемое значение:
//		Структура - структура с данными необхдимыми для проверки
&НаКлиенте
Функция ПодготовитьСтруктураПроверкиКоличестваНаКлиенте(ТекущиеДанные, СообщениеПользователю = Неопределено)
	
	МассивКоличествКПеремещению = Новый Массив();
	МассивКоличествОстаток = Новый Массив();
	МассивСкладов = Новый Массив();
	Для Каждого СкладРаспределения Из СкладыРаспределения Цикл
		МассивКоличествКПеремещению.Добавить(ТекущиеДанные[СкладРаспределения.ИмяКолонкиКоличество]);
		МассивКоличествОстаток.Добавить(ТекущиеДанные[СкладРаспределения.ИмяКолонкиОстаток]);
		МассивСкладов.Добавить(СкладРаспределения.Склад);
	КонецЦикла;
	
	Если ПараметрыРаспределения.БазоваяТаблицаДляРаспределения = "ТоварыФакт" Тогда
		КоличествоФакт = ТекущиеДанные.КоличествоФакт;
	Иначе
		КоличествоФакт = ТекущиеДанные.КоличествоРаспоряжение;
	КонецЕсли;
	
	СтруктураПроверки = Новый Структура();
	СтруктураПроверки.Вставить("Операция", ПараметрыРаспределения.Операция);
	СтруктураПроверки.Вставить("ПоступлениеПоТТНЕГАИС", ПараметрыРаспределения.ПоступлениеПоТТНЕГАИС);
	СтруктураПроверки.Вставить("ПоказатьОповещение", Истина);
	СтруктураПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
	СтруктураПроверки.Вставить("КоличествоРаспоряжение", ТекущиеДанные.КоличествоРаспоряжение);
	СтруктураПроверки.Вставить("КоличествоФакт", КоличествоФакт);
	СтруктураПроверки.Вставить("МассивКоличествКПеремещению", МассивКоличествКПеремещению);
	СтруктураПроверки.Вставить("МассивКоличествОстаток", МассивКоличествОстаток);
	СтруктураПроверки.Вставить("МассивКоличествОстаток", МассивКоличествОстаток);
	СтруктураПроверки.Вставить("МассивСкладов", МассивСкладов);
	СтруктураПроверки.Вставить("ТекущиеДанные", ТекущиеДанные);
	СтруктураПроверки.Вставить("ОрдернаяСхема", ПараметрыРаспределения.ОрдернаяСхема);
	СтруктураПроверки.Вставить("КонтролироватьОстатокПриПроведении", КонтролироватьОстатокПриПроведении);
	
	Возврат СтруктураПроверки;
	
КонецФункции

// Функция подготавливает структуру параметров для проверки корректности указания количеств в строке дерева товаров
// Параметры:
//		ТекущиеДанные - данные строки дерева
//		СообщениеПользвателю - Сообщение текст которого необходимо заполнить
// Возвращаемое значение:
//		Структура - структура с данными необхдимыми для проверки
&НаКлиентеНаСервереБезКонтекста
Функция ПодготовитьСтруктураПроверкиКоличестваНаКлиентеНаСервереБезКонтекста(ТекущиеДанные, Контекст, СообщениеПользователю = Неопределено)
	
	МассивКоличествКПеремещению = Новый Массив();
	МассивКоличествОстаток = Новый Массив();
	МассивСкладов = Новый Массив();
	Для Каждого СкладРаспределения Из Контекст.СкладыРаспределения Цикл
		МассивКоличествКПеремещению.Добавить(ТекущиеДанные[СкладРаспределения.ИмяКолонкиКоличество]);
		МассивКоличествОстаток.Добавить(ТекущиеДанные[СкладРаспределения.ИмяКолонкиОстаток]);
		МассивСкладов.Добавить(СкладРаспределения.Склад);
	КонецЦикла;
	
	Если Контекст.ПараметрыРаспределения.БазоваяТаблицаДляРаспределения = "ТоварыФакт" Тогда
		КоличествоФакт = ТекущиеДанные.КоличествоФакт;
	Иначе
		КоличествоФакт = ТекущиеДанные.КоличествоРаспоряжение;
	КонецЕсли;
	
	СтруктураПроверки = Новый Структура();
	СтруктураПроверки.Вставить("Операция", Контекст.ПараметрыРаспределения.Операция);
	СтруктураПроверки.Вставить("ПоступлениеПоТТНЕГАИС", Контекст.ПараметрыРаспределения.ПоступлениеПоТТНЕГАИС);
	СтруктураПроверки.Вставить("ПоказатьОповещение", Истина);
	СтруктураПроверки.Вставить("СообщениеПользователю", СообщениеПользователю);
	СтруктураПроверки.Вставить("КоличествоРаспоряжение", ТекущиеДанные.КоличествоРаспоряжение);
	СтруктураПроверки.Вставить("КоличествоФакт", КоличествоФакт);
	СтруктураПроверки.Вставить("МассивКоличествКПеремещению", МассивКоличествКПеремещению);
	СтруктураПроверки.Вставить("МассивКоличествОстаток", МассивКоличествОстаток);
	СтруктураПроверки.Вставить("МассивКоличествОстаток", МассивКоличествОстаток);
	СтруктураПроверки.Вставить("МассивСкладов", МассивСкладов);
	СтруктураПроверки.Вставить("ТекущиеДанные", ТекущиеДанные);
	СтруктураПроверки.Вставить("ЕдиницаИзмерения", ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаИзмерения"));
	СтруктураПроверки.Вставить("ОрдернаяСхема", Контекст.ПараметрыРаспределения.ОрдернаяСхема);
	СтруктураПроверки.Вставить("КонтролироватьОстатокПриПроведении", Контекст.КонтролироватьОстатокПриПроведении);
								
	Возврат СтруктураПроверки;
	
КонецФункции

// Функция проверяет корректность указания количеств в строке дерева товаров
// Параметры:
//		Структура - структура с данными необхдимыми для проверки
// Возвращаемое значение:
//		Булево - Истина - проверка пройдена успешно, Ложь - обнаружены ошибки
&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьКоличества(СтруктураПроверки)
	
	РезультатПроверки = Истина;
	МассивСообщений = Новый Массив();
	
	КоличествоКРаспределениюНаДругиеСклады = 0;
	Для Инд = 0 По СтруктураПроверки.МассивКоличествКПеремещению.ВГраница() Цикл
		КоличествоКРаспределениюНаДругиеСклады = КоличествоКРаспределениюНаДругиеСклады + СтруктураПроверки.МассивКоличествКПеремещению[Инд];
	КонецЦикла;
	
	Если СтруктураПроверки.Операция = "Отгрузка" Тогда
		
		Если КоличествоКРаспределениюНаДругиеСклады > СтруктураПроверки.КоличествоФакт Тогда
			РезультатПроверки = Ложь;
			ТекущееСообщение = НСтр("ru = 'Собрано со складов больше чем требуется для отгрузки'");
			МассивСообщений.Добавить(ТекущееСообщение);
		КонецЕсли;
		
		Если СтруктураПроверки.КонтролироватьОстатокПриПроведении Тогда 
			
			Для Инд = 0 По СтруктураПроверки.МассивКоличествКПеремещению.ВГраница() Цикл
				Если не СтруктураПроверки.МассивКоличествКПеремещению[Инд] = 0 и СтруктураПроверки.МассивКоличествКПеремещению[Инд] > СтруктураПроверки.МассивКоличествОстаток[Инд] Тогда
					ЕдиницаИзмерения = ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(СтруктураПроверки.ТекущиеДанные.Номенклатура, "ЕдиницаИзмерения");
					РезультатПроверки = Ложь;
					ТекущееСообщение = НСтр("ru = 'Превышен свободный остаток на складе %1 на %2 %3'");
					ТекущееСообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекущееСообщение, СтруктураПроверки.МассивСкладов[Инд], СтруктураПроверки.МассивКоличествКПеремещению[Инд] - СтруктураПроверки.МассивКоличествОстаток[Инд], ЕдиницаИзмерения);
					МассивСообщений.Добавить(ТекущееСообщение);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураПроверки.Операция = "Приемка" Тогда
			
		Если КоличествоКРаспределениюНаДругиеСклады > СтруктураПроверки.КоличествоФакт Тогда
			РезультатПроверки = Ложь;
			ТекущееСообщение = НСтр("ru = 'Распределено по складам больше чем количество по факту'");
			МассивСообщений.Добавить(ТекущееСообщение);
		КонецЕсли;
		
		Если СтруктураПроверки.ПоступлениеПоТТНЕГАИС Тогда
			Если СтруктураПроверки.КоличествоРаспоряжение < СтруктураПроверки.КоличествоФакт Тогда
				РезультатПроверки = Ложь;
				ТекущееСообщение = НСтр("ru = 'Количество по факту не может превышать количества по документу при поступлении по ТТН ЕГАИС'");
				МассивСообщений.Добавить(ТекущееСообщение);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не РезультатПроверки Тогда
		
		Если не СтруктураПроверки.СообщениеПользователю = Неопределено Тогда
			Для Каждого Сообщение Из МассивСообщений Цикл
				СтруктураПроверки.СообщениеПользователю.Текст = СтруктураПроверки.СообщениеПользователю.Текст
					+ ?(СтруктураПроверки.СообщениеПользователю.Текст = "", "", Символы.ПС) + Сообщение;
			КонецЦикла;
		КонецЕсли;
		
		Если СтруктураПроверки.ПоказатьОповещение Тогда
			#Если Клиент Тогда
			Для Каждого Сообщение Из МассивСообщений Цикл
				ПоказатьОповещениеПользователя(,, Сообщение, БиблиотекаКартинок.Ошибка32);
			КонецЦикла;
			#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти

#Область ВспомагательныеПроцедурыИФункции

// Сохраняет табличные части факта и перемещения в регистр сведений
&НаСервере
Функция СохранитьДанные()
	
	МенеджерСохранения = РегистрыСведений.СохраненныеДанныеПомощникаПриемкиОтгрузки.СоздатьМенеджерЗаписи();
	
	МенеджерСохранения.ДокументРаспоряжение = Объект.ДокументРаспоряжение;
	МенеджерСохранения.Операция = ПараметрыРаспределения.Операция;
	
	МенеджерСохранения.ТоварыФакт = Новый ХранилищеЗначения(Объект.ТоварыФакт.Выгрузить(), Новый СжатиеДанных(9));
	МенеджерСохранения.СерийныеНомераФакт = Новый ХранилищеЗначения(Объект.СерийныеНомераФакт.Выгрузить(), Новый СжатиеДанных(9));
	МенеджерСохранения.СерииФакт = Новый ХранилищеЗначения(Объект.СерииФакт.Выгрузить(), Новый СжатиеДанных(9));
	МенеджерСохранения.ТоварыПеремещение = Новый ХранилищеЗначения(Объект.ТоварыПеремещение.Выгрузить(), Новый СжатиеДанных(9));
	МенеджерСохранения.СерийныеНомераПеремещение = Новый ХранилищеЗначения(Объект.СерийныеНомераПеремещение.Выгрузить(), Новый СжатиеДанных(9));
	МенеджерСохранения.СкладыРаспределения = Новый ХранилищеЗначения(СкладыРаспределения.Выгрузить(, "Склад, Видимость"), Новый СжатиеДанных(9));
	
	МенеджерСохранения.Записать(Истина);
	
	ПорядокСкладов = СкладыРаспределения.Выгрузить(, "Склад, Порядок");
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПомощникПриемкиОтгрузки", "ПорядокСкладов", ПорядокСкладов);
	
КонецФункции

// Восстанавливает данные табличной части факт из регистра сведений
&НаСервере
Функция ВосстановитьДанныеФакт()
	
	МенеджерВосстановления = РегистрыСведений.СохраненныеДанныеПомощникаПриемкиОтгрузки.СоздатьМенеджерЗаписи();
	
	МенеджерВосстановления.ДокументРаспоряжение = Объект.ДокументРаспоряжение;
	МенеджерВосстановления.Операция = ПараметрыРаспределения.Операция;
	
	МенеджерВосстановления.Прочитать();
	
	Если МенеджерВосстановления.Выбран() Тогда
		
		СтруктураПоиска = СтруктураПоиска();
		
		СохраненныеТоварыПоФакту = МенеджерВосстановления.ТоварыФакт.Получить();
		Для Каждого СохраненнаяСтрока Из СохраненныеТоварыПоФакту Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска.БезСклада, СохраненнаяСтрока);
			СтрокиТоварыФакт = Объект.ТоварыФакт.НайтиСтроки(СтруктураПоиска.БезСклада);
			Если СтрокиТоварыФакт.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(Объект.ТоварыФакт.Добавить(), СохраненнаяСтрока);
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокиТоварыФакт[0], СохраненнаяСтрока, "Количество, КоличествоУпаковок, Цена, КлючСвязиСерийныхНомеров, СтатусУказанияСерий");
			КонецЕсли;
		КонецЦикла;
		
		Объект.СерийныеНомераФакт.Загрузить(МенеджерВосстановления.СерийныеНомераФакт.Получить());
		Объект.СерииФакт.Загрузить(МенеджерВосстановления.СерииФакт.Получить());
		
	КонецЕсли;
	
КонецФункции

// Восстанавливает данные табличной части перемещение из регистра сведений
&НаСервере
Функция ВосстановитьДанныеПеремещение()
	
	МенеджерВосстановления = РегистрыСведений.СохраненныеДанныеПомощникаПриемкиОтгрузки.СоздатьМенеджерЗаписи();
	
	МенеджерВосстановления.ДокументРаспоряжение = Объект.ДокументРаспоряжение;
	МенеджерВосстановления.Операция = ПараметрыРаспределения.Операция;
	
	МенеджерВосстановления.Прочитать();
	
	Если МенеджерВосстановления.Выбран() Тогда
		
		СтруктураПоиска = СтруктураПоиска();
		
		СохраненныеТоварыПеремещение = МенеджерВосстановления.ТоварыПеремещение.Получить();
		Для Каждого СохраненнаяСтрока Из СохраненныеТоварыПеремещение Цикл
			Если СохраненнаяСтрока.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтруктураПоиска.СоСкладом, СохраненнаяСтрока);
			СтрокиТоварыПеремещение = Объект.ТоварыПеремещение.НайтиСтроки(СтруктураПоиска.СоСкладом);
			Если не СтрокиТоварыПеремещение.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокиТоварыПеремещение[0], СохраненнаяСтрока, "Количество, КоличествоУпаковок, КлючСвязиСерийныхНомеров, СтатусУказанияСерий");
			КонецЕсли;
		КонецЦикла;
		
		Объект.СерийныеНомераПеремещение.Загрузить(МенеджерВосстановления.СерийныеНомераПеремещение.Получить());
		
	КонецЕсли;
	
КонецФункции

// Получает сохраненную видимость складов из регистрасведений
&НаСервере
Функция ВосстановитьДанныеВидимостьСкладов()
	
	МенеджерВосстановления = РегистрыСведений.СохраненныеДанныеПомощникаПриемкиОтгрузки.СоздатьМенеджерЗаписи();
	
	МенеджерВосстановления.ДокументРаспоряжение = Объект.ДокументРаспоряжение;
	МенеджерВосстановления.Операция = ПараметрыРаспределения.Операция;
	
	МенеджерВосстановления.Прочитать();
	
	Если МенеджерВосстановления.Выбран() Тогда
		Возврат МенеджерВосстановления.СкладыРаспределения.Получить();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Удаляет данные о сохраненном ранее состоянии табличных частей факт и перемещение из регистра сведений
&НаСервере
Функция УдалитьСохранненныеДанные()
	
	МенеджерУдаления = РегистрыСведений.СохраненныеДанныеПомощникаПриемкиОтгрузки.СоздатьМенеджерЗаписи();
	
	МенеджерУдаления.ДокументРаспоряжение = Объект.ДокументРаспоряжение;
	МенеджерУдаления.Операция = ПараметрыРаспределения.Операция;
	
	МенеджерУдаления.Удалить();
	
КонецФункции

// Округляет до целых переданное число: 0 как 0, от 0 до 1 как 1, от 1 до 5 с порогом 0.3, далее с порогом 0.5
&НаКлиентеНаСервереБезКонтекста
Функция ОкруглитьДляРаспределения(ОкругляемоеЧисло)
	
	Если ОкругляемоеЧисло <= 0 Тогда
		Возврат 0;
	ИначеЕсли ОкругляемоеЧисло < 1 Тогда
		Возврат Окр(ОкругляемоеЧисло + 0.49, 0);
	ИначеЕсли ОкругляемоеЧисло < 5 Тогда
		Возврат Окр(ОкругляемоеЧисло + 0.2, 0);
	Иначе
		Возврат Окр(ОкругляемоеЧисло, 0);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОстаткиТоваров(ТаблицаНоменклатураХарактеристика, Магазин)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика
	|ПОМЕСТИТЬ втТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Номенклатура,
	|	Остатки.Характеристика,
	|	Остатки.Склад,
	|	Остатки.КоличествоОстаток - Остатки.РезервОстаток КАК КоличествоОстаток
	|ИЗ
	|	втТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				Склад.Магазин = &Магазин
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							втТаблицаТовары.Номенклатура
	|						ИЗ
	|							втТаблицаТовары)) КАК Остатки
	|		ПО ТаблицаТовары.Номенклатура = Остатки.Номенклатура
	|			И ТаблицаТовары.Характеристика = Остатки.Характеристика";
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаНоменклатураХарактеристика);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЗаголовокТовары()
	
	КоличествоТоваров = Макс(Объект.ТоварыРаспоряжение.Количество(), Объект.ТоварыФакт.Количество());
	Если КоличествоТоваров = 0 Тогда
		ЗаголовокСтраницыТовары = НСтр("ru = 'Товары'");
	Иначе
		ЗаголовокСтраницыТовары = НСтр("ru = 'Товары (%1)'");
		ЗаголовокСтраницыТовары = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокСтраницыТовары, КоличествоТоваров);
	КонецЕсли;
	Элементы.СтраницаТовары.Заголовок = ЗаголовокСтраницыТовары;
	
КонецПроцедуры

#КонецОбласти

#Область СписокОформленныхДокументов

&НаСервере
Процедура ОбновитьОформленныеДокументы()
	
	ОформленныеДокументы.Очистить();
	УдалитьПодчиненныеЭлементы(Элементы.ГруппаОформленныеДокументы);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка,
	|	ПриходныйОрдерНаТовары.Дата
	|ПОМЕСТИТЬ втОформленныеДокументы
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	(ПриходныйОрдерНаТовары.ДокументОснование = &ДокументРаспоряжение
	|			ИЛИ ПриходныйОрдерНаТовары.ДокументОснование = &ДокументОснование)
	|	И ПриходныйОрдерНаТовары.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйОрдерНаТовары.Ссылка,
	|	РасходныйОрдерНаТовары.Дата
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ГДЕ
	|	(РасходныйОрдерНаТовары.ДокументОснование = &ДокументРаспоряжение
	|			ИЛИ РасходныйОрдерНаТовары.ДокументОснование = &ДокументОснование)
	|	И РасходныйОрдерНаТовары.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОрдерНаПеремещениеТоваров.Ссылка,
	|	ОрдерНаПеремещениеТоваров.Дата
	|ИЗ
	|	Документ.ОрдерНаПеремещениеТоваров КАК ОрдерНаПеремещениеТоваров
	|ГДЕ
	|	(ОрдерНаПеремещениеТоваров.ДокументОснование = &ДокументРаспоряжение
	|			ИЛИ ОрдерНаПеремещениеТоваров.ДокументОснование = &ДокументОснование)
	|	И ОрдерНаПеремещениеТоваров.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктОРасхожденияхПриПриемкеТоваров.Ссылка,
	|	АктОРасхожденияхПриПриемкеТоваров.Дата
	|ИЗ
	|	Документ.АктОРасхожденияхПриПриемкеТоваров КАК АктОРасхожденияхПриПриемкеТоваров
	|ГДЕ
	|	(АктОРасхожденияхПриПриемкеТоваров.ДокументОснование = &ДокументРаспоряжение
	|			ИЛИ АктОРасхожденияхПриПриемкеТоваров.ДокументОснование = &ДокументОснование)
	|	И АктОРасхожденияхПриПриемкеТоваров.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОформленныеДокументы.Ссылка,
	|	втОформленныеДокументы.Дата
	|ИЗ
	|	втОформленныеДокументы КАК втОформленныеДокументы
	|
	|УПОРЯДОЧИТЬ ПО
	|	втОформленныеДокументы.Дата УБЫВ";
	Если ТипЗнч(Объект.ДокументРаспоряжение) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		ЗаказПоставщику = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументРаспоряжение, "ЗаказПоставщику");
		Если ЗначениеЗаполнено(ЗаказПоставщику) Тогда
			Запрос.УстановитьПараметр("ДокументОснование", ЗаказПоставщику);
		Иначе
			Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументРаспоряжение);
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументРаспоряжение);
	КонецЕсли;
	Запрос.УстановитьПараметр("ДокументРаспоряжение", Объект.ДокументРаспоряжение);
	ВыборкаОформленныеДокументы = Запрос.Выполнить().Выбрать();
	
	ДатаГруппы = Дата(1,1,1);
	ГруппаОформленныхДокументов = Неопределено;
	
	Пока ВыборкаОформленныеДокументы.Следующий() Цикл
		
		Если не НачалоДня(ВыборкаОформленныеДокументы.Дата) = НачалоДня(ДатаГруппы) или ГруппаОформленныхДокументов = Неопределено Тогда
			ГруппаОформленныхДокументов = НоваяГруппаОформленныхДокументов(ВыборкаОформленныеДокументы.Дата);
		КонецЕсли;
		
		НовыйОформленныйДокумент(ГруппаОформленныхДокументов, ВыборкаОформленныеДокументы.Ссылка);
		
		ДатаГруппы = ВыборкаОформленныеДокументы.Дата;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НоваяГруппаОформленныхДокументов(ДатаОформления)
	
	ИмяГруппы = "Группа" + Формат(ДатаОформления, "ДФ=yyyyMMdd");
	
	НоваяГруппа = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ГруппаОформленныеДокументы);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	НоваяГруппа.Заголовок = Формат(ДатаОформления, "ДФ='d MMMM yyyy'");
	НоваяГруппа.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	НоваяГруппа.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
	
	Возврат НоваяГруппа;
	
КонецФункции

&НаСервере
Функция НовыйОформленныйДокумент(Группа, ДокументСсылка)
	
	ИдентификаторДокументаДляИменЭлементов = СтрЗаменить(Строка(ДокументСсылка.УникальныйИдентификатор()), "-", "");
	ИмяГруппыДокумента = "Группа" + ИдентификаторДокументаДляИменЭлементов;
	ИмяКнопкиДокумента = "Кнопка" + ИдентификаторДокументаДляИменЭлементов;
	ИмяКнопкиПечати = "Печать" + ИдентификаторДокументаДляИменЭлементов;
	
	НоваяСтрока = ОформленныеДокументы.Добавить();
	НоваяСтрока.ДокументСсылка = ДокументСсылка;
	НоваяСтрока.ИмяЭлементаФормы = ИмяГруппыДокумента;
	
	НоваяГруппаДокумента = Элементы.Добавить(ИмяГруппыДокумента, Тип("ГруппаФормы"), Группа);
	НоваяГруппаДокумента.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппаДокумента.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	НоваяГруппаДокумента.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппаДокумента.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
	НоваяГруппаДокумента.ОтображатьЗаголовок = Ложь;
	
	НоваяКнопка = Элементы.Добавить(ИмяКнопкиДокумента, Тип("КнопкаФормы"), НоваяГруппаДокумента);
	НоваяКнопка.Вид = ВидКнопкиФормы.Гиперссылка;
	НоваяКнопка.Заголовок = Строка(ДокументСсылка);
	НоваяКнопка.ИмяКоманды = "ДокументНажатие";
	НоваяКнопка.Ширина = 50;
	
	НоваяКнопка = Элементы.Добавить(ИмяКнопкиПечати, Тип("КнопкаФормы"), НоваяГруппаДокумента);
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		НоваяКнопка.Заголовок = НСтр("ru = 'Приходный ордер'");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		НоваяКнопка.Заголовок = НСтр("ru = 'Расходный ордер'");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОрдерНаПеремещениеТоваров") Тогда
		НоваяКнопка.Заголовок = НСтр("ru = 'Ордер на перемещение'");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктОРасхожденияхПриПриемкеТоваров") Тогда
		НоваяКнопка.Заголовок = НСтр("ru = 'Акт расхождений'");
	КонецЕсли;
	НоваяКнопка.Картинка = БиблиотекаКартинок.Печать;
	НоваяКнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
	НоваяКнопка.ИмяКоманды = "ВыполнитьКомандуПечати";
	
КонецФункции

&НаКлиенте
Процедура ДокументНажатие(Команда)
	
	ПоказатьЗначение(, ДокументСсылкаПоТекущемуЭлементу());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуПечати(Команда)
	
	ИсточникПечати = ДокументСсылкаПоТекущемуЭлементу();
	
	ИсточникиПечати = Новый Массив();
	ИсточникиПечати.Добавить(ИсточникПечати);
	
	Если ТипЗнч(ИсточникПечати) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("Представление", НСтр("ru = 'Приходный ордер на товары'"));
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ПриходныйОрдерНаТовары",
				"ПриходныйОрдерНаТовары",
				ИсточникиПечати,
				ЭтаФорма,
				ПараметрыПечати);
			
	ИначеЕсли ТипЗнч(ИсточникПечати) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("Представление", НСтр("ru = 'Расходный ордер на товары'"));
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.РасходныйОрдерНаТовары",
				"РасходныйОрдерНаТовары",
				ИсточникиПечати,
				ЭтаФорма,
				ПараметрыПечати);
				
	ИначеЕсли ТипЗнч(ИсточникПечати) = Тип("ДокументСсылка.ОрдерНаПеремещениеТоваров") Тогда
		
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("Представление", НСтр("ru = 'Ордер на перемещение товаров'"));
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ОрдерНаПеремещениеТоваров",
				"ОрдерНаПеремещениеТоваров",
				ИсточникиПечати,
				ЭтаФорма,
				ПараметрыПечати);
		
	ИначеЕсли ТипЗнч(ИсточникПечати) = Тип("ДокументСсылка.АктОРасхожденияхПриПриемкеТоваров") Тогда
		
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("Представление", НСтр("ru = 'Акт расхождений'"));
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.АктОРасхожденияхПриПриемкеТоваров",
				"АктРасхождений",
				ИсточникиПечати,
				ЭтаФорма,
				ПараметрыПечати);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДокументСсылкаПоТекущемуЭлементу()
	
	СтруктураПоискаДокумента = Новый Структура();
	СтруктураПоискаДокумента.Вставить("ИмяЭлементаФормы", ЭтаФорма.ТекущийЭлемент.Родитель.Имя);
	
	НайденныеСтроки = ОформленныеДокументы.НайтиСтроки(СтруктураПоискаДокумента);
	Если не НайденныеСтроки.Количество() = 0 Тогда
		Возврат НайденныеСтроки[0].ДокументСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УдалитьПодчиненныеЭлементы(ГруппаФормы)
	
	Если Не ТипЗнч(ГруппаФормы) = Тип("КнопкаФормы") Тогда
		
		МассивДляУдаления = Новый Массив();
		Для Каждого ПодчиненныйЭлемент Из ГруппаФормы.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(ТекущийЭлемент) = Тип("ГруппаФормы") Тогда
				УдалитьПодчиненныеЭлементы(ПодчиненныйЭлемент);
			КонецЕсли;
			МассивДляУдаления.Добавить(ПодчиненныйЭлемент);
		КонецЦикла;
		
		Для Каждого ТекущийЭлемент Из МассивДляУдаления Цикл
			Элементы.Удалить(ТекущийЭлемент);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
