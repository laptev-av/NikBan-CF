
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		
	Иначе
		
		ИдентификаторСтроки = НайтиСтрокуВТаблице(СтрокаРезультата);
		Если ИдентификаторСтроки = Неопределено Тогда
			ТекстПредупреждения = НСтр("ru = 'Номенклатура ""%1"" не найдена в табличной части ""Товары""'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтрокаРезультата.Номенклатура);
			СтруктураРезультат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		Иначе
			СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбработкаВопросаОНачалеВыбораОбъектаЦенообразования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
        
        // &ЗамерПроизводительности
        ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                 Истина, "Справочник.Магазины.Форма.ФормаВыбора.Открытие");

        СтруктураОтбора = Новый Структура("ИспользоватьПрименениеЦен", Истина);
		ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбора);
		ОткрытьФорму(
			"Справочник.Магазины.ФормаВыбора",
			ПараметрыОткрытия,
			ДополнительныеПараметры.Элемент,
			,
			,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаОбОчисткеТоваров(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоОтборуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ИспользоватьЦеновыеГруппы = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	Если НЕ ИспользоватьХарактеристикиНоменклатуры Тогда
		
		Элементы.ТаблицаЦенХарактеристика.Видимость = Ложь;

	КонецЕсли;
	
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	Если НЕ ИспользоватьУпаковкиНоменклатуры Тогда
		
		Элементы.ТаблицаЦенУпаковка.Видимость = Ложь;
		
	КонецЕсли;
		
	СтруктураОбъектаЦенообразования                = ЦенообразованиеПереопределяемый.ИспользуемыйОбъектЦенообразования();
	ИмяОбъектаЦенообразования                      = СтруктураОбъектаЦенообразования.ПредставлениеОбъекта;
	МассивОграниченияТипов                         = Новый Массив;
	МассивОграниченияТипов.Добавить(ТипЗнч(СтруктураОбъектаЦенообразования.Ссылка));
	Элементы.ОбъектЦенообразования.ОграничениеТипа = Новый ОписаниеТипов(МассивОграниченияТипов);
	Элементы.ОбъектЦенообразования.Заголовок       = ИмяОбъектаЦенообразования;
	
	Объект.ДатаАнализа   = ТекущаяДатаСеанса();	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	ЗагрузитьНастройкиОтбораПоУмолчанию(
		КомпоновщикНастроек,
		"МакетЗаполнения");
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Объект.ОбъектЦенообразования = Настройки.Получить("Объект.ОбъектЦенообразования");
	Если ЗначениеЗаполнено(Объект.ОбъектЦенообразования) Тогда
		
		ИспользоватьПрименение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
									Объект.ОбъектЦенообразования,
									"ИспользоватьПрименениеЦен");
		
		Если ИспользоватьПрименение Тогда
			УстановитьПравилоЦенообразования();
			ТекущееДействиеЗаполнения = "ДобавитьПоНазначеннымЦенам";
			ЗаполнитьПоОтборуНаСервере();
		Иначе
			Объект.ОбъектЦенообразования = Справочники.Магазины.ПустаяСсылка();
			Настройки["Объект.ОбъектЦенообразования"] = Объект.ОбъектЦенообразования;
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаАнализаПриИзменении(Элемент)
	
	ОчиститьТабличнуюЧасть();
	
	Если ЗначениеЗаполнено(Объект.ОбъектЦенообразования)
		И ЗначениеЗаполнено(Объект.ДатаАнализа) Тогда

		ТекущееДействиеЗаполнения = "ДобавитьПоНазначеннымЦенам";
		ЗаполнитьПоОтборуНаСервере();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектЦенообразованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТаблицаЦен.ПолучитьЭлементы().Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'Табличная часть будет перезаполнена.
								  |Продолжить редактирование?'");
			
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		ОбработчикОповещения = Новый ОписаниеОповещения(
										"ОбработкаВопросаОНачалеВыбораОбъектаЦенообразования",
										ЭтотОбъект,
										ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОбъектЦенообразованияПриИзменении(Элемент)
	
	ОчиститьТабличнуюЧасть();
	
	Если ЗначениеЗаполнено(Объект.ОбъектЦенообразования)
		И ЗначениеЗаполнено(Объект.ДатаАнализа) Тогда
		
		УстановитьПравилоЦенообразования(Истина);
		
	Иначе
		
		УстановитьПравилоЦенообразования();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаЦен

&НаКлиенте
Процедура ТаблицаЦенПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЦенПослеУдаления(Элемент)
	
	ЭлементыНоменклатура = ТаблицаЦен.ПолучитьЭлементы();
	ВсегоСтрок = ЭлементыНоменклатура.Количество();
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		
		Для каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
			
			ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
			КоличествоПодчиненных = ЭлементыХарактеристики.Количество();
			Если КоличествоПодчиненных > 0 Тогда
				ВсегоСтрок = ВсегоСтрок + КоличествоПодчиненных - 1;
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;
	КоличествоСтрокКПрименению = ВсегоСтрок;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("АдресТоваровВХранилище", ПоместитьВоВременноеХранилищеСервер());
	ДополнительныеПараметры.Вставить("ЭтоСсылочныйОбъект", Ложь);
	ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьПоОтбору(Команда)
	
	Если ТаблицаЦен.ПолучитьЭлементы().Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Таблица товаров будет перезаполнена. Продолжить?'");
			
		ДополнительныеПараметры = Новый Структура;
		ОбработчикОповещения = Новый ОписаниеОповещения(
										"ОбработкаВопросаОбОчисткеТоваров",
										ЭтотОбъект,
										ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ЗаполнитьПоОтборуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОтбор(Команда)
	
	ВидимостьОтбора = НЕ ВидимостьОтбора;
	Элементы.ГруппаОтбор.Видимость = ВидимостьОтбора;
	Элементы.ПоказатьСкрытьОтбор.Заголовок = ?(ВидимостьОтбора,
												НСтр("ru = 'Скрыть отбор'"),
												НСтр("ru = 'Показать отбор'"));
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЦенников(Команда)
	
	СтруктураПараметров = СтруктураПараметровПечатиЦенников();
	
	Если СтруктураПараметров.ПараметрыПодготовлены Тогда
		
		ЦенообразованиеКлиентПереопределяемый.ПечатьЭтикетокПрименениеЦенНоменклатуры(СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭтикеток(Команда)
	
	СтруктураПараметров = СтруктураПараметровПечатиЭтикеток();
	
	Если СтруктураПараметров.ПараметрыПодготовлены Тогда
		
		ЦенообразованиеКлиентПереопределяемый.ПечатьЭтикетокПрименениеЦенНоменклатуры(СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьЦены(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ПроверкаПередЗаполнениемНаКлиенте() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		
		ТекстОшибки = НСтр("ru = 'Поле ""Ответственный"" не заполнено'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,"Ответственный","Объект",Отказ);
		
	КонецЕсли;
		
	Если ТаблицаЦен.ПолучитьЭлементы().Количество() = 0 Тогда
		
		ТекстОшибки = НСтр("ru = 'Нет строк в табличной части для применения цен'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,"ТаблицаЦен",,Отказ);
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СформированныйДокумент =  СформироватьДокументПримененияЦенНоменклатуры();
	
	Если НЕ СформированныйДокумент.Пустая() Тогда
		
		ПоказатьЗначение(, СформированныйДокумент);
		ИсторияРаботыПользователя.Добавить(СформированныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПоОтборуНаСервере()
	
	РезультатПроверки = ЭтаФорма.ПроверитьЗаполнение();
	Если НЕ РезультатПроверки Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЦен.ПолучитьЭлементы().Очистить();
	
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("УстанавливатьВидыЦенВАссортименте")
								И АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.ОбъектЦенообразования);
	Если ИспользоватьАссортимент Тогда
		СхемаКомпоновкиДанных = Обработки.КонтрольПримененияЦенНоменклатуры.ПолучитьМакет("МакетЗаполненияАссортимент");
	Иначе
		СхемаКомпоновкиДанных = Обработки.КонтрольПримененияЦенНоменклатуры.ПолучитьМакет("МакетЗаполнения");
	КонецЕсли;
	// Подготовка компоновщика макета компоновки данных.
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
	
	ОбщегоНазначенияРТКлиентСервер.СкопироватьЭлементы(Компоновщик.Настройки.Отбор, КомпоновщикНастроек.Настройки.Отбор);
	
	УстановитьЗначениеПараметраСКД(Компоновщик, "Период", Объект.ДатаАнализа);
	УстановитьЗначениеПараметраСКД(Компоновщик, "ОбъектЦенообразования", Объект.ОбъектЦенообразования);
	Если ИспользоватьАссортимент Тогда
		УстановитьЗначениеПараметраСКД(
			Компоновщик,
			"ФорматМагазина",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ОбъектЦенообразования, "ФорматМагазина"));
		
	Иначе
		УстановитьЗначениеПараметраСКД(
			Компоновщик,
			"ПравилоЦенообразования",
			Объект.ПравилоЦенообразования);
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Процессор = Новый ПроцессорКомпоновкиДанных;
	Процессор.Инициализировать(МакетКомпоновкиДанных);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ИсходныеДанные = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ИсходныеДанные);
	ПроцессорВывода.Вывести(Процессор);
	
	ДеревоЦенЗначение = РеквизитФормыВЗначение("ТаблицаЦен", Тип("ДеревоЗначений"));
	КоличествоСтрок = 0;
	
	Для Каждого СтрокаДерева Из ИсходныеДанные.Строки Цикл
		
		ПараметрыОтбора = Новый Структура("Номенклатура", СтрокаДерева.Номенклатура);
		НайденныеСтроки = ДеревоЦенЗначение.Строки.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ЭлементНоменклатура = НайденныеСтроки[0];
			
		Иначе
			
			ЭлементНоменклатура = ДеревоЦенЗначение.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементНоменклатура, СтрокаДерева);
			ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементНоменклатура);
			КоличествоСтрок = КоличествоСтрок + 1;
			
		КонецЕсли;
		Если ИспользоватьХарактеристики Тогда
			Для Каждого СтрокаХарактеристики Из СтрокаДерева.Строки Цикл
				
				Если ЗначениеЗаполнено(СтрокаХарактеристики.Характеристика) Тогда
					ЭлементНоменклатура.ХарактеристикиИспользуются = Истина;
					
					Если ИспользоватьХарактеристикиНоменклатуры Тогда
						
						ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика",
													СтрокаХарактеристики.Номенклатура,
													СтрокаХарактеристики.Характеристика);
						НайденныеСтроки = ЭлементНоменклатура.Строки.НайтиСтроки(ПараметрыОтбора);
						
						Если НайденныеСтроки.Количество() > 0 Тогда
							
							ЭлементХарактеристика = НайденныеСтроки[0];
							
						Иначе
							
 							ЭлементХарактеристика = ЭлементНоменклатура.Строки.Добавить();
							ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, СтрокаХарактеристики);
							ЭлементХарактеристика.ХарактеристикиИспользуются = Истина;
							ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
							КоличествоСтрок = КоличествоСтрок + 1; 
							
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					ЗаполнитьЗначенияСвойств(ЭлементНоменклатура, СтрокаХарактеристики);
					
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Для Каждого СтрокаХарактеристики Из СтрокаДерева.Строки Цикл
				ЗаполнитьЗначенияСвойств(ЭлементНоменклатура, СтрокаХарактеристики);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЦенЗначение, "ТаблицаЦен");	
	ОбновитьКоличествоСтрок();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКоличествоСтрок()
	
	ЭлементыНоменклатура = ТаблицаЦен.ПолучитьЭлементы();
	ВсегоСтрок = ЭлементыНоменклатура.Количество();
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		
		Для каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
			
			ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
			КоличествоПодчиненных = ЭлементыХарактеристики.Количество();
			Если КоличествоПодчиненных > 0 Тогда
				ВсегоСтрок = ВсегоСтрок + КоличествоПодчиненных - 1;
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;
	КоличествоСтрокКПрименению = ВсегоСтрок;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧасть()
	
	СтрокиТаблицы = ТаблицаЦен.ПолучитьЭлементы();
	Если СтрокиТаблицы.Количество() > 0 Тогда
		СтрокиТаблицы.Очистить();
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Функция СтруктураПараметровПечатиЦенников()
	
	Если ПроверитьЗаполнение() Тогда
		
		СтруктураПараметров = ЦенообразованиеПереопределяемый.ПодготовитьСтруктуруПечатиЦенников(ЭтаФорма, Объект);
		СтруктураПараметров.Вставить("ПараметрыПодготовлены", Истина);
		
	Иначе
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПараметрыПодготовлены", Ложь);
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция СтруктураПараметровПечатиЭтикеток()
	
	Если ПроверитьЗаполнение() Тогда
		
		СтруктураПараметров = ЦенообразованиеПереопределяемый.ПодготовитьСтруктуруПечатиЭтикеток(ЭтаФорма, Объект);
		СтруктураПараметров.Вставить("ПараметрыПодготовлены", Истина);
		
	Иначе
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПараметрыПодготовлены", Ложь);
        		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Функция ПроверкаПередЗаполнениемНаКлиенте()
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектЦенообразования) Тогда
		
		ТекстОшибки = НСтр("ru='Поле ""Магазин"" не заполнено'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,"Объект.ОбъектЦенообразования",,Отказ);
				
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаАнализа) Тогда
		
		ТекстОшибки = НСтр("ru='Поле ""На дату"" не заполнено'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,"Объект.ДатаАнализа",,Отказ);
		
	КонецЕсли;	
			
	Возврат НЕ Отказ;
	
КонецФункции

&НаСервере
Функция СформироватьДокументПримененияЦенНоменклатуры()
	
	ЭлементыНоменклатура = ТаблицаЦен.ПолучитьЭлементы();

	НомерСтроки = 0;
	Отказ = Ложь;
	
	
	Для Каждого ТекЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		Если ТекЭлементНоменклатура.ХарактеристикиИспользуются Тогда
			
			ДобавленыХарактеристики = Ложь;
			
			ЭлементыХарактеристики = ТекЭлементНоменклатура.ПолучитьЭлементы();
			Для Каждого ТекЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				
				НомерСтроки = НомерСтроки + 1;
				ДобавленыХарактеристики = Истина;
				
			КонецЦикла;
			
			Если Не ДобавленыХарактеристики Тогда
				
				ТекстОшибки = НСтр("ru='Для номенклатуры ""%1"" в строке ""%2"" списка ""Таблица цен"" включено использование характеристик. Но ни одной характеристики не указано. Добавьте характеристики и укажите их цены или удалите данную номенклатуру из списка.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ТекстОшибки,
								ТекЭлементНоменклатура.Номенклатура,
								НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТаблицаЦен", НомерСтроки, "Номенклатура"),
					,
					Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Если Отказ Тогда
		Возврат Документы.ПрименениеЦенНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	ВыполненоУспешно                                  = Ложь;
	ДокументОбъектПрименениеЦен                       = Документы.ПрименениеЦенНоменклатуры.СоздатьДокумент();
	ДокументОбъектПрименениеЦен.Дата                  = Объект.ДатаАнализа;
	ДокументОбъектПрименениеЦен.ОбъектЦенообразования = Объект.ОбъектЦенообразования;
	ДокументОбъектПрименениеЦен.Ответственный         = Объект.Ответственный;
	
	ДеревоЦенЗначение = РеквизитФормыВЗначение("ТаблицаЦен", Тип("ДеревоЗначений"));
	
	Для каждого СтрокаНоменклатура Из ДеревоЦенЗначение.Строки Цикл
		
		Если НЕ СтрокаНоменклатура.ХарактеристикиИспользуются Тогда
			
			НовСтрокаТовары                = ДокументОбъектПрименениеЦен.Товары.Добавить();
			НовСтрокаТовары.Цена           = СтрокаНоменклатура.Цена0;
			НовСтрокаТовары.Номенклатура   = СтрокаНоменклатура.Номенклатура;
			НовСтрокаТовары.Упаковка       = СтрокаНоменклатура.Упаковка;
			
		КонецЕсли;
		
		Для каждого СтрокаХарактеристика Из СтрокаНоменклатура.Строки Цикл
			
			НовСтрокаТовары                = ДокументОбъектПрименениеЦен.Товары.Добавить();
			НовСтрокаТовары.Цена           = СтрокаХарактеристика.Цена0;
			НовСтрокаТовары.Номенклатура   = СтрокаХарактеристика.Номенклатура;
			НовСтрокаТовары.Характеристика = СтрокаХарактеристика.Характеристика;
			НовСтрокаТовары.Упаковка       = СтрокаХарактеристика.Упаковка;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ДокументОбъектПрименениеЦен.ПроверитьЗаполнение() Тогда
			
		Попытка
			
			ДокументОбъектПрименениеЦен.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
			ТаблицаЦен.ПолучитьЭлементы().Очистить();
			ТекущееДействиеЗаполнения = "ДобавитьПоНазначеннымЦенам";
			ЗаполнитьПоОтборуНаСервере();
			
			ВыполненоУспешно = Истина;
			
		Исключение
			
			Инфо = ИнформацияОбОшибке();
			ТекстСообщенияОбОшибке = НСтр("ru = 'Ошибка при попытке проведения документа: %1'");
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										ТекстСообщенияОбОшибке,
										КраткоеПредставлениеОшибки(Инфо));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ценообразование.Создание применения цен номенклатуры'",
											ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
										УровеньЖурналаРегистрации.Ошибка,
										,
										,
										Инфо);
			
		КонецПопытки;
		
		
	КонецЕсли;
	
	Значение = ?(ВыполненоУспешно,
		ДокументОбъектПрименениеЦен.Ссылка,
		Документы.ПрименениеЦенНоменклатуры.ПустаяСсылка());
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Процедура УстановитьПравилоЦенообразования(ПерезаполнитьЦены = Ложь)
	
	Объект.ПравилоЦенообразования = Объект.ОбъектЦенообразования.ПравилоЦенообразования;
	Объект.ФорматМагазина 		  = Объект.ОбъектЦенообразования.ФорматМагазина;
	
	Если ПерезаполнитьЦены Тогда
		
		ТекущееДействиеЗаполнения = "ДобавитьПоНазначеннымЦенам";
		ЗаполнитьПоОтборуНаСервере();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИндексКартинкиСтрокиДереваЦен(СтрокаДереваЦен)
	
	Если ТипЗнч(СтрокаДереваЦен) = Тип("ДанныеФормыЭлементДерева") Тогда
		Если СтрокаДереваЦен.ПолучитьРодителя() = Неопределено Тогда
			СтрокаДереваЦен.ИндексКартинки = 0;
		Иначе
			СтрокаДереваЦен.ИндексКартинки = 2;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СтрокаДереваЦен) = Тип("СтрокаДереваЗначений") Тогда
		Если СтрокаДереваЦен.Родитель = Неопределено Тогда
			СтрокаДереваЦен.ИндексКартинки = 0;
		Иначе
			СтрокаДереваЦен.ИндексКартинки = 2;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию(Компоновщик, ИмяМакета)
	
	СхемаКомпоновкиДанных = Обработки.КонтрольПримененияЦенНоменклатуры.ПолучитьМакет(ИмяМакета);
	АдресСКД = ПоместитьВоВременноеХранилище(
					СхемаКомпоновкиДанных,
					ЭтаФорма.УникальныйИдентификатор);
	Источник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
	Компоновщик.Инициализировать(Источник);
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

&НаСервере
Функция УстановитьЗначениеПараметраСКД(Компоновщик, ИмяПараметра, ЗначениеПараметра, ИспользоватьНеЗаполненный = Истина)
	
	ПараметрУстановлен = Ложь;
	
	ПараметрВидЦены = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЗначениеПараметраВидЦены = Компоновщик.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрВидЦены);
	Если ЗначениеПараметраВидЦены <> Неопределено Тогда
		
		ЗначениеПараметраВидЦены.Значение = ЗначениеПараметра;
		ЗначениеПараметраВидЦены.Использование = ?(ИспользоватьНеЗаполненный, Истина, ЗначениеЗаполнено(ЗначениеПараметраВидЦены.Значение));
		
		ПараметрУстановлен = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрУстановлен;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента, "ТаблицаЦен");
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуВТаблице(СтруктураРезультат)
	
	ИдентификаторСтроки = Неопределено;
	
	СтрокиТаблицы = ТаблицаЦен.ПолучитьЭлементы();
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		Если СтрокаТаблицы.Номенклатура = СтруктураРезультат.Номенклатура Тогда
			ИдентификаторСтроки = СтрокаТаблицы.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ПоместитьВоВременноеХранилищеСервер()
	
	ТаблицаЦенЗначение = Новый ТаблицаЗначений;
	ТаблицаЦенЗначение.Колонки.Добавить("НомерСтроки", ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 0));
	ТаблицаЦенЗначение.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЦенЗначение.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаЦенЗначение.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаЦенЗначение.Колонки.Добавить("Цена", ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	НомерСтроки = 0;
	СтрокиТаблицы = ТаблицаЦен.ПолучитьЭлементы();
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		ПодчиненныеСтроки = СтрокаТаблицы.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() = 0 Тогда
			НомерСтроки = НомерСтроки + 1;
			НоваяСтрока = ТаблицаЦенЗначение.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.НомерСтроки = НомерСтроки;
			НоваяСтрока.Цена = СтрокаТаблицы.Цена0;
		Иначе
			Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
				НомерСтроки = НомерСтроки + 1;
				НоваяСтрока = ТаблицаЦенЗначение.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодчиненнаяСтрока);
				НоваяСтрока.НомерСтроки = НомерСтроки;
				НоваяСтрока.Цена = ПодчиненнаяСтрока.Цена0;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	АдресВХранилище = ПоместитьВоВременноеХранилище(ТаблицаЦенЗначение, УникальныйИдентификатор);
	Возврат АдресВХранилище;
	
КонецФункции

#КонецОбласти
