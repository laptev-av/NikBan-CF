#Область ПеременныеМодуля

&НаСервере
Перем СоответствиеЗаголовка;
Перем СоответствиеОкончанияНаименования;

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОповещениеОткрытьФормуСозданияОплаты(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	ДоступностьКнопокВидовОплаты();
КонецПроцедуры

&НаКлиенте
// Завершение настройки оборудования.
//
Процедура ВыполнитьНастройкуОборудованияЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьСообщениеДрайвера();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуСозданияЭквайринговогоТерминала(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	МассивЭТ = Новый Массив;
	ПриИзмененииСтраницыЭквайринговыхТерминаловСервер(МассивЭТ);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		ЭквайринговыеТерминалы,
		"Ссылка",
		МассивЭТ,
		Истина,
		ВидСравненияКомпоновкиДанных.ВСписке);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Обработка.ПомощникНастройкиКассовогоМеста.Форма.Форма.Открытие");
	

	#Если Не ВебКлиент Тогда
	мИмяКомпьютера = ИмяКомпьютера();
	#КонецЕсли
	
	ОтборыСписковКлиентСервер.УстановитьПараметрДинамическогоСписка(НастройкиРМК, "Компьютер", мИмяКомпьютера, Истина);
	
	ИндикаторИсполнения = 0;
	
	ВыполнитьДействияПереходаНаСтраницу(0);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	МагазинПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НесколькоОрганизацийПриИзменении(Элемент)
	
	Если НесколькоОрганизаций Тогда
		
		Элементы.СтраницыОрганизаций.ТекущаяСтраница = Элементы.СтраницаНесколькоОрганизаций;
		
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			ЗаполнитьТаблицуОрганизацийПоОднойОрганизации();
		КонецЕсли;
		
	Иначе
		
		Элементы.СтраницыОрганизаций.ТекущаяСтраница = Элементы.СтраницаОднаОрганизация;
		
		Если Объект.Организации.Количество() > 0 Тогда
			Объект.Организация = Объект.Организации[0].Организация;
		КонецЕсли;
		ЗаполнитьТаблицуОрганизацийПоОднойОрганизации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПодключаемоеОборудованиеПриИзменении(Элемент)
	ПриИзмененииРеквизитовОборудования();
КонецПроцедуры

&НаКлиенте
Процедура ДрайверОборудованияПриИзменении(Элемент)
	ПриИзмененииРеквизитовОборудования();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеРабочегоМестаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Элементы.СоздатьРабочееМесто.Заголовок = "Сохранить";
	Элементы.СоздатьРабочееМесто.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииТипКассыПриИзменении(Элемент)
	ПриИзмененииРеквизитовКассаККМ();
	
	ТекущиеДанные = Элементы.Организации.ТекущиеДанные;
	ДоступностьПО = ТекущиеДанные.ТипКассы = ПредопределенноеЗначение("Перечисление.ТипыКассККМ.ФискальныйРегистратор");
	
	Элементы.ОрганизацииПодключаемоеОборудование.Доступность = ДоступностьПО;
	Элементы.ОрганизацииШаблонЧекаККМ.Доступность            = ДоступностьПО;
	Элементы.ОрганизацииШаблонЧекаККМВозврат.Доступность     = ДоступностьПО;
	Элементы.ОрганизацииШиринаЛенты.Доступность              = ДоступностьПО;
	
	Элементы.ОрганизацииНастройкаРаспределенияВыручкиПоСекциям.Доступность = ДоступностьПО;
	ТекущиеДанные.ИспользоватьБезПодключенияОборудования = НЕ ДоступностьПО;
	
	Если НЕ ДоступностьПО Тогда
		
		ТекущиеДанные.ПодключаемоеОборудование = ПредопределенноеЗначение("Справочник.ПодключаемоеОборудование.ПустаяСсылка");
		ТекущиеДанные.ШаблонЧекаККМ            = ПредопределенноеЗначение("Справочник.ХранилищеШаблонов.ПустаяСсылка");
		ТекущиеДанные.ШаблонЧекаККМВозврат     = ПредопределенноеЗначение("Справочник.ХранилищеШаблонов.ПустаяСсылка");
		ТекущиеДанные.ШиринаЛенты              = 0;
		
		ТекущиеДанные.НастройкаРаспределенияВыручкиПоСекциям = ПредопределенноеЗначение("Справочник.НастройкиРаспределенияВыручкиПоСекциямФР.ПустаяСсылка");
	Иначе
		ТекущиеДанные.НастройкаРаспределенияВыручкиПоСекциям = ПредопределенноеЗначение("Справочник.НастройкиРаспределенияВыручкиПоСекциямФР.РаспределениеПоУмолчанию");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииНаименованиеПриИзменении(Элемент)
	ПриИзмененииРеквизитовКассаККМ();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииСерийныйНомерПриИзменении(Элемент)
	ПриИзмененииРеквизитовКассаККМ();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииРегистрационныйНомерПриИзменении(Элемент)
	ПриИзмененииРеквизитовКассаККМ();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииПодключаемоеОборудованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Организации.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ИндексСтроки = Объект.Организации.Индекс(ТекущиеДанные);
		ПриИзмененииПодключаемоеОборудованиеСервер(ИндексСтроки);
	КонецЕсли;
	
	ПриИзмененииРеквизитовКассаККМ();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииНастройкаРаспределенияВыручкиПоСекциямПриИзменении(Элемент)
	ПриИзмененииРеквизитовКассаККМ();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииШаблонЧекаККМПриИзменении(Элемент)
	ПриИзмененииРеквизитовКассаККМ();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииШаблонЧекаККМВозвратПриИзменении(Элемент)
	ПриИзмененииРеквизитовКассаККМ();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииШиринаЛентыПриИзменении(Элемент)
	ПриИзмененииРеквизитовКассаККМ();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеКассаПриИзменении(Элемент)
	
	ПриИзмененииРеквизитовКасса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПробиватьЧекиПоКассеККМКассаПриИзменении(Элемент)
	
	ПриИзмененииРеквизитовКасса();
	
	Элементы.КассаККМКасса.Доступность  = ПробиватьЧекиПоКассеККМКасса;
	Элементы.ШаблонРКОКасса.Доступность = ПробиватьЧекиПоКассеККМКасса;
	Элементы.ШаблонПКОКасса.Доступность = ПробиватьЧекиПоКассеККМКасса;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМКассаПриИзменении(Элемент)
	
	ПриИзмененииРеквизитовКасса();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонРКОКассаПриИзменении(Элемент)
	
	ПриИзмененииРеквизитовКасса();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонПКОКассаПриИзменении(Элемент)
	
	ПриИзмененииРеквизитовКасса();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиРМКПриАктивизацииСтроки(Элемент)
	
	УстановитьЗаголовокКнопки();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПОПриИзменении(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	НастройкаПО = ЭтотОбъект[ИмяЭлемента];
	ИмяОборудования = СтрЗаменить(ИмяЭлемента, "НастройкаПО", "");
	ИмяДекорации = СтрЗаменить(ИмяЭлемента, "НастройкаПО", "ДекорацияКПодключению");
	Если НастройкаПО Тогда
		Если ИмяОборудования = "ФискальныеРегистраторы" 
			ИЛИ ИмяОборудования = "ЭквайринговыйТерминал" Тогда
			ИмяДекорацииЗаголовок = Формат(Объект.Организации.Количество(),"ЧН=0; ЧГ=0");
		Иначе
			ИмяДекорацииЗаголовок = "1";
		КонецЕсли;
	Иначе
		ИмяДекорацииЗаголовок = "0";
	КонецЕсли;
	
	ШрифтЖирный = Новый Шрифт("Arial",11,Истина);
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		ИмяДекорацииЗаголовок,
		ШрифтЖирный));
	
	Элементы[ИмяДекорации].Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьРабочееМесто(Команда)
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("ИмяКомпьютера");
	ПараметрыСоздания.Вставить("ИдентификаторКлиента");
	
	#Если Не ВебКлиент Тогда
		ПараметрыСоздания.ИмяКомпьютера = ИмяКомпьютера();
	#КонецЕсли
	
	ПараметрыСоздания.ИдентификаторКлиента = ВРег(СистемнаяИнформация.ИдентификаторКлиента);
	
	НавигационнаяСсылка = СоздатьРабочееМестоСервер(ПараметрыСоздания);
	НаименованиеРабочегоМестаПриИзмененииКлиент();
	ПоказатьОповещениеПользователя(,НавигационнаяСсылка, Объект.РабочееМесто);
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ВыполнитьДействияПереходаНаСтраницу(1);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ВыполнитьДействияПереходаНаСтраницу(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИзменитьПодключаемоеОборудование(Команда)
	
	Если НЕ ЗначениеЗаполнено(ДрайверОборудования) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнен драйвер оборудования'") ,
			Объект,
			"ДрайверОборудования" ,
			,
		);
	Иначе
		НавигационнаяСсылка = СоздатьИзменитьПодключаемоеОборудованиеНаСервере();
		ПоказатьОповещениеПользователя(,НавигационнаяСсылка, ПодключаемоеОборудование);
		ОбновитьСообщениеДрайвера();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьПодключаемоеОборудование(Команда)
	
	НавигационнаяСсылка = ОтключитьПодключаемоеОборудованиеНаСервере();
	
	ОбновитьСообщениеДрайвера();
	
	Если ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		ПоказатьОповещениеПользователя(,НавигационнаяСсылка, СсылкаНавигации);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОборудование(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ВыполнитьНастройкуОборудованияЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.ВыполнитьНастройкуОборудования(ПодключаемоеОборудование, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДополнительныеПрава(Команда)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "РегистрСведений.ЗначенияДополнительныхПравПользователя.Форма.ФормаРедактирования.Открытие");

	ПараметрыФормы = Новый Структура;
	ТекущиеДанные = Элементы.Пользователи.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ПараметрыФормы.Вставить("Пользователь", ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("РегистрСведений.ЗначенияДополнительныхПравПользователя.Форма.ФормаРедактирования", ПараметрыФормы,ЭтотОбъект,,,,, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИзменитьКассуККМ(Команда)
	
	ТекущиеДанные = Элементы.Организации.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Отказ = Ложь;
		
		ИндексСтроки = Объект.Организации.Индекс(ТекущиеДанные);
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ТипКассы) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнен тип кассы ККМ'"),
				Объект,
				"Элементы.Организации.ТекущиеДанные.ТипКассы",
				,
				Отказ
			);
		КонецЕсли;
		
		Если ТекущиеДанные.ТипКассы = ПредопределенноеЗначение("Перечисление.ТипыКассККМ.ФискальныйРегистратор") Тогда
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ПодключаемоеОборудование) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Не заполнено подключаемое оборудование'"),
					Объект,
					"Элементы.Организации.ТекущиеДанные.ПодключаемоеОборудование",
					,
					Отказ
				);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.НастройкаРаспределенияВыручкиПоСекциям) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Не заполнено распределение выручки'"),
					Объект,
					"Элементы.Организации.ТекущиеДанные.НастройкаРаспределенияВыручкиПоСекциям",
					,
					Отказ
				);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			НавигационнаяСсылка = СоздатьИзменитьКассуККМНаСервере(ИндексСтроки);
			ПоказатьОповещениеПользователя(,НавигационнаяСсылка, СсылкаНавигации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОплатуПлатежнойКартой(Команда)
	СоздатьОплатуКлиент("ПлатежнаяКарта", НСтр("ru = 'Платежная карта'"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОплатуБанковскимКредитом(Команда)
	СоздатьОплатуКлиент("БанковскийКредит", НСтр("ru = 'Банковский кредит'"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИзменитьКассу(Команда)
	
	Отказ = Ложь;
	
	Если ПробиватьЧекиПоКассеККМКасса 
		И НЕ ЗначениеЗаполнено(КассаККМКасса) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнена касса ККМ'"),
			Объект,
			"КассаККМКасса",
			,
			Отказ
		);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		НавигационнаяСсылка = СоздатьИзменитьКассуНаСервере();
		ПоказатьОповещениеПользователя(,НавигационнаяСсылка, Касса);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюНастройкуРМК(Команда)
	
	ТекущаяСтрока = Элементы.НастройкиРМК.ТекущаяСтрока;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
	
		НастройкаРМК = ТекущаяСтрока;
		Если ЗначениеЗаполнено(НастройкаРМК) Тогда
			
			УстановитьТекущуюНастройкуРМКСервер(НастройкаРМК);
			
		КонецЕсли;
	КонецЕсли;
	
	УстановитьЗаголовокКнопки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодключаемоеОборудование(Команда)
	
	ПараметрыВыполненияКоманды = Новый Структура;
	ПараметрыВыполненияКоманды.Вставить("Источник", ЭтаФорма);
	ПараметрыВыполненияКоманды.Вставить("Уникальность", УникальныйИдентификатор);
	ПараметрыВыполненияКоманды.Вставить("Окно",);
	
	МенеджерОборудованияКлиент.ОткрытьПодключаемоеОборудование(Неопределено, ПараметрыВыполненияКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьПодключенноеОборудованиеВКассеККМ(Команда)
	
	ТекущиеДанные = Элементы.Организации.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ИндексСтроки = Объект.Организации.Индекс(ТекущиеДанные);
		НавигационнаяСсылка = ИсправитьПодключенноеОборудованиеВКассеККМСервер(ИндексСтроки);
		Если ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
			ПоказатьОповещениеПользователя(,НавигационнаяСсылка, СсылкаНавигации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭквайринговыйТерминал(Команда)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Магазин" , Объект.Магазин);
	
	ЗаполнениеТаблицыСозданияЭТ();
	Если ТаблицаСозданияЭТ.Количество() > 0 Тогда
		
		СтрокаТаблицы = ТаблицаСозданияЭТ[0];
		ЗначенияЗаполнения.Вставить("Организация", СтрокаТаблицы.Организация);
		ЗначенияЗаполнения.Вставить("Касса"      , СтрокаТаблицы.Касса);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПодключаемоеОборудование) Тогда
			ЗначенияЗаполнения.Вставить("ПодключаемоеОборудование", СтрокаТаблицы.ПодключаемоеОборудование);
			ЗначенияЗаполнения.Вставить("ИспользоватьБезПодключенияОборудования", Ложь);
		Иначе
			ЗначенияЗаполнения.Вставить("ИспользоватьБезПодключенияОборудования", Истина);
		КонецЕсли;
	ИначеЕсли НЕ НесколькоОрганизаций Тогда
		ЗначенияЗаполнения.Вставить("Организация", ОрганизацияКассаККМ);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуСозданияЭквайринговогоТерминала", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ЭквайринговыеТерминалы.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЭквайринговыйТерминал(Команда)
	
	ТекущиеДанные = Элементы.ЭквайринговыеТерминалы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Ссылка);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ЭквайринговыеТерминалы.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,, Режим);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииОбщие

&НаКлиенте
Процедура ВыполнитьДействияПереходаНаСтраницу(ИтераторНаправления)
	
	ИмяТекущейСтраницы = Элементы.Страницы.ТекущаяСтраница.Имя;
	
	Отказ = Ложь;
	Если ИтераторНаправления > 0 Тогда
		ПроверитьВозможностьПерехода(ИмяТекущейСтраницы, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИтераторСменыТипаСтраницы = ИтераторНаправления;
	Если ИмяТекущейСтраницы = "СтраницаОбщиеПараметры" Тогда
		
		ИспользоватьПодключаемоеОборудование   = КонстантыНабор.ИспользоватьПодключаемоеОборудование;
		ИспользоватьОплатуПлатежнымиКартами    = КонстантыНабор.ИспользоватьОплатуПлатежнымиКартами;
		ИспользоватьОплатуБанковскимиКредитами = КонстантыНабор.ИспользоватьОплатуБанковскимиКредитами;
		СписокИменСтраниц.Очистить();
		Для каждого ПодчиненныйЭлемент Из Элементы.Страницы.ПодчиненныеЭлементы Цикл
			Если ПодчиненныйЭлемент.Имя = "СтраницаПодключаемоеОборудование" Тогда
				Если ИспользоватьПодключаемоеОборудование Тогда
					СписокИменСтраниц.Добавить(ПодчиненныйЭлемент.Имя);
				КонецЕсли;
			ИначеЕсли ПодчиненныйЭлемент.Имя = "СтраницаТипыОборудования" Тогда
				Если ИспользоватьПодключаемоеОборудование Тогда
					СписокИменСтраниц.Добавить(ПодчиненныйЭлемент.Имя);
				КонецЕсли;
			ИначеЕсли ПодчиненныйЭлемент.Имя = "СтраницаЭквайринговыеТерминалы" Тогда
				Если ИспользоватьОплатуПлатежнымиКартами Тогда
					СписокИменСтраниц.Добавить(ПодчиненныйЭлемент.Имя);
				КонецЕсли;
			ИначеЕсли ПодчиненныйЭлемент.Имя = "СтраницаВидыОплат" Тогда
				Если ИспользоватьОплатуПлатежнымиКартами 
					ИЛИ ИспользоватьОплатуБанковскимиКредитами Тогда
					СписокИменСтраниц.Добавить(ПодчиненныйЭлемент.Имя);
				КонецЕсли;
			Иначе
				СписокИменСтраниц.Добавить(ПодчиненныйЭлемент.Имя);
			КонецЕсли;
		КонецЦикла;
		
		ИндексСтрокиПодключаемоеОборудование = -1;
		ИндексСтрокиОрганизации              = -1;
		ИндексСтрокиКасса                    = -1;
		
		Элементы.ИндикаторИсполнения.МаксимальноеЗначение = СписокИменСтраниц.Количество() - 1;
		
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаТипыОборудования" Тогда
		
		ЕстьНастройкиПО = ЕстьНастройкиПО();
		ЭлементСписка =  СписокИменСтраниц.НайтиПоЗначению("СтраницаПодключаемоеОборудование");
		Если НЕ ЕстьНастройкиПО Тогда
			Если НЕ ЭлементСписка = Неопределено Тогда
				СписокИменСтраниц.Удалить(ЭлементСписка)
			КонецЕсли;
		Иначе
			Если ЭлементСписка = Неопределено Тогда
				ИндексСтраницы = СписокИменСтраниц.Индекс(СписокИменСтраниц.НайтиПоЗначению(ИмяТекущейСтраницы));
				СписокИменСтраниц.Вставить(ИндексСтраницы + 1, "СтраницаПодключаемоеОборудование");
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ИндикаторИсполнения.МаксимальноеЗначение = СписокИменСтраниц.Количество() - 1;
		
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаПодключаемоеОборудование" Тогда
		Если ИтераторНаправления > 0 Тогда
			Если (Объект.ТаблицаПодключаемоеОборудование.Количество()-1) > ИндексСтрокиПодключаемоеОборудование Тогда 
				// Не достигли конца таблицы
				ИтераторСменыТипаСтраницы = 0;
			КонецЕсли;
		ИначеЕсли ИтераторНаправления < 0 Тогда
			Если ИндексСтрокиПодключаемоеОборудование > 0 Тогда
				// Не достигли начала таблицы
				ИтераторСменыТипаСтраницы = 0;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаКассаККМ" Тогда
		Если ИтераторНаправления > 0 Тогда
			Если (Объект.Организации.Количество()-1) > ИндексСтрокиОрганизации Тогда
				// Не достигли конца таблицы
				ИтераторСменыТипаСтраницы = 0;
			КонецЕсли;
		ИначеЕсли ИтераторНаправления < 0 Тогда
			Если ИндексСтрокиОрганизации > 0 Тогда
				// Не достигли начала таблицы
				ИтераторСменыТипаСтраницы = 0;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаКасса" Тогда
		Если ИтераторНаправления > 0 Тогда
			Если (Объект.Кассы.Количество()-1) > ИндексСтрокиКасса Тогда
				// Не достигли конца таблицы
				ИтераторСменыТипаСтраницы = 0;
			КонецЕсли;
		ИначеЕсли ИтераторНаправления < 0 Тогда
			Если ИндексСтрокиКасса > 0 Тогда
				// Не достигли начала таблицы
				ИтераторСменыТипаСтраницы = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ИндексСтраницы = СписокИменСтраниц.Индекс(СписокИменСтраниц.НайтиПоЗначению(ИмяТекущейСтраницы));
	ИндексСтраницы = ИндексСтраницы + ИтераторСменыТипаСтраницы;
	Если ИндексСтраницы > (СписокИменСтраниц.Количество()-1) Тогда
		ИндексСтраницы = СписокИменСтраниц.Количество()-1;
	ИначеЕсли ИндексСтраницы < 0 Тогда
		ИндексСтраницы = 0;
	КонецЕсли;
	ИмяСтраницы = СписокИменСтраниц[ИндексСтраницы].Значение;
	
	Если ИтераторСменыТипаСтраницы = -1 
		И ИмяСтраницы = "СтраницаПодключаемоеОборудование" 
		И ИмяТекущейСтраницы = "СтраницаКассаККМ" Тогда
		ИндексСтрокиПодключаемоеОборудование = Объект.ТаблицаПодключаемоеОборудование.Количество();
	КонецЕсли;
	
	Если ИтераторСменыТипаСтраницы = -1 
		И ИмяСтраницы = "СтраницаКассаККМ"
		И ИмяТекущейСтраницы = "СтраницаКасса" Тогда
		ИндексСтрокиОрганизации = Объект.Организации.Количество();
	КонецЕсли;
	
	Если ИтераторСменыТипаСтраницы = -1 
		И ИмяСтраницы = "СтраницаКасса"
		И (ИмяТекущейСтраницы = "СтраницаВидыОплат" 
		ИЛИ ИмяТекущейСтраницы = "СтраницаНастройкиРМК") Тогда
		ИндексСтрокиКасса = Объект.Кассы.Количество();
	КонецЕсли;
	
	ЗаполнениеДаннымиПерехода(ИмяСтраницы, ИтераторНаправления);
	
	ИмяПоследнейСтраницы = СписокИменСтраниц[СписокИменСтраниц.Количество()-1].Значение;
	
	ЭтоПоследняяСтраница = (ИмяТекущейСтраницы = ИмяПоследнейСтраницы) ;
	
	Если ЭтоПоследняяСтраница И (ИтераторСменыТипаСтраницы > 0) Тогда
		ЗакрытьПоследнююСтраницу();
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы[ИмяСтраницы];
		ПриСменеСтраницы();
	КонецЕсли;
	
	ИндикаторИсполнения = ИндикаторИсполнения + ИтераторСменыТипаСтраницы;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьПерехода(ИмяТекущейСтраницы, Отказ)
	
	ОчиститьСообщения();
	Если ИмяТекущейСтраницы = "СтраницаМагазинОрганизация" Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнен магазин'") ,
				Объект,
				"Объект.Магазин" ,
				,
				Отказ
			);
			
		КонецЕсли;
		
		Если НесколькоОрганизаций Тогда
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
			
			СтрокиТаблицыОрганизаций = Объект.Организации.НайтиСтроки(СтруктураПоиска);
			
			Для каждого СтрокаТаблицыОрганизаций Из СтрокиТаблицыОрганизаций Цикл
				Объект.Организации.Удалить(СтрокаТаблицыОрганизаций);
			КонецЦикла;
			
			Если Объект.Организации.Количество() = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Не введено ни одной строки в список ""Организации""'") ,
					Объект,
					"Объект.Организации" ,
					,
					Отказ
				);
			Иначе
				
				ПроверитьДублированиеОрганизаций(Отказ);
				
			КонецЕсли;
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Организация"" не заполнено'") ,
				Объект,
				"Объект.Организация" ,
				,
				Отказ
			);
			
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаТипыОборудования" Тогда
		Если НЕ ЗначениеЗаполнено(Объект.РабочееМесто) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнено рабочее место'") ,
				Объект,
				"Объект.РабочееМесто" ,
				,
				Отказ
			);
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаКассаККМ" Тогда
		
		ТекущиеДанные = Элементы.Организации.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.КассаККМ) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Не создана касса ККМ'"),
					Объект,
					"Элементы.Организации.ТекущиеДанные.КассаККМ",
					,
					Отказ
				);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеДаннымиПереходаСервер(ИмяСтраницы, ИтераторНаправления, ПараметрыКлиент)
	
	Если ИмяСтраницы = "СтраницаОбщиеПараметры" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ИспользоватьНесколькоОрганизаций.Значение КАК ИспользоватьНесколькоОрганизаций,
		|	ИспользоватьПодключаемоеОборудование.Значение КАК ИспользоватьПодключаемоеОборудование,
		|	ИспользоватьОплатуБанковскимиКредитами.Значение КАК ИспользоватьОплатуБанковскимиКредитами,
		|	ИспользоватьОплатуПлатежнымиКартами.Значение КАК ИспользоватьОплатуПлатежнымиКартами
		|ИЗ
		|	Константа.ИспользоватьНесколькоОрганизаций КАК ИспользоватьНесколькоОрганизаций,
		|	Константа.ИспользоватьПодключаемоеОборудование КАК ИспользоватьПодключаемоеОборудование,
		|	Константа.ИспользоватьОплатуБанковскимиКредитами КАК ИспользоватьОплатуБанковскимиКредитами,
		|	Константа.ИспользоватьОплатуПлатежнымиКартами КАК ИспользоватьОплатуПлатежнымиКартами";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(КонстантыНабор, Выборка)
		КонецЕсли;
		
		Элементы.КонстантыНаборИспользоватьНесколькоОрганизаций.ТолькоПросмотр       = КонстантыНабор.ИспользоватьНесколькоОрганизаций;
		Элементы.КонстантыНаборИспользоватьПодключаемоеОборудование.ТолькоПросмотр   = КонстантыНабор.ИспользоватьПодключаемоеОборудование;
		Элементы.КонстантыНаборИспользоватьОплатуБанковскимиКредитами.ТолькоПросмотр = КонстантыНабор.ИспользоватьОплатуБанковскимиКредитами;
		Элементы.КонстантыНаборИспользоватьОплатуПлатежнымиКартами.ТолькоПросмотр    = КонстантыНабор.ИспользоватьОплатуПлатежнымиКартами;
		
		Элементы.КонстантыНаборИспользоватьНесколькоОрганизаций.Видимость = НЕ СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
		
	ИначеЕсли ИмяСтраницы = "СтраницаМагазинОрганизация" Тогда
		СохранитьЗначениеКонстанты("ИспользоватьНесколькоОрганизаций");
		СохранитьЗначениеКонстанты("ИспользоватьПодключаемоеОборудование");
		СохранитьЗначениеКонстанты("ИспользоватьОплатуПлатежнымиКартами");
		СохранитьЗначениеКонстанты("ИспользоватьОплатуБанковскимиКредитами");
		
		ИспользоватьНесколькоОрганизаций       = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
		ИспользоватьПодключаемоеОборудование   = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
		ИспользоватьОплатуПлатежнымиКартами    = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами");
		ИспользоватьОплатуБанковскимиКредитами = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуБанковскимиКредитами");
		
		Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
			Объект.Магазин = ПараметрыСеанса.ТекущийМагазин;
			МагазинПриИзмененииСервер();
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация)  Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации";
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				НесколькоОрганизаций = Ложь;
				Выборка.Следующий();
				Объект.Организация = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.НесколькоОрганизаций.Доступность = ИспользоватьНесколькоОрганизаций;
		Элементы.ДекорацияСписокОрганизаций.Видимость      = ИспользоватьНесколькоОрганизаций;
		
		Элементы.ДекорацияСписокОрганизаций1.Видимость      = ИспользоватьНесколькоОрганизаций;
		
	ИначеЕсли ИмяСтраницы = "СтраницаВидыОплат" Тогда
		
		ДоступностьКнопокВидовОплаты();
		
	ИначеЕсли ИмяСтраницы = "СтраницаТипыОборудования" Тогда
		
		РабочееМесто = Новый Структура;
		РабочееМесто.Вставить("Код", ПараметрыКлиент.ИдентификаторКлиента);
		РабочееМесто.Вставить("ИмяКомпьютера", ПараметрыКлиент.ИмяКомпьютера);
		РабочееМесто.Вставить("Наименование");
		
		МенеджерОборудованияКлиентСервер.ЗаполнитьНаименованиеРабочегоМеста(РабочееМесто, ПользователиИнформационнойБазы.ТекущийПользователь());
		
		НаименованиеРабочегоМеста = Объект.РабочееМесто.Наименование;
		
		Элементы.НаименованиеРабочегоМеста.СписокВыбора.Очистить();
		СтрокаНаименования = РабочееМесто.Наименование;
		Элементы.НаименованиеРабочегоМеста.СписокВыбора.Добавить(СтрокаНаименования);
		
		
		
		ЗаполнитьДанныеПоТипамОборудования()
		
	ИначеЕсли ИмяСтраницы = "СтраницаПодключаемоеОборудование" Тогда
		
		Если ИндексСтрокиПодключаемоеОборудование = -1 Тогда
			ЗаполнитьТаблицуПодключаемогоОборудования();
		Иначе
			ИндексСтрокиПодключаемоеОборудование = ИндексСтрокиПодключаемоеОборудование + ИтераторНаправления;
		КонецЕсли;
		
		СтрокаТаблицы = Объект.ТаблицаПодключаемоеОборудование[ИндексСтрокиПодключаемоеОборудование];
		
		ОборудованиеОрганизация = СтрокаТаблицы.Организация;
		Элементы.ГруппаОборудованиеОрганизация.Видимость = ЗначениеЗаполнено(ОборудованиеОрганизация);
		
		ПодключаемоеОборудование = СтрокаТаблицы.ПодключаемоеОборудование;
		ТекущийТипОборудования   = СтрокаТаблицы.ТипОборудования;
		
		ПараметрыВыбораЭлемента = Новый Массив;
		
		Если ТекущийТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор Тогда
			МассивТиповПО = Новый Массив;
			МассивТиповПО.Добавить(ТекущийТипОборудования);
			МассивТиповПО.Добавить(Перечисления.ТипыПодключаемогоОборудования.ККТ);
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипОборудования", Новый ФиксированныйМассив(МассивТиповПО));
			СписокДрайверов = ПолучитьСписокДрайверовПоМассиву(МассивТиповПО);
		Иначе
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипОборудования", ТекущийТипОборудования);
			СписокДрайверов = ПолучитьСписокДрайверов(ТекущийТипОборудования);
		КонецЕсли;
		ПараметрыВыбораЭлемента.Добавить(НовыйПараметр);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.УстройствоИспользуется", Истина);
		ПараметрыВыбораЭлемента.Добавить(НовыйПараметр);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.РабочееМесто", Объект.РабочееМесто);
		ПараметрыВыбораЭлемента.Добавить(НовыйПараметр);
		
		Элементы.ПодключаемоеОборудование.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЭлемента);
		
		Элементы.ДрайверОборудования.СписокВыбора.Очистить();
		Для каждого СтрокаСписка Из СписокДрайверов Цикл
			Элементы.ДрайверОборудования.СписокВыбора.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление);
		КонецЦикла;
		
		ЗаполнитьСоответствияСообщений();
		ПодключаемоеОборудованиеЗаголовок = СоответствиеЗаголовка.Получить(ТекущийТипОборудования);
		
		ПриИзмененииПодключаемоеОборудование();
		
	ИначеЕсли ИмяСтраницы = "СтраницаКассаККМ" Тогда
		
		ТекстПодсказки = НСтр("ru = 'Фискальный регистратор или АСПД, принтер чеков. 
			|Используется при печати чека на устройстве, подключенном к системе, на фискальном регистраторе 
			|или АСПД (автоматизированной системе печати документов), принтере чеков.
			|
			|ККМ без подключения оборудования. 
			|Используется при применении автономного фискального регистратора 
			|или при продажах без обязательной печати фискального чека.
			|'");
		
		Элементы.ОрганизацииТипКассы.Подсказка = ТекстПодсказки;
		
		Если ИндексСтрокиОрганизации = -1 Тогда
			ИндексСтрокиОрганизации = Объект.Организации.Индекс(Объект.Организации[0]);
			ЗаполнитьКассыККМ();
		Иначе
			ИндексСтрокиОрганизации = ИндексСтрокиОрганизации + ИтераторНаправления;
		КонецЕсли;
		
		СтрокаТаблицы = Объект.Организации[ИндексСтрокиОрганизации];
		
		ОрганизацияКассаККМ = СтрокаТаблицы.Организация;
		
		Элементы.Организации.ТекущаяСтрока = СтрокаТаблицы.ПолучитьИдентификатор();
		
		ЗаполнитьСтраницуКассыККМ(СтрокаТаблицы);
		
		ПриИзмененииКассыКММСервер(СтрокаТаблицы);
		
	ИначеЕсли ИмяСтраницы = "СтраницаКасса" Тогда
		
		Если ИндексСтрокиКасса = -1 Тогда
			ЗаполнитьКассы();
			ИндексСтрокиКасса = Объект.Кассы.Индекс(Объект.Кассы[0]);
		Иначе
			ИндексСтрокиКасса = ИндексСтрокиКасса + ИтераторНаправления;
		КонецЕсли;
		
		СтрокаТаблицы = Объект.Кассы[ИндексСтрокиКасса];
		
		ЗаполнитьКассу(СтрокаТаблицы);
		
		ОрганизацияКассаККМ = СтрокаТаблицы.Организация;
		
		ПриИзмененииКассыСервер(СтрокаТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеДаннымиПерехода(ИмяСтраницы, ИтераторНаправления)
	
	ПараметрыКлиент = Новый Структура;
	
	Если ИмяСтраницы = "СтраницаМагазинОрганизация" Тогда
		ОбновитьИнтерфейсПрограммы()
	КонецЕсли;
	Если ИмяСтраницы = "СтраницаТипыОборудования" Тогда
		ОбновитьРабочееМестоКлиента(ПараметрыКлиент);
		НаименованиеРабочегоМестаПриИзмененииКлиент();
		
		ИндексСтрокиПодключаемоеОборудование = -1;
		ИндексСтрокиОрганизации = -1;
	КонецЕсли;
	Если ИмяСтраницы = "СтраницаПодключаемоеОборудование" Тогда
		ИндексСтрокиОрганизации = -1;
	КонецЕсли;
	Если ИмяСтраницы = "СтраницаКассаККМ" Тогда
		Если НЕ ИспользоватьПодключаемоеОборудование Тогда
			ОбновитьРабочееМестоКлиента(ПараметрыКлиент);
		КонецЕсли;
		
		ИндексСтрокиКасса = -1;
	КонецЕсли;
	Если ИмяСтраницы = "СтраницаПользователь" Тогда
		
		Если НЕ НесколькоОрганизаций Тогда
			
			ПерезаполнитьТаблицуОрганизаций = Ложь;
			Если НЕ Объект.Организации.Количество() = 1 Тогда
				ПерезаполнитьТаблицуОрганизаций = Истина;
			ИначеЕсли Объект.Организации.Количество() >= 0
				И НЕ Объект.Организации[0].Организация = Объект.Организация Тогда
				ПерезаполнитьТаблицуОрганизаций = Истина;
			КонецЕсли;
			
			Если ПерезаполнитьТаблицуОрганизаций Тогда
				ЗаполнитьТаблицуОрганизацийПоОднойОрганизации();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	Если ИмяСтраницы = "СтраницаФинал" Тогда
		ЗаполнитьОтчет();
	КонецЕсли;
	
	ЗаполнениеДаннымиПереходаСервер(ИмяСтраницы, ИтераторНаправления, ПараметрыКлиент);
	
	Если ИмяСтраницы = "СтраницаПодключаемоеОборудование" Тогда
		ОбновитьСообщениеДрайвера();
	ИначеЕсли ИмяСтраницы = "СтраницаЭквайринговыеТерминалы" Тогда
		ПриИзмененииСтраницыЭквайринговыхТерминалов();
	КонецЕсли;
	
	ОбновитьЗаголовокПутейКДанным(ИмяСтраницы);
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеСтраницы()
	
	ИмяТекущейСтраницы   = Элементы.Страницы.ТекущаяСтраница.Имя;
	ИмяПервойСтраницы    = СписокИменСтраниц[0].Значение;
	ИмяПоследнейСтраницы = СписокИменСтраниц[СписокИменСтраниц.Количество()-1].Значение;
	Элементы.Назад.Доступность = НЕ ИмяТекущейСтраницы = ИмяПервойСтраницы;
	
	ЭтоПоследняяСтраница = ИмяТекущейСтраницы = ИмяПоследнейСтраницы;
	
	Элементы.Далее.Заголовок = ?(ЭтоПоследняяСтраница, "Готово", "Далее")
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРабочееМестоКлиента(ПараметрыКлиент)
	
	Если НЕ ЗначениеЗаполнено(Объект.РабочееМесто) Тогда
		МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
		Объект.РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента()
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ПараметрыКлиент.Вставить("ИмяКомпьютера");
	ПараметрыКлиент.Вставить("ИдентификаторКлиента");
	
	#Если Не ВебКлиент Тогда
		ПараметрыКлиент.ИмяКомпьютера = ИмяКомпьютера();
	#КонецЕсли
	
	ПараметрыКлиент.ИдентификаторКлиента = ВРег(СистемнаяИнформация.ИдентификаторКлиента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокПутейКДанным(ИмяСтраницы)
	
	ИмяЗаголовка = "";
	Если ИмяСтраницы = "СтраницаОбщиеПараметры" Тогда
		ИмяЗаголовка = НСтр("ru = 'Раздел ""Администрирование"" - ""Организации и финансы"", ""Настройки подключаемого оборудования"" и ""Продажи""'")
	ИначеЕсли ИмяСтраницы = "СтраницаМагазинОрганизация" Тогда
		ИмяЗаголовка = НСтр("ru = 'Раздел ""Нормативно-справочная информация"" - ""Магазины"" и ""Организации""'")
	ИначеЕсли ИмяСтраницы = "СтраницаПользователь" Тогда
		ИмяЗаголовка = НСтр("ru = 'Раздел ""Администрирование"" - ""Пользователи и права""'")
	ИначеЕсли ИмяСтраницы = "СтраницаТипыОборудования" Тогда
		ИмяЗаголовка = НСтр("ru = 'Раздел ""Администрирование"" - ""Настройки подключаемого оборудования""'")
	ИначеЕсли ИмяСтраницы = "СтраницаПодключаемоеОборудование" Тогда
		ИмяЗаголовка = НСтр("ru = 'Раздел ""Администрирование"" - ""Настройки подключаемого оборудования""'")
	ИначеЕсли ИмяСтраницы = "СтраницаКассаККМ" Тогда
		ИмяЗаголовка = НСтр("ru = 'Раздел ""Нормативно-справочная информация"" - ""Кассы ККМ""'")
	ИначеЕсли ИмяСтраницы = "СтраницаКасса" Тогда
		ИмяЗаголовка = НСтр("ru = 'Раздел ""Нормативно-справочная информация"" - ""Кассы""'")
	ИначеЕсли ИмяСтраницы = "СтраницаВидыОплат" Тогда
		ИмяЗаголовка = НСтр("ru = 'Раздел ""Продажи"" - ""Виды оплат""'")
	ИначеЕсли ИмяСтраницы = "СтраницаЭквайринговыеТерминалы" Тогда
		ИмяЗаголовка = НСтр("ru = 'Раздел ""Финансы"" - ""Эквайринговые терминалы""'")
	ИначеЕсли ИмяСтраницы = "СтраницаНастройкиРМК" Тогда
		ИмяЗаголовка = НСтр("ru = 'Раздел ""Администрирование"" - ""Продажи"" - ""Настройки РМК""'")
	ИначеЕсли ИмяСтраницы = "СтраницаФинал" Тогда
		ИмяЗаголовка = "---"
	КонецЕсли;
	
	Элементы.ПутиКДанным.Заголовок = ИмяЗаголовка;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаОбщиеПараметры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	#Если НЕ ВебКлиент Тогда
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаМагазинОрганизация

&НаСервере
Процедура МагазинПриИзмененииСервер()
	
	ОрганизацияСкладаПродажи = Объект.Магазин.СкладПродажи.Организация;
	
	Если ЗначениеЗаполнено(ОрганизацияСкладаПродажи) Тогда
		Если НесколькоОрганизаций Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Организация", ОрганизацияСкладаПродажи);
			
			МассивСтрок = Объект.Организации.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество() = 0 Тогда
				СтрокаТаблицы = Объект.Организации.Добавить();
				СтрокаТаблицы.Организация = ОрганизацияСкладаПродажи;
			КонецЕсли;
			
		Иначе
			Объект.Организация = ОрганизацияСкладаПродажи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеКонстанты(КонстантаИмя)
	
	// Сохранение значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = КонстантыНабор[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуОрганизацийПоОднойОрганизации()
	
	КоличествоВТаблице = Объект.Организации.Количество();
	Если КоличествоВТаблице = 0  Тогда
		СтрокаОрганизаций = Объект.Организации.Добавить();
		СтрокаОрганизаций.Организация = Объект.Организация;
	Иначе
		Если КоличествоВТаблице > 1 Тогда
			Для Индекс = 1 По КоличествоВТаблице - 1 Цикл
				УдаляемыйИндекс = КоличествоВТаблице - Индекс;
				Объект.Организации.Удалить(УдаляемыйИндекс);
			КонецЦикла;
		КонецЕсли;
		СтрокаОрганизаций = Объект.Организации[0];
		СтрокаОрганизаций.Организация = Объект.Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДублированиеОрганизаций(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Организация,
	|	Таблица.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.Организация,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаВЗапросе.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ДублирующиесяОбъекты
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|ГДЕ
	|	НЕ ТаблицаВЗапросе.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВЗапросе.Организация
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаВЗапросе.НомерСтроки) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДублирующиесяОбъекты.Организация КАК Организация,
	|	ТаблицаВЗапросе.НомерСтроки
	|ИЗ
	|	ДублирующиесяОбъекты КАК ДублирующиесяОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|		ПО ДублирующиесяОбъекты.Организация = ТаблицаВЗапросе.Организация
	|ИТОГИ ПО
	|	Организация";

	
	Запрос.УстановитьПараметр("Таблица", Объект.Организации.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаНомеровСтрок = Выборка.Выбрать();
		ТекстСообщенияСтроки = "";
		НомерСтроки = 0;
		Пока ВыборкаНомеровСтрок.Следующий() Цикл
			ТекстСообщенияСтроки = ТекстСообщенияСтроки + ВыборкаНомеровСтрок.НомерСтроки + ", ";
			НомерСтроки = ВыборкаНомеровСтрок.НомерСтроки;
		КонецЦикла;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для организации ""%1"" есть дублирование в строках №№ %2'"),
			Выборка.Организация,
			ТекстСообщенияСтроки);
		ТекстСообщения = Лев(ТекстСообщения, СтрДлина(ТекстСообщения)-2);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Объект,
			"Объект.Организации[" + (НомерСтроки - 1) + "].Организация",
			,
			Отказ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаПользователь

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаТипыОборудования

&НаСервере
Функция СоздатьРабочееМестоСервер(ПараметрыСоздания)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РабочееМесто = Справочники.РабочиеМеста.СоздатьЭлемент();

	РабочееМесто.Код           = ПараметрыСоздания.ИдентификаторКлиента;
	РабочееМесто.ИмяКомпьютера = ПараметрыСоздания.ИмяКомпьютера;
	
	Если НЕ ЗначениеЗаполнено(НаименованиеРабочегоМеста)  Тогда
		МенеджерОборудованияКлиентСервер.ЗаполнитьНаименованиеРабочегоМеста(РабочееМесто, ПользователиИнформационнойБазы.ТекущийПользователь());
	Иначе
		РабочееМесто.Наименование = НаименованиеРабочегоМеста;
	КонецЕсли;

	РабочееМесто.Записать();
	
	Объект.РабочееМесто = РабочееМесто.Ссылка;
	МенеджерОборудованияВызовСервера.УстановитьРабочееМестоКлиента(Объект.РабочееМесто);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Модифицированность = Ложь;
	
	Возврат ПолучитьНавигационнуюСсылку(Объект.РабочееМесто);
	
КонецФункции

&НаКлиенте
Процедура НаименованиеРабочегоМестаПриИзмененииКлиент()
	
	Если НЕ ЗначениеЗаполнено(Объект.РабочееМесто) Тогда
		Элементы.СоздатьРабочееМесто.Заголовок = "Сохранить";
		Элементы.СоздатьРабочееМесто.Доступность = Истина;
	Иначе
		Элементы.СоздатьРабочееМесто.Заголовок = "Сохранить";
		Элементы.СоздатьРабочееМесто.Доступность = Ложь;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДекорациюПодключенногоОборудования(ТипОборудования, ТаблицаПоТипамОборудования, ИмяДекорации)
	
	СтрокаТаблицы = ТаблицаПоТипамОборудования.Найти(ТипОборудования, "ТипОборудования");
	
	ИспользуемоеОборудование = "0";
	ВсеОборудование = "0";
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		ИспользуемоеОборудование = Формат(СтрокаТаблицы.ИспользуемоеОборудование, "ЧН=0; ЧГ=0");
		ВсеОборудование = Формат(СтрокаТаблицы.ВсеОборудование, "ЧН=0; ЧГ=0");
	КонецЕсли;
	
	ШрифтЖирный = Новый Шрифт(,11,Истина);
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		ИспользуемоеОборудование,
		ШрифтЖирный));
	МассивСтрок.Добавить("/" + ВсеОборудование);
	
	Элементы[ИмяДекорации].Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоТипамОборудования()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПодключаемоеОборудование.ТипОборудования,
	|	СУММА(1) КАК ВсеОборудование,
	|	СУММА(ВЫБОР
	|			КОГДА ПодключаемоеОборудование.УстройствоИспользуется
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ИспользуемоеОборудование
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И НЕ ПодключаемоеОборудование.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодключаемоеОборудование.ТипОборудования";
	
	Запрос.УстановитьПараметр("РабочееМесто"                 , Объект.РабочееМесто);
	
	Результат = Запрос.Выполнить();
	ТаблицаПоТипамОборудования =Результат.Выгрузить();
	
	ЗаполнитьДекорациюПодключенногоОборудования(Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода, 
												ТаблицаПоТипамОборудования, 
												"ДекорацияПОСканерШтрихкодов");
	
	ЗаполнитьДекорациюПодключенногоОборудования(Перечисления.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт, 
												ТаблицаПоТипамОборудования, 
												"ДекорацияПОСчитывательМагнитныхКарт");
	
	ЗаполнитьДекорациюПодключенногоОборудования(Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор, 
												ТаблицаПоТипамОборудования, 
												"ДекорацияПОФискальныеРегистраторы");
	
	ЗаполнитьДекорациюПодключенногоОборудования(Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал, 
												ТаблицаПоТипамОборудования, 
												"ДекорацияПОЭквайринговыйТерминал");
	
	ЗаполнитьДекорациюПодключенногоОборудования(Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных, 
												ТаблицаПоТипамОборудования, 
												"ДекорацияПОТерминалСбораДанных");
	
	ЗаполнитьДекорациюПодключенногоОборудования(Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя, 
												ТаблицаПоТипамОборудования, 
												"ДекорацияПОДисплейПокупателей");
	
	ЗаполнитьДекорациюПодключенногоОборудования(Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы, 
												ТаблицаПоТипамОборудования, 
												"ДекорацияПОЭлектронныеВесы");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаПодключаемоеОборудование

&НаКлиенте
Функция ЕстьНастройкиПО()

	Возврат НастройкаПОДисплейПокупателей
		ИЛИ НастройкаПОСканерШтрихкодов
		ИЛИ НастройкаПОСчитывательМагнитныхКарт
		ИЛИ НастройкаПОФискальныеРегистраторы
		ИЛИ НастройкаПОЭквайринговыйТерминал
		ИЛИ НастройкаПОЭлектронныеВесы
		ИЛИ НастройкаПОТерминалСбораДанных
	
КонецФункции // ЕстьНастройкиПО()

&НаСервере
Процедура ЗаполнитьТаблицуУжеПодключенногоОборудования()
	
	ТаблицаУжеПодключенногоОборудования.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПодключаемоеОборудование.Ссылка КАК ПодключаемоеОборудование,
	|	ПодключаемоеОборудование.ТипОборудования,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
	|	ПодключаемоеОборудование.СерийныйНомер
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.УстройствоИспользуется
	|	И ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И НЕ ПодключаемоеОборудование.ПометкаУдаления
	|	И НЕ ПодключаемоеОборудование.ТипОборудования В (&МассивОборудованияЗависящегоОтОрганизаций)";
	
	Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
	
	МассивОборудованияЗависящегоОтОрганизаций = Новый Массив;
	МассивОборудованияЗависящегоОтОрганизаций.Добавить(Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор);
	МассивОборудованияЗависящегоОтОрганизаций.Добавить(Перечисления.ТипыПодключаемогоОборудования.ККТ);
	МассивОборудованияЗависящегоОтОрганизаций.Добавить(Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал);
	
	Запрос.УстановитьПараметр("МассивОборудованияЗависящегоОтОрганизаций", МассивОборудованияЗависящегоОтОрганизаций);
	
	Результат = Запрос.Выполнить();
	ТаблицаУжеПодключенногоОборудования.Загрузить(Результат.Выгрузить());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КассыККМ.ПодключаемоеОборудование КАК ПодключаемоеОборудование,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор) КАК ТипОборудования,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.ПодключаемоеОборудование.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
	|	И НЕ КассыККМ.ИспользоватьБезПодключенияОборудования
	|	И НЕ КассыККМ.ПометкаУдаления
	|	И НЕ КассыККМ.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|	И КассыККМ.РабочееМесто = &РабочееМесто
	|	И КассыККМ.ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И КассыККМ.ПодключаемоеОборудование.УстройствоИспользуется
	|	И КассыККМ.Владелец В(&Организации)
	|	И КассыККМ.Магазин = &Магазин";
	
	Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
	Запрос.УстановитьПараметр("Магазин"     , Объект.Магазин);
	Запрос.УстановитьПараметр("Организации" , Объект.Организации.Выгрузить().ВыгрузитьКолонку("Организация"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаУжеПодключенногоОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал) КАК ТипОборудования,
	|	ЭквайринговыеТерминалы.Организация,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
	|	И ЭквайринговыеТерминалы.Организация В(&Организации)
	|	И ЭквайринговыеТерминалы.Касса ССЫЛКА Справочник.КассыККМ
	|	И ЭквайринговыеТерминалы.Магазин = &Магазин
	|	И НЕ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования
	|	И НЕ ЭквайринговыеТерминалы.ПодключаемоеОборудование = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаУжеПодключенногоОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПодключаемоеОборудование()
	
	ЗаполнитьСоответствияСообщений();
	Если НЕ ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		НаименованиеПодключаемоеОборудование = "";
		ДрайверОборудования = Объект.ТаблицаПодключаемоеОборудование[ИндексСтрокиПодключаемоеОборудование].ДрайверОборудованияПоУмолчанию;
		Элементы.СоздатьИзменитьПодключаемоеОборудование.Заголовок = "Создать";
		Элементы.СоздатьИзменитьПодключаемоеОборудование.Доступность = Истина;
		СерийныйНомерПодключаемоеОборудование = "";
		Элементы.ОтключитьПодключаемоеОборудование.Доступность = Ложь;
		Элементы.НастроитьОборудование.Доступность = Ложь;
	Иначе
		НаименованиеПодключаемоеОборудование = ПодключаемоеОборудование.Наименование;
		ДрайверОборудования = ПодключаемоеОборудование.ДрайверОборудования;
		СерийныйНомерПодключаемоеОборудование = ПодключаемоеОборудование.СерийныйНомер;
		Элементы.СоздатьИзменитьПодключаемоеОборудование.Заголовок = "Сохранить";
		Элементы.СоздатьИзменитьПодключаемоеОборудование.Доступность = Ложь;
		Элементы.ОтключитьПодключаемоеОборудование.Доступность = Истина;
		Элементы.НастроитьОборудование.Доступность = Истина;
		
	КонецЕсли;
	
	ПодсказкаВвода = Объект.РабочееМесто.Наименование;
	ПодсказкаВвода = ПодсказкаВвода + " (" + СоответствиеОкончанияНаименования.Получить(ТекущийТипОборудования) + ")";
	
	//Элементы.НаименованиеПодключаемоеОборудование.ПодсказкаВвода = ПодсказкаВвода;
	//
	Элементы.НаименованиеПодключаемоеОборудование.СписокВыбора.Очистить();
	СтрокаНаименования = ПодсказкаВвода;
	Элементы.НаименованиеПодключаемоеОборудование.СписокВыбора.Добавить(СтрокаНаименования);

	//
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Функция СоздатьИзменитьПодключаемоеОборудованиеНаСервере()
	
	Если НЕ ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		ПодключаемоеОборудованиеОбъект = Справочники.ПодключаемоеОборудование.СоздатьЭлемент();
	Иначе
		ПодключаемоеОборудованиеОбъект = ПодключаемоеОборудование.ПолучитьОбъект();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаименованиеПодключаемоеОборудование) Тогда
		ПодключаемоеОборудованиеОбъект.Наименование = НаименованиеПодключаемоеОборудование
	Иначе
		ПодключаемоеОборудованиеОбъект.Наименование = Элементы.НаименованиеПодключаемоеОборудование.ПодсказкаВвода;
	КонецЕсли;
	
	ПодключаемоеОборудованиеОбъект.ТипОборудования        = ДрайверОборудования.ТипОборудования;
	ПодключаемоеОборудованиеОбъект.ДрайверОборудования    = ДрайверОборудования;
	ПодключаемоеОборудованиеОбъект.РабочееМесто           = Объект.РабочееМесто;
	ПодключаемоеОборудованиеОбъект.УстройствоИспользуется = Истина;
	ПодключаемоеОборудованиеОбъект.СерийныйНомер          = СерийныйНомерПодключаемоеОборудование;
	Если ПодключаемоеОборудованиеОбъект.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		ПодключаемоеОборудованиеОбъект.Организация            = ОборудованиеОрганизация;
	КонецЕсли;
	ПодключаемоеОборудованиеОбъект.Записать();
	
	ПодключаемоеОборудование = ПодключаемоеОборудованиеОбъект.Ссылка;
	СтрокаТаблицы = Объект.ТаблицаПодключаемоеОборудование[ИндексСтрокиПодключаемоеОборудование];
	СтрокаТаблицы.ПодключаемоеОборудование = ПодключаемоеОборудование;
	СтрокаТаблицы.СерийныйНомер            = СерийныйНомерПодключаемоеОборудование;
	ПриИзмененииПодключаемоеОборудование();
	
	СкорректироватьТаблицуУжеПодключенногоОборудования(СтрокаТаблицы);
	
	Возврат ПолучитьНавигационнуюСсылку(ПодключаемоеОборудование);
КонецФункции

&НаСервере
Процедура СкорректироватьТаблицуУжеПодключенногоОборудования(СтрокаТаблицыПО)
	
	СтруктураПоиска = Новый Структура("ТипОборудования, Организация");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицыПО);
	
	МассивПО = ТаблицаУжеПодключенногоОборудования.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаТаблицы Из МассивПО Цикл
		ТаблицаУжеПодключенногоОборудования.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаТаблицыПО.ПодключаемоеОборудование) Тогда
		СтрокаТаблицы = ТаблицаУжеПодключенногоОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаТаблицыПО);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиПодключаемоеОборудования(ТипОборудования, ДрайверОборудованияПоУмолчанию = Неопределено, ЗависитОтОрганизации = Ложь)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ТипОборудования", ТипОборудования);
	
	Если ЗависитОтОрганизации Тогда
		Для каждого СтрокаТаблицыОрганизации Из Объект.Организации Цикл
			СтруктураПоиска.Вставить("Организация", СтрокаТаблицыОрганизации.Организация);
			МассивПО = ТаблицаУжеПодключенногоОборудования.НайтиСтроки(СтруктураПоиска);
			
			СтрокаТаблицы = Объект.ТаблицаПодключаемоеОборудование.Добавить();
			СтрокаТаблицы.ТипОборудования = ТипОборудования;
			СтрокаТаблицы.Организация     = СтрокаТаблицыОрганизации.Организация;
			
			Если МассивПО.Количество() > 0 Тогда
				СтрокаТаблицы.ПодключаемоеОборудование = МассивПО[0].ПодключаемоеОборудование;
				СтрокаТаблицы.СерийныйНомер            = МассивПО[0].СерийныйНомер;
			КонецЕсли;
			
			Если НЕ ДрайверОборудованияПоУмолчанию = Неопределено Тогда
				СтрокаТаблицы.ДрайверОборудованияПоУмолчанию = ДрайверОборудованияПоУмолчанию;
			КонецЕсли;
			
			СтрокаТаблицы.ДополнениеОписания = НСтр("ru = ' ('") + СтрокаТаблицы.Организация + НСтр("ru = ')'")
		КонецЦикла;
	Иначе
		МассивПО = ТаблицаУжеПодключенногоОборудования.НайтиСтроки(СтруктураПоиска);
		СтрокаТаблицы = Объект.ТаблицаПодключаемоеОборудование.Добавить();
		СтрокаТаблицы.ТипОборудования = ТипОборудования;
		
		Если МассивПО.Количество() > 0 Тогда
			СтрокаТаблицы.ПодключаемоеОборудование = МассивПО[0].ПодключаемоеОборудование;
			СтрокаТаблицы.СерийныйНомер            = МассивПО[0].СерийныйНомер;
		КонецЕсли;
		
		Если НЕ ДрайверОборудованияПоУмолчанию = Неопределено Тогда
			СтрокаТаблицы.ДрайверОборудованияПоУмолчанию = ДрайверОборудованияПоУмолчанию;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПодключаемогоОборудования()
	
	Объект.ТаблицаПодключаемоеОборудование.Очистить();
	
	ЗаполнитьТаблицуУжеПодключенногоОборудования();
	
	Если НастройкаПОСканерШтрихкодов Тогда
		ДобавитьСтрокиПодключаемоеОборудования(Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода,
											   Справочники.ДрайверыОборудования.Драйвер1ССканерыШтрихкодаNative);
	КонецЕсли;
	
	Если НастройкаПОСчитывательМагнитныхКарт Тогда
		ДобавитьСтрокиПодключаемоеОборудования(Перечисления.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт,
											   Справочники.ДрайверыОборудования.Драйвер1ССчитывателиМагнитныхКарт);
	КонецЕсли;
	
	Если НастройкаПОФискальныеРегистраторы Тогда
		ДобавитьСтрокиПодключаемоеОборудования(Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор,
											   ,
											   Истина);
	КонецЕсли;
	Если ИспользоватьОплатуПлатежнымиКартами И НастройкаПОЭквайринговыйТерминал Тогда
		ДобавитьСтрокиПодключаемоеОборудования(Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал,
											   ,
											   Истина);
	КонецЕсли;
	
	Если НастройкаПОТерминалСбораДанных Тогда
		ДобавитьСтрокиПодключаемоеОборудования(Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных);
	КонецЕсли;
	
	Если НастройкаПОДисплейПокупателей Тогда
		ДобавитьСтрокиПодключаемоеОборудования(Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя);
	КонецЕсли;
	
	Если НастройкаПОЭлектронныеВесы Тогда
		ДобавитьСтрокиПодключаемоеОборудования(Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы);
	КонецЕсли;
	
	Если Объект.ТаблицаПодключаемоеОборудование.Количество() > 0 Тогда
		ИндексСтрокиПодключаемоеОборудование = Объект.ТаблицаПодключаемоеОборудование.Индекс(Объект.ТаблицаПодключаемоеОборудование[0]);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРеквизитовОборудования()
	
	Модифицированность = Истина;
	Если НЕ ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		Элементы.СоздатьИзменитьПодключаемоеОборудование.Заголовок = "Создать";
	Иначе
		Элементы.СоздатьИзменитьПодключаемоеОборудование.Заголовок = "Сохранить";
	КонецЕсли;
	Элементы.СоздатьИзменитьПодключаемоеОборудование.Доступность = Истина
	
КонецПроцедуры

&НаСервере
Функция ОтключитьПодключаемоеОборудованиеНаСервере()
	
	Если ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		ПодключаемоеОборудованиеОбъект = ПодключаемоеОборудование.ПолучитьОбъект();
		ПодключаемоеОборудованиеОбъект.УстройствоИспользуется = Ложь;
		ПодключаемоеОборудованиеОбъект.Записать();
		СсылкаНавигации = ПодключаемоеОборудование;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ПодключаемоеОборудование", ПодключаемоеОборудование);
		МассивПОПодключенного = ТаблицаУжеПодключенногоОборудования.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаТаблицы Из МассивПОПодключенного Цикл
			ТаблицаУжеПодключенногоОборудования.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		СтрокаТаблицы = Объект.ТаблицаПодключаемоеОборудование[ИндексСтрокиПодключаемоеОборудование];
		
		СтруктураПоиска = Новый Структура("ТипОборудования, Организация");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		МассивПОПодключенного = ТаблицаУжеПодключенногоОборудования.НайтиСтроки(СтруктураПоиска);
		
		МассивПООбъекта = Объект.ТаблицаПодключаемоеОборудование.НайтиСтроки(СтруктураПоиска);
		
		ЕстьВыборОборудования = Ложь;
		Для каждого ЭлементМассиваПОПодключенного Из МассивПОПодключенного Цикл
			Для каждого ЭлементМассиваПООбъекта Из МассивПООбъекта Цикл
				Если НЕ ЭлементМассиваПОПодключенного.ПодключаемоеОборудование = ЭлементМассиваПООбъекта.ПодключаемоеОборудование Тогда
					ЕстьВыборОборудования = Истина;
					ПодключаемоеОборудование = ЭлементМассиваПОПодключенного.ПодключаемоеОборудование;
					СерийныйНомерПодключаемоеОборудование = ЭлементМассиваПОПодключенного.СерийныйНомер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если НЕ ЕстьВыборОборудования Тогда
			ПодключаемоеОборудование = Справочники.ПодключаемоеОборудование.ПустаяСсылка();
			СерийныйНомерПодключаемоеОборудование = "";
		КонецЕсли;
		СтрокаТаблицы.ПодключаемоеОборудование = ПодключаемоеОборудование;
		СтрокаТаблицы.СерийныйНомер            = СерийныйНомерПодключаемоеОборудование;
		ПриИзмененииПодключаемоеОборудование();
		Возврат ПолучитьНавигационнуюСсылку(ПодключаемоеОборудование);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСоответствияСообщений()
	
	СоответствиеЗаголовка = Новый Соответствие;
	СоответствиеЗаголовка.Вставить(Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода         , НСтр("ru = 'Сканер штрихкодов'"));
	СоответствиеЗаголовка.Вставить(Перечисления.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт, НСтр("ru = 'Считыватель магнитных карт'"));
	СоответствиеЗаголовка.Вставить(Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор   , НСтр("ru = 'Фискальный регистратор (ККТ)'"));
	СоответствиеЗаголовка.Вставить(Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных     , НСтр("ru = 'Терминал сбора данных'"));
	СоответствиеЗаголовка.Вставить(Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал   , НСтр("ru = 'Эквайринговый терминал'"));
	СоответствиеЗаголовка.Вставить(Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя       , НСтр("ru = 'Дисплей покупателя'"));
	СоответствиеЗаголовка.Вставить(Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы         , НСтр("ru = 'Электронные весы (online)'"));
	СоответствиеЗаголовка.Вставить(Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток    , НСтр("ru = 'Весы с печатью этикеток'"));
	
	СоответствиеОкончанияНаименования = Новый Соответствие;
	СоответствиеОкончанияНаименования.Вставить(Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода         , НСтр("ru = 'сканер'"));
	СоответствиеОкончанияНаименования.Вставить(Перечисления.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт, НСтр("ru = 'ридер'"));
	СоответствиеОкончанияНаименования.Вставить(Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор   , НСтр("ru = 'фискальный регистратор (ККТ)'"));
	СоответствиеОкончанияНаименования.Вставить(Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных     , НСтр("ru = 'терминал сбора данных'"));
	СоответствиеОкончанияНаименования.Вставить(Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал   , НСтр("ru = 'эквайринговый терминал'"));
	СоответствиеОкончанияНаименования.Вставить(Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя       , НСтр("ru = 'дисплей покупателя'"));
	СоответствиеОкончанияНаименования.Вставить(Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы         , НСтр("ru = 'весы-online'"));
	СоответствиеОкончанияНаименования.Вставить(Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток    , НСтр("ru = 'весы с печатью этикеток'"));
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДрайверов(ТипОборудования)
	
	СписокДрайверов = Новый СписокЗначений();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДрайверыОборудования.Ссылка,
	|	ДрайверыОборудования.Наименование,
	|	ДрайверыОборудования.ТипОборудования
	|ИЗ
	|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
	|ГДЕ
	|	ДрайверыОборудования.ТипОборудования = &ТипОборудования
	|	И НЕ ДрайверыОборудования.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДрайверыОборудования.Наименование";
		
	Запрос.УстановитьПараметр("ТипОборудования", ТипОборудования);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокДрайверов.Добавить(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Наименование);
	КонецЦикла;
	
	Возврат СписокДрайверов;

КонецФункции

&НаСервере
Функция ПолучитьСписокДрайверовПоМассиву(МассивТиповПО)
	
	СписокДрайверов = Новый СписокЗначений();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДрайверыОборудования.Ссылка,
	|	ДрайверыОборудования.Наименование,
	|	ДрайверыОборудования.ТипОборудования,
	|	ВЫБОР
	|		КОГДА ДрайверыОборудования.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоФР
	|ИЗ
	|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
	|ГДЕ
	|	ДрайверыОборудования.ТипОборудования В(&МассивТиповПО)
	|	И НЕ ДрайверыОборудования.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДрайверыОборудования.Наименование";
		
	Запрос.УстановитьПараметр("МассивТиповПО", МассивТиповПО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Дополнение = " (ККТ)";
		Если ВыборкаДетальныеЗаписи.ЭтоФР Тогда
			Дополнение = " (ФР)";
		КонецЕсли;
		
		СписокДрайверов.Добавить(ВыборкаДетальныеЗаписи.Ссылка, СокрЛП(ВыборкаДетальныеЗаписи.Наименование) + Дополнение);
	КонецЦикла;
	
	Возврат СписокДрайверов;

КонецФункции

&НаКлиенте
Процедура ОбновитьСообщениеДрайвера()
	
	ОшибкаВПолученииДрайвера = Истина;
	
	Попытка
		Если НЕ ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
			ДрайверСообщение = "";
		Иначе
			ВходныеПараметры  = Неопределено;
			ВыходныеПараметры = Неопределено;
			ПараметрыУстройства = Неопределено;
			
			Если МенеджерОборудованияКлиент.ВыполнитьДополнительнуюКоманду("ПолучитьОписаниеДрайвера",
																		   ВходныеПараметры,
																		   ВыходныеПараметры,
																		   ПодключаемоеОборудование,
																		   ПараметрыУстройства) Тогда
				ДрайверСообщение = НСтр("ru = 'Версия драйвера'") + " " + ВыходныеПараметры[1];
				ОшибкаВПолученииДрайвера = Ложь;
			Иначе
				СообщениеЗаполнено = Ложь;
				Если НЕ ВыходныеПараметры = Неопределено Тогда
					Для каждого ВыходнойПараметр Из ВыходныеПараметры Цикл
						Если ВыходнойПараметр = НСтр("ru='Установлен'") Тогда
							СообщениеЗаполнено = Истина;
							ДрайверСообщение = НСтр("ru = 'Драйвер установлен.'");
							ОшибкаВПолученииДрайвера = Ложь;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				Если НЕ СообщениеЗаполнено Тогда
					ДрайверСообщение  = ВыходныеПараметры[1];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДрайверСообщение = НСтр("ru = 'Нет возможности получить информации о драйвере.'") ;
	КонецПопытки;
	
	Элементы.ДекорацияДрайверСообщенияУспех.Заголовок   = ДрайверСообщение;
	Элементы.ДекорацияДрайверСообщенияНеудача.Заголовок = ДрайверСообщение;
	
	Если ОшибкаВПолученииДрайвера Тогда
		Элементы.ГруппаДекорацийДрайвера.ТекущаяСтраница = Элементы.СтраницаДекорацииДрайвераНеудача;
	Иначе
		Элементы.ГруппаДекорацийДрайвера.ТекущаяСтраница = Элементы.СтраницаДекорацииДрайвераУспех;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаКассаККМ

&НаСервере
Процедура ЗаполнитьКассыККМ()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Организация
	|ПОМЕСТИТЬ ТаблицаОрганизации
	|ИЗ
	|	&Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.Наименование,
	|	КассыККМ.РегистрационныйНомер,
	|	КассыККМ.СерийныйНомер,
	|	КассыККМ.ИспользоватьБезПодключенияОборудования,
	|	КассыККМ.ШаблонЧекаККМ,
	|	КассыККМ.ШаблонЧекаККМВозврат,
	|	КассыККМ.ШиринаЛенты,
	|	КассыККМ.ПодключаемоеОборудование,
	|	КассыККМ.ТипКассы,
	|	КассыККМ.НастройкаРаспределенияВыручкиПоСекциям,
	|	КассыККМ.Владелец КАК Организация
	|ПОМЕСТИТЬ ТаблицаКассККМ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Магазин = &Магазин
	|	И КассыККМ.РабочееМесто = &РабочееМесто
	|	И КассыККМ.Владелец В
	|			(ВЫБРАТЬ
	|				ТаблицаОрганизации.Организация КАК Организация
	|			ИЗ
	|				ТаблицаОрганизации КАК ТаблицаОрганизации)
	|	И КассыККМ.ТипКассы В(&ТипыКассы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОрганизации.Организация,
	|	ТаблицаКассККМ.КассаККМ,
	|	ТаблицаКассККМ.Наименование,
	|	ТаблицаКассККМ.РегистрационныйНомер,
	|	ТаблицаКассККМ.СерийныйНомер,
	|	ТаблицаКассККМ.ИспользоватьБезПодключенияОборудования,
	|	ТаблицаКассККМ.ШаблонЧекаККМ,
	|	ТаблицаКассККМ.ШаблонЧекаККМВозврат,
	|	ТаблицаКассККМ.ШиринаЛенты,
	|	ТаблицаКассККМ.ПодключаемоеОборудование,
	|	ТаблицаКассККМ.ТипКассы,
	|	ТаблицаКассККМ.НастройкаРаспределенияВыручкиПоСекциям
	|ИЗ
	|	ТаблицаОрганизации КАК ТаблицаОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКассККМ КАК ТаблицаКассККМ
	|		ПО ТаблицаОрганизации.Организация = ТаблицаКассККМ.Организация";
	
	Запрос.УстановитьПараметр("Организации" , Объект.Организации.Выгрузить());
	Запрос.УстановитьПараметр("Магазин"     , Объект.Магазин);

	Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
	
	МассивТиповКассы = Новый Массив;
	МассивТиповКассы.Добавить(Перечисления.ТипыКассККМ.АвтономнаяККМ);
	МассивТиповКассы.Добавить(Перечисления.ТипыКассККМ.ФискальныйРегистратор);
	
	Запрос.УстановитьПараметр("ТипыКассы", МассивТиповКассы);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Организация", Выборка.Организация);
		
		СтрокиОрганизации = Объект.Организации.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаОрганизации Из СтрокиОрганизации Цикл
			
			ЗаполнитьЗначенияСвойств(СтрокаОрганизации, Выборка,,"Организация");
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция СоздатьИзменитьКассуККМНаСервере(ИндексСтроки)
	
	СтрокаТаблицы = Объект.Организации[ИндексСтроки];
	
	КассаККМ = СтрокаТаблицы.КассаККМ;
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		КассаККМОбъект = КассаККМ.ПолучитьОбъект();
	Иначе
		КассаККМОбъект = Справочники.КассыККМ.СоздатьЭлемент();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Наименование) Тогда
		СтрокаТаблицы.Наименование = СокрЛП(СтрокаТаблицы.Организация) + " (" + СокрЛП(Объект.Магазин) + ")";
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(КассаККМОбъект, СтрокаТаблицы);
	КассаККМОбъект.Владелец = СтрокаТаблицы.Организация;
	КассаККМОбъект.Магазин  = Объект.Магазин;
	КассаККМОбъект.РабочееМесто = Объект.РабочееМесто;
	КассаККМОбъект.ИспользоватьБезПодключенияОборудования = КассаККМОбъект.ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ;
	
	КассаККМОбъект.Записать();
	СсылкаНавигации = КассаККМОбъект.Ссылка;
	
	СтрокаТаблицы.КассаККМ = КассаККМОбъект.Ссылка;
	
	ПриИзмененииКассыКММСервер(СтрокаТаблицы);
	
	Элементы.Организации.ТекущаяСтрока = Объект.Организации.Индекс(СтрокаТаблицы);
	
	Возврат ПолучитьНавигационнуюСсылку(КассаККМОбъект.Ссылка);
	
КонецФункции

&НаСервере
Процедура ПриИзмененииКассыКММСервер(СтрокаТаблицы)
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КассаККМ) Тогда
		Элементы.СоздатьИзменитьКассуККМ.Заголовок = "Создать";
		Элементы.СоздатьИзменитьКассуККМ.Доступность = Истина;
	Иначе
		Элементы.СоздатьИзменитьКассуККМ.Заголовок = "Сохранить";
		Элементы.СоздатьИзменитьКассуККМ.Доступность = Ложь;
	КонецЕсли;
	
	ДоступностьПО = СтрокаТаблицы.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор;
	
	Элементы.ОрганизацииПодключаемоеОборудование.Доступность = ДоступностьПО;
	Элементы.ОрганизацииШаблонЧекаККМ.Доступность            = ДоступностьПО;
	Элементы.ОрганизацииШаблонЧекаККМВозврат.Доступность     = ДоступностьПО;
	Элементы.ОрганизацииШиринаЛенты.Доступность              = ДоступностьПО;
	
	Элементы.ОрганизацииНастройкаРаспределенияВыручкиПоСекциям.Доступность = ДоступностьПО;
	
	СтрокаТаблицы.ИспользоватьБезПодключенияОборудования = НЕ ДоступностьПО;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРеквизитовКассаККМ()
	
	ТекущиеДанные = Элементы.Организации.ТекущиеДанные;
	
	Модифицированность = Истина;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.КассаККМ) Тогда
		Элементы.СоздатьИзменитьКассуККМ.Заголовок = "Создать";
	Иначе
		Элементы.СоздатьИзменитьКассуККМ.Заголовок = "Сохранить";
	КонецЕсли;
	Элементы.СоздатьИзменитьКассуККМ.Доступность = Истина
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтраницуКассыККМ(СтрокаТаблицы)
	
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.КассаККМ) Тогда
		ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ;
		Если ИспользоватьПодключаемоеОборудование Тогда
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Организация", СтрокаТаблицы.Организация);
			СтруктураПоиска.Вставить("ТипОборудования", Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор);
			
			СтрокиТаблицыПО = Объект.ТаблицаПодключаемоеОборудование.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиТаблицыПО.Количество() > 0 Тогда
				СтрокаТаблицыПО = СтрокиТаблицыПО[0];
				Если ЗначениеЗаполнено(СтрокаТаблицыПО.ПодключаемоеОборудование) Тогда
					ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор;
					СтрокаТаблицы.ПодключаемоеОборудование = СтрокаТаблицыПО.ПодключаемоеОборудование;
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НастройкаРаспределенияВыручкиПоСекциям) Тогда
						СтрокаТаблицы.НастройкаРаспределенияВыручкиПоСекциям = Справочники.НастройкиРаспределенияВыручкиПоСекциямФР.РаспределениеПоУмолчанию;
					КонецЕсли;
					СтрокаТаблицы.СерийныйНомер = СтрокаТаблицыПО.СерийныйНомер;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтрокаТаблицы.ТипКассы = ТипКассы;
		
	КонецЕсли;
	
	УстановитьДоступностьПолейККМ(СтрокаТаблицы);
	
	ОбновитьДекорациюКассыККМПодключаемоеОборудование(СтрокаТаблицы);
	
	Элементы.ОрганизацииНаименование.ПодсказкаВвода = СокрЛП(СтрокаТаблицы.Организация) + "(" + СокрЛП(Объект.Магазин) + ")";
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПодключаемоеОборудованиеСервер(ИндексСтроки)
	
	СтрокаТаблицы = Объект.Организации[ИндексСтроки];
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.ПодключаемоеОборудование)
		И НЕ ЗначениеЗаполнено(СтрокаТаблицы.НастройкаРаспределенияВыручкиПоСекциям) Тогда
		СтрокаТаблицы.НастройкаРаспределенияВыручкиПоСекциям = Справочники.НастройкиРаспределенияВыручкиПоСекциямФР.РаспределениеПоУмолчанию;
	КонецЕсли;
	УстановитьДоступностьПолейККМ(СтрокаТаблицы);
	ОбновитьДекорациюКассыККМПодключаемоеОборудование(СтрокаТаблицы);
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПолейККМ(СтрокаТаблицы)
	
	Если ИспользоватьПодключаемоеОборудование
		И ЗначениеЗаполнено(СтрокаТаблицы.ПодключаемоеОборудование) Тогда
		РеквизитыОборудования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.ПодключаемоеОборудование, "ТипОборудования, Организация");
		Если РеквизитыОборудования.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
			Элементы.ОрганизацияКассаККМ.Доступность = Ложь;
			Элементы.ГруппаКассаККМРеквизитыПечати.Доступность = Ложь;
			Элементы.ОрганизацииНастройкаРаспределенияВыручкиПоСекциям.Доступность = Ложь;
			СтрокаТаблицы.Организация = РеквизитыОборудования.Организация;
			ОрганизацияКассаККМ = РеквизитыОборудования.Организация;
		Иначе
			Элементы.ОрганизацияКассаККМ.Доступность = Истина;
			Элементы.ГруппаКассаККМРеквизитыПечати.Доступность = Истина;
			Элементы.ОрганизацииНастройкаРаспределенияВыручкиПоСекциям.Доступность = Истина;
		КонецЕсли;
	Иначе
		Элементы.ОрганизацияКассаККМ.Доступность = Истина;
		Элементы.ГруппаКассаККМРеквизитыПечати.Доступность = Истина;
		Элементы.ОрганизацииНастройкаРаспределенияВыручкиПоСекциям.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодключаемоеОборудованиеФР(Организация)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Организация"    , Организация);
	СтруктураПоиска.Вставить("ТипОборудования", Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор);
	
	СтрокиТаблицыПО = Объект.ТаблицаПодключаемоеОборудование.НайтиСтроки(СтруктураПоиска);
	
	ПодключаемоеОборудованиеФР = Справочники.ПодключаемоеОборудование.ПустаяСсылка();
	Если СтрокиТаблицыПО.Количество() > 0 Тогда
		ПодключаемоеОборудованиеФР = СтрокиТаблицыПО[0].ПодключаемоеОборудование;
	КонецЕсли;
	
	Возврат ПодключаемоеОборудованиеФР;
КонецФункции // ПодключаемоеОборудованиеФР()

&НаСервере
Процедура ОбновитьДекорациюКассыККМПодключаемоеОборудование(СтрокаТаблицы)
	
	ЗаголовокДекорации = "";
	ПодключаемоеОборудованиеКассыККМ = СтрокаТаблицы.ПодключаемоеОборудование;
	Если НастройкаПОФискальныеРегистраторы Тогда
		
		ПодключаемоеОборудованиеФР = ПодключаемоеОборудованиеФР(СтрокаТаблицы.Организация);
		
		Если НЕ ПодключаемоеОборудованиеКассыККМ = ПодключаемоеОборудованиеФР Тогда
			ЗаголовокДекорации = НСтр("ru = 'Оборудование не соответствует выбору.'") + " ";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодключаемоеОборудованиеКассыККМ)
		И НЕ ПодключаемоеОборудованиеКассыККМ.УстройствоИспользуется Тогда
		ЗаголовокДекорации = ЗаголовокДекорации + НСтр("ru = 'Устройство не используется.'") 
	КонецЕсли;
	
	Элементы.ДекорацияКассаККМПодключаемоеОборудование.Заголовок = ЗаголовокДекорации;
	
	Если ЗаголовокДекорации = "" Тогда
		Элементы.СтраницыКассыПодключаемоеОборудование.ТекущаяСтраница = Элементы.СтраницаКассыККМПодключаемоеОборудованиеПустая;
	Иначе
		Элементы.СтраницыКассыПодключаемоеОборудование.ТекущаяСтраница = Элементы.СтраницаКассыККМИсправлениеПодключаемоеОборудование;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИсправитьПодключенноеОборудованиеВКассеККМСервер(ИндексСтроки)
	
	СтрокаТаблицы = Объект.Организации[ИндексСтроки];
	ПодключаемоеОборудованиеКассыККМ = СтрокаТаблицы.ПодключаемоеОборудование;
	ОшибкаИсправлена = Ложь;
	НавигационнаяСсылка = Неопределено;
	Если НастройкаПОФискальныеРегистраторы Тогда
		
		ПодключаемоеОборудованиеФР = ПодключаемоеОборудованиеФР(СтрокаТаблицы.Организация);
		
		Если НЕ ПодключаемоеОборудованиеКассыККМ = ПодключаемоеОборудованиеФР Тогда
			Если ЗначениеЗаполнено(ПодключаемоеОборудованиеФР) Тогда
				СтрокаТаблицы.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор;
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НастройкаРаспределенияВыручкиПоСекциям) Тогда
					СтрокаТаблицы.НастройкаРаспределенияВыручкиПоСекциям = Справочники.НастройкиРаспределенияВыручкиПоСекциямФР.РаспределениеПоУмолчанию;
				КонецЕсли;
			Иначе
				СтрокаТаблицы.ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ;
			КонецЕсли;
			
			СтрокаТаблицы.ПодключаемоеОборудование = ПодключаемоеОборудованиеФР;
			
			НавигационнаяСсылка = СоздатьИзменитьКассуККМНаСервере(ИндексСтроки);
			ОбновитьДекорациюКассыККМПодключаемоеОборудование(СтрокаТаблицы);
			ОшибкаИсправлена = Истина;
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ ОшибкаИсправлена
		И ЗначениеЗаполнено(ПодключаемоеОборудованиеКассыККМ)
		И НЕ ПодключаемоеОборудованиеКассыККМ.УстройствоИспользуется Тогда
		
		ПодключаемоеОборудованиеОбъект = ПодключаемоеОборудованиеКассыККМ.ПолучитьОбъект();
		ПодключаемоеОборудованиеОбъект.УстройствоИспользуется = Истина;
		ПодключаемоеОборудованиеОбъект.Записать();
		
		ОбновитьДекорациюКассыККМПодключаемоеОборудование(СтрокаТаблицы);
		
	КонецЕсли;
	
	Возврат НавигационнаяСсылка;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаКасса

&НаСервере
Процедура ЗаполнитьКассы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаОрганизаций.Организация
	|ПОМЕСТИТЬ ТаблицаОрганизаций
	|ИЗ
	|	&ТаблицаОрганизаций КАК ТаблицаОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Кассы.Ссылка,
	|	Кассы.КассаККМ,
	|	Кассы.ПробиватьЧекиПоКассеККМ,
	|	Кассы.Владелец,
	|	Кассы.ШаблонРКО,
	|	Кассы.ШаблонПКО,
	|	Кассы.Наименование
	|ПОМЕСТИТЬ ТаблицаКасс
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	НЕ Кассы.КассаУправляющейСистемы
	|	И Кассы.Магазин = &Магазин
	|	И Кассы.Владелец В
	|			(ВЫБРАТЬ
	|				ТаблицаОрганизаций.Организация КАК Организация
	|			ИЗ
	|				ТаблицаОрганизаций КАК ТаблицаОрганизаций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОрганизаций.Организация,
	|	ТаблицаКасс.Ссылка КАК Касса,
	|	ТаблицаКасс.КассаККМ,
	|	ТаблицаКасс.ПробиватьЧекиПоКассеККМ,
	|	ТаблицаКасс.ШаблонРКО,
	|	ТаблицаКасс.ШаблонПКО,
	|	ТаблицаКасс.Наименование
	|ИЗ
	|	ТаблицаОрганизаций КАК ТаблицаОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКасс КАК ТаблицаКасс
	|		ПО ТаблицаОрганизаций.Организация = ТаблицаКасс.Владелец";
	
	Запрос.УстановитьПараметр("ТаблицаОрганизаций", Объект.Организации.Выгрузить());
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	Результат = Запрос.Выполнить();
	
	Объект.Кассы.Загрузить(Результат.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКассу(СтрокаТаблицы)
	
	Касса = СтрокаТаблицы.Касса;
	
	Элементы.НаименованиеКасса.ПодсказкаВвода = СокрЛП(СтрокаТаблицы.Организация) + " (" + СокрЛП(Объект.Магазин) + ")";
	
	Если НЕ ЗначениеЗаполнено(Касса) Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Организация", СтрокаТаблицы.Организация);
		
		СтрокиТаблицыОрганизаций = Объект.Организации.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТаблицыОрганизаций.Количество() > 0 Тогда
			СтрокаТаблицы.ПробиватьЧекиПоКассеККМ = Истина;
			СтрокаТаблицы.КассаККМ = СтрокиТаблицыОрганизаций[0].КассаККМ;
		КонецЕсли;
	КонецЕсли;
	
	НаименованиеКасса = СтрокаТаблицы.Наименование;
	ПробиватьЧекиПоКассеККМКасса = СтрокаТаблицы.ПробиватьЧекиПоКассеККМ;
	КассаККМКасса = СтрокаТаблицы.КассаККМ;
	ШаблонРКОКасса = СтрокаТаблицы.ШаблонРКО;
	ШаблонПКОКасса = СтрокаТаблицы.ШаблонПКО;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКассыСервер(СтрокаТаблицы)
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Касса) Тогда
		Элементы.СоздатьИзменитьКассу.Заголовок = "Создать";
		Элементы.СоздатьИзменитьКассу.Доступность = Истина;
	Иначе
		Элементы.СоздатьИзменитьКассу.Заголовок = "Сохранить";
		Элементы.СоздатьИзменитьКассу.Доступность = Ложь;
	КонецЕсли;
	
	ПробиватьЧекиПоКассеККМ = СтрокаТаблицы.ПробиватьЧекиПоКассеККМ;
	
	Элементы.КассаККМКасса.Доступность = ПробиватьЧекиПоКассеККМ;
	Элементы.ШаблонРКОКасса.Доступность = ПробиватьЧекиПоКассеККМ;
	Элементы.ШаблонПКОКасса.Доступность = ПробиватьЧекиПоКассеККМ;
	
	ПараметрыВыбораЭлемента = Новый Массив;
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", ОрганизацияКассаККМ);
	ПараметрыВыбораЭлемента.Добавить(НовыйПараметр);
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Магазин", Объект.Магазин);
	ПараметрыВыбораЭлемента.Добавить(НовыйПараметр);
	
	МассивТиповКассы = Новый Массив;
	
	МассивТиповКассы.Добавить(Перечисления.ТипыКассККМ.ФискальныйРегистратор);
	МассивТиповКассы.Добавить(Перечисления.ТипыКассККМ.АвтономнаяККМ);
	ПараметрыВыбораЭлемента.Добавить(Новый ПараметрВыбора("Отбор.ТипКассы",Новый ФиксированныйМассив(МассивТиповКассы)));
	
	Элементы.КассаККМКасса.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЭлемента);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРеквизитовКасса()
	
	СтрокаТаблицы = Объект.Кассы[ИндексСтрокиКасса];
	
	Модифицированность = Истина;
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Касса) Тогда
		Элементы.СоздатьИзменитьКассу.Заголовок = "Создать";
	Иначе
		Элементы.СоздатьИзменитьКассу.Заголовок = "Сохранить";
	КонецЕсли;
	Элементы.СоздатьИзменитьКассу.Доступность = Истина
	
КонецПроцедуры

&НаСервере
Функция СоздатьИзменитьКассуНаСервере()
	
	СтрокаТаблицы = Объект.Кассы[ИндексСтрокиКасса];
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.Касса) Тогда
		КассаОбъект = СтрокаТаблицы.Касса.ПолучитьОбъект();
	Иначе
		КассаОбъект = Справочники.Кассы.СоздатьЭлемент();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаименованиеКасса) Тогда
		НаименованиеКасса = СокрЛП(СтрокаТаблицы.Организация) + " (" + СокрЛП(Объект.Магазин) + ")";
	КонецЕсли;
	
	КассаОбъект.Наименование   = НаименованиеКасса;
	СтрокаТаблицы.Наименование = НаименованиеКасса;
	КассаОбъект.Владелец = ОрганизацияКассаККМ;
	КассаОбъект.Магазин = Объект.Магазин;
	КассаОбъект.ПробиватьЧекиПоКассеККМ = ПробиватьЧекиПоКассеККМКасса;
	КассаОбъект.КассаККМ = КассаККМКасса;
	КассаОбъект.ШаблонПКО = ШаблонПКОКасса;
	КассаОбъект.ШаблонРКО = ШаблонРКОКасса;
	
	КассаОбъект.Записать();
	
	СтрокаТаблицы.Касса = КассаОбъект.Ссылка;
	
	Касса = КассаОбъект.Ссылка;
	
	ПриИзмененииКассыСервер(СтрокаТаблицы);
	
	Возврат ПолучитьНавигационнуюСсылку(Касса);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаВидыОплат

&НаКлиенте
Процедура СоздатьОплатуКлиент(ИмяТипаОплат, НаименованиеВидаОплат)
	
	ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ." + ИмяТипаОплат);
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ТипОплаты", ТипОплаты);
	ЗначенияЗаполнения.Вставить("Наименование", НаименованиеВидаОплат);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуСозданияОплаты", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ВидыОплатЧекаККМ.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаСервере
Процедура ДоступностьКнопокВидовОплаты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыОплатЧекаККМ.Ссылка
	|ИЗ
	|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
	|ГДЕ
	|	ВидыОплатЧекаККМ.ТипОплаты = Значение(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыОплатЧекаККМ.Ссылка
	|ИЗ
	|	Справочник.ВидыОплатЧекаККМ КАК ВидыОплатЧекаККМ
	|ГДЕ
	|	ВидыОплатЧекаККМ.ТипОплаты = Значение(Перечисление.ТипыОплатЧекаККМ.БанковскийКредит)";
	
	Результат = Запрос.ВыполнитьПакет();
	
	Элементы.ВидыОплатСоздатьОплатуПлатежнойКартой.Видимость    = ИспользоватьОплатуПлатежнымиКартами;
	Элементы.ВидыОплатСоздатьОплатуБанковскимКредитом.Видимость = ИспользоватьОплатуБанковскимиКредитами;
	
	Элементы.ДекорацияНеобходимаОплатаПлатежнойКартой.Видимость    = ИспользоватьОплатуПлатежнымиКартами И Результат[0].Пустой();
	Элементы.ДекорацияНеобходимаОплатаБанковскимКредитом.Видимость = ИспользоватьОплатуБанковскимиКредитами И Результат[1].Пустой();
	
	Элементы.СоздатьОплатуПлатежнойКартой.Видимость    = Элементы.ДекорацияНеобходимаОплатаПлатежнойКартой.Видимость;
	Элементы.СоздатьОплатуБанковскимКредитом.Видимость = Элементы.ДекорацияНеобходимаОплатаБанковскимКредитом.Видимость;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаЭквайринговыеТерминалы

&НаСервере
Функция МассивЭквайринговыхТерминалов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК Касса
	|ПОМЕСТИТЬ ТаблицаКасс
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Ссылка В(&КассыККМ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Кассы.Ссылка
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	Кассы.КассаККМ В(&КассыККМ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Кассы.Ссылка
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	НЕ Кассы.ПробиватьЧекиПоКассеККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Ссылка
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Касса В
	|			(ВЫБРАТЬ
	|				ТаблицаКасс.Касса КАК Касса
	|			ИЗ
	|				ТаблицаКасс КАК ТаблицаКасс)";
	
	Запрос.УстановитьПараметр("КассыККМ", Объект.Организации.Выгрузить().ВыгрузитьКолонку("КассаККМ"));
	
	Результат = Запрос.Выполнить();
	МассивКасс = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если МассивКасс.Количество() > 0 Тогда
		
		МассивКасс.Добавить(Справочники.ЭквайринговыеТерминалы.ПустаяСсылка());
		
	КонецЕсли;
	
	Возврат МассивКасс;
КонецФункции

&НаКлиенте
Процедура ПриИзмененииСтраницыЭквайринговыхТерминалов()
	
	МассивЭТ = Новый Массив;
	ПриИзмененииСтраницыЭквайринговыхТерминаловСервер(МассивЭТ);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		ЭквайринговыеТерминалы,
		"Ссылка",
		МассивЭТ,
		Истина,
		ВидСравненияКомпоновкиДанных.ВСписке);
	
	Элементы.ОрганизацияЭквайринговыеТерминалы.Видимость  = НЕ НесколькоОрганизаций;
	
	Элементы.ЭквайринговыеТерминалыОрганизация.Видимость = НесколькоОрганизаций;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеТаблицыСозданияЭТ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Организация,
	|	Организации.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаОрганизаций
	|ИЗ
	|	&Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК Касса,
	|	КассыККМ.Владелец КАК Организация,
	|	1 КАК ПолеУпорядочивания
	|ПОМЕСТИТЬ ТаблицаКасс
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.Ссылка В(&КассыККМ)
	|	И КассыККМ.Магазин = &Магазин
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Кассы.Ссылка,
	|	Кассы.Владелец,
	|	2
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	Кассы.КассаККМ В(&КассыККМ)
	|	И Кассы.Магазин = &Магазин
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Кассы.Ссылка,
	|	Кассы.Владелец,
	|	3
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|ГДЕ
	|	НЕ Кассы.ПробиватьЧекиПоКассеККМ
	|	И Кассы.Магазин = &Магазин
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОрганизаций.НомерСтроки,
	|	ТаблицаКасс.Касса,
	|	ТаблицаКасс.Организация,
	|	ТаблицаКасс.ПолеУпорядочивания
	|ПОМЕСТИТЬ ТаблицаКассСЭлементамиУпорядочивания
	|ИЗ
	|	ТаблицаКасс КАК ТаблицаКасс
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаОрганизаций КАК ТаблицаОрганизаций
	|		ПО ТаблицаКасс.Организация = ТаблицаОрганизаций.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКассСЭлементамиУпорядочивания.НомерСтроки,
	|	ТаблицаКассСЭлементамиУпорядочивания.Касса,
	|	ТаблицаКассСЭлементамиУпорядочивания.Организация,
	|	ТаблицаКассСЭлементамиУпорядочивания.ПолеУпорядочивания
	|ПОМЕСТИТЬ ТаблицаКассБезЭТ
	|ИЗ
	|	ТаблицаКассСЭлементамиУпорядочивания КАК ТаблицаКассСЭлементамиУпорядочивания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|		ПО ТаблицаКассСЭлементамиУпорядочивания.Организация = ЭквайринговыеТерминалы.Организация
	|			И ТаблицаКассСЭлементамиУпорядочивания.Касса = ЭквайринговыеТерминалы.Касса
	|ГДЕ
	|	ЭквайринговыеТерминалы.Ссылка ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодключенноеОборудование.ПодключаемоеОборудование,
	|	ПодключенноеОборудование.ТипОборудования КАК ТипОборудования,
	|	ПодключенноеОборудование.Организация
	|ПОМЕСТИТЬ ТаблицаИзменяемоеОборудование
	|ИЗ
	|	&ПодключенноеОборудование КАК ПодключенноеОборудование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИзменяемоеОборудование.ПодключаемоеОборудование,
	|	ТаблицаИзменяемоеОборудование.Организация
	|ПОМЕСТИТЬ ТаблицаИзменяемыеЭквайринговыеТерминалы
	|ИЗ
	|	ТаблицаИзменяемоеОборудование КАК ТаблицаИзменяемоеОборудование
	|ГДЕ
	|	ТаблицаИзменяемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКассБезЭТ.Касса,
	|	ЕСТЬNULL(ТаблицаИзменяемыеЭквайринговыеТерминалы.ПодключаемоеОборудование, ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)) КАК ПодключаемоеОборудование,
	|	ТаблицаКассБезЭТ.Организация
	|ИЗ
	|	ТаблицаКассБезЭТ КАК ТаблицаКассБезЭТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИзменяемыеЭквайринговыеТерминалы КАК ТаблицаИзменяемыеЭквайринговыеТерминалы
	|		ПО ТаблицаКассБезЭТ.Организация = ТаблицаИзменяемыеЭквайринговыеТерминалы.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаКассБезЭТ.ПолеУпорядочивания,
	|	ТаблицаКассБезЭТ.НомерСтроки";
	
	Запрос.УстановитьПараметр("Организации", Объект.Организации.Выгрузить());
	Запрос.УстановитьПараметр("КассыККМ",  Объект.Организации.Выгрузить().ВыгрузитьКолонку("КассаККМ"));
	Запрос.УстановитьПараметр("ПодключенноеОборудование", Объект.ТаблицаПодключаемоеОборудование.Выгрузить());
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	Результат = Запрос.Выполнить();
	ТаблицаСозданияЭТ.Загрузить(Результат.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтраницыЭквайринговыхТерминаловСервер(МассивЭТ)
	
	МассивЭТ = МассивЭквайринговыхТерминалов();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаНастройкиРМК

&НаКлиенте

Процедура УстановитьЗаголовокКнопки()
	
	Если Элементы.Найти("НастройкиРМКУстановитьТекущуюНастройкуРМК") = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.НастройкиРМК.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		Если ТекущаяСтрока.Текущая Тогда
			ЗаголовокКоманды = НСтр("ru = 'Отменить настройку'");
		Иначе
			ЗаголовокКоманды = НСтр("ru = 'Применить настройку'");
		КонецЕсли;
		
		Если НЕ ЗаголовокКоманды = Элементы.НастройкиРМКУстановитьТекущуюНастройкуРМК.Заголовок Тогда
			Элементы.НастройкиРМКУстановитьТекущуюНастройкуРМК.Заголовок = ЗаголовокКоманды;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюНастройкуРМКСервер(НастройкаРМК)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкаРМКРегистр.Компьютер,
	|	НастройкаРМКРегистр.НастройкаРМК
	|ИЗ
	|	РегистрСведений.НастройкаРМКНаКомпьютере КАК НастройкаРМКРегистр
	|ГДЕ
	|	НастройкаРМКРегистр.Компьютер = &Компьютер
	|	И НастройкаРМКРегистр.НастройкаРМК = &НастройкаРМК";
	
	Запрос.УстановитьПараметр("Компьютер"   , мИмяКомпьютера);
	Запрос.УстановитьПараметр("НастройкаРМК", НастройкаРМК);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МенеджерРегистраНастройкаРМК           = РегистрыСведений.НастройкаРМКНаКомпьютере.СоздатьМенеджерЗаписи();
	МенеджерРегистраНастройкаРМК.Компьютер = мИмяКомпьютера;
	
	Если НЕ Выборка.Следующий() Тогда
		МенеджерРегистраНастройкаРМК.НастройкаРМК = НастройкаРМК;
	КонецЕсли;
	
	МенеджерРегистраНастройкаРМК.Записать(Истина);
	
	Элементы.НастройкиРМК.Обновить();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСтраницаФинал

&НаКлиенте
Процедура ЗакрытьПоследнююСтраницу()
	
	Закрыть();
	
	Если ОткрытьРМК Тогда
		ОбщегоНазначенияРТКлиент.ОткрытьМенюРМКУправляемыйРежим()
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтчет()
	
	Макет = Обработки.ПомощникНастройкиКассовогоМеста.ПолучитьМакет("Макет");
	
	ОбластьШапка   = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаПО = Макет.ПолучитьОбласть("ШапкаПО");
	
	ОбластьОбщиеВидыОплат = Макет.ПолучитьОбласть("ОбщиеВидыОплат");
	
	ТабличныйДокументФинал.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.Наименование КАК НаименованиеКасса,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.ИспользоватьБезПодключенияОборудования КАК НаличныеПОСкрыть,
	|	КассыККМ.ПодключаемоеОборудование КАК НаличныеПОСсылка
	|ПОМЕСТИТЬ ТаблицаНаличные
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.РабочееМесто = &РабочееМесто
	|	И НЕ КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ККМOffline)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Организация,
	|	МИНИМУМ(ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования) КАК ИспользоватьБезПодключенияОборудования
	|ПОМЕСТИТЬ ТаблицаЭТ
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Магазин = &Магазин
	|	И &ИспользоватьОплатуПлатежнымиКартами
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭквайринговыеТерминалы.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНаличные.КассаККМ,
	|	ТаблицаНаличные.НаименованиеКасса,
	|	ТаблицаНаличные.Организация,
	|	ТаблицаНаличные.НаличныеПОСкрыть,
	|	ТаблицаНаличные.НаличныеПОСсылка,
	|	ВЫБОР
	|		КОГДА ТаблицаЭТ.Организация ЕСТЬ NULL 
	|			ТОГДА """"
	|		ИНАЧЕ ""V""
	|	КОНЕЦ КАК ОплатаКартой,
	|	ВЫБОР
	|		КОГДА ТаблицаЭТ.ИспользоватьБезПодключенияОборудования ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ТаблицаЭТ.ИспользоватьБезПодключенияОборудования
	|	КОНЕЦ КАК ОплатаКартойПОСкрыть
	|ИЗ
	|	ТаблицаНаличные КАК ТаблицаНаличные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЭТ КАК ТаблицаЭТ
	|		ПО ТаблицаНаличные.Организация = ТаблицаЭТ.Организация";
	
	Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
	Запрос.УстановитьПараметр("Магазин"     , Объект.Магазин);
	Запрос.УстановитьПараметр("ИспользоватьОплатуПлатежнымиКартами"   , ИспользоватьОплатуПлатежнымиКартами);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОбластьШапка.Параметры.РабочееМесто = Объект.РабочееМесто;
	
	ТабличныйДокументФинал.Вывести(ОбластьШапка);
	
	Пока Выборка.Следующий() Цикл
		
		ОбластьОрганизация = Макет.ПолучитьОбласть("Организация");
		ОбластьОрганизация.Параметры.Заполнить(Выборка);
		
		Если Выборка.НаличныеПОСкрыть Тогда
			ОбластьОрганизация.Области.ОбластьНаличные.Картинка = Новый Картинка;
		КонецЕсли;
		
		Если Выборка.ОплатаКартойПОСкрыть Тогда
			ОбластьОрганизация.Области.ОбластьКартой.Картинка = Новый Картинка;
		КонецЕсли;
		
		ТабличныйДокументФинал.Вывести(ОбластьОрганизация);
		
	КонецЦикла;
	
	Если ПродажиСервер.ЕстьВозможностьОплатыБанковскимКредитом() Тогда
		ОбластьОбщиеВидыОплат.Параметры.ОплатаБанковскимиКредитами = "V";
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности") Тогда
		ОбластьОбщиеВидыОплат.Параметры.ОплатаБонусами = "V";
	КонецЕсли; 
	
	ТабличныйДокументФинал.Вывести(ОбластьОбщиеВидыОплат);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК СсылкаПО,
	|	ПодключаемоеОборудование.Наименование,
	|	ПодключаемоеОборудование.ТипОборудования,
	|	ВЫБОР
	|		КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.СканерШтрихкода)
	|			ТОГДА ""СканерШтрихкода""
	|		КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт)
	|			ТОГДА ""СчитывательМагнитныхКарт""
	|		КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор)
	|			ТОГДА ""ФискальныйРегистратор""
	|		КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККТ)
	|			ТОГДА ""ККТ""
	|		КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ДисплейПокупателя)
	|			ТОГДА ""ДисплейПокупателя""
	|		КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ТерминалСбораДанных)
	|			ТОГДА ""ТерминалСбораДанных""
	|		КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал)
	|			ТОГДА ""ЭквайринговыйТерминал""
	|		КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ЭлектронныеВесы)
	|			ТОГДА ""ЭлектронныеВесы""
	|		КОГДА ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток)
	|			ТОГДА ""ВесыСПечатьюЭтикеток""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИмяТипаОборудования
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И ПодключаемоеОборудование.УстройствоИспользуется";
	
	Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ТабличныйДокументФинал.Вывести(ОбластьШапкаПО);
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ИмяТипаОборудования) Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть(Выборка.ИмяТипаОборудования);
			ОбластьМакета.Параметры.Заполнить(Выборка);
			
			ТабличныйДокументФинал.Вывести(ОбластьМакета);
			
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
