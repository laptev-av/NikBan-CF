
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Документ = Параметры.Документ;
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		ТекстИсключения = НСтр("ru='Не предусмотрено непосредственное открытие формы обработки.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Контрагент, Магазин, Организация");
	Контрагент 			= СтруктураРеквизитов.Контрагент;
	Магазин 			= СтруктураРеквизитов.Магазин;
	Организация 		= СтруктураРеквизитов.Организация;
	
	ЗаполнитьТаблицуПоРасчетамСПартнерами();
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РассчитатьСуммуЗачетаАванса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Перем МассивОбработанныхДокументов;
	
	МассивСтрок = Оплаты.НайтиСтроки(Новый Структура("ДанныеИзменены", Истина));
	
	Если Модифицированность Тогда
		
		Если ЗавершениеРаботы Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			Отказ = Истина;
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект, МассивОбработанныхДокументов);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Данные зачета оплаты были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
			
		Иначе
			РазблокироватьДокументыДляРедактирования();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТабличнойЧастиОплаты

&НаКлиенте
Процедура ОплатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ОплатыДокументОплаты" Тогда
		СтрокаТаблицы = Элементы.Оплаты.ТекущиеДанные;
		Если СтрокаТаблицы <> Неопределено
			И ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты) Тогда
			ПоказатьЗначение(,СтрокаТаблицы.ДокументОплаты);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Элементы.Оплаты.ТекущаяСтрока);
	ЗаблокироватьДокументыДляРедактирования(МассивСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Оплаты.ТекущиеДанные;
	СтрокаТаблицы.ДанныеИзменены = Истина;
	Если СтрокаТаблицы.СуммаЗачетаОплаты > СтрокаТаблицы.СуммаАванса Тогда
		СтрокаТаблицы.СуммаЗачетаОплаты = СтрокаТаблицы.СуммаАванса;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Оплаты.ТекущиеДанные;
	УстановитьСнятьПометку(Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыПометкаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Оплаты.ТекущиеДанные;
	УстановитьСнятьПометку(ТекущиеДанные.Пометка);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьТаблицуПоРасчетамСПартнерами();
	РассчитатьСуммуЗачетаАванса();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗачетОплаты(Команда)
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаТаблицы Из Оплаты Цикл
		МассивСтрок.Добавить(СтрокаТаблицы.ПолучитьИдентификатор());
	КонецЦикла;
	
	ЗаполнитьСуммыЗачетаОплаты(МассивСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗачетОплатыДляВыделенныхСтрок(Команда)
	
	МассивСтрок = Элементы.Оплаты.ВыделенныеСтроки;
	ЗаполнитьСуммыЗачетаОплаты(МассивСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	Перем МассивОбработанныхДокументов;
	
	ЗаписатьСервер(МассивОбработанныхДокументов);
	ОповеститьОРезультатеЗачетаОплаты(МассивОбработанныхДокументов);
	РассчитатьСуммуЗачетаАванса();
	
	Оповестить("ЗачтенаОплата", Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьОплатуИЗакрыть(Команда)
	
	Перем МассивОбработанныхДокументов;
	
	Отказ = Ложь;
	СохранитьРезультатЗачетаОплаты(МассивОбработанныхДокументов, Отказ);
	ОповеститьОРезультатеЗачетаОплаты(МассивОбработанныхДокументов);
	Оповестить("ЗачтенаОплата", Документ);
	Если Не Отказ Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьСнятьПометку(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьСнятьПометку(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Заголовок = НСтр("ru = 'Зачет оплат по документу:'") +" "+ Строка(Документ);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеТаблицыРасчетовСПартнерами

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(ОтветНаВопрос, МассивОбработанныхДокументов) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
		// отмена
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		СохранитьРезультатЗачетаОплаты(МассивОбработанныхДокументов);
		РазблокироватьДокументыДляРедактирования();
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		РазблокироватьДокументыДляРедактирования();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВерсияДанныхДокумента(ДокументСсылка)
	
	ИмяДокумента = Метаданные.НайтиПоТипу(ТипЗнч(ДокументСсылка)).Имя;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	Документ.%ИмяДокумента% КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|";
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "%ИмяДокумента%", ИмяДокумента);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВерсияДанных = Выборка.ВерсияДанных;
	Иначе
		ВерсияДанных = "            ";
	КонецЕсли;
	
	Возврат ВерсияДанных;
	
КонецФункции

&НаСервере
Процедура ПолучитьСуммуКОплате()
	
	ИтоговыеПоказатели = ЗакупкиСервер.ОбновитьИтоговыеПоказателиВзаиморасчетовПоДокументу(Документ);
	
	СуммаОплачено = 					ИтоговыеПоказатели.СуммаОплачено;
	СуммаВзаимозачет = 					ИтоговыеПоказатели.СуммаВзаимозачет;
			
	СуммаКОплате = Документ.СуммаДокумента - СуммаОплачено - СуммаВзаимозачет;
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаПоРасчетамСПоставщиками()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Дата,
	|	ТаблицаДокументов.ДокументОплаты,
	|	СУММА(ТаблицаДокументов.СуммаАванса) КАК СуммаАванса,
	|	СУММА(ТаблицаДокументов.СуммаЗачетаОплаты) КАК СуммаЗачетаОплаты,
	|	СУММА(ТаблицаДокументов.СуммаАванса) КАК ДоступноКЗачету,
	|	ТаблицаДокументов.СуммаДокумента
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПоставщиками.Период КАК Дата,
	|		РасчетыСПоставщиками.Регистратор КАК ДокументОплаты,
	|		РасчетыСПоставщиками.Поставщик КАК Поставщик,
	|		РасчетыСПоставщиками.СуммаПриход КАК СуммаАванса,
	|		ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор КАК Документ.РасходныйКассовыйОрдер).СуммаДокумента КАК СуммаДокумента,
	|		0 КАК СуммаЗачетаОплаты
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(
	|				,
	|				,
	|				Регистратор,
	|				,
	|				Поставщик = &Поставщик
	|					И Магазин = &Магазин
	|					И (ДокументРасчета = НЕОПРЕДЕЛЕНО
	|						ИЛИ ДокументРасчета = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|						ИЛИ ДокументРасчета = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка))) КАК РасчетыСПоставщиками
	|	ГДЕ
	|		РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	|		И ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор КАК Документ.РасходныйКассовыйОрдер).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)
	|		И ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор КАК Документ.РасходныйКассовыйОрдер).Организация = &Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетыСПоставщиками.Период,
	|		РасчетыСПоставщиками.Регистратор,
	|		РасчетыСПоставщиками.Поставщик,
	|		РасчетыСПоставщиками.СуммаПриход,
	|		ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор КАК Документ.РегистрацияБезналичнойОплаты).СуммаДокумента,
	|		0
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(
	|				,
	|				,
	|				Регистратор,
	|				,
	|				Поставщик = &Поставщик
	|					И Магазин = &Магазин
	|					И (ДокументРасчета = НЕОПРЕДЕЛЕНО
	|						ИЛИ ДокументРасчета = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|						ИЛИ ДокументРасчета = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваров.ПустаяСсылка))) КАК РасчетыСПоставщиками
	|	ГДЕ
	|		РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.РегистрацияБезналичнойОплаты
	|		И ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор КАК Документ.РегистрацияБезналичнойОплаты).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)
	|		И ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор КАК Документ.РегистрацияБезналичнойОплаты).Организация = &Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор КАК Документ.РасходныйКассовыйОрдер).Дата,
	|		РасчетыСПоставщиками.Регистратор,
	|		РасчетыСПоставщиками.Поставщик,
	|		РасчетыСПоставщиками.СуммаПриход,
	|		ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор КАК Документ.РасходныйКассовыйОрдер).СуммаДокумента,
	|		РасчетыСПоставщиками.СуммаПриход
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.Обороты(, , Регистратор, ДокументРасчета = &ОбъектРасчетов) КАК РасчетыСПоставщиками
	|	ГДЕ
	|		РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	|		И РасчетыСПоставщиками.СуммаПриход > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор КАК Документ.РегистрацияБезналичнойОплаты).Дата,
	|		РасчетыСПоставщиками.Регистратор,
	|		РасчетыСПоставщиками.Поставщик,
	|		РасчетыСПоставщиками.СуммаПриход,
	|		ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор КАК Документ.РегистрацияБезналичнойОплаты).СуммаДокумента,
	|		РасчетыСПоставщиками.СуммаПриход
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.Обороты(, , Регистратор, ДокументРасчета = &ОбъектРасчетов) КАК РасчетыСПоставщиками
	|	ГДЕ
	|		РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.РегистрацияБезналичнойОплаты
	|		И РасчетыСПоставщиками.СуммаПриход > 0) КАК ТаблицаДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументов.Дата,
	|	ТаблицаДокументов.ДокументОплаты,
	|	ТаблицаДокументов.Поставщик,
	|	ТаблицаДокументов.СуммаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокументов.Дата";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуПоРасчетамСПартнерами()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = ТекстЗапросаПоРасчетамСПоставщиками();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Поставщик", Контрагент);
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОбъектРасчетов", Документ);
	Запрос.Текст = ТекстЗапроса;
	
	Оплаты.Очистить();
	
	ТаблицаОплат = Оплаты.Выгрузить();
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаОплат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ВерсияДанных = ВерсияДанныхДокумента(Выборка.ДокументОплаты);
		НоваяСтрока.Пометка = Выборка.СуммаЗачетаОплаты > 0;
	КонецЦикла;
	
	Оплаты.Загрузить(ТаблицаОплат);
	
	ПолучитьСуммуКОплате();
	СуммаКОплатеВсего = СуммаКОплате + Оплаты.Итог("СуммаЗачетаОплаты");
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ОтразитьЗачетОплатыВДокументе(ДокументСсылка, Знач Сумма, Знач СуммаЗачетаОплаты, Знач ИндексСтроки, Отказ)
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	
	ИмяТабличнойЧасти = "РасшифровкаПлатежа";
	
	ТаблицаРасшифровкаПлатежа = ДокументОбъект[ИмяТабличнойЧасти].Выгрузить(,);
	
	ТаблицаРасшифровкаПлатежа.Свернуть("СтатьяДвиженияДенежныхСредств, ДокументРасчетовСКонтрагентом ", "Сумма");
	ТаблицаРасшифровкаПлатежа.Сортировать("ДокументРасчетовСКонтрагентом Убыв");
	
	ДанныеИзменены = Ложь;
	
	МассивСтрок = ТаблицаРасшифровкаПлатежа;
	
	Для Каждого СтрокаДокумента Из МассивСтрок Цикл
		
		Если (СтрокаДокумента.ДокументРасчетовСКонтрагентом = Документ ИЛИ НЕ ЗначениеЗаполнено(СтрокаДокумента.ДокументРасчетовСКонтрагентом)) Тогда
			
			УменьшениеСуммы = 0;
			Если СтрокаДокумента.Сумма > Сумма Тогда
				УменьшениеСуммы = СтрокаДокумента.Сумма - Сумма;
				СтрокаДокумента.Сумма = СуммаЗачетаОплаты;
				Сумма = 0;
				СуммаЗачетаОплаты = 0;
			Иначе 
				СтрокаДокумента.Сумма = ?(Сумма <> 0, СтрокаДокумента.Сумма * СуммаЗачетаОплаты / Сумма, 0);
				Сумма = Сумма - СтрокаДокумента.Сумма;
				СуммаЗачетаОплаты = СуммаЗачетаОплаты - СтрокаДокумента.Сумма;
			КонецЕсли;
			
			Если УменьшениеСуммы <> 0 Тогда
				НоваяСтрока = ТаблицаРасшифровкаПлатежа.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
				НоваяСтрока.Сумма = УменьшениеСуммы;
				НоваяСтрока.ДокументРасчетовСКонтрагентом = Неопределено;
			КонецЕсли;
			
			СтрокаДокумента.ДокументРасчетовСКонтрагентом = Документ;
			ДанныеИзменены = Истина;
			
			Если Сумма = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеИзменены Тогда
		
		ТаблицаРасшифровкаПлатежа.Свернуть("ДокументРасчетовСКонтрагентом, СтатьяДвиженияДенежныхСредств", "Сумма");
		
		Индекс = ТаблицаРасшифровкаПлатежа.Количество() - 1;
		
		Пока Индекс >= 0 Цикл
			Если ТаблицаРасшифровкаПлатежа[Индекс].Сумма = 0 Тогда
				ТаблицаРасшифровкаПлатежа.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс -1;
		КонецЦикла;
		
		ДокументОбъект[ИмяТабличнойЧасти].Загрузить(ТаблицаРасшифровкаПлатежа);
		ДокументОбъект.ДополнительныеСвойства.Вставить("ПроверкаДатыЗапретаИзменения", Ложь);
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось записать документ %1. %2'"),
					ДокументСсылка,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					"Оплаты[" + (ИндексСтроки) + "].ДокументОплаты");
				Отказ = Истина;
			КонецПопытки;
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось записать документ %1'"),
				ДокументСсылка);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				"Оплаты[" + (ИндексСтроки) + "].ДокументОплаты");
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьРезультатЗачетаОплаты(МассивОбработанныхДокументов, Отказ = Ложь)
	
	МассивОбработанныхДокументов = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТаблицы Из Оплаты Цикл
		
		НачатьТранзакцию();
		
		Если СтрокаТаблицы.ДанныеИзменены Тогда
			
			Сумма = ?(СтрокаТаблицы.СуммаАванса <> 0, СтрокаТаблицы.СуммаЗачетаОплаты, 0);
			ИндексСтроки = Оплаты.Индекс(СтрокаТаблицы);
			
			ОтразитьЗачетОплатыВДокументе(
				СтрокаТаблицы.ДокументОплаты,
				Сумма,
				СтрокаТаблицы.СуммаЗачетаОплаты,
				ИндексСтроки,
				Отказ);
			
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			
			Попытка
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				
			КонецПопытки;
			
			Если СтрокаТаблицы.ДанныеИзменены Тогда
				МассивОбработанныхДокументов.Добавить(СтрокаТаблицы.ДокументОплаты);
				СтрокаТаблицы.ДанныеИзменены = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	РазблокироватьДокументыДляРедактирования();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОРезультатеЗачетаОплаты(МассивОбработанныхДокументов)
	
	Если МассивОбработанныхДокументов.Количество() = 0 Тогда
		Текст = НСтр("ru='Изменений в зачете оплаты не было'");
		Пояснение = НСтр("ru='Изменений в документах при зачете оплаты не было'");
		ПоказатьОповещениеПользователя(
			Текст,
			, // НавигационнаяСсылка
			Пояснение,
			БиблиотекаКартинок.Информация32);
		
	Иначе
		Для Каждого ДокументСсылка Из МассивОбработанныхДокументов Цикл
			Текст = НСтр("ru='Изменен зачет оплаты'");
			Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Изменен зачет оплаты по документу: %1'"),
				ДокументСсылка);
			
			ПоказатьОповещениеПользователя(
				Текст,
				ПолучитьНавигационнуюСсылку(ДокументСсылка),
				Пояснение,
				БиблиотекаКартинок.Информация32);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьДокументыДляРедактирования(МассивСтрок, Отказ = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ИдентификаторСтроки Из МассивСтрок Цикл
		
		СтрокаТаблицы = Оплаты.НайтиПоИдентификатору(ИдентификаторСтроки);
		ИндексСтроки = Оплаты.Индекс(СтрокаТаблицы);
		
		Если СтрокаТаблицы.ВерсияДанных <> ВерсияДанныхДокумента(СтрокаТаблицы.ДокументОплаты) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось заблокировать %1. Данные были изменены или удалены другим пользователем.'"),
				СтрокаТаблицы.ДокументОплаты);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				, // КлючДанных
				"Оплаты[" + (ИндексСтроки) + "].ДокументОплаты");
			
			Отказ = Истина;
			
		Иначе
			
			Попытка
				ЗаблокироватьДанныеДляРедактирования(
					СтрокаТаблицы.ДокументОплаты,
					,// ВерсияДанных
					УникальныйИдентификатор);
				
			Исключение
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось заблокировать %1. %2'"),
					СтрокаТаблицы.ДокументОплаты,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					, // КлючДанных
					"Оплаты[" + (ИндексСтроки) + "].ДокументОплаты");
				
				Отказ = Истина;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РазблокироватьДокументыДляРедактирования()
	
	РазблокироватьДанныеДляРедактирования(
		, // Ключ
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуЗачетаАванса()
	
	СуммаОплачено = Оплаты.Итог("СуммаЗачетаОплаты");
	
	СуммаКОплате = СуммаКОплатеВсего - СуммаОплачено;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСервер(МассивОбработанныхДокументов)
	
	СохранитьРезультатЗачетаОплаты(МассивОбработанныхДокументов);
	ЗаполнитьТаблицуПоРасчетамСПартнерами();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуммыЗачетаОплаты(МассивСтрок)
	
	Отказ = Ложь;
	ЗаблокироватьДокументыДляРедактирования(МассивСтрок, Отказ);
	
	Если Не Отказ Тогда
		
		СписокСтрок = Новый СписокЗначений;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТаблицы = Оплаты.НайтиПоИдентификатору(НомерСтроки);
			Если СтрокаТаблицы <> Неопределено Тогда
				СписокСтрок.Добавить(СтрокаТаблицы, Оплаты.Индекс(СтрокаТаблицы));
			КонецЕсли;
		КонецЦикла;
		
		Если СуммаКОплате > 0 Тогда
			СписокСтрок.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		ИначеЕсли СуммаКОплате < 0 Тогда
			СписокСтрок.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
		КонецЕсли;
		
		Для Каждого Строка Из СписокСтрок Цикл
			
			СтрокаТаблицы = Строка.Значение;
			
			Если СуммаКОплате > 0 Тогда
				СтрокаТаблицы.СуммаЗачетаОплаты = Мин(СтрокаТаблицы.СуммаАванса, СтрокаТаблицы.СуммаЗачетаОплаты + СуммаКОплате);
				СтрокаТаблицы.ДанныеИзменены = Истина;
				СтрокаТаблицы.Пометка = СтрокаТаблицы.СуммаЗачетаОплаты > 0;
			ИначеЕсли СуммаКОплате < 0 Тогда
				СтрокаТаблицы.СуммаЗачетаОплаты = Макс(СтрокаТаблицы.СуммаЗачетаОплаты + СуммаКОплате, 0);
				СтрокаТаблицы.ДанныеИзменены = Истина;
			КонецЕсли;
			
			Если СтрокаТаблицы.ДанныеИзменены Тогда
				РассчитатьСуммуЗачетаАванса();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьПометку(Пометка, ИзменятьСумму = Истина)
	
	ВыделенныеСтроки = Элементы.Оплаты.ВыделенныеСтроки;
	
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		Строка = Оплаты.НайтиПоИдентификатору(Идентификатор);
		Строка.Пометка = Пометка;
		
		Если ИзменятьСумму Тогда
			Если Строка.СуммаЗачетаОплаты = 0 И Пометка Тогда
				Строка.СуммаЗачетаОплаты = Мин(Строка.ДоступноКЗачету, СуммаКОплате);
				
			ИначеЕсли Не Пометка Тогда
				Строка.СуммаЗачетаОплаты = 0;
			КонецЕсли;
		КонецЕсли;
		
		Строка.ДанныеИзменены = Истина;
		
		РассчитатьСуммуЗачетаАванса();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
