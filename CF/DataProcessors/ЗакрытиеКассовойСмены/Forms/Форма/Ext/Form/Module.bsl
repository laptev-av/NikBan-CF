#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОповещениеОткрытьФормуПроверкиНепробитыхЧеков(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если РезультатОткрытияФормы = НСтр("ru = 'Закрытие смены'") Тогда
		ПродолжитьЗакрытиеСмены(Ложь);
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Закрытие кассовой смены прервано пользователем.'");
		Если ВыводитьСообщенияВРежимеРМК Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстОшибки, , , ЭтотОбъект.ВладелецФормы)
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаПечатьПослеЗакрытия(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Если НЕ ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.СуммаФактическойВыемки;
			ТекстОшибки = НСтр("ru = 'Уточните сумму выемки'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"СуммаФактическойВыемки");
		Иначе
			ПродолжитьЗакрытиеСменыОкончание(Ложь);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("КассаККМ"                  , Объект.КассаККМ);
	Параметры.Свойство("ВыполнитьЗакрытиеСразу"    , ВыполнитьЗакрытиеСразу);
	Параметры.Свойство("ДокументыОткрыватьМодально", ДокументыОткрыватьМодально);
	Параметры.Свойство("СуммаФактическойВыемки"    , СуммаФактическойВыемки);
	
	ЗначениеНастроекВызовСервера.ЗаполнитьКассуККМПоУмолчанию(Объект.КассаККМ);
	
	Если Параметры.Свойство("ВыводитьСообщенияВРежимеРМК") Тогда
		ВыводитьСообщенияВРежимеРМК = Параметры.ВыводитьСообщенияВРежимеРМК;
	КонецЕсли;
	
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование();
	
	КассаККМПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Перем ВыполнениеПрервано;
	Если ВыполнитьЗакрытиеСразу Тогда
		
		ВыполнениеПрервано = Ложь;
		ВыполнитьЗакрытиеСмены(ВыполнениеПрервано);
		
		Если НЕ ВыполнениеПрервано Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	КассаККМПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении(Элемент)
	
	ЭквайринговыйТерминалПриИзмененииСевер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверкуИтоговПоПлатежнымКартамПриИзменении(Элемент)
	
	Если НЕ ВыполнитьСверкуИтоговПоПлатежнымКартам Тогда
		ЭквайринговыйТерминал = ПредопределенноеЗначение("Справочник.ЭквайринговыеТерминалы.ПустаяСсылка");
	Иначе
		Если НЕ ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			Элементы.ЭквайринговыйТерминал.ОтметкаНезаполненного = Истина;
		КонецЕсли;
	КонецЕсли;
	Элементы.ЭквайринговыйТерминал.Доступность = ВыполнитьСверкуИтоговПоПлатежнымКартам;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьСмену(Команда)
	Перем Отказ;
	
	Отказ = Ложь;
	
	// &ЗамерПроизводительности 
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, 
								"Обработка.ЗакрытиеКассовойСмены.Форма.Форма.Команда.ЗакрытьСмену",
															Истина);
	
	ВыполнитьЗакрытиеСмены(Отказ);
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура КассаККМПриИзмененииСервер()
	
	ПодключаемоеОборудование = Объект.КассаККМ.ПодключаемоеОборудование;
	Организация              = Объект.КассаККМ.Владелец;
	
	ИспользоватьКассуККМБезПодключенияОборудования = Объект.КассаККМ.ИспользоватьБезПодключенияОборудования;
	
	ЭквайринговыйТерминал = ЭквайринговыйТерминалПоКассеККМ();
	ЭквайринговыйТерминалПриИзмененииСевер();
	
	СтруктураКассовойДисциплины = ПродажиСервер.КассоваяДисциплинаВыемкиПриЗакрытииСмены(Объект.КассаККМ);
	
	ЗапрашиватьСуммуВыемки = СтруктураКассовойДисциплины.ЗапрашиватьСуммуВыемки;
	ПроизводитьВыемку      = НЕ СтруктураКассовойДисциплины.ТипВыемкиПриЗакрытииСмены = Перечисления.ТипыВыемкиПриЗакрытииСмены.ВыемкуНеПроизводить;
	МаксимальнаяСуммаРазмена = СтруктураКассовойДисциплины.МаксимальнаяСуммаРазмена;
	
	УстановитьДоступностьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЭквайринговыйТерминалПриИзмененииСевер()
	
	ПодключаемоеОборудованиеЭТ = ЭквайринговыйТерминал.ПодключаемоеОборудование;
	Если ЗначениеЗаполнено(ПодключаемоеОборудованиеЭТ) Тогда
		ВыполнитьСверкуИтоговПоПлатежнымКартам = Истина;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура УстановитьДоступностьНаСервере()
	
	Элементы.СуммаФактическойВыемки.Доступность = ЗапрашиватьСуммуВыемки;
	Если НЕ ЗапрашиватьСуммуВыемки Тогда
		СуммаФактическойВыемки = 0;
	КонецЕсли;
	
	ВозможностьПечатиZОтчета = ИспользоватьПодключаемоеОборудование И НЕ ИспользоватьКассуККМБезПодключенияОборудования;
	
	Элементы.ЗакрытьБезZОтчета.Доступность = ВозможностьПечатиZОтчета;
	Если НЕ ВозможностьПечатиZОтчета Тогда
		ЗакрытьБезZОтчета = Истина;
	КонецЕсли;
	
	ВозможностьВыполнитьСверкуИтоговПоПлатежнымКартам = ИспользоватьПодключаемоеОборудование
														И ЗначениеЗаполнено(ЭквайринговыйТерминал)
														И НЕ ЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования
														И НЕ ИспользоватьКассуККМБезПодключенияОборудования;
	
	Если НЕ ВозможностьВыполнитьСверкуИтоговПоПлатежнымКартам Тогда
		ВыполнитьСверкуИтоговПоПлатежнымКартам = Ложь;
		ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ПустаяСсылка();
		ЭквайринговыйТерминалПриИзмененииСевер();
	Иначе
		Если ВыполнитьЗакрытиеСразу Тогда
			ВыполнитьСверкуИтоговПоПлатежнымКартам = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ВыполнитьСверкуИтоговПоПлатежнымКартам.Доступность = ВозможностьВыполнитьСверкуИтоговПоПлатежнымКартам;
	Элементы.ЭквайринговыйТерминал.Доступность                  = ВозможностьВыполнитьСверкуИтоговПоПлатежнымКартам 
																  И ВыполнитьСверкуИтоговПоПлатежнымКартам;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗакрытиеСмены(Отказ)
	Перем СсылкаНаОтчет, НужноДополнительноеПредупреждение;
	
	ОчиститьСообщения();
	
	Если ВыполнитьЗакрытиеСразу Тогда
		ПродолжитьЗакрытиеСмены(Отказ);
	ИначеЕсли ВозможностьЗакрытияСменыКлиент() Тогда
		ПродолжитьЗакрытиеСмены(Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеПроверкиВозможностиЗакрытияСмены()

	Данные = Новый Структура;
	СтруктураСостояниеКассовойСмены = РозничныеПродажиВызовСервера.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
	КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
	ПредварительнаяПроверкаНепробитыхЧеков = УправлениеПользователямиВызовСервера.ПолучитьБулевоЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.ПроверятьНепробитыеЧекиПриЗакрытииСмены, Ложь);
	
	Данные.Вставить("СтруктураСостояниеКассовойСмены"       , СтруктураСостояниеКассовойСмены);
	Данные.Вставить("ПредварительнаяПроверкаНепробитыхЧеков", ПредварительнаяПроверкаНепробитыхЧеков);
	
	Возврат Данные;
	
КонецФункции // ДанныеПроверкиВозможностиЗакрытияСмены()


&НаКлиенте
Функция ВозможностьЗакрытияСменыКлиент()
	
	Если НЕ ЗначениеЗаполнено(Объект.КассаККМ)  Тогда
		
		ТекстОшибки = НСтр("ru = 'Не задана касса ККМ'");
		
		Если ВыводитьСообщенияВРежимеРМК Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстОшибки, , , ЭтотОбъект.ВладелецФормы)
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Объект,
			"Объект.КассаККМ",
			);
		КонецЕсли;
		
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеПроверкиВозможностиЗакрытияСмены = ДанныеПроверкиВозможностиЗакрытияСмены();
	
	СтруктураСостояниеКассовойСмены = ДанныеПроверкиВозможностиЗакрытияСмены.СтруктураСостояниеКассовойСмены;
	
	Если НЕ СтруктураСостояниеКассовойСмены.СменаОткрыта Тогда
		
		ТекстОшибки = НСтр("ru='Кассовая смена не открыта!'");
		
		Если ВыводитьСообщенияВРежимеРМК Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстОшибки, , , ЭтотОбъект.ВладелецФормы)
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект
			);
		КонецЕсли;
		
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеПроверкиВозможностиЗакрытияСмены.ПредварительнаяПроверкаНепробитыхЧеков Тогда
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("КассаККМ", Объект.КассаККМ);
		
		ОбработчикОповещения= Новый ОписаниеОповещения("ОповещениеОткрытьФормуПроверкиНепробитыхЧеков", ЭтотОбъект);
		ПройденаПроверкаНепробитыхЧеков = РозничныеПродажиКлиент.ПройденаПроверкаНепробитыхЧеков(Объект.КассаККМ, ОбработчикОповещения);
		
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПродолжитьЗакрытиеСмены(Отказ)
	
	ОчиститьИнформацию();
	СуммаВыемки = 0.00;
	Если ПроизводитьВыемку Тогда
		
		СуммаВыемки = РозничныеПродажиВызовСервера.СуммаОстаткаДСПоКассеККМ(Объект.КассаККМ);
		Если НЕ ЗапрашиватьСуммуВыемки Тогда
			
			СуммаФактическойВыемки = СуммаВыемки;
			
		ИначеЕсли СуммаФактическойВыемки > СуммаВыемки Тогда
			// Сумма выемки определена в открывающих формах (Список чеков ККМ, РМК меню).
			СуммаФактическойВыемки = СуммаВыемки;
		ИначеЕсли ЭтотОбъект.ВладелецФормы = Неопределено
			И (СуммаФактическойВыемки + МаксимальнаяСуммаРазмена) < СуммаВыемки Тогда
			ТекстЗаголовка = НСтр("ru = 'Ввод суммы выемки.'"); 
			ТекстВопроса = НСтр("ru = 'Сумма остатка ДС в кассе ККМ будет превышать максимальную сумму размена. Продолжить закрытие кассы?'");
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаПечатьПослеЗакрытия", ЭтотОбъект);
			ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(ТекстЗаголовка, ТекстВопроса, "Нет", ОбработчикОповещения);
			
			Возврат;
		КонецЕсли;
	Иначе 
		СуммаФактическойВыемки = 0;
	КонецЕсли;
	
	ПродолжитьЗакрытиеСменыОкончание(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗакрытиеСменыОкончание(Отказ)
	
	ВыполнитьСверткуИтогов();
	
	СписокДокументов.Очистить();
	
	СсылкаНаОтчет = Неопределено;
	НужноДополнительноеПредупреждение = Ложь;
	
	ОбработатьДокументыККМСервер(Отказ, СсылкаНаОтчет, НужноДополнительноеПредупреждение);
	
	Если Отказ Тогда
		ОбработатьСозданныеДокументы();
		ТекстСообщения = НСтр("ru = 'Кассовая смена не закрыта!'");
		Если ВыводитьСообщенияВРежимеРМК Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстСообщения, , , ЭтотОбъект.ВладелецФормы)
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.Доступность = Ложь;
	
	ПараметрыВыполнения = ДенежныеСредстваКлиент.ПараметрыВыполненияОперацииВыемкаДенег();
	ПараметрыВыполнения.ИзымаемаяСумма = СуммаФактическойВыемки;
	ПараметрыВыполнения.КассаККМ = Объект.КассаККМ;
	ПараметрыВыполнения.УникальныйИдентификатор = УникальныйИдентификатор;
	ПараметрыВыполнения.ДокументВыемка = Неопределено;
	ПараметрыВыполнения.СсылкаНаОтчет  = СсылкаНаОтчет;
	ПараметрыВыполнения.БезВыводаСообщений = ВыводитьСообщенияВРежимеРМК; 
	ПараметрыВыполнения.Вставить("Отказ", Отказ);
	ПараметрыВыполнения.Вставить("НужноДополнительноеПредупреждение", НужноДополнительноеПредупреждение);
	ПараметрыВыполнения.Вставить("ОшибкаТранзакцииВыемки", Ложь);
	ПараметрыВыполнения.Вставить("КассоваяСмена", КассоваяСмена);
	
	Если ЗакрытьБезZОтчета Тогда
		ПараметрыВыполнения.Вставить("ЗакрытьБезZОтчета");
	КонецЕсли;
	
	Если СуммаФактическойВыемки > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ПродолжитьЗакрытиеСменыОкончаниеВыемкаЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		ДенежныеСредстваКлиент.НачатьВыемкуДенег(Оповещение, ПараметрыВыполнения);
	Иначе
		ПродолжитьЗакрытиеСменыОкончаниеВыемкаЗавершение(Неопределено, ПараметрыВыполнения)
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПродолжитьЗакрытиеСменыОкончаниеВыемкаЗавершение(РезультатВыполнения, ПараметрыВыполнения) Экспорт
	
	ИнформацияВыемка = 0;
	
	Если РезультатВыполнения <> Неопределено Тогда
		Если РезультатВыполнения.Результат Тогда
			СписокДокументов.Добавить(РезультатВыполнения.ДокументВыемка, "ВыемкаДенежныхСредствИзКассыККМ");
			ИнформацияВыемка = РезультатВыполнения.ИзымаемаяСумма;
		Иначе
			ПараметрыВыполнения.ОшибкаТранзакцииВыемки = Истина;
			ИнформацияВыемка = НСтр("ru = 'Не смогли произвести выемку'"); 
			Если ЗначениеЗаполнено(РезультатВыполнения.ДокументВыемка)  Тогда
				СписокДокументов.Добавить(РезультатВыполнения.ДокументВыемка, "ВыемкаДенежныхСредствИзКассыККМ");
				СписокНеПроведенныхДокументов.Добавить(РезультатВыполнения.ДокументВыемка, "ВыемкаДенежныхСредствИзКассыККМ");
			КонецЕсли;
		КонецЕсли
	КонецЕсли;
	
	МассивДоговоров = РозничныеПродажиВызовСервера.МассивАгентскихДоговоровВКассеККМ(Объект.КассаККМ);
	
	ПараметрыВыполнения.Вставить("МассивДоговоров"    , МассивДоговоров);
	ПараметрыВыполнения.Вставить("КоличествоЭлементов", МассивДоговоров.Количество());
	ПараметрыВыполнения.Вставить("ТекущийЭлемент"     , 0);
	ПараметрыВыполнения.Вставить("ПоследняяОперация"  , Ложь);
	ПараметрыВыполнения.Вставить("ИнформацияВыемка"   , ИнформацияВыемка);
	
	ПродолжитьЗакрытиеСменыОкончаниеВыемкаПоДоговорамЗавершение(Неопределено, ПараметрыВыполнения); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗакрытиеСменыОкончаниеВыемкаПоДоговорамЗавершение(РезультатВыполнения, ПараметрыВыполнения) Экспорт
	
	Если РезультатВыполнения <> Неопределено Тогда
		
		Если РезультатВыполнения.Результат Тогда
			СписокДокументов.Добавить(РезультатВыполнения.ДокументВыемка, "ВыемкаДенежныхСредствИзКассыККМ");
			Если НЕ ПараметрыВыполнения.ОшибкаТранзакцииВыемки Тогда
				ПараметрыВыполнения.ИнформацияВыемка = ПараметрыВыполнения.ИнформацияВыемка + РезультатВыполнения.ИзымаемаяСумма;
			КонецЕсли; 
		Иначе
			ПараметрыВыполнения.ОшибкаТранзакцииВыемки = Истина;
			ПараметрыВыполнения.ИнформацияВыемка = НСтр("ru = 'Не смогли произвести выемку'"); 
			Если ЗначениеЗаполнено(РезультатВыполнения.ДокументВыемка)  Тогда
				СписокДокументов.Добавить(РезультатВыполнения.ДокументВыемка, "ВыемкаДенежныхСредствИзКассыККМ");
				СписокНеПроведенныхДокументов.Добавить(РезультатВыполнения.ДокументВыемка, "ВыемкаДенежныхСредствИзКассыККМ");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	Если ПараметрыВыполнения.ТекущийЭлемент < ПараметрыВыполнения.КоличествоЭлементов Тогда
		
		Договор = ПараметрыВыполнения.МассивДоговоров.Получить(ПараметрыВыполнения.ТекущийЭлемент);
		ПараметрыВыполнения.ТекущийЭлемент = ПараметрыВыполнения.ТекущийЭлемент + 1;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДоговорПлатежногоАгента", Договор);
		
		СуммаАгентскойВыемки = РозничныеПродажиВызовСервера.СуммаОстаткаДСПоКассеККМ(Объект.КассаККМ, Договор);
		
		ПараметрыОперации = ДенежныеСредстваКлиент.ПараметрыВыполненияОперацииВыемкаДенег();
		ПараметрыОперации.ИзымаемаяСумма = СуммаАгентскойВыемки;
		ПараметрыОперации.КассаККМ = Объект.КассаККМ;
		ПараметрыОперации.УникальныйИдентификатор = УникальныйИдентификатор;
		ПараметрыОперации.ДокументВыемка = Неопределено;
		ПараметрыОперации.СсылкаНаОтчет  = ПараметрыВыполнения.СсылкаНаОтчет;
		ПараметрыОперации.БезВыводаСообщений = ВыводитьСообщенияВРежимеРМК; 
		ПараметрыОперации.ДополнительныеПараметры = ДополнительныеПараметры;
		
		Если ЗакрытьБезZОтчета Тогда
			ПараметрыОперации.Вставить("ЗакрытьБезZОтчета");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПродолжитьЗакрытиеСменыОкончаниеВыемкаПоДоговорамЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		ДенежныеСредстваКлиент.НачатьВыемкуДенег(Оповещение, ПараметрыОперации);
		
	Иначе
		ПродолжитьЗакрытиеСменыОкончаниеФискальныйОтчет(ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗакрытиеСменыОкончаниеФискальныйОтчет(ПараметрыВыполнения) Экспорт
	
	ОписаниеОшибки = "";
		
	Результат = Ложь;
	
	ПараметрыВыполнения.Вставить("ИнформацияОбZОтчете", НСтр("ru = 'Z-отчет не выводится'"));
	ПараметрыВыполнения.Вставить("ИнформацияЗакрытиеСменыВСистеме", НСтр("ru = 'Кассовая смена в системе не закрыта:'"));
	
	Если ИспользоватьПодключаемоеОборудование И НЕ ИспользоватьКассуККМБезПодключенияОборудования И НЕ ЗакрытьБезZОтчета Тогда
		
		ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		ФИОКассира = ОбщегоНазначенияРТВызовСервера.ФИОФизЛицаПользователяСУчетомИзмененныхПрав();
		Если не ФИОКассира = "" Тогда
			ПараметрыОперации.Кассир = ФИОКассира;
		Иначе
			ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПродолжитьЗакрытиеСменыОкончаниеФискальныйОтчетПечатьЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		МенеджерОборудованияКлиент.НачатьЗакрытиеСменыНаФискальномУстройстве(Оповещение, УникальныйИдентификатор, ПараметрыОперации, ПодключаемоеОборудование, , КассоваяСмена);
		
	Иначе
		ПараметрыВыполнения.ИнформацияОбZОтчете = НСтр("ru = 'Z-отчет не выводится'");
		Результат = ЗакрытьКассовуюСмену(Объект.КассаККМ, ОписаниеОшибки, ПараметрыВыполнения.СсылкаНаОтчет);
		Если Не Результат Тогда
			ТекстЗаголовка = НСтр("ru = 'При закрытии смены произошла ошибка.'");
			ТекстСообщения = НСтр("ru = 'Смена не закрыта.
			                            |Дополнительное описание:
			                            |%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			Если ВыводитьСообщенияВРежимеРМК Тогда
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстЗаголовка, ТекстСообщения, , ЭтотОбъект.ВладелецФормы)
			Иначе
				ТекстСообщения = ТекстЗаголовка + Символы.ПС + ТекстСообщения;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, ПараметрыВыполнения.Отказ);
			КонецЕсли;
		Иначе
			ПараметрыВыполнения.ИнформацияЗакрытиеСменыВСистеме = НСтр("ru = 'Кассовая смена в системе закрыта:'") 
		КонецЕсли;
		
		ПродолжитьЗакрытиеСменыОкончаниеФискальныйОтчетЗавершение(Результат, ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПродолжитьЗакрытиеСменыОкончаниеФискальныйОтчетПечатьЗавершение(РезультатВыполнения, ПараметрыВыполнения) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстЗаголовка = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.'");
		ТекстСообщения = НСтр("ru = '""%ОписаниеОшибки%""
							|Отчет на фискальном регистраторе не сформирован.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		Если ВыводитьСообщенияВРежимеРМК Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстЗаголовка, ТекстСообщения, , ЭтотОбъект.ВладелецФормы)
		Иначе
			ТекстСообщения = ТекстЗаголовка + Символы.ПС + ТекстСообщения;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, ПараметрыВыполнения.Отказ);
		КонецЕсли;
		ПараметрыВыполнения.ИнформацияОбZОтчете = НСтр("ru = 'Нет возможности вывести Z-отчет'");
		
		ПродолжитьЗакрытиеСменыОкончаниеФискальныйОтчетЗавершение(Ложь, ПараметрыВыполнения);
		
	Иначе
		ПараметрыВыполнения.ИнформацияОбZОтчете = НСтр("ru = 'Z-отчет распечатан'");
		
		ОписаниеОшибки = "";
		
		Результат = ЗакрытьКассовуюСмену(Объект.КассаККМ, ОписаниеОшибки, ПараметрыВыполнения.СсылкаНаОтчет);
		Если Не Результат Тогда
			
			ТекстЗаголовка = НСтр("ru = 'При закрытии смены произошла ошибка.'");
			ТекстСообщения = НСтр("ru = 'Смена не закрыта.
			                            |Дополнительное описание: %ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			Если ВыводитьСообщенияВРежимеРМК Тогда
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстЗаголовка, ТекстСообщения, , ЭтотОбъект.ВладелецФормы)
			Иначе
				ТекстСообщения = ТекстЗаголовка + Символы.ПС + ТекстСообщения;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, ПараметрыВыполнения.Отказ);
			КонецЕсли;
		Иначе
			ПараметрыВыполнения.ИнформацияЗакрытиеСменыВСистеме = НСтр("ru = 'Кассовая смена в системе закрыта:'") 
		КонецЕсли;
		
		ПродолжитьЗакрытиеСменыОкончаниеФискальныйОтчетЗавершение(Результат, ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПродолжитьЗакрытиеСменыОкончаниеФискальныйОтчетЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат Тогда
		Если ПараметрыВыполнения.НужноДополнительноеПредупреждение И ВыполнитьЗакрытиеСразу Тогда
			ТекстОшибки = НСтр("ru = 'Нет возможности провести документы. Кассовая смена закрыта'");
			Если ВыводитьСообщенияВРежимеРМК Тогда
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстОшибки, , , ЭтотОбъект.ВладелецФормы)
			Иначе
				ПоказатьПредупреждение(,ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗаголовка = ПараметрыВыполнения.ИнформацияЗакрытиеСменыВСистеме;
	ТекстСообщения = "";
	Если ЗначениеЗаполнено(ПараметрыВыполнения.СсылкаНаОтчет)  Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Сформирован %1:'") + Символы.ПС;
		ТекстСообщения = ТекстСообщения + НСтр("ru = '    Продано товаров         : %2 руб.'") + Символы.ПС;
		ТекстСообщения = ТекстСообщения + НСтр("ru = '    Возврат товаров         : %3 руб.'") + Символы.ПС;
		ТекстСообщения = ТекстСообщения + НСтр("ru = '    Прочие операции оплат   : %4 руб.'") + Символы.ПС;
		ТекстСообщения = ТекстСообщения + НСтр("ru = '    Прочие операции возврата: %5 руб.'") + Символы.ПС;
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Выручка: %6 руб.'") + Символы.ПС;
	Иначе
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Отчет о розничных продажах не сформирован.'") + Символы.ПС;
	КонецЕсли;
	ТекстСообщения = ТекстСообщения + НСтр("ru = 'Выемка          : %7 руб.'") + Символы.ПС;
	ТекстСообщения = ТекстСообщения + НСтр("ru = 'Остаток в кассе : %8 руб.'") + Символы.ПС;
	ТекстСообщения = ТекстСообщения + ПараметрыВыполнения.ИнформацияОбZОтчете + Символы.ПС;
	ТекстСообщения = ТекстСообщения + ИнформацияОСверкеИтогов + Символы.ПС;
	
	Если НЕ ПараметрыВыполнения.ОшибкаТранзакцииВыемки Тогда
		ПараметрыВыполнения.ИнформацияВыемка = Формат(ПараметрыВыполнения.ИнформацияВыемка, "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0");
	КонецЕсли;
	
	ИнформацияОстатокВКассе = РозничныеПродажиВызовСервера.СуммаОстаткаДСПоКассеККМ(Объект.КассаККМ);
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
																			 ПараметрыВыполнения.СсылкаНаОтчет,
																			 Формат(ИнформацияПроданоТоваров         , "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0"),
																			 Формат(ИнформацияВозвратТоваров         , "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0"),
																			 Формат(ИнформацияПрочаяОперацииОплат    , "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0"),
																			 Формат(ИнформацияПрочаяОперацииВозвратов, "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0"),
																			 Формат(ИнформацияВыручка                , "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0"),
																			 ПараметрыВыполнения.ИнформацияВыемка,
																			 Формат(ИнформацияОстатокВКассе          , "ЧЦ=15; ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0")
																			 );
	
	ОбработатьСозданныеДокументы();
	
	Если ВыводитьСообщенияВРежимеРМК Тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстЗаголовка, ТекстСообщения, , ЭтотОбъект.ВладелецФормы)
	Иначе
		Если Результат Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстЗаголовка, ТекстСообщения, , ЭтотОбъект.ВладелецФормы)
		Иначе
			ПоказатьПредупреждение(,ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФорма.Доступность = Истина;
	
	Оповестить("ИзменениеСостоянияКассовойСмены", Объект.КассаККМ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверткуИтоговЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтаФорма.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда
		
		ТекстЗаголовка = НСтр("ru = 'При выполнении операции произошла ошибка:'");
		ТекстСообщения = НСтр("ru = '""%ОписаниеОшибки%"".
										|Операция сверки итогов не была проведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		Если ВыводитьСообщенияВРежимеРМК Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстЗаголовка, ТекстСообщения, , ЭтотОбъект.ВладелецФормы)
		Иначе
			ТекстСообщения = ТекстЗаголовка + Символы.ПС + ТекстСообщения;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверткуИтогов()

	Если НЕ ВыполнитьСверкуИтоговПоПлатежнымКартам Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторУстройстваЭТ = ПодключаемоеОборудованиеЭТ;
	ИдентификаторУстройстваФР = ПодключаемоеОборудование;
	
	ОписаниеОшибки            = "";

	СуммаОперации       = 0;
	НомерКарты          = "";
	НомерСсылкиОперации = "";
	НомерЧека           = "";
	СтрокаСлипЧека      = "";
	
	Если НЕ ИспользоватьКассуККМБезПодключенияОборудования Тогда
		ЭтаФорма.Доступность = Ложь;
		Оповещение = Новый ОписаниеОповещения("ВыполнитьСверткуИтоговЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(Оповещение, УникальныйИдентификатор, ИдентификаторУстройстваЭТ, ИдентификаторУстройстваФР); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДокументыККМСервер(Отказ, СсылкаНаОтчет, НужноДополнительноеПредупреждение)
	Перем КэшированныеЗначения;
	
	// &ЗамерПроизводительности 
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ИспользоватьКомиссионнуюТорговлю = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
	ИспользоватьУчетИмпортныхТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьУчетИмпортныхТоваров");
	
	РежимПроведения = РежимПроведенияДокумента.Оперативный;

	МассивДокументовКПроведению = Новый Массив;

	ЗапросПоЧекам = Новый Запрос;
	ЗапросПоЧекам.УстановитьПараметр("КассаККМ", Объект.КассаККМ);

	ЗапросПоЧекам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК Док
	|ГДЕ
	|	Док.КассаККМ = &КассаККМ
	|	И Док.Проведен
	|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|
	|";
	
	РезультатЗапросаПоЧекам  = ЗапросПоЧекам.Выполнить();
	
	Если ИспользоватьКомиссионнуюТорговлю
		ИЛИ ИспользоватьУчетИмпортныхТоваров Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Док.Ссылка КАК Ссылка,
		|	Док.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	Док.ВидОперации КАК ВидОперации,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Склад КАК Склад,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(СпрНоменклатура.ИспользоватьСерийныеНомера, ЛОЖЬ) КАК ИспользоватьСерийныеНомера,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Продавец КАК Продавец,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.Цена КАК Цена,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.Упаковка КАК Упаковка,
		|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаТовары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
		|	ТаблицаТовары.КодСтроки КАК КодСтроки,
		|	ТаблицаТовары.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ТаблицаТовары.Резервировать КАК Резервировать,
		|	Док.АналитикаХозяйственнойОперации КАК АналитикаХозяйственнойОперации,
		|	ВЫБОР
		|		КОГДА Док.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
		|				И Док.ЧекККМПродажа.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоВозвратПослеЗакрытияСмены
		|ПОМЕСТИТЬ ТаблицаПромежуточная
		|ИЗ
		|	Документ.ЧекККМ КАК Док
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ТаблицаТовары
		|		ПО Док.Ссылка = ТаблицаТовары.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО (ТаблицаТовары.Номенклатура = СпрНоменклатура.Ссылка)
		|ГДЕ
		|	Док.КассаККМ = &КассаККМ
		|	И Док.Проведен
		|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
		|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
		|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
		|	И НЕ Док.ОперацияСДенежнымиСредствами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаЧеков.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаЧеков
		|ИЗ
		|	&ТаблицаЧеков КАК ТаблицаЧеков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыОрганизаций.Номенклатура КАК Номенклатура,
		|	ТоварыОрганизаций.Характеристика КАК Характеристика,
		|	ТоварыОрганизаций.Склад КАК Склад,
		|	ТоварыОрганизаций.Организация КАК Организация,
		|	ТоварыОрганизаций.Поставщик КАК Поставщик,
		|	ТоварыОрганизаций.Договор КАК Договор,
		|	ТоварыОрганизаций.НомерГТД КАК НомерГТД,
		|	ТоварыОрганизаций.Количество КАК Количество,
		|	ТоварыОрганизаций.ВидДвижения КАК ВидДвижения,
		|	ТоварыОрганизаций.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
		|	ТоварыОрганизаций.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ТаблицаРегистра
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
		|ГДЕ
		|	ТоварыОрганизаций.Регистратор В
		|			(ВЫБРАТЬ
		|				ТаблицаЧеков.Ссылка КАК Ссылка
		|			ИЗ
		|				ТаблицаЧеков КАК ТаблицаЧеков)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПромежуточная.Ссылка КАК Ссылка,
		|	ТаблицаПромежуточная.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ТаблицаПромежуточная.НомерСтроки КАК НомерСтроки,
		|	ТаблицаПромежуточная.ВидОперации КАК ВидОперации,
		|	ТаблицаПромежуточная.Склад КАК Склад,
		|	ТаблицаПромежуточная.Номенклатура КАК Номенклатура,
		|	ТаблицаПромежуточная.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
		|	ТаблицаПромежуточная.Характеристика КАК Характеристика,
		|	ТаблицаПромежуточная.Продавец КАК Продавец,
		|	ТаблицаПромежуточная.Цена КАК Цена,
		|	ТаблицаПромежуточная.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаПромежуточная.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
		|	ТаблицаПромежуточная.КодСтроки КАК КодСтроки,
		|	ТаблицаПромежуточная.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ТаблицаПромежуточная.Резервировать КАК Резервировать,
		|	ТаблицаПромежуточная.АналитикаХозяйственнойОперации КАК АналитикаХозяйственнойОперации,
		|	ТаблицаПромежуточная.ЭтоВозвратПослеЗакрытияСмены КАК ЭтоВозвратПослеЗакрытияСмены,
		|	ЕСТЬNULL(ТаблицаРегистра.Количество, ТаблицаПромежуточная.Количество) КАК Количество,
		|	ЕСТЬNULL(ТаблицаРегистра.Договор, &ПустойДоговор) КАК Договор,
		|	ЕСТЬNULL(ТаблицаРегистра.НомерГТД, &ПустойНомерГТД) КАК НомерГТД,
		|	ЕСТЬNULL(ТаблицаРегистра.Поставщик, &ПустойПоставщик) КАК Поставщик,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаРегистра.Количество, 0) = 0
		|			ТОГДА ТаблицаПромежуточная.КоличествоУпаковок
		|		ИНАЧЕ ТаблицаРегистра.Количество
		|	КОНЕЦ КАК КоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаРегистра.Количество, 0) = 0
		|			ТОГДА ТаблицаПромежуточная.Упаковка
		|		ИНАЧЕ &ПустаяУпаковка
		|	КОНЕЦ КАК Упаковка,
		|	ТаблицаПромежуточная.СуммаНДС * ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаРегистра.Количество, 0) = 0
		|				ИЛИ ТаблицаПромежуточная.Количество = 0
		|			ТОГДА 1
		|		ИНАЧЕ ТаблицаРегистра.Количество / ТаблицаПромежуточная.Количество
		|	КОНЕЦ КАК СуммаНДС,
		|	ТаблицаПромежуточная.Сумма * ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаРегистра.Количество, 0) = 0
		|				ИЛИ ТаблицаПромежуточная.Количество = 0
		|			ТОГДА 1
		|		ИНАЧЕ ТаблицаРегистра.Количество / ТаблицаПромежуточная.Количество
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	ТаблицаПромежуточная КАК ТаблицаПромежуточная
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРегистра КАК ТаблицаРегистра
		|		ПО ТаблицаРегистра.Регистратор = ТаблицаПромежуточная.Ссылка
		|			И ТаблицаРегистра.НомерСтрокиДокумента = ТаблицаПромежуточная.НомерСтроки";
		
		ТаблицаЧеков = РезультатЗапросаПоЧекам.Выгрузить();
		Запрос.УстановитьПараметр("ТаблицаЧеков"   , ТаблицаЧеков);
		Запрос.УстановитьПараметр("ПустойДоговор"  , Справочники.ДоговорыПлатежныхАгентов.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойНомерГТД" , Справочники.НомераГТД.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойПоставщик", Справочники.Контрагенты.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустаяУпаковка" , Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
		
		Результат = Запрос.Выполнить();
		ПромежуточнаяТаблица = Результат.Выгрузить();
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
		Запрос.УстановитьПараметр("ПромежуточнаяТаблица", ПромежуточнаяТаблица);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПромежуточнаяТаблица.Ссылка КАК Ссылка,
		|	ПромежуточнаяТаблица.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ПромежуточнаяТаблица.ВидОперации КАК ВидОперации,
		|	ПромежуточнаяТаблица.Склад КАК Склад,
		|	ПромежуточнаяТаблица.Номенклатура КАК Номенклатура,
		|	ПромежуточнаяТаблица.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
		|	ПромежуточнаяТаблица.Характеристика КАК Характеристика,
		|	ПромежуточнаяТаблица.Продавец КАК Продавец,
		|	ПромежуточнаяТаблица.Количество КАК Количество,
		|	ПромежуточнаяТаблица.Цена КАК Цена,
		|	ПромежуточнаяТаблица.СтавкаНДС КАК СтавкаНДС,
		|	ПромежуточнаяТаблица.СуммаНДС КАК СуммаНДС,
		|	ПромежуточнаяТаблица.Сумма КАК Сумма,
		|	ПромежуточнаяТаблица.Упаковка КАК Упаковка,
		|	ПромежуточнаяТаблица.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ПромежуточнаяТаблица.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
		|	ПромежуточнаяТаблица.Договор КАК Договор,
		|	ПромежуточнаяТаблица.НомерГТД КАК НомерГТД,
		|	ПромежуточнаяТаблица.Поставщик КАК Поставщик,
		|	ПромежуточнаяТаблица.КодСтроки КАК КодСтроки,
		|	ПромежуточнаяТаблица.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ПромежуточнаяТаблица.Резервировать КАК Резервировать,
		|	ПромежуточнаяТаблица.АналитикаХозяйственнойОперации КАК АналитикаХозяйственнойОперации,
		|	ПромежуточнаяТаблица.ЭтоВозвратПослеЗакрытияСмены КАК ЭтоВозвратПослеЗакрытияСмены
		|ПОМЕСТИТЬ ТаблицаПромежуточная
		|ИЗ
		|	&ПромежуточнаяТаблица КАК ПромежуточнаяТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
		Запрос.УстановитьПараметр("ПустойДоговор"  , Справочники.ДоговорыПлатежныхАгентов.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойНомерГТД" , Справочники.НомераГТД.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойПоставщик", Справочники.Контрагенты.ПустаяСсылка());
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Док.Ссылка КАК Ссылка,
		|	Док.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	Док.ВидОперации КАК ВидОперации,
		|	ТаблицаТовары.Склад КАК Склад,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(СпрНоменклатура.ИспользоватьСерийныеНомера, ЛОЖЬ) КАК ИспользоватьСерийныеНомера,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Продавец КАК Продавец,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.Цена КАК Цена,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.Сумма КАК Сумма,
		|	ТаблицаТовары.Упаковка КАК Упаковка,
		|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТаблицаТовары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров,
		|	ТаблицаТовары.КодСтроки КАК КодСтроки,
		|	ТаблицаТовары.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ТаблицаТовары.Резервировать КАК Резервировать,
		|	&ПустойДоговор КАК Договор,
		|	&ПустойНомерГТД КАК НомерГТД,
		|	&ПустойПоставщик КАК Поставщик,
		|	Док.АналитикаХозяйственнойОперации КАК АналитикаХозяйственнойОперации,
		|	ВЫБОР
		|		КОГДА Док.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
		|				И Док.ЧекККМПродажа.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоВозвратПослеЗакрытияСмены
		|ПОМЕСТИТЬ ТаблицаПромежуточная
		|ИЗ
		|	Документ.ЧекККМ КАК Док
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ТаблицаТовары
		|		ПО Док.Ссылка = ТаблицаТовары.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО (ТаблицаТовары.Номенклатура = СпрНоменклатура.Ссылка)
		|ГДЕ
		|	Док.КассаККМ = &КассаККМ
		|	И Док.Проведен
		|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
		|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
		|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
		|	И НЕ Док.ОперацияСДенежнымиСредствами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	Док.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	Док.Склад КАК Склад,
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
	|	Док.Характеристика КАК Характеристика,
	|	Док.Продавец КАК Продавец,
	|	Док.Договор КАК Договор,
	|	Док.НомерГТД КАК НомерГТД,
	|	Док.Поставщик КАК Поставщик,
	|	СУММА(ВЫБОР
	|			КОГДА Док.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА Док.Количество
	|			ИНАЧЕ -Док.Количество
	|		КОНЕЦ) КАК Количество,
	|	Док.Цена КАК Цена,
	|	Док.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА Док.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА Док.СуммаНДС
	|			ИНАЧЕ -Док.СуммаНДС
	|		КОНЕЦ) КАК СуммаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА Док.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА Док.Сумма
	|			ИНАЧЕ -Док.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	Док.Упаковка КАК Упаковка,
	|	СУММА(ВЫБОР
	|			КОГДА Док.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА Док.КоличествоУпаковок
	|			ИНАЧЕ -Док.КоличествоУпаковок
	|		КОНЕЦ) КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА Док.ИспользоватьСерийныеНомера
	|			ТОГДА Док.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
	|	КОНЕЦ КАК СсылкаДляСерийныхСертификатов,
	|	ВЫБОР
	|		КОГДА Док.ИспользоватьСерийныеНомера
	|			ТОГДА Док.КлючСвязиСерийныхНомеров
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлючСвязиСерийныхНомеров,
	|	Док.КодСтроки КАК КодСтроки,
	|	Док.ЗаказПокупателя КАК ЗаказПокупателя,
	|	Док.Резервировать КАК Резервировать,
	|	ВЫБОР
	|		КОГДА Док.ЭтоВозвратПослеЗакрытияСмены
	|			ТОГДА Док.АналитикаХозяйственнойОперации
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.ПустаяСсылка)
	|	КОНЕЦ КАК АналитикаХозяйственнойОперации
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	ТаблицаПромежуточная КАК Док
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.ДисконтнаяКарта,
	|	Док.Склад,
	|	Док.Номенклатура,
	|	Док.Характеристика,
	|	Док.Продавец,
	|	Док.Поставщик,
	|	Док.Договор,
	|	Док.НомерГТД,
	|	Док.СтавкаНДС,
	|	Док.Цена,
	|	Док.ИспользоватьСерийныеНомера,
	|	Док.Упаковка,
	|	ВЫБОР
	|		КОГДА Док.ИспользоватьСерийныеНомера
	|			ТОГДА Док.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Док.ИспользоватьСерийныеНомера
	|			ТОГДА Док.КлючСвязиСерийныхНомеров
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	Док.КодСтроки,
	|	Док.ЗаказПокупателя,
	|	Док.Резервировать,
	|	ВЫБОР
	|		КОГДА Док.ЭтоВозвратПослеЗакрытияСмены
	|			ТОГДА Док.АналитикаХозяйственнойОперации
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.АналитикаХозяйственныхОпераций.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА Док.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА Док.Количество
	|			ИНАЧЕ -Док.Количество
	|		КОНЕЦ) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
	|	ТаблицаТовары.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Продавец КАК Продавец,
	|	ТаблицаТовары.Поставщик КАК Поставщик,
	|	ТаблицаТовары.Договор КАК Договор,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ТаблицаТовары.Сумма) КАК Сумма,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	СУММА(ТаблицаТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	ТаблицаТовары.КодСтроки КАК КодСтроки,
	|	ТаблицаТовары.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаТовары.Резервировать КАК Резервировать,
	|	ТаблицаТовары.АналитикаХозяйственнойОперации КАК АналитикаХозяйственнойОперации
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.ДисконтнаяКарта,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Поставщик,
	|	ТаблицаТовары.Договор,
	|	ТаблицаТовары.НомерГТД,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.ИспользоватьСерийныеНомера,
	|	ТаблицаТовары.Продавец,
	|	ТаблицаТовары.Упаковка,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.КодСтроки,
	|	ТаблицаТовары.ЗаказПокупателя,
	|	ТаблицаТовары.Резервировать,
	|	ТаблицаТовары.АналитикаХозяйственнойОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера,
	|	ТаблицаТовары.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Продавец КАК Продавец,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.СсылкаДляСерийныхСертификатов КАК СсылкаДляСерийныхСертификатов,
	|	ТаблицаТовары.КлючСвязиСерийныхНомеров КАК КлючСвязиСерийныхНомеров
	|ПОМЕСТИТЬ ТаблицаСерийныхСертификатов
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.ИспользоватьСерийныеНомера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.СерийныйНомер КАК СерийныйНомер,
	|	ВложенныйЗапрос.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ВложенныйЗапрос.Склад КАК Склад,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.Продавец КАК Продавец,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	|	ВложенныйЗапрос.Упаковка КАК Упаковка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЧекККМСерийныеНомера.СерийныйНомер КАК СерийныйНомер,
	|		ТаблицаСерийныхСертификатов.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|		ТаблицаСерийныхСертификатов.Склад КАК Склад,
	|		ТаблицаСерийныхСертификатов.Номенклатура КАК Номенклатура,
	|		ТаблицаСерийныхСертификатов.Характеристика КАК Характеристика,
	|		ТаблицаСерийныхСертификатов.Продавец КАК Продавец,
	|		ТаблицаСерийныхСертификатов.Цена КАК Цена,
	|		ТаблицаСерийныхСертификатов.СтавкаНДС КАК СтавкаНДС,
	|		ТаблицаСерийныхСертификатов.Упаковка КАК Упаковка
	|	ИЗ
	|		ТаблицаСерийныхСертификатов КАК ТаблицаСерийныхСертификатов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.СерийныеНомера КАК ЧекККМСерийныеНомера
	|			ПО ТаблицаСерийныхСертификатов.СсылкаДляСерийныхСертификатов = ЧекККМСерийныеНомера.Ссылка
	|				И ТаблицаСерийныхСертификатов.КлючСвязиСерийныхНомеров = ЧекККМСерийныеНомера.КлючСвязиСерийныхНомеров
	|	ГДЕ
	|		ЧекККМСерийныеНомера.Ссылка.КассаККМ = &КассаККМ
	|		И ЧекККМСерийныеНомера.Ссылка.Проведен
	|		И НЕ ЧекККМСерийныеНомера.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|		И НЕ ЧекККМСерийныеНомера.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|		И НЕ ЧекККМСерийныеНомера.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)) КАК ВложенныйЗапрос";
	
	ЗапросПоВозвратам = Новый Запрос;
	ЗапросПоВозвратам.УстановитьПараметр("КассаККМ"          , Объект.КассаККМ);
	ЗапросПоВозвратам.УстановитьПараметр("ВидОперацииВозврат", Перечисления.ВидыОперацийЧекККМ.Возврат);
	ЗапросПоВозвратам.Текст =
	"ВЫБРАТЬ
	|	ТоварыБезКомплектов.ДисконтнаяКарта,
	|	ТоварыБезКомплектов.Склад,
	|	ТоварыБезКомплектов.Номенклатура,
	|	ТоварыБезКомплектов.Характеристика,
	|	ТоварыБезКомплектов.Продавец,
	|	ТоварыБезКомплектов.Количество,
	|	ТоварыБезКомплектов.АналитикаХозяйственнойОперации,
	|	ТоварыБезКомплектов.Цена,
	|	ТоварыБезКомплектов.СтавкаНДС,
	|	ТоварыБезКомплектов.СуммаНДС,
	|	ТоварыБезКомплектов.Сумма,
	|	ТоварыБезКомплектов.Упаковка,
	|	ТоварыБезКомплектов.КоличествоУпаковок
	|ИЗ
	|	(ВЫБРАТЬ
	|		Док.Ссылка.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|		Док.Склад КАК Склад,
	|		Док.Номенклатура КАК Номенклатура,
	|		Док.Характеристика КАК Характеристика,
	|		Док.Продавец КАК Продавец,
	|		СУММА(Док.Количество) КАК Количество,
	|		Док.Ссылка.АналитикаХозяйственнойОперации КАК АналитикаХозяйственнойОперации,
	|		Док.Цена КАК Цена,
	|		Док.СтавкаНДС КАК СтавкаНДС,
	|		СУММА(Док.СуммаНДС) КАК СуммаНДС,
	|		СУММА(Док.Сумма) КАК Сумма,
	|		Док.Упаковка КАК Упаковка,
	|		СУММА(Док.КоличествоУпаковок) КАК КоличествоУпаковок
	|	ИЗ
	|		Документ.ЧекККМ.Товары КАК Док
	|	ГДЕ
	|		Док.Ссылка.ВидОперации = &ВидОперацииВозврат
	|		И Док.Ссылка.КассаККМ = &КассаККМ
	|		И Док.Ссылка.Проведен
	|		И НЕ Док.Ссылка.ОперацияСДенежнымиСредствами
	|		И НЕ Док.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|		И НЕ Док.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|		И НЕ Док.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Док.Ссылка.ДисконтнаяКарта,
	|		Док.Склад,
	|		Док.Номенклатура,
	|		Док.Характеристика,
	|		Док.Продавец,
	|		Док.Ссылка.АналитикаХозяйственнойОперации,
	|		Док.СтавкаНДС,
	|		Док.Цена,
	|		Док.Упаковка) КАК ТоварыБезКомплектов";
	
	ЗапросПоОплате = Новый Запрос(
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка,
	|	ЧекККМ.ВидОперации,
	|	ЧекККМ.ДисконтнаяКарта,
	|	ВЫБОР
	|		КОГДА ЧекККМ.ВидОперации = &ВидОперацииПродажа
	|			ТОГДА 1
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК КоэффициентВидаОплаты
	|ПОМЕСТИТЬ ТаблицаЧеков
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.КассаККМ = &КассаККМ
	|	И ЧекККМ.Проведен
	|	И НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|	И НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМОплата.Ссылка,
	|	ЧекККМОплата.НомерСтроки,
	|	ЧекККМОплата.ВидОплаты,
	|	ЧекККМОплата.ВидОплаты.ТипОплаты КАК ТипОплаты,
	|	ЧекККМОплата.ВидОплаты.БанкКредитор КАК БанкКредитор,
	|	ЧекККМОплата.ВидОплаты.ПроцентБанковскойКомиссии КАК ПроцентБанковскойКомиссии,
	|	ЧекККМОплата.ЭквайринговыйТерминал,
	|	ЧекККМОплата.ПроцентКомиссии,
	|	ЧекККМОплата.БонуснаяПрограммаЛояльности,
	|	ЧекККМОплата.Сумма,
	|	ЧекККМОплата.СуммаКомиссии,
	|	ЧекККМОплата.СуммаБонусовВСкидках,
	|	ЧекККМОплата.КоличествоБонусов,
	|	ЧекККМОплата.КоличествоБонусовВСкидках
	|ПОМЕСТИТЬ ТаблицаОплат
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	НЕ ЧекККМОплата.ВидОплаты.ТипОплаты = &ТипОплатыНаличные
	|	И ЧекККМОплата.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаЧеков.Ссылка
	|			ИЗ
	|				ТаблицаЧеков КАК ТаблицаЧеков)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплат.ВидОплаты,
	|	ТаблицаОплат.ТипОплаты,
	|	ТаблицаОплат.ЭквайринговыйТерминал,
	|	ТаблицаОплат.ПроцентКомиссии,
	|	ТаблицаОплат.БонуснаяПрограммаЛояльности,
	|	ТаблицаЧеков.КоэффициентВидаОплаты * ТаблицаОплат.Сумма КАК Сумма,
	|	ТаблицаЧеков.КоэффициентВидаОплаты * ТаблицаОплат.СуммаКомиссии КАК СуммаКомиссии,
	|	ТаблицаЧеков.КоэффициентВидаОплаты * ТаблицаОплат.СуммаБонусовВСкидках КАК СуммаБонусовВСкидках,
	|	ТаблицаЧеков.КоэффициентВидаОплаты * ТаблицаОплат.КоличествоБонусов КАК КоличествоБонусов,
	|	ТаблицаЧеков.КоэффициентВидаОплаты * ТаблицаОплат.КоличествоБонусовВСкидках КАК КоличествоБонусовВСкидках,
	|	ТаблицаОплат.БанкКредитор,
	|	ТаблицаОплат.ПроцентБанковскойКомиссии,
	|	ТаблицаЧеков.ДисконтнаяКарта,
	|	ВЫБОР
	|		КОГДА ТаблицаЧеков.КоэффициентВидаОплаты * ТаблицаОплат.Сумма < 0
	|				ИЛИ ТаблицаЧеков.КоэффициентВидаОплаты * ТаблицаОплат.СуммаБонусовВСкидках < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат
	|ПОМЕСТИТЬ ПодготовительнаяТаблица
	|ИЗ
	|	ТаблицаОплат КАК ТаблицаОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЧеков КАК ТаблицаЧеков
	|		ПО ТаблицаОплат.Ссылка = ТаблицаЧеков.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодготовительнаяТаблица.ВидОплаты,
	|	ПодготовительнаяТаблица.ТипОплаты,
	|	ПодготовительнаяТаблица.ЭквайринговыйТерминал,
	|	ПодготовительнаяТаблица.ПроцентКомиссии,
	|	ПодготовительнаяТаблица.БонуснаяПрограммаЛояльности,
	|	СУММА(ПодготовительнаяТаблица.Сумма) КАК Сумма,
	|	СУММА(ПодготовительнаяТаблица.СуммаКомиссии) КАК СуммаКомиссии,
	|	СУММА(ПодготовительнаяТаблица.СуммаБонусовВСкидках) КАК СуммаБонусовВСкидках,
	|	СУММА(ПодготовительнаяТаблица.КоличествоБонусов) КАК КоличествоБонусов,
	|	СУММА(ПодготовительнаяТаблица.КоличествоБонусовВСкидках) КАК КоличествоБонусовВСкидках,
	|	ПодготовительнаяТаблица.БанкКредитор,
	|	ПодготовительнаяТаблица.ПроцентБанковскойКомиссии,
	|	ПодготовительнаяТаблица.ДисконтнаяКарта,
	|	ПодготовительнаяТаблица.ЭтоВозврат
	|ИЗ
	|	ПодготовительнаяТаблица КАК ПодготовительнаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодготовительнаяТаблица.БанкКредитор,
	|	ПодготовительнаяТаблица.ТипОплаты,
	|	ПодготовительнаяТаблица.ЭквайринговыйТерминал,
	|	ПодготовительнаяТаблица.БонуснаяПрограммаЛояльности,
	|	ПодготовительнаяТаблица.ВидОплаты,
	|	ПодготовительнаяТаблица.ПроцентКомиссии,
	|	ПодготовительнаяТаблица.ПроцентБанковскойКомиссии,
	|	ПодготовительнаяТаблица.ДисконтнаяКарта,
	|	ПодготовительнаяТаблица.ЭтоВозврат
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ПодготовительнаяТаблица.Сумма) <> 0
	|		ИЛИ СУММА(ПодготовительнаяТаблица.СуммаБонусовВСкидках) <> 0)");

	ЗапросПоОплате.УстановитьПараметр("КассаККМ"          , Объект.КассаККМ);
	ЗапросПоОплате.УстановитьПараметр("ВидОперацииПродажа", Перечисления.ВидыОперацийЧекККМ.Продажа);
	ЗапросПоОплате.УстановитьПараметр("ТипОплатыНаличные" , Перечисления.ТипыОплатЧекаККМ.Наличные);
	ЗапросПоОплате.УстановитьПараметр("СтатусПробитый"    , Перечисления.СтатусыЧековККМ.Пробитый);
	ЗапросПоОплате.УстановитьПараметр("СтатусПустой"      , Перечисления.СтатусыЧековККМ.ПустаяСсылка());

	ЗапросПоПодарочнымСертификатам = Новый Запрос;
	ЗапросПоПодарочнымСертификатам.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМПогашениеПодарочныхСертификатов.ПодарочныйСертификат,
	|	ЧекККМПогашениеПодарочныхСертификатов.СерийныйНомер,
	|	1 КАК Количество
	|ПОМЕСТИТЬ ТаблицаПогашения
	|ИЗ
	|	Документ.ЧекККМ.ПогашениеПодарочныхСертификатов КАК ЧекККМПогашениеПодарочныхСертификатов
	|ГДЕ
	|	ЧекККМПогашениеПодарочныхСертификатов.Ссылка.КассаККМ = &КассаККМ
	|	И ЧекККМПогашениеПодарочныхСертификатов.Ссылка.Проведен
	|	И (НЕ ЧекККМПогашениеПодарочныхСертификатов.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный))
	|	И (НЕ ЧекККМПогашениеПодарочныхСертификатов.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный))
	|	И (НЕ ЧекККМПогашениеПодарочныхСертификатов.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМПогашениеПодарочныхСертификатов.Ссылка,
	|	ЧекККМПогашениеПодарочныхСертификатов.НомерСтроки,
	|	ЧекККМПогашениеПодарочныхСертификатов.ПодарочныйСертификат,
	|	ЧекККМПогашениеПодарочныхСертификатов.СерийныйНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПогашения.ПодарочныйСертификат,
	|	ТаблицаПогашения.СерийныйНомер,
	|	СУММА(ТаблицаПогашения.Количество) КАК Количество
	|ИЗ
	|	ТаблицаПогашения КАК ТаблицаПогашения
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПогашения.ПодарочныйСертификат,
	|	ТаблицаПогашения.СерийныйНомер";
	
	ЗапросПоПодарочнымСертификатам.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
	
	ЗапросПоОтложеннымЧекам = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Дата КАК Дата
	|ПОМЕСТИТЬ ЧекиККМ
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.КассаККМ = &КассаККМ
	|	И ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекиККМ.Ссылка КАК ОтложенныйЧек
	|ИЗ
	|	ЧекиККМ КАК ЧекиККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.КоличествоДнейХраненияОтложенныхЧеков КАК КоличествоДнейХраненияОтложенныхЧеков
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КоличествоДнейХраненияОтложенныхЧеков.Значение > 0
	|	И ДОБАВИТЬКДАТЕ(ЧекиККМ.Дата, ДЕНЬ, КоличествоДнейХраненияОтложенныхЧеков.Значение) < &ТекущееВремя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекиККМ.Ссылка
	|ИЗ
	|	ЧекиККМ КАК ЧекиККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.КоличествоДнейХраненияОтложенныхЧеков КАК КоличествоДнейХраненияОтложенныхЧеков
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КоличествоДнейХраненияОтложенныхЧеков.Значение = 0");

	ЗапросПоОтложеннымЧекам.УстановитьПараметр("КассаККМ"             , Объект.КассаККМ);
	ЗапросПоОтложеннымЧекам.УстановитьПараметр("ТекущееВремя"         , ТекущаяДатаСеанса());

	ЗапросПоПодаркам = Новый Запрос(
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.Характеристика,
	|	СУММА(ВЫБОР
	|			КОГДА Док.Ссылка.ВидОперации = &ВидОперацииПродажа
	|				ТОГДА Док.Количество
	|			ИНАЧЕ -1 * Док.Количество
	|		КОНЕЦ) КАК Количество,
	|	Док.Склад КАК Склад,
	|	Док.Цена КАК Цена,
	|	СУММА(ВЫБОР
	|			КОГДА Док.Ссылка.ВидОперации = &ВидОперацииПродажа
	|				ТОГДА Док.Сумма
	|			ИНАЧЕ -1 * Док.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	Док.Упаковка,
	|	СУММА(ВЫБОР
	|			КОГДА Док.Ссылка.ВидОперации = &ВидОперацииПродажа
	|				ТОГДА Док.КоличествоУпаковок
	|			ИНАЧЕ -1 * Док.КоличествоУпаковок
	|		КОНЕЦ) КАК КоличествоУпаковок,
	|	Док.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Документ.ЧекККМ.Подарки КАК Док
	|ГДЕ
	|	Док.Ссылка.КассаККМ = &КассаККМ
	|	И НЕ Док.Ссылка.ОперацияСДенежнымиСредствами
	|	И Док.Ссылка.Проведен
	|	И (НЕ Док.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный))
	|	И (НЕ Док.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный))
	|	И (НЕ Док.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный))
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.Характеристика,
	|	Док.Склад,
	|	Док.Цена,
	|	Док.Упаковка,
	|	Док.СтатусУказанияСерий
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА Док.Ссылка.ВидОперации = &ВидОперацииПродажа
	|				ТОГДА Док.Количество
	|			ИНАЧЕ -1 * Док.Количество
	|		КОНЕЦ) <> 0
	|ИТОГИ ПО
	|	Склад");
	
	ЗапросПоПодаркам.УстановитьПараметр("КассаККМ"          , Объект.КассаККМ);
	ЗапросПоПодаркам.УстановитьПараметр("ВидОперацииПродажа", Перечисления.ВидыОперацийЧекККМ.Продажа);
	
	ЗапросПоСериямПодарков = Новый Запрос;
	ЗапросПоСериямПодарков.Текст = "ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА ЧекККМ.ВидОперации = &ВидОперацииПродажа
	|			ТОГДА 1
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК КоэффициентОперации
	|ПОМЕСТИТЬ ТаблицаЧеков
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.КассаККМ = &КассаККМ
	|	И ЧекККМ.Проведен
	|	И НЕ ЧекККМ.ОперацияСДенежнымиСредствами
	|	И НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|	И НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Док.Серия,
	|	Док.Номенклатура,
	|	Док.Характеристика,
	|	СУММА(Док.Количество * ТаблицаЧеков.КоэффициентОперации) КАК Количество
	|ИЗ
	|	Документ.ЧекККМ.СерииПодарков КАК Док
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЧеков КАК ТаблицаЧеков
	|		ПО Док.Ссылка = ТаблицаЧеков.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Серия,
	|	Док.Номенклатура,
	|	Док.Характеристика
	|	
	|ИМЕЮЩИЕ
	|	СУММА(Док.Количество * ТаблицаЧеков.КоэффициентОперации) <> 0
	|";
	ЗапросПоСериямПодарков.УстановитьПараметр("КассаККМ" , Объект.КассаККМ);
	ЗапросПоСериямПодарков.УстановитьПараметр("ВидОперацииПродажа", Перечисления.ВидыОперацийЧекККМ.Продажа);
	
	ЗапросПоСериям = Новый Запрос;
	ЗапросПоСериям.УстановитьПараметр("КассаККМ", Объект.КассаККМ);

	ЗапросПоСериям.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.ВидОперации
	|ПОМЕСТИТЬ ТаблицаЧеков
	|ИЗ
	|	Документ.ЧекККМ КАК Док
	|ГДЕ
	|	Док.КассаККМ = &КассаККМ
	|	И Док.Проведен
	|	И НЕ Док.Ссылка.ОперацияСДенежнымиСредствами
	|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМСерии.Серия,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаЧеков.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА ЧекККМСерии.Количество
	|			ИНАЧЕ -ЧекККМСерии.Количество
	|		КОНЕЦ) КАК Количество,
	|	ЧекККМСерии.Номенклатура,
	|	ЧекККМСерии.Характеристика
	|ИЗ
	|	Документ.ЧекККМ.Серии КАК ЧекККМСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЧеков КАК ТаблицаЧеков
	|		ПО ЧекККМСерии.Ссылка = ТаблицаЧеков.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМСерии.Серия,
	|	ЧекККМСерии.Номенклатура,
	|	ЧекККМСерии.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаЧеков.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|				ТОГДА ЧекККМСерии.Количество
	|			ИНАЧЕ -ЧекККМСерии.Количество
	|		КОНЕЦ) <> 0";
	
	ЗапросПоБонусам = Новый Запрос;
	ЗапросПоБонусам.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
	ЗапросПоБонусам.УстановитьПараметр("ПустаяДата", Дата("00010101"));

	ЗапросПоБонусам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	Док.ВидОперации КАК ВидОперации
	|ПОМЕСТИТЬ ТаблицаЧеков
	|ИЗ
	|	Документ.ЧекККМ КАК Док
	|ГДЕ
	|	Док.КассаККМ = &КассаККМ
	|	И Док.Проведен
	|	И НЕ Док.Ссылка.ОперацияСДенежнымиСредствами
	|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
/// { Александр Лаптев; Старт-ПРО. 15.11.2019 22:07:29 (+)
//  |	ТаблицаЧеков.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	БонусныеБаллыКНачислению.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	БонусныеБаллыКНачислению.nb_ОтКогоНачисленыБонусныеБаллы КАК nb_ОтКогоНачисленыБонусныеБаллы,
	|	БонусныеБаллыКНачислению.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	БонусныеБаллыКНачислению.ДатаНачисления КАК ДатаНачисления,
	|	БонусныеБаллыКНачислению.ДатаСписания КАК ДатаСписания,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаЧеков.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				ТОГДА -БонусныеБаллыКНачислению.КоличествоБонусныхБаллов
	|			ИНАЧЕ БонусныеБаллыКНачислению.КоличествоБонусныхБаллов
	|		КОНЕЦ) КАК КоличествоБонусныхБаллов,
	|	ВЫБОР
	|		КОГДА БонусныеБаллыКНачислению.ДатаСписания = &ПустаяДата
	|			ТОГДА &ПустаяДата
	|		ИНАЧЕ БонусныеБаллыКНачислению.ДатаНачисления
	|	КОНЕЦ КАК ДатаПервоначальногоНачисления
	|ИЗ
	|	Документ.ЧекККМ.БонусныеБаллыКНачислению КАК БонусныеБаллыКНачислению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЧеков КАК ТаблицаЧеков
	|		ПО БонусныеБаллыКНачислению.Ссылка = ТаблицаЧеков.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
/// { Александр Лаптев; Старт-ПРО. 15.11.2019 22:08:55 (+)
//	|	ТаблицаЧеков.ДисконтнаяКарта,
	|	БонусныеБаллыКНачислению.ДисконтнаяКарта,
	|	БонусныеБаллыКНачислению.nb_ОтКогоНачисленыБонусныеБаллы,
	|	БонусныеБаллыКНачислению.БонуснаяПрограммаЛояльности,
	|	БонусныеБаллыКНачислению.ДатаНачисления,
	|	БонусныеБаллыКНачислению.ДатаСписания
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаЧеков.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				ТОГДА -БонусныеБаллыКНачислению.КоличествоБонусныхБаллов
	|			ИНАЧЕ БонусныеБаллыКНачислению.КоличествоБонусныхБаллов
	|		КОНЕЦ) <> 0";
	
	ЗапросПоАгентскимПлатежам = Новый Запрос;
	ЗапросПоАгентскимПлатежам.УстановитьПараметр("КассаККМ", Объект.КассаККМ);

	ЗапросПоАгентскимПлатежам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	Док.ВидОперации КАК ВидОперации
	|ПОМЕСТИТЬ ТаблицаЧеков
	|ИЗ
	|	Документ.ЧекККМ КАК Док
	|ГДЕ
	|	Док.КассаККМ = &КассаККМ
	|	И Док.Проведен
	|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Оплата.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаЧеков.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				ТОГДА -Оплата.Сумма
	|			ИНАЧЕ Оплата.Сумма
	|		КОНЕЦ) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК Оплата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЧеков КАК ТаблицаЧеков
	|		ПО Оплата.Ссылка = ТаблицаЧеков.Ссылка
	|ГДЕ
	|	Оплата.ДоговорПлатежногоАгента <> ЗНАЧЕНИЕ(Справочник.ДоговорыПлатежныхАгентов.ПустаяСсылка)
	|	И Оплата.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.Наличные)
	|
	|СГРУППИРОВАТЬ ПО
	|	Оплата.ДоговорПлатежногоАгента
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаЧеков.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				ТОГДА -Оплата.Сумма
	|			ИНАЧЕ Оплата.Сумма
	|		КОНЕЦ) <> 0";
	
	ЗапросДокументыНаККМ = Новый Запрос;
	ЗапросДокументыНаККМ.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
	
	ЗапросДокументыНаККМ.Текст = "ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Ссылка
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.КассаККМ = &КассаККМ
	|	И ПриходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|	И ПриходныйКассовыйОрдер.ПробиватьЧекиПоКассеККМ
	|	И ПриходныйКассовыйОрдер.Проведен
	|	И НЕ ПриходныйКассовыйОрдер.СменаЗакрыта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.КассаККМ = &КассаККМ
	|	И РасходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|	И РасходныйКассовыйОрдер.ПробиватьЧекиПоКассеККМ
	|	И РасходныйКассовыйОрдер.Проведен
	|	И НЕ РасходныйКассовыйОрдер.СменаЗакрыта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОплатаОтПокупателяПлатежнойКартой.Ссылка
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаОтПокупателяПлатежнойКартой
	|ГДЕ
	|	ОплатаОтПокупателяПлатежнойКартой.КассаККМ = &КассаККМ
	|	И ОплатаОтПокупателяПлатежнойКартой.ПробиватьЧекиПоКассеККМ
	|	И ОплатаОтПокупателяПлатежнойКартой.Проведен
	|	И НЕ ОплатаОтПокупателяПлатежнойКартой.СменаЗакрыта";
	
	ЗапросПоПрочейВыручке = Новый Запрос;
	ЗапросПоПрочейВыручке.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
	
	ЗапросПоПрочейВыручке.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.ХозяйственнаяОперация,
	|	ВложенныйЗапрос.ВидОплаты,
	|	СУММА(ВложенныйЗапрос.СуммаПоступления) КАК СуммаПоступления,
	|	СУММА(ВложенныйЗапрос.СуммаВозврата) КАК СуммаВозврата
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПриходныйКассовыйОрдер.Контрагент КАК Контрагент,
	|		ПриходныйКассовыйОрдер.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.Наличные) КАК ВидОплаты,
	|		ПриходныйКассовыйОрдер.СуммаДокумента КАК СуммаПоступления,
	|		0 КАК СуммаВозврата
	|	ИЗ
	|		Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|	ГДЕ
	|		ПриходныйКассовыйОрдер.КассаККМ = &КассаККМ
	|		И ПриходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|		И ПриходныйКассовыйОрдер.ПробиватьЧекиПоКассеККМ
	|		И ПриходныйКассовыйОрдер.Проведен
	|		И НЕ ПриходныйКассовыйОрдер.СменаЗакрыта
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасходныйКассовыйОрдер.Контрагент,
	|		РасходныйКассовыйОрдер.ХозяйственнаяОперация,
	|		ЗНАЧЕНИЕ(Справочник.ВидыОплатЧекаККМ.Наличные),
	|		0,
	|		РасходныйКассовыйОрдер.СуммаДокумента
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|	ГДЕ
	|		РасходныйКассовыйОрдер.КассаККМ = &КассаККМ
	|		И РасходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|		И РасходныйКассовыйОрдер.ПробиватьЧекиПоКассеККМ
	|		И РасходныйКассовыйОрдер.Проведен
	|		И НЕ РасходныйКассовыйОрдер.СменаЗакрыта
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОплатаОтПокупателяПлатежнойКартой.Контрагент,
	|		ОплатаОтПокупателяПлатежнойКартой.ХозяйственнаяОперация,
	|		ОплатаОтПокупателяПлатежнойКартой.ВидОплаты,
	|		ВЫБОР
	|			КОГДА ОплатаОтПокупателяПлатежнойКартой.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|				ТОГДА ОплатаОтПокупателяПлатежнойКартой.СуммаДокумента
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НЕ ОплатаОтПокупателяПлатежнойКартой.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|				ТОГДА 0
	|			ИНАЧЕ ОплатаОтПокупателяПлатежнойКартой.СуммаДокумента
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаОтПокупателяПлатежнойКартой
	|	ГДЕ
	|		ОплатаОтПокупателяПлатежнойКартой.КассаККМ = &КассаККМ
	|		И ОплатаОтПокупателяПлатежнойКартой.ПробиватьЧекиПоКассеККМ
	|		И ОплатаОтПокупателяПлатежнойКартой.Проведен
	|		И НЕ ОплатаОтПокупателяПлатежнойКартой.СменаЗакрыта) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.ВидОплаты,
	|	ВложенныйЗапрос.ХозяйственнаяОперация";
	
	ОтменитьТранзакцию = Ложь;
	ЗапросСуммаОплатыНаличных = Новый Запрос;
	ЗапросСуммаОплатыНаличных.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
	ЗапросСуммаОплатыНаличных.УстановитьПараметр("Наличные", Справочники.ВидыОплатЧекаККМ.Наличные);
	ЗапросСуммаОплатыНаличных.УстановитьПараметр("ПустойАгентскийДоговор", Справочники.ДоговорыПлатежныхАгентов.ПустаяСсылка());
	
	ЗапросСуммаОплатыНаличных.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЧекККМОплата.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаЧековСОплатойНаличными
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка.КассаККМ = &КассаККМ
	|	И ЧекККМОплата.Ссылка.Проведен
	|	И НЕ ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|	И НЕ ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|	И ЧекККМОплата.ВидОплаты = &Наличные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМТовары.Сумма КАК СуммаТоваров,
	|	0 КАК СуммаОплат,
	|	0 КАК СуммаНаличных,
	|	ЧекККМТовары.Ссылка КАК Ссылка,
	|	ЧекККМТовары.Ссылка.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	ЧекККМТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаСумм
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Ссылка.КассаККМ = &КассаККМ
	|	И ЧекККМТовары.Ссылка.Проведен
	|	И НЕ ЧекККМТовары.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|	И НЕ ЧекККМТовары.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ ЧекККМТовары.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|	И ЧекККМТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаЧековСОплатойНаличными.Ссылка КАК Ссылка
	|			ИЗ
	|				ТаблицаЧековСОплатойНаличными КАК ТаблицаЧековСОплатойНаличными)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ЧекККМОплата.Сумма,
	|	ВЫБОР
	|		КОГДА ЧекККМОплата.ВидОплаты = &Наличные
	|			ТОГДА ЧекККМОплата.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЧекККМОплата.Ссылка,
	|	ЧекККМОплата.Ссылка.ДоговорПлатежногоАгента,
	|	0
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	ЧекККМОплата.Ссылка.КассаККМ = &КассаККМ
	|	И ЧекККМОплата.Ссылка.Проведен
	|	И НЕ ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|	И НЕ ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|	И ЧекККМОплата.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаЧековСОплатойНаличными.Ссылка КАК Ссылка
	|			ИЗ
	|				ТаблицаЧековСОплатойНаличными КАК ТаблицаЧековСОплатойНаличными)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТаблицаСумм.СуммаТоваров) КАК СуммаТоваров,
	|	СУММА(ТаблицаСумм.СуммаОплат) КАК СуммаОплат,
	|	СУММА(ТаблицаСумм.СуммаНаличных) КАК СуммаНаличных,
	|	СУММА(ТаблицаСумм.Количество) КАК Количество,
	|	ТаблицаСумм.Ссылка КАК Ссылка,
	|	ТаблицаСумм.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента
	|ПОМЕСТИТЬ ТаблицаПоЧекам
	|ИЗ
	|	ТаблицаСумм КАК ТаблицаСумм
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСумм.Ссылка,
	|	ТаблицаСумм.ДоговорПлатежногоАгента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоЧекам.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ТаблицаПоЧекам.СуммаТоваров = 0
	|				И ТаблицаПоЧекам.Количество <> 0
	|				И ТаблицаПоЧекам.Ссылка.ОперацияСДенежнымиСредствами
	|			ТОГДА 0
	|		КОГДА ТаблицаПоЧекам.СуммаТоваров = 0
	|				И ТаблицаПоЧекам.Ссылка.ОперацияСДенежнымиСредствами
	|			ТОГДА ТаблицаПоЧекам.СуммаНаличных
	|		ИНАЧЕ ТаблицаПоЧекам.СуммаТоваров - ТаблицаПоЧекам.СуммаОплат + ТаблицаПоЧекам.СуммаНаличных
	|	КОНЕЦ КАК НаличныеБезСдачи,
	|	ТаблицаПоЧекам.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента
	|ПОМЕСТИТЬ ТаблицаНаличныеБезСдачи
	|ИЗ
	|	ТаблицаПоЧекам КАК ТаблицаПоЧекам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНаличныеБезСдачи.Ссылка КАК Ссылка,
	|	ТаблицаНаличныеБезСдачи.НаличныеБезСдачи КАК НаличныеБезСдачи,
	|	ТаблицаНаличныеБезСдачи.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента
	|ИЗ
	|	ТаблицаНаличныеБезСдачи КАК ТаблицаНаличныеБезСдачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаНаличныеБезСдачи.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|				ТОГДА -ТаблицаНаличныеБезСдачи.НаличныеБезСдачи
	|			ИНАЧЕ ТаблицаНаличныеБезСдачи.НаличныеБезСдачи
	|		КОНЕЦ) КАК НаличныеБезСдачи
	|ИЗ
	|	ТаблицаНаличныеБезСдачи КАК ТаблицаНаличныеБезСдачи
	|ГДЕ
	|	ТаблицаНаличныеБезСдачи.ДоговорПлатежногоАгента = &ПустойАгентскийДоговор";
	
	
	МассивРезультатСуммаОплатыНаличных = ЗапросСуммаОплатыНаличных.ВыполнитьПакет();
	РезультатСуммаОплатыНаличных       = МассивРезультатСуммаОплатыНаличных[5];
	ТаблицаНаличныеБезСдачи            = МассивРезультатСуммаОплатыНаличных[4].Выгрузить();
	
	ЗапросПоРасчетамСКлиентами = Новый Запрос;
	ЗапросПоРасчетамСКлиентами.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
	
	МассивТиповОплатНеВлияющийНаРасчеты = Новый Массив;
	МассивТиповОплатНеВлияющийНаРасчеты.Добавить(Перечисления.ТипыОплатЧекаККМ.ЗачетАванса);
	МассивТиповОплатНеВлияющийНаРасчеты.Добавить(Перечисления.ТипыОплатЧекаККМ.ВРассрочку);
	
	ЗапросПоРасчетамСКлиентами.УстановитьПараметр("МассивТиповОплатНеВлияющийНаРасчеты", 
												   МассивТиповОплатНеВлияющийНаРасчеты);
	
	ЗапросПоРасчетамСКлиентами.УстановитьПараметр("ЗачетАванса", Перечисления.ТипыОплатЧекаККМ.ЗачетАванса);
	ЗапросПоРасчетамСКлиентами.УстановитьПараметр("ВРассрочку" , Перечисления.ТипыОплатЧекаККМ.ВРассрочку);
	ЗапросПоРасчетамСКлиентами.УстановитьПараметр("ТаблицаНаличныеБезСдачи" , ТаблицаНаличныеБезСдачи);
	ЗапросПоРасчетамСКлиентами.УстановитьПараметр("ТипОплатыНаличные" , Справочники.ВидыОплатЧекаККМ.Наличные);
	
	МассивПустыхЗначенийДокументаРасчета = Новый Массив;
	МассивПустыхЗначенийДокументаРасчета.Добавить(Неопределено);
	МассивПустыхЗначенийДокументаРасчета.Добавить(Документы.ПриходныйКассовыйОрдер.ПустаяСсылка());
	МассивПустыхЗначенийДокументаРасчета.Добавить(Документы.ОплатаОтПокупателяПлатежнойКартой.ПустаяСсылка());
	МассивПустыхЗначенийДокументаРасчета.Добавить(Документы.ЧекККМ.ПустаяСсылка());
	МассивПустыхЗначенийДокументаРасчета.Добавить(Документы.ВводОстатковРасчетовСКлиентами.ПустаяСсылка());
	
	ЗапросПоРасчетамСКлиентами.УстановитьПараметр("МассивПустыхЗначенийДокументаРасчета", 
												   МассивПустыхЗначенийДокументаРасчета);
	ИспользоватьРасчетыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыСКлиентами");
	ЗапросПоРасчетамСКлиентами.УстановитьПараметр("ИспользоватьРасчетыСКлиентами", ИспользоватьРасчетыСКлиентами);
	
	ЗапросПоРасчетамСКлиентами.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.ДокументРасчета КАК ДокументРасчета,
	|	Док.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА Док.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозврат,
	|	Док.ОперацияСДенежнымиСредствами КАК ОперацияСДенежнымиСредствами,
	|	Док.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ТаблицаЧеков
	|ИЗ
	|	Документ.ЧекККМ КАК Док
	|ГДЕ
	|	&ИспользоватьРасчетыСКлиентами
	|	И Док.КассаККМ = &КассаККМ
	|	И Док.Проведен
	|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ Док.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЧекККМОплата.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаЧековСНеСворачиваемымиРасчетами
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|ГДЕ
	|	&ИспользоватьРасчетыСКлиентами
	|	И ЧекККМОплата.Ссылка.КассаККМ = &КассаККМ
	|	И ЧекККМОплата.Ссылка.Проведен
	|	И НЕ ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|	И НЕ ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ ЧекККМОплата.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|	И (ЧекККМОплата.Ссылка.ОперацияСДенежнымиСредствами
	|			ИЛИ ЧекККМОплата.ВидОплаты.ТипОплаты В (&МассивТиповОплатНеВлияющийНаРасчеты))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЧеков.Ссылка КАК Ссылка,
	|	ТаблицаЧеков.ДокументРасчета КАК ДокументРасчета,
	|	ТаблицаЧеков.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаЧеков.ЭтоВозврат КАК ЭтоВозврат,
	|	ВЫБОР
	|		КОГДА ТаблицаЧековСНеСворачиваемымиРасчетами.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РазвернутыйУчет,
	|	ТаблицаЧеков.ОперацияСДенежнымиСредствами КАК ОперацияСДенежнымиСредствами,
	|	ТаблицаЧеков.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ПромежуточнаяТаблицаЧеков
	|ИЗ
	|	ТаблицаЧеков КАК ТаблицаЧеков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЧековСНеСворачиваемымиРасчетами КАК ТаблицаЧековСНеСворачиваемымиРасчетами
	|		ПО ТаблицаЧеков.Ссылка = ТаблицаЧековСНеСворачиваемымиРасчетами.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНаличныеБезСдачи.НаличныеБезСдачи КАК НаличныеБезСдачи,
	|	ТаблицаНаличныеБезСдачи.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаНаличныеБезСдачи
	|ИЗ
	|	&ТаблицаНаличныеБезСдачи КАК ТаблицаНаличныеБезСдачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМОплата.ВидОплаты КАК ВидОплаты,
	|	СУММА(ЧекККМОплата.Сумма) КАК Сумма,
	|	ПромежуточнаяТаблицаЧеков.Ссылка КАК Ссылка,
	|	ПромежуточнаяТаблицаЧеков.ДокументРасчета КАК ДокументРасчета,
	|	ПромежуточнаяТаблицаЧеков.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ПромежуточнаяТаблицаЧеков.ЭтоВозврат КАК ЭтоВозврат,
	|	ПромежуточнаяТаблицаЧеков.ОперацияСДенежнымиСредствами КАК ОперацияСДенежнымиСредствами,
	|	ПромежуточнаяТаблицаЧеков.РазвернутыйУчет КАК РазвернутыйУчет,
	|	ПромежуточнаяТаблицаЧеков.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ТаблицаОплатБезУчетаСдачи
	|ИЗ
	|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПромежуточнаяТаблицаЧеков КАК ПромежуточнаяТаблицаЧеков
	|		ПО ЧекККМОплата.Ссылка = ПромежуточнаяТаблицаЧеков.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПромежуточнаяТаблицаЧеков.ЗаказПокупателя,
	|	ПромежуточнаяТаблицаЧеков.ДокументРасчета,
	|	ПромежуточнаяТаблицаЧеков.ОперацияСДенежнымиСредствами,
	|	ЧекККМОплата.ВидОплаты,
	|	ПромежуточнаяТаблицаЧеков.РазвернутыйУчет,
	|	ПромежуточнаяТаблицаЧеков.Ссылка,
	|	ПромежуточнаяТаблицаЧеков.ЭтоВозврат,
	|	ПромежуточнаяТаблицаЧеков.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплатБезУчетаСдачи.ВидОплаты КАК ВидОплаты,
	|	ТаблицаОплатБезУчетаСдачи.ВидОплаты.ТипОплаты КАК ТипОплаты,
	|	ВЫБОР
	|		КОГДА ТаблицаОплатБезУчетаСдачи.ВидОплаты = &ТипОплатыНаличные
	|			ТОГДА ЕСТЬNULL(ТаблицаНаличныеБезСдачи.НаличныеБезСдачи, ТаблицаОплатБезУчетаСдачи.Сумма)
	|		ИНАЧЕ ТаблицаОплатБезУчетаСдачи.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаОплатБезУчетаСдачи.Ссылка КАК Ссылка,
	|	ТаблицаОплатБезУчетаСдачи.ДокументРасчета КАК ДокументРасчета,
	|	ТаблицаОплатБезУчетаСдачи.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаОплатБезУчетаСдачи.ЭтоВозврат КАК ЭтоВозврат,
	|	ТаблицаОплатБезУчетаСдачи.ОперацияСДенежнымиСредствами КАК ОперацияСДенежнымиСредствами,
	|	ТаблицаОплатБезУчетаСдачи.РазвернутыйУчет КАК РазвернутыйУчет,
	|	ТаблицаОплатБезУчетаСдачи.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ТаблицаОплат
	|ИЗ
	|	ТаблицаОплатБезУчетаСдачи КАК ТаблицаОплатБезУчетаСдачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНаличныеБезСдачи КАК ТаблицаНаличныеБезСдачи
	|		ПО ТаблицаОплатБезУчетаСдачи.Ссылка = ТаблицаНаличныеБезСдачи.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаОплат.ТипОплаты = &ЗачетАванса
	|			ТОГДА ТаблицаОплат.ДокументРасчета
	|		КОГДА НЕ ТаблицаОплат.РазвернутыйУчет
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаОплат.Ссылка
	|	КОНЕЦ КАК ДокументРасчета,
	|	0 КАК Оплачено,
	|	ВЫБОР
	|		КОГДА ТаблицаОплат.ЭтоВозврат
	|			ТОГДА -ТаблицаОплат.Сумма
	|		ИНАЧЕ ТаблицаОплат.Сумма
	|	КОНЕЦ КАК Отгружено,
	|	ТаблицаОплат.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаОплат.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ТаблицаОплатДляСворачивания
	|ИЗ
	|	ТаблицаОплат КАК ТаблицаОплат
	|ГДЕ
	|	НЕ ТаблицаОплат.ОперацияСДенежнымиСредствами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаОплат.РазвернутыйУчет
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаОплат.ДокументРасчета В (&МассивПустыхЗначенийДокументаРасчета)
	|							ИЛИ НЕ ТаблицаОплат.ОперацияСДенежнымиСредствами
	|						ТОГДА ТаблицаОплат.Ссылка
	|					ИНАЧЕ ТаблицаОплат.ДокументРасчета
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаОплат.ЭтоВозврат
	|			ТОГДА -ТаблицаОплат.Сумма
	|		ИНАЧЕ ТаблицаОплат.Сумма
	|	КОНЕЦ,
	|	0,
	|	ТаблицаОплат.ЗаказПокупателя,
	|	ТаблицаОплат.Контрагент
	|ИЗ
	|	ТаблицаОплат КАК ТаблицаОплат
	|ГДЕ
	|	НЕ ТаблицаОплат.ТипОплаты В (&МассивТиповОплатНеВлияющийНаРасчеты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплатДляСворачивания.ДокументРасчета КАК ДокументРасчета,
	|	СУММА(ТаблицаОплатДляСворачивания.Оплачено) КАК Оплачено,
	|	СУММА(ТаблицаОплатДляСворачивания.Отгружено) КАК Отгружено,
	|	ТаблицаОплатДляСворачивания.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаОплатДляСворачивания.Контрагент КАК Контрагент
	|ИЗ
	|	ТаблицаОплатДляСворачивания КАК ТаблицаОплатДляСворачивания
	|ГДЕ
	|	НЕ(ТаблицаОплатДляСворачивания.Оплачено = 0
	|				И ТаблицаОплатДляСворачивания.Отгружено = 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплатДляСворачивания.ЗаказПокупателя,
	|	ТаблицаОплатДляСворачивания.Контрагент,
	|	ТаблицаОплатДляСворачивания.ДокументРасчета";
	
	ЗапросПоАкцизнымМаркам = Новый Запрос;
	ЗапросПоАкцизнымМаркам.УстановитьПараметр("КассаККМ", Объект.КассаККМ);

	ЗапросПоАкцизнымМаркам.Текст =
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаЧеков
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Проведен
	|	И ЧекККМ.КассаККМ = &КассаККМ
	|	И НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Архивный)
	|	И НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)
	|	И НЕ ЧекККМ.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Отложенный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.АкцизнаяМарка КАК АкцизнаяМарка,
	|	ВложенныйЗапрос.Справка2 КАК Справка2,
	|	СУММА(ВложенныйЗапрос.КоличествоАкцизов) КАК КоличествоАкцизов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЧекККМАкцизныеМарки.АкцизнаяМарка КАК АкцизнаяМарка,
	|		ЧекККМАкцизныеМарки.Справка2 КАК Справка2,
	|		1 КАК КоличествоАкцизов
	|	ИЗ
	|		Документ.ЧекККМ.АкцизныеМарки КАК ЧекККМАкцизныеМарки
	|	ГДЕ
	|		ЧекККМАкцизныеМарки.Ссылка В
	|				(ВЫБРАТЬ
	|					ЧекиККМ.Ссылка
	|				ИЗ
	|					ТаблицаЧеков КАК ЧекиККМ)
	|		И ЧекККМАкцизныеМарки.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Продажа)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЧекККМАкцизныеМарки.АкцизнаяМарка,
	|		ЧекККМАкцизныеМарки.Справка2,
	|		-1
	|	ИЗ
	|		Документ.ЧекККМ.АкцизныеМарки КАК ЧекККМАкцизныеМарки
	|	ГДЕ
	|		ЧекККМАкцизныеМарки.Ссылка В
	|				(ВЫБРАТЬ
	|					ЧекиККМ.Ссылка
	|				ИЗ
	|					ТаблицаЧеков КАК ЧекиККМ)
	|		И ЧекККМАкцизныеМарки.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.АкцизнаяМарка,
	|	ВложенныйЗапрос.Справка2
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.КоличествоАкцизов) > 0";
	
	НачатьТранзакцию();
	
	МассивРезультатовЗапроса          = Запрос.ВыполнитьПакет();
	РезультатЗапросаПоВозвратам       = ЗапросПоВозвратам.Выполнить();
	РезультатЗапросаПоОплате          = ЗапросПоОплате.Выполнить();
	РезультатЗапросаПоОтложеннымЧекам = ЗапросПоОтложеннымЧекам.Выполнить();
	РезультатЗапросаПоПодаркам        = ЗапросПоПодаркам.Выполнить();

	Если РезультатЗапросаПоПодаркам.Пустой() Тогда
		РезультатЗапросаПоСериямПодарков = Неопределено;
	Иначе
		РезультатЗапросаПоСериямПодарков = ЗапросПоСериямПодарков.Выполнить();
	КонецЕсли;
	РезультатЗапросаПоСериям          = ЗапросПоСериям.Выполнить();
	РезультатПодарочныеСертификаты    = ЗапросПоПодарочнымСертификатам.Выполнить();
	РезультатБонусы                   = ЗапросПоБонусам.Выполнить();
	РезультатАгентские                = ЗапросПоАгентскимПлатежам.Выполнить();
	РезультатЗапросаДокументыНаККМ    = ЗапросДокументыНаККМ.Выполнить();
	РезультатПоПрочейВыручке          = ЗапросПоПрочейВыручке.Выполнить();
	РезультатПоРасчетамСКлиентами     = ЗапросПоРасчетамСКлиентами.Выполнить();
	РезультатПоАкцизнымМаркам		  = ЗапросПоАкцизнымМаркам.Выполнить();	
		
	ТаблицаОплатПлатежныеКарты		= ОбщегоНазначенияРТ.ОтобратьСтрокиПоКритериям(РезультатЗапросаПоОплате,
	   Новый Структура("ТипОплаты", Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта)).Выгрузить();

	ТаблицаОплатБанковскиеКредиты	= ОбщегоНазначенияРТ.ОтобратьСтрокиПоКритериям(РезультатЗапросаПоОплате,
	   Новый Структура("ТипОплаты", Перечисления.ТипыОплатЧекаККМ.БанковскийКредит)).Выгрузить();

	ТаблицаОплатСертификатом		= ОбщегоНазначенияРТ.ОтобратьСтрокиПоКритериям(РезультатЗапросаПоОплате,
	   Новый Структура("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом)).Выгрузить();
	
	ТаблицаОплатБонусамиКакСкидкой	= ОбщегоНазначенияРТ.ОтобратьСтрокиПоКритериям(РезультатЗапросаПоОплате,
	   Новый Структура("ВидОплаты", Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой)).Выгрузить();
	
	ОплатаПодарочнымиСертификатами = ТаблицаОплатСертификатом.Итог("Сумма");
	
	СуммаОплатыНаличных = 0;
	
	Если НЕ РезультатСуммаОплатыНаличных.Пустой() Тогда
		
		ВыборкаСуммаОплатыНаличных = РезультатСуммаОплатыНаличных.Выбрать();
		Если ВыборкаСуммаОплатыНаличных.Следующий() Тогда
			СуммаОплатыНаличных = ВыборкаСуммаОплатыНаличных.НаличныеБезСдачи;
			Если НЕ ЗначениеЗаполнено(СуммаОплатыНаличных) Тогда
				СуммаОплатыНаличных = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	Если НЕ (МассивРезультатовЗапроса[2].Пустой() 
		И РезультатЗапросаПоВозвратам.Пустой() 
		И РезультатПоПрочейВыручке.Пустой()
		И РезультатПоРасчетамСКлиентами.Пустой()
		И СуммаОплатыНаличных = 0) Тогда
		
		РозничныйПокупатель = Константы.КонтрагентРозничныйПокупатель.Получить();
		
		УстановитьПривилегированныйРежим(Истина);
		ОтчетОРозничныхПродажах = СоздатьОтчетОРозничныхПродажах();
		
		ОтчетОРозничныхПродажах.СуммаОплатыНаличных = СуммаОплатыНаличных;
		
		ТаблицаСерийныеНомера = МассивРезультатовЗапроса[4].Выгрузить();
		КэшированныеЗначения = Новый Структура;
		
		СтруктураЗаполненияЦены = Новый Структура;
		СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", ОтчетОРозничныхПродажах.ЦенаВключаетНДС);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураЗаполненияЦены);
		ТекущийКлючСерийныеСертификатов = 0;
		
		Выборка = МассивРезультатовЗапроса[2].Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ ОтменитьТранзакцию Тогда
				СтрокаТабличнойЧасти = ОтчетОРозничныхПродажах.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
				
				Если СтрокаТабличнойЧасти.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
					ОтчетОРозничныхПродажах.УчитыватьНДС = Истина;
				КонецЕсли;
				
				Если Выборка.ИспользоватьСерийныеНомера Тогда
					
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("ДисконтнаяКарта", Выборка.ДисконтнаяКарта);
					СтруктураПоиска.Вставить("Склад"          , Выборка.Склад);
					СтруктураПоиска.Вставить("Номенклатура"   , Выборка.Номенклатура);
					СтруктураПоиска.Вставить("Характеристика" , Выборка.Характеристика);
					СтруктураПоиска.Вставить("Продавец"       , Выборка.Продавец);
					СтруктураПоиска.Вставить("Цена"           , Выборка.Цена);
					СтруктураПоиска.Вставить("СтавкаНДС"      , Выборка.СтавкаНДС);
					СтруктураПоиска.Вставить("Упаковка"       , Выборка.Упаковка);
					
					ТекущийКлючСерийныеСертификатов = ТекущийКлючСерийныеСертификатов + 1;
					
					СтрокаТабличнойЧасти.КлючСвязиСерийныхНомеров = ТекущийКлючСерийныеСертификатов;
					
					СтрокиТаблицаСерийныхНомеров = ТаблицаСерийныеНомера.НайтиСтроки(СтруктураПоиска);
					Для каждого СтрокаТаблицыСерийныхНомеров Из СтрокиТаблицаСерийныхНомеров Цикл
						СтрокаСерийныхНомеров = ОтчетОРозничныхПродажах.СерийныеНомера.Добавить();
						СтрокаСерийныхНомеров.СерийныйНомер = СтрокаТаблицыСерийныхНомеров.СерийныйНомер;
						СтрокаСерийныхНомеров.КлючСвязиСерийныхНомеров = СтрокаТабличнойЧасти.КлючСвязиСерийныхНомеров;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		ВыборкаПоВозвратам = РезультатЗапросаПоВозвратам.Выбрать();
		Пока ВыборкаПоВозвратам.Следующий() Цикл
			Если НЕ ОтменитьТранзакцию Тогда
				
				СтрокаТабличнойЧасти = ОтчетОРозничныхПродажах.ВозвращенныеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаПоВозвратам);
				
				ОбработкаТабличнойЧастиТоварыСервер.ПересчитатьСуммуНДСВСтрокеТЧСервер(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ОтменитьТранзакцию 
		     И (ОтчетОРозничныхПродажах.Товары.Количество() > 0) Тогда
			
			ТаблицаПоСериям = РезультатЗапросаПоСериям.Выгрузить();
			ОтчетОРозничныхПродажах.Серии.Загрузить(ТаблицаПоСериям);
			
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ОтчетОРозничныхПродажах.ПараметрыУказанияСерий(Объект));
			ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(ОтчетОРозничныхПродажах,ПараметрыУказанияСерий);
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		// Удаление отложенных чеков
		Если НЕ ОтменитьТранзакцию Тогда
			Попытка
				МассивСсылокОтложенныеЧеки = РезультатЗапросаПоОтложеннымЧекам.Выгрузить().ВыгрузитьКолонку("ОтложенныйЧек");
				
				УстановитьПривилегированныйРежим(Истина);
				Для Каждого ОтложенныйЧек Из МассивСсылокОтложенныеЧеки Цикл
					ОтложенныйЧекОбъект = ОтложенныйЧек.ПолучитьОбъект();
					Если ОтложенныйЧекОбъект.Проведен Тогда 
						ОтложенныйЧекОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					КонецЕсли;
					ОтложенныйЧекОбъект.ПометкаУдаления = Истина;
					ОтложенныйЧекОбъект.Записать();
					ОтложенныйЧекОбъект.Удалить(); 
				КонецЦикла;
				УстановитьПривилегированныйРежим(Ложь);
				
			Исключение
				ОтменитьТранзакцию = Истина;
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось удалить отложенные чеки! %1'"),
					ОписаниеОшибки()
					);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					Объект);
				Если ПривилегированныйРежим() Тогда
					УстановитьПривилегированныйРежим(Ложь);
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
		
		// Заполняем таблицу бонусных баллов.
		Если НЕ ОтменитьТранзакцию Тогда
			ВыборкаПоБонусам = РезультатБонусы.Выбрать();
			Пока ВыборкаПоБонусам.Следующий() Цикл
				СтрокаТабличнойЧасти = ОтчетОРозничныхПродажах.БонусныеБаллыКНачислению.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаПоБонусам);
			КонецЦикла;
		КонецЕсли;
		
		// Заполняем таблицу бонусных баллов.
		Если НЕ ОтменитьТранзакцию Тогда
			ВыборкаАгентские = РезультатАгентские.Выбрать();
			Пока ВыборкаАгентские.Следующий() Цикл
				СтрокаТабличнойЧасти = ОтчетОРозничныхПродажах.ОплатаНаличнымиАгентскихПлатежей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаАгентские);
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ОтменитьТранзакцию Тогда
			ВыборкаПоПрочейВыручке = РезультатПоПрочейВыручке.Выбрать();
			Пока ВыборкаПоПрочейВыручке.Следующий() Цикл
				СтрокаТабличнойЧасти = ОтчетОРозничныхПродажах.ПрочаяВыручка.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаПоПрочейВыручке);
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ОтменитьТранзакцию Тогда
			
			ВыборкаПоРасчетамСКлиентами = РезультатПоРасчетамСКлиентами.Выбрать();
			Пока ВыборкаПоРасчетамСКлиентами.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(ВыборкаПоРасчетамСКлиентами.Оплачено) И НЕ ЗначениеЗаполнено(ВыборкаПоРасчетамСКлиентами.Отгружено) Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТабличнойЧасти = ОтчетОРозничныхПродажах.РасчетыСКлиентами.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаПоРасчетамСКлиентами);
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Контрагент) Тогда
					СтрокаТабличнойЧасти.Контрагент = РозничныйПокупатель;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Заполняем таблицу акцизных марок
		Если НЕ ОтменитьТранзакцию Тогда 
			ВыборкаАкцизныеМарки = РезультатПоАкцизнымМаркам.Выбрать();
			Пока ВыборкаАкцизныеМарки.Следующий() Цикл 
				СтрокаТабличнойЧасти = ОтчетОРозничныхПродажах.АкцизныеМарки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаАкцизныеМарки);
			КонецЦикла;
		КонецЕсли;
		
		ЕстьПродажиВозвратыТовара = ОтчетОРозничныхПродажах.Товары.Количество() > 0 
								Или ОтчетОРозничныхПродажах.ВозвращенныеТовары.Количество() > 0;
		
		ЕстьПрочаяВыручка = ОтчетОРозничныхПродажах.ПрочаяВыручка.Количество() > 0;
		
		ЕстьРасчетыСКлиентами = ОтчетОРозничныхПродажах.РасчетыСКлиентами.Количество() > 0;
		
		ЕстьОплатаДоговоровПлатежныхАгентов = ОтчетОРозничныхПродажах.ОплатаНаличнымиАгентскихПлатежей.Количество() > 0;
		
		ЕстьЧеки = РезультатЗапросаПоЧекам.Выгрузить().Количество() > 0;
		
		МассивСписанийТоваров = Новый Массив;
		
		// Записываем ОтчетОРозничныхПродажах.
		Если НЕ ОтменитьТранзакцию 
			 И (ЕстьЧеки ИЛИ ЕстьПрочаяВыручка) Тогда
				
			Для Каждого СтрокаОплаты Из ТаблицаОплатПлатежныеКарты Цикл
				Если СтрокаОплаты.ВидОплаты <> Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой Тогда
					НоваяСтрока = ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты);
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьПродажиВозвратыТовара Тогда
				
				Для Каждого Оплата Из ТаблицаОплатБанковскиеКредиты Цикл
					НоваяСтрока           = ОтчетОРозничныхПродажах.ОплатаБанковскимиКредитами.Добавить();
					НоваяСтрока.ВидОплаты = Оплата.ВидОплаты;
					НоваяСтрока.Сумма     = Оплата.Сумма;
					НоваяСтрока.БанкКредитор              = НоваяСтрока.ВидОплаты.БанкКредитор;
					НоваяСтрока.ПроцентБанковскойКомиссии = НоваяСтрока.ВидОплаты.ПроцентБанковскойКомиссии;
					НоваяСтрока.СуммаБанковскойКомиссии   = НоваяСтрока.Сумма * НоваяСтрока.ПроцентБанковскойКомиссии / 100;
					
				КонецЦикла;
				
				ОтчетОРозничныхПродажах.ОплатаПодарочнымиСертификатами = ОплатаПодарочнымиСертификатами;
				
				Для Каждого ОплатаБонусом Из ТаблицаОплатБонусамиКакСкидкой Цикл
					
					НоваяСтрока                             = ОтчетОРозничныхПродажах.ОплатаБонуснымиБаллами.Добавить();
					НоваяСтрока.ВидОплаты                   = ОплатаБонусом.ВидОплаты;
					НоваяСтрока.ДисконтнаяКарта             = ОплатаБонусом.ДисконтнаяКарта;
					НоваяСтрока.БонуснаяПрограммаЛояльности = ОплатаБонусом.БонуснаяПрограммаЛояльности;
					НоваяСтрока.СуммаБонусовВСкидках        = ОплатаБонусом.СуммаБонусовВСкидках;
					НоваяСтрока.КоличествоБонусовВСкидках   = ОплатаБонусом.КоличествоБонусовВСкидках;
					
				КонецЦикла;
					
				ТаблицаПогашения = РезультатПодарочныеСертификаты.Выгрузить();
				
				Для каждого СтрокаПогашения Из ТаблицаПогашения Цикл
					СтрокаДокумента = ОтчетОРозничныхПродажах.ПогашениеПодарочныхСертификатов.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаПогашения);
				КонецЦикла;
				
				// Оплаты
				// Подарки
				УстановитьПривилегированныйРежим(Истина);
				МассивСписанийТоваров = Новый Массив;
				ВыборкаПоПодаркамСклад = РезультатЗапросаПоПодаркам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				ЕстьСерииПодарков = Ложь;
				Если РезультатЗапросаПоСериямПодарков <> Неопределено Тогда
					ТаблицаСерийПодарков = РезультатЗапросаПоСериямПодарков.Выгрузить();
					Если ТаблицаСерийПодарков.Количество() > 0 Тогда
						ЕстьСерииПодарков = Истина;
						СтруктураПоискаСерий = Новый Структура;
						СтруктураПоискаСерий.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
						СтруктураПоискаСерий.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
					КонецЕсли;
				КонецЕсли;
				
				Пока ВыборкаПоПодаркамСклад.Следующий() Цикл
					
					СписаниеТоваров = СоздатьСписаниеТоваров(ВыборкаПоПодаркамСклад.Склад);
					
					ВыборкаПоПодаркамНоменклатура = ВыборкаПоПодаркамСклад.Выбрать();
					Пока ВыборкаПоПодаркамНоменклатура.Следующий() Цикл
						Если ВыборкаПоПодаркамНоменклатура.Количество()>0 Тогда
							СтрокаСписанияТоваров = СписаниеТоваров.Товары.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаСписанияТоваров, ВыборкаПоПодаркамНоменклатура);
							Если СтрокаСписанияТоваров.СтатусУказанияСерий > 0
								И СтрокаСписанияТоваров.Количество > 0
								И ЕстьСерииПодарков Тогда
								СтруктураПоискаСерий.Номенклатура = СтрокаСписанияТоваров.Номенклатура;
								СтруктураПоискаСерий.Характеристика = СтрокаСписанияТоваров.Характеристика;
								СтрокиСерий = ТаблицаСерийПодарков.НайтиСтроки(СтруктураПоискаСерий);
								ОсталосьСерий = СтрокаСписанияТоваров.Количество;
								Для Каждого СтрокаСерии Из СтрокиСерий Цикл
									Если СтрокаСерии.Количество > 0 Тогда
										НоваяСтрокаСерии = СписаниеТоваров.Серии.Добавить();
										НоваяСтрокаСерии.Серия = СтрокаСерии.Серия;
										НоваяСтрокаСерии.Номенклатура = СтрокаСерии.Номенклатура;
										НоваяСтрокаСерии.Характеристика = СтрокаСерии.Характеристика;
										Если ОсталосьСерий > СтрокаСерии.Количество Тогда
											НоваяСтрокаСерии.Количество = СтрокаСерии.Количество;
											ОсталосьСерий = ОсталосьСерий - СтрокаСерии.Количество;
											СтрокаСерии.Количество = 0;
										ИначеЕсли ОсталосьСерий = СтрокаСерии.Количество Тогда
											НоваяСтрокаСерии.Количество = СтрокаСерии.Количество;
											ОсталосьСерий = 0;
											СтрокаСерии.Количество = 0;
										Иначе
											НоваяСтрокаСерии.Количество = ОсталосьСерий;
											СтрокаСерии.Количество = СтрокаСерии.Количество - ОсталосьСерий;
											ОсталосьСерий = 0;
										КонецЕсли;
									КонецЕсли;
									Если ОсталосьСерий <= 0 Тогда
										Прервать;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Если СписаниеТоваров.Товары.Количество() > 0 Тогда
						МассивСписанийТоваров.Добавить(СписаниеТоваров)
					КонецЕсли;
					
				КонецЦикла;
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
			Попытка
				УстановитьПривилегированныйРежим(Истина);
				ОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
				СсылкаНаОтчет = ОтчетОРозничныхПродажах.Ссылка;
				
				ИнформацияВозвратТоваров = ОтчетОРозничныхПродажах.ВозвращенныеТовары.Итог("Сумма");
				ИнформацияПроданоТоваров = ОтчетОРозничныхПродажах.Товары.Итог("Сумма") + ИнформацияВозвратТоваров;
				ИнформацияПрочаяОперацииОплат = ОтчетОРозничныхПродажах.ПрочаяВыручка.Итог("СуммаПоступления");
				ИнформацияПрочаяОперацииВозвратов = ОтчетОРозничныхПродажах.ПрочаяВыручка.Итог("СуммаВозврата");
				ИнформацияВыручка = (ИнформацияПроданоТоваров - ИнформацияВозвратТоваров) 
									+ (ИнформацияПрочаяОперацииОплат - ИнформацияПрочаяОперацииВозвратов);
				
				
				МассивДокументовКПроведению.Добавить(ОтчетОРозничныхПродажах);
				
				Для каждого СписаниеТоваров Из МассивСписанийТоваров Цикл
					СписаниеТоваров.ОтчетОРозничныхПродажах = СсылкаНаОтчет;
					СписаниеТоваров.Записать(РежимЗаписиДокумента.Запись);
					МассивДокументовКПроведению.Добавить(СписаниеТоваров);
				КонецЦикла;
				
				// Архивация чеков происходит только после записи отчета ККМ.
				Если НЕ ОтменитьТранзакцию Тогда
					Попытка
						МассивСсылокЧекиККМ = РезультатЗапросаПоЧекам.Выгрузить().ВыгрузитьКолонку("Ссылка");
						
						Для Каждого текСсылкаЧекККМ Из МассивСсылокЧекиККМ Цикл
							
							ДокументОбъект = текСсылкаЧекККМ.ПолучитьОбъект();
							ДокументОбъект.СтатусЧекаККМ           = Перечисления.СтатусыЧековККМ.Архивный;
							ДокументОбъект.ОтчетОРозничныхПродажах = СсылкаНаОтчет;
							ДокументОбъект.мЗакрытиеСмены          = Истина; 
							ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
							
						КонецЦикла;
						
					Исключение
						ОтменитьТранзакцию = Истина;
	
						Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось заархивировать чеки! %1'"),
							ОписаниеОшибки()
							);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							Текст,
							Объект);
					КонецПопытки;
					
					Попытка
						
						МассивДокументовККМ = РезультатЗапросаДокументыНаККМ.Выгрузить().ВыгрузитьКолонку("Ссылка");
						
						Для Каждого СсылкаДокументККМ Из МассивДокументовККМ Цикл
							
							ДокументОбъект = СсылкаДокументККМ.ПолучитьОбъект();
							ДокументОбъект.ОтчетОРозничныхПродажах = СсылкаНаОтчет;
							ДокументОбъект.СменаЗакрыта = Истина;
							ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
							
						КонецЦикла;
						
					Исключение
						ОтменитьТранзакцию = Истина;
	
						Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось записать документы! %1'"),
							ОписаниеОшибки()
							);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							Текст,
							Объект);
					КонецПопытки;
					
					Попытка
						
						Если ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(ОтчетОРозничныхПродажах.Дата) Тогда
							
							ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
								ОтчетОРозничныхПродажах.Организация,
								ОтчетОРозничныхПродажах.Магазин);
							
							ДобавитьМаркируемуюПродукцию = Ложь;
						
							Если ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
								НаходитсяВСельскойМестности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияЕГАИС, "НаходитсяВСельскойМестности");
								Если НаходитсяВСельскойМестности
									И Константы.ДатаНачалаРегистрацииРозничныхПродажВЕГАИСВСельскойМестности.Получить() > ОтчетОРозничныхПродажах.Дата Тогда
									ДобавитьМаркируемуюПродукцию = Истина;
								КонецЕсли;
							КонецЕсли;
							
							ДобавитьНеМаркируемуюПродукцию = Константы.ВыгружатьПродажиНемаркируемойПродукцииВЕГАИС.Получить();
							
							СписокСкладов = ИнтеграцияЕГАИСРТ.СписокСкладовДляКоторыхНужноСоздаватьАктыСписания(СсылкаНаОтчет, ДобавитьМаркируемуюПродукцию, ДобавитьНеМаркируемуюПродукцию);
							
							Если СписокСкладов.Количество() > 0 Тогда
								
								АктСписанияЕГАИС  = Документы.АктСписанияЕГАИС.СоздатьДокумент();
								ИнтеграцияЕГАИСРТ.ЗаполнитьАктСписанияЕГАИСНаОснованииОтчетаОРозничныхПродажах(АктСписанияЕГАИС, СсылкаНаОтчет, ДобавитьМаркируемуюПродукцию, ДобавитьНеМаркируемуюПродукцию);
								АктСписанияЕГАИС.Записать(РежимЗаписиДокумента.Запись);
								
								МассивДокументовКПроведению.Добавить(АктСписанияЕГАИС);
								
							КонецЕсли;
							
						КонецЕсли;
						
					Исключение
						ОтменитьТранзакцию = Истина;
	
						Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось записать документы! %1'"),
							ОписаниеОшибки()
							);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							Текст,
							Объект);
					КонецПопытки;
					
				КонецЕсли;
				
				УстановитьПривилегированныйРежим(Ложь);
				
			Исключение
				ОтменитьТранзакцию = Истина;
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось записать документ ""Отчет ККМ о продажах!"" %1'"),
					ОписаниеОшибки()
					);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					Объект);
			КонецПопытки;
		КонецЕсли;

		Если ОтменитьТранзакцию Тогда
			ОтменитьТранзакцию();
			Отказ = Истина;
		Иначе
			ЗафиксироватьТранзакцию();
			УстановитьПривилегированныйРежим(Истина);
			Для Каждого ДокументКПроведению Из МассивДокументовКПроведению Цикл
				Попытка
					РезультатПроверки = ДокументКПроведению.ПроверитьЗаполнение();
					
					Если РезультатПроверки Тогда
						Если ТипЗнч(ДокументКПроведению) = Тип("ДокументОбъект.АктСписанияЕГАИС") Тогда
							ДокументКПроведению.Записать(РежимЗаписиДокумента.Проведение);
						Иначе
							ДокументКПроведению.Записать(РежимЗаписиДокумента.Проведение, РежимПроведения);
						КонецЕсли;
						Если НЕ ДокументКПроведению.Проведен Тогда
							СписокНеПроведенныхДокументов.Добавить(ДокументКПроведению.Ссылка, ДокументКПроведению.Ссылка.Метаданные().Имя);
						ИначеЕсли ТипЗнч(ДокументКПроведению) = Тип("ДокументОбъект.АктСписанияЕГАИС") Тогда
							СписокАктовСписанияЕГАИС.Добавить(ДокументКПроведению.Ссылка, ДокументКПроведению.Ссылка.Метаданные().Имя);
						КонецЕсли;
					Иначе
						ДокументКПроведению.Записать(РежимЗаписиДокумента.Запись);
						СписокНеПроведенныхДокументов.Добавить(ДокументКПроведению.Ссылка, ДокументКПроведению.Ссылка.Метаданные().Имя);
					КонецЕсли;
				Исключение
					СписокНеПроведенныхДокументов.Добавить(ДокументКПроведению.Ссылка, ДокументКПроведению.Ссылка.Метаданные().Имя);
					НужноДополнительноеПредупреждение = Истина;
					
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось провести документ ""%1"".'"),
						
						Строка(ДокументКПроведению)
						);
					Текст = Текст + Символы.ПС + ОписаниеОшибки();
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						Объект);
					
				КонецПопытки;

				СписокДокументов.Добавить(ДокументКПроведению.Ссылка, ДокументКПроведению.Ссылка.Метаданные().Имя);
			КонецЦикла;
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	Иначе
		ОтменитьТранзакцию = Истина;
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КассоваяСмена) Тогда
		ОписаниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
		КассоваяСмена = ОписаниеКассовойСмены.КассоваяСмена;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ЗакрытииКассовойСменыСменыОбработатьДокументыККМСервер",ВремяНачалаЗамера);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокНеПроведенныхДокументов()

	Если ДокументыОткрыватьМодально Тогда
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	Иначе
		Режим = РежимОткрытияОкнаФормы.Независимый;
	КонецЕсли;
	
	ВладелецОткрываемыхДокументов = Неопределено;
	Если ВыполнитьЗакрытиеСразу Тогда
		ВладелецОткрываемыхДокументов = ЭтотОбъект.ВладелецФормы;
	КонецЕсли;
	
	Для каждого ЭлементаСписка Из СписокНеПроведенныхДокументов Цикл
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("Ключ", ЭлементаСписка.Значение);
		ОткрытьФорму("Документ." + ЭлементаСписка.Представление + ".ФормаОбъекта", СтруктураКлюча, ВладелецОткрываемыхДокументов,,,,, Режим); 
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПередатьАктыСписанияВЕГАИС()
	
	Для Каждого ЭлементаСписка Из СписокАктовСписанияЕГАИС Цикл
	
		ИнтеграцияЕГАИСКлиент.ПодготовитьКПередаче(
			ЭлементаСписка.Значение,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные"));
			
		Если ДокументыОткрыватьМодально Тогда
			Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Иначе
			Режим = РежимОткрытияОкнаФормы.Независимый;
		КонецЕсли;
		
		ВладелецОткрываемыхДокументов = Неопределено;
		Если ВыполнитьЗакрытиеСразу Тогда
			ВладелецОткрываемыхДокументов = ЭтотОбъект.ВладелецФормы;
		КонецЕсли;
		
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("Ключ", ЭлементаСписка.Значение);
		ОткрытьФорму("Документ.АктСписанияЕГАИС.ФормаОбъекта", СтруктураКлюча, ВладелецОткрываемыхДокументов,,,,, Режим);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданныеДокументы()
	
	ПередатьАктыСписанияВЕГАИС();
	ОткрытьСписокНеПроведенныхДокументов();
	
КонецПроцедуры


&НаСервере
Функция ЭквайринговыйТерминалПоКассеККМ()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭквайринговыеТерминалы.Ссылка
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Касса = &Касса
	|	И (НЕ ЭквайринговыеТерминалы.ПометкаУдаления)
	|	И (НЕ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования)";
	
	Запрос.УстановитьПараметр("Касса", Объект.КассаККМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	Иначе
		Возврат Справочники.ЭквайринговыеТерминалы.ПустаяСсылка();
	КонецЕсли;
	

КонецФункции

&НаСервере
// Функция осуществляет создание нового документа "Отчет о розничных продажах".
//
// Параметры:
//  ОблагаетсяЕНВД                           - <Булево>, <Неопределено>
//                                           - Розничная торговля облагается ЕНВД.
//
// Возвращаемое значение:
//  <ДокументОбъект.ОтчетОРозничныхПродажах> - Созданный документ.
//
Функция СоздатьОтчетОРозничныхПродажах()

	ТекущаяДата   = ТекущаяДатаСеанса();
	ДатаДокумента = КонецДня(ТекущаяДата);
	
	Отчет               = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	Отчет.Дата          = ДатаДокумента;
	Отчет.КассаККМ      = Объект.КассаККМ;
	Отчет.Магазин       = Отчет.КассаККМ.Магазин;
	Отчет.Ответственный = Пользователи.ТекущийПользователь();
	Отчет.Организация   = Отчет.КассаККМ.Владелец;

	Отчет.УчитыватьНДС     = Ложь;
	Отчет.ЦенаВключаетНДС  = ОбщегоНазначенияРТ.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(Отчет.Магазин.ПравилоЦенообразования, "ЦенаВключаетНДС");

	Возврат Отчет;

КонецФункции

&НаСервере
// Создает списание товаров
//
// Параметры:
//  Склад  - СправочникСсылка.Склады
//           Склад, по которому создается документ.
//
// Возвращаемое значение:
//  ДокументОбъект.СписаниеТоваров
//
Функция СоздатьСписаниеТоваров(Склад)

	ТекущаяДата   = ТекущаяДатаСеанса();
	ДатаДокумента = КонецДня(ТекущаяДата);
	
	СписаниеТоваров = Документы.СписаниеТоваров.СоздатьДокумент();
	СписаниеТоваров.Дата                  = ДатаДокумента;
	СписаниеТоваров.Склад                 = Склад;
	СписаниеТоваров.Магазин               = Объект.КассаККМ.Магазин;
	СписаниеТоваров.Ответственный         = Пользователи.ТекущийПользователь();
	СписаниеТоваров.Организация           = СписаниеТоваров.Склад.Организация;
	
	СписаниеТоваров.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.СкидкиПодарки;
	Возврат СписаниеТоваров;

КонецФункции

&НаКлиенте
Процедура ОчиститьИнформацию()
	
	ИнформацияВозвратТоваров          = 0;
	ИнформацияВыемка                  = 0;
	ИнформацияВыручка                 = 0;
	ИнформацияЗакрытиеСменыВСистеме   = "";
	ИнформацияОбZОтчете               = "";
	ИнформацияОСверкеИтогов           = "";
	ИнформацияОстатокВКассе           = 0;
	ИнформацияПроданоТоваров          = 0;
	ИнформацияПрочаяОперацииВозвратов = 0;
	ИнформацияПрочаяОперацииОплат     = 0;
	
КонецПроцедуры

&НаСервере
Функция ЗакрытьКассовуюСмену(КассаККМ, ОписаниеОшибки, СсылкаНаОтчет)
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РозничныеПродажиВызовСервера.ЗакрытьКассовуюСмену(Объект.КассаККМ, ОписаниеОшибки, СсылкаНаОтчет);
	
КонецФункции

#КонецОбласти