&НаКлиенте
Перем ВыполняетсяЗакрытие;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		ОбменДаннымиСервер.СообщитьОбОшибке(НСтр("ru = 'Для свертка периферийной базы необходимо установить дату свертки в настройках РИБ.'"), Отказ);
	КонецЕсли;
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Недостаточно прав для выполнения операции'"),,,,Отказ);
	КонецЕсли;
	
	Картинки = Новый Структура;
	Картинки.Вставить("Картинка1",   Новый Картинка);
	Картинки.Вставить("Картинка2",   БиблиотекаКартинок.ДлительнаяОперация48);
	Картинки.Вставить("Картинка3",   БиблиотекаКартинок.Успешно32);
	Картинки.Вставить("Картинка4",   БиблиотекаКартинок.Ошибка32);

	СтруктураПараметрыСверткиХранилище = Константы.ПараметрыСверткиИБ.Получить();
	СтруктураПараметрыСвертки = СтруктураПараметрыСверткиХранилище.Получить();
	Если ТипЗнч(СтруктураПараметрыСвертки) = Тип("Структура") Тогда
		Если СтруктураПараметрыСвертки.Свойство("ДатаСверткиИБ") Тогда
			Объект.ДатаСверткиИБ = СтруктураПараметрыСвертки.ДатаСверткиИБ;
		КонецЕсли;
		Если СтруктураПараметрыСвертки.Свойство("ЭтапСверткиЗапущен") Тогда
			ЭтапСверткиЗапущен = СтруктураПараметрыСвертки.ЭтапСверткиЗапущен;
		КонецЕсли;
		Если СтруктураПараметрыСвертки.Свойство("ЭтапСверткиЗавершен") Тогда
			ЭтапСверткиЗавершен = СтруктураПараметрыСвертки.ЭтапСверткиЗавершен;
		КонецЕсли;
		Если СтруктураПараметрыСвертки.Свойство("ИзмененыДокументы") Тогда
			ИзмененыДокументы = СтруктураПараметрыСвертки.ИзмененыДокументы;
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьСинхронизациюДанных = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");
	
	УстановитьВидимостьНаСервере();
	
	КоличествоОбъектовВТранзакции = 10000;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ТаблицаПереходовПоСценарию();
	УстановитьПорядковыйНомерПерехода(1);
	
	Если ОбщегоНазначенияКлиент.ПредлагатьСоздаватьРезервныеКопии() Тогда
		Текст = СтрШаблон(
			НСтр("ru = 'Перед выполнением операции рекомендуется сделать <a href = %1 >резервную копию данных</a>.'"),
			"СоздатьРезервнуюКопию");
		ФорматированнаяСтрока = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(Текст);
		Элементы.ДекорацияРезервноеКопирование.Заголовок = ФорматированнаяСтрока;
	КонецЕсли;
	

	Текст = СтрШаблон(
			НСтр("ru = 'Перед выполнением свертки данные в сворачиваемом периоде должны быть <a href = %1 >синхронизированы</a>.'"),
			"Синхронизация");
		ФорматированнаяСтрока = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(Текст);
		Элементы.ДекорацияСинхронизацияДанных.Заголовок = ФорматированнаяСтрока;
		
	Если ЭтапСверткиЗапущен > 0 Тогда
		РежимСвертки = 1;
		ВыполняетсяОткрытиеФормы = Истина;
		УстановитьПорядковыйНомерПерехода(5);
		ВыполняетсяОткрытиеФормы = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ВыполняетсяЗакрытие Тогда
		
		Если ЗавершениеРаботы Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		НСтрока = НСтр("ru = 'Завершить работу с помощником?'");
		
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияУдалениеПомеченныхОбъектовНажатие(Элемент)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Обработка.УдалениеПомеченныхОбъектов.Форма.ОсновнаяФорма.Открытие");

	ОткрытьФорму("Обработка.УдалениеПомеченныхОбъектов.Форма");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалениеНеиспользуемыхЭлементовНажатие(Элемент)
	ОткрытьФорму("Обработка.СверткаИнформационнойБазы.Форма.УдалениеНеиспользуемыхЭлементовСправочников");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРезервнаяКопияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "СоздатьРезервнуюКопию" Тогда
        
        // &ЗамерПроизводительности
        ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                 Истина, "Обработка.РезервноеКопированиеИБ.Форма.Форма.Открытие");
                 
        СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.РезервноеКопированиеИБ.Форма");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСинхронизацияДанныхОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "Синхронизация" Тогда
         
        // &ЗамерПроизводительности
        ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                 Истина, "ОбщаяФорма.СинхронизацияДанных.Открытие"); 
                 
        СтандартнаяОбработка = Ложь;
		ОткрытьФорму("ОбщаяФорма.СинхронизацияДанных", , ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПКОНажатие(Элемент)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		         Истина, "Документ.ПриходныйКассовыйОрдер.Форма.ФормаСписка.Открытие");

	ОткрытьФорму("Документ.ПриходныйКассовыйОрдер.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура РКОНажатие(Элемент)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		         Истина, "Документ.РасходныйКассовыйОрдер.Форма.ФормаСписка.Открытие");

	ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ПродажиНажатие(Элемент)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		         Истина, "Документ.ЧекККМ.Форма.ФормаСписка.Открытие");

	ОткрытьФорму("Документ.ЧекККМ.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ПересчетНажатие(Элемент)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		         Истина, "Документ.ПриказНаПроведениеИнвентаризацииТоваров.Форма.ФормаСписка.Открытие");
                 
	ОткрытьФорму("Документ.ПриказНаПроведениеИнвентаризацииТоваров.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЖурналРегистрацииЭтапы1Нажатие(Элемент)
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", Новый Структура("СобытиеЖурналаРегистрации", НСтр("ru='СверткаИБ'")));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	Если Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаСостояниеСвертки 
		И ЭтапСверткиЗавершен <> 3 Тогда
			Отказ = Ложь;
			ПередНачаломСвертки();
			ПодключитьОбработчикОжидания("ОбработчикОжиданияСвертка", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	// Очистить константу
	ЗаполнитьПараметрыСвертки("", Неопределено);
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	ЗаполнитьПараметрыСвертки("ДатаСверткиИБ", Объект.ДатаСверткиИБ);
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РазделИнициализацииПереходовПомощника

// Процедура определяет таблицу переходов по сценарию №1.
// Для заполнения таблицы переходов используется процедура ТаблицаПереходовНоваяСтрока()
//
&НаКлиенте
Процедура ТаблицаПереходовПоСценарию()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "СтраницаРезервноеКопирование", "СтраницаНавигацииНачало", "СтраницаРезервноеКопирование_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(2, "СтраницаСинхронизацияДанных", "СтраницаНавигацииРежимСвертки", "СтраницаСинхронизацияДанных_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(3, "СтраницаПараметрыСвертки", "СтраницаНавигацииРежимСвертки", "СтраницаПараметрыСвертки_ПриОткрытии", "СтраницаПараметрыСвертки_ПриПереходеДалее");
	ТаблицаПереходовНоваяСтрока(4, "СтраницаОграничения", "СтраницаНавигацииРежимСвертки", "СтраницаОграничения_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(5, "СтраницаСостояниеСвертки", "СтраницаНавигацииОжидание", "СтраницаСостояниеСвертки_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(6, "СтраницаЗавершение", "СтраницаНавигацииОкончание", "СтраницаЗавершение_ПриОткрытии");
	
КонецПроцедуры

// Добавляет новую строку в конец текущей таблицы переходов.
//
// Параметры:
//  ПорядковыйНомерПерехода (обязательный) - Число. Порядковый номер перехода, который соответствует текущему шагу перехода.
//  ИмяОсновнойСтраницы (обязательный) - Строка. Имя страницы панели "ПанельОсновная", которая соответствует текущему номеру перехода.
//  ИмяСтраницыНавигации (обязательный) - Строка. Имя страницы панели "ПанельНавигации", которая соответствует текущему номеру перехода.
//  ИмяОбработчикаПриОткрытии (необязательный) - Строка. Имя функции-обработчика события открытия текущей страницы помощника.
//  ИмяОбработчикаПриПереходеДалее (необязательный) - Строка. Имя функции-обработчика события перехода на следующую страницу помощника.
//  ИмяОбработчикаПриПереходеНазад (необязательный) - Строка. Имя функции-обработчика события перехода на предыдущую страницу помощника.
// 
&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыНавигации,
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = "")
	
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	ОчиститьСообщения();
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	ПорядковыйНомерПерехода = Значение;
	Если ПорядковыйНомерПерехода < 0 Тогда
		ПорядковыйНомерПерехода = 0;
	КонецЕсли;
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			Попытка
				Выполнить(ИмяПроцедуры);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
			
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			Попытка
				Выполнить(ИмяПроцедуры);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
			
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Попытка
			Выполнить(ИмяПроцедуры);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		Если Отказ Тогда
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			Возврат;
		ИначеЕсли ПропуститьСтраницу Тогда
			Если ЭтоПереходДалее Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			Иначе
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Установка отображения текущей страницы
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
КонецПроцедуры

#КонецОбласти

#Область РазделОбработчиковСобытийПерехода

// Обработчик выполняется при открытии страницы помощника "СтраницаРезервноеКопирование"
&НаКлиенте
Процедура Подключаемый_СтраницаРезервноеКопирование_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	Элементы.КомандаДалее.КнопкаПоУмолчанию = Истина;
КонецПроцедуры

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаПараметрыСвертки"
&НаКлиенте
Процедура Подключаемый_СтраницаПараметрыСвертки_ПриПереходеДалее(Отказ)
	ОчиститьСообщения();
	Если Не ЗначениеЗаполнено(Объект.ДатаСверткиИБ) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Дата свертки"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ДатаСверткиИБ", "Объект.ДатаСверткиИБ", Отказ);
		Возврат;
	КонецЕсли;
	Если ЕстьУзлыРИБ(Объект.ДатаСверткиИБ) Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'В информационной базе обнаружены узлы РИБ. Перед выполнением свертки центральной базы необходимо для узлов РИБ установить ""Дату свертки"" и выполнить полную синхронизацию.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ДатаСверткиИБ", "Объект.ДатаСверткиИБ", Отказ);
	КонецЕсли;
	
	ДатаПоследнейСвертки = ДатаПоследнейСвертки();
	Если ДатаПоследнейСвертки > Объект.ДатаСверткиИБ Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Информационная база уже свернута на более позднюю дату'")+": "+Формат(ДатаПоследнейСвертки+1,"ДЛФ=D");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ДатаСверткиИБ", "Объект.ДатаСверткиИБ", Отказ);
	КонецЕсли;
	
	ИзменитьДатуНачалаВыгрузкиДокументов(Отказ);
КонецПроцедуры

&НаСервере
Функция ЕстьУзлыРИБ(ДатаСверткиИБ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоМагазину.Ссылка
		|ИЗ
		|	ПланОбмена.ПоМагазину КАК ПоМагазину
		|ГДЕ
		|	ПоМагазину.Ссылка <> &ЭтотУзел
		|	И ПоМагазину.ДатаНачалаВыгрузкиДокументов < &ДатаСвертки";
	
	Запрос.УстановитьПараметр("ДатаСвертки", ДатаСверткиИБ);
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ПоМагазину.ЭтотУзел());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаСервере
Функция ДатаПоследнейСвертки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВводНачальныхОстатковУзла.Дата
		|ИЗ
		|	Документ.ВводНачальныхОстатковУзла КАК ВводНачальныхОстатковУзла
		|ГДЕ
		|	ВводНачальныхОстатковУзла.Проведен
		|	И ВводНачальныхОстатковУзла.Узел = &ЭтотУзел
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВводНачальныхОстатковУзла.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ПоМагазину.ЭтотУзел());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Дата;
	Иначе
		Возврат '00010101';
	КонецЕсли;
	
КонецФункции


// Обработчик выполняется при открытии страницы помощника "СтраницаСинхронизацияДанных"
&НаКлиенте
Процедура Подключаемый_СтраницаСинхронизацияДанных_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	Элементы.КомандаДалее4.КнопкаПоУмолчанию = Истина;
	ПропуститьСтраницу = Не ИспользоватьСинхронизациюДанных;
КонецПроцедуры

// Обработчик выполняется при открытии страницы помощника "СтраницаОграничения"
&НаКлиенте
Процедура Подключаемый_СтраницаОграничения_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.КомандаОтмена4.КнопкаПоУмолчанию = Истина;
	
	ДанныеОбОграничениях = Ограничения(Объект.ДатаСверткиИБ);
	
	ПропуститьСтраницу = 
	Не (ДанныеОбОграничениях.ОткрыткаКассоваяСмена
	Или ДанныеОбОграничениях.ТоварыКОформлениюИзлишковНедостач
	Или ДанныеОбОграничениях.ДенежныеСредстваКПоступлению
	Или ДанныеОбОграничениях.ДенежныеСредстваКВыплате);
	
	Элементы.Продажи.Видимость = ДанныеОбОграничениях.ОткрыткаКассоваяСмена;
	Элементы.ИзлишкиНедостачи.Видимость = ДанныеОбОграничениях.ТоварыКОформлениюИзлишковНедостач;
	Элементы.ПКО.Видимость = ДанныеОбОграничениях.ДенежныеСредстваКПоступлению;
	Элементы.РКО.Видимость = ДанныеОбОграничениях.ДенежныеСредстваКВыплате;
	
КонецПроцедуры


// Обработчик выполняется при открытии страницы помощника "ПараметрыСвертки"
&НаКлиенте
Процедура Подключаемый_СтраницаПараметрыСвертки_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	Элементы.КомандаДалее4.КнопкаПоУмолчанию = Истина;
КонецПроцедуры

// Обработчик выполняется при открытии страницы помощника "СтраницаЗавершение"
&НаКлиенте
Процедура Подключаемый_СтраницаЗавершение_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	Элементы.КомандаГотово.КнопкаПоУмолчанию = Истина;
	Элементы.ДополнительныеИнструменты.Видимость = Ложь;
КонецПроцедуры

// Обработчик выполняется при открытии страницы помощника "СтраницаСостояниеСвертки"
&НаКлиенте
Процедура Подключаемый_СтраницаСостояниеСвертки_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	Если ЭтапСверткиЗапущен = 3 И ЭтапСверткиЗавершен = 3 Тогда
		// Все сделали
		ПропуститьСтраницу = Истина;
		Возврат;
	КонецЕсли;
	Элементы.ГруппаПродолжениеСвертки.Видимость = Ложь;

	Элементы.КомандаДалее3.КнопкаПоУмолчанию = Истина;
	// Прорисовать состояние свертки
	ОтобразитьСостояниеСвертки();

	ФлагЗапуститьСвертку = Истина;
	Если ВыполняетсяОткрытиеФормы Тогда
		Элементы.ГруппаПродолжениеСвертки.Видимость = Истина;
		Элементы.СтраницыПереключаемые.ТекущаяСтраница = Элементы.СтраницаПроцессОстановлен;
		
		ФлагЗапуститьСвертку = Ложь;
	КонецЕсли;
	// Проверим текущее состояние
	Если ЭтапСверткиЗапущен > ЭтапСверткиЗавершен Тогда
		ФлагЗапуститьСвертку = Ложь;
		Если РежимСвертки = 0 Тогда
			РежимСвертки = 1;
		КонецЕсли;
		
		ВключитьКартинкуЭтапа(ЭтапСверткиЗапущен,4);
		Элементы.СтраницыПереключаемые.ТекущаяСтраница = Элементы.СтраницаВозниклиОшибки;
		Элементы.ДекорацияВозниклиОшибки2.Видимость = Истина;
		Элементы.ДекорацияВозниклиОшибки3.Видимость = Ложь;
		// Были ошибки. Надо проверить можно ли сворачивать дальше
		// Этапы 2 и 3 можно продолжать без проблем
		// Для этапа 1 нужны специальные проверки
		Если ЭтапСверткиЗапущен = 1 Тогда
			Если ИзмененыДокументы Тогда
				Элементы.ДекорацияВозниклиОшибки2.Видимость = Ложь;
				Элементы.ДекорацияВозниклиОшибки3.Видимость = Истина;
				// Блокируем кнопку Далее
				Элементы.КомандаДалее3.Доступность = Ложь;
			Иначе
				ЭтапСверткиЗапущен = 0;
				УдалитьДокументыВводаОстатков = Истина;
			КонецЕсли;
		Иначе
			ЭтапСверткиЗапущен = ЭтапСверткиЗапущен - 1;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ФлагЗапуститьСвертку Тогда
		Возврат;
	КонецЕсли;
	ПередНачаломСвертки();
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияСвертка", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыСвязанныеСОбменамиДанными

&НаСервере
Процедура ИзменитьДатуНачалаВыгрузкиДокументов(Отказ)
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОбменУТ11.Ссылка,
	|	ОбменУТ11.ДатаНачалаВыгрузкиДокументов
	|ПОМЕСТИТЬ УзлыОбмена
	|ИЗ
	|	ПланОбмена.ОбменУправлениеТорговлейРозница КАК ОбменУТ11
	|ГДЕ
	|	ОбменУТ11.Ссылка <> &ЭтотУзелУТ11
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбменУТ10.Ссылка,
	|	ОбменУТ10.ДатаНачалаВыгрузкиДокументов
	|ИЗ
	|	ПланОбмена.ОбменРозницаУправлениеТорговлей103 КАК ОбменУТ10
	|ГДЕ
	|	ОбменУТ10.Ссылка <> &ЭтотУзелУТ10
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбменБП2.Ссылка,
	|	ОбменБП2.ДатаНачалаВыгрузкиДокументов
	|ИЗ
	|	ПланОбмена.ОбменРозницаБухгалтерияПредприятия КАК ОбменБП2
	|ГДЕ
	|	ОбменБП2.Ссылка <> &ЭтотУзелБП2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбменБП3.Ссылка,
	|	ОбменБП3.ДатаНачалаВыгрузкиДокументов
	|ИЗ
	|	ПланОбмена.ОбменРозницаБухгалтерияПредприятия30 КАК ОбменБП3
	|ГДЕ
	|	ОбменБП3.Ссылка <> &ЭтотУзелБП3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбменОП.Ссылка,
	|	ОбменОП.ДатаНачалаВыгрузкиДокументов
	|ИЗ
	|	ПланОбмена.ОбменРозницаОтчетностьПредпринимателя КАК ОбменОП
	|ГДЕ
	|	ОбменОП.Ссылка <> &ЭтотУзелОП
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбменУНФ.Ссылка,
	|	ОбменУНФ.ДатаНачалаВыгрузкиДокументов
	|ИЗ
	|	ПланОбмена.ОбменРозницаУправлениеНебольшойФирмой КАК ОбменУНФ
	|ГДЕ
	|	ОбменУНФ.Ссылка <> &ЭтотУзелУНФ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбменУПП.Ссылка,
	|	ОбменУПП.ДатаНачалаВыгрузкиДокументов
	|ИЗ
	|	ПланОбмена.ОбменРозницаУправлениеПредприятием КАК ОбменУПП
	|ГДЕ
	|	ОбменУПП.Ссылка <> &ЭтотУзелУПП
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УниверсальныйФормат.Ссылка,
	|	УниверсальныйФормат.ДатаНачалаВыгрузкиДокументов
	|ИЗ
	|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК УниверсальныйФормат
	|ГДЕ
	|	УниверсальныйФормат.Ссылка <> &ЭтотУзелУФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УзлыОбмена.Ссылка
	|ИЗ
	|	УзлыОбмена КАК УзлыОбмена
	|ГДЕ
	|	УзлыОбмена.ДатаНачалаВыгрузкиДокументов <= &ДатаСвертки");
			
	Запрос.УстановитьПараметр("ДатаСвертки",  Объект.ДатаСверткиИБ);
	Запрос.УстановитьПараметр("ЭтотУзелБП2",  ПланыОбмена.ОбменРозницаБухгалтерияПредприятия.ЭтотУзел());
	Запрос.УстановитьПараметр("ЭтотУзелБП3",  ПланыОбмена.ОбменРозницаБухгалтерияПредприятия30.ЭтотУзел());
	Запрос.УстановитьПараметр("ЭтотУзелОП",   ПланыОбмена.ОбменРозницаОтчетностьПредпринимателя.ЭтотУзел());
	Запрос.УстановитьПараметр("ЭтотУзелУНФ",  ПланыОбмена.ОбменРозницаУправлениеНебольшойФирмой.ЭтотУзел());
	Запрос.УстановитьПараметр("ЭтотУзелУПП",  ПланыОбмена.ОбменРозницаУправлениеПредприятием.ЭтотУзел());
	Запрос.УстановитьПараметр("ЭтотУзелУТ10", ПланыОбмена.ОбменРозницаУправлениеТорговлей103.ЭтотУзел());
	Запрос.УстановитьПараметр("ЭтотУзелУТ11", ПланыОбмена.ОбменУправлениеТорговлейРозница.ЭтотУзел());
	Запрос.УстановитьПараметр("ЭтотУзелУФ",   ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел());
	
	ВыборкаУзлов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаУзлов.Следующий() Цикл
		ЗаполнитьПараметрыСвертки("ЭтапСверткиПодготовкаУзловСинхронизации",Истина);
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ВыборкаУзлов.Ссылка);
		Исключение
			
			ТекстОшибки = НСтр("ru='Не удалось заблокировать %Элемент%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Элемент%",        ВыборкаУзлов.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
			
		КонецПопытки;
		
		Если Отказ Тогда
			УстановитьПривилегированныйРежим(Ложь);
			Возврат;
		КонецЕсли;
		
		УзелОбмена = ВыборкаУзлов.Ссылка.ПолучитьОбъект();
		УзелОбмена.ДатаНачалаВыгрузкиДокументов = Объект.ДатаСверткиИБ;
		
		Попытка
			
			УзелОбмена.ДополнительныеСвойства.Вставить("Загрузка", Истина);
			УзелОбмена.Записать();
			
		Исключение
			
			ТекстОшибки = НСтр("ru='Не удалось записать %Элемент%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Элемент%",        ВыборкаУзлов.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
			
		КонецПопытки;
		ЗаполнитьПараметрыСвертки("ЭтапСверткиПодготовкаУзловСинхронизации",Ложь);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНаСервере()
	
	УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НадписьПовторноеОткрытиеФормы",
		"Видимость",
		Ложь);
	УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НадписьГотово",
		"Видимость",
		Ложь);

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыСвязанныеСВыполнениемСвертки

&НаКлиенте
Процедура ПередНачаломСвертки()
	Если ЭтапСверткиЗавершен = 3 Тогда
		Возврат;
	КонецЕсли;
	Элементы.СтраницыПереключаемые.ТекущаяСтраница = Элементы.СтраницаИдетСвертка;
	Если РежимСвертки = 0 Тогда
		Элементы.КомандаДалее3.Видимость = Ложь;
	Иначе
		Элементы.КомандаДалее3.Доступность = Ложь;
	КонецЕсли;
	Элементы.КомандаОтмена3.Доступность = Ложь;
	ОтобразитьСостояниеСвертки();
	
	// Определить текущий этап
	Если ЭтапСверткиЗапущен = 0 Тогда
		ЭтапСверткиЗапущен = 1;
	ИначеЕсли ЭтапСверткиЗапущен = ЭтапСверткиЗавершен Тогда
		ЭтапСверткиЗапущен = ЭтапСверткиЗапущен + 1;
	КонецЕсли;
	ОтобразитьСостояниеСвертки();

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияСвертка()
	ЗапуститьСледующийЭтапСвертки();
	
	Элементы.СтраницыПереключаемые.ТекущаяСтраница = Элементы.СтраницаПроцессОстановлен;

	Если РежимСвертки = 1 Тогда
		Элементы.КомандаДалее3.Доступность = Истина;
	КонецЕсли;
	Элементы.КомандаОтмена3.Доступность = Истина;
	Элементы.Справка3.Доступность = Истина;

	Если ЭтапСверткиЗавершен = 3 Тогда
		КомандаДалее(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьСледующийЭтапСвертки()
	Если ЭтапСверткиЗавершен = 3 Тогда
		Возврат;
	КонецЕсли;
	ОтобразитьСостояниеСвертки();

	Если РежимСвертки = 0 И ЭтапСверткиЗапущен = 1 Тогда
		// последовательное выполнение этапов
		Для счЭт=1 По 3 Цикл
			ЭтапСверткиЗапущен = СчЭт;
			ОтобразитьСостояниеСвертки();
			ВыполнитьЭтапСвертки(ЭтапСверткиЗапущен);
		КонецЦикла;
	Иначе
		ВыполнитьЭтапСвертки(ЭтапСверткиЗапущен);
	КонецЕсли;
	ОтобразитьСостояниеСвертки();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыСвертки(ИмяПараметра, ЗначениеПараметра)
	Если ИмяПараметра = "" Тогда
		// Очистка
		Константы.ПараметрыСверткиИБ.Установить(Неопределено);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметрыСвертки = Константы.ПараметрыСверткиИБ.Получить().Получить();
	Если ТипЗнч(СтруктураПараметрыСвертки) <> Тип("Структура") Тогда
		СтруктураПараметрыСвертки = Новый Структура;
	ИначеЕсли СтруктураПараметрыСвертки.Свойство(ИмяПараметра) Тогда
		// Возможно, уже установлено (так может быть с датой свертки)
		Если СтруктураПараметрыСвертки[ИмяПараметра] = ЗначениеПараметра Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	СтруктураПараметрыСвертки.Вставить(ИмяПараметра, ЗначениеПараметра);
	СтруктураПараметрыСверткиХранилище = Новый ХранилищеЗначения(СтруктураПараметрыСвертки);
	Константы.ПараметрыСверткиИБ.Установить(СтруктураПараметрыСверткиХранилище);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЭтапСвертки(НомерЭтапа)
	УстановитьПривилегированныйРежим(Истина);

	ЗаполнитьПараметрыСвертки("ЭтапСверткиЗапущен", НомерЭтапа);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Если НомерЭтапа = 1 Тогда
		// На первом этапе запоминаем дату свертки
		ЗаполнитьПараметрыСвертки("ДатаСверткиИБ", Объект.ДатаСверткиИБ);
		ОбработкаОбъект.СформироватьДокументыВводаОстатков(УдалитьДокументыВводаОстатков);
	ИначеЕсли НомерЭтапа = 2 Тогда
		ОбработкаОбъект.УдалитьДвиженияПоДатуСвертки();
	ИначеЕсли НомерЭтапа = 3 Тогда
		ОбработкаОбъект.ПровестиДокументыВводаОстатков();
	КонецЕсли;
	ЭтапСверткиЗавершен = НомерЭтапа;
	ЗаполнитьПараметрыСвертки("ЭтапСверткиЗавершен", ЭтапСверткиЗавершен);
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

#КонецОбласти

#Область ОграниченияСвертки

&НаСервере
Функция Ограничения(Дата)
	Возврат ПолучитьИсходныеДанныеОбОграниченияхСвертки(Дата);
КонецФункции

&НаСервере
Функция ПолучитьИсходныеДанныеОбОграниченияхСвертки(ДатаСверткиИБ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассоваяСмена.Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлениюИзлишковНедостач.ДокументОснование,
	|	ТоварыКОформлениюИзлишковНедостач.Склад,
	|	ТоварыКОформлениюИзлишковНедостач.Номенклатура,
	|	ТоварыКОформлениюИзлишковНедостач.Характеристика,
	|	ТоварыКОформлениюИзлишковНедостач.КОформлениюАктовОстаток,
	|	ТоварыКОформлениюИзлишковНедостач.КОформлениюОрдеровОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюИзлишковНедостач.Остатки(&ГраницаОстаток, ) КАК ТоварыКОформлениюИзлишковНедостач
	|ГДЕ
	|	(ТоварыКОформлениюИзлишковНедостач.КОформлениюАктовОстаток > 0
	|			ИЛИ ТоварыКОформлениюИзлишковНедостач.КОформлениюОрдеровОстаток > 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредстваКПоступлению.Организация,
	|	ДенежныеСредстваКПоступлению.Касса,
	|	ДенежныеСредстваКПоступлению.ДокументПередачи,
	|	ДенежныеСредстваКПоступлению.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКПоступлениюНаличные.Остатки(&ГраницаОстаток, ) КАК ДенежныеСредстваКПоступлению
	|ГДЕ
	|	ДенежныеСредстваКПоступлению.СуммаОстаток > 0
	|	И ДенежныеСредстваКПоступлению.ДокументПередачи.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюОрганизацию), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствИзКассыККМ))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредстваКВыплате.Магазин,
	|	ДенежныеСредстваКВыплате.РаспоряжениеНаРасходованиеДенежныхСредств,
	|	ДенежныеСредстваКВыплате.СтатьяДвиженияДенежныхСредств,
	|	ДенежныеСредстваКВыплате.ДокументРасчета,
	|	ДенежныеСредстваКВыплате.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(&ГраницаОстаток, ) КАК ДенежныеСредстваКВыплате
	|ГДЕ
	|	ДенежныеСредстваКВыплате.СуммаОстаток > 0";
	
	Запрос.УстановитьПараметр("ГраницаОстаток", Новый Граница(КонецДня(ДатаСверткиИБ),ВидГраницы.Включая));
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	
	Результат = Новый Структура;
	Результат.Вставить("ОткрыткаКассоваяСмена",НЕ РезультатЗапроса[0].Пустой());
	Результат.Вставить("ТоварыКОформлениюИзлишковНедостач",НЕ РезультатЗапроса[1].Пустой());
	Результат.Вставить("ДенежныеСредстваКПоступлению",НЕ РезультатЗапроса[2].Пустой());
	Результат.Вставить("ДенежныеСредстваКВыплате",НЕ РезультатЗапроса[3].Пустой());
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ОтобразитьСостояниеСвертки()
	Для сч = ЭтапСверткиЗавершен+1 По 3 Цикл
		ВключитьКартинкуЭтапа(Сч,1);
	КонецЦикла;
	
	Если ЭтапСверткиЗавершен > 0 Тогда
		Для сч=1 По ЭтапСверткиЗавершен Цикл
			ВключитьКартинкуЭтапа(Сч,3);
		КонецЦикла;
	КонецЕсли;
	Если ЭтапСверткиЗапущен > ЭтапСверткиЗавершен Тогда
		ВключитьКартинкуЭтапа(ЭтапСверткиЗапущен,2);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВключитьКартинкуЭтапа(НомерЭтапа,НомерКартинки)
	Элементы["ГруппаЭтап"+НомерЭтапа].ПодчиненныеЭлементы["КартинкаЭтап"+НомерЭтапа].Картинка = Картинки["Картинка"+НомерКартинки];
КонецПроцедуры

// Устанавливает значение свойства элемента формы, если находит элемент на форме
//
// Параметры
//  ЭлементыФормы - ВсеЭлементыФормы - элементы формы, среди которых содержится искомый элемент.
//  ИмяЭлемента   - Строка - имя искомого элемента.
//  ИмяСвойства   - Строка - имя свойства, для которого будет устанавливаться значение.
//  Значение      - Произвольный - значение, которое будет установлено
//  УстанавливатьДляПодчиненных - Булево - установить аналогичное свойство для подчиненных элементов искомого элемента
//
Процедура УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение, УстанавливатьДляПодчиненных = Ложь) Экспорт
	
	Элемент = ЭлементыФормы.Найти(ИмяЭлемента);
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НРег(ИмяСвойства) = "ТолькоПросмотр"
		И ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
			
		ИмяСвойстваЭлемента = "Доступность";
		ЗначениеСвойства    = НЕ Значение;
	Иначе
		ИмяСвойстваЭлемента = ИмяСвойства;
		ЗначениеСвойства    = Значение;
	КонецЕсли;
	
	Если Элемент[ИмяСвойстваЭлемента] <> ЗначениеСвойства Тогда
		Элемент[ИмяСвойстваЭлемента] = ЗначениеСвойства;
	КонецЕсли;
	
	ТипыЭлементовФормыСПодчиненнымиЭлементами = Новый ОписаниеТипов("УправляемаяФорма, ГруппаФормы, ТаблицаФормы");
	
	Если УстанавливатьДляПодчиненных И ТипыЭлементовФормыСПодчиненнымиЭлементами.СодержитТип(ТипЗнч(Элемент)) Тогда
		Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ПодчиненныйЭлемент.Имя, ИмяСвойства, Значение, Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДекорацияДокументыВводаОстатковЭтапыНажатие(Элемент) 
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Документ.ВводНачальныхОстатковУзла.Форма.ФормаСписка.Открытие");

	ОткрытьФорму("Документ.ВводНачальныхОстатковУзла.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЖурналРегистрацииЭтапыНажатие(Элемент)
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", Новый Структура("СобытиеЖурналаРегистрации", НСтр("ru='СверткаИБ'")));
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСохраненныеПараметры(Команда)
	ЗаполнитьПараметрыСвертки("", Неопределено);
	Закрыть();
КонецПроцедуры

ВыполняетсяЗакрытие = Ложь;

#КонецОбласти