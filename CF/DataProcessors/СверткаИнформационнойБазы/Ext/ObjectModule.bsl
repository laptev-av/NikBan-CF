#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем Комментарий_УдалитьПриСверткеБазы, Комментарий_НеУдалятьПриСверткеБазы, Комментарий_СформированСверткойБазы;
Перем ТаблицаОстаткиНаСкладахПоПомещениям;
Перем ТаблицаОстаткиНаСкладахПоСериям;
Перем ТаблицаОстаткиНаСкладахПоНазначению;
Перем КоличествоСтрокВДокументеВводаОстатков;
Перем ОтраженоИзменениеДокументов;
Перем СтруктураИспользованиеИтоговРегистровНакопления;

#Область СлужебныеПроцедурыИФункции

// Процедура делает запись в журнал регистрации и сообщает пользователю, если это сообщение об ошибке.
//
Процедура ЗаписатьВЖурналСообщитьПользователю(ПараметрыЖурнала, УровеньЖурнала, ИмяСобытия, Знач Комментарий = "", ИнформацияОбОшибке = Неопределено) Экспорт
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Если Комментарий = "" Тогда
			ТестСообщенияПользователю = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Иначе
			ТестСообщенияПользователю = Комментарий + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			Комментарий = Комментарий + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
	Иначе
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") 
			И Не ПустаяСтрока(ИнформацияОбОшибке) Тогда
			Комментарий = Комментарий + Символы.ПС + ИнформацияОбОшибке;
		КонецЕсли;
		ТестСообщенияПользователю = Комментарий;
	КонецЕсли;
	
	// Журнал регистрации 
	УстановитьПривилегированныйРежим(Истина);
	ЗаписьЖурналаРегистрации(
		ПараметрыЖурнала.ГруппаСобытий, 
		УровеньЖурнала, 
		ПараметрыЖурнала.Метаданные, 
		ПараметрыЖурнала.Данные, 
		Комментарий);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка 
		Или УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СокрЛП(ТестСообщенияПользователю),ПараметрыЖурнала.Данные);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выводит сообщение о ходе процесса свертки
//
Процедура СообщениеСвертки(ТекстСообщения, ЭтоОшибка = Ложь, ОписаниеОшибки = Неопределено) 
	
	ПараметрыЖурнала = Новый Структура();
	ПараметрыЖурнала.Вставить("ГруппаСобытий", НСтр("ru='СверткаИБ'"));
	ПараметрыЖурнала.Вставить("Метаданные", Неопределено);
	ПараметрыЖурнала.Вставить("Данные", Неопределено);
	Если ЭтоОшибка Тогда
		УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
	Иначе
		УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	ЗаписатьВЖурналСообщитьПользователю(ПараметрыЖурнала, УровеньЖурнала,"",ТекстСообщения,ОписаниеОшибки);
КонецПроцедуры

// Процедура формирует и выводит сообщение о формировании документов ввода остатков
//
Процедура ВывестиСообщениеСформированыДокументы(ИмяДокумента)
	ТекстСообщения = НСтр("ru='Обработаны документы %ПредставлениеДокумента%'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеДокумента%", Метаданные.Документы[ИмяДокумента].Синоним);
	СообщениеСвертки(ТекстСообщения);
КонецПроцедуры

Процедура ЗафиксироватьИзменениеДокументовВПараметрСвертки()
	Если ОтраженоИзменениеДокументов Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметрыСвертки = Константы.ПараметрыСверткиИБ.Получить().Получить();
	Если ТипЗнч(СтруктураПараметрыСвертки) <> Тип("Структура") Тогда
		СтруктураПараметрыСвертки = Новый Структура;
	ИначеЕсли СтруктураПараметрыСвертки.Свойство("ИзмененыДокументы") Тогда
		// Возможно, уже установлено 
		Если СтруктураПараметрыСвертки.ИзмененыДокументы Тогда
			ОтраженоИзменениеДокументов = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ОтраженоИзменениеДокументов = Истина;

	СтруктураПараметрыСвертки.Вставить("ИзмененыДокументы", Истина);
	СтруктураПараметрыСверткиХранилище = Новый ХранилищеЗначения(СтруктураПараметрыСвертки);
	Константы.ПараметрыСверткиИБ.Установить(СтруктураПараметрыСверткиХранилище);
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияДокументовВводаОстатков

// Процедура формирует документы ввода остатков 
//
Процедура СформироватьДокументыВводаОстатков(ПовторныйЗапуск = Ложь) Экспорт
	
	// Формирование документов запускается повторно после ошибки
	// Надо удалить документы, созданные на предыдущем этапе
	Если ПовторныйЗапуск Тогда
		МассивДокументов = ПолучитьДокументыВводаОстатков("удаление");
		Для каждого ДокСсылка Из МассивДокументов Цикл
			ДокОбъект = ДокСсылка.ПолучитьОбъект();
			ДокОбъект.Удалить();
		КонецЦикла;
	КонецЕсли;
	
	ОтраженоИзменениеДокументов = Ложь;
	
	// Последовательный вызов процедур формирования документов ввода остатков
	
	СформироватьДокументыВводНачальныхОстатковУзла();
	СформироватьДокументыИзменениеАссортимента();
	СформироватьДокументыВводаОстатковКвотыАссортимента();
	СформироватьДокументыВводОстатковПоНакопительнымСкидкам();
	
	СформироватьДокументыВводОстатковРасчетовСПоставщиками();
	СформироватьДокументыНачислениеИСписаниеБонусныхБаллов();
	СформироватьДокументыУстановкиСебестоимости();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыСозданияЛокальныхДокументовВводаОстатков

Процедура СформироватьДокументыВводОстатковПоНакопительнымСкидкам()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПродажиПоДисконтнымКартамОбороты.ДисконтнаяКарта,
	|	ПродажиПоДисконтнымКартамОбороты.Номенклатура,
	|	ПродажиПоДисконтнымКартамОбороты.Характеристика,
	|	ПродажиПоДисконтнымКартамОбороты.СуммаОборот КАК Сумма,
	|	ПродажиПоДисконтнымКартамОбороты.КоличествоОборот КАК Количество
	|ИЗ
	|	РегистрНакопления.ПродажиПоДисконтнымКартам.Обороты(, &ГраницаОст, , ) КАК ПродажиПоДисконтнымКартамОбороты";
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	КоличествоСформированныхДокументов = 1;
	
	ДокОст = Документы.ВводОстатковПоНакопительнымСкидкам.СоздатьДокумент();
	ДокОст.Дата = ДатаСверткиИБ-1;
	ДокОст.Комментарий = Комментарий_СформированСверткойБазы;
	ДокОст.Ответственный =  ПараметрыСеанса.ТекущийПользователь;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = ДокОст.Остатки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		Если ДокОст.Остатки.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
			// Запишем документ ввода остатков и создадим новый
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
			УдалитьРегистрацию(ДокОст.Ссылка);
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
			РеквизитыШапкиДокумента = Новый Структура("Дата, , Ответственный");
			ЗаполнитьЗначенияСвойств(РеквизитыШапкиДокумента, ДокОст);
			ДокОст = Документы.ВводОстатковПоНакопительнымСкидкам.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(ДокОст, РеквизитыШапкиДокумента);
			ДокОст.Комментарий = Комментарий_СформированСверткойБазы + " ["+КоличествоСформированныхДокументов+"]";
		КонецЕсли;
	КонецЦикла;
	Если ДокОст.Остатки.Количество() > 0 Тогда
		ДокОст.Записать(РежимЗаписиДокумента.Запись);
		КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
		УдалитьРегистрацию(ДокОст.Ссылка);
	КонецЕсли;
	ВывестиСообщениеСформированыДокументы("ВводОстатковПоНакопительнымСкидкам");
КонецПроцедуры

Процедура СформироватьДокументыИзменениеАссортимента()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабРег.Номенклатура КАК Номенклатура,
	|	ТабРег.ОбъектПланирования КАК ОбъектПланирования,
	|	ТабРег.РольАссортимента КАК РольАссортимента,
	|	ТабРег.ВидЦен КАК ВидЦен,
	|	ВЫБОР
	|		КОГДА ТабРег.РазрешеныЗакупки
	|				И ТабРег.РазрешеныПродажи
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтадииАссортимента.РазрешеныЗакупкиИПродажи)
	|		КОГДА ТабРег.РазрешеныЗакупки
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтадииАссортимента.РазрешеныТолькоЗакупки)
	|		КОГДА ТабРег.РазрешеныПродажи
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтадииАссортимента.РазрешеныТолькоПродажи)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтадииАссортимента.ЗапрещеныЗакупкиИПродажи)
	|	КОНЕЦ КАК Стадия
	|ИЗ
	|	РегистрСведений.Ассортимент.СрезПоследних(&ГраницаОст, ) КАК ТабРег
	|ИТОГИ ПО
	|	ОбъектПланирования,
	|	Стадия";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;

	ВыборкаОбъектПланирования = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОбъектПланирования.Следующий() Цикл
		ВыборкаСтадия = ВыборкаОбъектПланирования.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСтадия.Следующий() Цикл
			ДокОст = Документы.ИзменениеАссортимента.СоздатьДокумент();
			ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, ВыборкаСтадия, КоличествоСформированныхДокументов);
			Если ВыборкаСтадия.Стадия = Перечисления.СтадииАссортимента.РазрешеныТолькоЗакупки Тогда
				ДокОст.Операция = Перечисления.ОперацииИзмененияАссортимента.ВводВАссортиментСОтсрочкойНачалаПродаж;
			ИначеЕсли ВыборкаСтадия.Стадия = Перечисления.СтадииАссортимента.РазрешеныТолькоПродажи Тогда
				ДокОст.Операция = Перечисления.ОперацииИзмененияАссортимента.ВыводИзАссортимента;
			ИначеЕсли ВыборкаСтадия.Стадия = Перечисления.СтадииАссортимента.ЗапрещеныЗакупкиИПродажи Тогда
				ДокОст.Операция = Перечисления.ОперацииИзмененияАссортимента.ПереносВАрхивОтзыв;
			Иначе
				ДокОст.Операция = Перечисления.ОперацииИзмененияАссортимента.ВводВАссортимент;
			КонецЕсли;
			ДокОст.Операция = Перечисления.ОперацииИзмененияАссортимента.ВводВАссортимент;
			ВыборкаДетали = ВыборкаСтадия.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				НоваяСтрока = ДокОст.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетали);
				Если ДокОст.Товары.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
					// Запишем документ ввода остатков и создадим новый
					ДокОст.Записать(РежимЗаписиДокумента.Запись);
					КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
					УдалитьРегистрацию(ДокОст.Ссылка);
					ДокОст = Документы.ИзменениеАссортимента.СоздатьДокумент();
					ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, ВыборкаСтадия, КоличествоСформированныхДокументов);
					ДокОст.Операция = Перечисления.ОперацииИзмененияАссортимента.ВводВАссортимент;
				КонецЕсли;
			КонецЦикла;
			Если ДокОст.Товары.Количество() > 0 Тогда
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				УдалитьРегистрацию(ДокОст.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ВывестиСообщениеСформированыДокументы("ИзменениеАссортимента");
КонецПроцедуры

Процедура СформироватьДокументыВводаОстатковКвотыАссортимента()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|ТабРег.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|ТабРег.ОбъектПланирования КАК ОбъектПланирования,
	|ТабРег.Марка КАК Марка,
	|ТабРег.Квота КАК Квота,
	|ТабРег.ПроцентОтклонения КАК ПроцентОтклонения,
	|&ДатаОст КАК ДатаНачалаДействия
	|ИЗ РегистрСведений.КвотыАссортимента.СрезПоследних(&ГраницаОст) КАК ТабРег
	|ИТОГИ ПО ОбъектПланирования";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;
	ВыборкаОбъектПланирования = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОбъектПланирования.Следующий() Цикл
		ДокОст = Документы.УстановкаКвотАссортимента.СоздатьДокумент();
		ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, ВыборкаОбъектПланирования, КоличествоСформированныхДокументов);
		ДокОст.ДатаНачалаДействия = ДокОст.Дата;
		ВыборкаДетали = ВыборкаОбъектПланирования.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			НоваяСтрока = ДокОст.ТоварныеКатегории.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетали);
			Если ДокОст.ТоварныеКатегории.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
				// Запишем документ ввода остатков и создадим новый
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				УдалитьРегистрацию(ДокОст.Ссылка);
				ДокОст = Документы.УстановкаКвотАссортимента.СоздатьДокумент();
				ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, ВыборкаОбъектПланирования, КоличествоСформированныхДокументов);
			КонецЕсли;
		КонецЦикла;
		Если ДокОст.ТоварныеКатегории.Количество() > 0 Тогда
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
			УдалитьРегистрацию(ДокОст.Ссылка);
		КонецЕсли;
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("УстановкаКвотАссортимента");
КонецПроцедуры

Процедура СформироватьДокументыВводОстатковРасчетовСПоставщиками()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.Магазин КАК Магазин,
		|	РасчетыСПоставщикамиОстатки.Поставщик,
		|	РасчетыСПоставщикамиОстатки.ДокументРасчета,
		|	РасчетыСПоставщикамиОстатки.СуммаОстаток КАК Сумма,
		|	РасчетыСПоставщикамиОстатки.КОплатеОстаток КАК КОплате,
		|	РасчетыСПоставщикамиОстатки.КПоступлениюОстаток КАК КПоступлению
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&ГраницаОст, ) КАК РасчетыСПоставщикамиОстатки
		|ИТОГИ ПО
		|	Магазин";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;
	ВыборкаМагазин = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаМагазин.Следующий() Цикл
		ДокОст = Документы.ВводОстатковРасчетовСПоставщиками.СоздатьДокумент();
		ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, ВыборкаМагазин, КоличествоСформированныхДокументов);
		ВыборкаДетальныеЗаписи = ВыборкаМагазин.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрока = ДокОст.РасчетыСПоставщиками.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			Если ДокОст.РасчетыСПоставщиками.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
				// Запишем документ ввода остатков и создадим новый
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				УдалитьРегистрацию(ДокОст.Ссылка);
				ДокОст = Документы.ВводОстатковРасчетовСПоставщиками.СоздатьДокумент();
				ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, ВыборкаМагазин, КоличествоСформированныхДокументов);
			КонецЕсли;
		КонецЦикла;
		Если ДокОст.РасчетыСПоставщиками.Количество() > 0 Тогда
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
			УдалитьРегистрацию(ДокОст.Ссылка);
		КонецЕсли;
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("ВводОстатковРасчетовСПоставщиками");
КонецПроцедуры

Процедура СформироватьДокументыНачислениеИСписаниеБонусныхБаллов()
	// Остатки
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БонусныеБаллыОстатки.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	БонусныеБаллыОстатки.ДисконтнаяКарта,
		|	БонусныеБаллыОстатки.НачисленоОстаток КАК Баллы
		|ИЗ
		|	РегистрНакопления.БонусныеБаллы.Остатки(&ГраницаОст, ) КАК БонусныеБаллыОстатки
		|ГДЕ
		|	БонусныеБаллыОстатки.НачисленоОстаток > 0
		|ИТОГИ ПО
		|	БонуснаяПрограммаЛояльности";
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;
	ВыборкаБонуснаяПрограммаЛояльности = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаБонуснаяПрограммаЛояльности.Следующий() Цикл
		ДокОст = Документы.НачислениеИСписаниеБонусныхБаллов.СоздатьДокумент();
		ДокОст.Дата = ДатаСверткиИБ-1;
		ДокОст.Комментарий = Комментарий_СформированСверткойБазы;
		ВыборкаДетальныеЗаписи = ВыборкаБонуснаяПрограммаЛояльности.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрока = ДокОст.Начисление.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			Если ДокОст.Начисление.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
				// Запишем документ ввода остатков и создадим новый
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				УдалитьРегистрацию(ДокОст.Ссылка);
				ДокОст = Документы.НачислениеИСписаниеБонусныхБаллов.СоздатьДокумент();
				ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, ВыборкаБонуснаяПрограммаЛояльности, КоличествоСформированныхДокументов);
			КонецЕсли;
		КонецЦикла;
		Если ДокОст.Начисление.Количество() > 0 Тогда
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
			УдалитьРегистрацию(ДокОст.Ссылка);
		КонецЕсли;
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("НачислениеИСписаниеБонусныхБаллов");
КонецПроцедуры

Процедура СформироватьДокументыВводНачальныхОстатковУзла()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Магазины.Ссылка КАК Магазин
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|
	|СГРУППИРОВАТЬ ПО
	|	Магазины.Ссылка";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		МассивМагазины = Результат.Выгрузить().ВыгрузитьКолонку("Магазин");
		
		ЦентральныйУзелРИБ = ПланыОбмена.ПоМагазину.ЭтотУзел();
		ДанныеДляЗаполненияВводаОстатков = Новый Структура;
		ДанныеДляЗаполненияВводаОстатков.Вставить("Дата", ДатаСверткиИБ-1);
		ДанныеДляЗаполненияВводаОстатков.Вставить("КодУзлаОбмена", ЦентральныйУзелРИБ.Код);
		ДанныеДляЗаполненияВводаОстатков.Вставить("Узел", ЦентральныйУзелРИБ);
		ДанныеДляЗаполненияВводаОстатков.Вставить("Комментарий", Комментарий_СформированСверткойБазы);
		ДанныеДляЗаполненияВводаОстатков.Вставить("ПометкаУдаления", Ложь);
		Отказ = Ложь;
		ОбменДаннымиПереопределяемый.ЗаполнитьОстатки(МассивМагазины, ДанныеДляЗаполненияВводаОстатков,, Отказ);
		Попытка
			ЗафиксироватьИзменениеДокументовВПараметрСвертки();
			Если Не Отказ Тогда
				ВыборкаДокументов = Документы.ВводНачальныхОстатковУзла.Выбрать(,, Новый Структура("КодУзлаОбмена", ЦентральныйУзелРИБ.Код), "Дата");
				Пока ВыборкаДокументов.Следующий() Цикл
					ДокументВыборки = ВыборкаДокументов.ПолучитьОбъект();
					УдалитьРегистрацию(ДокументВыборки.Ссылка);
				КонецЦикла;
			КонецЕсли; 
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Свертка ИБ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,,, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось записать документ ввода начальных остатков'"),, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДокументыУстановкиСебестоимости()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СебестоимостьНоменклатурыСрезПоследних.Магазин КАК Магазин,
		|	СебестоимостьНоменклатурыСрезПоследних.Номенклатура,
		|	СебестоимостьНоменклатурыСрезПоследних.Характеристика,
		|	СебестоимостьНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.СебестоимостьНоменклатуры.СрезПоследних(&ГраницаОст, ) КАК СебестоимостьНоменклатурыСрезПоследних
		|ИТОГИ ПО
		|	Магазин";
	
	ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	КоличествоСформированныхДокументов = 1;
	ВыборкаМагазины = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМагазины.Следующий() Цикл
		ДокОст = Документы.УстановкаСебестоимости.СоздатьДокумент();
		ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, ВыборкаМагазины, КоличествоСформированныхДокументов);
		ВыборкаДетальныеЗаписи = ВыборкаМагазины.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрока = ДокОст.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			Если ДокОст.Товары.Количество() >= КоличествоСтрокВДокументеВводаОстатков Тогда
				// Запишем документ ввода остатков и создадим новый
				ДокОст.Записать(РежимЗаписиДокумента.Запись);
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				УдалитьРегистрацию(ДокОст.Ссылка);
				ДокОст = Документы.УстановкаСебестоимости.СоздатьДокумент();
				ЗаполнитьШапкуДокументаВводаОстатков(ДокОст, ВыборкаМагазины, КоличествоСформированныхДокументов);
			КонецЕсли;
		КонецЦикла;
		Если ДокОст.Товары.Количество() > 0 Тогда
			ДокОст.Записать(РежимЗаписиДокумента.Запись);
			КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
			УдалитьРегистрацию(ДокОст.Ссылка);
		КонецЕсли;
	КонецЦикла;
	ВывестиСообщениеСформированыДокументы("НачислениеИСписаниеБонусныхБаллов");
КонецПроцедуры

Процедура УдалитьРегистрацию(СсылкаНаДокумент)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПоМагазину.Ссылка
	|ИЗ
	|	ПланОбмена.ПоМагазину КАК ПоМагазину
	|ГДЕ
	|	ПоМагазину.Ссылка <> &ЭтотУзел");
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ПоМагазину.ЭтотУзел());
	МассивУзлов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ПланыОбмена.УдалитьРегистрациюИзменений(МассивУзлов, СсылкаНаДокумент);
	
КонецПроцедуры

#КонецОбласти

#Область Процедуры

Функция ПолучитьДокументыВводаОстатков(Действие)
	
	Если Действие = "проведение" Тогда
		ДопУсловие = " И НЕ Док.ПометкаУдаления И НЕ Док.Проведен
		| И Док.Комментарий ПОДОБНО &Комментарий_СформированСверткойБазы";
	ИначеЕсли Действие = "удаление" Тогда
		ДопУсловие = " И Док.Дата >= &НачДата И НЕ Док.ПометкаУдаления
		|И Док.Комментарий ПОДОБНО &Комментарий_СформированСверткойБазы";
	ИначеЕсли Действие = "исключение" Тогда
		ДопУсловие = 
		" И Док.Дата >= &НачДата И (Док.Комментарий ПОДОБНО &Комментарий_СформированСверткойБазы 
		| 		ИЛИ Док.Комментарий ПОДОБНО &Комментарий_НеУдалятьПриСверткеБазы)";
	КонецЕсли;
	
	ТипыДокументовВводаОстатков = Новый Массив;
	ТипыДокументовВводаОстатков.Добавить("ВводНачальныхОстатковУзла");
	ТипыДокументовВводаОстатков.Добавить("УстановкаКвотАссортимента");
	ТипыДокументовВводаОстатков.Добавить("ИзменениеАссортимента");
	ТипыДокументовВводаОстатков.Добавить("НачислениеИСписаниеБонусныхБаллов");
	ТипыДокументовВводаОстатков.Добавить("ВводОстатковПоНакопительнымСкидкам");
	ТипыДокументовВводаОстатков.Добавить("ВводОстатковРасчетовСПоставщиками");
	ТипыДокументовВводаОстатков.Добавить("УстановкаСебестоимости");
	
	ТекстЗапроса = "";
	Для Каждого ИмяДокумента Из ТипыДокументовВводаОстатков Цикл
		
		Если ТекстЗапроса <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		|Док.Ссылка КАК Ссылка
		|ИЗ Документ."+ИмяДокумента+" КАК Док
		|ГДЕ Док.Дата < &КонДата "+ ДопУсловие +"
		|";
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|Док.Ссылка
		|ИЗ
		|Документ.ВводНачальныхОстатковУзла КАК Док
		|ГДЕ
		|Док.Узел <> &ЭтотУзел";
	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачДата", ДатаСверткиИБ-1);
	Запрос.УстановитьПараметр("КонДата", ДатаСверткиИБ);
	Запрос.УстановитьПараметр("Комментарий_СформированСверткойБазы", "%"+НСтр("ru='Сформирован обработкой свертки базы'")+"%");
	Запрос.УстановитьПараметр("Комментарий_НеУдалятьПриСверткеБазы", "%"+НСтр("ru='Не удалять при свертке базы'")+"%");
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ПоМагазину.ЭтотУзел());
	
	Результат = Запрос.Выполнить();
	МассивДокументов = Новый Массив;
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МассивДокументов.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	Возврат МассивДокументов;
КонецФункции

#КонецОбласти

#Область ПроцедурыУдаленияОбъектовМетаданныхИДвижений

// Функция определяет, используется ли в итогах хотя бы одно измерение регистра накопления.
//
Функция ИспользуютсяИтогиРегистраНакопления(ИмяРегистра)
	ИспользованиеИтогов = Неопределено;
	СтруктураИспользованиеИтоговРегистровНакопления.Свойство(ИмяРегистра, ИспользованиеИтогов);
	Если ИспользованиеИтогов <> Неопределено Тогда
		Возврат ИспользованиеИтогов;
	КонецЕсли;
	ИспользованиеИтогов = Ложь;
	Для Каждого ИзмерениеРегистра Из Метаданные.РегистрыНакопления[ИмяРегистра].Измерения Цикл
		Если ИзмерениеРегистра.ИспользованиеВИтогах Тогда
			ИспользованиеИтогов = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	СтруктураИспользованиеИтоговРегистровНакопления.Вставить(ИмяРегистра,ИспользованиеИтогов);
	Возврат ИспользованиеИтогов;
КонецФункции

// Процедура помечает на удаление документы
//
Процедура ПометитьНаУдалениеДокументы(ИмяДокумента, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов)
	Если ИмяДокумента = "ЧекККМ" Тогда
		ПометитьНаУдаление(ИмяДокумента);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекДокумент.Ссылка КАК Документ
	|ИЗ
	|	Документ.#ЭтоЗаменяется# КАК ТекДокумент
	|ГДЕ
	|	(НЕ ТекДокумент.ПометкаУдаления) 
	|	И ТекДокумент.Дата <= &ДатаОкончания
	|	И ТекДокумент.Ссылка НЕ В (&МассивПропускаемыхДокументов)";
	
	Если МассивУдаляемыхДокументов.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + " ОБЪЕДИНИТЬ ВСЕ "
		+"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТекДокумент.Ссылка КАК Документ
		|ИЗ
		|	Документ.#ЭтоЗаменяется# КАК ТекДокумент
		|ГДЕ
		|	(НЕ ТекДокумент.ПометкаУдаления)
		|	И ТекДокумент.Дата > &ДатаОкончания
		|	И ТекДокумент.Ссылка В (&МассивУдаляемыхДокументов)";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"#ЭтоЗаменяется#", ИмяДокумента);
	
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаСверткиИБ);
	Запрос.УстановитьПараметр("МассивПропускаемыхДокументов", МассивПропускаемыхДокументов);
	Запрос.УстановитьПараметр("МассивУдаляемыхДокументов", МассивУдаляемыхДокументов);

	ДокВыборка = Запрос.Выполнить().Выбрать();
	
	Пока ДокВыборка.Следующий() Цикл
		ФлагНаличияДвижений = Ложь;
		ТекДокумент = ДокВыборка.Документ;
		ДокОбъект = ТекДокумент.ПолучитьОбъект();
		Для Каждого ТекДвижение Из ДокОбъект.Движения Цикл
			ТекДвижение.Прочитать();
			Если ТекДвижение.Количество() > 0 Тогда
				// По документу есть движения
				ФлагНаличияДвижений = Истина;
				ТекстСообщения = НСтр("ru='По документу %Документ% есть движения по регистрам, пометка на удаление не выполнена'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ДокОбъект.Ссылка);
				СообщениеСвертки(ТекстСообщения, Истина, "");

				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ФлагНаличияДвижений Тогда
			ПометитьДокументНаУдаление(ИмяДокумента,ДокОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПометитьДокументНаУдаление(ИмяДокумента,ДокументОбъект)
	
	Попытка
		Если ИмяДокумента = "ОплатаОтПокупателяПлатежнойКартой"
			Или ИмяДокумента = "ПересчетТоваров"
			Или ((ИмяДокумента = "ПриходныйКассовыйОрдер" Или ИмяДокумента = "РасходныйКассовыйОрдер") И (ДокументОбъект.СменаЗакрыта Или ДокументОбъект.ПробитЧек)) Тогда
		ДокументОбъект.ПометкаУдаления = Истина;
		ДокументОбъект.Проведен = Ложь;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	Иначе
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru='Не удалось пометить на удаление документ %Документ%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ДокументОбъект.ссылка);
		СообщениеСвертки(ТекстСообщения, Истина, ОписаниеОшибки());
		КонецПопытки;

КонецПроцедуры

Процедура ПометитьНаУдаление(ИмяДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ.Ссылка
	|ИЗ
	|	Документ.#ЭтоЗаменяется# КАК Документ
	|ГДЕ
	|	(НЕ Документ.ПометкаУдаления)
	|	И Документ.Дата <= &ДатаОкончания
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"#ЭтоЗаменяется#", ИмяДокумента);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаСверткиИБ);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Истина;
		ДокументОбъект.Проведен = Ложь;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ДокументОбъект.Записать();
		Исключение
				ТекстСообщения = НСтр("ru='Не удалось пометить на удаление документ %Документ%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ВыборкаДетальныеЗаписи.Ссылка);
				СообщениеСвертки(ТекстСообщения, Истина, ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
КонецПроцедуры

// Процедура помечает на удаление задачи
//
Процедура ПометитьНаУдалениеЗадачи(ИмяЗадачи)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекЗадача.Ссылка КАК Задача
	|ИЗ
	|	Задача.#ЭтоЗаменяется# КАК ТекЗадача
	|ГДЕ
	|	(НЕ ТекЗадача.ПометкаУдаления)
	|	И ТекЗадача.Дата <= &ДатаОкончания
	|	И ТекЗадача.БизнесПроцесс.Завершен
	|	И ТекЗадача.Выполнена
	|	#УсловияПоТипуЗадачи#";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"#ЭтоЗаменяется#", ИмяЗадачи);
	УсловияДляЗадачи = "";
	Если ИмяЗадачи = "ЗадачаИсполнителя" Тогда
		УсловияДляЗадачи = "И ТекЗадача.СрокИсполнения <= &ДатаОкончания ";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"#УсловияПоТипуЗадачи#", УсловияДляЗадачи);
	
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаСверткиИБ);
	
	ЗадачаВыборка = Запрос.Выполнить().Выбрать();
	
	Пока ЗадачаВыборка.Следующий() Цикл
		ТекЗадача = ЗадачаВыборка.Задача;
		ЗадачаОбъект = ТекЗадача.ПолучитьОбъект();
		
		Попытка
			ЗадачаОбъект.УстановитьПометкуУдаления(Истина);
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось пометить на удаление задачу %Документ%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ЗадачаВыборка.Задача);
			СообщениеСвертки(ТекстСообщения, Истина, ОписаниеОшибки());

		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает способ удаления движений для типа объекта метаданных
//
Функция ПолучитьПризнакУдаленияДвижений(ТипОбъектаМД, ОбъектМД)
	УдалятьДвижения = Ложь;
	// Определим способ свертки по типу объекта метаданных
	Если ТипОбъектаМД.Ключ = "РегистрСведений" ТОгда
		Если (ОбъектМД.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору) Тогда
			УдалятьДвижения = Истина;
		Иначе
			УдалятьДвижения = Ложь;
		КонецЕсли;
	ИначеЕсли ТипОбъектаМД.Ключ = "РегистрНакопления" ТОгда
		УдалятьДвижения = Истина;
	ИначеЕсли ТипОбъектаМД.Ключ = "Задача" Тогда
		УдалятьДвижения = Истина;
	ИначеЕсли ТипОбъектаМД.Ключ = "Документ" Тогда
		УдалятьДвижения = Истина;
	КонецЕсли;
	
	Возврат УдалятьДвижения;
	
КонецФункции

// Процедура производит свертку по переданному объекту метаданных
//
Процедура УдалитьДвиженияПоОбъектуМД(ТекСтрока, ТипОбъектаМД, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов)
		
	СообщениеСвертки(НСтр("ru='Начало очистки'")+ ": " + ТипОбъектаМД + "." + ТекСтрока.ОбъектМД);
	
	Если (ВРЕГ(ТипОбъектаМД) = "РЕГИСТРНАКОПЛЕНИЯ") Тогда
		ЕстьИтоги = ИспользуютсяИтогиРегистраНакопления(ТекСтрока.ОбъектМД);
		Если ЕстьИтоги Тогда
			РегистрыНакопления[ТекСтрока.ОбъектМД].УстановитьИспользованиеИтогов(Ложь);
		КонецЕсли;
		
		Попытка
			УдалитьДвиженияПоРегиструСРегистратором(ТипОбъектаМД, ТекСтрока.ОбъектМД, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов);
		Исключение
			СообщениеСвертки(НСтр("ru='Ошибка при очистке'")+ ": " + ТипОбъектаМД + "." + ТекСтрока.ОбъектМД, Истина, ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		Если ЕстьИтоги Тогда
			РегистрыНакопления[ТекСтрока.ОбъектМД].УстановитьИспользованиеИтогов(Истина);
		КонецЕсли;
	ИначеЕсли ВРЕГ(ТипОбъектаМД) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		ТекРег = Метаданные.РегистрыСведений.Найти(ТекСтрока.ОбъектМД);
		
		Попытка
			Если (ТекРег.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору) Тогда
				ЕстьПериод = Истина;
				Если ТекРег.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
					ЕстьПериод = Ложь;
				КонецЕсли;
				УдалитьДвиженияПоРегиструСРегистратором(ТипОбъектаМД, ТекСтрока.ОбъектМД, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов, ЕстьПериод);
			КонецЕсли;
		Исключение
			СообщениеСвертки(НСтр("ru='Ошибка при очистке'")+ ": " + ТипОбъектаМД + "." + ТекСтрока.ОбъектМД, Истина, ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	ИначеЕсли ВРЕГ(ТипОбъектаМД) = "ДОКУМЕНТ" Тогда
		ПометитьНаУдалениеДокументы(ТекСтрока.ОбъектМД, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов);
		
	ИначеЕсли ВРЕГ(ТипОбъектаМД) = "ЗАДАЧА" Тогда
		ПометитьНаУдалениеЗадачи(ТекСтрока.ОбъектМД);
	КонецЕсли;
	
	СообщениеСвертки(НСтр("ru='Окончание очистки'")+ ": " + ТипОбъектаМД + "." + ТекСтрока.ОбъектМД);
	
КонецПроцедуры

// Процедура очищает регистры накопления и регистры сведений, подчиненные регистратору.
//
Процедура УдалитьДвиженияПоРегиструСРегистратором(ТипОбъектаМД, ИмяРегистра, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов, Периодический = Истина)
	ДокументСсылка = Неопределено;
	СсылкаНач = Неопределено;
			
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ "+?(КоличествоСтрокВДокументеВводаОстатков>0,Формат(КоличествоСтрокВДокументеВводаОстатков,"ЧГ="),"10000")+"
				|	Регистр.Регистратор КАК Регистратор
				|ИЗ
				|	" + ТипОбъектаМД + "."+ИмяРегистра+" КАК Регистр
				|ГДЕ
				|	"+?(Периодический, "Регистр.Период <= &ДатаКон","Регистр.Регистратор.Дата <= &ДатаКон")+"
				|	И Регистр.Регистратор НЕ В (&МассивПропускаемыхДокументов)";
	Если МассивУдаляемыхДокументов.Количество()>0 Тогда
	   ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ РАЗЛИЧНЫЕ 
				|	Регистр.Регистратор КАК Регистратор
				|ИЗ
				|	" + ТипОбъектаМД + "."+ИмяРегистра+" КАК Регистр
				|ГДЕ
				|	"+?(Периодический, "Регистр.Период > &ДатаКон","Регистр.Регистратор.Дата > &ДатаКон")+"
				| И Регистр.Регистратор В (&МассивУдаляемыхДокументов)
				|";
	КонецЕсли;
	Пока Истина Цикл
				
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
				
		Запрос.УстановитьПараметр("ДатаКон", ДатаСверткиИБ);
		Запрос.УстановитьПараметр("МассивПропускаемыхДокументов", МассивПропускаемыхДокументов);
		Запрос.УстановитьПараметр("МассивУдаляемыхДокументов", МассивУдаляемыхДокументов);

		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		Строка = Результат.Выбрать();
		Пока Строка.Следующий() Цикл
			СсылкаНач = Строка.Регистратор;
			
			Если ВРЕГ(ТипОбъектаМД) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
				НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			ИначеЕсли ВРЕГ(ТипОбъектаМД) = "РЕГИСТРСВЕДЕНИЙ" Тогда
				НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			Иначе
				СообщениеСвертки(НСтр("ru='Не известный тип объекта метаданных'") + " " + ТипОбъектаМД);
				Возврат;
			КонецЕсли;
				
			НаборЗаписей.Отбор.Регистратор.Установить(Строка.Регистратор);
			// Чтобы не выполнялись запросы при записи набора записей
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияДокументовВводаОстатков

Процедура ЗаполнитьПараметрыЗапросаДатаСвертки(Запрос)
	Запрос.УстановитьПараметр("ГраницаОст", ДатаСверткиИБ);
	Запрос.УстановитьПараметр("ДатаОст", ДатаСверткиИБ);
КонецПроцедуры

Процедура ЗаполнитьШапкуДокументаВводаОстатков(Документ, Выборка, ПорядковыйНомерДокумента = 0)
	Документ.Дата = ДатаСверткиИБ-1;
	Документ.Комментарий = Комментарий_СформированСверткойБазы+?(ПорядковыйНомерДокумента>0," ["+ПорядковыйНомерДокумента+"]","");
	Документ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ЗаполнитьЗначенияСвойств(Документ, Выборка);
КонецПроцедуры

#КонецОбласти

#Область ПроведениеДокументовВводаОстатков

// Процедура проводит документы ввода остатков 
// 
Процедура ПровестиДокументыВводаОстатков() Экспорт
	МассивДокументов = ПолучитьДокументыВводаОстатков("проведение");
	Для каждого ДокСсылка Из МассивДокументов Цикл
		ДокОбъект = ДокСсылка.ПолучитьОбъект();
		Попытка
			ДокОбъект.Комментарий = НСтр("ru='Проведен обработкой свертки базы'");
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			СообщениеСвертки(НСтр("ru='Проведен'")+": "+ ДокОбъект.Ссылка);
		Исключение
			СообщениеСвертки(НСтр("ru='Не удалось провести документ'")+" :" + ДокОбъект.Ссылка, Истина, ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область УдалитьДвиженияПоДатуСвертки

// Процедура производит удаление движений по дату свертки
//
// Параметры
//  ДеревоСпособовСвертки	- дерево значений, содержащее объекты для свертки  
//
Процедура УдалитьДвиженияПоДатуСвертки() Экспорт
	
	ТаблицаУдаленияДвиженийПоОбъектамМетаданных = Новый ТаблицаЗначений;
	ТаблицаУдаленияДвиженийПоОбъектамМетаданных.Колонки.Добавить("ТипОбъектаМД");
	ТаблицаУдаленияДвиженийПоОбъектамМетаданных.Колонки.Добавить("ОбъектМД");
	
	ТипыОбъектовМД = Новый Структура();
	ТипыОбъектовМД.Вставить("Документ", Метаданные.Документы);
	ТипыОбъектовМД.Вставить("Задача", Метаданные.Задачи);
	ТипыОбъектовМД.Вставить("РегистрНакопления", Метаданные.РегистрыНакопления);
	ТипыОбъектовМД.Вставить("РегистрСведений", Метаданные.РегистрыСведений);
	
	Для Каждого ТипОбъектаМД Из ТипыОбъектовМД Цикл
		Для Каждого ОбъектМД Из ТипОбъектаМД.Значение Цикл
			ПризнакУдаленияДвижений = ПолучитьПризнакУдаленияДвижений(ТипОбъектаМД, ОбъектМД);
			Если ПризнакУдаленияДвижений = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаОбъектМД = ТаблицаУдаленияДвиженийПоОбъектамМетаданных.Добавить();
			НоваяСтрокаОбъектМД.ТипОбъектаМД = ТипОбъектаМД.Ключ;
			НоваяСтрокаОбъектМД.ОбъектМД = ОбъектМД.Имя;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаУдаленияДвиженийПоОбъектамМетаданных.Сортировать("ТипОбъектаМД, ОбъектМД");
	
	// Получим массив исключаемых документов - некоторые типы документов, 
	// у которых комментарий содержит строку "Не удалять при свертке базы" либо "Сформирован обработкой свертки базы"
	МассивПропускаемыхДокументов = ПолучитьДокументыВводаОстатков("исключение");
	
	// Получим массив удаляемых документов после даты свертки - таких, у которых 
	// комментарий содержит строку "Удалить при свертке базы"
	МассивТипов = Новый Массив;
	МассивТипов.Добавить("ПриходныйОрдерНаТовары");
	МассивТипов.Добавить("РасходныйОрдерНаТовары");

	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	Для Каждого ТипДокумента Из МассивТипов Цикл
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса <> "", "ОБЪЕДИНИТЬ ВСЕ"," ") + " ВЫБРАТЬ
		|Ссылка
		|ИЗ Документ."+ТипДокумента+"
		|ГДЕ Дата > &КонДата И Комментарий ПОДОБНО ""%Удалить при свертке базы%""
		|";
	КонецЦикла;
	Запрос.УстановитьПараметр("КонДата", ДатаСверткиИБ);
	Запрос.Текст = ТекстЗапроса;
	МассивУдаляемыхДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	Для Каждого ТекСтрока Из ТаблицаУдаленияДвиженийПоОбъектамМетаданных Цикл
		Если (ВРЕГ(ТекСтрока.ТипОбъектаМД) = "ДОКУМЕНТ") 
			ИЛИ (ВРЕГ(ТекСтрока.ТипОбъектаМД) = "ЗАДАЧА") Тогда
			// Обработаем на 2ой итерации
			
		Иначе
			// Удаляются записи регистров
			УдалитьДвиженияПоОбъектуМД(ТекСтрока, ТекСтрока.ТипОбъектаМД, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ТаблицаУдаленияДвиженийПоОбъектамМетаданных Цикл
		Если (ВРЕГ(ТекСтрока.ТипОбъектаМД) = "ДОКУМЕНТ") 
			ИЛИ (ВРЕГ(ТекСтрока.ТипОбъектаМД) = "ЗАДАЧА") Тогда
			// Помечаются на удаление документы и задачи
			УдалитьДвиженияПоОбъектуМД(ТекСтрока, ТекСтрока.ТипОбъектаМД, МассивПропускаемыхДокументов, МассивУдаляемыхДокументов);
			
		Иначе
			// Уже обработано на 1й итерации
		КонецЕсли;
		
	КонецЦикла;
	
	// В процессе удаления движений могли остаться регистры накопления с отключенными итогами. Включим их обратно.
	Для Каждого ТекРегистр Из Метаданные.РегистрыНакопления Цикл
		Если НЕ РегистрыНакопления[ТекРегистр.Имя].ПолучитьИспользованиеИтогов()
			И ИспользуютсяИтогиРегистраНакопления(ТекРегистр.Имя) Тогда
			РегистрыНакопления[ТекРегистр.Имя].УстановитьИспользованиеИтогов(Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Комментарий_УдалитьПриСверткеБазы = НСтр("ru='[Удалить при свертке базы]'");

#КонецОбласти


Комментарий_НеУдалятьПриСверткеБазы = НСтр("ru='[Не удалять при свертке базы]'");
Комментарий_СформированСверткойБазы = НСтр("ru='[Сформирован обработкой свертки базы]'");
КоличествоСтрокВДокументеВводаОстатков = 10000; // Ограничение количества строк ТЧ в одном документе

СтруктураИспользованиеИтоговРегистровНакопления = Новый Структура;

#КонецЕсли