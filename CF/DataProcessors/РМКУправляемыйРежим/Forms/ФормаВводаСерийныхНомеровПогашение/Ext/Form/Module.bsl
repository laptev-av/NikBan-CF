&НаСервере
Перем МассивИспользованныхСерийныхНомеровСервер;

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("ШтрихкодУпаковкиЕГАИС")
		И ЗначениеЗаполнено(СтрокаРезультата.ШтрихкодУпаковкиЕГАИС) Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиАкцизныхМарок(СтруктураРезультат, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("Номенклатура") Тогда
		
		ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРезультата.Номенклатура, "ТипНоменклатуры");
		Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
			ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		Иначе
			ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиНоменклатуры(СтруктураРезультат, СтрокаРезультата);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКодуРМК(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт
	
	РеквизитыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПараметров.Номенклатура, "Номинал, ИспользоватьСерийныеНомера");
	
	СтрокаПогашения = Список.Добавить();
	СтрокаПогашения.ПодарочныйСертификат = СтруктураПараметров.Номенклатура;
	СтрокаПогашения.СерийныйНомер = Справочники.СерийныеНомера.ПустаяСсылка();
	СтрокаПогашения.Номинал = РеквизитыСертификата.Номинал;
	СтрокаПогашения.ИспользоватьСерийныеНомера = РеквизитыСертификата.ИспользоватьСерийныеНомера;
	
	ИдентификаторСтроки = СтрокаПогашения.ПолучитьИдентификатор();

	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	
	СтрокиССерийнымНомером = Список.НайтиСтроки(Новый Структура("СерийныйНомер", СтруктураНомера.СерийныйНомер));
	
	Если СтрокиССерийнымНомером.Количество() = 0  Тогда
		
		СтрокаПогашения = Список.Добавить();
		СтрокаПогашения.ПодарочныйСертификат = СтруктураНомера.Номенклатура;
		СтрокаПогашения.СерийныйНомер = СтруктураНомера.СерийныйНомер;
		СтрокаПогашения.Номинал = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПогашения.ПодарочныйСертификат, "Номинал");
		СтрокаПогашения.ИспользоватьСерийныеНомера = Истина;
		
		ИдентификаторСтроки = СтрокаПогашения.ПолучитьИдентификатор();
		
	Иначе
		
		СтрокаОшибки = НСтр("ru = 'Номер подарочного сертификата ""%1"" уже выбран в документе'");
		СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОшибки, СтруктураНомера.СерийныйНомер);
		СтруктураНомера.Вставить("ТекстПредупреждения", СтрокаОшибки);
		ИдентификаторСтроки = СтрокиССерийнымНомером[0].ПолучитьИдентификатор();
		
	КонецЕсли;

	Возврат ИдентификаторСтроки;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораСерийногоНомера(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		
		СтрокаТаблицы = Список.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, РезультатОткрытияФормы);
		ЧастьКода = "";
		Элементы.ЧастьКода.ОбновитьТекстРедактирования();
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокВыбора(Параметры.МассивСерийныхНомеров);
	
	ИспользованныеСерийныеНомера.ЗагрузитьЗначения(Параметры.МассивИспользованныхСерийныхНомеров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	ПоддерживаемыеТипыВО = Новый Массив;
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);  
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, ЭтотОбъект, ПоддерживаемыеТипыВО);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	ПоддерживаемыеТипыВО.Добавить("СчитывательМагнитныхКарт");
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(, ЭтотОбъект, ПоддерживаемыеТипыВО);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	// ПодключаемоеОборудование
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудованияРМК(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ЗаполнитьСписокВыбора(МассивСерийныхНомеров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СерийныеНомера.Владелец КАК ПодарочныйСертификат,
	|	СерийныеНомера.Ссылка КАК СерийныйНомер,
	|	СерийныеНомера.Владелец.Номинал КАК Номинал,
	|	СерийныеНомера.Владелец.ИспользоватьСерийныеНомера КАК ИспользоватьСерийныеНомера
	|ИЗ
	|	Справочник.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	СерийныеНомера.Ссылка В(&МассивСерийныхНомеров)";
	
	Запрос.УстановитьПараметр("МассивСерийныхНомеров", МассивСерийныхНомеров);
	
	Результат = Запрос.Выполнить();
	Список.Загрузить(Результат.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПодарочныйСертификатПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	
	ЗаполнитьДанныеСтрокиСервер(ТекущаяСтрока.ПолучитьИдентификатор());
	
	ТекущийЭлемент = Элементы.Список;
	Элементы.Список.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	Элементы.Список.ТекущийЭлемент = Элементы.СписокСерийныйНомер;
	Элементы.Список.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныйНомерПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	
	Отказ = Ложь;
	Если ЗначениеЗаполнено(ТекущаяСтрока.СерийныйНомер) Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("СерийныйНомер", ТекущаяСтрока.СерийныйНомер);
		
		СтрокиТаблицы = Список.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиТаблицы.Количество() > 1 Тогда
			ТекущаяСтрока.СерийныйНомер = "";
			Отказ = Истина;
			
			ТекстСообщения = НСтр("ru = 'Номер подарочного сертификата уже был указан в документе!'"); 
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстСообщения);
		ИначеЕсли НЕ ИспользованныеСерийныеНомера.НайтиПоЗначению(ТекущаяСтрока.СерийныйНомер) = Неопределено Тогда
			Отказ = Истина;
			
			ТекстСообщения = НСтр("ru = 'Номер подарочного сертификата уже был указан в документе!'"); 
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		Элементы.Список.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастьКодаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ЧастьКода = Текст;
	ОбработатьВведенныйТекстСерийногоНомера(Текст, СтандартнаяОбработка, Ложь)
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастьКодаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьВведенныйТекстСерийногоНомера(Текст, СтандартнаяОбработка, Истина)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура КомандаВниз(Команда)
	
	ПередвинутьПозицию(1)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВверх(Команда)
	
	ПередвинутьПозицию(-1)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбрать(Команда)
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	АдресТаблицы = АдресТаблицыПогашениеПодарочныхСертификатов(ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ЗаголовокСообщения = НСтр("ru = 'Проверка заполнения номеров не пройдена'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокСообщения, СокрЛП(ТекстОшибки));
	Иначе
		Закрыть(АдресТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавить(Команда)
	
	ТекущаяСтрока = Список.Добавить();
	
	ТекущийЭлемент = Элементы.Список;
	Элементы.Список.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	Элементы.Список.ТекущийЭлемент = Элементы.СписокПодарочныйСертификат;
	Элементы.Список.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалить(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Список.Удалить(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Передвинуть позицию в списке.
//
// Параметры:
// Движение = 1 (вниз) или -1 (вверх).
// 
&НаКлиенте
Процедура ПередвинутьПозицию(Движение)
	// Вставить содержимое обработчика.
	Если Список.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено  Тогда
		ИндексСтроки = 0;
	Иначе
		ИндексСтроки = Список.Индекс(ТекущиеДанные);
	КонецЕсли;
	
	ИндексСтроки = ИндексСтроки + Движение;
	
	Если ИндексСтроки > (Список.Количество() - 1) Тогда
		ИндексСтроки = 0;
	ИначеЕсли ИндексСтроки < 0 Тогда
		ИндексСтроки = Список.Количество() - 1;
	КонецЕсли;
	
	ТекущиеДанные = Список[ИндексСтроки];
	Элементы.Список.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВведенныйТекстСерийногоНомера(Текст, СтандартнаяОбработка, ВыводитьСообщения)

	Если ЗначениеЗаполнено(Текст)  Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЭтоРеализация"                    , Ложь);
		СтруктураПараметров.Вставить("Дата"                             , ОбщегоНазначенияКлиент.ДатаСеанса());
		СтруктураПараметров.Вставить("УникальныйИдентификатор"          , УникальныйИдентификатор);
		СтруктураПараметров.Вставить("СерийныеНомера"                   , Список);
		
		СтруктураПараметров.Вставить("МассивИспользованныхСерийныхНомеров", ИспользованныеСерийныеНомера.ВыгрузитьЗначения());
		
		РезультатОбработки = МаркетинговыеАкцииВызовСервера.ОбработатьВведенныйТекстСерийногоНомера(СтруктураПараметров, Текст, СтандартнаяОбработка);
		
		Если ТипЗнч(РезультатОбработки) = Тип("Структура") Тогда
			
			СтрокаТаблицы = Список.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, РезультатОбработки);
			ЧастьКода = "";
			Элементы.ЧастьКода.ОбновитьТекстРедактирования();
			
		ИначеЕсли ТипЗнч(РезультатОбработки) = Тип("Массив") Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("МассивСерийныхНомеров",РезультатОбработки);
			
			ОбработчикОповещения= Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораСерийногоНомера", ЭтотОбъект);
			Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
            
            // &ЗамерПроизводительности
            ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                      Истина, "ОбщаяФорма.ФормаВыбораСерийногоНомера.Открытие");
                      
			ОткрытьФорму("ОбщаяФорма.ФормаВыбораСерийногоНомера", ПараметрыФормы,ЭтотОбъект,,,, ОбработчикОповещения, Режим);
			
		ИначеЕсли ВыводитьСообщения Тогда
			ЗаголовокИнформации = НСтр("ru = 'Ошибка поиска'"); 
			ТекстСообщения = НСтр("ru = 'Нет номеров подарочных сертификатов, удовлетворяющих поиску.'"); 
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
			
		КонецЕсли;
	КонецЕсли;
	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСтрокиСервер(ИдентификаторСтроки)
	
	СтрокаСписка = Список.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаСписка <> Неопределено Тогда
		
		РеквизитыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаСписка.ПодарочныйСертификат, "Номинал, ИспользоватьСерийныеНомера");
		
		СтрокаСписка.СерийныйНомер = Справочники.СерийныеНомера.ПустаяСсылка();
		СтрокаСписка.Номинал = РеквизитыСертификата.Номинал;
		СтрокаСписка.ИспользоватьСерийныеНомера = РеквизитыСертификата.ИспользоватьСерийныеНомера;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция АдресТаблицыПогашениеПодарочныхСертификатов(ЕстьОшибки, ТекстСообщения)
	
	Для Каждого СтрокаСписка Из Список Цикл
		Если СтрокаСписка.ИспользоватьСерийныеНомера
			И НЕ ЗначениеЗаполнено(СтрокаСписка.СерийныйНомер) Тогда
			ТекстСтроки = НСтр("ru = 'Не заполнены номера сертификатов для сертификата %1'");
			ТекстСтроки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСтроки, СтрокаСписка.ПодарочныйСертификат);
			ТекстСообщения = ТекстСообщения + ТекстСтроки + Символы.ПС;
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	АдресТаблицы = ПоместитьВоВременноеХранилище(Список.Выгрузить(), Новый УникальныйИдентификатор);
	
	Возврат АдресТаблицы;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента, "Список");
	
КонецПроцедуры

#КонецОбласти