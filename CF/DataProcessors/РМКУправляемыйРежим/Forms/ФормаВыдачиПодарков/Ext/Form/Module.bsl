
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("СкидкаНаценка") Тогда
		Элементы.ДекорацияСкидка.Заголовок = Параметры.СкидкаНаценка;
	КонецЕсли;
	
	Если Параметры.Свойство("Магазин") Тогда
		Магазин = Параметры.Магазин;
	КонецЕсли;
	
	СтруктураОбъект = Новый Структура;
	Если Параметры.Свойство("ЭтоВозврат") Тогда
		Заголовок = НСтр("ru = 'Возврат подарков'");
		СтруктураОбъект.Вставить("ВидОперации", Перечисления.ВидыОперацийЧекККМ.Возврат);
	Иначе
		Заголовок = НСтр("ru = 'Выдача подарков'");
		СтруктураОбъект.Вставить("ВидОперации", Перечисления.ВидыОперацийЧекККМ.Продажа);
	КонецЕсли;
	
	ПараметрыУказанияСерий = Документы.ЧекККМ.ПараметрыУказанияСерий(СтруктураОбъект);
	ПараметрыУказанияСерий.Вставить("ИмяТЧТовары", "Список");
	
	Если Параметры.Свойство("АдресТаблицы") Тогда
		ЗаполнитьСписокВыбора();
	КонецЕсли;
	
	Если Список.Количество() = 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗафиксироватьВыборСтроки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВниз(Команда)
	
	ПередвинутьПозицию(1)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВверх(Команда)
	
	ПередвинутьПозицию(-1)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбрать(Команда)
	
	Подключаемый_Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		ВводСерийРазрешен = Истина;
		ТекстСообщения = "";
		ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий, ВводСерийРазрешен, ,Истина, ТекстСообщения);
		Если НЕ ВводСерийРазрешен Тогда
			ЗаголовокИнформации = НСтр("ru = 'Ввод серий'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ТекущиеДанныеИдентификатор = Элементы.Список.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ОбработчикУказанияСерий = Новый ОписаниеОповещения("ОбработатьУказаниеСерий", ЭтотОбъект, ПараметрыФормыУказанияСерий);
		РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы + "РМК", ПараметрыФормыУказанияСерий, ЭтотОбъект,,,, ОбработчикУказанияСерий, РежимБлокировки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Передвинуть позицию в списке.
//
// Параметры:
// Движение = 1 (вниз) или -1 (вверх).
// 
&НаКлиенте
Процедура ПередвинутьПозицию(Движение)
	// Вставить содержимое обработчика.
	Если Список.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено  Тогда
		ИндексСтроки = 0;
	Иначе
		ИндексСтроки = Список.Индекс(ТекущиеДанные);
	КонецЕсли;
	
	ИндексСтроки = ИндексСтроки + Движение;
	
	Если ИндексСтроки > (Список.Количество() - 1) Тогда
		ИндексСтроки = 0;
	ИначеЕсли ИндексСтроки < 0 Тогда
		ИндексСтроки = Список.Количество() - 1;
	КонецЕсли;
	
	ТекущиеДанные = Список[ИндексСтроки];
	Элементы.Список.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьВыборСтроки()
	
	СтруктураРезультат = ПроверитьЗаполнениеСерий();
	Если СтруктураРезультат.Отказ Тогда
		ЗаголовокИнформации = НСтр("ru = 'Не указаны серии'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, СтруктураРезультат.ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Список.Удалить(ТекущиеДанные);
		
		Если Список.Количество() = 0  Тогда
			Подключаемый_Закрыть(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбора()
	
	ТаблицаЗапроса = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицы);
	
	Список.Загрузить(ТаблицаЗапроса);
	НомерСтроки = 0;
	Для Каждого СтрокаСписка Из Список Цикл
		НомерСтроки = НомерСтроки + 1;
		СтрокаСписка.НомерСтроки = НомерСтроки;
	КонецЦикла;
	
	Если Параметры.Свойство("АдресТаблицыСерий") Тогда
		ТаблицаСерий = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыСерий);
		Для Каждого СтрокаПодарка Из Список Цикл
			СтруктураПоиска = Новый Структура("КлючСвязи", СтрокаПодарка.КлючСвязи);
			СтрокиСерий = ТаблицаСерий.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаСерии Из СтрокиСерий Цикл
				НоваяСтрока = Серии.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерии);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Список);	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Закрыть(ПроверятьСерии = Истина)
	
	Если ПроверятьСерии Тогда
		СтруктураРезультат = ПроверитьЗаполнениеСерий();
		Если СтруктураРезультат.Отказ Тогда
			ЗаголовокИнформации = НСтр("ru = 'Не указаны серии'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, СтруктураРезультат.ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Действие", НСтр("ru = 'Выданы все подарки'"));
	Если Серии.Количество() > 0 Тогда
		АдресСерий = ПоместитьСерииВХранилище();
		СтруктураОтвета.Вставить("АдресСерийВХранилище", АдресСерий);
	КонецЕсли;
	Закрыть(СтруктураОтвета);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьСерииВХранилище()
	
	АдресСерий = ПоместитьВоВременноеХранилище(Серии.Выгрузить(), Новый УникальныйИдентификатор);
	
	Возврат АдресСерий;
	
КонецФункции

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(ЭтотОбъект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьУказаниеСерий(ЗначениеВозврата, ПараметрыФормыУказанияСерий) Экспорт
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Список);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Ложь);
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(ЭтотОбъект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеСерий()
	
	Отказ = Ложь;
	ТекстСообщения = "";
	ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, ПараметрыУказанияСерий, Отказ, , Ложь, ТекстСообщения);
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Отказ", Отказ);
	СтруктураРезультат.Вставить("ТекстСообщения", ТекстСообщения);
	
	Возврат СтруктураРезультат;
	
КонецФункции

#КонецОбласти