#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		
	Иначе
		
		СтруктураРезультат.Вставить("АктивизироватьСтроку", СтрокаРезультата.Номенклатура);
		
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКодуРМК(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьЭлементОтбора(КомпоновщикНастроек, ИмяПоля) Экспорт

	НайденЭлементОтбора = Ложь;
	КоллекцияЭлементовОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	ИмяПоляКраткий = СтрЗаменить(ИмяПоля, "_ПолноеСоответствие", "");
	Если Найти(ИмяПоля, "_ПолноеСоответствие") > 0 Тогда
		ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных.Равно
	Иначе
		ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных.Содержит;
	КонецЕсли;
	
	ДоступноеПолеКомпоновки = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы.Найти(ИмяПоляКраткий);
	
	Если ДоступноеПолеКомпоновки = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		ПолеКомпоновки = ДоступноеПолеКомпоновки.Поле;
	КонецЕсли;
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементовОтбора Цикл
		Если ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки 
			И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновки Тогда
			Возврат ЭлементОтбора;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьЭлементОтбора()

&НаКлиенте
Функция ПолучитьЭлементОтбораКлиент(КомпоновщикНастроек, ИмяПоля) Экспорт

	НайденЭлементОтбора = Ложь;
	КоллекцияЭлементовОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	ИмяПоляКраткий = СтрЗаменить(ИмяПоля, "_ПолноеСоответствие", "");
	Если Найти(ИмяПоля, "_ПолноеСоответствие") > 0 Тогда
		ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных.Равно
	Иначе
		ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных.Содержит;
	КонецЕсли;
	
	ДоступноеПолеКомпоновки = КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы.Найти(ИмяПоляКраткий);
	
	Если ДоступноеПолеКомпоновки = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		ПолеКомпоновки = ДоступноеПолеКомпоновки.Поле;
	КонецЕсли;
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементовОтбора Цикл
		Если ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки 
			И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновки Тогда
			Возврат ЭлементОтбора;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьЭлементОтбора()

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ЗаголовокИнформации = НСтр("ru = 'При подключении оборудования произошла ошибка:'");
		ТекстИнформации     = РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Магазин") Тогда
		Магазин = Параметры.Магазин;
	КонецЕсли;
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Магазин);
	ЦеныВАссортименте = ИспользоватьАссортимент И ПолучитьФункциональнуюОпцию("УстанавливатьВидыЦенВАссортименте");
	ИспользоватьРезервированиеПоЗаказамПокупателей = ПолучитьФункциональнуюОпцию("ИспользоватьРезервированиеПоЗаказамПокупателей");
	ИспользоватьПодключаемоеОборудование = ЗначениеНастроекВызовСервера.ИспользоватьПодключаемоеОборудование();
	
	Если ИспользоватьАссортимент Тогда
		СКД = ПолучитьОбщийМакет("СхемаКомпоновкиПодбораРМКАссортимент");
	Иначе
		СКД = ПолучитьОбщийМакет("СхемаКомпоновкиПодбораРМК");
	КонецЕсли;
	
	АдресСКД = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
	
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	НастройкиПоУмолчанию = СКД.НастройкиПоУмолчанию;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		ИскомоеПоле = Новый ПолеКомпоновкиДанных("ХарактеристикаНаименование");
		Для каждого ЭлементОтбора Из НастройкиПоУмолчанию.Отбор.Элементы Цикл
		
			Если ЭлементОтбора.ЛевоеЗначение = ИскомоеПоле Тогда
				ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				НастройкиПоУмолчанию.Отбор.Элементы.Удалить(ЭлементОтбора);
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	
	ДанныеПоЦенообразованиюМагазина = ДанныеПоЦенообразованиюМагазина();
	
	УстановитьПараметрКомпоновкиДанных(КомпоновщикНастроек.Настройки.ПараметрыДанных, 
									   "Магазин", Магазин);
	
	УстановитьПараметрКомпоновкиДанных(КомпоновщикНастроек.Настройки.ПараметрыДанных, 
									   "ИспользоватьПрименениеЦен", ДанныеПоЦенообразованиюМагазина.ИспользоватьПрименениеЦен);
	
	УстановитьПараметрКомпоновкиДанных(КомпоновщикНастроек.Настройки.ПараметрыДанных, 
									   "ВидМинимальныхЦенПродажи", ДанныеПоЦенообразованиюМагазина.ВидМинимальныхЦенПродажи);
	
	Если ИспользоватьАссортимент Тогда
		
		УстановитьПараметрКомпоновкиДанных(КомпоновщикНастроек.Настройки.ПараметрыДанных, 
										   "ОбъектПланирования", ДанныеПоЦенообразованиюМагазина.ФорматМагазина)
	Иначе
		УстановитьПараметрКомпоновкиДанных(КомпоновщикНастроек.Настройки.ПараметрыДанных, 
										   "ПравилоЦенообразования", ДанныеПоЦенообразованиюМагазина.ПравилоЦенообразования)
	КонецЕсли;
	
	ЗаполнитьСтруктуруВидовПоиска();
	
	Если Параметры.Свойство("ВидПоиска") Тогда
		ВидПоиска = Параметры.ВидПоиска;
		ВидПоискаПриОткрытии = ВидПоиска;
	Иначе
		ВидПоиска = "Наименование"
	КонецЕсли;
	
	Если Параметры.Свойство("ЗакрыватьПодборПриВыбореТовара") Тогда
		ЭтотОбъект.ЗакрыватьПриВыборе = Параметры.ЗакрыватьПодборПриВыбореТовара;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоказРасширения = Найти(ИмяТекущейСтраницы, "Расширение") > 0;
	
	ИмяТекущейСтраницы = ?(ПоказРасширения, "СтраницаТоварыРасширение", "СтраницаТовары");
	
	Если ПустаяСтрока(ВидПоискаПриОткрытии) Тогда
		Если НЕ ПоказРасширения Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.Товары;
		Иначе
			ЭтотОбъект.ТекущийЭлемент = Элементы.ТоварыРасширение;
		КонецЕсли;
	Иначе
		ЭтотОбъект.ТекущийЭлемент = Элементы.ПолеПоиска;
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[ИмяТекущейСтраницы];
	
	УстановитьНадписьПутиВДереве();
	УстановитьВидимостьКолонокТаблицыОстаткиЦены();
	УстановитьНадписьИнформации();
	
	// ПодключаемоеОборудование
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);  	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ОповещенияПриПодключении, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудованияРМК(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидПоискаПриИзменении(Элемент)
	
	ЭтотОбъект.ТекущийЭлемент = Элементы.ПолеПоиска;
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	ПолеПоиска = "";
	ОчиститьОтборыКлиент(Ложь);
	ПерейтиСоСтраницыХарактеристик();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПолеПоиска = Текст;
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаПриИзменении(Элемент)
	
	ВыполнитьПоиск()
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПутьВДеревеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НадписьПутьВДеревеНажатиеКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИнформацияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НадписьИнформацияНажатиеКлиент();
	
	НоменклатураПоследнегоРасчетаОстатков   = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	ХарактеристикаПоследнегоРасчетаОстатков = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьКоличествоТоварыРасширениеПриИзменении(Элемент)
	
	УстановитьВидимостьКолонокТаблицыОстаткиЦены()
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЦеныТоварыРасширениеПриИзменении(Элемент)
	
	УстановитьВидимостьКолонокТаблицыОстаткиЦены()
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьКоличествоТоварыГруппыРасширениеПриИзменении(Элемент)
	
	УстановитьВидимостьКолонокТаблицыОстаткиЦены()
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЦеныТоварыГруппыРасширениеПриИзменении(Элемент)
	
	УстановитьВидимостьКолонокТаблицыОстаткиЦены()
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьКоличествоХарактеристикиРасширениеПриИзменении(Элемент)
	
	УстановитьВидимостьКолонокТаблицыОстаткиЦены()
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЦеныХарактеристикиРасширениеПриИзменении(Элемент)
	
	УстановитьВидимостьКолонокТаблицыОстаткиЦены()
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	УстановитьНадписьПутиВДереве();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОбработатьВыборНоменклатуры(СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыГруппыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОбработатьВыборНоменклатуры(СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыГруппыПриАктивизацииСтроки(Элемент)
	
	УстановитьНадписьПутиВДереве();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРасширениеПриАктивизацииСтроки(Элемент)
	
	УстановитьНадписьПутиВДереве();
	
	Если ИмяТекущейСтраницы = "СтраницаТоварыРасширение" Тогда
		РассчитатьОстаткиИЦены();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРасширениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОбработатьВыборНоменклатуры(СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыГруппыРасширениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОбработатьВыборНоменклатуры(СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыГруппыРасширениеПриАктивизацииСтроки(Элемент)
	
	Если ИмяТекущейСтраницы = "СтраницаТоварыГруппыРасширение" Тогда
		РассчитатьОстаткиИЦены();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварыДерево

&НаКлиенте
Процедура ТоварыДеревоПриАктивизацииСтроки(Элемент)
	РодительАктивизированнойНоменклатуры = Элементы["ТоварыДерево" + ?(ПоказРасширения, "Расширение", "")].ТекущаяСтрока;
	УстановитьОтборПоГруппеВТоварах();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДеревоРасширениеПриАктивизацииСтроки(Элемент)
	РодительАктивизированнойНоменклатуры = Элементы["ТоварыДерево" + ?(ПоказРасширения, "Расширение", "")].ТекущаяСтрока;
	УстановитьОтборПоГруппеВТоварах();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыХарактеристики

&НаКлиенте
Процедура ХарактеристикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьВыборХарактеристики();
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиРасширениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьВыборХарактеристики();
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиРасширениеПриАктивизацииСтроки(Элемент)
	Если ИмяТекущейСтраницы = "СтраницаХарактеристикиРасширение" Тогда
		РассчитатьОстаткиИЦены();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтработатьРасширенныйПоиск(Команда)
	
	Если Элементы.ГруппаСтраницыОбщие.ТекущаяСтраница = Элементы.СтраницаПодбор Тогда
		Элементы.ГруппаСтраницыОбщие.ТекущаяСтраница = Элементы.СтраницаРасширенногоПоиска;
		Элементы.ОтработатьРасширенныйПоиск.Заголовок = НСтр("ru = 'Выполнить расширенный поиск (F4)'");
		ЭтотОбъект.ТекущийЭлемент = Элементы.КомпоновщикНастроекНастройкиОтбор;
	Иначе
		
		ПолеПоиска = "";
		ОчиститьОтборыКлиент(Ложь);
		РасширенныйПоискВернулПустуюВыборку = Ложь;
		ВыполнитьРасширенныйПоиск();
		ПерейтиСоСтраницыХарактеристик();
		
		Если РасширенныйПоискВернулПустуюВыборку Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Расширенному поиску не удовлетворяет ни один товар'"), "");
		Иначе
			Если СписокНоменклатуры.Количество() > 0 Тогда
				
				ИмяЭлемента = СтрЗаменить(ИмяТекущейСтраницы, "Страница", "");
				Элементы[ИмяЭлемента].ТекущаяСтрока = СписокНоменклатуры[0].Значение;
				
				Если СписокНоменклатуры.Количество() = 1 И СписокХарактеристик.Количество() > 0 Тогда
					СтандартнаяОбработка = Истина;
					ОбработатьВыборНоменклатуры(СтандартнаяОбработка);
				Иначе
					ИмяУстанавливаемогоТекущегоЭлемента = ИмяЭлемента;
					ПодключитьОбработчикОжидания("УстановитьТекущийЭлемент", 0.1, Истина);
				КонецЕсли;
				Элементы.ПолеПоиска.ПодсказкаВвода = НСтр("ru = 'Заданы параметры расширенного поиска'") ;
			Иначе
				Элементы.ПолеПоиска.ПодсказкаВвода = "";
			КонецЕсли;
			Элементы.ГруппаСтраницыОбщие.ТекущаяСтраница = Элементы.СтраницаПодбор;
			Элементы.ОтработатьРасширенныйПоиск.Заголовок = НСтр("ru = 'Открыть расширенный поиск (F4)'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискНоменклатуры(Команда)
	
	ПереходНаПолеПоиска(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискОчистить(Команда)
	
	ПолеПоиска = "";
	ОчиститьОтборыКлиент(Истина);
	ПерейтиСоСтраницыХарактеристик();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьДерево(Команда)
	
	НадписьПутьВДеревеНажатиеКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьИнформацию(Команда)
	
	НадписьИнформацияНажатиеКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьКоличество(Команда)
	
	ОтображатьКоличество = НЕ ОтображатьКоличество;
	УстановитьВидимостьКолонокТаблицыОстаткиЦены()
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьЦены(Команда)
	
	ОтображатьЦены = НЕ ОтображатьЦены;
	УстановитьВидимостьКолонокТаблицыОстаткиЦены()
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточку(Команда)
	
	Если ИмяТекущейСтраницы = "СтраницаТовары" 
		ИЛИ ИмяТекущейСтраницы = "СтраницаТоварыРасширение" 
		ИЛИ ИмяТекущейСтраницы = "СтраницаТоварыГруппы"
		ИЛИ ИмяТекущейСтраницы = "СтраницаТоварыГруппыРасширение" Тогда
		ИмяДинамическогоСписка = СтрЗаменить(ИмяТекущейСтраницы, "Страница", "");
		Номенклатура = Элементы[ИмяДинамическогоСписка].ТекущаяСтрока;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("Ключ", Номенклатура);
			ПараметрыОткрытия.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьНадписьПутиВДереве(Номенклатура = Неопределено)
	
	Если ИмяТекущейСтраницы = "СтраницаТовары" 
		ИЛИ ИмяТекущейСтраницы = "СтраницаТоварыРасширение" Тогда
		
		ИмяЭлемента = СтрЗаменить(ИмяТекущейСтраницы, "Страница", "");
		
		ТекущаяСтрока = Элементы[ИмяЭлемента].ТекущаяСтрока;
		
		Если НЕ ТекущаяСтрока = Неопределено
			И ЗначениеЗаполнено(ТекущаяСтрока.Родитель) Тогда
			РодительАктивизированнойНоменклатуры = ТекущаяСтрока.Родитель;
			НадписьПутьВДереве = РодительАктивизированнойНоменклатуры.ПолноеНаименование();
		Иначе
			НадписьПутьВДереве = НСтр("ru = 'Показать дерево номенклатуры'")
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаТоварыГруппы" 
		ИЛИ ИмяТекущейСтраницы = "СтраницаТоварыГруппыРасширение" Тогда
		НадписьПутьВДереве = НСтр("ru = 'Скрыть дерево номенклатуры'")
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаХарактеристики"
		ИЛИ ИмяТекущейСтраницы = "СтраницаХарактеристикиРасширение" Тогда
		Если НЕ Номенклатура = Неопределено
			И ЗначениеЗаполнено(Номенклатура.Родитель) Тогда
			РодительАктивизированнойНоменклатуры = Номенклатура.Родитель;
			НадписьПутьВДереве = Номенклатура.ПолноеНаименование();
		Иначе
			НадписьПутьВДереве = НСтр("ru = 'Показать дерево номенклатуры'")
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоГруппеВТоварах()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Товары, "Родитель", РодительАктивизированнойНоменклатуры,,,ЗначениеЗаполнено(РодительАктивизированнойНоменклатуры));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборНоменклатуры(СтандартнаяОбработка)
	
	ИмяДинамическогоСписка = СтрЗаменить(ИмяТекущейСтраницы, "Страница", "");
	Номенклатура = Элементы[ИмяДинамическогоСписка].ТекущаяСтрока;
	СтруктураИспользованияХарактеристикПоНоменклатуре = ПодборТоваровВызовСервера.СтруктураИспользованияХарактеристикПоНоменклатуре(Номенклатура);
	СтандартнаяОбработка = Ложь;
	Если СтруктураИспользованияХарактеристикПоНоменклатуре.ИспользованиеХарактеристик Тогда
		ИмяПредыдущейСтраницы = ИмяТекущейСтраницы;
		ИмяТекущейСтраницы = "СтраницаХарактеристики" + ?(ПоказРасширения, "Расширение", "");
		ЗаполнитьТаблицуХарактеристик(СтруктураИспользованияХарактеристикПоНоменклатуре.Владелец);
		УстановитьНадписьПутиВДереве(СтруктураИспользованияХарактеристикПоНоменклатуре.Номенклатура);
		ИмяУстанавливаемогоТекущегоЭлемента = "Характеристики" + ?(ПоказРасширения, "Расширение", "");
		ПодключитьОбработчикОжидания("УстановитьТекущийЭлемент", 0.1, Истина);
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[ИмяТекущейСтраницы];
	Иначе
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("ИмяДействия"   , НСтр("ru = 'Подбор номенклатуры'"));
		СтруктураОтвета.Вставить("Номенклатура"  , Номенклатура);
		СтруктураОтвета.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		СтруктураОтвета.Вставить("Упаковка"      , ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка"));
		
		ОповеститьОВыборе(СтруктураОтвета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуХарактеристик(Владелец)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ДвеТочки КАК Наименование,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Ссылка,
	|	Неопределено КАК Владелец,
	|	1 КАК ПолеУпорядочивания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Наименование,
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ХарактеристикиНоменклатуры.Владелец,
	|	2
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &Владелец" + ?(СписокХарактеристик.Количество() = 0, "", " И ХарактеристикиНоменклатуры.Ссылка В (&Список)") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеУпорядочивания,
	|	Наименование";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Список"  , СписокХарактеристик);
	Запрос.УстановитьПараметр("ДвеТочки", НСтр("ru = '..'"));
	
	Характеристики.Загрузить(Запрос.Выполнить().Выгрузить());
	ИмяДинамическогоСписка = СтрЗаменить(ИмяТекущейСтраницы, "Страница", "");
	Элементы[ИмяДинамическогоСписка].ТекущаяСтрока = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборХарактеристики()
	
	ИмяДинамическогоСписка = СтрЗаменить(ИмяТекущейСтраницы, "Страница", "");
	Характеристика = Элементы[ИмяДинамическогоСписка].ТекущиеДанные.Ссылка;
	Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
		ИмяТекущейСтраницы = ИмяПредыдущейСтраницы;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[ИмяТекущейСтраницы];
	Иначе
		ИмяДинамическогоСпискаНоменклатуры = СтрЗаменить(ИмяПредыдущейСтраницы, "Страница", "");
		Номенклатура = Элементы[ИмяДинамическогоСпискаНоменклатуры].ТекущаяСтрока;
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("ИмяДействия"   , НСтр("ru = 'Подбор номенклатуры'"));
		СтруктураОтвета.Вставить("Номенклатура"  , Номенклатура);
		СтруктураОтвета.Вставить("Характеристика", Характеристика);
		СтруктураОтвета.Вставить("Упаковка"      , ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка"));
		ОповеститьОВыборе(СтруктураОтвета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьИнформации()
	
	Если ПоказРасширения Тогда
		НадписьИнформация = НСтр("ru = 'Скрыть информацию'");
	Иначе
		НадписьИнформация = НСтр("ru = 'Показать информацию'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКолонокТаблицыОстаткиЦены()
	
	Если НЕ Элементы.ТаблицаОстаткиЦеныТоварыРасширениеКоличество.Видимость = ОтображатьКоличество Тогда
		Элементы.ТаблицаОстаткиЦеныТоварыРасширениеКоличество.Видимость       = ОтображатьКоличество;
		Элементы.ТаблицаОстаткиЦеныТоварыРасширениеРезерв.Видимость           = ОтображатьКоличество 
																			  И ИспользоватьРезервированиеПоЗаказамПокупателей;
		Элементы.ТаблицаОстаткиЦеныТоварыРасширениеСвободныйОстаток.Видимость = ОтображатьКоличество 
																			  И ИспользоватьРезервированиеПоЗаказамПокупателей;
		
	КонецЕсли;
	
	Если НЕ Элементы.ТаблицаОстаткиЦеныТоварыГруппыРасширениеКоличество.Видимость = ОтображатьКоличество Тогда
		Элементы.ТаблицаОстаткиЦеныТоварыГруппыРасширениеКоличество.Видимость       = ОтображатьКоличество;
		Элементы.ТаблицаОстаткиЦеныТоварыГруппыРасширениеРезерв.Видимость           = ОтображатьКоличество
																					И ИспользоватьРезервированиеПоЗаказамПокупателей;
		Элементы.ТаблицаОстаткиЦеныТоварыГруппыРасширениеСвободныйОстаток.Видимость = ОтображатьКоличество
																					И ИспользоватьРезервированиеПоЗаказамПокупателей;
		
	КонецЕсли;
	
	Если НЕ Элементы.ТаблицаОстаткиЦеныХарактеристикиРасширениеКоличество.Видимость = ОтображатьКоличество Тогда
		Элементы.ТаблицаОстаткиЦеныХарактеристикиРасширениеКоличество.Видимость       = ОтображатьКоличество;
		Элементы.ТаблицаОстаткиЦеныХарактеристикиРасширениеРезерв.Видимость           = ОтображатьКоличество
																					  И ИспользоватьРезервированиеПоЗаказамПокупателей;
		Элементы.ТаблицаОстаткиЦеныХарактеристикиРасширениеСвободныйОстаток.Видимость = ОтображатьКоличество
																					  И ИспользоватьРезервированиеПоЗаказамПокупателей;
	КонецЕсли;
	
	Если НЕ Элементы.ТаблицаОстаткиЦеныТоварыРасширениеЦена.Видимость = ОтображатьЦены Тогда
		Элементы.ТаблицаОстаткиЦеныТоварыРасширениеЦена.Видимость = ОтображатьЦены
	КонецЕсли;
	
	Если НЕ Элементы.ТаблицаОстаткиЦеныТоварыГруппыРасширениеЦена.Видимость = ОтображатьЦены Тогда
		Элементы.ТаблицаОстаткиЦеныТоварыГруппыРасширениеЦена.Видимость = ОтображатьЦены
	КонецЕсли;
	
	Если НЕ Элементы.ТаблицаОстаткиЦеныХарактеристикиРасширениеЦена.Видимость = ОтображатьЦены Тогда
		Элементы.ТаблицаОстаткиЦеныХарактеристикиРасширениеЦена.Видимость = ОтображатьЦены
	КонецЕсли;
	
	НоменклатураПоследнегоРасчетаОстатков   = Справочники.Номенклатура.ПустаяСсылка();
	ХарактеристикаПоследнегоРасчетаОстатков = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРасширенныйПоискПоСКД()
	
	РезультатЗапроса = Новый ТаблицаЗначений;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	СКД = ПолучитьИзВременногоХранилища(АдресСКД);
	НастройкиДляМакета = КомпоновщикНастроек.ПолучитьНастройки();
	
	УстановитьПараметрКомпоновкиДанных(НастройкиДляМакета.ПараметрыДанных, 
									   "Период", ТекущаяДатаСеанса());
	
	МакетСКД = КомпоновщикМакета.Выполнить(СКД, НастройкиДляМакета,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Процессор = Новый ПроцессорКомпоновкиДанных;
	Процессор.Инициализировать(МакетСКД);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультатЗапроса);
	ПроцессорВывода.Вывести(Процессор);
	
	ТаблицаНоменклатуры = РезультатЗапроса.Скопировать();
	ТаблицаНоменклатуры.Свернуть("Номенклатура");
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	СтрокиТаблицы = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	Для каждого ЭлементТаблицы Из СтрокиТаблицы Цикл
		ТаблицаНоменклатуры.Удалить(ЭлементТаблицы);
	КонецЦикла;
	
	СтруктураПоиска.Вставить("Номенклатура", Неопределено);
	СтрокиТаблицы = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	Для каждого ЭлементТаблицы Из СтрокиТаблицы Цикл
		ТаблицаНоменклатуры.Удалить(ЭлементТаблицы);
	КонецЦикла;
	
	СписокНоменклатуры.ЗагрузитьЗначения(ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура"));
	
	Если НЕ РезультатЗапроса.Колонки.Найти("Характеристика")= Неопределено Тогда
		ТаблицаХарактеристик = РезультатЗапроса.Скопировать();
		ТаблицаХарактеристик.Свернуть("Характеристика");
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		СтрокиТаблицы = ТаблицаХарактеристик.НайтиСтроки(СтруктураПоиска);
		Для каждого ЭлементТаблицы Из СтрокиТаблицы Цикл
			ТаблицаХарактеристик.Удалить(ЭлементТаблицы);
		КонецЦикла;
		
		СтруктураПоиска.Вставить("Характеристика", Неопределено);
		СтрокиТаблицы = ТаблицаХарактеристик.НайтиСтроки(СтруктураПоиска);
		Для каждого ЭлементТаблицы Из СтрокиТаблицы Цикл
			ТаблицаХарактеристик.Удалить(ЭлементТаблицы);
		КонецЦикла;
		
		СписокХарактеристик.ЗагрузитьЗначения(ТаблицаХарактеристик.ВыгрузитьКолонку("Характеристика"));
	КонецЕсли;
	
	ПрименитьРезультатыРасширенногоПоиска();
	
	РасширенныйПоискВернулПустуюВыборку = СписокНоменклатуры.Количество() = 0;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьРезультатыРасширенногоПоиска()
	
	МаркетинговыеАкцииСервер.УстановитьОтборВКомпоновщикеПоСписку(Товары.КомпоновщикНастроек, "Ссылка", СписокНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРасширенныйПоиск()
	
	ЕстьОтбор = Ложь;
	
	Для каждого ЭлементОтбора Из КомпоновщикНастроек.ПолучитьНастройки().Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование Тогда
			ЕстьОтбор = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОтбор Тогда
		ВыполнитьРасширенныйПоискПоСКД();
	Иначе
		СписокНоменклатуры.Очистить();
		СписокХарактеристик.Очистить();
		ПрименитьРезультатыРасширенногоПоиска();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруВидовПоиска()
	
	СтруктураВидовПоискаИЭлементовОтбора = Новый Структура;
	СписокВыбора = Элементы.ВидПоиска.СписокВыбора;
	Для каждого ЭлементСписка Из СписокВыбора Цикл
		ЭлементОтбора = ПолучитьЭлементОтбора(Товары.КомпоновщикНастроек, ЭлементСписка.Значение);
		
		Если НЕ ЭлементОтбора = Неопределено Тогда
			ИдентификаторОбъекта = Товары.КомпоновщикНастроек.Настройки.Отбор.ПолучитьИдентификаторПоОбъекту(ЭлементОтбора);
			СтруктураВидовПоискаИЭлементовОтбора.Вставить(ЭлементСписка.Значение, ИдентификаторОбъекта);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискПоШтрихкоду()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Штрихкоды.Владелец КАК Номенклатура,
	|	Штрихкоды.Характеристика КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ РезультатПоиска
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод ПОДОБНО &ПолеПоиска
	|	И Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РезультатПоиска.Номенклатура
	|ИЗ
	|	РезультатПоиска КАК РезультатПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РезультатПоиска.ХарактеристикаНоменклатуры
	|ИЗ
	|	РезультатПоиска КАК РезультатПоиска";
	
	Если ПоискПоПолномуСоответствию Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Подобно", "=");
		Запрос.УстановитьПараметр("ПолеПоиска",  ПолеПоиска);
	Иначе
		Запрос.УстановитьПараметр("ПолеПоиска", "%" + ПолеПоиска + "%");
	КонецЕсли;
	
	Результат = Запрос.ВыполнитьПакет();
	СписокНоменклатуры.ЗагрузитьЗначения(Результат[1].Выгрузить().ВыгрузитьКолонку(0));
	МассивХарактеристик = Результат[2].Выгрузить().ВыгрузитьКолонку(0);
	ПустойЭлемент = МассивХарактеристик.Найти(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Если НЕ ПустойЭлемент = Неопределено Тогда
		МассивХарактеристик.Удалить(ПустойЭлемент);
	КонецЕсли;
	
	СписокХарактеристик.ЗагрузитьЗначения(МассивХарактеристик);
	
	МаркетинговыеАкцииСервер.УстановитьОтборВКомпоновщикеПоСписку(Товары.КомпоновщикНастроек, "Ссылка", СписокНоменклатуры, Ложь);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискПоSKU(ПолеПоискаЧисло)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КодыТоваровSKU.SKU,
	|	КодыТоваровSKU.Номенклатура,
	|	КодыТоваровSKU.Характеристика,
	|	КодыТоваровSKU.Упаковка
	|ИЗ
	|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
	|ГДЕ
	|	КодыТоваровSKU.SKU = &ПолеПоискаЧисло";
	
	Запрос.УстановитьПараметр("ПолеПоискаЧисло", ПолеПоискаЧисло);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СписокНоменклатуры.Добавить(Выборка.Номенклатура);
		Если НЕ Выборка.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
			СписокХарактеристик.Добавить(Выборка.Характеристика);
		КонецЕсли;
	КонецЕсли;
	
	МаркетинговыеАкцииСервер.УстановитьОтборВКомпоновщикеПоСписку(Товары.КомпоновщикНастроек, "Ссылка", СписокНоменклатуры, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискВезде()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Наименование,
	|	Номенклатура.Артикул,
	|	Номенклатура.Код,
	|	Номенклатура.НаименованиеПолное,
	|	Номенклатура.ВидНоменклатуры
	|ПОМЕСТИТЬ ТаблицаНоменклатурыПоиска
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	(Номенклатура.Наименование ПОДОБНО &ПолеПоиска
	|			ИЛИ Номенклатура.Артикул ПОДОБНО &ПолеПоиска
	|			ИЛИ Номенклатура.Код ПОДОБНО &ПолеПоиска
	|			ИЛИ Номенклатура.НаименованиеПолное ПОДОБНО &ПолеПоиска)
	|	И НЕ Номенклатура.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Штрихкоды.Владелец КАК Номенклатура,
	|	Штрихкоды.Характеристика КАК ХарактеристикаНоменклатуры
	|ПОМЕСТИТЬ ТаблицаПоШтрихКодам
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод ПОДОБНО &ПолеПоиска
	|	И Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатурыПоиска.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаНоменклатур
	|ИЗ
	|	ТаблицаНоменклатурыПоиска КАК ТаблицаНоменклатурыПоиска
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПоШтрихКодам.Номенклатура
	|ИЗ
	|	ТаблицаПоШтрихКодам КАК ТаблицаПоШтрихКодам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатурыПоиска.ВидНоменклатуры
	|ПОМЕСТИТЬ ТаблицаВидовНоменклатур
	|ИЗ
	|	ТаблицаНоменклатурыПоиска КАК ТаблицаНоменклатурыПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаХарактеристик
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатурыПоиска КАК ТаблицаНоменклатурыПоиска
	|		ПО ХарактеристикиНоменклатуры.Владелец = ТаблицаНоменклатурыПоиска.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВидовНоменклатур КАК ТаблицаВидовНоменклатур
	|		ПО ХарактеристикиНоменклатуры.Владелец = ТаблицаВидовНоменклатур.ВидНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПоШтрихКодам.ХарактеристикаНоменклатуры
	|ИЗ
	|	ТаблицаПоШтрихКодам КАК ТаблицаПоШтрихКодам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатур.Номенклатура
	|ИЗ
	|	ТаблицаНоменклатур КАК ТаблицаНоменклатур
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаХарактеристик.Характеристика
	|ИЗ
	|	ТаблицаХарактеристик КАК ТаблицаХарактеристик";
	
	Запрос.УстановитьПараметр("ПолеПоиска", "%" + ПолеПоиска + "%");
	
	Результат = Запрос.ВыполнитьПакет();
	СписокНоменклатуры.ЗагрузитьЗначения(Результат[5].Выгрузить().ВыгрузитьКолонку(0));
	МассивХарактеристик = Результат[6].Выгрузить().ВыгрузитьКолонку(0);
	ПустойЭлемент = МассивХарактеристик.Найти(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Если НЕ ПустойЭлемент = Неопределено Тогда
		МассивХарактеристик.Удалить(ПустойЭлемент);
	КонецЕсли;
	
	СписокХарактеристик.ЗагрузитьЗначения(МассивХарактеристик);
	
	Попытка
		ПолеПоискаЧисло = Число(ПолеПоиска);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КодыТоваровSKU.SKU,
		|	КодыТоваровSKU.Номенклатура,
		|	КодыТоваровSKU.Характеристика,
		|	КодыТоваровSKU.Упаковка
		|ИЗ
		|	РегистрСведений.КодыТоваровSKU КАК КодыТоваровSKU
		|ГДЕ
		|	КодыТоваровSKU.SKU = &ПолеПоискаЧисло";
		
		Запрос.УстановитьПараметр("ПолеПоискаЧисло", ПолеПоискаЧисло);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СписокНоменклатуры.Добавить(Выборка.Номенклатура);
			Если НЕ Выборка.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
				СписокХарактеристик.Добавить(Выборка.Характеристика);
			КонецЕсли;
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
	МаркетинговыеАкцииСервер.УстановитьОтборВКомпоновщикеПоСписку(Товары.КомпоновщикНастроек, "Ссылка", СписокНоменклатуры, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоиск()
	
	ОчиститьОтборыКлиент(Истина);
	
	ПоискССозданиемСписков = Истина;
	ВидПоискаКраткий = СтрЗаменить(ВидПоиска, "_ПолноеСоответствие", "");
	
	ПоискПоПолномуСоответствию = Найти(ВидПоиска, "_ПолноеСоответствие") > 0;
	
	Если НЕ ПустаяСтрока(ПолеПоиска) Тогда
		Если ВидПоискаКраткий = "Везде" Тогда
			ВыполнитьПоискВезде();
		ИначеЕсли ВидПоискаКраткий = "Штрихкод" Тогда
			ВыполнитьПоискПоШтрихкоду();
		ИначеЕсли ВидПоискаКраткий = "SKU" Тогда
			Попытка
				ПолеПоискаЧисло = Число(ПолеПоиска);
				ВыполнитьПоискПоSKU(ПолеПоискаЧисло);
			Исключение
				ПоискССозданиемСписков = Ложь;
			КонецПопытки;
		Иначе
			ЭлементОтбора = Товары.КомпоновщикНастроек.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(СтруктураВидовПоискаИЭлементовОтбора[ВидПоиска]);
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ПравоеЗначение = ПолеПоиска;
			ПоискССозданиемСписков = Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ПоискССозданиемСписков Тогда
		ЭлементОтбора = ПолучитьЭлементОтбораКлиент(Товары.КомпоновщикНастроек, "Ссылка");
	КонецЕсли;
	
	Если НЕ ЭлементОтбора = Неопределено Тогда
		ЗаполнитьЭлементОтбораПользовательскихНастроек(Товары.КомпоновщикНастроек.ПользовательскиеНастройки, ЭлементОтбора);
	КонецЕсли;
	
	ПерейтиСоСтраницыХарактеристик();
	
	Если ПоискССозданиемСписков Тогда
		Если СписокНоменклатуры.Количество() > 0 Тогда
			
			ИмяЭлемента = СтрЗаменить(ИмяТекущейСтраницы, "Страница", "");
			Элементы[ИмяЭлемента].ТекущаяСтрока = СписокНоменклатуры[0].Значение;
			
			Если СписокНоменклатуры.Количество() = 1 И СписокХарактеристик.Количество() > 0 Тогда
				СтандартнаяОбработка = Истина;
				ОбработатьВыборНоменклатуры(СтандартнаяОбработка);
			Иначе
				ИмяУстанавливаемогоТекущегоЭлемента = ИмяЭлемента;
				ПодключитьОбработчикОжидания("УстановитьТекущийЭлемент", 0.1, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборыКлиент(ОчищатьРасширенныйПоиск)
	
	Элементы.ПолеПоиска.ПодсказкаВвода = "";
	
	СписокНоменклатуры.Очистить();
	СписокХарактеристик.Очистить();
	
	ЭлементОтбора = ПолучитьЭлементОтбораКлиент(Товары.КомпоновщикНастроек, "Ссылка");
	Если НЕ ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора.Использование = Ложь;
		
		ЗаполнитьЭлементОтбораПользовательскихНастроек(Товары.КомпоновщикНастроек.ПользовательскиеНастройки, ЭлементОтбора);
	КонецЕсли;
	
	Для каждого ЭлементСтруктуры Из СтруктураВидовПоискаИЭлементовОтбора Цикл
		ЭлементОтбора = Товары.КомпоновщикНастроек.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(ЭлементСтруктуры.Значение);
		ЭлементОтбора.Использование = Ложь;
		
		ЗаполнитьЭлементОтбораПользовательскихНастроек(Товары.КомпоновщикНастроек.ПользовательскиеНастройки, ЭлементОтбора);
	КонецЦикла;
	
	Если ОчищатьРасширенныйПоиск Тогда
		
		Для каждого ЭлементПользовательскихНастроек Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементПользовательскихНастроек) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если ЭлементПользовательскихНастроек.Использование Тогда
					ЭлементПользовательскихНастроек.Использование = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭлементОтбораПользовательскихНастроек(ПользовательскиеНастройки, ЭлементОтбора)
	
	ЭлементПользовательскогоОтбораПоля = ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
	
	Если НЕ ЭлементПользовательскогоОтбораПоля = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭлементПользовательскогоОтбораПоля, ЭлементОтбора)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиСоСтраницыХарактеристик()
	
	Если Найти(ИмяТекущейСтраницы,"СтраницаХарактеристики") > 0 Тогда
		ИмяТекущейСтраницы = ИмяПредыдущейСтраницы;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[ИмяТекущейСтраницы];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлемент()

	ЭтотОбъект.ТекущийЭлемент = Элементы[ИмяУстанавливаемогоТекущегоЭлемента]

КонецПроцедуры

&НаКлиенте
Процедура ПереходНаПолеПоиска(ИмяКоманды)
	
	УстанавливаемыйВидПоиска = СтрЗаменить(ИмяКоманды,"Поиск", "");
	УстанавливаемыйВидПоиска = СтрЗаменить(УстанавливаемыйВидПоиска,"_ПраваяКлавиатура", "");
	
	ВидПоиска = УстанавливаемыйВидПоиска;
	ЭтотОбъект.ТекущийЭлемент = Элементы.ПолеПоиска;
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПутьВДеревеНажатиеКлиент()
	
	Если ИмяТекущейСтраницы = "СтраницаТовары" 
		ИЛИ ИмяТекущейСтраницы = "СтраницаТоварыРасширение" Тогда
		ИмяТекущейСтраницы = "СтраницаТоварыГруппы" + ?(ПоказРасширения, "Расширение", "");
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[ИмяТекущейСтраницы];
		УстановитьНадписьПутиВДереве();
		ТекущаяСтрока = Элементы["Товары" + ?(ПоказРасширения, "Расширение", "")].ТекущаяСтрока;
		Элементы["ТоварыГруппы" + ?(ПоказРасширения, "Расширение", "")].ТекущаяСтрока = ТекущаяСтрока;
		Если НЕ ТекущаяСтрока = Неопределено И ЗначениеЗаполнено(РодительАктивизированнойНоменклатуры) Тогда
			Элементы["ТоварыДерево" + ?(ПоказРасширения, "Расширение", "")].ТекущаяСтрока = РодительАктивизированнойНоменклатуры;
		КонецЕсли;
		УстановитьОтборПоГруппеВТоварах();
		ИмяУстанавливаемогоТекущегоЭлемента = "ТоварыДерево" + ?(ПоказРасширения, "Расширение", "");
		ПодключитьОбработчикОжидания("УстановитьТекущийЭлемент", 0.1, Истина);
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаТоварыГруппы"
		ИЛИ ИмяТекущейСтраницы = "СтраницаТоварыГруппыРасширение" Тогда
		ИмяТекущейСтраницы = "СтраницаТовары" + ?(ПоказРасширения, "Расширение", "");
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[ИмяТекущейСтраницы];
		ТекущаяСтрока = Элементы["ТоварыГруппы" + ?(ПоказРасширения, "Расширение", "")].ТекущаяСтрока;
		Элементы["Товары" + ?(ПоказРасширения, "Расширение", "")].ТекущаяСтрока = ТекущаяСтрока;
		РодительАктивизированнойНоменклатуры = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		УстановитьОтборПоГруппеВТоварах();
		УстановитьНадписьПутиВДереве();
		ИмяУстанавливаемогоТекущегоЭлемента = "Товары" + ?(ПоказРасширения, "Расширение", "");
		ПодключитьОбработчикОжидания("УстановитьТекущийЭлемент", 0.1, Истина);
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаХарактеристики" 
		ИЛИ ИмяТекущейСтраницы = "СтраницаХарактеристикиРасширение" Тогда
		Если ИмяПредыдущейСтраницы = "СтраницаТоварыГруппы" 
			ИЛИ ИмяПредыдущейСтраницы = "СтраницаТоварыГруппыРасширение" Тогда
			ИмяТекущейСтраницы = ИмяПредыдущейСтраницы;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[ИмяТекущейСтраницы];
		Иначе
			ИмяТекущейСтраницы = "СтраницаТоварыГруппы" + ?(ПоказРасширения, "Расширение", "");
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[ИмяТекущейСтраницы];
			УстановитьНадписьПутиВДереве();
			ТекущаяСтрока = Элементы["Товары" + ?(ПоказРасширения, "Расширение", "")].ТекущаяСтрока;
			Элементы["ТоварыГруппы" + ?(ПоказРасширения, "Расширение", "")].ТекущаяСтрока = ТекущаяСтрока;
			Если НЕ ТекущаяСтрока = Неопределено И ЗначениеЗаполнено(РодительАктивизированнойНоменклатуры) Тогда
				Элементы["ТоварыДерево" + ?(ПоказРасширения, "Расширение", "")].ТекущаяСтрока = РодительАктивизированнойНоменклатуры;
			КонецЕсли;
			УстановитьОтборПоГруппеВТоварах();
			ИмяУстанавливаемогоТекущегоЭлемента = "ТоварыДерево" + ?(ПоказРасширения, "Расширение", "");
			ПодключитьОбработчикОжидания("УстановитьТекущийЭлемент", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ПоказРасширения Тогда
		РассчитатьОстаткиИЦены();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИнформацияНажатиеКлиент()
	
	ПоказРасширения = НЕ ПоказРасширения;
	
	Если Найти(ИмяТекущейСтраницы, "СтраницаХарактеристики") > 0 Тогда
		
		Если ПоказРасширения Тогда
			ИмяПредыдущейСтраницы = ИмяПредыдущейСтраницы + "Расширение";
		Иначе
			ИмяПредыдущейСтраницы = СтрЗаменить(ИмяПредыдущейСтраницы, "Расширение", "");
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяПредыдущегоЭлемента = СтрЗаменить(ИмяТекущейСтраницы, "Страница", "");
	Если ПоказРасширения Тогда
		ИмяТекущейСтраницы = ИмяТекущейСтраницы + "Расширение";
	Иначе
		ИмяТекущейСтраницы = СтрЗаменить(ИмяТекущейСтраницы, "Расширение", "");
	КонецЕсли;
	ИмяСледующегоЭлемента = СтрЗаменить(ИмяТекущейСтраницы, "Страница", "");
	
	Если Найти(ИмяТекущейСтраницы, "Группы") > 0  Тогда
		
		ТекущаяСтрока = Элементы["ТоварыДерево" + ?(НЕ ПоказРасширения, "Расширение", "")].ТекущаяСтрока;
		Элементы["ТоварыДерево" + ?(ПоказРасширения, "Расширение", "")].ТекущаяСтрока = ТекущаяСтрока;
		
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[ИмяТекущейСтраницы];
	ТекущаяСтрока = Элементы[ИмяПредыдущегоЭлемента].ТекущаяСтрока;
	Элементы[ИмяСледующегоЭлемента].ТекущаяСтрока = ТекущаяСтрока;
	ИмяУстанавливаемогоТекущегоЭлемента = ИмяСледующегоЭлемента;
	ПодключитьОбработчикОжидания("УстановитьТекущийЭлемент", 0.1, Истина);
	
	УстановитьНадписьИнформации();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьОстаткиИЦены()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИмяТекущейСтраницы = "СтраницаТоварыРасширение"
		ИЛИ ИмяТекущейСтраницы = "СтраницаТоварыГруппыРасширение" Тогда
		ИмяЭлемента = СтрЗаменить(ИмяТекущейСтраницы, "Страница", "");
		ТекущаяСтрока = Элементы[ИмяЭлемента].ТекущаяСтрока;
		Если ТекущаяСтрока = Неопределено Тогда
			ТаблицаОстаткиЦены.Очистить();
			Возврат;
		КонецЕсли;
		Номенклатура   = ТекущаяСтрока;
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		
	Иначе
		ИмяДинамическогоСпискаНоменклатуры = СтрЗаменить(ИмяПредыдущейСтраницы, "Страница", "");
		ТекущаяСтрока = Элементы[ИмяДинамическогоСпискаНоменклатуры].ТекущаяСтрока;
		Если ТекущаяСтрока = Неопределено Тогда
			ТаблицаОстаткиЦены.Очистить();
			Возврат;
		КонецЕсли;
		Номенклатура   = ТекущаяСтрока;
		ИмяДинамическогоСписка = СтрЗаменить(ИмяТекущейСтраницы, "Страница", "");
		ХарактеристикаТекущаяСтрока = Элементы[ИмяДинамическогоСписка].ТекущаяСтрока;
		Если ХарактеристикаТекущаяСтрока = Неопределено Тогда
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		Иначе
			Характеристика = Характеристики.НайтиПоИдентификатору(Элементы[ИмяДинамическогоСписка].ТекущаяСтрока).Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НоменклатураПоследнегоРасчетаОстатков = Номенклатура
		И Характеристика = ХарактеристикаПоследнегоРасчетаОстатков Тогда
		Возврат;
	Иначе
		ТаблицаОстаткиЦены.Очистить();
		НоменклатураПоследнегоРасчетаОстатков   = Номенклатура;
		ХарактеристикаПоследнегоРасчетаОстатков = Характеристика;
	КонецЕсли;
	
	РеквизитыНоменклатуры = РеквизитыНоменклатуры(Номенклатура);
	Если РеквизитыНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЦеныВАссортименте", ЦеныВАссортименте);
	Запрос.УстановитьПараметр("Период", Дата('00010101'));
	Запрос.УстановитьПараметр("ПериодАссортимента", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("ЦеноваяГруппа", РеквизитыНоменклатуры.ЦеноваяГруппа);
	Запрос.УстановитьПараметр("Номинал", РеквизитыНоменклатуры.Номинал);
	
	Если ОтображатьЦены Тогда
		
		Если РеквизитыНоменклатуры.ЭтоПодарочныйСертификат Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Магазины.Ссылка КАК Магазин,
			|	&Номинал КАК Цена
			|ПОМЕСТИТЬ ТаблицаЦенПоМагазинам
			|ИЗ
			|	Справочник.Магазины КАК Магазины
			|ГДЕ
			|	НЕ Магазины.СкладУправляющейСистемы";
			
			
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Магазины.Ссылка КАК Магазин,
			|	Магазины.ПравилоЦенообразования КАК ПравилоЦенообразования
			|ПОМЕСТИТЬ ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования
			|ИЗ
			|	Справочник.Магазины КАК Магазины
			|ГДЕ
			|	НЕ(Магазины.КонтролироватьАссортимент
			|				И &ЦеныВАссортименте)
			|	И НЕ Магазины.ИспользоватьПрименениеЦен
			|	И НЕ Магазины.СкладУправляющейСистемы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПравилаЦенообразования.Ссылка КАК ПравилоЦенообразования,
			|	ЕСТЬNULL(УточненияПоЦеновымГруппам.ВидЦен, ПравилаЦенообразования.ВидЦен) КАК ВидЦен
			|ПОМЕСТИТЬ ТаблицаПравилЦенообразованияИВидовЦен
			|ИЗ
			|	Справочник.ПравилаЦенообразования КАК ПравилаЦенообразования
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ПравилаЦенообразованияЦеновыеГруппы.Ссылка КАК ПравилоЦенообразования,
			|			ПравилаЦенообразованияЦеновыеГруппы.ВидЦен КАК ВидЦен
			|		ИЗ
			|			Справочник.ПравилаЦенообразования.ЦеновыеГруппы КАК ПравилаЦенообразованияЦеновыеГруппы
			|		ГДЕ
			|			ПравилаЦенообразованияЦеновыеГруппы.ЦеноваяГруппа = &ЦеноваяГруппа) КАК УточненияПоЦеновымГруппам
			|		ПО (УточненияПоЦеновымГруппам.ПравилоЦенообразования = ПравилаЦенообразования.Ссылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования.Магазин,
			|	ТаблицаПравилЦенообразованияИВидовЦен.ВидЦен
			|ПОМЕСТИТЬ ТаблицаМагазиновЦеныНоменклатуры
			|ИЗ
			|	ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования КАК ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПравилЦенообразованияИВидовЦен КАК ТаблицаПравилЦенообразованияИВидовЦен
			|		ПО ТаблицаМагазиновЦеныНоменклатурыСПравиламиЦенообразования.ПравилоЦенообразования = ТаблицаПравилЦенообразованияИВидовЦен.ПравилоЦенообразования
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Магазины.ФорматМагазина КАК ФорматМагазина,
			|	Магазины.Ссылка КАК Магазин
			|ПОМЕСТИТЬ ТаблицаМагазиновЦеныПоАссортименту
			|ИЗ
			|	Справочник.Магазины КАК Магазины
			|ГДЕ
			|	Магазины.КонтролироватьАссортимент
			|	И &ЦеныВАссортименте
			|	И НЕ Магазины.ИспользоватьПрименениеЦен
			|	И НЕ Магазины.СкладУправляющейСистемы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Магазины.Магазин КАК Магазин,
			|	Ассортимент.ВидЦен КАК ВидЦен
			|ПОМЕСТИТЬ втАссортимент
			|ИЗ
			|	РегистрСведений.Ассортимент.СрезПоследних(
			|			КОНЕЦПЕРИОДА(&ПериодАссортимента, ДЕНЬ),
			|			Номенклатура = &Номенклатура
			|				И ОбъектПланирования В
			|					(ВЫБРАТЬ
			|						Т.ФорматМагазина
			|					ИЗ
			|						ТаблицаМагазиновЦеныПоАссортименту КАК Т)) КАК Ассортимент
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновЦеныПоАссортименту КАК Магазины
			|		ПО (Магазины.ФорматМагазина = Ассортимент.ОбъектПланирования)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ВидЦен,
			|	Магазин
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Магазины.Ссылка КАК Магазин
			|ПОМЕСТИТЬ ТаблицаМагазиновДействующиеЦены
			|ИЗ
			|	Справочник.Магазины КАК Магазины
			|ГДЕ
			|	Магазины.ИспользоватьПрименениеЦен
			|	И НЕ Магазины.СкладУправляющейСистемы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Магазины.Ссылка КАК Магазин,
			|	Магазины.ВидМинимальныхЦенПродажи КАК ВидМинимальныхЦенПродажи
			|ПОМЕСТИТЬ ТаблицаМагазиновСМинимальнымиЦенами
			|ИЗ
			|	Справочник.Магазины КАК Магазины
			|ГДЕ
			|	НЕ Магазины.ВидМинимальныхЦенПродажи = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка)
			|	И НЕ Магазины.СкладУправляющейСистемы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаМагазиновЦеныНоменклатуры.Магазин,
			|	ТаблицаМагазиновЦеныНоменклатуры.ВидЦен
			|ПОМЕСТИТЬ ТаблицаМагазиновПоВидамЦен
			|ИЗ
			|	ТаблицаМагазиновЦеныНоменклатуры КАК ТаблицаМагазиновЦеныНоменклатуры
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	втАссортимент.Магазин,
			|	втАссортимент.ВидЦен
			|ИЗ
			|	втАссортимент КАК втАссортимент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.ВидЦены,
			|	ВложенныйЗапрос.Номенклатура,
			|	ВложенныйЗапрос.Характеристика,
			|	ВложенныйЗапрос.Цена,
			|	ВложенныйЗапрос.Упаковка
			|ПОМЕСТИТЬ ТаблицаЦенПоВидамЦен
			|ИЗ
			|	(ВЫБРАТЬ
			|		ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
			|		ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
			|		ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
			|		ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
			|		ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка
			|	ИЗ
			|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|				&Период,
			|				Номенклатура = &Номенклатура
			|					И Характеристика = &Характеристика
			|					И ВидЦены В
			|						(ВЫБРАТЬ
			|							ТаблицаМагазиновПоВидамЦен.ВидЦен КАК ВидЦены
			|						ИЗ
			|							ТаблицаМагазиновПоВидамЦен КАК ТаблицаМагазиновПоВидамЦен)) КАК ЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Цена,
			|	ВложенныйЗапрос.Магазин,
			|	ВложенныйЗапрос.Упаковка
			|ПОМЕСТИТЬ ЦеныБезПриведенияКУпаковке
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТаблицаЦенПоВидамЦен.Цена КАК Цена,
			|		ТаблицаМагазиновПоВидамЦен.Магазин КАК Магазин,
			|		ТаблицаЦенПоВидамЦен.Упаковка КАК Упаковка
			|	ИЗ
			|		ТаблицаЦенПоВидамЦен КАК ТаблицаЦенПоВидамЦен
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновПоВидамЦен КАК ТаблицаМагазиновПоВидамЦен
			|			ПО ТаблицаЦенПоВидамЦен.ВидЦены = ТаблицаМагазиновПоВидамЦен.ВидЦен) КАК ВложенныйЗапрос
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.Цена,
			|	ВложенныйЗапрос.Магазин,
			|	ВложенныйЗапрос.Упаковка
			|ИЗ
			|	(ВЫБРАТЬ
			|		ДействующиеЦеныНоменклатурыСрезПоследних.ОбъектЦенообразования КАК Магазин,
			|		ДействующиеЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
			|		ДействующиеЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка
			|	ИЗ
			|		РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних(
			|				&Период,
			|				Номенклатура = &Номенклатура
			|					И Характеристика = &Характеристика
			|					И ОбъектЦенообразования В
			|						(ВЫБРАТЬ
			|							ТаблицаМагазинов.Магазин
			|						ИЗ
			|							ТаблицаМагазиновДействующиеЦены КАК ТаблицаМагазинов)) КАК ДействующиеЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЦеныБезПриведенияКУпаковке.Магазин,
			|	ЦеныБезПриведенияКУпаковке.Цена / ВЫБОР
			|		КОГДА ЦеныБезПриведенияКУпаковке.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА 1
			|		КОГДА ЦеныБезПриведенияКУпаковке.Упаковка.Коэффициент = 0
			|			ТОГДА 1
			|		ИНАЧЕ ЦеныБезПриведенияКУпаковке.Упаковка.Коэффициент
			|	КОНЕЦ КАК Цена
			|ПОМЕСТИТЬ ЦеныБезПриведенияКМинимальнымВидамЦен
			|ИЗ
			|	ЦеныБезПриведенияКУпаковке КАК ЦеныБезПриведенияКУпаковке
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Цена / ВЫБОР
			|		КОГДА ВложенныйЗапрос.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА 1
			|		КОГДА ВложенныйЗапрос.Упаковка.Коэффициент = 0
			|			ТОГДА 1
			|		ИНАЧЕ ВложенныйЗапрос.Упаковка.Коэффициент
			|	КОНЕЦ КАК Цена,
			|	ТаблицаМагазиновСМинимальнымиЦенами.Магазин
			|ПОМЕСТИТЬ ТаблицаЦенПоМинимальнымВидамЦен
			|ИЗ
			|	(ВЫБРАТЬ
			|		ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
			|		ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
			|		ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка
			|	ИЗ
			|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|				&Период,
			|				Номенклатура = &Номенклатура
			|					И Характеристика = &Характеристика
			|					И ВидЦены В
			|						(ВЫБРАТЬ
			|							ТаблицаМагазиновСМинимальнымиЦенами.ВидМинимальныхЦенПродажи КАК ВидЦены
			|						ИЗ
			|							ТаблицаМагазиновСМинимальнымиЦенами КАК ТаблицаМагазиновСМинимальнымиЦенами)) КАК ЦеныНоменклатурыСрезПоследних) КАК ВложенныйЗапрос
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМагазиновСМинимальнымиЦенами КАК ТаблицаМагазиновСМинимальнымиЦенами
			|		ПО ВложенныйЗапрос.ВидЦены = ТаблицаМагазиновСМинимальнымиЦенами.ВидМинимальныхЦенПродажи
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЦеныБезПриведенияКМинимальнымВидамЦен.Магазин,
			|	ВЫБОР
			|		КОГДА ТаблицаЦенПоМинимальнымВидамЦен.Цена ЕСТЬ NULL 
			|			ТОГДА ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ЕСТЬNULL(ТаблицаЦенПоМинимальнымВидамЦен.Цена, 0) > ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
			|					ТОГДА ЕСТЬNULL(ТаблицаЦенПоМинимальнымВидамЦен.Цена, 0)
			|				ИНАЧЕ ЦеныБезПриведенияКМинимальнымВидамЦен.Цена
			|			КОНЕЦ
			|	КОНЕЦ КАК Цена
			|ПОМЕСТИТЬ ТаблицаЦенПоМагазинам
			|ИЗ
			|	ЦеныБезПриведенияКМинимальнымВидамЦен КАК ЦеныБезПриведенияКМинимальнымВидамЦен
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦенПоМинимальнымВидамЦен КАК ТаблицаЦенПоМинимальнымВидамЦен
			|		ПО ЦеныБезПриведенияКМинимальнымВидамЦен.Магазин = ТаблицаЦенПоМинимальнымВидамЦен.Магазин";
		КонецЕсли;
		
		Если ОтображатьКоличество Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТоварыНаСкладахОстатки.Склад.Магазин КАК Магазин,
			|	ТоварыНаСкладахОстатки.Склад,
			|	ТоварыНаСкладахОстатки.КоличествоОстаток,
			|	ТоварыНаСкладахОстатки.РезервОстаток,
			|	ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыНаСкладахОстатки.РезервОстаток КАК СвободныйОстаток
			|ПОМЕСТИТЬ ТаблицаОстаткиНоменклатуры
			|ИЗ
			|	РегистрНакопления.ТоварыНаСкладах.Остатки(
			|			&Период,
			|			Номенклатура = &Номенклатура
			|				И (Характеристика = &Характеристика
			|					ИЛИ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))) КАК ТоварыНаСкладахОстатки
			|;

			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(ТаблицаОстаткиНоменклатуры.Магазин, ТаблицаЦенПоМагазинам.Магазин) КАК Магазин,
			|	ЕСТЬNULL(ТаблицаОстаткиНоменклатуры.Склад, Значение(Справочник.Склады.ПустаяСсылка)) КАК МестоХранения,
			|	ЕСТЬNULL(ТаблицаОстаткиНоменклатуры.КоличествоОстаток, 0) КАК Количество,
			|	ЕСТЬNULL(ТаблицаОстаткиНоменклатуры.РезервОстаток, 0) КАК Резерв,
			|	ЕСТЬNULL(ТаблицаОстаткиНоменклатуры.СвободныйОстаток, 0) КАК СвободныйОстаток,
			|	ЕСТЬNULL(ТаблицаЦенПоМагазинам.Цена, 0) КАК Цена
			|ИЗ
			|	ТаблицаОстаткиНоменклатуры КАК ТаблицаОстаткиНоменклатуры
			|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаЦенПоМагазинам КАК ТаблицаЦенПоМагазинам
			|		ПО ТаблицаОстаткиНоменклатуры.Магазин = ТаблицаЦенПоМагазинам.Магазин
			|ИТОГИ
			|	СУММА(Количество),
			|	СУММА(Резерв),
			|	СУММА(СвободныйОстаток),
			|	МАКСИМУМ(Цена)
			|ПО
			|	Магазин";
			
			Результат = Запрос.Выполнить();
			
			ВыборкаПоМагазинам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоМагазинам.Следующий() Цикл
				
				СтрокаТаблицы = ТаблицаОстаткиЦены.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаПоМагазинам);
				СтрокаТаблицы.МестоХранения = ВыборкаПоМагазинам.Магазин;
				СтрокаТаблицы.ВыделениеСтроки = Истина;
				Выборка = ВыборкаПоМагазинам.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если ЗначениеЗаполнено(Выборка.МестоХранения)  Тогда
						СтрокаТаблицы = ТаблицаОстаткиЦены.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаЦенПоМагазинам.Магазин КАК МестоХранения,
			|	ТаблицаЦенПоМагазинам.Цена,
			|	ИСТИНА КАК ВыделениеСтроки
			|ИЗ
			|	ТаблицаЦенПоМагазинам КАК ТаблицаЦенПоМагазинам";
			Результат = Запрос.Выполнить();
			ТаблицаОстаткиЦены.Загрузить(Результат.Выгрузить());
		КонецЕсли;
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыНаСкладахОстатки.Склад.Магазин КАК Магазин,
		|	ТоварыНаСкладахОстатки.Склад,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток,
		|	ТоварыНаСкладахОстатки.РезервОстаток,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыНаСкладахОстатки.РезервОстаток КАК СвободныйОстаток
		|ПОМЕСТИТЬ ТаблицаОстаткиНоменклатуры
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			&Период,
		|			Номенклатура = &Номенклатура
		|				И (Характеристика = &Характеристика
		|					ИЛИ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))) КАК ТоварыНаСкладахОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОстаткиНоменклатуры.Магазин КАК Магазин,
		|	ТаблицаОстаткиНоменклатуры.Склад КАК МестоХранения,
		|	ТаблицаОстаткиНоменклатуры.КоличествоОстаток КАК Количество,
		|	ТаблицаОстаткиНоменклатуры.РезервОстаток КАК Резерв,
		|	ТаблицаОстаткиНоменклатуры.СвободныйОстаток КАК СвободныйОстаток
		|ИЗ
		|	ТаблицаОстаткиНоменклатуры КАК ТаблицаОстаткиНоменклатуры
		|ИТОГИ
		|	СУММА(Количество),
		|	СУММА(Резерв),
		|	СУММА(СвободныйОстаток)
		|ПО
		|	Магазин";
		Результат = Запрос.Выполнить();
		
		ВыборкаПоМагазинам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоМагазинам.Следующий() Цикл
			
			СтрокаТаблицы = ТаблицаОстаткиЦены.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаПоМагазинам);
			СтрокаТаблицы.МестоХранения = ВыборкаПоМагазинам.Магазин;
			СтрокаТаблицы.ВыделениеСтроки = Истина;
			Выборка = ВыборкаПоМагазинам.Выбрать();
			Пока Выборка.Следующий() Цикл
				СтрокаТаблицы = ТаблицаОстаткиЦены.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОтображатьКоличество Тогда
		
		Если ПланыОбмена.ГлавныйУзел() <> Неопределено 
			И ПараметрыСеанса.ИспользуемыеПланыОбмена.Найти("ПоМагазину") <> Неопределено
			И ПланыОбмена.ПоМагазину.ЭтотУзел().Магазины.Количество() <> 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИнформативныеОстаткиТоваровПоМагазинам.Магазин КАК МестоХранения,
			|	СУММА(ИнформативныеОстаткиТоваровПоМагазинам.Количество) КАК Количество,
			|	СУММА(ИнформативныеОстаткиТоваровПоМагазинам.Резерв) КАК Резерв,
			|	СУММА(ИнформативныеОстаткиТоваровПоМагазинам.Количество - ИнформативныеОстаткиТоваровПоМагазинам.Резерв) КАК СвободныйОстаток,
			|	ИСТИНА КАК ЭтоИнформационныйОстаток,
			|	ИСТИНА КАК ВыделениеСтроки
			|ИЗ
			|	РегистрСведений.ИнформативныеОстаткиТоваровПоМагазинам КАК ИнформативныеОстаткиТоваровПоМагазинам
			|ГДЕ
			|	ИнформативныеОстаткиТоваровПоМагазинам.Номенклатура = &Номенклатура
			|	И (ИнформативныеОстаткиТоваровПоМагазинам.Характеристика = &Характеристика
			|			ИЛИ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
			|	И ИнформативныеОстаткиТоваровПоМагазинам.Магазин В
			|			(ВЫБРАТЬ
			|				Магазины.Ссылка
			|			ИЗ
			|				Справочник.Магазины КАК Магазины
			|			ГДЕ
			|				НЕ Магазины.Ссылка В
			|						(ВЫБРАТЬ
			|							ПланОбменаПоМагазинуМагазины.Магазин
			|						ИЗ
			|							ПланОбмена.ПоМагазину.Магазины КАК ПланОбменаПоМагазинуМагазины
			|						ГДЕ
			|							ПланОбменаПоМагазинуМагазины.Ссылка = &Узел))
			|
			|СГРУППИРОВАТЬ ПО
			|	ИнформативныеОстаткиТоваровПоМагазинам.Магазин";
			
			Запрос.УстановитьПараметр("Номенклатура"  , Номенклатура);
			Запрос.УстановитьПараметр("Характеристика", Характеристика);
			Запрос.УстановитьПараметр("Узел"          , ПланыОбмена.ПоМагазину.ЭтотУзел());
			
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				СтрокаТаблицы = ТаблицаОстаткиЦены.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
				
			КонецЦикла;
			
		ИначеЕсли ПланыОбмена.ГлавныйУзел() <> Неопределено 
				  И ПланыОбмена.ПоРабочемуМесту.ЭтоРабочееМесто() Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИнформативныеОстаткиТоваровПоСкладам.Склад КАК МестоХранения,
			|	СУММА(ИнформативныеОстаткиТоваровПоСкладам.Количество) КАК Количество,
			|	СУММА(ИнформативныеОстаткиТоваровПоСкладам.Резерв) КАК Резерв,
			|	СУММА(ИнформативныеОстаткиТоваровПоСкладам.Количество - ИнформативныеОстаткиТоваровПоСкладам.Резерв) КАК СвободныйОстаток,
			|	ИСТИНА КАК ЭтоИнформационныйОстаток,
			|	ЛОЖЬ КАК ВыделениеСтроки
			|ИЗ
			|	РегистрСведений.ИнформативныеОстаткиТоваровПоСкладам КАК ИнформативныеОстаткиТоваровПоСкладам
			|ГДЕ
			|	ИнформативныеОстаткиТоваровПоСкладам.Номенклатура = &Номенклатура
			|	И (ИнформативныеОстаткиТоваровПоСкладам.Характеристика = &Характеристика
			|			ИЛИ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
			|
			|СГРУППИРОВАТЬ ПО
			|	ИнформативныеОстаткиТоваровПоСкладам.Склад";
			
			Запрос.УстановитьПараметр("Номенклатура"  , Номенклатура);
			Запрос.УстановитьПараметр("Характеристика", Характеристика);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				СтрокаТаблицы = ТаблицаОстаткиЦены.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
				
			КонецЦикла;
			
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыНоменклатуры(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.ТипНоменклатуры,
	|	Номенклатура.ЦеноваяГруппа,
	|	Номенклатура.Номинал,
	|	ВЫБОР
	|		КОГДА Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПодарочныйСертификат
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить();
	ТаблицаНоменклатуры = Результат.Выгрузить();
	
	Если ТаблицаНоменклатуры.Количество() > 0 Тогда
		
		СтруктураНоменклатуры = Новый Структура;
		Для каждого КолонкаТаблицы Из ТаблицаНоменклатуры.Колонки Цикл
			СтруктураНоменклатуры.Вставить(КолонкаТаблицы.Имя);
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(СтруктураНоменклатуры, ТаблицаНоменклатуры[0]);
		
		Возврат СтруктураНоменклатуры;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрКомпоновкиДанных(ПараметрыДанных, ИмяПараметра, Значение)

	ЗначениеПараметра = ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	
	Если НЕ ЗначениеПараметра = Неопределено Тогда
		ЗначениеПараметра.Значение = Значение;
		ЗначениеПараметра.Использование = Истина;
	КонецЕсли;
	

КонецПроцедуры
 
&НаСервере
Функция ДанныеПоЦенообразованиюМагазина()
	
	СтруктураЦенообразованияМагазина = Новый Структура("ВидМинимальныхЦенПродажи,ФорматМагазина,ПравилоЦенообразования,КонтролироватьАссортимент,ИспользоватьПрименениеЦен");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Магазины.Ссылка,
	|	Магазины.ВидМинимальныхЦенПродажи,
	|	Магазины.ФорматМагазина,
	|	Магазины.ПравилоЦенообразования,
	|	Магазины.КонтролироватьАссортимент,
	|	Магазины.ИспользоватьПрименениеЦен
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.Ссылка = &Магазин";
	
	Запрос.УстановитьПараметр("Магазин", Магазин);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураЦенообразованияМагазина, Выборка);
		
	КонецЕсли;
	
	Возврат СтруктураЦенообразованияМагазина;
	
КонецФункции // ДанныеПоЦенообразованиюМагазина()

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("АктивизироватьСтроку") Тогда
		ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
		Если СтрНайти(ИмяТекущейСтраницы, "Расширение") = 0 Тогда
			Элементы.Товары.ТекущаяСтрока = СтруктураПараметров.АктивизироватьСтроку;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТовары;
			ИмяТекущейСтраницы = "СтраницаТовары";
			ТекущийЭлемент = Элементы.Товары;
		Иначе
			Элементы.ТоварыРасширение.ТекущаяСтрока = СтруктураПараметров.АктивизироватьСтроку;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТоварыРасширение;
			ИмяТекущейСтраницы = "СтраницаТоварыРасширение";
			ТекущийЭлемент = Элементы.ТоварыРасширение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти