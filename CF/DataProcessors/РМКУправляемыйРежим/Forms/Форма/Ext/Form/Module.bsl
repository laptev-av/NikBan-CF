
#Область ПеременныеМодуля

&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем МассивКассККМКлиент;

&НаКлиенте
Перем МассивОрганизацийКлиент;

&НаКлиенте
Перем ЦветПродажи;

&НаКлиенте
Перем ДисплейПокупателяПараметры;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоНаименованию(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		Если Результат.Свойство("ВывестиИнформациюРМКУправляемый") Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(Результат.ВывестиИнформациюРМКУправляемый.ЗаголовокИнформации, Результат.ВывестиИнформациюРМКУправляемый.ТекстИнформации);
		Иначе
			ОбработатьДанныеПоКодуКлиент(Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		
		//Если считан код акцизной марки и подключено несколько ОрганизацийЕГАИС, 
		//то позволяем пользователю выбрать кассу ККМ для пробития алкоголя.
		Если АкцизныеМаркиВызовСервера.ЭтоШтрихкодАкцизнойМарки(Штрихкод) И 
			ОрганизацииЕГАИС.Количество() > 1 Тогда
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораКассыОрганизацияЕГАИС", ЭтотОбъект, Штрихкод);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("КассыККМ"   , МассивКассККМКлиент);
			ПараметрыФормы.Вставить("Организации", МассивОрганизацийКлиент);
			
			Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
			ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораКассыККМ", 
							ПараметрыФормы, 
							УникальныйИдентификатор,,,, 
							ОбработчикОповещения, 
							Режим);
		Иначе
			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораКассыОрганизацияЕГАИС(Результат, Штрихкод) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровКлиента = ПродолжитьОбработкуШтрихкодаНаСервере(Результат, Штрихкод);
	ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
			Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
				СтруктураРезультат.Вставить("ТекстПредупреждения", НСтр("ru = 'Изменение продавца при возврате не предусмотрено.'"));
			Иначе
				Объект.Продавец = СтрокаРезультата.ВладелецКарты;
				ЛогированиеВводаПродавца(СтруктураРезультат.ДанныеПО, СтрокаРезультата.Карта, СтрокаРезультата.ВладелецКарты);
				Модифицированность = Истина;
				СтруктураРезультат.Вставить("НайденаРегистрационнаяКарта");
			КонецЕсли;
		Иначе
			Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
				СтруктураРезультат.Вставить("ТекстПредупреждения", НСтр("ru = 'Изменение дисконтной карты при возврате не предусмотрено.'"));
			Иначе
				Объект.ДисконтнаяКарта = СтрокаРезультата.Карта;
				Если СтруктураРезультат.Свойство("ЛогироватьСозданиеКарты") Тогда
					ЛогированиеРегистрацииНовойКарты(СтруктураРезультат.ЛогироватьСозданиеКарты, СтрокаРезультата.Карта);
					ЛогированиеВводаДисконтнойКарты(СтруктураРезультат.ЛогироватьСозданиеКарты, СтрокаРезультата.Карта);
				Иначе
					ЛогированиеВводаДисконтнойКарты(СтруктураРезультат.ДанныеПО, СтрокаРезультата.Карта);
				КонецЕсли;
				СтруктураРезультат.Вставить("НайденаДисконтнаяКарта");
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ЛогированиеВводаПодарочногоСертификата(СтруктураРезультат.ДанныеПО,
												СтрокаРезультата.Номенклатура,
												СтрокаРезультата.СерийныйНомер);
		ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("ШтрихкодУпаковкиЕГАИС")
		И ЗначениеЗаполнено(СтрокаРезультата.ШтрихкодУпаковкиЕГАИС)
		И СтрокаРезультата.Свойство("ТипУпаковки")
		И СтрокаРезультата.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
		
		ЛогированиеВводаНоменклатурыИХарактеристики(СтруктураРезультат.ДанныеПО, 
													СтрокаРезультата.Номенклатура,
													СтрокаРезультата.Характеристика);
		ПодключаемоеОборудованиеРТВызовСервера.ДобавитьВложенныеМарки(ЭтотОбъект, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("Номенклатура") Тогда
		
		ЛогированиеВводаНоменклатурыИХарактеристики(СтруктураРезультат.ДанныеПО, 
													СтрокаРезультата.Номенклатура,
													СтрокаРезультата.Характеристика);
		ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("ВывестиИнформациюРМКУправляемый") Тогда
		СтруктураРезультат.Вставить("ВывестиИнформациюРМКУправляемый", СтрокаРезультата.ВывестиИнформациюРМКУправляемый);
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("ВвестиЦену") Тогда
		СтруктураРезультат.Вставить("ВвестиЦену", СтрокаРезультата.ВвестиЦену);
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("ВвестиЦенуПлатежа") Тогда
		СтруктураРезультат.Вставить("ВвестиЦенуПлатежа", СтрокаРезультата.ВвестиЦенуПлатежа);
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("НеобходимостьВводаАкцизнойМарки") Тогда
		СтруктураРезультат.Вставить("НеобходимостьВводаАкцизнойМарки", СтрокаРезультата.НеобходимостьВводаАкцизнойМарки);
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("НеобходимостьВводаКодаМаркировки") Тогда
		СтруктураРезультат.Вставить("НеобходимостьВводаКодаМаркировки", СтрокаРезультата.НеобходимостьВводаКодаМаркировки);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	Если СтруктураПараметровКлиента.Свойство("НайденаДисконтнаяКарта") Тогда
		
		ДисконтнаяКартаПриИзменении();
		
	ИначеЕсли СтруктураПараметровКлиента.Свойство("АктивизироватьСтроку") Тогда
		
		Элементы.Товары.ТекущаяСтрока =  СтруктураПараметровКлиента.АктивизироватьСтроку;
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок;
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		Если ТекущаяСтрока <> Неопределено Тогда
			
			Если СтруктураПараметровКлиента.Свойство("ВвестиЦену") Тогда
				
				ОткрытаБлокирующаяФорма = Истина;
				СтруктураПараметровКлиента.Вставить("ОткрытаБлокирующаяФорма", Истина);
				СтруктураПараметровКлиента.Вставить("ИдентификаторСтроки", СтруктураПараметровКлиента.АктивизироватьСтроку);
				СтруктураПараметровКлиента.Вставить("ПрекратитьДействия", Ложь);
				Если не СтруктураПараметровКлиента.Свойство("ДобавитьСерийныйНомерИОткрытьВводСерии") Тогда
					СтруктураПараметровКлиента.Вставить("ДобавитьСерийныйНомерИОткрытьВводСерии");
				КонецЕсли;
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ПараметрДействия", СтруктураПараметровКлиента);
				
				ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаЧислаТоварыПриИзмененииНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
				ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите цену товара.'"), 0, 0, Ложь, Ложь, ОбработчикОповещения);
				
			ИначеЕсли СтруктураПараметровКлиента.Свойство("ВвестиЦенуПлатежа") Тогда
				
				ОткрытаБлокирующаяФорма = Истина;
				СтруктураПараметровКлиента.Вставить("ОткрытаБлокирующаяФорма", Истина);
				СтруктураПараметровКлиента.Вставить("ИдентификаторСтроки", СтруктураПараметровКлиента.АктивизироватьСтроку);
				СтруктураПараметровКлиента.Вставить("ПрекратитьДействия", Ложь);
				СтруктураПараметровКлиента.Вставить("НеУдалятьСтроку", Истина);
				СтруктураПараметровКлиента.Вставить("ПредупреждениеНулевойЦены", НСтр("ru = 'Введите сумму платежа.'"));
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ПараметрДействия", СтруктураПараметровКлиента);
				
				ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаЧислаТоварыПриИзмененииНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
				ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите сумму платежа.'"), 0, 0, Ложь, Ложь, ОбработчикОповещения);
				
			ИначеЕсли СтруктураПараметровКлиента.Свойство("НеобходимостьВводаАкцизнойМарки") Тогда
				
				ОткрытаБлокирующаяФорма = Истина;
				СтруктураПараметровКлиента.Вставить("ОткрытаБлокирующаяФорма", Истина);
				СтруктураПараметровКлиента.Вставить("ИдентификаторСтроки", СтруктураПараметровКлиента.АктивизироватьСтроку);
				СтруктураПараметровКлиента.Вставить("ПрекратитьДействия", Ложь);
				
				СтрокаТовара = Объект.Товары.НайтиПоИдентификатору(СтруктураПараметровКлиента.АктивизироватьСтроку);
				Если СтрокаТовара <> Неопределено Тогда
					ВвестиАкцизнуюМарку(
						СтрокаТовара,
						"",
						СтруктураПараметровКлиента);
				КонецЕсли;
			ИначеЕсли СтруктураПараметровКлиента.Свойство("НеобходимостьВводаКодаМаркировки") Тогда
				
				ОткрытаБлокирующаяФорма = Истина;
				СтруктураПараметровКлиента.Вставить("ОткрытаБлокирующаяФорма", Истина);
				СтруктураПараметровКлиента.Вставить("ИдентификаторСтроки", СтруктураПараметровКлиента.АктивизироватьСтроку);
				СтруктураПараметровКлиента.Вставить("ПрекратитьДействия", Ложь);
				
				СтрокаТовара = Объект.Товары.НайтиПоИдентификатору(СтруктураПараметровКлиента.АктивизироватьСтроку);
				Если СтрокаТовара <> Неопределено Тогда
					ВвестиАкцизнуюМарку(
						СтрокаТовара,
						"",
						СтруктураПараметровКлиента);
				КонецЕсли;
			Иначе
				СтрокаПоиска = СтруктураПараметровКлиента.ЗначенияПоиска[0];
				Если НЕ СтрокаПоиска.Свойство("СерийныйНомер") Тогда
					ДобавитьСерийныйНомерИОткрытьВводСерии(ТекущаяСтрока, , , ОткрытаБлокирующаяФорма);
					СтруктураПараметровКлиента.Вставить("ОткрытаБлокирующаяФорма", ОткрытаБлокирующаяФорма);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекущаяСтрока.НеобходимостьВводаКодаМаркировки
				ИЛИ ЗначениеЗаполнено(ТекущаяСтрока.ДоговорПлатежногоАгента) Тогда
				СтруктураПараметровКлиента.Вставить("ОткрыватьРедактированиеСтроки", Ложь);
			Иначе
				ПодключитьОбработчикОжидания("Подключаемый_ИзменитьСтроку", 0.1, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКодуРМК(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
		Если СтруктураПараметровКлиента.Свойство("НеизвестныеДанныеПО") 
			И СтруктураПараметровКлиента.НеизвестныеДанныеПО Тогда
			ЛогированиеНеизвестныхДанныхПО(СтруктураПараметровКлиента.ДанныеПО);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТВызовСервера.ОбработатьДанныеПоНоменклатуреИзТСДСервер(ЭтотОбъект, СтруктураПараметров);
	ИнтеграцияЕГАИСРТКлиентСервер.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	ИнтеграцияЕГАИСРТКлиентСервер.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОбработатьДанныеПослеЗагрузкиИзТСД(СтруктураПараметров) Экспорт
	
	ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, ВидимостьКолонкиМаркировки);
	ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	
	РозничныеПродажиКлиент.ЗаполнитьКоличествоКодовМаркировки(Объект.Товары, Объект.КодыМаркировки);
	РозничныеПродажиКлиент.УстановитьЗначениеСтатусаКодаМаркировки(Объект.Товары);
	
	ОбновитьФорму();
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	
	ЕстьДанныеМаркировки = Ложь;
	СворачиватьПоСтрокеПоиска = Истина;
	Если СтруктураПараметров.Свойство("ДанныеМаркировки")
		И СтруктураПараметров.ДанныеМаркировки <> Неопределено
		И СтруктураПараметров.ДанныеМаркировки.Разобран Тогда
		ЕстьДанныеМаркировки = Истина;
		СворачиватьПоСтрокеПоиска = Ложь;
	Иначе
		СворачиватьПоСтрокеПоиска = НужноСворачиватьПоСтрокеПоиска(СтруктураПараметров.Номенклатура);
	КонецЕсли;
	
	Номенклатура = СтруктураПараметров.Номенклатура;
	
	Если СтруктураПараметров.Свойство("Характеристика") Тогда
		Характеристика = СтруктураПараметров.Характеристика;
		Если Характеристика = Неопределено Тогда
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Упаковка") Тогда
		Упаковка = СтруктураПараметров.Упаковка;
		Если НЕ ЗначениеЗаполнено(Упаковка) Тогда
			Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Количество") Тогда
		Количество = СтруктураПараметров.Количество;
	Иначе
		Количество = 1;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("СерийныйНомер") Тогда
		СерийныйНомер = СтруктураПараметров.СерийныйНомер;
	КонецЕсли;
	
	ТекстЗапретаПродаж = "";
	Если НельзяПродавать(Номенклатура, ТекстЗапретаПродаж) Тогда
		СтруктураИнформацииРМК = Новый Структура;
		СтруктураИнформацииРМК.Вставить("ЗаголовокИнформации", НСтр("ru = 'Запрет продаж!'"));
		СтруктураИнформацииРМК.Вставить("ТекстИнформации", ТекстЗапретаПродаж);
		СтруктураПараметров.Вставить("ВывестиИнформациюРМКУправляемый", СтруктураИнформацииРМК);
		Возврат Неопределено;
	КонецЕсли;
	
	ДобавленаСтрока = Ложь;
	ЗагрузкаИзТСД = Ложь;
	ОбновитьКоличество = Ложь;
	Если СтруктураПараметров.Свойство("ЗагрузкаИзТСД") Тогда
		Если СтруктураПараметров.ЗагрузкаИзТСД = Истина Тогда
			ЗагрузкаИзТСД = Истина;
		КонецЕсли;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ОбновитьКоличество") Тогда
		Если СтруктураПараметров.ОбновитьКоличество = Истина Тогда
			ОбновитьКоличество = Истина;
		КонецЕсли;
	КонецЕсли;
	
	МассивТоваров = Неопределено;
	Если (ИспользоватьНастройкуРМК И НаборПравИНастроек.ОбъединятьПозицииСОдинаковымТоваром И СворачиватьПоСтрокеПоиска)
		ИЛИ (ЗагрузкаИзТСД И ОбновитьКоличество) Тогда
		МассивТоваров = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Упаковка", Номенклатура, Характеристика, Упаковка));
	КонецЕсли;
	
	Если МассивТоваров <> Неопределено И МассивТоваров.Количество() <> 0 Тогда
		
		ПоследнееРедактированиеКоличество = МассивТоваров[0].КоличествоУпаковок;
		Если ЗагрузкаИзТСД И ОбновитьКоличество Тогда
			МассивТоваров[0].КоличествоУпаковок = Количество;
		Иначе
			МассивТоваров[0].КоличествоУпаковок = МассивТоваров[0].КоличествоУпаковок + Количество;
		КонецЕсли;
		ТекущаяСтрока = МассивТоваров[0];
		
	Иначе
		Если Объект.Товары.Количество() = 0 Тогда
			Объект.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		ТекущаяСтрока = Объект.Товары.Добавить();
		ТекущаяСтрока.Номенклатура       = Номенклатура;
		ТекущаяСтрока.Характеристика     = Характеристика;
		ТекущаяСтрока.Упаковка           = Упаковка;
		ТекущаяСтрока.КоличествоУпаковок = Количество;
		
		ДобавленаСтрока = Истина;
		
	КонецЕсли;
	
	Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	
	Если ДобавленаСтрока Тогда
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
		СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента");
		СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу");
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ЗаполнитьПредставлениеТабло", НаборПравИНастроек.ЗапросТабло);
		
		Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
			ТекущаяСтрока.КоличествоУпаковок = 1;
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмерения");
		
		СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", Новый Структура("Магазин, РабочееМесто", Объект.Магазин, Объект.РабочееМесто));
		
		СтруктураПараметровНалога = Новый Структура;
		СтруктураПараметровНалога.Вставить("Дата", Объект.Дата);
		СтруктураПараметровНалога.Вставить("Магазин", Объект.Магазин);
		СтруктураДействий.Вставить("ЗаполнитьВидНалога", СтруктураПараметровНалога);
		
		СтруктураПараметровЗаполненияОрганизации = Новый Структура("Магазин", Объект.Магазин);
		Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
			СтруктураПараметровЗаполненияОрганизации.Вставить("ОрганизацияПоУмолчанию", ТаблицаКассККМОрганизаций[0].Организация);
		КонецЕсли;
		СтруктураДействий.Вставить("ЗаполнитьОрганизациюПродажи", СтруктураПараметровЗаполненияОрганизации);
		
		СтруктураПараметровСтавкиНДС = Новый Структура;
		СтруктураПараметровСтавкиНДС.Вставить("Дата", Объект.Дата);
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
			СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
		Иначе
			СтруктураПараметровСтавкиНДС.Вставить("ОрганизацияПоСкладу");
		КонецЕсли;
		СтруктураПараметровСтавкиНДС.Вставить("Магазин", Объект.Магазин);
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина, Ложь));
		Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		Иначе
			СтруктураДействий.Вставить("ПересчитатьСуммуВозвратСУчетомОснования", Новый Структура("Основание", Объект.ЧекККМПродажа));
		КонецЕсли;
		
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
		
		СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу",
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПроверкиСерийныхНомеровПоВладельцу(ТекущаяСтрока, Объект.СерийныеНомера));
		
		СтруктураПроверкиАМ = Новый Структура();
		СтруктураПроверкиАМ.Вставить("Магазин", Объект.Магазин);
		СтруктураПроверкиАМ.Вставить("Организация", Неопределено);
		СтруктураПроверкиАМ.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураПроверкиАМ);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаКодаМаркировки", СтруктураПроверкиАМ);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, ТекущаяСтрока, "КлючСвязи");
		
		Если СтруктураПараметров.Свойство("Штрихкод") Тогда
			ТекущаяСтрока.Штрихкод = СтруктураПараметров.Штрихкод;
		КонецЕсли;
		
	Иначе
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтруктураПолейТЧ", ПолучитьСтруктуруПолейТЧ(СтруктураДействий));

	СтруктураТЧ.Вставить("ТекущаяСтрока" , ПолучитьДанныеТекущейСтроки(ТекущаяСтрока, СтруктураТЧ.СтруктураПолейТЧ));
	КэшированныеЗначения = Неопределено;
	ОбработкаТабличнойЧастиТоварыВызовСервера.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураТЧ.ТекущаяСтрока);
		
	СуммаДоРасчета = ТекущаяСтрока.Сумма;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	ТекущаяСтрока.Продавец = Объект.Продавец;
	
	СуммаПослеРасчета = ТекущаяСтрока.Сумма;
	УменьшениеСуммыЧекаККМ = СуммаДоРасчета - СуммаПослеРасчета;
	УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
	
	Если УменьшениеСуммыЧекаККМ
		И НаборПравИНастроек.ЛогироватьДействияКассира
		И НаборПравИНастроек.ЛогируемыеДействия.Свойство("ИзменениеНоменклатуры") Тогда
		ЛогированиеИзмененийСтроки("ИзменениеНоменклатуры",
								   Неопределено,
								   ПоследняяРедактируемаяНоменклатура, 
								   Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), 
								   ТекущаяСтрока.Номенклатура, 
								   ТекущаяСтрока.Характеристика, 
								   УменьшениеСуммыЧекаККМ);
	КонецЕсли;
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Если ТекущаяСтрока.Цена = 0 Тогда
		Если ИспользоватьНастройкуРМК
			И НаборПравИНастроек.НазначатьЦенуТоварамСНулевойЦеной 
			И ТекущаяСтрока.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.ПодарочныйСертификат Тогда
			СтруктураПараметров.Вставить("ВвестиЦену");
		ИначеЕсли ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
			И ЗначениеЗаполнено(ТекущаяСтрока.ДоговорПлатежногоАгента) Тогда
			СтруктураПараметров.Вставить("ВвестиЦенуПлатежа");
		Иначе
			ТекстСообщения = НСтр("ru = 'На товар %1 %2 не назначена цена!'");
			
			ХарактеристикаПредставление = "";
			Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
				ХарактеристикаПредставление = "(" + ТекущаяСтрока.Характеристика + ")";
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
									ТекущаяСтрока.Номенклатура,
									ХарактеристикаПредставление);
				
			СтруктураИнформацииРМК = Новый Структура;
			СтруктураИнформацииРМК.Вставить("ЗаголовокИнформации", НСтр("ru = 'Цена не установлена!'"));
			СтруктураИнформацииРМК.Вставить("ТекстИнформации", ТекстСообщения);
			СтруктураПараметров.Вставить("ВывестиИнформациюРМКУправляемый", СтруктураИнформацииРМК);
			Объект.Товары.Удалить(ТекущаяСтрока);
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если НЕ АвтоматическийРасчетСкидок Тогда
			ОтменитьСкидкиИОплатуБонусамиСервер();
		КонецЕсли;
	КонецЕсли;
	
	УчетХарактеристик = ПодборТоваровВызовСервера.ФлагУчетаХарактеристик(ТекущаяСтрока.Номенклатура);
	СтруктураПараметров.Вставить("УчетХарактеристик", УчетХарактеристик);
	
	Если ТекущаяСтрока.СтатусУказанияСерий <> 0 Тогда
		СтруктураПараметров.Вставить("ДобавитьСерийныйНомерИОткрытьВводСерии");
	КонецЕсли;
	
	Если ДобавленаСтрока Тогда
		ЗаполнитьОстаткиСервер();
	КонецЕсли;

	ИдентификаторСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		Если ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
			ИнтеграцияЕГАИСРТ.ОбработатьНеобходимостьВводаАкцизнойМарки(СтруктураПараметров, Объект, ТекущаяСтрока);
		ИначеЕсли ТекущаяСтрока.НеобходимостьВводаКодаМаркировки Тогда
			Если ЕстьДанныеМаркировки Тогда
				
				НоваяСтрокаКода = Объект.КодыМаркировки.Добавить();
				НоваяСтрокаКода.КлючСвязи = ТекущаяСтрока.КлючСвязи;
				НоваяСтрокаКода.КодМаркировки = СтруктураПараметров.ШтрихКод;
				НоваяСтрокаКода.ТипКода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.Номенклатура, "ОсобенностьУчета");
				
				ТекущаяСтрока.СтатусУказанияАкцизныхМарок = 1;
				ТекущаяСтрока.КоличествоКодовМаркировки = 1;
			Иначе
				СтруктураПараметров.Вставить("НеобходимостьВводаКодаМаркировки", Истина);
				ТекущаяСтрока.СтатусУказанияАкцизныхМарок = 2;
				ТекущаяСтрока.КоличествоКодовМаркировки = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ДобавитьНайденныеСерийныеНомера(ЭтотОбъект, СтруктураНомера);
	Возврат ИдентификаторСтроки;
	
КонецФункции

#КонецОбласти

// Процедура обрабатывает изменение количество в ТЧ товары. Для обращений извне.
//
&НаКлиенте
Процедура ТоварыПриИзмененииКоличестваУпаковок(СтрокаТабличнойЧасти, ПредыдущееКоличество = 0) Экспорт
	
	КоличествоУпаковок = 0;
	РазрешитьРедактироватьНабранныйЧек = НаборПравИНастроек.РазрешитьРедактироватьНабранныйЧек;
	Если Не РазрешитьРедактироватьНабранныйЧек Тогда 
		Если СтрокаТабличнойЧасти.КоличествоУпаковок < ПредыдущееКоличество Тогда
			КоличествоУпаковок = СтрокаТабличнойЧасти.КоличествоУпаковок;
			СтрокаТабличнойЧасти.КоличествоУпаковок = ПредыдущееКоличество;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	Если Не РазрешитьРедактироватьНабранныйЧек Тогда
		СтруктураДействий.Вставить("ЗапретитьРедактироватьНабранныйЧек");	
	КонецЕсли;
	
	СуммаДоРасчета = СтрокаТабличнойЧасти.Сумма;
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	СуммаПослеРасчета = СтрокаТабличнойЧасти.Сумма;
	УменьшениеСуммыЧекаККМ = СуммаДоРасчета - СуммаПослеРасчета;
	УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
	
	КоличествоУпаковок = ?(КоличествоУпаковок = 0, СтрокаТабличнойЧасти.КоличествоУпаковок, КоличествоУпаковок);
	Если НЕ ПредыдущееКоличество = 0 И ПредыдущееКоличество <> КоличествоУпаковок Тогда
		Если ПредыдущееКоличество > КоличествоУпаковок Тогда
			ВидДействияКассираВРМК = "УменьшениеКоличества";
		ИначеЕсли ПредыдущееКоличество < КоличествоУпаковок Тогда
			ВидДействияКассираВРМК = "УвеличениеКоличества";
		КонецЕсли;
		
		ЛогированиеИзмененийСтроки(ВидДействияКассираВРМК, 
								   ПредыдущееКоличество,
								   СтрокаТабличнойЧасти.Номенклатура, 
								   СтрокаТабличнойЧасти.Характеристика, 
								   КоличествоУпаковок, 
								   Неопределено,
								   УменьшениеСуммыЧекаККМ);
	КонецЕсли;
	
	Если Объект.ПродажаПоЗаказу Тогда
		ОбработкаТабличнойЧастиТоварыКлиентСервер.РаспределитьСуммуИзмененийСтрокиТоваровНаТабличнуюЧастьСкидки(
			Объект.СкидкиНаценки, 
			СтрокаТабличнойЧасти.КлючСвязи, 
			СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки);
	Иначе
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	КонецЕсли;
	
	// Интерфейс ЕГАИС
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
		ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
		
		РозничныеПродажиКлиент.ЗаполнитьКоличествоКодовМаркировки(Объект.Товары, Объект.КодыМаркировки);
		РозничныеПродажиКлиент.УстановитьЗначениеСтатусаКодаМаркировки(Объект.Товары);
	Иначе
		ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарокВСтроке(СтрокаТабличнойЧасти, Объект.АкцизныеМарки);
		ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(СтрокаТабличнойЧасти);
		
		РозничныеПродажиКлиент.ЗаполнитьКоличествоКодовМаркировкиВСтроке(СтрокаТабличнойЧасти, Объект.КодыМаркировки);
		РозничныеПродажиКлиент.УстановитьЗначениеСтатусаКодаМаркировкиВСтроке(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	ОбновитьФорму();
	
	ОбновлениеДисплеяПокупателя("ИзмененияКоличества");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУказаниеСерий(ЗначениеВозврата, ПараметрыФормыУказанияСерий) Экспорт
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		ОбновитьФорму();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораВнесенияДенег(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено И ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		ПараметрыВыполнения = ДенежныеСредстваКлиент.ПараметрыВыполненияОперацииВнесениеДенег();
		ПараметрыВыполнения.СуммаВнесения = РезультатОткрытияФормы.Сумма;
		ПараметрыВыполнения.РКО = РезультатОткрытияФормы.РасходныйКассовыйОрдер;
		ПараметрыВыполнения.КассаККМ = РезультатОткрытияФормы.Касса;
		ПараметрыВыполнения.УникальныйИдентификатор = УникальныйИдентификатор;
		
		Оповещение = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораВнесенияДенегЗавершение", ЭтотОбъект, ПараметрыВыполнения);
		ДенежныеСредстваКлиент.НачатьВнесениеДенег(Оповещение, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораВнесенияДенегЗавершение(РезультатВыполнения, ПараметрыВыполнения) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда 
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Ошибка внесения денег.'"), ПараметрыВыполнения.ТекстСообщения)
	Иначе
		ЛогированиеБезДополнительныхДанных("ВнесениеДенег", , РезультатВыполнения.СуммаВнесения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуЗаменыПравПользователя(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		глЗначениеПеременнойУстановить("ПользовательИзмененныхПрав", РезультатОткрытияФормы, Истина);
		глЗначениеПеременнойУстановитьСервер("ПользовательИзмененныхПрав", РезультатОткрытияФормы, Истина);
		Оповестить("ОбновитьФормуМенюРМК");
		ЛогированиеБезДополнительныхДанных("ЗаменаПользователя", ,ДополнительныеПараметры.Пользователь);
		
		ПриИзмененииПравСервер();
		ОбновитьФорму();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораЧекаПриПродолженииЧека(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		ЧекККМВОбработке = РезультатОткрытияФормы.ЧекККМ;
		
		Отказ = Ложь;
		
		ПродолженииЧекаСервера(ЧекККМВОбработке, Отказ);
		ОбновитьФорму();
		
		Если Отказ Тогда
			ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
			ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка загрузки чека.'");
			ПараметрыИнформации.ТекстИнформации     = НСтр("ru = 'Возникла ошибка при попытке загрузить отложенный чек!'")
														+ Символы.ПС + ОписаниеОшибки();
			
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
			Возврат;
		КонецЕсли;
		
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
		
		ЛогированиеПоЧеку("ЧекПродолжен", РезультатОткрытияФормы.ЧекККМ);
		
		//НДС
		СтруктураДействий = Новый Структура;
		СтруктураПараметровСтавкиНДС = Новый Структура;
		СтруктураПараметровСтавкиНДС.Вставить("Дата", Объект.Дата);
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
			СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
		Иначе
			СтруктураПараметровСтавкиНДС.Вставить("ОрганизацияПоСкладу");
		КонецЕсли;
		СтруктураПараметровСтавкиНДС.Вставить("Магазин", Объект.Магазин);
		СтруктураПараметровСтавкиНДС.Вставить("НеобходимоОбработатьВсюТЧ", Истина);
		
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 
									ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, , СтруктураДействий, Неопределено);
		
		// Интерфейс ЕГАИС
		ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, ВидимостьКолонкиМаркировки);
		ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
		ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
		
		РозничныеПродажиКлиент.ЗаполнитьКоличествоКодовМаркировки(Объект.Товары, Объект.КодыМаркировки);
		РозничныеПродажиКлиент.УстановитьЗначениеСтатусаКодаМаркировки(Объект.Товары);
		
		ОбновитьФорму();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораЧекаПриПечатиПробитогоЧека(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		ЧекККМСсылка = РезультатОткрытияФормы.ЧекККМ;
		МассивСсылокЧеков = Новый Массив;
		МассивСсылокЧеков.Добавить(ЧекККМСсылка);
		
		НапечататьЧекиККМ(МассивСсылокЧеков);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораЧекаПриВозврате(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	// &ЗамерПроизводительности  
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ВыборЧекаПриВозврате");	
	
	Если РезультатОткрытияФормы <> Неопределено Тогда
		
		ЧекККМПродажаОснование = РезультатОткрытияФормы.ЧекККМ;
		
		ДополнительныеПараметры = Новый Структура;
		Если ЗначениеЗаполнено(ЧекККМПродажаОснование) Тогда
			ДополнительныеПараметры.Вставить("ЧекККМПродажаОснование", ЧекККМПродажаОснование);
		Иначе
			ДополнительныеПараметры.Вставить("ЧекККМПродажаОснование", ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка"));
		КонецЕсли;
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораПричиныВозврата", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораПричиныВозврата",, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
		
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораЧекаПриПробитииЧекаЗавершение(РезультатОперации, ПараметрыОперации) Экспорт; 
	
	Если РезультатОперации.ЧекПробит Тогда
		ЧекККМВОбработке = ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка");
	Иначе
		Возврат;
	КонецЕсли;
	
	ВывестиДополнительноеСообщение = Ложь;
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	
	СтатусПробитВККТ = Ложь;
	ЗаписатьЧекККМ(ПараметрыОперации.ЧекККМСсылка, РезультатОперации, ПараметрыОперации.МассивСсылокЧеков, ВывестиДополнительноеСообщение, ПараметрыИнформации, СтатусПробитВККТ);
	
	Если ВывестиДополнительноеСообщение Тогда
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;
	
	СоздатьНовыйНаборКлиент();
	
	Элементы.СтраницыИнформации.ТекущаяСтраница = Элементы.СтраницаИнформации;
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораЧекаПриПробитииЧека(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		ЧекККМСсылка = РезультатОткрытияФормы.ЧекККМ;
		
		Если РезультатОткрытияФормы.Проведен Тогда
			КассаККМ = РезультатОткрытияФормы.КассаККМ;
			
			ПараметрыЗаполненияЧекаККМ = Новый Структура;
			МассивСсылокЧеков = Новый Массив;
			
			Контекст = Новый Структура();
			Контекст.Вставить("ЧекККМСсылка"       , ЧекККМСсылка);
			Контекст.Вставить("КассаККМ"           , КассаККМ);
			Контекст.Вставить("МассивСсылокЧеков"  , МассивСсылокЧеков);
			
			Оповещение = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораЧекаПриПробитииЧекаЗавершение", ЭтотОбъект, Контекст);
			ПробитьЧекККМ(Оповещение, ЧекККМСсылка, КассаККМ, ПараметрыЗаполненияЧекаККМ);
			
		Иначе
			ЧекККМВОбработке = РезультатОткрытияФормы.ЧекККМ;
			Отказ               = Ложь;
			ЗаполнитьДаннымиПоЧекуККМ(ЧекККМВОбработке, Отказ);
			Если Отказ Тогда
				ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
				ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка загрузки чека.'");
				ПараметрыИнформации.ТекстИнформации     = НСтр("ru = 'Возникла ошибка при попытке загрузить чек!'")
															+ Символы.ПС + ОписаниеОшибки();
				ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
				Возврат;
			КонецЕсли;
			
			ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
			
			ОбновитьФорму();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораЗаказаПокупателя(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		Объект.ЗаказПокупателя = РезультатОткрытияФормы.ЗаказПокупателя;
		ЗаполнитьНаОснованииЗаказаПокупателя();
		ЗавершитьОбработкуДокументаОснования();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораПричиныВозврата(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если РезультатОткрытияФормы = Неопределено Тогда
		Объект.ЧекККМПродажа = ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка");
		УстановитьДоступностьОтдельныхЭлементовФормы("КомандаЧО09ОперацияДС", ДоступностьПриемаДС());
	Иначе
		ПричинаВозврата = РезультатОткрытияФормы.ПричинаВозврата;
		
		СоздатьНовыйНаборКлиент();
		
		Объект.ЧекККМПродажа                  = ДополнительныеПараметры.ЧекККМПродажаОснование;
		Объект.АналитикаХозяйственнойОперации = ПричинаВозврата;
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат");
		
		Если ЗначениеЗаполнено(Объект.ЧекККМПродажа) Тогда
			ЗаполнитьНаОснованииЧекаККМ(Объект.ЧекККМПродажа);
			УстановитьДоступностьОтдельныхЭлементовФормы("КомандаЧО09ОперацияДС", ДоступностьПриемаДС());
		КонецЕсли;
		
		Если Объект.Товары.Количество() > 0  Тогда
			ДозаполнитьТаблицыОбъекта();
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		КонецЕсли;
		
		Если Объект.ОперацияСДенежнымиСредствами Тогда
			ЭтоВозвратАванса = Истина;
		КонецЕсли;
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
		// Интерфейс ЕГАИС
		ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, ВидимостьКолонкиМаркировки);
		ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
		ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
		
		РозничныеПродажиКлиент.ЗаполнитьКоличествоКодовМаркировки(Объект.Товары, Объект.КодыМаркировки);
		РозничныеПродажиКлиент.УстановитьЗначениеСтатусаКодаМаркировки(Объект.Товары);
		
		ОбновитьФорму();
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДисконтнойКарты(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		ЛогированиеБезДополнительныхДанных("ВыбранаДисконтнаяКарта", ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка"), Объект.ДисконтнаяКарта);
		Объект.ДисконтнаяКарта = РезультатОткрытияФормы.ДисконтнаяКарта;
		Модифицированность = Истина;
		ТекстСообщенияСменыКарты = "";
		ПриИзмененииДисконтнаяКартаСервер(ТекстСообщенияСменыКарты);
		Если ПустаяСтрока(ТекстСообщенияСменыКарты) Тогда
			ПровестиОпрос();
			ОбновитьФорму();
		Иначе
			ЗаголовокИнформации = "";
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщенияСменыКарты);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуПоискаДисконтнойКарты(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		КодЗначение = РезультатОткрытияФормы.ВведенноеЧисло;
		Если РезультатОткрытияФормы.РежимПоискаКарты = "ФИО"
			ИЛИ РезультатОткрытияФормы.РежимПоискаКарты = "НомерТелефона" 
			ИЛИ РезультатОткрытияФормы.РежимПоискаКарты = "Email" Тогда
			НайтиИУстановитьКарту(РезультатОткрытияФормы, ДополнительныеПараметры);
		Иначе
			Если ЗначениеЗаполнено(КодЗначение) Тогда
				ИсполняемаяОперацияЛогирования = "ВведенНомерКарты";
				СтруктураПараметровКлиента = ПолученМагнитныйКод(КодЗначение);
				ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуУправляемыхСкидок(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если РезультатОткрытияФормы <> Неопределено
		И ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		
		УправляемыеСкидки.ЗагрузитьЗначения(РезультатОткрытияФормы.МассивУправляемыхСкидок);
		
		// Добавление новых управляемых скидок.
		
		Для каждого СкидкаНаценка Из РезультатОткрытияФормы.МассивУправляемыхСкидок Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("СкидкаНаценка", СкидкаНаценка);
			
			Если Объект.УправляемыеСкидки.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				СтрокаУправляемыеСкидки = Объект.УправляемыеСкидки.Добавить();
				СтрокаУправляемыеСкидки.СкидкаНаценка = СкидкаНаценка;
				ЛогированиеБезДополнительныхДанных("ВыбранаУправляемаяСкидка", , СкидкаНаценка);
			КонецЕсли;
			
		КонецЦикла;
		
		// Удаление управляемых скидок.
		
		КолвоЭлементовКоллекции = Объект.УправляемыеСкидки.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = Объект.УправляемыеСкидки[КолвоЭлементовКоллекции - ОбратныйИндекс];
			
			Если НЕ РезультатОткрытияФормы.МассивУправляемыхСкидок.Найти(ЭлементКоллекции.СкидкаНаценка) = Неопределено Тогда
				ЛогированиеБезДополнительныхДанных("ОтменаУправляемойСкидки", ЭлементКоллекции.СкидкаНаценка);
				Объект.УправляемыеСкидки.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого КодСкидки Из РезультатОткрытияФормы.СписокОдноразовыхКодов Цикл
			НоваяСтрока = Объект.ПредъявленныеКодыОднократныхСкидок.Добавить();
			НоваяСтрока.КодСкидки = КодСкидки.Значение;
		КонецЦикла;
		
		НазначитьАвтоматическиеСкидкиКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуДокументаЗаменаОднойКарты(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Объект.ДисконтнаяКарта = РезультатОткрытияФормы;
		Модифицированность = Истина;
		ДисконтнаяКартаПриИзменении();
		ОтменитьОплатуБонусами();
		
		ДисконтнаяКартаДляЗамены = ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка");
		
		ОбновитьФорму();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуРучныхСкидок(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		ПодключитьОбработчикОжидания("Подключаемый_КомандаСкидки" + СтрЗаменить(РезультатОткрытияФормы, "Команда", ""), 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораНоменклатурыТоварыПередНачаломДобавления(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		ДобавитьНоменклатуруВТабЧасть(РезультатОткрытияФормы, Неопределено, Неопределено, 1, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораНоменклатурыТоварыНоменклатураНачалоВыбора(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(РезультатОткрытияФормы) Тогда
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		СтрокаТабличнойЧасти.Номенклатура = РезультатОткрытияФормы;
		
		ПараметрДействия = Новый Структура;
		ПараметрДействия.Вставить("ОткрытаБлокирующаяФорма", Ложь);
		ПараметрДействия.Вставить("ОбновитьПоследнееРедактируемыеЗначения");
		ПараметрДействия.Вставить("ДобавитьСерийныйНомерИОткрытьВводСерии", Неопределено);
		
		ТоварыПриИзмененииНоменклатуры(СтрокаТабличнойЧасти,, ПараметрДействия);
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		
		Если НЕ ПараметрДействия.ОткрытаБлокирующаяФорма Тогда
			ДобавитьСерийныйНомерИОткрытьВводСерии(СтрокаТабличнойЧасти);
			ОбновитьПоследнееРедактируемыеЗначения(СтрокаТабличнойЧасти)
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораПродавца(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Объект.Продавец = РезультатОткрытияФормы;
		ЛогированиеВводаПродавца(Неопределено, ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка"), Объект.Продавец);
	КонецЕсли;
	УстановитьЗаголовок();
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаЧислаВвестиШтрихкод(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		КодЗначение = РезультатОткрытияФормы.ВведенноеЧисло;
		КодЗначение = Формат(КодЗначение, "ЧЦ=128; ЧДЦ=0; ЧГ=0");
		Если ЗначениеЗаполнено(КодЗначение)  Тогда
			ИсполняемаяОперацияЛогирования = "ВведенШтрихкод";
			СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(КодЗначение);
			ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
			Если Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
				ОбновлениеДисплеяПокупателяДобавлениеТовара(Элементы.Товары.ТекущиеДанные);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаЧислаВвестиВыемкаДенегЗавершение(РезультатОперации, ПараметрыОперации) Экспорт;
	
	Если РезультатОперации <> Неопределено Тогда
		Если РезультатОперации.Результат Тогда
			ЛогированиеБезДополнительныхДанных("ВыемкаДенег", , РезультатОперации.ИзымаемаяСумма);
		Иначе
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Ошибка выемки денег'"), РезультатОперации.ТекстСообщения);
		КонецЕсли
	КонецЕсли;
	
	Если ПараметрыОперации.ПоследняяОперация Тогда
		ЭтотОбъект.Доступность = Истина;
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ВыемкаДенегЗавершение");
	
	Если ПараметрыОперации.ТекущийЭлемент < ПараметрыОперации.КоличествоЭлементов Тогда
		
		СтрокаВыручки = ПараметрыОперации.СписокВидовВыручки.Получить(ПараметрыОперации.ТекущийЭлемент);
		ПараметрыОперации.ТекущийЭлемент = ПараметрыОперации.ТекущийЭлемент + 1;
		
		Если ПараметрыОперации.ОсталосьИзъять = 0 Тогда
			ЭтотОбъект.Доступность = Истина;
			Возврат;
		КонецЕсли;
		
		Если СтрокаВыручки.СуммаОстаток >= ПараметрыОперации.ОсталосьИзъять Тогда
			СуммаВыемки = ПараметрыОперации.ОсталосьИзъять;
			ПараметрыОперации.ОсталосьИзъять = 0;
		Иначе
			СуммаВыемки = СтрокаВыручки.СуммаОстаток;
			ПараметрыОперации.ОсталосьИзъять = ПараметрыОперации.ОсталосьИзъять - СтрокаВыручки.СуммаОстаток;
		КонецЕсли;
		
		ДополнительныеПараметрыВыемки = Новый Структура;
		ДополнительныеПараметрыВыемки.Вставить("ДоговорПлатежногоАгента", СтрокаВыручки.ДоговорПлатежногоАгента);
		
		ПараметрыВыполнения = ДенежныеСредстваКлиент.ПараметрыВыполненияОперацииВыемкаДенег();
		ПараметрыВыполнения.ИзымаемаяСумма = СуммаВыемки;
		ПараметрыВыполнения.КассаККМ = ПараметрыОперации.ЗначениеВыбораКасса;
		ПараметрыВыполнения.УникальныйИдентификатор = УникальныйИдентификатор;
		ПараметрыВыполнения.ДополнительныеПараметры = ДополнительныеПараметрыВыемки; 
		ПараметрыВыполнения.БезВыводаСообщений = Истина;
		
		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
		Если ВозможносьОперацииВыемкиДенежныхСредств(ПараметрыВыполнения, ПараметрыИнформации) Тогда
			Оповещение = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаЧислаВвестиВыемкаДенегЗавершение", ЭтотОбъект, ПараметрыОперации);
			ДенежныеСредстваКлиент.НачатьВыемкуДенег(Оповещение, ПараметрыВыполнения); 
		Иначе
			ЭтотОбъект.Доступность = Истина;
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
			ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
		КонецЕсли;
		
	Иначе
		
		Если ПараметрыОперации.ОсталосьИзъять  > 0 Тогда
			
			ДополнительныеПараметрыВыемки = Новый Структура;
			ДополнительныеПараметрыВыемки.Вставить("ДоговорПлатежногоАгента", ПредопределенноеЗначение("Справочник.ДоговорыПлатежныхАгентов.ПустаяСсылка"));
			
			ПараметрыОперации.ПоследняяОперация = Истина;
			ПараметрыВыполнения = ДенежныеСредстваКлиент.ПараметрыВыполненияОперацииВыемкаДенег();
			ПараметрыВыполнения.ИзымаемаяСумма = ПараметрыОперации.ОсталосьИзъять;
			ПараметрыВыполнения.КассаККМ = ПараметрыОперации.ЗначениеВыбораКасса;
			ПараметрыВыполнения.УникальныйИдентификатор = УникальныйИдентификатор;
			ПараметрыВыполнения.ДополнительныеПараметры = ДополнительныеПараметрыВыемки; 
			ПараметрыВыполнения.БезВыводаСообщений = Истина;
			
			ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
			Если ВозможносьОперацииВыемкиДенежныхСредств(ПараметрыВыполнения, ПараметрыИнформации) Тогда
				Оповещение = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаЧислаВвестиВыемкаДенегЗавершение", ЭтотОбъект, ПараметрыОперации);
				ДенежныеСредстваКлиент.НачатьВыемкуДенег(Оповещение, ПараметрыВыполнения); 
			Иначе
				ЭтотОбъект.Доступность = Истина;
				ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
			КонецЕсли;
			
		Иначе
			ЭтотОбъект.Доступность = Истина;
		КонецЕсли;
		
		ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
		
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаЧислаВвестиВыемкаДенег(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		ЗначениеВыбораСумма = РезультатОткрытияФормы.ВведенноеЧисло;
		Если ЗначениеЗаполнено(ЗначениеВыбораСумма) Тогда
			
			ОсталосьИзъять = ЗначениеВыбораСумма;
			ЗаполнитьСписокВидовВыручки(ДополнительныеПараметры.ЗначениеВыбораКасса);
			
			ПараметрыОперации = Новый Структура();
			ПараметрыОперации.Вставить("СписокВидовВыручки" , СписокВидовВыручки);
			ПараметрыОперации.Вставить("КоличествоЭлементов", СписокВидовВыручки.Количество());
			ПараметрыОперации.Вставить("ТекущийЭлемент"     , 0);
			ПараметрыОперации.Вставить("ОсталосьИзъять"     , ОсталосьИзъять);
			ПараметрыОперации.Вставить("ПоследняяОперация"  , Ложь);
			ПараметрыОперации.Вставить("ЗначениеВыбораКасса", ДополнительныеПараметры.ЗначениеВыбораКасса);
			
			ЭтотОбъект.Доступность = Ложь;
			ОповещениеОткрытьФормуВводаЧислаВвестиВыемкаДенегЗавершение(Неопределено, ПараметрыОперации);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаЧислаТоварыПриИзмененииНоменклатуры(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	ПараметрДействия = ДополнительныеПараметры.ПараметрДействия;
	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ПараметрДействия.ИдентификаторСтроки);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Цена = 0 ;
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Цена = РезультатОткрытияФормы.ВведенноеЧисло;
		СтрокаТабличнойЧасти.Цена = Цена;
		ПараметрДействия.Вставить("ПересчиталиЦену", Истина);
	КонецЕсли;
	
	Если Цена = 0 Тогда
		Если ПараметрДействия.Свойство("ПредупреждениеНулевойЦены") Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ПараметрДействия.ПредупреждениеНулевойЦены);
		Иначе
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Цена не установлена!'"));
		КонецЕсли;
		Если ПараметрДействия.Свойство("НеУдалятьСтроку") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПродолжитьДействияТоварыПриИзмененииНоменклатуры(ПараметрДействия);
	ЗавершитьДействияТоварыПриИзмененииНоменклатуры(ПараметрДействия);
	
	Если ПараметрДействия.ПрекратитьДействия Тогда
		Возврат;
	КонецЕсли;
	
	СерийныйНомер = Неопределено;
	ОткрыватьРедактированиеСтроки = Ложь;
	Если ПараметрДействия.Свойство("ОткрыватьРедактированиеСтроки") Тогда
		ОткрыватьРедактированиеСтроки = ПараметрДействия.ОткрыватьРедактированиеСтроки;
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("НеобходимостьВводаАкцизнойМарки") 
		И ПараметрДействия.НеобходимостьВводаАкцизнойМарки Тогда
		ВвестиАкцизнуюМарку(СтрокаТабличнойЧасти, "", ПараметрДействия);
		Возврат;
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("НеобходимостьВводаКодаМаркировки") 
		И ПараметрДействия.НеобходимостьВводаКодаМаркировки Тогда
		ВвестиАкцизнуюМарку(СтрокаТабличнойЧасти, "", ПараметрДействия);
		Возврат;
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("ДобавитьСерийныйНомерИОткрытьВводСерии", СерийныйНомер) Тогда
		ДобавитьСерийныйНомерИОткрытьВводСерии(СтрокаТабличнойЧасти, СерийныйНомер, ОткрыватьРедактированиеСтроки);
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("ОбновитьПоследнееРедактируемыеЗначения") Тогда
		ОбновитьПоследнееРедактируемыеЗначения(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("ОбновлениеДисплеяПокупателяДобавлениеТовара") Тогда
		ОбновлениеДисплеяПокупателяДобавлениеТовара(СтрокаТабличнойЧасти);
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("ТоварыПриИзмененииНаСервере") Тогда
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	КонецЕсли;
	
	ОбновитьФорму();
	
	Если ОткрыватьРедактированиеСтроки Тогда
		ПодключитьОбработчикОжидания("РедактированиеСтрокиКлиент", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаЧислаТоварыПриИзмененииХарактеристикиНоменклатуры(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ПараметрДействия.ИдентификаторСтроки);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Цена = 0 ;
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Цена = РезультатОткрытияФормы.ВведенноеЧисло;
		СтрокаТабличнойЧасти.Цена = Цена;
		ДополнительныеПараметры.ПараметрДействия.ПересчиталиЦену = Ложь;
	КонецЕсли;
	
	Если Цена = 0 Тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Цена не установлена!'"))
	КонецЕсли;
	
	ЗавершитьДействияТоварыПриИзмененииХарактеристикиНоменклатуры(ДополнительныеПараметры.ПараметрДействия)
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаЧислаИзменитьПроцентРучнойСкидкиНаценкиВСтроке(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЧислоВвода = РезультатОткрытияФормы.ВведенноеЧисло;
		
		СуммаДоРасчета = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.ПроцентРучнойСкидки = ДополнительныеПараметры.Знак * ЧислоВвода;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		
		ОбновитьФорму();
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
		
		СуммаПослеРасчета = СтрокаТабличнойЧасти.Сумма;
		УменьшениеСуммыЧекаККМ = СуммаДоРасчета - СуммаПослеРасчета;
		УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
		Если ЧислоВвода = 0  Тогда
			ЛогированиеВводаРучнойСкидки(НСтр("ru = 'Отмена ручной скидки в строке'") , 0, 0);
		Иначе
			ЛогированиеВводаРучнойСкидки(ДополнительныеПараметры.ЗаголовокФормы , СтрокаТабличнойЧасти.ПроцентРучнойСкидки, УменьшениеСуммыЧекаККМ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаЧислаИзменитьСуммуРучнойСкидкиНаценкиВСтроке(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЧислоВвода = РезультатОткрытияФормы.ВведенноеЧисло;
		
		СуммаДоРасчета = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.СуммаРучнойСкидки = ДополнительныеПараметры.Знак * ЧислоВвода;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуСкидки", Ложь, Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		
		ОбновитьФорму();
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
		
		СуммаПослеРасчета = СтрокаТабличнойЧасти.Сумма;
		УменьшениеСуммыЧекаККМ = СуммаДоРасчета - СуммаПослеРасчета;
		УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
		Если ЧислоВвода = 0  Тогда
			ЛогированиеВводаРучнойСкидки(НСтр("ru = 'Отмена ручной скидки в строке'") , 0, 0);
		Иначе
			ЛогированиеВводаРучнойСкидки(ДополнительныеПараметры.ЗаголовокФормы , СтрокаТабличнойЧасти.СуммаРучнойСкидки, УменьшениеСуммыЧекаККМ);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаЧислаИзменитьПроцентРучнойСкидкиНаценкиВЧеке(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		ЧислоВвода = РезультатОткрытияФормы.ВведенноеЧисло;
		
		СуммаДоРасчета = Объект.Товары.Итог("Сумма") + Объект.Товары.Итог("СуммаСкидкиОплатыБонусом");
		ПроцентРучнойСкидкиНаценки = ЧислоВвода * ДополнительныеПараметры.Знак;
		СуммаРучнойСкидкиНаценки   = ДополнительныеПараметры.СуммаБезСкидок * ПроцентРучнойСкидкиНаценки / 100;
		
		НазначитьРучнуюСкидку(СуммаРучнойСкидкиНаценки);
	
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		
		ОбновитьФорму();
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
		
		СуммаПослеРасчета = Объект.Товары.Итог("Сумма") + Объект.Товары.Итог("СуммаСкидкиОплатыБонусом");
		УменьшениеСуммыЧекаККМ = СуммаДоРасчета - СуммаПослеРасчета;
		УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
		Если ЧислоВвода = 0  Тогда
			ЛогированиеВводаРучнойСкидки(НСтр("ru = 'Отмена ручной скидки в чеке'") , 0, 0);
		Иначе
			ЛогированиеВводаРучнойСкидки(ДополнительныеПараметры.ЗаголовокФормы , ПроцентРучнойСкидкиНаценки, УменьшениеСуммыЧекаККМ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаЧислаИзменитьСуммуРучнойСкидкиНаценкиВЧеке(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		ЧислоВвода = РезультатОткрытияФормы.ВведенноеЧисло;
		
		СуммаДоРасчета = Объект.Товары.Итог("Сумма");
		СуммаРучнойСкидкиНаценки = ЧислоВвода * ДополнительныеПараметры.Знак;
		НазначитьРучнуюСкидку(СуммаРучнойСкидкиНаценки);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		
		ОбновитьФорму();
		
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
		
		СуммаПослеРасчета = Объект.Товары.Итог("Сумма");
		УменьшениеСуммыЧекаККМ = СуммаДоРасчета - СуммаПослеРасчета;
		УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
		Если ЧислоВвода = 0  Тогда
			ЛогированиеВводаРучнойСкидки(НСтр("ru = 'Отмена ручной скидки в чеке'") , 0, 0);
		Иначе
			ЛогированиеВводаРучнойСкидки(ДополнительныеПараметры.ЗаголовокФормы , СуммаРучнойСкидкиНаценки, УменьшениеСуммыЧекаККМ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораКассыПриОткрытииДенежногоЯщика(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено И ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		ЗначениеВыбораКасса = РезультатОткрытияФормы.Касса;
		ЗавершитьВыбораКассыПриОткрытииДенежногоЯщика(ЗначениеВыбораКасса);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораКассыВвестиВыемкаДенег(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено И ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		ЗначениеВыбораКасса = РезультатОткрытияФормы.Касса;
		ЗавершитьВыбораКассыВвестиВыемкаДенег(ЗначениеВыбораКасса);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораКассыОтчетБезГашения(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено И ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		ЗначениеВыбораКасса = РезультатОткрытияФормы.Касса;
		НапечататьОтчетБезГашения(ЗначениеВыбораКасса)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаСерийныхНомеров(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено 
		И ТипЗнч(РезультатОткрытияФормы) = Тип("Массив") Тогда
		
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		Если СтрокаТЧ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТЧСерийныеНомера = Объект.СерийныеНомера;
		НовыйКлючСвязи = ОбработкаТабличнойЧастиТоварыКлиент.ДобавитьСерийныеНомераВТабличнуюЧасть(ТЧСерийныеНомера, РезультатОткрытияФормы, ДополнительныеПараметры.ТекущийКлючСвязи);
		Количество = РезультатОткрытияФормы.Количество();
		ПоследнееРедактированиеКоличество = СтрокаТЧ.КоличествоУпаковок;
		ЭтотОбъект.Модифицированность       = Истина;
		СтрокаТЧ.КлючСвязиСерийныхНомеров = НовыйКлючСвязи;
		СтрокаТЧ.КоличествоУпаковок       = Количество;
		
		ТоварыПриИзмененииКоличестваУпаковок(СтрокаТЧ, ПоследнееРедактированиеКоличество);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораНоменклатуры(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		ЛогированиеВводаНоменклатурыИХарактеристики(ДополнительныеПараметры.ТекКод, 
													РезультатОткрытияФормы.Номенклатура, 
													РезультатОткрытияФормы.Характеристика);
		ДобавитьНайденныеПозицииТоваровКлиент(РезультатОткрытияФормы);
			
	КонецЕсли;
	ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуРедактированияСтроки(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		
		ДанныеСтрокиТовары = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		
		Если ДанныеСтрокиТовары = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если РезультатОткрытияФормы.Команда = "Сторно" Тогда
			Отказ = Ложь;
			ТоварыПередУдалениемКлиент(Отказ);
			
			Если НЕ Отказ Тогда
				Объект.Товары.Удалить(ДанныеСтрокиТовары);
				ТоварыПослеУдаленияСервер();
				ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
				ОбновитьФорму();
			КонецЕсли;
		ИначеЕсли РезультатОткрытияФормы.Команда = "Редактирование" Тогда
			
			НуженПересчетСкидок = Ложь;
			Если РезультатОткрытияФормы.ИзмененыСерии Тогда
				ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
				
				ОбработатьУказаниеСерийСервер(РезультатОткрытияФормы.ПараметрыФормыУказанияСерий);
				
			ИначеЕсли РезультатОткрытияФормы.ИзмененыСертификаты Тогда
				
				ПараметрыФормыУказанияСертификатов = РезультатОткрытияФормы.ПараметрыФормыУказанияСертификатов;
				ТекущиеДанныеИдентификатор = РезультатОткрытияФормы.ТекущиеДанныеИдентификатор;
				СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
				Если СтрокаТЧ <> Неопределено Тогда
					МассивСерийныхНомеров = ПараметрыФормыУказанияСертификатов.МассивСерийныхНомеров;
					ТекущийКлючСвязи = ПараметрыФормыУказанияСертификатов.ТекущийКлючСвязи;
					ТЧСерийныеНомера = Объект.СерийныеНомера;
					НовыйКлючСвязи = ОбработкаТабличнойЧастиТоварыКлиент.ДобавитьСерийныеНомераВТабличнуюЧасть(ТЧСерийныеНомера, 
																											   МассивСерийныхНомеров, 
																											   ТекущийКлючСвязи);
					Количество = МассивСерийныхНомеров.Количество();
					ПоследнееРедактированиеКоличество = СтрокаТЧ.КоличествоУпаковок;
					ЭтотОбъект.Модифицированность     = Истина;
					СтрокаТЧ.КлючСвязиСерийныхНомеров = НовыйКлючСвязи;
					СтрокаТЧ.КоличествоУпаковок       = Количество;
					
					ТоварыПриИзмененииКоличестваУпаковок(СтрокаТЧ, ПоследнееРедактированиеКоличество);
				КонецЕсли;
			ИначеЕсли ДанныеСтрокиТовары.КоличествоУпаковок <> РезультатОткрытияФормы.Количество Тогда
				ПоследнееРедактированиеКоличество = ДанныеСтрокиТовары.КоличествоУпаковок;
				ДанныеСтрокиТовары.КоличествоУпаковок = РезультатОткрытияФормы.Количество;
				ТоварыПриИзмененииКоличестваУпаковок(ДанныеСтрокиТовары, ПоследнееРедактированиеКоличество);
			КонецЕсли;
			
			Если ДанныеСтрокиТовары.Цена <> РезультатОткрытияФормы.Цена Тогда
				ДанныеСтрокиТовары.Цена = РезультатОткрытияФормы.Цена;
				ТоварыЦенаПриИзменении(Неопределено);
				НуженПересчетСкидок = Истина;
			КонецЕсли;
			
			Если ДанныеСтрокиТовары.Продавец <> РезультатОткрытияФормы.Продавец Тогда
				ЛогированиеБезДополнительныхДанных("ИзменениеПродавца", ДанныеСтрокиТовары.Продавец, РезультатОткрытияФормы.Продавец);
				ДанныеСтрокиТовары.Продавец = РезультатОткрытияФормы.Продавец;
			КонецЕсли;
			
			Если ДанныеСтрокиТовары.Упаковка <> РезультатОткрытияФормы.Упаковка Тогда 
				ДанныеСтрокиТовары.Упаковка = РезультатОткрытияФормы.Упаковка;
				ТоварыПриИзмененииУпаковки(ДанныеСтрокиТовары);
				ТоварыПриИзмененииКоличестваУпаковок(ДанныеСтрокиТовары);
			КонецЕсли;
			
			Если НуженПересчетСкидок Тогда
				ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
			КонецЕсли;
			ОбновитьФорму();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуОплатыНаличными(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	ЛогированиеБезДополнительныхДанных("ОплатаНаличными");
	
	Если РезультатОткрытияФормы = Неопределено Тогда
		ОбработатьОтказОтОплаты();
		Возврат;
	Иначе
		ДобавитьТаблицуОплат(РезультатОткрытияФормы);
		ЗавершитьОплатуТоваров(ДополнительныеПараметры.Печать);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуСложнойОплаты(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	ПараметрДействия = ДополнительныеПараметры.ПараметрДействия;
	
	Если ПараметрДействия.ОплатаТолькоНаличными Тогда
		ЛогированиеБезДополнительныхДанных("ОплатаНаличными");
	Иначе
		ЛогированиеБезДополнительныхДанных("СложнаяОплата");
	КонецЕсли;
	
	Если Не РезультатОткрытияФормы = Неопределено И РезультатОткрытияФормы.Свойство("ЕстьОплатаПоПлатежнойКарте") Тогда 
		ДанныеОтправленыВБанк = Истина;
	ИначеЕсли РезультатОткрытияФормы = Неопределено И ПередаватьТаблицуОплат Тогда 
		ОбработатьУспешноеПробитиеЧека();
	КонецЕсли;
	
	Если РезультатОткрытияФормы  = Неопределено Тогда
		ОбработатьОтказОтОплаты();
		Возврат;
	Иначе
		ДобавитьТаблицуОплат(РезультатОткрытияФормы, ПараметрДействия.ОрганизацияДляДобавленияВТаблицы, ПараметрДействия.КлючСвязиТПЧеков);
		Если РезультатОткрытияФормы.Свойство("АдресТаблицыПогашениеПодарочныхСертификатов") Тогда
			ДобавитьТаблицуПогашениеПодарочныхСертификатов(РезультатОткрытияФормы.АдресТаблицыПогашениеПодарочныхСертификатов, ПараметрДействия.ОрганизацияДляДобавленияВТаблицы, ПараметрДействия.КлючСвязиТПЧеков)
		КонецЕсли;
		ОплатитьТоварыСложнаяФормаОплаты(ПараметрДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораПечатныхФорм(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		МассивСсылокЧеков = ДополнительныеПараметры.МассивСсылокЧеков;
		
		СтруктураКомандыПечати = СтруктураКомандыПечати(РезультатОткрытияФормы);
		
		СтруктураКомандыПечати.Вставить("РежимЗаписи", "НеЗаписывать");
		СтруктураКомандыПечати.Вставить("ТребуетсяРаботаСФайлами", Ложь);
		СтруктураКомандыПечати.Вставить("МножественныйВыбор", Ложь);
		СтруктураКомандыПечати.Вставить("ЭтоФормаОбъекта", Истина);
		СтруктураКомандыПечати.Вставить("ТипПараметра", Новый ОписаниеТипов("ДокументСсылка.ЧекККМ"));
		СтруктураКомандыПечати.Вставить("ТребуетсяОпределитьСсылки", Ложь);
		СтруктураКомандыПечати.Вставить("Серверная", Ложь);
		СтруктураКомандыПечати.Вставить("ИмяФормы", "");
		СтруктураКомандыПечати.Вставить("Обработчик","УправлениеПечатьюСлужебныйКлиент.ОбработчикКоманды");
		
		Если НЕ РезультатОткрытияФормы = "ТоварныйЧекДляФР" Тогда
			СтруктураКомандыПечати.ДополнительныеПараметры.Вставить("Обработчик", "");
		Иначе
			СтруктураКомандыПечати.ДополнительныеПараметры.Вставить("Обработчик", "УправлениеПечатьюРТКлиент.ОбработкаКомандыПечатиТоварногоЧекаДляФР");
		КонецЕсли;
		
		Если СтруктураКомандыПечати = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			Для каждого ЭлементМассиваСсылкиЧеков Из МассивСсылокЧеков Цикл
				УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(СтруктураКомандыПечати, ЭтотОбъект, ЭлементМассиваСсылкиЧеков);
				ЛогированиеПоЧеку("ЧекНапечатан", ЭлементМассиваСсылкиЧеков, РезультатОткрытияФормы);
			КонецЦикла;
		Исключение
			ЗаголовокИнформации = НСтр("ru = 'Не смогли напечатать документ'"); 
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации);
		КонецПопытки;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыдачиПодарков(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если РезультатОткрытияФормы = Неопределено Тогда
		ОбработатьОтказОтОплаты();
	Иначе
		Для Каждого СтрокаПодарки Из Объект.Подарки Цикл
			СтрокаПодарки.Получен = Истина;
		КонецЦикла;
		Если РезультатОткрытияФормы.Свойство("АдресСерийВХранилище")
			И ЗначениеЗаполнено(РезультатОткрытияФормы.АдресСерийВХранилище) Тогда
			ЗагрузитьСерииИзХранилища(РезультатОткрытияФормы.АдресСерийВХранилище);
		КонецЕсли;
		
		ЗавершитьДействияПослеВыдачиПодарков(ДополнительныеПараметры.ПараметрДействия);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСерииИзХранилища(АдресСерийВХранилище)
	
	СерииПодарков = ПолучитьИзВременногоХранилища(АдресСерийВХранилище);
	Для Каждого СерияПодарка Из СерииПодарков Цикл
		НоваяСтрока = Объект.СерииПодарков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СерияПодарка);
	КонецЦикла;
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика");
	СерииПодарков.Свернуть("Номенклатура, Характеристика");
	Для Каждого СвернутаяСтрока Из СерииПодарков Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СвернутаяСтрока);
		СтрокиПодарков = Объект.Подарки.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаПодарок Из СтрокиПодарков Цикл
			СтрокаПодарок.СтатусУказанияСерий = 2;
		КонецЦикла;
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораПодаркаИзСписка(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		СтрокаПодарки = Объект.Подарки.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтрокиПодарки);
		Если СтрокаПодарки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьСтрокуПодаркаПриВыборе(СтрокаПодарки, РезультатОткрытияФормы);
		ТекущаяВыданнаяСкидка = СтрокаПодарки.СкидкаНаценка;
		ПараметрДействия = ДополнительныеПараметры.ПараметрДействия;
		
		Отказ = Ложь;
		ВыдатьПодаркиИзСпискаВЦикле(Отказ, ПараметрДействия, ТекущаяВыданнаяСкидка);
	Иначе 
		ОбработатьОтказОтОплаты();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаАннулироватьЧек(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Если НЕ ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыЗаполненияЧекаККМ = Новый Структура;
		
		Оповещение = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаАннулироватьЧекЗавершение", ЭтотОбъект);
		НачатьАннулироватьЧекККМ(Оповещение, ТаблицаКассККМОрганизаций[0].КассаККМ, ПараметрыЗаполненияЧекаККМ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаАннулироватьЧекЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.АннулироватьЧек");
	
	Если РезультатВыполнения.ЧекАннулирован Тогда
		ЗаписатьИЗакрытьЧекПоСтатусуКлиент(ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Аннулированный"), РезультатВыполнения.ПараметрыЗаполнения);
		ОбновитьФорму();
		ВывестиИнформациюНаДисплейПокупателя("Аннулирование");
	Иначе
		ОбновитьФорму();
	КонецЕсли;
	
	ЗавершитьОбработкуДокументаОснования();
	
	ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяПриПростое", 5, Истина);
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаПечатьПослеЗакрытия(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Если НЕ ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
			Возврат;
		КонецЕсли;
		
		ОплатитьТовары("ФормаСложнойОплаты", Ложь, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаОПотереСуммыПоПодарочнымСертификатам(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено 
		И ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
		ЗавершитьОплатуТоваров(ДополнительныеПараметры.Печать, Ложь)
	Иначе
		ОбработатьОтказОтОплаты();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОплатаБонусамиПослеВыводаСообщений(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ 					= ДополнительныеПараметры.Отказ;
	ПараметрыИнформации 	= ДополнительныеПараметры.ПараметрыИнформации;
	
	РассчитатьКонтролироватьОстаткиТоваровПриЗакрытииЧека();
	
	УдалитьПробитыеЧекиИзНабораИОтменитьНеПробитые(Ложь);
	ПроверитьЗаполнениеТабличнойЧасти(Отказ, ПараметрыИнформации, Истина);
	Если Отказ Тогда
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуОплатыБонусами(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьТоварыПослеВыводаСообщений(Результат, ДополнительныеПараметры) Экспорт
	
	
	РассчитатьКонтролироватьОстаткиТоваровПриЗакрытииЧека();
	
	УдалитьПробитыеЧекиИзНабораИОтменитьНеПробитые(Ложь);
	ПроверитьЗаполнениеТабличнойЧасти(ДополнительныеПараметры.Отказ, 
									  ДополнительныеПараметры.ПараметрыИнформации, 
									  ДополнительныеПараметры.ОплатаТолькоНаличными);
	
	Если ДополнительныеПараметры.Отказ Тогда
		ОбработатьОтказОтОплаты();
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ДополнительныеПараметры.ПараметрыИнформации);
		Возврат;
	КонецЕсли;
	
	// Подарки
	ДополнительныеПараметры.Вставить("ОткрытаБлокирующаяФорма", Ложь);
	ДополнительныеПараметры.Вставить("ОплатитьТоварыОткрытиеФормОплат");
	
	ВыдатьПодарки(ДополнительныеПараметры.Отказ, ДополнительныеПараметры);
	
	Если ДополнительныеПараметры.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.ОткрытаБлокирующаяФорма Тогда
		ОплатитьТоварыОткрытиеФормОплат(ДополнительныеПараметры)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПолучитьВесЗавершение(РезультатОперации, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатОперации.Результат Тогда
		
		Если РезультатОперации.Вес = 0 Тогда
			ЗаголовокИнформации = НСтр("ru = 'Нулевой вес.'");
			ТекстСообщения = НСтр("ru = 'Дополнительное описание:
				|Электронные весы вернули нулевой вес.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
		Иначе
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			ПоследнееРедактированиеКоличество = ТекущиеДанные.КоличествоУпаковок;
			ТекущиеДанные.КоличествоУпаковок  = РезультатОперации.Вес; // Вес получен
			ТоварыПриИзмененииКоличестваУпаковок(ТекущиеДанные, ПоследнееРедактированиеКоличество);
		КонецЕсли;
		
	Иначе
		ЗаголовокИнформации = НСтр("ru = 'При использовании электронных весов произошла ошибка.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, РезультатОперации.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаАкцизнойМарки(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НуженПересчетСкидок = Ложь;
	СтрокаИзменена = Ложь;
	ПредыдущаяУпаковка = Неопределено;
	ПредыдущееКоличество = СтрокаТабличнойЧасти.Количество;
	ПредыдущаяЦена = Неопределено;
	
	Если Результат = Неопределено Тогда
		Если СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("КлючСвязи", ДополнительныеПараметры.ТекущийКлючСвязи);
			МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
			КоличествоМарок = МассивАкцизныхМарок.Количество();
			Если КоличествоМарок = 0 Тогда
				
				Объект.Товары.Удалить(СтрокаТабличнойЧасти);
				ТоварыПослеУдаленияСервер();
				ОбновитьФорму();
				СтрокаТабличнойЧасти = Неопределено;
				СтрокаИзменена = Истина;
				НуженПересчетСкидок = Истина;
				
			ИначеЕсли СтрокаТабличнойЧасти.Количество <> КоличествоМарок Тогда
				
				ПредыдущаяУпаковка = СтрокаТабличнойЧасти.Упаковка;
				ПредыдущаяЦена = СтрокаТабличнойЧасти.Цена;
				
				СтрокаТабличнойЧасти.Количество = КоличествоМарок;
				СтрокаТабличнойЧасти.КоличествоУпаковок = КоличествоМарок;
				СтрокаТабличнойЧасти.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка");
				НуженПересчетСкидок = Истина;
				СтрокаИзменена = Истина;
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Если ТипЗнч(Результат) = Тип("Строка") Тогда
		
			Если СтрокаТабличнойЧасти.НеобходимостьВводаКодаМаркировки Тогда
				Если НЕ КодСоответствуетНоменклатуреИУпаковке(Результат, ДополнительныеПараметры) Тогда
					Если ДополнительныеПараметры.Свойство("ТекстСообщения")
						И ЗначениеЗаполнено(ДополнительныеПараметры.ТекстСообщения) Тогда
						ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Проверка маркировки'"), ДополнительныеПараметры.ТекстСообщения);
					КонецЕсли;
					Возврат;
				КонецЕсли;
				ИмяТаблицыКодов = "КодыМаркировки";
			Иначе
				ИмяТаблицыКодов = "АкцизныеМарки";
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("КлючСвязи", ДополнительныеПараметры.ТекущийКлючСвязи);
			МассивАкцизныхМарок = Объект[ИмяТаблицыКодов].НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
				Объект[ИмяТаблицыКодов].Удалить(СтрокаАкцизнаяМарка);
			КонецЦикла;
			
			Если СтрокаТабличнойЧасти.НеобходимостьВводаКодаМаркировки Тогда
				СтрокаМаркировки = Объект.КодыМаркировки.Добавить();
				СтрокаМаркировки.КодМаркировки = Результат;
				СтрокаМаркировки.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
				СтрокаМаркировки.ТипКода = ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.Номенклатура, "ОсобенностьУчета");
				
				Если СтрокаТабличнойЧасти.КоличествоУпаковок <> 1 Тогда
					СтрокаТабличнойЧасти.КоличествоУпаковок = 1;
					СтрокаТабличнойЧасти.Количество = 0;
					ИзмененоКоличествоУпаковок = Истина;
					НуженПересчетСкидок = Истина;
				КонецЕсли;
				СтрокаТабличнойЧасти.СтатусУказанияАкцизныхМарок = 1;
				СтрокаТабличнойЧасти.КоличествоКодовМаркировки = 1;
				
			Иначе
				ДанныеШтрихкодаУпаковки = ПолучитьДанныеШтрихкодаУпаковки(СтрокаТабличнойЧасти.Организация, 
																			Объект.Магазин, 
																			Результат, 
																			ДополнительныеПараметры.ТекущийКлючСвязи,
																			СтрокаТабличнойЧасти.Номенклатура,
																			СтрокаТабличнойЧасти.Характеристика);
				
				СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаАкцизнаяМарка, ДанныеШтрихкодаУпаковки);
				
				ПредыдущаяУпаковка = СтрокаТабличнойЧасти.Упаковка;
				ПредыдущаяЦена = СтрокаТабличнойЧасти.Цена;
				
				СтрокаТабличнойЧасти.Количество = 1;
				СтрокаТабличнойЧасти.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка");
				СтрокаТабличнойЧасти.КоличествоУпаковок = 1;
				
				НуженПересчетСкидок = Истина;
			КонецЕсли;
			СтрокаИзменена = Истина;
		ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Если Результат.Свойство("АдресВХранилище") Тогда
				ПредыдущаяУпаковка = СтрокаТабличнойЧасти.Упаковка;
				ПредыдущаяЦена = СтрокаТабличнойЧасти.Цена;
			
				СтрокаТабличнойЧасти.Количество = ЗаполнитьМаркиНаСервере(Результат.АдресВХранилище, 
																			ДополнительныеПараметры, 
																			СтрокаТабличнойЧасти.Организация,
																			СтрокаТабличнойЧасти.Номенклатура,
																			СтрокаТабличнойЧасти.Характеристика);
				Если СтрокаТабличнойЧасти.Количество = 0 Тогда
					Объект.Товары.Удалить(СтрокаТабличнойЧасти);
					СтрокаТабличнойЧасти = Неопределено;
				Иначе
					СтрокаТабличнойЧасти.КоличествоУпаковок = СтрокаТабличнойЧасти.Количество;
					СтрокаТабличнойЧасти.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка");
				КонецЕсли;
				
				СтрокаИзменена = Истина;
				НуженПересчетСкидок = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаИзменена Тогда
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		Иначе
			Если ПредыдущаяУпаковка = СтрокаТабличнойЧасти.Упаковка Тогда
				Если ПредыдущееКоличество <> СтрокаТабличнойЧасти.Количество Тогда
					ТоварыПриИзмененииКоличестваУпаковок(СтрокаТабличнойЧасти, ПредыдущееКоличество);
				КонецЕсли;
			Иначе
				ТоварыПриИзмененииУпаковки(СтрокаТабличнойЧасти);
			КонецЕсли;
			Если ДополнительныеПараметры.Свойство("СтруктураПараметровКлиента") Тогда
				
				ПараметрДействия = ДополнительныеПараметры.СтруктураПараметровКлиента;
				СерийныйНомер = Неопределено;
				ОткрыватьРедактированиеСтроки = Ложь;
				Если ПараметрДействия.Свойство("ОткрыватьРедактированиеСтроки")
					И НЕ (СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки
						ИЛИ СтрокаТабличнойЧасти.НеобходимостьВводаКодаМаркировки) Тогда
					ОткрыватьРедактированиеСтроки = ПараметрДействия.ОткрыватьРедактированиеСтроки;
				КонецЕсли;
			
				Если ПараметрДействия.Свойство("ДобавитьСерийныйНомерИОткрытьВводСерии", СерийныйНомер) Тогда
					ДобавитьСерийныйНомерИОткрытьВводСерии(СтрокаТабличнойЧасти, СерийныйНомер, ОткрыватьРедактированиеСтроки);
				КонецЕсли;
				
				Если ПараметрДействия.Свойство("ОбновитьПоследнееРедактируемыеЗначения") Тогда
					ОбновитьПоследнееРедактируемыеЗначения(СтрокаТабличнойЧасти);
				КонецЕсли;
				
				Если ПараметрДействия.Свойство("ТоварыПриИзмененииНаСервере") Тогда
					НуженПересчетСкидок = Ложь;
					ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
				КонецЕсли;
				
				Если ПараметрДействия.Свойство("ПродолжитьДействияТоварыПриИзмененииНоменклатуры") Тогда
					ПараметрДействия.Вставить("ПересчиталиЦену", Ложь);
					ПродолжитьДействияТоварыПриИзмененииНоменклатуры(ПараметрДействия);
				КонецЕсли;
				
				Если ПараметрДействия.Свойство("ЗавершитьДействияТоварыПриИзмененииНоменклатуры") Тогда
					ЗавершитьДействияТоварыПриИзмененииНоменклатуры(ПараметрДействия);
				КонецЕсли;
				
				Если ОткрыватьРедактированиеСтроки Тогда
					ПодключитьОбработчикОжидания("РедактированиеСтрокиКлиент", 0.1, Истина);
				КонецЕсли;
			КонецЕсли;
			
			Если НуженПересчетСкидок Тогда
				ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
			КонецЕсли;
			// Интерфейс ЕГАИС
			ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарокВСтроке(СтрокаТабличнойЧасти, Объект.АкцизныеМарки);
			ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(СтрокаТабличнойЧасти);
		
			РозничныеПродажиКлиент.ЗаполнитьКоличествоКодовМаркировкиВСтроке(СтрокаТабличнойЧасти, Объект.КодыМаркировки);
			РозничныеПродажиКлиент.УстановитьЗначениеСтатусаКодаМаркировкиВСтроке(СтрокаТабличнойЧасти);
		КонецЕсли;
		
		Элементы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
		ОбновитьФорму();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеУстановкиКарты(СтруктураКарты, ДополнительныеПараметры) Экспорт
	
	Если СтруктураКарты <> Неопределено Тогда
		ДисконтнаяКарта = СтруктураКарты.Ссылка;
		Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
			Если ДополнительныеПараметры = Неопределено Тогда
				ДополнительныеПараметры = Новый Структура;
			КонецЕсли;
			Если СтруктураКарты.Свойство("НомерТелефона") Тогда
				НомерТелефона = СтруктураКарты.НомерТелефона;
			Иначе
				НомерТелефона = "";
			КонецЕсли;
			Если СтруктураКарты.Свойство("АдресЭП") Тогда
				АдресЭП = СтруктураКарты.АдресЭП;
			Иначе
				АдресЭП = "";
			КонецЕсли;
			Если ЗначениеЗаполнено(НомерТелефона) Тогда
				Если НаборПравИНастроек.РазрешитьВыборКартыБезSMS Тогда
					УстановкаКартыЗавершение(ДисконтнаяКарта);
				Иначе
					ДополнительныеПараметры.Вставить("ДисконтнаяКарта", ДисконтнаяКарта);
					ТекущаяДата = ТекущаяДата();
					НачальноеЧисло = Год(ТекущаяДата) + Месяц(ТекущаяДата) + День(ТекущаяДата) + Час(ТекущаяДата) + Минута(ТекущаяДата) + Секунда(ТекущаяДата);
					Генератор = Новый ГенераторСлучайныхЧисел(НачальноеЧисло);
					КодПроверки = Генератор.СлучайноеЧисло(0, 9999);
					Если КодПроверки < 1000 Тогда
						КодПроверки = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка(КодПроверки), 4, "0");
					Иначе
						КодПроверки = Формат(КодПроверки, "ЧГ=0");
					КонецЕсли;
					ДополнительныеПараметры.Вставить("КодПроверки", КодПроверки);
					ДополнительныеПараметры.Вставить("НомерТелефонаСМС", НомерТелефона);
					
					РезультатОтправки = ОтправитьСообщениеСКодом(КодПроверки, НомерТелефона);
					Если РезультатОтправки.Результат Тогда
						ОповещениеКода = Новый ОписаниеОповещения("ОповещениеУстановкиКартыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
						ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите код подтверждения, отправленный на телефон владельца карты.'"), 0, 0, Ложь, Истина, ОповещениеКода);
					Иначе
						ТекстСообщения = НСтр("ru = 'Не удалось отправить сообщение с кодом проверки по причине:'") + Символы.ПС + РезультатОтправки.ОписаниеОшибки;
						ЗаголовокИнформации = НСтр("ru = 'Выбор карты не возможен'");
						ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(АдресЭП) Тогда
				Если НаборПравИНастроек.РазрешитьВыборКартыБезEmailПодтверждения Тогда
					УстановкаКартыЗавершение(ДисконтнаяКарта);
				Иначе
					ДополнительныеПараметры.Вставить("ДисконтнаяКарта", ДисконтнаяКарта);
					ТекущаяДата = ТекущаяДата();
					НачальноеЧисло = Год(ТекущаяДата) + Месяц(ТекущаяДата) + День(ТекущаяДата) + Час(ТекущаяДата) + Минута(ТекущаяДата) + Секунда(ТекущаяДата);
					Генератор = Новый ГенераторСлучайныхЧисел(НачальноеЧисло);
					КодПроверки = Генератор.СлучайноеЧисло(0, 9999);
					Если КодПроверки < 1000 Тогда
						КодПроверки = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка(КодПроверки), 4, "0");
					Иначе
						КодПроверки = Формат(КодПроверки, "ЧГ=0");
					КонецЕсли;
					
					ДополнительныеПараметры.Вставить("КодПроверки", КодПроверки);
					ДополнительныеПараметры.Вставить("АдресЭП", АдресЭП);
					
					РезультатОтправки = ОтправитьEmailСКодом(КодПроверки, АдресЭП);
					Если РезультатОтправки.Результат Тогда
						ОповещениеКода = Новый ОписаниеОповещения("ОповещениеУстановкиКартыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
						ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите код подтверждения, отправленный на E-mail владельца карты.'"), 0, 0, Ложь, Истина, ОповещениеКода);
					Иначе
						ТекстСообщения = НСтр("ru = 'Не удалось отправить сообщение с кодом проверки по причине:'") + Символы.ПС + РезультатОтправки.ОписаниеОшибки;
						ЗаголовокИнформации = НСтр("ru = 'Выбор карты не возможен'");
						ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
					КонецЕсли;
				КонецЕсли;
			Иначе
				УстановкаКартыЗавершение(ДисконтнаяКарта);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеУстановкиКартыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// &ЗамерПроизводительности 
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.УстановкиКартыЗавершение");
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не введен код подтверждения.'");
		ЗаголовокИнформации = НСтр("ru = 'Выбор карты не возможен'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
	Иначе
		КодПодтверждения = Результат.ВведенноеЧисло;
		Если КодПодтверждения = ДополнительныеПараметры.КодПроверки Тогда
			ДисконтнаяКарта = ДополнительныеПараметры.ДисконтнаяКарта;
			Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
				УстановкаКартыЗавершение(ДисконтнаяКарта);
			КонецЕсли;
		Иначе
			КоличествоПопыток = 1;
			Если ДополнительныеПараметры.Свойство("КоличествоПопыток") Тогда
				КоличествоПопыток = ДополнительныеПараметры.КоличествоПопыток + 1;
				ДополнительныеПараметры.КоличествоПопыток = КоличествоПопыток;
			Иначе
				ДополнительныеПараметры.Вставить("КоличествоПопыток", 1);
			КонецЕсли;
			Если КоличествоПопыток >= 5 Тогда
				ТекстСообщения = НСтр("ru = 'Введен некорректный код подтверждения (Попытка %1 из 5).'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КоличествоПопыток);
				ЗаголовокИнформации = НСтр("ru = 'Выбор карты не возможен'");
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
			Иначе
				ТекстВопроса = НСтр("ru = 'Введен некорректный код подтверждения (Попытка %1 из 5). Повторить попытку ввода?'");
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, КоличествоПопыток);
				ЗаголовокИнформации = НСтр("ru = 'Выбор карты не возможен'");
				ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеПовторВводаКодаПодтверждения", ЭтотОбъект, ДополнительныеПараметры);
				ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(ЗаголовокИнформации, ТекстВопроса, ,ОбработчикОповещения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПовторВводаКодаПодтверждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено 
		И ВРЕГ(Результат) = "ДА" Тогда
		ОповещениеКода = Новый ОписаниеОповещения("ОповещениеУстановкиКартыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите код подтверждения, отправленный владельцу карты.'"), 0, 0, Ложь, Истина, ОповещениеКода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДокументаРасчета(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		ОплатаБезПередачиПоДокументуРасчетаСЗаказом = Объект.ОперацияСДенежнымиСредствами;
		СоздатьНовыйНаборКлиент();
		
		Объект.ДокументРасчета = РезультатОткрытияФормы.ДокументРасчета;
		Объект.Контрагент      = РезультатОткрытияФормы.Контрагент;
		Если НЕ Объект.ЗаказПокупателя = РезультатОткрытияФормы.ЗаказПокупателя Тогда
			Объект.ЗаказПокупателя = РезультатОткрытияФормы.ЗаказПокупателя;
			Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
				Объект.ЗаказПокупателя = РезультатОткрытияФормы.ЗаказПокупателя;
				ЗаполнитьНаОснованииЗаказаПокупателя();
				ОплатаБезПередачиПоДокументуРасчетаСЗаказом = Ложь;
				ЗавершитьОбработкуДокументаОснования();
			Иначе
				СоздатьНовыйНаборКлиент();
				ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяПриПростое", 20, Истина);
				ЗавершитьОбработкуДокументаОснования();
			КонецЕсли;
		ИначеЕсли ТипЗнч(Объект.ДокументРасчета) = Тип("ДокументСсылка.ЧекККМ") Тогда
			Отказ = Ложь;
			ЗаполнитьДаннымиПоЧекуККМ(Объект.ДокументРасчета, Отказ);
			Объект.ОперацияСДенежнымиСредствами = НЕ Объект.ОперацияСДенежнымиСредствами;
			ЕстьТоварыВДокументеРасчета = Объект.Товары.Количество() > 0;
			
		КонецЕсли;
		
		ЭтоЗачетАванса         = РезультатОткрытияФормы.ЭтоЗачетАванса;
		ЭтоОплатаРассрочки     = РезультатОткрытияФормы.ЭтоОплатаРассрочки;
		СуммаОстаткаДокументаРасчета  = РезультатОткрытияФормы.Сумма;
		ОбновитьФорму();
		УстановитьЗаголовок();
		ЗавершитьОбработкуДокументаОснования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуПростойОплаты(РезультатВыполнения = Неопределено, ПараметрДействия = Неопределено) Экспорт 
	
	ОплатитьТовары("ФормаПростойОплаты");	
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВвестиАннулирование(РезультатВыполнения = Неопределено, ПараметрДействия = Неопределено) Экспорт
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаАннулироватьЧек", ЭтотОбъект);
		ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(НСтр("ru = 'Аннулировать чек?'"),,,ОбработчикОповещения);
		
	Иначе
		СоздатьНовыйНаборКлиент();
		
		ОбновитьФорму();
		
		ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяПриПростое", 5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОтложитьЧек(РезультатВыполнения = Неопределено, ПараметрДействия = Неопределено) Экспорт
	
	Если Объект.Товары.Количество() = 0 Тогда
		СоздатьНовыйНаборКлиент();
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ОтложитьЧек");
	
	ЗаписатьИЗакрытьЧекПоСтатусуКлиент(ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Отложенный"), Новый Структура);
	
	ВывестиИнформациюНаДисплейПокупателя("ОтложитьЧек");
	ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяПриПростое", 5, Истина);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтотОбъект);
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПродолжитьЧек(РезультатВыполнения = Неопределено, ПараметрДействия = Неопределено) Экспорт

	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ТекущаяДата();
	Иначе
		ЗаголовокИнформации = НСтр("ru = 'Продолжение отложенного чека'"); 
		ТекстИнформации = НСтр("ru = 'Перед продолжением отложенного чека необходимо пробить, аннулировать или отложить текущий чек!'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
		
	КонецЕсли;
	
	// &ЗамерПроизводительности 
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ПродолжитьЧек");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПродолжениеОтложенныхЧеков");
	ПараметрыФормы.Вставить("МассивКассККМ", МассивКассККМКлиент);
	ПараметрыФормы.Вставить("СкрыватьКолонкуОрганизации", МассивКассККМКлиент.Количество() = 1);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораЧекаПриПродолженииЧека", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораЧека", ПараметрыФормы,,,,, ОбработчикОповещения, Режим);
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыполнитьВыход(РезультатВыполнения = Неопределено, ПараметрДействия = Неопределено) Экспорт
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ЗаголовокИнформации = НСтр("ru = 'Выход'"); 
		ТекстИнформации = НСтр("ru = 'Перед выходом необходимо пробить, аннулировать или отложить текущий чек!'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		
		Возврат;
		
	КонецЕсли;
	
	СанкционированноеЗакрытие = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаОбОтменеОперацииУдалениеСтроки(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		Если НЕ ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрДействия = ДополнительныеПараметры.ПараметрДействия;
		ТекущаяСтрокаОплаты = Объект.Оплата.НайтиПоИдентификатору(ПараметрДействия.ИдентификаторВыбраннойСтроки);
		
		Если ТекущаяСтрокаОплаты = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаОбОтменеОперацииУдалениеСтрокиЗавершение", ЭтотОбъект, ПараметрДействия);
		СторноОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(Оповещение, ТекущаяСтрокаОплаты, ПараметрДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаОбОтменеОперацииУдалениеСтрокиЗавершение(РезультатВыполнения, ПараметрДействия) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		Если НЕ ПараметрДействия.ОткрытаБлокирующаяФорма Тогда
			ЗавершитьУдалениеСтроки(ПараметрДействия)
		КонецЕсли;
		Если ПрисутствуютДанныеПереданныеВБанк() Тогда 
			ВывестиПредупреждениеОбОтменеОплаты(ПараметрДействия.ОбработчикОповещенияПриЗавершении);
		Иначе 
			ОбработатьУспешноеПробитиеЧека();
			Если Не ПараметрДействия.ОбработчикОповещенияПриЗавершении = Неопределено Тогда 
				ВыполнитьОбработкуОповещения(ПараметрДействия.ОбработчикОповещенияПриЗавершении);	
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Не ПустаяСтрока(ПараметрДействия.ТекстОписаниеОшибки) Тогда
			ЗаголовокИнформации = НСтр("ru = 'Ошибка выполнения операции.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ПараметрДействия.ТекстОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СторноОплатыПлатежнойКартойЧерезЭквайринговыйТерминалЗавершение(РезультатВыполнения, ПараметрДействия) Экспорт;
	
	ЭтаФорма.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		Если ПараметрДействия.Свойство("ЗавершитьУдалениеСтроки") Тогда
			ЗавершитьУдалениеСтроки(ПараметрДействия)
		КонецЕсли;
	
		Если ПараметрДействия.Свойство("ЗавершитьОбработкуВыбораПлатежнойКарты") Тогда
			ЗавершитьОбработкуВыбораПлатежнойКарты(ПараметрДействия);
			ПересчитатьЗначенияСуммДляПодарочныхСертификатов();
		КонецЕсли;
	
		ИндексВМассивеСтрокВыбранныхОплат = Неопределено;
		Если ПараметрДействия.Свойство("УдалитьСтрокуИзМассива", ИндексВМассивеСтрокВыбранныхОплат) Тогда
			ПараметрДействия.СтрокиВыбранныхОплат.Удалить(ИндексВМассивеСтрокВыбранныхОплат)
		КонецЕсли;
	
	Иначе
		ТекстОписаниеОшибки = РезультатВыполнения.ОписаниеОшибки;
		ПараметрДействия.ТекстОписаниеОшибки = ТекстОписаниеОшибки;
	КонецЕсли;
	
	Если ПараметрДействия.ОповещениеПриЗавершении <> Неопределено Тогда
		ПараметрДействия.Результат = РезультатВыполнения.Результат; 
		ВыполнитьОбработкуОповещения(ПараметрДействия.ОповещениеПриЗавершении, ПараметрДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВопросаПодтвержденияОбОтменеОплаты(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	КонечныйРезультат = Ложь;
	ПараметрДействия = ДополнительныеПараметры.ПараметрДействия;
	
	Если НЕ РезультатОткрытияФормы = Неопределено 
		  И ВРЕГ(РезультатОткрытияФормы) = "ДА" Тогда
		КонечныйРезультат = Истина;
	КонецЕсли;
	
	Если КонечныйРезультат Тогда
		ТекстОписаниеОшибки = "";
	Иначе
		ТекстОписаниеОшибки = НСтр("ru = 'Операция отменена'");
	КонецЕсли;
	
	ПараметрДействия.ТекстОписаниеОшибки = ТекстОписаниеОшибки;
	
	Если НЕ КонечныйРезультат Тогда
		Если ПараметрДействия.ОповещениеПриЗавершении <> Неопределено Тогда
			ПараметрДействия.Результат = КонечныйРезультат; 
			ВыполнитьОбработкуОповещения(ПараметрДействия.ОповещениеПриЗавершении, ПараметрДействия);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("ЗавершитьУдалениеСтроки") Тогда
		ЗавершитьУдалениеСтроки(ПараметрДействия)
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("ЗавершитьОбработкуВыбораПлатежнойКарты") Тогда
		ЗавершитьОбработкуВыбораПлатежнойКарты(ПараметрДействия);
	КонецЕсли;
	
	ИндексВМассивеСтрокВыбранныхОплат = Неопределено;
	Если ПараметрДействия.Свойство("УдалитьСтрокуИзМассива", ИндексВМассивеСтрокВыбранныхОплат) Тогда
		ПараметрДействия.СтрокиВыбранныхОплат.Удалить(ИндексВМассивеСтрокВыбранныхОплат)
	КонецЕсли;
	
	Если ПараметрДействия.ОповещениеПриЗавершении <> Неопределено Тогда
		ПараметрДействия.Результат = Истина; 
		ВыполнитьОбработкуОповещения(ПараметрДействия.ОповещениеПриЗавершении, ПараметрДействия);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуОплатыБонуснымиБаллами(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	Если РезультатОткрытияФормы = Неопределено Тогда
		Если АвтоматическийРасчетСкидок Тогда
			НазначитьАвтоматическиеСкидкиКлиент();
		Иначе
			Объект.СкидкиРассчитаны = Ложь;
		КонецЕсли;
	Иначе
		ОбработатьОплатуБонусами(РезультатОткрытияФормы);
		Если РезультатОткрытияФормы.Свойство("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов")
			И РезультатОткрытияФормы.УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов Тогда
			ПараметрыДействия = Новый Структура;
			ПараметрыДействия.Вставить("БонуснаяПрограммаЛояльности", РезультатОткрытияФормы.БонуснаяПрограмма);
			ПараметрыДействия.Вставить("БудетОплатаБонусами", Истина);
			ПараметрыДействия.Вставить("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов", Истина);
			
			НазначитьАвтоматическиеСкидкиКлиент(, , ПараметрыДействия); 
		КонецЕсли;
		ОбновитьФорму();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданиеИВыборНовойХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ТекущаяСтрока.Характеристика = Результат;
	ТоварыХарактеристикаПриИзменении(Неопределено);

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьКомиссионнуюТорговлю = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссионнуюТорговлю");
	ИспользоватьУчетИмпортныхТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьУчетИмпортныхТоваров");
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыПодключаемых = Новый Структура("Источники, КоманднаяПанель, ПрефиксГрупп");
	ПараметрыПодключаемых.ПрефиксГрупп = "ПрочиеПодключаемыеОперации";
	ПараметрыПодключаемых.Источники = Новый ОписаниеТипов("ОбработкаОбъект.РМКУправляемыйРежим");
	ПараметрыПодключаемых.КоманднаяПанель = Элементы.ГруппаПанельПрочихОпераций;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыПодключаемых);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодключаемоеОборудованиеРТВызовСервера.ПолучитьДоступноеПодключаемоеОборудование(ИспользоватьПодключаемоеОборудование, ПодключаемоеОборудованиеЕстьТСД, ПодключаемоеОборудованиеЕстьВесы);
	ПараметрыСобытийПО = Новый Структура;
	ПараметрыСобытийПО.Вставить("РегистрацияНовойКарты", Истина);
	ПараметрыСобытийПО.Вставить("ПоискАкцизнойМарки", Истина);
	
	ЭтоРабочееМестоOffLine = ПланыОбмена.ПоРабочемуМесту.ЭтоРабочееМесто();
	
	Если Параметры.Свойство("Магазин") Тогда
		Объект.Магазин = Параметры.Магазин;
		ФорматМагазина = Объект.Магазин.ФорматМагазина;
	КонецЕсли;
	
	Если Параметры.Свойство("РабочееМесто") Тогда
		Объект.РабочееМесто = Параметры.РабочееМесто;
	КонецЕсли;
	
	Если Параметры.Свойство("РасчетноеВремяЗакрытияКассы") Тогда
		РасчетноеВремяЗакрытияКассы = Параметры.РасчетноеВремяЗакрытияКассы;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Магазин) Тогда
		Объект.Магазин = ПараметрыСеанса.ТекущийМагазин;
	КонецЕсли;
	
	СкладПродажиПоУмолчанию = Объект.Магазин.СкладПродажи;
	
	Если НЕ ЗначениеЗаполнено(Объект.РабочееМесто) Тогда
		Объект.РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	КонецЕсли;
	
	Объект.ЦенаВключаетНДС = ОбщегоНазначенияРТ.ПолучитьЗначениеРеквизитаВПривилегированномРежиме(Объект.Магазин.ПравилоЦенообразования, "ЦенаВключаетНДС");
	
	ПолучитьТаблицуКассККМ();
	ПолучитьТаблицуВидыОсобыхНалоговОрганизаций();
	
	Если ТаблицаКассККМОрганизаций.Количество() = 0 Тогда
		ОтказПриСоздании = Истина;
		ПараметрыИнформацииПриСоздании = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
		ПараметрыИнформацииПриСоздании.ЗаголовокИнформации = НСтр("ru = 'Ошибка определения рабочего места'");
		ПараметрыИнформацииПриСоздании.ТекстИнформации = НСтр("ru = 'Не смогли определить рабочее место.
													|Обратитесь к администратору системы.'");
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("мИмяКомпьютера") Тогда
		мИмяКомпьютера           = Параметры.мИмяКомпьютера;
		НастройкаРМК             = ПродажиСервер.ТекущаяНастройкаРМКСервер(мИмяКомпьютера);
		ИспользоватьНастройкуРМК = ЗначениеЗаполнено(НастройкаРМК);
		
		ПараметрыИнформацииПриСоздании = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
		ЗаполнитьНаборПравИНастроек();
		ЗаполнитьКнопкиНижнейПанели(ОтказПриСоздании, ПараметрыИнформацииПриСоздании);
		ЗаполнитьКнопкиВерхнейПанели();
	Иначе
		ЗаполнитьНаборПравИНастроек();
		УстановитьДоступностьЭлементовФормы();
	КонецЕсли;
	
	Пользователь        = ОбщегоНазначенияРТКлиентСервер.ПользовательСУчетомИзмененныхПрав();
	
	ПродавецПоУмолчанию = ЗначениеНастроекПовтИсп.ПолучитьПродавцаПользователяПоУмолчанию(Пользователь);
	Объект.Продавец     = ПродавецПоУмолчанию;
	
	ИспользоватьАссортимент = АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	ИспользоватьБонусы = ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности");
	ИспользоватьАгентскиеПлатежиИРазделениеВыручки = ПолучитьФункциональнуюОпцию("ИспользоватьАгентскиеПлатежиИРазделениеВыручки");
	
	АвтоматическийРасчетСкидок = УправлениеПользователямиВызовСервера.ПолучитьБулевоЗначениеПраваПользователя(
									ПланыВидовХарактеристик.ПраваПользователей.АвтоматическийРасчетСкидокПриРедактированииДокументаПродажи, Ложь);
									
	НужнаПроверкаАлкоголя = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
	
	НадписьИнформацияОТоваре = "";
	НадписьТекущаяСумма = "";
	НадписьСдача = НСтр("ru = 'СДАЧА'");
	
	// Интерфейс ЕГАИС
	УчетАлкогольнойПродукции = ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(Объект.Дата);
	ВидимостьКолонкиМаркировки = УчетАлкогольнойПродукции Или ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиТабачнойПродукции")
								Или ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиОбувнойПродукции");
	
	СоздатьНовыйНабор(Истина, Ложь);
	
	ОпределитьИмяФайлаБэкапа();
	ВосстановитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Вставить содержимое обработчика.
	Если ОтказПриСоздании Тогда
		Отказ = Истина;
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформацииПриСоздании,,ВладелецФормы);
		Возврат;
	КонецЕсли;
	
	ЦветПродажи = Элементы.КартинкаЧО04Возврат.ЦветТекста;
	
	СтруктураПараметров = СтруктураМассивовКассККМИОрганизаций();
	
	МассивКассККМКлиент     = СтруктураПараметров.КассыККМ;
	МассивОрганизацийКлиент = СтруктураПараметров.Организации;
	
	Для каждого КассаККМКлиент Из МассивКассККМКлиент Цикл
		Если НомерДокументаКассыККМ[КассаККМКлиент] = Неопределено Тогда
			ОбщегоНазначенияРТКлиент.ЗаполнитьНомерДокументаКассыККМ(КассаККМКлиент);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(мИмяКомпьютера) Тогда
		#Если Не ВебКлиент Тогда
		мИмяКомпьютера = ИмяКомпьютера();
		#КонецЕсли
		
		НастройкаРМК = ТекущаяНастройкаРМКСервер(мИмяКомпьютера);
		ИспользоватьНастройкуРМК = ЗначениеЗаполнено(НастройкаРМК);
		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
		ЗаполнитьКнопкиНижнейПанели(Отказ, ПараметрыИнформации);
		ЗаполнитьКнопкиВерхнейПанели();
		Если Отказ Тогда
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ОповещенияПриПодключении, ЭтотОбъект, "СканерШтрихкода,СчитывательМагнитныхКарт,ДисплейПокупателя");
	
	ДисплейПокупателяПараметры  = Новый Структура("ТоварНаименование,ТоварЦена,ТоварКоличество,ТоварСумма,ТоварСкидка,СуммаВсего,СуммаСкидки,Сдача,Оплата");
	// Конец ПодключаемоеОборудование
	
	ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
	
	// Автосохранение документа
	Если НаборПравИНастроек.ИнтервалАвтоматическогоСохраненияЧекаККМ > 0 Тогда
		ПодключитьОбработчикОжидания("АвтосохранениеДанныхКлиент", НаборПравИНастроек.ИнтервалАвтоматическогоСохраненияЧекаККМ);
	КонецЕсли;
	
	// Предупреждение о закрытии смены
	Если НаборПравИНастроек.ВремяПредупрежденияОСкоромЗакрытииСмены > 0 
		И ЗначениеЗаполнено(РасчетноеВремяЗакрытияКассы) Тогда
		
		РасчетныйИнтервалПредупреждения = РасчетноеВремяЗакрытияКассы - ТекущаяДата() - НаборПравИНастроек.ВремяПредупрежденияОСкоромЗакрытииСмены * 60;
		РасчетныйИнтервалПредупреждения = Макс(РасчетныйИнтервалПредупреждения, 0.1);
		ПодключитьОбработчикОжидания("ВывестиПредупреждениеОЗакрытииКассы", РасчетныйИнтервалПредупреждения, Истина);
	КонецЕсли;
	
	ОбновитьФорму();
		
	ОтключитьОбработчикОжидания("ОбработатьОтветыЕГАИСНаКлиенте");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ЗаголовокИнформации = НСтр("ru = 'При подключении оборудования произошла ошибка:'");
		ТекстИнформации     = РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ СанкционированноеЗакрытие ИЛИ ЗавершениеРаботы Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		// ПодключаемоеОборудование
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
		// Конец ПодключаемоеОборудование
		
		Возврат;
	КонецЕсли;
	
	ВывестиИнформациюНаДисплейПокупателя("Сервис");
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	ОчиститьДанныеПередЗакрытием();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ИмяДействия") Тогда
			Если ВыбранноеЗначение.ИмяДействия = НСтр("ru = 'Подбор номенклатуры'") Тогда
				ИсполняемаяОперацияЛогирования = "ПоискИПодборНоменклатуры";
				ЛогированиеПоискИПодборНоменклатуры(ВыбранноеЗначение.Номенклатура, ВыбранноеЗначение.Характеристика);
				ДобавитьНайденныеПозицииТоваровКлиент(ВыбранноеЗначение, НаборПравИНастроек.ОткрыватьРедактированиеСтрокиПриПоискеТоваров);
			ИначеЕсли ВыбранноеЗначение.ИмяДействия = НСтр("ru = 'Подбор быстрого товара'") Тогда
				ИсполняемаяОперацияЛогирования = "ПоискИПодборНоменклатуры";
				ЛогированиеПоискИПодборНоменклатуры(ВыбранноеЗначение.Номенклатура, ВыбранноеЗначение.Характеристика);
				ДобавитьНоменклатуруВТабЧасть(ВыбранноеЗначение.Номенклатура, ВыбранноеЗначение.Характеристика, ВыбранноеЗначение.Упаковка, 1, Истина);
				
				Если НаборПравИНастроек.ЗакрыватьБыстрыеТоварыПриВыбореТовара Тогда
					Элементы.ГруппаБыстрыхТоваров.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененоРабочееМестоТекущегоСеанса" Тогда
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	ИначеЕсли Источник = "ФормаОпросаВладельцаКарт" Тогда
		СменитьВладельцаКарты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		
		// &ЗамерПроизводительности
		Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.ВнешнееСобытие");
		
		Если Объект.Товары.Количество() = 0 Тогда
			Объект.Дата = ТекущаяДата();
		КонецЕсли;
		
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудованияРМК(ЭтотОбъект, Источник, Событие, Данные, ИсполняемаяОперацияЛогирования);
		
		ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ТоварыСтатусУказанияСерий Тогда
		
		ВвестиСерии();
		
	ИначеЕсли Поле = Элементы.ТоварыКоличествоУпаковок Тогда
		
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		Если ТекущаяСтрока <> Неопределено Тогда
			Если ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки
				ИЛИ ТекущаяСтрока.НеобходимостьВводаКодаМаркировки Тогда
				ИдентификаторСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
				
				СтруктураПараметровКлиента = Новый Структура;
				СтруктураПараметровКлиента.Вставить("ОткрытаБлокирующаяФорма", Истина);
				СтруктураПараметровКлиента.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
				СтруктураПараметровКлиента.Вставить("ПрекратитьДействия", Ложь);
				
				ВвестиАкцизнуюМарку(
					ТекущаяСтрока,
					"КоличествоУпаковок",
					СтруктураПараметровКлиента);
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ТоварыЦена
		ИЛИ Поле = Элементы.ТоварыСумма Тогда
		
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		Если ТекущаяСтрока <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрока.ДоговорПлатежногоАгента)
				И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
				СтруктураПараметровКлиента = Новый Структура;
				
				СтруктураПараметровКлиента.Вставить("УчетХарактеристик", Ложь);
				СтруктураПараметровКлиента.Вставить("ПересчиталиЦену", Истина);
				СтруктураПараметровКлиента.Вставить("НеУдалятьСтроку", Истина);
				СтруктураПараметровКлиента.Вставить("ПредупреждениеНулевойЦены", НСтр("ru = 'Введите сумму платежа.'"));
				СтруктураПараметровКлиента.Вставить("ОткрытаБлокирующаяФорма", Истина);
				СтруктураПараметровКлиента.Вставить("ИдентификаторСтроки", ТекущаяСтрока.ПолучитьИдентификатор());
				СтруктураПараметровКлиента.Вставить("ПрекратитьДействия", Ложь);
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ПараметрДействия", СтруктураПараметровКлиента);
				
				ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаЧислаТоварыПриИзмененииНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
				ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите сумму платежа.'"), 0, 0, Ложь, Ложь, ОбработчикОповещения);
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьФорму", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий, Копирование);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораНоменклатурыТоварыПередНачаломДобавления", ЭтотОбъект);
	ОткрытьФормуВыбораСправочника("Номенклатура",,ОбработчикОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Если Не ТекущиеДанные.НомерСтроки = Объект.Товары.Количество()
			И НЕ НаборПравИНастроек.РазрешитьРедактироватьНабранныйЧек 
			И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Интерфейс ЕГАИС
	Если НЕ Отказ Тогда
		Если Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыСтатусУказанияАкцизныхМарок 
			И Элементы.Товары.ТекущиеДанные <> Неопределено
			И Элементы.Товары.ТекущиеДанные.СтатусУказанияАкцизныхМарок <> 0 Тогда
			ДанныеСтрокиТовары = Элементы.Товары.ТекущиеДанные;
			ИдентификаторСтроки = ДанныеСтрокиТовары.ПолучитьИдентификатор();
			
			СтруктураПараметровКлиента = Новый Структура;
			СтруктураПараметровКлиента.Вставить("ОткрытаБлокирующаяФорма", Истина);
			СтруктураПараметровКлиента.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
			СтруктураПараметровКлиента.Вставить("ПрекратитьДействия", Ложь);
			
			ВвестиАкцизнуюМарку(
				ДанныеСтрокиТовары,
				"КоличествоУпаковок",
				СтруктураПараметровКлиента);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТоварыПередУдалениемКлиент(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Копирование Тогда
		
		ТекущаяСтрока.КлючСвязиСерийныхНомеров    = 0;
		ТекущаяСтрока.СуммаАвтоматическойСкидки   = 0;
		ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
		ТекущаяСтрока.СуммаСкидкиОплатыБонусом   = 0;
		
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущаяСтрока.Продавец = Объект.Продавец;
	Иначе
		ПоследняяРедактируемаяНоменклатура = ТекущаяСтрока.Номенклатура;
		ПоследнееРедактированиеКоличество  = ТекущаяСтрока.КоличествоУпаковок;
		ПоследняяРедактируемаяСумма        = ТекущаяСтрока.Сумма;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
		Элемент,
		КэшированныеЗначения,
		ПараметрыУказанияСерий,
		Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если КэшированныеЗначения = Неопределено Тогда
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элемент,
			КэшированныеЗначения,
			ПараметрыУказанияСерий,
			Ложь);
	КонецЕсли;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
ОбновитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ТоварыПослеУдаленияСервер();
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено Тогда
	
		ОчиститьСерийныеНомераВСтроке(ТекущаяСтрока.ПолучитьИдентификатор());
	
		ПараметрДействия = Новый Структура;
		ПараметрДействия.Вставить("ОткрытаБлокирующаяФорма", Ложь);
		ПараметрДействия.Вставить("ДобавитьСерийныйНомерИОткрытьВводСерии", Неопределено);
			
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			
			ПараметрДействия.Вставить("ОбновитьПоследнееРедактируемыеЗначения");
			
			ТоварыПриИзмененииНоменклатуры(ТекущаяСтрока,, ПараметрДействия);
			
			Если НЕ ПараметрДействия.ОткрытаБлокирующаяФорма Тогда
				ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
				ДобавитьСерийныйНомерИОткрытьВводСерии(ТекущаяСтрока);
				ОбновитьПоследнееРедактируемыеЗначения(ТекущаяСтрока)
			КонецЕсли;
			
		Иначе
			
			Если НаборПравИНастроек.РазрешитьСторнированиеТовара 
			 ИЛИ ПоследняяРедактируемаяНоменклатура = Неопределено Тогда
				ТоварыНоменклатураОчистка(Неопределено, Истина);
				
				Возврат;
			Иначе
				ТекущаяСтрока.Номенклатура = ПоследняяРедактируемаяНоменклатура;
				
				ТоварыПриИзмененииНоменклатуры(ТекущаяСтрока,,ПараметрДействия);
				
				Если НЕ ПараметрДействия.ОткрытаБлокирующаяФорма Тогда
					ДобавитьСерийныйНомерИОткрытьВводСерии(ТекущаяСтрока);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если (НЕ Объект.ПродажаПоЗаказу)
		И (НЕ ПараметрДействия.ОткрытаБлокирующаяФорма) Тогда
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	КонецЕсли;
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораНоменклатурыТоварыНоменклатураНачалоВыбора", ЭтотОбъект);
	ОткрытьФормуВыбораСправочника("Номенклатура",,ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Отказ = Ложь;
	
	ТоварыПередУдалениемКлиент(Отказ);
	
	Если ТекущиеДанные = Неопределено ИЛИ Отказ Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Объект.Товары.Удалить(ТекущиеДанные);
	ТоварыПослеУдаленияСервер();
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ТоварыПриИзмененииХарактеристикиНоменклатуры(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВыбратьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ТоварыПриИзмененииКоличестваУпаковок(ТекущаяСтрока, ПоследнееРедактированиеКоличество);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СуммаДоРасчета = СтрокаТабличнойЧасти.Сумма;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	СуммаПослеРасчета = СтрокаТабличнойЧасти.Сумма;
	УменьшениеСуммыЧекаККМ = СуммаДоРасчета - СуммаПослеРасчета;
	УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
	ЛогированиеИзмененийСтроки("ИзменениеЦены", 
							   Неопределено, 
							   СтрокаТабличнойЧасти.Номенклатура, 
							   СтрокаТабличнойЧасти.Характеристика, 
							   СтрокаТабличнойЧасти.Цена, 
							   Неопределено, 
							   УменьшениеСуммыЧекаККМ);
	
	ОбновитьФорму();
	ОбновлениеДисплеяПокупателя("ИзмененияЦены")

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	УменьшениеСуммыЧекаККМ = ПоследняяРедактируемаяСумма - СтрокаТабличнойЧасти.Сумма;
	УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
	ЛогированиеИзмененийСтроки("ИзменениеСуммы", 
							   ПоследняяРедактируемаяСумма, 
							   СтрокаТабличнойЧасти.Номенклатура, 
							   СтрокаТабличнойЧасти.Характеристика, 
							   СтрокаТабличнойЧасти.Сумма, 
							   Неопределено,
							   УменьшениеСуммыЧекаККМ);
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтатусУказанияСерийНажатие(Элемент, СтандартнаяОбработка)
	
	ВвестиСерии()
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя <> "ТоварыКоличествоУпаковок" Тогда
		// Т.к. в количестве упаковок уже предусмотрен пересчет скидок.
		// А в остальных полях - нет.
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
	КонецЕсли;
	ОбновитьФорму();
	Если КэшированныеЗначения = Неопределено Тогда
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары,
			КэшированныеЗначения,
			ПараметрыУказанияСерий,
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КартинкаБыстрыеТоварыШаблонНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяЭлемента = Элемент.Имя;
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "Программно", "");
	
	ЭтотОбъект.ТекущийЭлемент = Элементы.Товары;
	
	ДобавитьБыстрыйТовар(ИмяЭлемента)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЧО01Меню(Команда)
	
	ВыполнитьЧО01Меню()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧО01МенюНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьЧО01Меню()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЧО01Меню()
	
	ОткрытьЗакрытьМенюПрочихОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЧО02Поиск(Команда)
	
	ВыполнитьЧО02Поиск()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧО02ПоискНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьЧО02Поиск()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЧО02Поиск()
	
	ПереходНаФормуПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЧО03РедактированиеСтроки(Команда)
	
	ВыполнитьЧО03РедактированиеСтроки()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧО03РедактированиеСтрокиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьЧО03РедактированиеСтроки()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЧО03РедактированиеСтроки()
	
	РедактированиеСтрокиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЧО04Возврат(Команда)
	
	ВыполнитьЧО04Возврат()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧО04ВозвратНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьЧО04Возврат();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЧО04Возврат()
	
	ЭтоПродажа = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа");
	
	Если Объект.Товары.Количество() > 0 Тогда
		Если ЭтоПродажа Тогда
			ЗаголовокИнформации = НСтр("ru = 'Ввод чека возврата'"); 
			ТекстИнформации = НСтр("ru = 'Перед вводом чека возврата необходимо пробить, аннулировать или отложить текущий чек!'");
		Иначе
			ЗаголовокИнформации = НСтр("ru = 'Ввод чека продажи'"); 
			ТекстИнформации = НСтр("ru = 'Перед вводом чека продажи необходимо пробить, аннулировать или отложить текущий чек!'");
		КонецЕсли;
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОтложитьЧек", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	Если ЭтоПродажа Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВыбиратьПродажиСУчетомВозвратов");
		ПараметрыФормы.Вставить("МассивКассККМ", МассивКассККМКлиент);
		ПараметрыФормы.Вставить("МассивОрганизаций", МассивОрганизацийКлиент);
		ПараметрыФормы.Вставить("ЕстьПередачаОФД", ЕстьПередачаОФД);
		ПараметрыФормы.Вставить("Оплата", ЕстьПередачаОФД);
		ПараметрыФормы.Вставить("СкрыватьКолонкуОрганизации", МассивКассККМКлиент.Количество() = 1);
		ПараметрыФормы.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораЧекаПриВозврате", ЭтотОбъект);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораЧека", ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
		
	Иначе
		СоздатьНовыйНаборКлиент();
		
		ОбновитьФорму();
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЧО05Наличные(Команда)
	
	ВыполнитьЧО05Наличные()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧО05НаличныеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьЧО05Наличные();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЧО05Наличные()
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуПростойОплаты", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Или Объект.ОперацияСДенежнымиСредствами Тогда
		ЭтотОбъект.Доступность = Ложь;
	КонецЕсли;
	
	ОплатитьТовары("ФормаПростойОплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЧО06ПлатежнаяКарта(Команда)
	
	ВыполнитьЧО06ПлатежнаяКарта();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧО06ПлатежнаяКартаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьЧО06ПлатежнаяКарта();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЧО06ПлатежнаяКарта()
	
	Если Объект.Товары.Количество() > 0 Или Объект.ОперацияСДенежнымиСредствами Тогда
		ЭтотОбъект.Доступность = Ложь;
	КонецЕсли;
	
	ОплатитьТовары("ФормаСложнойОплаты", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЧО07СложнаяОплата(Команда)
	
	ВыполнитьЧО07СложнаяОплата();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧО07СложнаяОплатаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьЧО07СложнаяОплата();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЧО07СложнаяОплата()
	
	Если Объект.Товары.Количество() > 0 Или Объект.ОперацияСДенежнымиСредствами Тогда
		ЭтотОбъект.Доступность = Ложь;
	КонецЕсли;
	
	ОплатитьТовары("ФормаСложнойОплаты", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЧО08ОплатаБонусами(Команда)
	
	ВыполнитьЧО08ОплатаБонусами()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧО08ОплатаБонусамиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьЧО08ОплатаБонусами()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЧО08ОплатаБонусами()
	
	Отказ = Ложь;
	ПараметрыИнформации = Неопределено;
		
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКассовыеСмены(Отказ, ПараметрыИнформации);
	Если Отказ Тогда
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ВозможнаОплата = ВозможнаОплатаБонусами(ДополнительныеПараметры);
	Если ВозможнаОплата Тогда
		
		// Скидки
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("Отказ", Отказ);
		ПараметрыДействия.Вставить("ПараметрыИнформации", ПараметрыИнформации);
		ПараметрыДействия.Вставить("БонуснаяПрограммаЛояльности", ДополнительныеПараметры.БонуснаяПрограммаЛояльности);
		ПараметрыДействия.Вставить("ИмяОбработкиОповещения", "ОплатаБонусамиПослеВыводаСообщений");
		ПараметрыДействия.Вставить("БудетОплатаБонусами", Истина);
		ПараметрыДействия.Вставить("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов", ДополнительныеПараметры.УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов);
		
		Если ДополнительныеПараметры.УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов Тогда
			ОтменитьСкидкиИОплатуБонусамиСервер();
		Иначе
			Если НЕ Объект.ПродажаПоЗаказу Тогда
				НазначитьАвтоматическиеСкидкиКлиент( , , ПараметрыДействия);
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыДействия.Свойство("ВыведеныСообщения") Тогда
			Возврат;
		Иначе
			ОплатаБонусамиПослеВыводаСообщений(Неопределено, ПараметрыДействия);
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ДополнительныеПараметры);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЧО09ОперацияДСНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьИзменениеОперацииДС();
	ОперацияСДенежнымиСредствамиПриИзмененииСервер();
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	РозничныеПродажиКлиент.УстановитьЗначениеСтатусаКодаМаркировки(Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЧО09ОперацияДС(Команда)
	
	ВыполнитьИзменениеОперацииДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьИзменениеОперацииДС()
	
	Объект.ОперацияСДенежнымиСредствами = НЕ Объект.ОперацияСДенежнымиСредствами;
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		
		Объект.Серии.Очистить();
		Объект.АкцизныеМарки.Очистить();
		Объект.КодыМаркировки.Очистить();
		Объект.СерийныеНомера.Очистить();
		
	КонецЕсли;
	УстановитьЗаголовок();
	
КонецПроцедуры

/////////////////////////////////////////////

&НаКлиенте
Процедура КомандаПО01БыстрыеТовары(Команда)
	
	ВыполнитьПО01БыстрыеТовары()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО01БыстрыеТоварыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО01БыстрыеТовары()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО01БыстрыеТовары()
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.БыстрыеТоварыОткрытие");
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	Если ОткрытиеБыстрыхТоваровБезПанели Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПалитраБыстрыхТоваров", ПалитраБыстрыхТоваров);
		ПараметрыФормы.Вставить("НомерСтраницы", 1);
		ПараметрыФормы.Вставить("ЗакрыватьБыстрыеТоварыПриВыбореТовара", НаборПравИНастроек.ЗакрыватьБыстрыеТоварыПриВыбореТовара);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Справочник.ПалитраБыстрыхТоваров.Форма.ФормаСтраницыБыстрыхТоваров", ПараметрыФормы, ЭтотОбъект,,,,, Режим);
	Иначе
		ОткрытьЗакрытьМенюБыстрыхТоваров();
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО02ВвестиВнесениеДенег(Команда)
	
	ВыполнитьПО02ВвестиВнесениеДенег()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО02ВвестиВнесениеДенегНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО02ВвестиВнесениеДенег()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО02ВвестиВнесениеДенег()
	
	Если НЕ ВозможностьВнесенияДенег() Тогда
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Нет документов по внесению денежных средств'"));
		
		ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ВвестиВнесениеДенег");
	
	ВывестиИнформациюНаДисплейПокупателя("Сервис");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КассыККМ"   , МассивКассККМКлиент);
	ПараметрыФормы.Вставить("Организации", МассивОрганизацийКлиент);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораВнесенияДенег", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораВнесенияДенег", ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	
	ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО03ЗаменитьПрава(Команда)
	
	ВыполнитьПО03ЗаменитьПрава()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО03ЗаменитьПраваНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО03ЗаменитьПрава()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО03ЗаменитьПрава()
	
	Если Не ИспользоватьПодключаемоеОборудование Тогда
		ТекстЗаголовка = НСтр("ru = 'Карта не может быть считана.'");
		ТекстСообщения = НСтр("ru = 'Подключаемое оборудование не используется.'"); 
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстЗаголовка, ТекстСообщения);
		
		Возврат;
	
	КонецЕсли;
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ЗаменитьПрава");

	Пользователь = глЗначениеПеременной("ПользовательИзмененныхПрав");
	Если Пользователь = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(Пользователь) Тогда
	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Пользователь", Пользователь);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуЗаменыПравПользователя", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаЗаменыПравПользователя", ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим); 
		
	Иначе
		
		глЗначениеПеременнойУстановить("ПользовательИзмененныхПрав", Неопределено, Истина);
		глЗначениеПеременнойУстановитьСервер("ПользовательИзмененныхПрав", Неопределено, Истина);
		Оповестить("ОбновитьФормуМенюРМК");
		ЛогированиеБезДополнительныхДанных("ЗаменаПользователя", Пользователь);
		
		ПриИзмененииПравСервер();
		ОбновитьФорму();
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО04ОтложитьЧек(Команда)
	
	ВыполнитьПО04ОтложитьЧек()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО04ОтложитьЧекНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО04ОтложитьЧек()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО04ОтложитьЧек()
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОтложитьЧек", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	ОповещениеОтложитьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО05ВвестиАннулирование(Команда)
	
	ВыполнитьПО05ВвестиАннулирование()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО05ВвестиАннулированиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО05ВвестиАннулирование()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО05ВвестиАннулирование()
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВвестиАннулирование", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	ОповещениеВвестиАннулирование();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО06ВвестиШтрихкод(Команда)
	
	ВыполнитьПО06ВвестиШтрихкод()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО06ВвестиШтрихкодНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО06ВвестиШтрихкод();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО06ВвестиШтрихкод()
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаЧислаВвестиШтрихкод", ЭтотОбъект);
	ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите штрихкод.'"), 0, 0, Ложь, Истина, ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО07ОткрытьДенежныйЯщик(Команда)
	
	ВыполнитьПО07ОткрытьДенежныйЯщик()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО07ОткрытьДенежныйЯщикНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО07ОткрытьДенежныйЯщик()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО07ОткрытьДенежныйЯщик()
	
	Если Не ИспользоватьПодключаемоеОборудование Тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Денежный ящик не может быть открыт."),
																	НСтр("ru = 'Подключаемое оборудование не используется.'"));
		Возврат;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораКассыПриОткрытииДенежногоЯщика", ЭтотОбъект);
		ЗначениеВыбораКасса = ВыбраннаяКассаККМ(ОбработчикОповещения);
		ЗавершитьВыбораКассыПриОткрытииДенежногоЯщика(ЗначениеВыбораКасса);
	Иначе
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Устройство для печати чеков не подключено.'"))
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО08РасчетСкидок(Команда)
	
	ВыполнитьПО08РасчетСкидок()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО08РасчетСкидокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО08РасчетСкидок();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО08РасчетСкидок()
	
	НазначитьАвтоматическиеСкидкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО09Печать(Команда)
	
	ВыполнитьПО09Печать()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО09ПечатьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО09Печать()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО09Печать()
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Чек не заполнен.'"));
		Возврат;
		
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Печать чека возможна только после закрытия чека. Закрыть чек?'");
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаПечатьПослеЗакрытия", ЭтотОбъект);
	ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(ТекстВопроса,,,ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО10НапечататьПоследнийСлипЧек(Команда)
	
	ВыполнитьПО10НапечататьПоследнийСлипЧек()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО10НапечататьПоследнийСлипЧекНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО10НапечататьПоследнийСлипЧек()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО10НапечататьПоследнийСлипЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	Если НЕ РезультатВыполнения.Результат Тогда  
		ЗаголовокИнформации = НСтр("ru = 'Печать последнего слип чека'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО10НапечататьПоследнийСлипЧек()
	
	Если Не ИспользоватьПодключаемоеОборудование Тогда
		ТекстЗаголовка = НСтр("ru = 'Слип-чек не может быть напечатан.'");
		ТекстСообщения = НСтр("ru = 'Подключаемое оборудование не используется.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстЗаголовка, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(глПодключаемоеОборудование.ПоследнийСлипЧек) Тогда
		ЭтотОбъект.Доступность = Ложь;
		Оповещение = Новый ОписаниеОповещения("ВыполнитьПО10НапечататьПоследнийСлипЧекЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьПечатьТекста(Оповещение, УникальныйИдентификатор, глПодключаемоеОборудование.ПоследнийСлипЧек);
	Иначе
		ТекстСообщения = НСтр("ru = 'Нет последнего слип-чека. '");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО11Выход(Команда)
	
	ВыполнитьПО11Выход()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО11ВыходНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО11Выход();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО11Выход()
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВыполнитьВыход", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	ОповещениеВыполнитьВыход();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО12ПолучитьВес(Команда)
	
	ВыполнитьПО12ПолучитьВес()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО12ПолучитьВесНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО12ПолучитьВес()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО12ПолучитьВес()
	
	Если Не ИспользоватьПодключаемоеОборудование Тогда
		ЗаголовокИнформации = НСтр("ru = 'Вес не может быть получен.'");
		ТекстИнформации     = НСтр("ru = 'Подключаемое оборудование не используется.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru='Необходимо выбрать строку, для которой нужно получить вес.'"));
	Иначе
		ЭтотОбъект.Доступность = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПолучитьВесЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОписаниеОповещения, ЭтотОбъект, , Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО13ВвестиВыемкаДенег(Команда)
	
	ВыполнитьПО13ВвестиВыемкаДенег()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО13ВвестиВыемкаДенегНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО13ВвестиВыемкаДенег()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО13ВвестиВыемкаДенег()
	
	ВывестиИнформациюНаДисплейПокупателя("Сервис");
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораКассыВвестиВыемкаДенег", ЭтотОбъект);
	
	ЗначениеВыбораКасса = ВыбраннаяКассаККМ(ОбработчикОповещения);
	
	ЗавершитьВыбораКассыВвестиВыемкаДенег(ЗначениеВыбораКасса);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО14Продавец(Команда)
	
	ВыполнитьПО14Продавец()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО14ПродавецНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО14Продавец()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО14Продавец()
	
	ИсполняемаяОперацияЛогирования = "ВыбранПродавец";
	Если ЗначениеЗаполнено(Объект.Продавец) Тогда
		ЛогированиеВводаПродавца(Неопределено, Объект.Продавец, ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка"));
		Объект.Продавец = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		УстановитьЗаголовок();
	Иначе
		// &ЗамерПроизводительности
		ОценкаПроизводительностиРТКлиент.НачатьЗамер(
						Истина, "Справочник.ФизическиеЛица.Форма.ФормаВыбораВРМК.Открытие");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораПродавца", ЭтотОбъект);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбораВРМК",, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО15ПродолжитьЧек(Команда)
	
	ВыполнитьПО15ПродолжитьЧек()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО15ПродолжитьЧекНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО15ПродолжитьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО15ПродолжитьЧек()
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеПродолжитьЧек", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	ОповещениеПродолжитьЧек();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО16ВвестиВозвратТовараОтРозничногоПокупателя(Команда)
	
	ВыполнитьПО16ВвестиВозвратТовараОтРозничногоПокупателя()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО16ВвестиВозвратТовараОтРозничногоПокупателяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО16ВвестиВозвратТовараОтРозничногоПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО16ВвестиВозвратТовараОтРозничногоПокупателя()
	
	
	Если Объект.Товары.Количество() > 0 Тогда
		ЗаголовокИнформации = НСтр("ru = 'Ввод чека возврата'"); 
		ТекстИнформации = НСтр("ru = 'Перед вводом чека возврата необходимо пробить, аннулировать или отложить текущий чек!'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОтложитьЧек", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	ЭтоПродажа = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа");
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	
	Если ЭтоПродажа Тогда
		
		ВывестиИнформациюНаДисплейПокупателя("ВозвратТовара");
		РезультатОткрытияФормы = Новый Структура;
		РезультатОткрытияФормы.Вставить("ЧекККМ", Неопределено);
		ОповещениеОткрытьФормуВыбораЧекаПриВозврате(РезультатОткрытияФормы, Неопределено);
		
	Иначе
		СоздатьНовыйНаборКлиент();
		
		ОбновитьФорму();
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО17ВвестиИнформационнуюКарту(Команда)
	
	ВыполнитьПО17ВвестиИнформационнуюКарту()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО17ВвестиИнформационнуюКартуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО17ВвестиИнформационнуюКарту()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО17ВвестиИнформационнуюКарту()
	
	Если Объект.ПродажаПоЗаказу Тогда
		
		ЗаголовокИнформации = НСтр("ru = 'Ошибка изменения дисконтной карты.'");
		
		ТекстСообщения = НСтр("ru = 'Дисконтная карта выбирается в документе заказ покупателя'");
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности	
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ВвестиИнформационнуюКарту");
	
	Если НЕ ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		КодКарты = "";
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ДополнительныеПараметры = Новый Структура;
		Если (ИспользоватьНастройкуРМК И НаборПравИНастроек.ВыборИнформационнойКартыТолькоПоКоду) Тогда
			
			// &ЗамерПроизводительности
			ОценкаПроизводительностиРТКлиент.НачатьЗамер(
			Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаПоискаДисконтнойКарты.Открытие");
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуПоискаДисконтнойКарты", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаПоискаДисконтнойКарты",,,,,, ОбработчикОповещения, Режим);
		Иначе
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораДисконтнойКарты", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораДисконтнойКарты",,,,,, ОбработчикОповещения, Режим);
		КонецЕсли;
	Иначе
		ЛогированиеБезДополнительныхДанных("ВыбранаДисконтнаяКарта", Объект.ДисконтнаяКарта, ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка"));
		Объект.ДисконтнаяКарта = ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка");
		Модифицированность = Истина;
		ТекстСообщенияСменыКарты = "";
		ПриИзмененииДисконтнаяКартаСервер(ТекстСообщенияСменыКарты);
		Если ПустаяСтрока(ТекстСообщенияСменыКарты) Тогда
			ОбновитьФорму();
		Иначе
			ЗаголовокИнформации = "";
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщенияСменыКарты);
		КонецЕсли;
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО18ОткрытьПодарочныеСертификаты(Команда)
	
	ВыполнитьПО18ОткрытьПодарочныеСертификаты()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО18ОткрытьПодарочныеСертификатыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО18ОткрытьПодарочныеСертификаты()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО18ОткрытьПодарочныеСертификаты()
	
	ПересчетКоличества = Ложь;
	
	СтрокаТЧ = Элементы.Товары.ТекущиеДанные;
	
	ЗаголовокИнформации = НСтр("ru = 'Ошибка ввода номеров подарочных сертификатов'"); 
	
	Если СтрокаТЧ = Неопределено Тогда

		ТекстИнформации = НСтр("ru = 'Не выбрана строка, для которой необходимо ввести подарочные сертификаты!'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;

	ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда

		ТекстИнформации = НСтр("ru = 'Для ввода номеров подарочных сертификатов необходимо выбрать номенклатуру!'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;

	КонецЕсли;
	
	ДобавитьПодарочныеСертификатыВСтроку(СтрокаТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО19УправляемыеСкидки(Команда)
	
	ВыполнитьПО19УправляемыеСкидки()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО19УправляемыеСкидкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО19УправляемыеСкидки()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО19УправляемыеСкидки()
	
	Если ОшибкаРасчетаСкидокПоЗаказуПокупателя() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОшибкаРасчетаСкидокПоДокументуРасчета() Тогда
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности   
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.УправляемыеСкидки");
	
	РассчитатьКонтролироватьОстаткиТоваровПриЗакрытииЧека();
	
	АдресСкидокВХранилище = ВыполнитьПредварительныйРасчетСкидокНаСервере(ПорядковыйНомерПродажи);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивУправляемыеСкидкиДокумента", УправляемыеСкидки.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("Дата"   , ТекущаяДата());
	ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
	ПараметрыФормы.Вставить("АдресСкидокВХранилище", АдресСкидокВХранилище);
	
	СписокОдноразовыхКодов = Новый Массив;
	Для Каждого ПредъявленныйКод Из Объект.ПредъявленныеКодыОднократныхСкидок Цикл
		СписокОдноразовыхКодов.Добавить(ПредъявленныйКод.КодСкидки);
	КонецЦикла;
	ПараметрыФормы.Вставить("СписокОдноразовыхКодов", СписокОдноразовыхКодов);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуУправляемыхСкидок", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаУправляемыеСкидки", ПараметрыФормы,,,,, ОбработчикОповещения, Режим);
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО20ЗаменаКарты(Команда)
	
	ВыполнитьПО20ЗаменаКарты()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО20ЗаменаКартыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО20ЗаменаКарты()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО20ЗаменаКарты()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		ПараметрыФормы.Вставить("КартаИсточник", Объект.ДисконтнаяКарта);
	ИначеЕсли ЗначениеЗаполнено(ДисконтнаяКартаДляЗамены) Тогда
		ПараметрыФормы.Вставить("КартаИсточник", ДисконтнаяКартаДляЗамены);
	Иначе
		ПараметрыФормы.Вставить("КартаИсточник", ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка"));
	КонецЕсли;
	ПараметрыФормы.Вставить("КопироватьПараметрыБонусовПриЗаменеКарты", 
								ИспользоватьНастройкуРМК И НаборПравИНастроек.КопироватьПараметрыБонусовПриЗаменеКарты);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуДокументаЗаменаОднойКарты", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаДокументаЗаменаОднойКарты", ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО21ПробитьЧек(Команда)
	
	ВыполнитьПО21ПробитьЧек()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО21ПробитьЧекНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО21ПробитьЧек()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО21ПробитьЧек()
	
	Если Объект.Товары.Количество() > 0 Тогда
		ЗаголовокИнформации = НСтр("ru = 'Пробитие другого чека'"); 
		ТекстИнформации = НСтр("ru = 'Перед пробитием другого чека необходимо пробить, аннулировать или отложить текущий чек!'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОтложитьЧек", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПробитиеДругогоЧека");
	ПараметрыФормы.Вставить("МассивКассККМ", МассивКассККМКлиент);
	ПараметрыФормы.Вставить("СкрыватьКолонкуОрганизации", МассивКассККМКлиент.Количество() = 1);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораЧекаПриПробитииЧека", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораЧека", ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО22РучныеСкидки(Команда)
	
	ВыполнитьПО22РучныеСкидки()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО22РучныеСкидкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО22РучныеСкидки()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО22РучныеСкидки()
	
	Если ОшибкаРасчетаСкидокПоЗаказуПокупателя() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОшибкаРасчетаСкидокПоДокументуРасчета() Тогда
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
					Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаРучныхСкидок.Открытие");
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуРучныхСкидок", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаРучныхСкидок",, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО23ВвестиСерии(Команда)
	
	ВыполнитьПО23ВвестиСерии()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО23ВвестиСерииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО23ВвестиСерии()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО23ВвестиСерии()
	
	ВвестиСерии()
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО24ПолучитьИзТСД(Команда)
	
	ВыполнитьПО24ПолучитьИзТСД()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО24ПолучитьИзТСДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО24ПолучитьИзТСД()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО24ПолучитьИзТСД()
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	Если Не ИспользоватьПодключаемоеОборудование Тогда
		
		ЗаголовокИнформации = НСтр("ru = 'Данные не могут быть получены.'"); 
		ТекстИнформации     = НСтр("ru = 'Подключаемое оборудование не используется.'"); 
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбиратьНенайденные", Ложь);
	ДополнительныеПараметры.Вставить("ОбработатьПослеЗагрузки", Истина);
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО25ПечатьПробитогоЧека(Команда)
	
	ВыполнитьПО25ПечатьПробитогоЧека()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО25ПечатьПробитогоЧекаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО25ПечатьПробитогоЧека()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО25ПечатьПробитогоЧека()
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ЗаголовокИнформации = НСтр("ru = 'Печать пробитого чека'"); 
		ТекстИнформации = НСтр("ru = 'Перед печатью пробитого чека необходимо пробить, аннулировать или отложить текущий чек!'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
		
	КонецЕсли;
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОтложитьЧек", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
					Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораЧека.Открытие");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПечатьПробитогоЧека");
	ПараметрыФормы.Вставить("МассивКассККМ", МассивКассККМКлиент);
	ПараметрыФормы.Вставить("СкрыватьКолонкуОрганизации", МассивКассККМКлиент.Количество() = 1);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораЧекаПриПечатиПробитогоЧека", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораЧека", ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО26ОтчетБезГашения(Команда)
	
	ВыполнитьПО26ОтчетБезГашения()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО26ОтчетБезГашенияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО26ОтчетБезГашения()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО26ОтчетБезГашения()
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораКассыОтчетБезГашения", ЭтотОбъект);
	
	ЗначениеВыбораКасса = ВыбраннаяКассаККМ(ОбработчикОповещения);
	
	НапечататьОтчетБезГашения(ЗначениеВыбораКасса)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО27ПродажаПоЗаказу(Команда)
	
	ВыполнитьПО27ПродажаПоЗаказу()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО27ПродажаПоЗаказуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО27ПродажаПоЗаказу()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО27ПродажаПоЗаказу()
	
	Если Объект.Товары.Количество() > 0 Тогда
		ЗаголовокИнформации = НСтр("ru = 'Выбор заказа покупателя'"); 
		ТекстИнформации = НСтр("ru = 'Перед выбором заказа покупателя необходимо пробить, аннулировать или отложить текущий чек!'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОтложитьЧек", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ПродажаПоЗаказу");
	
	Если НЕ Объект.ПродажаПоЗаказу Тогда
		
		МассивСтруктурОтбора = Новый Массив;
		
		СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
		СтруктураОтбора.Поле          = "Ссылка.Статус";
		СтруктураОтбора.Значение      = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.Согласован");
		СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураОтбора.Использование = Истина;
		МассивСтруктурОтбора.Добавить(СтруктураОтбора);
		
		СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
		СтруктураОтбора.Поле          = "Магазин";
		СтруктураОтбора.Значение      = Объект.Магазин;
		СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураОтбора.Использование = Истина;
		МассивСтруктурОтбора.Добавить(СтруктураОтбора);
		
		СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
		СтруктураОтбора.Поле          = "Ссылка.Организация";
		СтруктураОтбора.Значение      = МассивОрганизацийКлиент;
		СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
		СтруктураОтбора.Использование = Истина;
		МассивСтруктурОтбора.Добавить(СтруктураОтбора);
		
		СтруктураОтбора = ОбщегоНазначенияРТКлиентСервер.СтруктураОтбора();
		СтруктураОтбора.Поле          = "Ссылка.Проведен";
		СтруктураОтбора.Значение      = Истина;
		СтруктураОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
		СтруктураОтбора.Использование = Истина;
		МассивСтруктурОтбора.Добавить(СтруктураОтбора);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МассивСтруктурОтбора", МассивСтруктурОтбора);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораЗаказаПокупателя", ЭтотОбъект);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораЗаказаПокупателя", ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	Иначе
		СоздатьНовыйНаборКлиент();
		ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяПриПростое", 20, Истина);
		ЗавершитьОбработкуДокументаОснования();
		Элементы.КартинкаПО27ПродажаПоЗаказу.ЦветТекста = ЦветПродажи;
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО28ПросмотрНакоплений(Команда = Неопределено)
	
	ВыполнитьПО28ПросмотрНакоплений()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО28ПросмотрНакопленийНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО28ПросмотрНакоплений()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО28ПросмотрНакоплений()
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ПросмотрНакоплений");
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
	Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаПросмотраНакоплений.Открытие");
	
	ПараметрыОткрытия = Новый Структура;
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("Ссылка", Объект.Ссылка);
	РеквизитыДокумента.Вставить("Дата", Объект.Дата);
	РеквизитыДокумента.Вставить("Проведен", Ложь);
	РеквизитыДокумента.Вставить("ВидОперации", Объект.ВидОперации);
	РеквизитыДокумента.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	РеквизитыДокумента.Вставить("СтатусЧекаККМ", ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка"));
	РеквизитыДокумента.Вставить("ОтчетОРозничныхПродажах", ПредопределенноеЗначение("Документ.ОтчетОРозничныхПродажах.ПустаяСсылка"));
	
	ПараметрыОткрытия.Вставить("РеквизитыДокумента", РеквизитыДокумента);
	ПараметрыОткрытия.Вставить("ВыборИнформационнойКартыТолькоПоКоду", ИспользоватьНастройкуРМК И НаборПравИНастроек.ВыборИнформационнойКартыТолькоПоКоду);
	ПараметрыОткрытия.Вставить("РазрешитьПодборИнформационнойКарты", НаборПравИНастроек.РазрешитьПодборИнформационнойКарты);
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаПросмотраНакоплений", ПараметрыОткрытия);
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО29ОтменитьОплатуБонусами(Команда = Неопределено)
	
	ВыполнитьПО29ОтменитьОплатуБонусами()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО29ОтменитьОплатуБонусамиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО29ОтменитьОплатуБонусами()
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО29ОтменитьОплатуБонусами()
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ОтменитьОплатуБонусами");		
	ОтменитьОплатуБонусами();
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ОтменитьСкидки");
	ОтменитьСкидки();
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО30ВозвратПоследнегоЧека(Команда)
	
	ВыполнитьВозвратПоследнегоЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО30ВозвратПоследнегоЧекаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьВозвратПоследнегоЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВозвратПоследнегоЧека()
	
	Если Объект.Товары.Количество() > 0 Тогда
		ЗаголовокИнформации = НСтр("ru = 'Ввод чека возврата'"); 
		ТекстИнформации = НСтр("ru = 'Перед вводом чека возврата необходимо пробить, аннулировать или отложить текущий чек!'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОтложитьЧек", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	
	ПоследнийЧек = ПоследнийПробитыйЧекПродажи(МассивКассККМКлиент);
	Если ЗначениеЗаполнено(ПоследнийЧек) Тогда
		РезультатОткрытияФормы = Новый Структура;
		РезультатОткрытияФормы.Вставить("ЧекККМ", ПоследнийЧек);
		ОповещениеОткрытьФормуВыбораЧекаПриВозврате(РезультатОткрытияФормы, Неопределено);
	Иначе
		ЗаголовокПредупрежедения = НСтр("ru = 'Поиск последнего чека'");
		ТекстПредупреждения =  НСтр("ru = 'Не найдено пробитых чеков продажи в текущей смене'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(, ТекстПредупреждения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО31ПолучитьДокументРасчета(Команда)
	
	ОткрытьВыборДокументРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО31ПолучитьДокументРасчетаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьВыборДокументРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО32АкцизныеМарки()
	Если Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
		ДанныеСтрокиТовары = Элементы.Товары.ТекущиеДанные;
		Если ДанныеСтрокиТовары.СтатусУказанияАкцизныхМарок <> 0 Тогда
			ИдентификаторСтроки = ДанныеСтрокиТовары.ПолучитьИдентификатор();
			
			СтруктураПараметровКлиента = Новый Структура;
			СтруктураПараметровКлиента.Вставить("ОткрытаБлокирующаяФорма", Истина);
			СтруктураПараметровКлиента.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
			СтруктураПараметровКлиента.Вставить("ПрекратитьДействия", Ложь);
			
			ВвестиАкцизнуюМарку(
				ДанныеСтрокиТовары,
				"КоличествоУпаковок",
				СтруктураПараметровКлиента);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО32АкцизныеМарки(Команда)
	
	ВыполнитьПО32АкцизныеМарки()
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПО32АкцизныеМаркиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО32АкцизныеМарки()
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПО33ПоискПоНаименованию(Команда)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Магазин",Объект.Магазин);
	РаботаСПравиламиИменованияКлиент.ПоискПоНаименованию(ЭтаФорма,ПараметрыПоиска,Истина);

КонецПроцедуры

 &НаКлиенте
Процедура КартинкаПО33ПоискПоНаименованиюНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Магазин",Объект.Магазин);
	РаботаСПравиламиИменованияКлиент.ПоискПоНаименованию(ЭтаФорма,ПараметрыПоиска,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыборДокументРасчета()

	Если Объект.Товары.Количество() > 0 Тогда
		ЗаголовокИнформации = НСтр("ru = 'Выбор документа расчета'"); 
		ТекстИнформации = НСтр("ru = 'Перед выбором документа расчета необходимо пробить, аннулировать или отложить текущий чек!'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	Если ОтменитьОплатуПК Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОтложитьЧек", ЭтотОбъект);
		ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ВыборДокументРасчета");
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументРасчета)  Тогда
		Объект.ДокументРасчета = Неопределено;
		ЭтоЗачетАванса = Ложь;
		ЭтоОплатаРассрочки = Ложь;
		ЭтоВозвратАванса   = Ложь;
		СуммаОстаткаДокументаРасчета = 0;
		ЕстьТоварыВДокументеРасчета = Ложь;
		
		УстановитьЗаголовок();
		ЗавершитьОбработкуДокументаОснования();
	Иначе
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораДокументаРасчета", ЭтотОбъект);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Контрагент"       , Объект.Контрагент);
		ПараметрыФормы.Вставить("Магазин"          , Объект.Магазин);
		ПараметрыФормы.Вставить("МассивОрганизаций", МассивОрганизацийКлиент);
		ПараметрыФормы.Вставить("ЗаказПокупателя"  , Объект.ЗаказПокупателя);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораДокументаРасчета", ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим); 
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

/////////////////////////////////////////////
&НаКлиенте
Процедура КомандаБыстрыеТоварыТовар(Команда)
	// Вставить содержимое обработчика.
	ИмяКоманды = Команда.Имя;
	ИмяКоманды = СтрЗаменить(ИмяКоманды, "ПрограммноКомандаБыстрыеТовары", "");
	
	ДобавитьБыстрыйТовар(ИмяКоманды);
	
	Если НаборПравИНастроек.ЗакрыватьБыстрыеТоварыПриВыбореТовара Тогда
		Элементы.ГруппаБыстрыхТоваров.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

//////////////////// (Ручные скидки).

&НаКлиенте
Процедура КоманднаяПанельСкидкиНажатие(Команда)
	
	ПодключитьОбработчикОжидания("Подключаемый_КомандаСкидки" + СтрЗаменить(Команда.Имя, "Команда", ""), 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Получить таблицу касс ККМ и организаций.
//
// Параметры:
//  Нет
//
Процедура ПолучитьТаблицуКассККМ()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КассыККМ.Ссылка КАК КассаККМ,
	|	КассыККМ.Владелец КАК Организация,
	|	КассыККМ.ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.РабочееМесто = &РабочееМесто
	|	И НЕ КассыККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ККМOffline)
	|	И НЕ КассыККМ.ПометкаУдаления
	|	И (КассыККМ.Магазин = &Магазин
	|			ИЛИ &Магазин = ЗНАЧЕНИЕ(Справочник.Магазины.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
	Запрос.УстановитьПараметр("Магазин"     , Объект.Магазин);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаКассККМОрганизаций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если Выборка.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
			ЕстьПередачаОФД = Истина;
		КонецЕсли;
		
		ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
										НоваяСтрока.Организация, Объект.Магазин);
		Если ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда 
			ОрганизацииЕГАИС.Добавить(ОрганизацияЕГАИС);
		КонецЕсли;
	КонецЦикла;
	
	Если ОрганизацииЕГАИС.Количество() = 1 Тогда 
		ОрганизацияЕГАИС = ОрганизацииЕГАИС[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Получить таблицу видов особых налогов организаций.
//
// Параметры:
//  Нет
//
Процедура ПолучитьТаблицуВидыОсобыхНалоговОрганизаций()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыНалогов.Организация КАК Организация,
	|	ВидыНалогов.Склад КАК Склад,
	|	ВидыНалогов.ВидНалога КАК ВидНалога
	|ИЗ
	|	РегистрСведений.ВидыОсобыхНалоговОрганизаций.СрезПоследних(&Дата, Склад.Магазин = &Магазин) КАК ВидыНалогов";
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	Результат = Запрос.Выполнить();
	ТаблицаВидыОсобыхНалоговОрганизаций.Загрузить(Результат.Выгрузить());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспределениеПродажУслугПоОрганизациям.ТоварнаяГруппа КАК ТоварнаяГруппа,
	|	РаспределениеПродажУслугПоОрганизациям.ВидНалога КАК ВидНалога
	|ИЗ
	|	РегистрСведений.РаспределениеПродажУслугПоОрганизациям КАК РаспределениеПродажУслугПоОрганизациям
	|ГДЕ
	|	РаспределениеПродажУслугПоОрганизациям.Магазин = &Магазин";
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	Результат = Запрос.Выполнить();
	ТаблицаВидыОсобыхНалоговУслуг.Загрузить(Результат.Выгрузить());
	
КонецПроцедуры // ПолучитьТаблицуВидыОсобыхНалоговОрганизаций()

&НаСервере
Функция СтруктураМассивовКассККМИОрганизаций()
	
	ТаблицаЗначенийКассИОрганизаций = ТаблицаКассККМОрганизаций.Выгрузить();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КассыККМ"   , ТаблицаЗначенийКассИОрганизаций.ВыгрузитьКолонку("КассаККМ"));
	СтруктураПараметров.Вставить("Организации", ТаблицаЗначенийКассИОрганизаций.ВыгрузитьКолонку("Организация"));
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКнопкиНижнейПанели(Отказ, ПараметрыИнформации)
	
	АкселераторКнопкиЗаменыПрав = " (Alt+F4)";
	
	МаксимальноеКоличествоКнопокВОдномРяду     = 0;
	МаксимальноеКоличествоКнопокВКонфигураторе = ПродажиСервер.МаксимальноеКоличествоКнопокВКонфигураторе();
	
	ШаблонПустойКартинки = Элементы.КартинкаПустаяБыстрыеТоварыШаблон;
	
	ОткрыватьНижнююПанельПриЗапуске = НастройкаРМК.ОткрыватьНижнююПанельПриЗапуске;
	
	ШаблонДляЗаполненияКнопки = Элементы.КартинкаПО01БыстрыеТовары;
	ШаблонДляЗаполненияКнопкиАкселераторы = Элементы.КомандаПО01БыстрыеТоварыАкселераторы;
	
	КартинкаБыстрыеТоварыШаблон = Элементы.КартинкаБыстрыеТоварыШаблон;
	
	РеверсКнопкиПродавец = Ложь;
	ВыводитьПолныйОстатокПустыхКартинок = Ложь;
	
	Для Каждого ЭлементГруппыПрочихОпераций Из Элементы.ГруппаПрочихОпераций.ПодчиненныеЭлементы Цикл
		МаксимальноеКоличествоКнопокВКонфигураторе = Макс(МаксимальноеКоличествоКнопокВКонфигураторе, ЭлементГруппыПрочихОпераций.ПодчиненныеЭлементы.Количество());
	КонецЦикла;
	
	Если ИспользоватьНастройкуРМК И НастройкаРМК.ИспользоватьРасширеннуюНастройкуКнопокНижнейПанели И НастройкаРМК.КнопкиНижнейПанели.Количество() > 0 Тогда
		
		ИспользоватьРасширеннуюНастройкуКнопокНижнейПанели = Истина;
		// Очистить кнопки
		МаксимальноеКоличествоКнопокВКонфигураторе = 0;
		ШаблонДляЗаполненияГруппы = Неопределено;
		ШаблонДляЗаполненияКнопки = Неопределено;
		Для Каждого ЭлементГруппыПрочихОпераций Из Элементы.ГруппаПрочихОпераций.ПодчиненныеЭлементы Цикл
			ЭлементГруппыПрочихОпераций.Видимость   = Ложь;
			ЭлементГруппыПрочихОпераций.Доступность = Ложь;
			ШаблонДляЗаполненияГруппы = ЭлементГруппыПрочихОпераций;
			Для Каждого ЭлементКнопкаКонфигуратора Из ЭлементГруппыПрочихОпераций.ПодчиненныеЭлементы Цикл
				ЭлементКнопкаКонфигуратора.Видимость   = Ложь;
				ЭлементКнопкаКонфигуратора.Доступность = Ложь;
				ШаблонДляЗаполненияКнопки = ЭлементКнопкаКонфигуратора;
			КонецЦикла;
		КонецЦикла;
		
		// Очистить акселераторы
		Для каждого КомандаФормы Из ЭтотОбъект.Команды Цикл
			ИмяКоманды = КомандаФормы.Имя;
			Если Найти(ИмяКоманды, "КомандаПО") = 1 Тогда
				КомандаФормы.СочетаниеКлавиш = ЭтотОбъект.Команды.КомандаБыстрыеТоварыТовар.СочетаниеКлавиш;
			КонецЕсли;
		КонецЦикла;
		
		// Очистить подменю командной панели.
		
		Для каждого ЭлементПодменюПрочихОпераций Из Элементы.ГруппаПанельПрочихОпераций.ПодчиненныеЭлементы Цикл
			ЭлементПодменюПрочихОпераций.Видимость   = Ложь;
			ЭлементПодменюПрочихОпераций.Доступность = Ложь;
		КонецЦикла;
		
		Если НастройкаРМК.МаксимальноеКоличествоКнопокВОдномРяду > 0 Тогда
			МаксимальноеКоличествоКнопокВОдномРяду = НастройкаРМК.МаксимальноеКоличествоКнопокВОдномРяду;
		Иначе 
			МаксимальноеКоличествоКнопокВОдномРяду = МаксимальноеКоличествоКнопокВКонфигураторе;
		КонецЕсли;
		
		КоличествоКнопокНижнейПанели = НастройкаРМК.КнопкиНижнейПанели.Количество();
		
		// Рассчитать высоту панели
		КоличествоРядовКнопок = Цел(КоличествоКнопокНижнейПанели/МаксимальноеКоличествоКнопокВОдномРяду);
		
		Если Не КоличествоРядовКнопок = (КоличествоКнопокНижнейПанели/МаксимальноеКоличествоКнопокВОдномРяду) Тогда
			КоличествоРядовКнопок = КоличествоРядовКнопок + 1;
		КонецЕсли;
		
		Если КоличествоРядовКнопок > 1 Тогда
			ВыводитьПолныйОстатокПустыхКартинок = Истина;
		КонецЕсли;
		
		Элементы.ГруппаПрочихОпераций.Высота = ШаблонДляЗаполненияГруппы.Высота * КоличествоРядовКнопок + 1;
		
		// Создать группы 
		Для Ряд = 1 По КоличествоРядовКнопок Цикл
			ЭлементРяд = Элементы.Вставить("ПрограммноГруппаПрочихОперацийРяд"+Формат(Ряд,"ЧГ=0"), Тип("ГруппаФормы"), Элементы.ГруппаПрочихОпераций);
			ЭлементРяд.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ЗаполнитьЗначенияСвойств(ЭлементРяд, ШаблонДляЗаполненияГруппы, , "Имя, Заголовок, ПутьКДаннымЗаголовка, Видимость, Доступность");
		КонецЦикла;
		
		// Заполнить кнопки
		НомерКнопки = 0;
		Для каждого СтрокаНастройкиКнопок Из НастройкаРМК.КнопкиНижнейПанели Цикл
			
			НомерКнопки = НомерКнопки + 1;
			
			НомерСтрокиНастройки = НомерКнопки;
			Ряд          = Цел((НомерСтрокиНастройки - 1) / МаксимальноеКоличествоКнопокВОдномРяду) + 1;
			ПозицияВРяду = НомерСтрокиНастройки - МаксимальноеКоличествоКнопокВОдномРяду * Цел((МаксимальноеКоличествоКнопокВОдномРяду * Ряд-1)/МаксимальноеКоличествоКнопокВОдномРяду);
			ЗаголовокКнопки = СтрокаНастройкиКнопок.ЗаголовокКнопки;
			
			ГруппаРяда = Элементы["ПрограммноГруппаПрочихОперацийРяд"+Формат(Ряд,"ЧГ=0")];
			
			// Создать кнопку формы в панели.
			ИмяКоманды = СтрокаНастройкиКнопок.ИмяКоманды;
			ИмяКомандыПрограммно = "Программно" + ИмяКоманды;
			ИмяКартинки = СтрЗаменить(ИмяКоманды, "КомандаПО", "КартинкаПО");
			ИмяКартинкиПрограммно = СтрЗаменить(ИмяКомандыПрограммно, "КомандаПО", "КартинкаПО");
			
			СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша[СтрокаНастройкиКнопок.Клавиша], СтрокаНастройкиКнопок.АкселераторAlt, СтрокаНастройкиКнопок.АкселераторCtrl, СтрокаНастройкиКнопок.АкселераторShift);
			Если ИмяКоманды = "КомандаПО16ВвестиВозвратТовараОтРозничногоПокупателя" Тогда
				ЗаголовокКнопки = НСтр("ru = 'Возврат без основания (%1)'");
				ТекстСочетания = ?(СочетаниеКлавиш.Alt, "Alt + ", "")
								+ ?(СочетаниеКлавиш.Ctrl, "Ctrl + ", "")
								+ ?(СочетаниеКлавиш.Shift, "Shift + ", "")
								+ Строка(СочетаниеКлавиш.Клавиша);
				ЗаголовокКнопки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокКнопки, ТекстСочетания);
			КонецЕсли;
			ЭлементПолеКартинка = Элементы.Вставить(ИмяКартинкиПрограммно, Тип("ПолеФормы"),ГруппаРяда);
			ЭлементПолеКартинка.ПутьКДанным = "КартинкаШаблон";
			ЭлементПолеКартинка.Вид         = ВидПоляФормы.ПолеКартинки;
			
			ЭлементПолеКартинка.ТекстНевыбраннойКартинки = ЗаголовокКнопки;
			ЭлементПолеКартинка.Заголовок = ЗаголовокКнопки;
			
			ЗаполнитьЗначенияСвойств(ЭлементПолеКартинка, КартинкаБыстрыеТоварыШаблон,, "Имя, Заголовок, Видимость, Доступность, ПутьКДанным, ТекстНевыбраннойКартинки");
			ЭлементПолеКартинка.УстановитьДействие("Нажатие", ИмяКартинки + "Нажатие");
			ЭлементПолеКартинка.СочетаниеКлавиш =  СочетаниеКлавиш;
			
			РозничныеПродажиСервер.ЗаполнитьШрифтЦвет(ЭлементПолеКартинка, СтрокаНастройкиКнопок.Шрифт, СтрокаНастройкиКнопок.Цвет); 
			
			// Создать кнопку формы в подменю.
			
			ЭлементКнопка = Элементы.Вставить(ИмяКартинкиПрограммно + "Акселераторы", Тип("КнопкаФормы"), Элементы.ГруппаПанельПрочихОпераций);
			ЭлементКнопка.Заголовок = ЗаголовокКнопки;
			
			Попытка
				ЭлементКнопка.ИмяКоманды = ИмяКоманды;
			Исключение
				ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Не правильно настроены кнопки. Обратитесь к администратору.'");
				ПараметрыИнформации.ТекстИнформации     = ЗаголовокКнопки;
				Отказ = Истина;
				Возврат;
			КонецПопытки;
			
			ЗаполнитьЗначенияСвойств(ЭлементКнопка, ШаблонДляЗаполненияКнопкиАкселераторы,, "Имя, Заголовок, ИмяКоманды, Видимость, Доступность");
			ЭлементКнопка.СочетаниеКлавиш = СочетаниеКлавиш;
			
			Если ИмяКоманды = "КомандаПО03ЗаменитьПрава" Тогда
				АкселераторКнопкиЗаменыПрав = СтрЗаменить(ЗаголовокКнопки, НСтр("ru = 'Заменить права'"), "");
			ИначеЕсли ИмяКоманды = "КомандаПО14Продавец" Тогда
				РеверсКнопкиПродавец = Найти(ЗаголовокКнопки, НСтр("ru = 'Выбор продавца'")) > 0;
				ИмяКнопкиПродавец = ИмяКартинкиПрограммно;
			КонецЕсли;
			
		КонецЦикла;
		
		ВыводимыйОстатокПО = КоличествоРядовКнопок * МаксимальноеКоличествоКнопокВОдномРяду - КоличествоКнопокНижнейПанели;
		ГруппаРядаПО = ГруппаРяда;
		
	Иначе
		
		Элементы.ГруппаКнопкиНевключенныеПоУмолчанию.Видимость   = Ложь;
		Элементы.ГруппаКнопкиНевключенныеПоУмолчанию.Доступность = Ложь;
		
		Для Каждого ЭлементКнопкаКонфигуратора Из Элементы.ГруппаКнопкиНевключенныеПоУмолчанию.ПодчиненныеЭлементы Цикл
			ЭлементКнопкаКонфигуратора.Видимость   = Ложь;
			ЭлементКнопкаКонфигуратора.Доступность = Ложь;
		КонецЦикла;
		
		РеверсКнопкиПродавец = Истина;
		ИмяКнопкиПродавец = "КартинкаПО14Продавец";
		ВыводитьПолныйОстатокПустыхКартинок = Истина;
		ВыводимыйОстатокПО = 0;
		МаксимальноеКоличествоКнопокВОдномРяду = МаксимальноеКоличествоКнопокВКонфигураторе;
		Элементы.КартинкаПО16ВвестиВозвратТовараОтРозничногоПокупателя.Заголовок = НСтр("ru = 'Возврат без основания (Ctrl+R)'");
		Элементы.КартинкаПО16ВвестиВозвратТовараОтРозничногоПокупателя.ТекстНевыбраннойКартинки = НСтр("ru = 'Возврат без основания (Ctrl+R)'");
		Элементы.КомандаПО16ВвестиВозвратТовараОтРозничногоПокупателяАкселераторы.Заголовок = НСтр("ru = 'Возврат без основания (Ctrl+R)'");
	КонецЕсли;
	
	Элементы.ГруппаПрочихОпераций.Видимость = ОткрыватьНижнююПанельПриЗапуске;
	
	// Быстрые товары
	
	Элементы.ГруппаБыстрыхТоваровРядШаблон.Видимость   = Ложь;
	Элементы.ГруппаБыстрыхТоваровРядШаблон.Доступность = Ложь;
	
	Для Каждого ЭлементКонфигуратора Из Элементы.ГруппаБыстрыхТоваровРядШаблон.ПодчиненныеЭлементы Цикл
		ЭлементКонфигуратора.Видимость   = Ложь;
		ЭлементКонфигуратора.Доступность = Ложь;
	КонецЦикла;
	
	ЕстьПанельБТ = Ложь;
	Если ИспользоватьНастройкуРМК Тогда
		
		ПалитраБыстрыхТоваров = НастройкаРМК.ПалитраБыстрыхТоваров;
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПалитраБыстрыхТоваровБыстрыеТовары.Название КАК Название,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.ЭтоСтраница КАК ЭтоСтраница,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.НомерСтраницы КАК НомерСтраницы,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.СтраницаРазмещения КАК СтраницаРазмещения,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.ИмяКнопки КАК ИмяКнопки,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.Номенклатура КАК Номенклатура,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.Характеристика КАК Характеристика,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.ФайлКартинки КАК ФайлКартинки,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.Клавиша КАК Клавиша,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.АкселераторAlt КАК АкселераторAlt,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.АкселераторCtrl КАК АкселераторCtrl,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.АкселераторShift КАК АкселераторShift,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.Шрифт КАК Шрифт,
		|	ПалитраБыстрыхТоваровБыстрыеТовары.Цвет КАК Цвет
		|ИЗ
		|	Справочник.ПалитраБыстрыхТоваров.БыстрыеТовары КАК ПалитраБыстрыхТоваровБыстрыеТовары
		|ГДЕ
		|	ПалитраБыстрыхТоваровБыстрыеТовары.Ссылка = &Ссылка
		|	И ПалитраБыстрыхТоваровБыстрыеТовары.СтраницаРазмещения = &НомерСтраницы";
		
		Запрос.УстановитьПараметр("Ссылка", ПалитраБыстрыхТоваров);
		Запрос.УстановитьПараметр("НомерСтраницы", 0);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		КоличествоБыстрыхТоваров = Выборка.Количество();
		
		Если КоличествоБыстрыхТоваров > 0  Тогда
			
			ЕстьПанельБТ = Истина;
			// Рассчитать высоту группы
			КоличествоРядовКнопок = Цел(КоличествоБыстрыхТоваров/МаксимальноеКоличествоКнопокВОдномРяду);
			
			Если Не Цел(КоличествоБыстрыхТоваров / МаксимальноеКоличествоКнопокВОдномРяду) = (КоличествоБыстрыхТоваров / МаксимальноеКоличествоКнопокВОдномРяду) Тогда
				КоличествоРядовКнопок = КоличествоРядовКнопок + 1;
			КонецЕсли;
			
			Если КоличествоРядовКнопок > 1 Тогда
				ВыводитьПолныйОстатокПустыхКартинок = Истина;
			КонецЕсли;
			
			Элементы.ГруппаБыстрыхТоваров.Высота = Элементы.ГруппаБыстрыхТоваровРядШаблон.Высота * КоличествоРядовКнопок;
			
			// Создать группы 
			Для Ряд = 1 По КоличествоРядовКнопок Цикл
				ИмяЭлемента = "ПрограммноГруппаБыстрыхТоваровРяд"+Формат(Ряд,"ЧГ=0");
				СтрокаТаблицы = ПрограммноСозданныеЭлементы.Добавить();
				СтрокаТаблицы.Имя = ИмяЭлемента;
				ЭлементРяд = Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), Элементы.ГруппаБыстрыхТоваров);
				ЭлементРяд.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ЗаполнитьЗначенияСвойств(ЭлементРяд, Элементы.ГруппаБыстрыхТоваровРядШаблон, , "Имя, Заголовок, ПутьКДаннымЗаголовка, Видимость, Доступность");
			КонецЦикла;
			
			// Заполнить картинки.
			НомерСтрокиНастройки = 0;
			Пока Выборка.Следующий() Цикл
				Если КоличествоБыстрыхТоваров = 1 Тогда
					ОткрытиеБыстрыхТоваровБезПанели = Выборка.ЭтоСтраница;
				КонецЕсли;
				СтрокаКартинкиБыстрыхТоваров = КартинкиБыстрыхТоваров.Добавить();
				
				ИмяКнопки = "БыстрыйТовар" + Формат(Выборка.РеквизитДопУпорядочивания, "ЧН=0; ЧГ=0");
				НомерСтрокиНастройки = НомерСтрокиНастройки + 1;
				Ряд          = Цел((НомерСтрокиНастройки - 1) / МаксимальноеКоличествоКнопокВОдномРяду) + 1;
				ПозицияВРяду = НомерСтрокиНастройки - МаксимальноеКоличествоКнопокВОдномРяду * Цел((МаксимальноеКоличествоКнопокВОдномРяду * Ряд-1)/МаксимальноеКоличествоКнопокВОдномРяду);
				ЗаголовокКнопки = Выборка.Название;
				
				ГруппаРяда = Элементы["ПрограммноГруппаБыстрыхТоваровРяд"+Формат(Ряд,"ЧГ=0")];
				
				// Создать картинку.
				ЭтоКартинка = Ложь;
				ФайлКартинки = Выборка.ФайлКартинки;
				Если Не ФайлКартинки.Пустая() Тогда
					ДанныеФайла = НавигационнаяСсылкаКартинки(ФайлКартинки, УникальныйИдентификатор);
					ФайлХранилище = ПолучитьИзВременногоХранилища(ДанныеФайла);
					
					Если НЕ ФайлХранилище = Неопределено Тогда
						Если ТипЗнч(ФайлХранилище) = Тип("ДвоичныеДанные") Тогда
							ЭтоКартинка = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша[Выборка.Клавиша], Выборка.АкселераторAlt, Выборка.АкселераторCtrl, Выборка.АкселераторShift);
				ИмяКоманды = "ПрограммноКомандаБыстрыеТовары" + ИмяКнопки;
				СтрокаТаблицы = ПрограммноСозданныеКоманды.Добавить();
				СтрокаТаблицы.Имя = ИмяКоманды;
				КомандаФормы = ЭтотОбъект.Команды.Добавить(ИмяКоманды);
				КомандаФормы.Действие = "КомандаБыстрыеТоварыТовар";
				
				ИмяЭлемента = "Программно" + ИмяКнопки;
				СтрокаТаблицы = ПрограммноСозданныеЭлементы.Добавить();
				СтрокаТаблицы.Имя = ИмяЭлемента;
				ЭлементПолеКартинка = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаРяда);
				ЭлементПолеКартинка.ПутьКДанным = "КартинкиБыстрыхТоваров[" + Формат(НомерСтрокиНастройки - 1, "ЧН=0; ЧГ=0") + "].АдресКартинки";
				
				ЭлементПолеКартинка.Вид         = ВидПоляФормы.ПолеКартинки;
				
				Если ЭтоКартинка Тогда
					СтрокаКартинкиБыстрыхТоваров.АдресКартинки = ДанныеФайла;
				Иначе
					ЭлементПолеКартинка.ТекстНевыбраннойКартинки = ЗаголовокКнопки;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ЭлементПолеКартинка, КартинкаБыстрыеТоварыШаблон,, "Имя, Заголовок, Видимость, Доступность, ПутьКДанным, ТекстНевыбраннойКартинки");
				
				ЭлементПолеКартинка.УстановитьДействие("Нажатие", "КартинкаБыстрыеТоварыШаблонНажатие");
				ЭлементПолеКартинка.СочетаниеКлавиш =  СочетаниеКлавиш;
				
				РозничныеПродажиСервер.ЗаполнитьШрифтЦвет(ЭлементПолеКартинка, Выборка.Шрифт, Выборка.Цвет); 
				
				// Создать кнопку формы в подменю.
				
				ЭлементКнопка = Элементы.Вставить(ИмяКоманды + "Акселераторы", Тип("КнопкаФормы"), Элементы.ГруппаПанельБыстрыхТоваров);
				ЭлементКнопка.Заголовок = ЗаголовокКнопки;
				
				Попытка
					ЭлементКнопка.ИмяКоманды = ИмяКоманды;
				Исключение
					ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Не правильно настроены кнопки. Обратитесь к администратору.'");
					ПараметрыИнформации.ТекстИнформации     = ЗаголовокКнопки;
					Отказ = Истина;
					Возврат;
				КонецПопытки;
				
				ЗаполнитьЗначенияСвойств(ЭлементКнопка, ШаблонДляЗаполненияКнопкиАкселераторы,, "Имя, Заголовок, ИмяКоманды, Видимость, Доступность");
				ЭлементКнопка.СочетаниеКлавиш = СочетаниеКлавиш;
				
				СтрокаТаблицыБыстрыхТоваров = ТаблицаБыстрыхТоваров.Добавить();
				СтрокаТаблицыБыстрыхТоваров.ИдентификаторБыстрогоТовара = ИмяКнопки;
				СтрокаТаблицыБыстрыхТоваров.Номенклатура                = Выборка.Номенклатура;
				СтрокаТаблицыБыстрыхТоваров.Характеристика              = Выборка.Характеристика;
				СтрокаТаблицыБыстрыхТоваров.ЭтоСтраница                 = Выборка.ЭтоСтраница;
				СтрокаТаблицыБыстрыхТоваров.НомерСтраницы               = Выборка.НомерСтраницы;
				
			КонецЦикла;
			
			ВыводимыйОстатокБТ = КоличествоРядовКнопок * МаксимальноеКоличествоКнопокВОдномРяду - КоличествоБыстрыхТоваров;
			ГруппаРядаБТ = ГруппаРяда;
			
		Иначе
			Элементы.ГруппаБыстрыхТоваров.Доступность = Ложь;
			ВыводимыйОстатокБТ = 0;
		КонецЕсли;
	Иначе
		Элементы.ГруппаБыстрыхТоваров.Доступность = Ложь;
		ВыводимыйОстатокБТ = 0;
	КонецЕсли;
	
	Если ВыводитьПолныйОстатокПустыхКартинок Тогда
		
		Для Индекс = 1 По ВыводимыйОстатокПО Цикл
			ИмяЭлемента = "ПрограммноПустаяКартинкаПрочихОпераций" + Формат(Индекс,"ЧГ=0");
			ЭлементПолеКартинка = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаРядаПО);
			ЭлементПолеКартинка.ПутьКДанным = "КартинкаШаблон";
			ЭлементПолеКартинка.Вид         = ВидПоляФормы.ПолеКартинки;
			ЗаполнитьЗначенияСвойств(ЭлементПолеКартинка, ШаблонПустойКартинки,, "Имя, Заголовок, Видимость, ПутьКДанным, ТекстНевыбраннойКартинки");
		КонецЦикла;
		
		Для Индекс = 1 По ВыводимыйОстатокБТ Цикл
			ИмяЭлемента = "ПрограммноПустаяКартинкаБыстрыхТоваров" + Формат(Индекс,"ЧГ=0");
			ЭлементПолеКартинка = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаРядаБТ);
			ЭлементПолеКартинка.ПутьКДанным = "КартинкаШаблон";
			ЭлементПолеКартинка.Вид         = ВидПоляФормы.ПолеКартинки;
			ЗаполнитьЗначенияСвойств(ЭлементПолеКартинка, ШаблонПустойКартинки,, "Имя, Заголовок, Видимость, ПутьКДанным, ТекстНевыбраннойКартинки");
		КонецЦикла;
	ИначеЕсли ЕстьПанельБТ Тогда
		Если ВыводимыйОстатокБТ > ВыводимыйОстатокПО Тогда
			ВыводимыйОстатокБТ = ВыводимыйОстатокБТ - ВыводимыйОстатокПО;
			Для Индекс = 1 По ВыводимыйОстатокБТ Цикл
				ИмяЭлемента = "ПрограммноПустаяКартинкаБыстрыхТоваров" + Формат(Индекс,"ЧГ=0");
				ЭлементПолеКартинка = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаРядаБТ);
				ЭлементПолеКартинка.ПутьКДанным = "КартинкаШаблон";
				ЭлементПолеКартинка.Вид         = ВидПоляФормы.ПолеКартинки;
				ЗаполнитьЗначенияСвойств(ЭлементПолеКартинка, ШаблонПустойКартинки,, "Имя, Заголовок, Видимость, ПутьКДанным, ТекстНевыбраннойКартинки");
			КонецЦикла;
		ИначеЕсли ВыводимыйОстатокПО > ВыводимыйОстатокБТ Тогда
			ВыводимыйОстатокПО = ВыводимыйОстатокПО - ВыводимыйОстатокБТ;
			Для Индекс = 1 По ВыводимыйОстатокПО Цикл
				ИмяЭлемента = "ПрограммноПустаяКартинкаПрочихОпераций" + Формат(Индекс,"ЧГ=0");
				ЭлементПолеКартинка = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаРядаПО);
				ЭлементПолеКартинка.ПутьКДанным = "КартинкаШаблон";
				ЭлементПолеКартинка.Вид         = ВидПоляФормы.ПолеКартинки;
				ЗаполнитьЗначенияСвойств(ЭлементПолеКартинка, ШаблонПустойКартинки,, "Имя, Заголовок, Видимость, ПутьКДанным, ТекстНевыбраннойКартинки");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаБыстрыхТоваров.Видимость   = Ложь;
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)

	УстановитьПривилегированныйРежим(Истина);

	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;

КонецФункции

&НаСервере
Процедура ОткрытьЗакрытьМенюПрочихОпераций()
	
	Элементы.ГруппаПрочихОпераций.Видимость = НЕ Элементы.ГруппаПрочихОпераций.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура ОткрытьЗакрытьМенюБыстрыхТоваров()
	
	Элементы.ГруппаБыстрыхТоваров.Видимость = НЕ Элементы.ГруппаБыстрыхТоваров.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаборПравИНастроек()

	УстановитьПривилегированныйРежим(Истина);
	Пользователь = ОбщегоНазначенияРТКлиентСервер.ПользовательСУчетомИзмененныхПрав();
	
	НаборПравИНастроек = Новый Структура;
	
	НаборПравИНастроек.Вставить("РазрешитьЧекВозврата", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЧекВозврата, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("ИзменятьЦену", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.ИзменятьЦену, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("ИзменятьПродавца", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.ИзменятьПродавца, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьАннулированиеЧека", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьАннулированиеЧека, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьВнесениеДенег", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьВнесениеДенег, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьВыборКартыБезSMS", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьВыборКартыБезSMS, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьВыборКартыБезEmailПодтверждения", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьВыборКартыБезEmailПодтверждения, 
							Ложь, 
							Пользователь));
							
	НаборПравИНастроек.Вставить("РазрешитьИзъятиеДенег", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьИзъятиеДенег, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьПодборИнформационнойКарты", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПодборИнформационнойКарты, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьСторнированиеТовара", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьСторнированиеТовара, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьОтложенныеЧеки", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтложенныеЧеки, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьРедактироватьНабранныйЧек", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьРедактироватьНабранныйЧек, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьЗаменуДисконтныхКарт", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьЗаменуДисконтныхКарт, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("ПоказыватьКолонкуОстаток", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.ПоказыватьКолонкуОстаток, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьНазначениеАвтоматическихСкидок", ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах"));
	
	НаборПравИНастроек.Вставить("РазрешитьНазначениеУправляемыхСкидок", ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах")
							И УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
								ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНазначениеУправляемыхСкидок, 
								Ложь, 
								Пользователь)
								);
	
	НаборПравИНастроек.Вставить("РазрешитьНазначениеРучныхСкидок", ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах") 
						И УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьНазначениеРучныхСкидок, 
							Ложь, 
							Пользователь)
							);
	
	НаборПравИНастроек.Вставить("РазрешитьОтчетОСменеБезГашения", 
						УправлениеПользователями.ПолучитьБулевоЗначениеПраваПользователя(
							ПланыВидовХарактеристик.ПраваПользователей.РазрешитьОтчетОСменеБезГашения, 
							Ложь, 
							Пользователь));
	
	НаборПравИНастроек.Вставить("РазрешитьБонусныеПрограммыЛояльности", ПолучитьФункциональнуюОпцию("ИспользоватьБонусныеПрограммыЛояльности"));
	
	НаборПравИНастроек.Вставить("РазрешитьРасчетыСКлиентами", ПолучитьФункциональнуюОпцию("ИспользоватьРасчетыСКлиентами"));
	
	НаборПравИНастроек.Вставить("НазначатьЦенуТоварамСНулевойЦеной");
	НаборПравИНастроек.Вставить("ОбъединятьПозицииСОдинаковымТоваром");
	НаборПравИНастроек.Вставить("ВыборИнформационнойКартыТолькоПоКоду");
	НаборПравИНастроек.Вставить("ПроводитьОпросВладельцаКарты");
	НаборПравИНастроек.Вставить("КонтролироватьОстаткиТоваровПриЗакрытииЧека");
	НаборПравИНастроек.Вставить("ПриВозвратеРаспечатыватьПакетДокументов");
	НаборПравИНастроек.Вставить("ШаблонРаботыДисплеяПокупателя");
	НаборПравИНастроек.Вставить("ИнтервалАвтоматическогоСохраненияЧекаККМ");
	НаборПравИНастроек.Вставить("ЛогироватьДействияКассира");
	НаборПравИНастроек.Вставить("ЗакрыватьПодборПриВыбореТовара");
	НаборПравИНастроек.Вставить("ПоказыватьАртикулНоменклатуры");
	НаборПравИНастроек.Вставить("ПоказыватьКодНоменклатуры");
	НаборПравИНастроек.Вставить("ПоказыватьКрепостьНоменклатуры");
	НаборПравИНастроек.Вставить("ПоказыватьОбъемНоменклатуры");
	НаборПравИНастроек.Вставить("ПоказыватьПроизводителяНоменклатуры");
	НаборПравИНастроек.Вставить("ВремяПредупрежденияОСкоромЗакрытииСмены");
	НаборПравИНастроек.Вставить("ЗакрыватьБыстрыеТоварыПриВыбореТовара");
	НаборПравИНастроек.Вставить("КопироватьПараметрыБонусовПриЗаменеКарты");
	НаборПравИНастроек.Вставить("ОткрыватьРедактированиеСтрокиПриПоискеТоваров");
	НаборПравИНастроек.Вставить("ЗапросТабло");
	НаборПравИНастроек.Вставить("ВсегдаОткрыватьФормуМножественногоВводаАкцизныхМарок");
	НаборПравИНастроек.Вставить("ВыборУпаковкиПриПродаже");
	
	ЗаполнитьЗначенияСвойств(НаборПравИНастроек, НастройкаРМК);
	
	НаборПравИНастроек.Вставить("ВыводитьПромИтогНаДисплей");
	НаборПравИНастроек.Вставить("ТекстПриПростое");
	НаборПравИНастроек.Вставить("ТекстВНерабочемСостоянии");
	
	ЗаполнитьЗначенияСвойств(НаборПравИНастроек, НастройкаРМК.ШаблонРаботыДисплеяПокупателя);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЛогированиеДействийКассираВРМК") Тогда
		НаборПравИНастроек.ЛогироватьДействияКассира = Ложь;
	КонецЕсли;
	
	НаборПравИНастроек.Вставить("ЛогируемыеДействия", Новый Структура);
	
	Если НаборПравИНастроек.ЛогироватьДействияКассира Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	НастройкиЛогированияПоВидамДействийКассираВРМК.ВидДействияКассираВРМК
		|ИЗ
		|	РегистрСведений.НастройкиЛогированияПоВидамДействийКассираВРМК КАК НастройкиЛогированияПоВидамДействийКассираВРМК";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ИндексПеречисления = Перечисления.ВидыДействийКассираВРМК.Индекс(Выборка.ВидДействияКассираВРМК);
			ИмяМетаданныхПеречисления = Метаданные.Перечисления.ВидыДействийКассираВРМК.ЗначенияПеречисления[ИндексПеречисления].Имя;
			НаборПравИНастроек.ЛогируемыеДействия.Вставить(ИмяМетаданныхПеречисления);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

// Проверяет наличие элемента формы.
//
// Параметры:
//  ИмяЭлемента - Имя элемента формы.
//
// Возвращаемое значение:
//  Истина
//
&НаСервере
Функция ПроверитьНаличиеЭлементаФормы(ИмяЭлемента)
	
	Возврат НЕ Элементы.Найти(ИмяЭлемента) = Неопределено;
	
КонецФункции // ПроверитьНаличиеЭлементаФормы()

// Проверяет наличие элемента формы.
//
// Параметры:
//  ИмяЭлемента - Имя элемента формы.
//
// Возвращаемое значение:
//  Истина
//
&НаКлиенте
Функция ПроверитьНаличиеЭлементаФормыКлиент(ИмяЭлемента)
	
	Возврат НЕ Элементы.Найти(ИмяЭлемента) = Неопределено;
	
КонецФункции // ПроверитьНаличиеЭлементаФормыКлиент()

// Установка доступности с проверкой наличия элементов.
//
// Параметры:
//  ИмяЭлемента - Имя элемента формы.
//  Доступность - Булево
//
&НаСервере
Процедура УстановитьДоступностьЭлементаФормы(ИмяЭлемента, Доступность)
	
	Если ПроверитьНаличиеЭлементаФормы(ИмяЭлемента) Тогда
		Элемент = Элементы.Найти(ИмяЭлемента);
		Элемент.Доступность = Доступность;
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			Для каждого ПодЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
				 УстановитьДоступностьЭлементаФормы(ПодЭлемент.Имя, Доступность)
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьДоступностьОтдельныхЭлементовФормы(БазовоеИмяЭлемента, Доступность)
	
	УстановитьДоступностьЭлементаФормы(БазовоеИмяЭлемента, Доступность);
	
	ТекущееИмяЭлемента = "Программно" + БазовоеИмяЭлемента;
	УстановитьДоступностьЭлементаФормы(ТекущееИмяЭлемента, Доступность);
	
	ТекущееИмяЭлемента = БазовоеИмяЭлемента + "Акселераторы";
	УстановитьДоступностьЭлементаФормы(ТекущееИмяЭлемента, Доступность);
	
	ТекущееИмяЭлемента = "Программно" + БазовоеИмяЭлемента + "Акселераторы";
	УстановитьДоступностьЭлементаФормы(ТекущееИмяЭлемента, Доступность);
	
	БазовоеИмяЭлемента = СтрЗаменить(БазовоеИмяЭлемента, "Команда", "Картинка");
	УстановитьДоступностьЭлементаФормы(БазовоеИмяЭлемента, Доступность);
	
	ТекущееИмяЭлемента = "Программно" + БазовоеИмяЭлемента;
	УстановитьДоступностьЭлементаФормы(ТекущееИмяЭлемента, Доступность);
	
	ТекущееИмяЭлемента = БазовоеИмяЭлемента + "Акселераторы";
	УстановитьДоступностьЭлементаФормы(ТекущееИмяЭлемента, Доступность);
	
	ТекущееИмяЭлемента = "Программно" + БазовоеИмяЭлемента + "Акселераторы";
	УстановитьДоступностьЭлементаФормы(ТекущееИмяЭлемента, Доступность);
	
КонецПроцедуры

// Установка Видимость с проверкой наличия элементов.
//
// Параметры:
//  ИмяЭлемента - Имя элемента формы.
//  Видимость - Булево
//
&НаСервере
Процедура УстановитьВидимостьЭлементаФормы(ИмяЭлемента, Видимость)
	
	Если ПроверитьНаличиеЭлементаФормы(ИмяЭлемента) Тогда
		Элемент = Элементы.Найти(ИмяЭлемента);
		Элемент.Видимость = Видимость;
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			Для каждого ПодЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
				 УстановитьВидимостьЭлементаФормы(ПодЭлемент.Имя, Видимость)
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьВидимостьОтдельныхЭлементовФормы(БазовоеИмяЭлемента, Видимость)
	
	УстановитьВидимостьЭлементаФормы(БазовоеИмяЭлемента, Видимость);
	
	ТекущееИмяЭлемента = "Программно" + БазовоеИмяЭлемента;
	УстановитьВидимостьЭлементаФормы(ТекущееИмяЭлемента, Видимость);
	
	ТекущееИмяЭлемента = БазовоеИмяЭлемента + "Акселераторы";
	УстановитьВидимостьЭлементаФормы(ТекущееИмяЭлемента, Видимость);
	
	ТекущееИмяЭлемента = "Программно" + БазовоеИмяЭлемента + "Акселераторы";
	УстановитьВидимостьЭлементаФормы(ТекущееИмяЭлемента, Видимость);
	
	БазовоеИмяЭлемента = СтрЗаменить(БазовоеИмяЭлемента, "Команда", "Картинка");
	УстановитьВидимостьЭлементаФормы(БазовоеИмяЭлемента, Видимость);
	
	ТекущееИмяЭлемента = "Программно" + БазовоеИмяЭлемента;
	УстановитьВидимостьЭлементаФормы(ТекущееИмяЭлемента, Видимость);
	
	ТекущееИмяЭлемента = БазовоеИмяЭлемента + "Акселераторы";
	УстановитьВидимостьЭлементаФормы(ТекущееИмяЭлемента, Видимость);
	
	ТекущееИмяЭлемента = "Программно" + БазовоеИмяЭлемента + "Акселераторы";
	УстановитьВидимостьЭлементаФормы(ТекущееИмяЭлемента, Видимость);
	
КонецПроцедуры

// Процедура устанавливает доступность элементов форм документа,
// в зависимости от настроек прав пользователя.
&НаСервере
Процедура УстановитьДоступностьЭлементовФормы()
	
	Элементы.ТоварыЦена.ТолькоПросмотр           = НЕ НаборПравИНастроек.ИзменятьЦену;
	Элементы.ТоварыСумма.ТолькоПросмотр          = НЕ НаборПравИНастроек.ИзменятьЦену;
	Элементы.ТоварыСуммаВсего.ТолькоПросмотр     = НЕ НаборПравИНастроек.ИзменятьЦену;
	Элементы.ТоварыПродавец.Видимость            = НаборПравИНастроек.ИзменятьПродавца;
	Элементы.ТоварыСуммаНДС.Видимость            = НЕ Объект.ЦенаВключаетНДС;
	Элементы.ТоварыСуммаВсего.Видимость          = НЕ Объект.ЦенаВключаетНДС;
	Элементы.ТоварыОстаток.Видимость             = НаборПравИНастроек.ПоказыватьКолонкуОстаток;
	Элементы.ТоварыСтатусУказанияСерий.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	Элементы.ТоварыНоменклатура.ТолькоПросмотр	 = НЕ НаборПравИНастроек.РазрешитьРедактироватьНабранныйЧек;
	Элементы.ТоварыНоменклатура.КнопкаОчистки    = НаборПравИНастроек.РазрешитьСторнированиеТовара;
	Элементы.ТоварыНоменклатураАртикул.Видимость = НаборПравИНастроек.ПоказыватьАртикулНоменклатуры;
	Элементы.ТоварыНоменклатураКод.Видимость     = НаборПравИНастроек.ПоказыватьКодНоменклатуры;
	Элементы.ТоварыНоменклатураКрепость.Видимость= НаборПравИНастроек.ПоказыватьКрепостьНоменклатуры;
	Элементы.ТоварыНоменклатураОбъемДАЛ.Видимость= НаборПравИНастроек.ПоказыватьОбъемНоменклатуры;
	Элементы.ТоварыНоменклатураПроизводитель.Видимость = НаборПравИНастроек.ПоказыватьПроизводителяНоменклатуры;
	Элементы.ТоварыУпаковкаЕдиницаИзмерения.Видимость  = НаборПравИНастроек.ВыборУпаковкиПриПродаже;
	
	ЕстьБыстрыеТовары = Элементы.ГруппаБыстрыхТоваров.Доступность;
	
	ТаблицаЗначенийКассИОрганизаций = ТаблицаКассККМОрганизаций.Выгрузить();
		
	ЕстьВозможностьОплатыПлатежнойКартой = ПродажиСервер.ЕстьВозможностьОплатыПлатежнойКартой(ТаблицаЗначенийКассИОрганизаций.ВыгрузитьКолонку("КассаККМ"));
	
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаЧО06ПлатежнаяКарта"     , ЕстьВозможностьОплатыПлатежнойКартой);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаЧО04Возврат"            , НаборПравИНастроек.РазрешитьЧекВозврата);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО01БыстрыеТовары"      , ЕстьБыстрыеТовары);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО02ВвестиВнесениеДенег", НаборПравИНастроек.РазрешитьВнесениеДенег);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО04ОтложитьЧек"        , НаборПравИНастроек.РазрешитьОтложенныеЧеки);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО05ВвестиАннулирование", НаборПравИНастроек.РазрешитьАннулированиеЧека);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО08РасчетСкидок"       , НаборПравИНастроек.РазрешитьНазначениеАвтоматическихСкидок);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО28ПросмотрНакоплений" , НаборПравИНастроек.РазрешитьНазначениеАвтоматическихСкидок);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО10НапечататьПоследнийСлипЧек", ЕстьВозможностьОплатыПлатежнойКартой);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО13ВвестиВыемкаДенег"         , НаборПравИНастроек.РазрешитьИзъятиеДенег);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО14Продавец"                  , НаборПравИНастроек.ИзменятьПродавца);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО15ПродолжитьЧек"             , НаборПравИНастроек.РазрешитьОтложенныеЧеки);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО16ВвестиВозвратТовараОтРозничногоПокупателя", НаборПравИНастроек.РазрешитьЧекВозврата);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО17ВвестиИнформационнуюКарту" , НаборПравИНастроек.РазрешитьПодборИнформационнойКарты);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО19УправляемыеСкидки"         , НаборПравИНастроек.РазрешитьНазначениеУправляемыхСкидок);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО20ЗаменаКарты"               , НаборПравИНастроек.РазрешитьЗаменуДисконтныхКарт);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО22РучныеСкидки"              , НаборПравИНастроек.РазрешитьНазначениеРучныхСкидок);
	УстановитьДоступностьЭлементаФормы("ГруппаПанельРучныхСкидок"                       , НаборПравИНастроек.РазрешитьНазначениеРучныхСкидок);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО23ВвестиСерии"               , ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры"));
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО24ПолучитьИзТСД"             , ПодключаемоеОборудованиеЕстьТСД);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО26ОтчетБезГашения"           , НаборПравИНастроек.РазрешитьОтчетОСменеБезГашения);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО12ПолучитьВес"               , ПодключаемоеОборудованиеЕстьВесы);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО27ПродажаПоЗаказу"           , ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПокупателей"));
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО30ВозвратПоследнегоЧека"     , НаборПравИНастроек.РазрешитьЧекВозврата);
	
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаЧО08ОплатаБонусами"        , НаборПравИНастроек.РазрешитьБонусныеПрограммыЛояльности);
	УстановитьВидимостьОтдельныхЭлементовФормы("КомандаЧО08ОплатаБонусами"          , НаборПравИНастроек.РазрешитьБонусныеПрограммыЛояльности);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО29ОтменитьОплатуБонусами", НаборПравИНастроек.РазрешитьБонусныеПрограммыЛояльности);
	
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаЧО09ОперацияДС"             , НаборПравИНастроек.РазрешитьРасчетыСКлиентами);
	УстановитьВидимостьОтдельныхЭлементовФормы("КомандаЧО09ОперацияДС"               , НаборПравИНастроек.РазрешитьРасчетыСКлиентами);
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО31ПолучитьДокументРасчета", НаборПравИНастроек.РазрешитьРасчетыСКлиентами);
	
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаПО33ПоискПоНаименованию"       , ПолучитьФункциональнуюОпцию("ИспользоватьПравилаИменованияНоменклатуры"));
	
КонецПроцедуры

// Проверка документов, подготовленных к внесению денег.
//
// Параметры:
//  СтруктураПараметровВнесенияДенег - Формируемая структура для дальнейшего открытия формы выбора.
//
// Возвращаемое значение:
// Булево
//
&НаСервере
Функция ВозможностьВнесенияДенег()

	// Нахождение документов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.ДокументПередачи КАК Документ,
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.СуммаОстаток,
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.Организация,
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.Касса
	|ПОМЕСТИТЬ ТаблицаДокументовСОстатками
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКПоступлениюНаличные.Остатки(
	|			,
	|			Касса В (&КассыККМ)
	|				И Организация В (&Организации)) КАК ДенежныеСредстваКПоступлениюНаличныеОстатки
	|ГДЕ
	|	ДенежныеСредстваКПоступлениюНаличныеОстатки.СуммаОстаток > 0
	|	И ДенежныеСредстваКПоступлениюНаличныеОстатки.ДокументПередачи ССЫЛКА Документ.РасходныйКассовыйОрдер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка КАК РасходныйКассовыйОрдер,
	|	РасходныйКассовыйОрдер.Номер,
	|	РасходныйКассовыйОрдер.Дата,
	|	ТаблицаДокументовСОстатками.СуммаОстаток,
	|	ТаблицаДокументовСОстатками.Организация,
	|	ТаблицаДокументовСОстатками.Касса
	|ИЗ
	|	ТаблицаДокументовСОстатками КАК ТаблицаДокументовСОстатками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ПО ТаблицаДокументовСОстатками.Документ = РасходныйКассовыйОрдер.Ссылка";
	
	ТаблицаЗначенийКассИОрганизаций = ТаблицаКассККМОрганизаций.Выгрузить();
	
	Запрос.УстановитьПараметр("КассыККМ"   , ТаблицаЗначенийКассИОрганизаций.ВыгрузитьКолонку("КассаККМ"));
	Запрос.УстановитьПараметр("Организации", ТаблицаЗначенийКассИОрганизаций.ВыгрузитьКолонку("Организация"));
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
КонецФункции // ВозможностьВнесенияДенег()

&НаСервере
Процедура ОчиститьТабличныеЧасти(ОбъектОчистки)

	ОбъектОчистки.Оплата.Очистить();
	ОбъектОчистки.ОплатаБонуснымиБаллами.Очистить();
	ОбъектОчистки.Товары.Очистить();
	ОбъектОчистки.СерийныеНомера.Очистить();
	ОбъектОчистки.Серии.Очистить();
	ОбъектОчистки.СерииПодарков.Очистить();
	ОбъектОчистки.Подарки.Очистить();
	ОбъектОчистки.ПогашениеПодарочныхСертификатов.Очистить();
	ОбъектОчистки.СкидкиНаценки.Очистить();
	ОбъектОчистки.УправляемыеСкидки.Очистить();
	ОбъектОчистки.АкцизныеМарки.Очистить();
	ОбъектОчистки.КодыМаркировки.Очистить();
	
	УправляемыеСкидки.Очистить();
	
КонецПроцедуры

// Процедура очищает текущие данные и готовит к следующему набору.
//
// Параметры:
//  Нет
//
&НаСервере
Процедура СоздатьНовыйНабор(ОчиститьДокументОбработки = Истина, ОчисткаАвтосохраненныхДанных = Истина)
	
	ТабличноеПолеЧеков.Очистить();
	ЕстьТоварыВДокументеРасчета = Ложь;
	Дата = ТекущаяДатаСеанса();
	Объект.Дата = Дата;
	
	Объект.ВидОперации       = Перечисления.ВидыОперацийЧекККМ.Продажа;
	
	Если НЕ Объект.Продавец = ПродавецПоУмолчанию 
		ИЛИ ПродавецПоУмолчанию = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
		Объект.Продавец = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Объект.ЧекККМПродажа           = Документы.ЧекККМ.ПустаяСсылка();
	Объект.ДисконтнаяКарта         = Справочники.ИнформационныеКарты.ПустаяСсылка();
	Объект.ВладелецДисконтнойКарты = Справочники.ФизическиеЛица.ПустаяСсылка();
	Объект.АналитикаХозяйственнойОперации = Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;
	Объект.ПродажаПоЗаказу         = Ложь;
	Объект.ЗаказПокупателя         = Документы.ЗаказПокупателя.ПустаяСсылка();
	Объект.Ответственный           = Пользователи.ТекущийПользователь();
	Объект.Контрагент              = Справочники.Контрагенты.ПустаяСсылка();
	Объект.ОперацияСДенежнымиСредствами = Ложь;
	Объект.ДокументРасчета         = Неопределено;
	
	ЭтоЗачетАванса = Ложь;
	ЭтоОплатаРассрочки = Ложь;
	ЭтоВозвратАванса   = Ложь;
	
	НомерЗаказа = "";
	
	ОчиститьТабличныеЧасти(Объект);
	АдресТаблицыОплат = "";
	ПередаватьТаблицуОплат = Ложь;
	ОтменитьОплатуПК = Ложь;
	ДанныеОтправленыВБанк = Ложь;
	
	Объект.Ссылка        = Документы.ЧекККМ.ПустаяСсылка();
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ЧекККМ.ПараметрыУказанияСерий(Объект));
	
	Если ОчиститьДокументОбработки Тогда
		ЧекККМВОбработке = Неопределено;
	КонецЕсли;
	
	ИдентификаторФормыПредварительныхДанных = Новый УникальныйИдентификатор;
	НомерОперацииЛогирования = 0;
	
	Если ОчисткаАвтосохраненныхДанных Тогда
		ОчиститьАвтосохраненныеДанные();
	КонецЕсли;
	
	
КонецПроцедуры

// Заполняем документ объект чек ККМ.
//
// Параметры:
//  ОбъектЧекККМ - Объект Документ ЧекККМ
//
&НаСервере
Процедура ЗаполнитьЧекПоВсемДанным(ОбъектЧекККМ)
	
	ЗаполнитьЗначенияСвойств(ОбъектЧекККМ, Объект, ,"Ссылка, Дата");
	Если ТабличноеПолеЧеков.Количество() <> 0 Тогда
		ЗаполнитьЗначенияСвойств(ОбъектЧекККМ, ТабличноеПолеЧеков[0], "ДоговорПлатежногоАгента, ВидНалога");
	КонецЕсли;
	
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(Объект.Товары                         , ОбъектЧекККМ.Товары, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(Объект.Подарки                        , ОбъектЧекККМ.Подарки, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(Объект.СкидкиНаценки                  , ОбъектЧекККМ.СкидкиНаценки, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(Объект.СерийныеНомера                 , ОбъектЧекККМ.СерийныеНомера, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(Объект.Серии                          , ОбъектЧекККМ.Серии, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(Объект.СерииПодарков                  , ОбъектЧекККМ.СерииПодарков, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(Объект.Оплата                         , ОбъектЧекККМ.Оплата, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(Объект.ПогашениеПодарочныхСертификатов, ОбъектЧекККМ.ПогашениеПодарочныхСертификатов, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(Объект.БонусныеБаллыКНачислению       , ОбъектЧекККМ.БонусныеБаллыКНачислению, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(Объект.АкцизныеМарки                  , ОбъектЧекККМ.АкцизныеМарки, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(Объект.КодыМаркировки                 , ОбъектЧекККМ.КодыМаркировки, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(Объект.ПредъявленныеКодыОднократныхСкидок, ОбъектЧекККМ.ПредъявленныеКодыОднократныхСкидок, Истина);

	ЗаполнитьУправляемыеСкидки(ОбъектЧекККМ);
	ДобавитьОплатуБонусамиВЧек(ОбъектЧекККМ, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИЗакрытьЧекПоСтатусу(СтатусЧекаККМ, ПараметрыЗаполненияЧекаККМ)

	ЧекПроведен = Ложь;
	Дата = ТекущаяДатаСеанса();
	
	Если ЗначениеЗаполнено(ЧекККМВОбработке) Тогда
		ОбъектЧекККМ = ЧекККМВОбработке.ПолучитьОбъект();
		ОбъектЧекККМ.Дата = Дата;
		ЧекПроведен = ЧекККМВОбработке.Проведен;
	Иначе
		ОбъектЧекККМ =Документы.ЧекККМ.СоздатьДокумент();
		ОбъектЧекККМ.Дата = Дата;
	КонецЕсли;
	
	ЗаполнитьЧекПоВсемДанным(ОбъектЧекККМ);
	ЗаполнитьЗначенияСвойств(ОбъектЧекККМ, ПараметрыЗаполненияЧекаККМ);
	
	ОбъектЧекККМ.КассаККМ      = ТаблицаКассККМОрганизаций[0].КассаККМ;
	ОбъектЧекККМ.Организация   = ОбъектЧекККМ.КассаККМ.Владелец;
	ОбъектЧекККМ.СтатусЧекаККМ = СтатусЧекаККМ;
	ОбъектЧекККМ.РежимРМК      = Истина;
	
	Если ЧекПроведен Тогда
		ОбъектЧекККМ.Записать(РежимЗаписиДокумента.ОтменаПроведения)
	Иначе
		ОбъектЧекККМ.Записать();
	КонецЕсли; 
	
	ЗаполнитьПредварительныйЛог(ОбъектЧекККМ.Ссылка);
	ЛогированиеЗаписиИЗакрытияЧекаПоСтатусу(СтатусЧекаККМ, ОбъектЧекККМ.Ссылка);
	
	СоздатьНовыйНабор(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьЧекПоСтатусуКлиент(СтатусЧекаККМ, ПараметрыЗаполненияЧекаККМ)
	
	ЗаписатьИЗакрытьЧекПоСтатусу(СтатусЧекаККМ, ПараметрыЗаполненияЧекаККМ);
	ОбновитьФорму();
	УстановитьЗаголовок();
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйНаборКлиент()
	
	СоздатьНовыйНабор();
	ОбновитьФорму();
	УстановитьЗаголовок();
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаЧО09ОперацияДС", Истина);
	
	// Интерфейс ЕГАИС
	//ИнтеграцияЕГАИСРТКлиент.УстановитьВидимостьКолонкиАкцизныхМарок(Элементы.ТоварыСтатусУказанияАкцизныхМарок, ВидимостьКолонкиМаркировки);
	//ИнтеграцияЕГАИСРТКлиент.ЗаполнитьКоличествоАкцизныхМарок(Объект.Товары, Объект.АкцизныеМарки);
	//ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарок(Объект.Товары);
	//
	//РозничныеПродажиКлиент.ЗаполнитьКоличествоКодовМаркировки(Объект.Товары, Объект.КодыМаркировки);
	//РозничныеПродажиКлиент.УстановитьЗначениеСтатусаКодаМаркировки(Объект.Товары);
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиПоЧекуККМ(ЧекЗаполнения, Отказ)
	
	СоздатьНовыйНабор(Ложь);
	
	РеквизитыЗаполнения = "Дата, Товары, УправляемыеСкидки, Подарки, СкидкиНаценки, СерийныеНомера, Серии, Оплата, ПогашениеПодарочныхСертификатов, БонусныеБаллыКНачислению, АкцизныеМарки, КодыМаркировки, СерииПодарков, ПредъявленныеКодыОднократныхСкидок";
	ЗаполнитьЗначенияСвойств(Объект, ЧекЗаполнения, , РеквизитыЗаполнения);
	
	Объект.Дата = ТекущаяДатаСеанса();
	
	Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
		Объект.ПродажаПоЗаказу = Истина;
		НомерЗаказа = Объект.ЗаказПокупателя.Номер;
	КонецЕсли;
	
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.Товары                               , Объект.Товары);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.УправляемыеСкидки                    , Объект.УправляемыеСкидки);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.Подарки                              , Объект.Подарки);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.СкидкиНаценки                        , Объект.СкидкиНаценки);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.БонусныеБаллыКНачислению             , Объект.БонусныеБаллыКНачислению);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.СерийныеНомера                       , Объект.СерийныеНомера);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.Серии                                , Объект.Серии);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.СерииПодарков                        , Объект.СерииПодарков);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.Оплата                               , Объект.Оплата);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.ПогашениеПодарочныхСертификатов      , Объект.ПогашениеПодарочныхСертификатов);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.АкцизныеМарки                        , Объект.АкцизныеМарки, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.КодыМаркировки                       , Объект.КодыМаркировки, Истина);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекЗаполнения.ПредъявленныеКодыОднократныхСкидок   , Объект.ПредъявленныеКодыОднократныхСкидок);
	
	УправляемыеСкидки.ЗагрузитьЗначения(Объект.УправляемыеСкидки.Выгрузить().ВыгрузитьКолонку("СкидкаНаценка"));
	
	ДозаполнитьТаблицыОбъекта();
	
	Если ИспользоватьБонусы И ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		РаспределитьОплатуБонусамиПоОрганизациямПриВосстановлении(ЧекЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммуОстаткаДокументаРасчета()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РасчетыСКлиентамиОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	|			,
	|			ДокументРасчета = &ДокументРасчета
	|				И ЗаказПокупателя = &ЗаказПокупателя) КАК РасчетыСКлиентамиОстатки";
	
	Запрос.УстановитьПараметр("ДокументРасчета", Объект.ДокументРасчета);
	Запрос.УстановитьПараметр("ЗаказПокупателя", Объект.ЗаказПокупателя);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СуммаОстаткаДокументаРасчета = Выборка.Сумма;
	Иначе
		СуммаОстаткаДокументаРасчета = 0;
	КонецЕсли;
	
КонецПроцедуры


// Заполняем на основании возврата.
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ЗаполнитьНаОснованииЧекаККМ(ЧекККМ)

	ЗаполнитьЗначенияСвойств(Объект, 
							 ЧекККМ, 
							 "ВладелецДисконтнойКарты, ДисконтнаяКарта, Магазин, Продавец, ЗаказПокупателя, ДоговорПлатежногоАгента, ВидНалога, ОперацияСДенежнымиСредствами, Контрагент", 
							 "ЧекККМПродажа, Дата, Товары, УправляемыеСкидки, Подарки, СкидкиНаценки, СерийныеНомера, Серии, Оплата, ПогашениеПодарочныхСертификатов, СерииПодарков, ПредъявленныеКодыОднократныхСкидок");
	
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекККМ.Товары               , Объект.Товары);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекККМ.УправляемыеСкидки    , Объект.УправляемыеСкидки);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекККМ.Подарки              , Объект.Подарки);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекККМ.СкидкиНаценки        , Объект.СкидкиНаценки);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекККМ.Серии                , Объект.Серии);
	ОбщегоНазначенияРТ.ЗагрузитьВТаблицуЗначений(ЧекККМ.Оплата               , Объект.Оплата);
	
	УправляемыеСкидки.ЗагрузитьЗначения(Объект.УправляемыеСкидки.Выгрузить().ВыгрузитьКолонку("СкидкаНаценка"));
	
	Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
		Объект.ПродажаПоЗаказу  = Истина;
		НомерЗаказа = Объект.ЗаказПокупателя.Номер;
	КонецЕсли;
	
	Объект.СерийныеНомера.Очистить();
	Объект.ПогашениеПодарочныхСертификатов.Очистить();
	
	ЗапасыСервер.УдалитьПодарочныеСертификаты(Объект.Товары);
	
	КолвоЭлементовКоллекции = Объект.Оплата.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ЭлементКоллекции = Объект.Оплата[КолвоЭлементовКоллекции - ОбратныйИндекс];

		Если ЭлементКоллекции.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом Тогда
			Объект.Оплата.Удалить(ЭлементКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(Объект.Товары);
	
	Объект.Организация = ЧекККМ.Организация;
	Для каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.Организация = Объект.Организация
	КонецЦикла;
	
	Для каждого СтрокаСерия Из Объект.Серии Цикл
		СтрокаСерия.Организация = Объект.Организация
	КонецЦикла;
	
	Объект.Организация = ЧекККМ.Организация;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат
		И Объект.ОперацияСДенежнымиСредствами
		Тогда
		Если ЗначениеЗаполнено(ЧекККМ.ДокументРасчета) Тогда
			Объект.ДокументРасчета = ЧекККМ.ДокументРасчета;
		Иначе
			Объект.ДокументРасчета = ЧекККМ;
		КонецЕсли;
		ЗаполнитьСуммуОстаткаДокументаРасчета();
	КонецЕсли;
	
	ЗаполнитьОстаткиСервер();
	
КонецПроцедуры

&НаСервере
// Заполняем табличные части на основании Заказа покупателя.
&НаСервере
Процедура ЗаполнитьТабличныеЧастиНаОснованииЗаказаПокупателя()
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Объект.ЗаказПокупателя["Товары"],
												  Объект["Товары"]);
												  
	ТЗ = Объект["Товары"].Выгрузить();
	
	ТЗ.ЗаполнитьЗначения(Объект.ЗаказПокупателя.Организация, "Организация");
	ТЗ.ЗаполнитьЗначения(Объект.ЗаказПокупателя.Склад      , "Склад");
	
	Объект["Товары"].Загрузить(ТЗ);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Объект.ЗаказПокупателя["СкидкиНаценки"],
												  Объект["СкидкиНаценки"]);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Объект.ЗаказПокупателя["Подарки"],
												  Объект["Подарки"]);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказПокупателяСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка
	|ИЗ
	|	Документ.ЗаказПокупателя.СкидкиНаценки КАК ЗаказПокупателяСкидкиНаценки
	|ГДЕ
	|	ЗаказПокупателяСкидкиНаценки.СкидкаНаценка.Управляемая
	|	И ЗаказПокупателяСкидкиНаценки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.ЗаказПокупателя);
	
	Результат = Запрос.Выполнить();
	
												  
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.Выгрузить(),
												  Объект["УправляемыеСкидки"]);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Объект.ЗаказПокупателя["БонусныеБаллыКНачислению"],
												  Объект["БонусныеБаллыКНачислению"]);
	
КонецПроцедуры

// Заполняем на основании Заказа покупателя.
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ЗаполнитьНаОснованииЗаказаПокупателя()

	ЗаполнитьЗначенияСвойств(Объект, 
							 Объект.ЗаказПокупателя, 
							 "ВладелецДисконтнойКарты, ДисконтнаяКарта, Магазин, Продавец");
	
	Объект.БонусныеБаллыКНачислению.Очистить();
	Объект.Подарки.Очистить();
	Объект.СерииПодарков.Очистить();
	Объект.УправляемыеСкидки.Очистить();
	Объект.ОперацияСДенежнымиСредствами = ОплатаБезПередачиПоДокументуРасчетаСЗаказом;
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		ЗаполнитьТабличныеЧастиНаОснованииЗаказаПокупателя();
	Иначе
		РозничныеПродажиСервер.ЗаполнитьПоОстаткамЗаказа(Объект, Объект.ЗаказПокупателя);
	КонецЕсли;
	
	УправляемыеСкидки.ЗагрузитьЗначения(Объект.УправляемыеСкидки.Выгрузить().ВыгрузитьКолонку("СкидкаНаценка"));
	
	Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;
	НомерЗаказа        = Объект.ЗаказПокупателя.Номер;
	Объект.ПродажаПоЗаказу = Истина;
	
	Объект.Оплата.Очистить();
	Объект.ОплатаБонуснымиБаллами.Очистить();
	Объект.Серии.Очистить();
	Объект.СерийныеНомера.Очистить();
	Объект.ПогашениеПодарочныхСертификатов.Очистить();
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(Объект.Товары);
	
	СтруктураПроверкиАМ = Новый Структура();
	СтруктураПроверкиАМ.Вставить("Магазин", Объект.Магазин);
	СтруктураПроверкиАМ.Вставить("Организация", Неопределено);
	СтруктураПроверкиАМ.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары, СтруктураПроверкиАМ);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаКодаМаркировки(Объект.Товары, СтруктураПроверкиАМ);
	
	Объект.Организация = Объект.ЗаказПокупателя.Организация;
	Объект.Контрагент  = Объект.ЗаказПокупателя.Контрагент;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		СтрокаТовары.Организация = Объект.Организация;
		
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	ЗаполнитьОстаткиСервер();
	
	Если Объект.Товары.Количество() > 0  Тогда
		ДозаполнитьТаблицыОбъекта();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаОснованииЗаказаПокупателя()


////////////////////////////////////////////////////////////////////////////////
// Обработка табличной части "Товары".

&НаКлиенте
Процедура ТоварыПередУдалениемКлиент(Отказ)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий);
	
	Если НЕ НаборПравИНастроек.РазрешитьСторнированиеТовара Тогда
		Отказ = Истина;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	УдаляемыйКлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
	
	Если НЕ Отказ Тогда
		ЛогированиеУдаленияСтроки(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика, СтрокаТабличнойЧасти.Сумма);
		ОбновлениеДисплеяПокупателя("УдалениеТовара");
		ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяПриПростое", 5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСправочника(ИмяСправочника, ПараметрыФормыВыбора = Неопределено, ОбработчикОповещения = Неопределено)

	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
					Истина, "Справочник." + ИмяСправочника + ".Форма.ФормаВыбора.Открытие");
	
	Если НЕ ТипЗнч(ПараметрыФормыВыбора) = Тип("Структура") Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	ПараметрыФормы.Вставить("СтрокаОтображение", "Список");
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Справочник." + ИмяСправочника + ".ФормаВыбора", ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим); 
	
КонецПроцедуры

// Процедура добавляет в табличную часть "Товары" новую строку, в соответствии
// с переданными данными или, в зависимости от настроек РМК, увеличивает количество
// в строке табличной части "Товары", содержащей указанную номенклатуру.
//
&НаКлиенте
Процедура ДобавитьНоменклатуруВТабЧасть(Знач Номенклатура,
										Знач Характеристика,
										Знач Упаковка,
										Знач Количество,
										Знач ПерейтиНаКоличество = Ложь,
										Знач СерийныйНомер = Неопределено,
										ОткрыватьРедактированиеСтроки = Ложь)
	
	// Уточняем значение характеристики товара.
	Если Характеристика = Неопределено Тогда
		
		Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
		
	КонецЕсли;
	
	// Проверить необходимость объединять товары.
	Если НЕ ЗначениеЗаполнено(Упаковка) Тогда
		Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка");
	КонецЕсли;
	
	Если НужноСворачиватьПоСтрокеПоиска(Номенклатура) Тогда
		МассивТоваров = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Упаковка", Номенклатура, Характеристика, Упаковка));
	Иначе
		МассивТоваров = Новый Массив;
	КонецЕсли;
	
	ТекстЗапретаПродаж = "";
	Если НельзяПродавать(Номенклатура, ТекстЗапретаПродаж) Тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Запрет продаж!'"), ТекстЗапретаПродаж);
		Возврат;
	КонецЕсли;
	
	ДобавленаСтрока = Ложь;
	
	Если ИспользоватьНастройкуРМК И НаборПравИНастроек.ОбъединятьПозицииСОдинаковымТоваром И НЕ МассивТоваров.Количество() = 0 Тогда
		
		ПоследнееРедактированиеКоличество = МассивТоваров[0].КоличествоУпаковок;
		МассивТоваров[0].КоличествоУпаковок = МассивТоваров[0].КоличествоУпаковок + Количество;
		ТекущаяСтрока = МассивТоваров[0];
		Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
		
	Иначе
		Если Объект.Товары.Количество() = 0 Тогда
			Объект.Дата = ТекущаяДата();
		КонецЕсли;
		ТекущаяСтрока = Объект.Товары.Добавить();
		ТекущаяСтрока.Номенклатура       = Номенклатура;
		ТекущаяСтрока.Характеристика     = Характеристика;
		ТекущаяСтрока.Упаковка           = Упаковка;
		ТекущаяСтрока.КоличествоУпаковок = Количество;
		Элементы.Товары.ТекущаяСтрока    = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ДобавленаСтрока = Истина;
		
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
				Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий, Ложь);
	КонецЕсли;
	
	ПараметрДействия = Новый Структура;
	ПараметрДействия.Вставить("ОткрытаБлокирующаяФорма", Ложь);
	ПараметрДействия.Вставить("ДобавитьСерийныйНомерИОткрытьВводСерии", СерийныйНомер);
	ПараметрДействия.Вставить("ОбновлениеДисплеяПокупателяДобавлениеТовара");
	ПараметрДействия.Вставить("ТоварыПриИзмененииНаСервере");
	ПараметрДействия.Вставить("ЗапретПродажиПроверен", Истина);
	ПараметрДействия.Вставить("ЗаполнитьПредставлениеТабло", НаборПравИНастроек.ЗапросТабло);
	
	Если ДобавленаСтрока Тогда
		ТоварыПриИзмененииНоменклатуры(ТекущаяСтрока, ПерейтиНаКоличество, ПараметрДействия, ОткрыватьРедактированиеСтроки);
	Иначе
		ТоварыПриИзмененииКоличестваУпаковок(ТекущаяСтрока, ПоследнееРедактированиеКоличество);
	КонецЕсли;
	
	Если НЕ ПараметрДействия.ОткрытаБлокирующаяФорма Тогда
		ДобавитьСерийныйНомерИОткрытьВводСерии(ТекущаяСтрока, СерийныйНомер, ОткрыватьРедактированиеСтроки);
		
		ОбновлениеДисплеяПокупателяДобавлениеТовара(ТекущаяСтрока);
		
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		
		ОбновитьФорму();
	Иначе
		ОткрыватьРедактированиеСтроки = Ложь;
	КонецЕсли;
	
	Если ОткрыватьРедактированиеСтроки Тогда
		ПодключитьОбработчикОжидания("РедактированиеСтрокиКлиент", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткиСервер()
	
	Если Элементы.ТоварыОстаток.Видимость Тогда
	
		ЗапасыСервер.ЗаполнитьОстаткиНоменклатуры(Объект, "Товары");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеТаблоСервер()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПредставлениеТабло", НаборПравИНастроек.ЗапросТабло);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПредставлениеТаблоСервер(Объект.Товары, СтруктураДействий);
	
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_УстановитьТекущийЭлемент_ТоварыКоличествоУпаковок()
	
	ТекущийЭлемент = Элементы.Товары;
	Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок;
	
	//- 03.04.2019  
	//Элементы.Товары.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменитьСтроку()
	
	Элементы.Товары.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоНоменклатуре(Команда)
	
	ИмяКоманды = Команда.Имя;
	УстанавливаемыйВидПоиска = СтрЗаменить(ИмяКоманды,"Поиск", "");
	УстанавливаемыйВидПоиска = СтрЗаменить(УстанавливаемыйВидПоиска,"_ПраваяКлавиатура", "");
	
	ВидПоиска = УстанавливаемыйВидПоиска;
	
	ПереходНаФормуПоиска(ВидПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходНаФормуПоиска(ВидПоиска = "")
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ПереходНаФормуПоиска");
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Магазин", Объект.Магазин);
	ПараметрыОткрытия.Вставить("ЗакрыватьПодборПриВыбореТовара", НаборПравИНастроек.ЗакрыватьПодборПриВыбореТовара);
	
	Если НЕ ВидПоиска = "" Тогда
		ПараметрыОткрытия.Вставить("ВидПоиска", ВидПоиска);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаПодборТовара", ПараметрыОткрытия, ЭтотОбъект);
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Прочие

&НаСервереБезКонтекста
Функция ТекущаяНастройкаРМКСервер(мИмяКомпьютера)
	Возврат ПродажиСервер.ТекущаяНастройкаРМКСервер(мИмяКомпьютера);
КонецФункции

// Процедура обрабатывает изменение номенклатуры в ТЧ товары. 
//
&НаКлиенте
Процедура ТоварыПриИзмененииНоменклатуры(СтрокаТабличнойЧасти, ПерейтиНаКоличество = Ложь, ПараметрДействия = Неопределено, ОткрыватьРедактированиеСтроки = Ложь)
	
	Если СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки Тогда
		// Нужно удалить старые акцизные марки.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		
		МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
			Объект.АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.НеобходимостьВводаКодаМаркировки Тогда
		// Нужно удалить старые коды маркировки.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		
		МассивКодов = Объект.КодыМаркировки.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаКода Из МассивКодов Цикл
			Объект.КодыМаркировки.Удалить(СтрокаКода);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапретаПродаж = "";
	Если ПараметрДействия = Неопределено ИЛИ НЕ ПараметрДействия.Свойство("ЗапретПродажиПроверен") Тогда
		Если НельзяПродавать(СтрокаТабличнойЧасти.Номенклатура, ТекстЗапретаПродаж) Тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Запрет продаж!'"), ТекстЗапретаПродаж);
			СтрокаТабличнойЧасти.Номенклатура = ПоследняяРедактируемаяНоменклатура;
			ОткрыватьРедактированиеСтроки = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			ОткрыватьРедактированиеСтроки = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипНоменклатуры");
	СтруктураДействий.Вставить("ЗаполнитьПредставлениеТабло", НаборПравИНастроек.ЗапросТабло);
	СтруктураДействий.Вставить("ЗаполнитьДоговорПлатежногоАгента");
	СтруктураДействий.Вставить("ПроверитьСерийныеНомераПоВладельцу");
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", СтрокаТабличнойЧасти.Упаковка);
	СтруктураДействий.Вставить("ОткрыватьРедактированиеСтроки", ОткрыватьРедактированиеСтроки);
	
	Если СтрокаТабличнойЧасти.КоличествоУпаковок = 0 Тогда
		СтрокаТабличнойЧасти.КоличествоУпаковок = 1;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмерения");
	СтруктураДействий.Вставить("ЭтоРМК");
	
	СтруктураПараметровДляЗаполненияСкладаПродажи = Новый Структура("Магазин, РабочееМесто", Объект.Магазин, Объект.РабочееМесто);
	СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", СтруктураПараметровДляЗаполненияСкладаПродажи);
	
	СтруктураПараметровНалога = Новый Структура;
	СтруктураПараметровНалога.Вставить("Дата", Объект.Дата);
	СтруктураПараметровНалога.Вставить("Магазин", Объект.Магазин);
	СтруктураДействий.Вставить("ЗаполнитьВидНалога", СтруктураПараметровНалога);
	
	СтруктураПараметровЗаполненияОрганизации = Новый Структура("Магазин", Объект.Магазин);
	Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
		СтруктураПараметровЗаполненияОрганизации.Вставить("ОрганизацияПоУмолчанию", ТаблицаКассККМОрганизаций[0].Организация);
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьОрганизациюПродажи", СтруктураПараметровЗаполненияОрганизации);
	
	СтруктураПараметровСтавкиНДС = Новый Структура;
	СтруктураПараметровСтавкиНДС.Вставить("Дата", Объект.Дата);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		СтруктураПараметровСтавкиНДС.Вставить("Организация", Объект.Организация);
	Иначе
		СтруктураПараметровСтавкиНДС.Вставить("ОрганизацияПоСкладу");
	КонецЕсли;
	СтруктураПараметровСтавкиНДС.Вставить("Магазин", Объект.Магазин);
	
	УчетХарактеристик = ПодборТоваровВызовСервера.ФлагУчетаХарактеристик(СтрокаТабличнойЧасти.Номенклатура);
	
	ВыполнитьУстановкуЦены = ПерейтиНаКоличество ИЛИ (НЕ УчетХарактеристик);
	
	Если ВыполнитьУстановкуЦены Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина, Ложь));
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		Иначе
			СтруктураДействий.Вставить("ПересчитатьСуммуВозвратСУчетомОснования", Новый Структура("Основание", Объект.ЧекККМПродажа));
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДССкладВСтроке", СтруктураПараметровСтавкиНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	СтруктураПроверкиАМ = Новый Структура();
	СтруктураПроверкиАМ.Вставить("Магазин", Объект.Магазин);
	СтруктураПроверкиАМ.Вставить("Организация", Неопределено);
	СтруктураПроверкиАМ.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
	СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураПроверкиАМ);
	СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаКодаМаркировки", СтруктураПроверкиАМ);
		
	СуммаДоРасчета = СтрокаТабличнойЧасти.Сумма;
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
	// Интерфейс ЕГАИС
	ИнтеграцияЕГАИСРТКлиент.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(СтрокаТабличнойЧасти);
	РозничныеПродажиКлиент.УстановитьЗначениеСтатусаКодаМаркировкиВСтроке(СтрокаТабличнойЧасти);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	СтрокаТабличнойЧасти.Продавец = Объект.Продавец;
	
	СуммаПослеРасчета = СтрокаТабличнойЧасти.Сумма;
	УменьшениеСуммыЧекаККМ = СуммаДоРасчета - СуммаПослеРасчета;
	УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
	
	Если НаборПравИНастроек.ЛогироватьДействияКассира
		И НаборПравИНастроек.ЛогируемыеДействия.Свойство("ИзменениеНоменклатуры") Тогда
		ЛогированиеИзмененийСтроки("ИзменениеНоменклатуры",
								   Неопределено,
								   ПоследняяРедактируемаяНоменклатура, 
								   ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"), 
								   СтрокаТабличнойЧасти.Номенклатура, 
								   СтрокаТабличнойЧасти.Характеристика, 
								   УменьшениеСуммыЧекаККМ);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, СтрокаТабличнойЧасти, "КлючСвязи");
	СтрокаТабличнойЧасти.ШтрихКод = "";
	
	Если НЕ ТипЗнч(ПараметрДействия) = Тип("Структура") Тогда
		ПараметрДействия = Новый Структура;
		ПараметрДействия.Вставить("ОткрытаБлокирующаяФорма", Ложь);
	КонецЕсли;
	
	ПараметрДействия.Вставить("ИдентификаторСтроки", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
	ПараметрДействия.Вставить("ПрекратитьДействия"  , Ложь);
	ПараметрДействия.Вставить("УчетХарактеристик"   , УчетХарактеристик);
	
	ПараметрДействия.Вставить("ОткрыватьРедактированиеСтроки", СтруктураДействий.ОткрыватьРедактированиеСтроки);
	ПараметрДействия.Вставить("НеобходимостьВводаАкцизнойМарки", СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки);
	ПараметрДействия.Вставить("НеобходимостьВводаКодаМаркировки", СтрокаТабличнойЧасти.НеобходимостьВводаКодаМаркировки);
	
	Если ВыполнитьУстановкуЦены Тогда
		
		ПараметрДействия.Вставить("ПересчиталиЦену", Ложь);
		Если СтрокаТабличнойЧасти.Цена = 0
			И СтрокаТабличнойЧасти.Номенклатура <> Неопределено Тогда
			
			Если ИспользоватьНастройкуРМК И НаборПравИНастроек.НазначатьЦенуТоварамСНулевойЦеной 
			И (СтрокаТабличнойЧасти.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")) Тогда
				
				ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
				
				ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаЧислаТоварыПриИзмененииНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
				ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите цену товара.'"), 0, 0, Ложь, Ложь, ОбработчикОповещения);
				
			ИначеЕсли СтрокаТабличнойЧасти.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
				И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорПлатежногоАгента) Тогда
				
				ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
				СтруктураДействий.Вставить("ОткрыватьРедактированиеСтроки", Ложь);
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
				
				ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаЧислаТоварыПриИзмененииНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
				ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите сумму платежа.'"), 0, 0, Ложь, Ложь, ОбработчикОповещения);
				
			Иначе
				
				ПараметрДействия.Вставить("ОткрыватьРедактированиеСтроки", Ложь);
				
				ТекстСообщения = НСтр("ru = 'На товар %1 %2 не назначена цена!'");
				
				ХарактеристикаПредставление = "";
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Характеристика) Тогда
					ХарактеристикаПредставление = "(" + СтрокаТабличнойЧасти.Характеристика + ")";
				КонецЕсли;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
										СтрокаТабличнойЧасти.Номенклатура,
										ХарактеристикаПредставление);
				
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Цена не установлена!'"), ТекстСообщения);
				
			КонецЕсли;
			
			Если НЕ ПараметрДействия.ОткрытаБлокирующаяФорма Тогда
				ПродолжитьДействияТоварыПриИзмененииНоменклатуры(ПараметрДействия);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если (НЕ ПараметрДействия.ОткрытаБлокирующаяФорма)
		И (СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки
			ИЛИ СтрокаТабличнойЧасти.НеобходимостьВводаКодаМаркировки) Тогда
		
		Если ПараметрДействия.Свойство("ПрекратитьДействия") Тогда
			Если НЕ ПараметрДействия.ПрекратитьДействия Тогда
				
				Если СтрокаТабличнойЧасти <> Неопределено Тогда
					ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
					ВвестиАкцизнуюМарку(
						СтрокаТабличнойЧасти,
						"",
						ПараметрДействия);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
			
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
				ПараметрДействия.Вставить("ЗавершитьДействияТоварыПриИзмененииНоменклатуры", Истина);
				ВвестиАкцизнуюМарку(
					СтрокаТабличнойЧасти,
					"",
					ПараметрДействия);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПараметрДействия.ОткрытаБлокирующаяФорма Тогда
		ЗавершитьДействияТоварыПриИзмененииНоменклатуры(ПараметрДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДействияТоварыПриИзмененииНоменклатуры(ПараметрДействия)
	
	Если ПараметрДействия.ПрекратитьДействия Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("ПродолжитьДействияТоварыПриИзмененииНоменклатуры") Тогда
		ПараметрДействия.Удалить("ПродолжитьДействияТоварыПриИзмененииНоменклатуры");
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ПараметрДействия.ИдентификаторСтроки);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		ПараметрДействия.ПрекратитьДействия = Истина;
		ПараметрДействия.Вставить("ОткрыватьРедактированиеСтроки", Ложь);
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Цена = 0 Тогда
		Объект.Товары.Удалить(СтрокаТабличнойЧасти);
		СтрокаТабличнойЧасти = Неопределено;
		ОбновитьФорму();
		ПараметрДействия.ПрекратитьДействия = Истина;
		ПараметрДействия.Вставить("ОткрыватьРедактированиеСтроки", Ложь);
		Возврат;
	КонецЕсли;
	
	Если ПараметрДействия.ПересчиталиЦену Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		
		ЛогированиеВводаЦены(СтрокаТабличнойЧасти.Цена)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДействияТоварыПриИзмененииНоменклатуры(ПараметрДействия)
	
	Если ПараметрДействия.ПрекратитьДействия Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("ЗавершитьДействияТоварыПриИзмененииНоменклатуры") Тогда
		ПараметрДействия.Удалить("ЗавершитьДействияТоварыПриИзмененииНоменклатуры");
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ПараметрДействия.ИдентификаторСтроки);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		ПараметрДействия.ПрекратитьДействия = Истина;
		Возврат;
	КонецЕсли;
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("УчетХарактеристик")
		И ПараметрДействия.УчетХарактеристик
		И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Характеристика) Тогда
		ТекущийЭлемент = Элементы.Товары;
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыХарактеристика;
	Иначе
		ТекущийЭлемент = Элементы.Товары;
		Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКоличествоУпаковок;
	КонецЕсли;
	
	ЗаполнитьОстаткиСервер();
	
	ОбновитьФорму();
	
	Если СтрокаТабличнойЧасти.НеобходимостьВводаКодаМаркировки
		ИЛИ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорПлатежногоАгента) Тогда
		ПараметрДействия.Вставить("ОткрыватьРедактированиеСтроки", Ложь);
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ИзменитьСтроку", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает изменение характеристики номенклатуры в ТЧ товары.
//
&НаКлиенте
Процедура ТоварыПриИзмененииХарактеристикиНоменклатуры(СтрокаТабличнойЧасти)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина, Ложь));
		
		Если СтрокаТабличнойЧасти.НеобходимостьВводаКодаМаркировки Тогда
			// Нужно удалить старые коды маркировки.
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
			
			МассивКодов = Объект.КодыМаркировки.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаКода Из МассивКодов Цикл
				Объект.КодыМаркировки.Удалить(СтрокаКода);
			КонецЦикла;
		КонецЕсли;
		
		СтруктураПроверки = Новый Структура();
		СтруктураПроверки.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
		СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаКодаМаркировки", СтруктураПроверки);
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Товары, СтрокаТабличнойЧасти, "КлючСвязи");
	КонецЕсли;
	
	ОткрытаБлокирующаяФорма = Ложь;
	ПараметрДействия = Новый Структура;
	ПараметрДействия.Вставить("ИдентификаторСтроки", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
	ПараметрДействия.Вставить("ПрекратитьДействия"  , Ложь);
	ПараметрДействия.Вставить("ПересчиталиЦену", Ложь);
	
	Если СтрокаТабличнойЧасти.Цена = 0
		И СтрокаТабличнойЧасти.Номенклатура <> Неопределено Тогда
		
		Если ИспользоватьНастройкуРМК И НаборПравИНастроек.НазначатьЦенуТоварамСНулевойЦеной 
		И (СтрокаТабличнойЧасти.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")) Тогда
			
			ОткрытаБлокирующаяФорма = Истина;
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
				
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаЧислаТоварыПриИзмененииХарактеристикиНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
			ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите цену товара.'"), 0, 0, Ложь, Ложь, ОбработчикОповещения);
		
		ИначеЕсли СтрокаТабличнойЧасти.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
			И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорПлатежногоАгента) Тогда
			
			ОткрытаБлокирующаяФорма = Истина;
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
				
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаЧислаТоварыПриИзмененииХарактеристикиНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
			ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите сумму платежа.'"), 0, 0, Ложь, Ложь, ОбработчикОповещения);
		
		Иначе
			
			ТекстСообщения = НСтр("ru = 'На товар %1 %2 не назначена цена!'");
			
			ХарактеристикаПредставление = "";
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Характеристика) Тогда
				ХарактеристикаПредставление = "(" + СтрокаТабличнойЧасти.Характеристика + ")";
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
									СтрокаТабличнойЧасти.Номенклатура,
									ХарактеристикаПредставление);
			
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Цена не установлена!'"), ТекстСообщения)
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьДействияТоварыПриИзмененииХарактеристикиНоменклатуры(ПараметрДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДействияТоварыПриИзмененииХарактеристикиНоменклатуры(ПараметрДействия)

	Если ПараметрДействия.ПрекратитьДействия Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ПараметрДействия.ИдентификаторСтроки);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		ПараметрДействия.ПрекратитьДействия = Истина;
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Цена = 0 Тогда
		ПараметрДействия.ПрекратитьДействия = Истина;
		Объект.Товары.Удалить(СтрокаТабличнойЧасти);
		СтрокаТабличнойЧасти = Неопределено;
		ОбновитьФорму();
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	Если СтрокаТабличнойЧасти.КоличествоУпаковок = 0 Тогда
		СтрокаТабличнойЧасти.КоличествоУпаковок = 1;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Продавец = Объект.Продавец;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСуммуВозвратСУчетомОснования", Новый Структура("Основание", Объект.ЧекККМПродажа));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ЗаполнитьОстаткиСервер();
	
	ОбновитьФорму();
	
	ОбновлениеДисплеяПокупателя("ИзмененияЦены");
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьТекущийЭлемент_ТоварыКоличествоУпаковок", 0.1, Истина);
	
КонецПроцедуры

// Процедура установки значения экспортных переменных модуля приложения.
//
// Параметры:
//  Имя - строка, содержит имя переменной целиком.
// 	Значение - значение переменной.
//
&НаСервере
Процедура глЗначениеПеременнойУстановитьСервер(Имя, Значение, ОбновлятьВоВсехКэшах = Ложь)
	
	глЗначениеПеременнойУстановить(Имя, Значение, ОбновлятьВоВсехКэшах = Ложь)
	
КонецПроцедуры

// Стандартная для данной конфигурации функция форматирования сумм.
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//           будет добавлено представление валюты.
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
&НаКлиенте
Функция ФорматСуммКлиент(Знач Сумма, Валюта = "руб.", ЧН = "", ЧРГ = "")
	
	Сумма = ?(Сумма < 0, -Сумма, Сумма);
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" 
					+ ?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) 
					+ ?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	
	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()

&НаКлиенте
Процедура ОбновитьТаблоНоменклатуры()
	
	Если ВыведеныЧеки Тогда
		Возврат;
	КонецЕсли;
	
	// Отобразим дисконтную карту
	Если НЕ ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Элементы.СуммаСкидки.Заголовок = НСтр("ru = 'Скидка'") + ":";
		Элементы.СуммаСкидки.ЦветФонаЗаголовка = Новый Цвет();
	Иначе
		
		Элементы.СуммаСкидки.ЦветФонаЗаголовка = WebЦвета.Зеленый;
		Если ЗначениеЗаполнено(Объект.ВладелецДисконтнойКарты) Тогда
			Элементы.СуммаСкидки.Заголовок = НСтр("ru = 'Скидка'") + ": " + Объект.ВладелецДисконтнойКарты;
		Иначе
			Элементы.СуммаСкидки.Заголовок = НСтр("ru = 'Скидка'") + ": " + Объект.ДисконтнаяКарта;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Если Объект.Товары.Количество() > 0 Тогда
			Элементы.Товары.ТекущаяСтрока = Объект.Товары[Объект.Товары.Количество() - 1].ПолучитьИдентификатор();
			ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда
		НадписьИнформацияОТоваре = "";
		НадписьТекущаяСумма = "";
		Возврат;
	КонецЕсли;
	
	Если ОставлятьФлагТаблоСдачи Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыИнформации.ТекущаяСтраница = Элементы.СтраницаИнформации;
	
	// Обновление информации по строке.
	
	ВыведенаСдача = Ложь;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ПредставлениеТабло) Тогда
		ИнформацияОТоваре = СокрЛП(ТекущаяСтрока.ПредставлениеТабло);
	Иначе
		ИнформацияОТоваре = СокрЛП(ТекущаяСтрока.Номенклатура);
	КонецЕсли;
	Если ТекущаяСтрока.ИспользоватьСерийныеНомера Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиСерийныхНомеров", ТекущаяСтрока.КлючСвязиСерийныхНомеров);
		ИнформацияОСерийныхНомерах = "";
		СтрокиСерийныхНомеров = Объект.СерийныеНомера.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаСерийныхНомеров Из СтрокиСерийныхНомеров Цикл
			ИнформацияОСерийныхНомерах = ИнформацияОСерийныхНомерах +", "+СтрокаСерийныхНомеров.СерийныйНомер;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ИнформацияОСерийныхНомерах)  Тогда
			ИнформацияОСерийныхНомерах = "№№ " + Прав(ИнформацияОСерийныхНомерах,СтрДлина(ИнформацияОСерийныхНомерах) - 2);
		Иначе
			ИнформацияОСерийныхНомерах = "№№ ?????"
		КонецЕсли;
		ИнформацияОТоваре = ИнформацияОТоваре + " - " + ИнформацияОСерийныхНомерах
	КонецЕсли;
	
	ИнформацияОПродавце = ?(ЗначениеЗаполнено(ТекущаяСтрока.Продавец)," (продавец: " + Строка(ТекущаяСтрока.Продавец) +")","");
	
	ИнформацияОТоваре = ИнформацияОТоваре + ИнформацияОПродавце;
	
	НадписьИнформацияОТоваре = ИнформацияОТоваре;
	
	// Обновление информации по суммам строки.
	СуммаТовара = ТекущаяСтрока.Цена * ТекущаяСтрока.Количество;
	Если НЕ СуммаТовара = 0 Тогда
		ПредставлениеТекущейСтроки = ФорматСуммКлиент(ТекущаяСтрока.Цена, "","0,00")
		+ " х " + ?(ЗначениеЗаполнено(ТекущаяСтрока.Упаковка), 
					СокрЛП(ТекущаяСтрока.КоличествоУпаковок)+ " " + СокрЛП(ТекущаяСтрока.Упаковка),
					СокрЛП(ТекущаяСтрока.Количество)+ " " + СокрЛП(ТекущаяСтрока.ЕдиницаИзмерения));
		
		ИспользуемоеКоличество = ?(ЗначениеЗаполнено(ТекущаяСтрока.Упаковка),ТекущаяСтрока.КоличествоУпаковок,ТекущаяСтрока.Количество);
		
		Скидка = ТекущаяСтрока.Цена * ИспользуемоеКоличество - ТекущаяСтрока.Сумма;
		
		Если (Скидка > 0.01 ИЛИ Скидка < -0.01) 
			И НЕ(ТекущаяСтрока.Цена * ТекущаяСтрока.Количество = 0) Тогда
			ОбщийПроцентСкидки = Окр(100 * Скидка / (ТекущаяСтрока.Цена * ИспользуемоеКоличество),2,1);
			
			ОбщийПроцентСкидкиСтрокой = ?(Скидка > 0,"-" + Строка(ОбщийПроцентСкидки),"+" + Строка(-ОбщийПроцентСкидки));
			
			ПредставлениеСкидки = ?(Скидка > 0," - " + ФорматСуммКлиент(Скидка, "","0,00")
									," + "+ ФорматСуммКлиент(-Скидка, "","0,00"));
									
			ПредставлениеСкидки = ПредставлениеСкидки + " ( "+Строка(ОбщийПроцентСкидкиСтрокой)+"%) ";
			
			ПредставлениеТекущейСтроки = ПредставлениеТекущейСтроки + ПредставлениеСкидки;
		КонецЕсли;
		
		НадписьТекущаяСумма = ПредставлениеТекущейСтроки
		+ " = " + ФорматСуммКлиент(ТекущаяСтрока.Сумма,"","0,00");
		
	Иначе
		НадписьТекущаяСумма = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюПоСуммам()
	
	Если Объект.ОперацияСДенежнымиСредствами И Объект.Товары.Количество() = 0 
		И (НЕ ЗначениеЗаполнено(Объект.ДокументРасчета) 
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")) Тогда
		СуммаВсего 				= СуммаОстаткаДокументаРасчета;
		СуммаДокументаБезСкидок = 0;
		СуммаСкидкиРасчет       = 0;
		СуммаСкидки             = 0;
	Иначе
		СуммаВсего              = Объект.Товары.Итог("СуммаВсего");
		СуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки();
		СуммаСкидкиРасчет       = СуммаДокументаБезСкидок - СуммаВсего;
		СуммаСкидки             = ?(СуммаСкидкиРасчет > 0, СуммаСкидкиРасчет, - СуммаСкидкиРасчет);
	КонецЕсли;

	СуммаКОплате = СуммаВсего;
	
	Если СуммаСкидкиРасчет < 0 Тогда
		Элементы.СуммаСкидки.ЦветТекста = WebЦвета.Красный;
	ИначеЕсли СуммаСкидкиРасчет > 0 Тогда
		Элементы.СуммаСкидки.ЦветТекста = WebЦвета.Зеленый;
	Иначе
		Элементы.СуммаСкидки.ЦветТекста = Новый Цвет();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Элементы.СуммаСкидки.ЦветТекстаЗаголовка = WebЦвета.Зеленый;
		Элементы.СуммаСкидки.Заголовок = "Скидка (" + Объект.ДисконтнаяКарта + ")";
	Иначе
		Элементы.СуммаСкидки.ЦветТекстаЗаголовка = Новый Цвет();
		Элементы.СуммаСкидки.Заголовок = "Скидка"
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму()
	
	ОбновитьТаблоНоменклатуры();
	ОбновитьИнформациюПоСуммам();
	УстановитьЗаголовок();
	ЦветаКнопок();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСуммуДокументаБезСкидки()

	СуммаДокумента = 0;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если НЕ СтрокаТабличнойЧасти.ПродажаПодарка Тогда
			ИспользуемоеКоличество = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Упаковка), СтрокаТабличнойЧасти.КоличествоУпаковок, СтрокаТабличнойЧасти.Количество);
			СуммаПоСтроке = Окр(СтрокаТабличнойЧасти.Цена * ИспользуемоеКоличество, 2);
			СуммаДокумента = СуммаДокумента + СуммаПоСтроке + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
		КонецЕсли;
		
	КонецЦикла;

	Возврат СуммаДокумента;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЭтоРМК");
	
	Если Объект.ПродажаПоЗаказу Тогда
		СтруктураПересчетаСкидок = Новый Структура;
		СтруктураПересчетаСкидок.Вставить("Очищать", Ложь);
		СтруктураПересчетаСкидок.Вставить("ПересчитыватьСуммуСкидки", Истина);
		
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , СтруктураПересчетаСкидок);
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", СтруктураПересчетаСкидок);
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки"        , Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	КонецЕсли;
	
КонецПроцедуры

// Получение  от пользователя числа.
//
// Параметры:
//  Заголовок - Строка;
//  ЧислоВвода - Число;
//  МаксимальноеЗначение - Число;
//
// Возвращаемое значение:
//   Булево
//
&НаКлиенте
Процедура ПолучитьИнтерактивноЧисло(Заголовок, ЧислоВвода, МаксимальноеЗначение, Отрицательное, ВозвращатьЧислоСтрокой, ОбработчикОповещения = Неопределено, ФорматироватьСтроку = Ложь)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок"             , Заголовок);
	ПараметрыФормы.Вставить("МаксимальноеЗначение"  , МаксимальноеЗначение);
	ПараметрыФормы.Вставить("ЧислоВвода"            , ЧислоВвода);
	ПараметрыФормы.Вставить("Отрицательное"         , Отрицательное);
	ПараметрыФормы.Вставить("ВозвращатьЧислоСтрокой", ВозвращатьЧислоСтрокой);
	ПараметрыФормы.Вставить("ФорматироватьСтроку"   , ФорматироватьСтроку);
	
	Если ОбработчикОповещения <> Неопределено Тогда
		ДополнительныеПараметры = ОбработчикОповещения.ДополнительныеПараметры;
		Если ДополнительныеПараметры <> Неопределено
			И ДополнительныеПараметры.Свойство("КодПроверкиСМС") Тогда
			ПараметрыФормы.Вставить("КодПроверкиСМС", ДополнительныеПараметры.КодПроверкиСМС);
			ПараметрыФормы.Вставить("НомерТелефонаСМС", ДополнительныеПараметры.НомерТелефонаСМС);
		КонецЕсли;
	КонецЕсли;
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВводаЧисла", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
	
КонецПроцедуры

// Открывает редактирование строки.
//
// Параметры:
//  ДанныеСтрокиТовары - Строка таблицы Товары.
//  ПервыйЭлемент - Строка, указывает какую клавишу нужно "Нажать"при открытии.
//
&НаКлиенте
Процедура ОбработатьРедактированиеСтроки(ДанныеСтрокиТовары, ПервыйЭлемент = Неопределено)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Количество"   , ДанныеСтрокиТовары.КоличествоУпаковок);
	ПараметрыФормы.Вставить("Цена"         , ДанныеСтрокиТовары.Цена);
	ПараметрыФормы.Вставить("Продавец"     , ДанныеСтрокиТовары.Продавец);
	ПараметрыФормы.Вставить("ПервыйЭлемент", ПервыйЭлемент);
	
	
	МассивЗапрещенныхДействийПриРедактировании = Новый Массив;
	
	Если НЕ НаборПравИНастроек.ИзменятьЦену Тогда
		МассивЗапрещенныхДействийПриРедактировании.Добавить("Цена");
	КонецЕсли;
	Если НЕ НаборПравИНастроек.ИзменятьПродавца Тогда
		МассивЗапрещенныхДействийПриРедактировании.Добавить("Продавец");
	КонецЕсли;
	Если НЕ НаборПравИНастроек.РазрешитьСторнированиеТовара Тогда
		МассивЗапрещенныхДействийПриРедактировании.Добавить("Сторно");
	КонецЕсли;
	
	ВводСерийРазрешен = Истина;
	ТекущиеДанныеИдентификатор = ДанныеСтрокиТовары.ПолучитьИдентификатор();
	ПараметрыФормы.Вставить("ТекущиеДанныеИдентификатор" , ТекущиеДанныеИдентификатор);
	ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий, ВводСерийРазрешен, ,Истина);
	Если НЕ ВводСерийРазрешен Тогда
		МассивЗапрещенныхДействийПриРедактировании.Добавить("Серии");
		Если ДанныеСтрокиТовары.ИспользоватьСерийныеНомера Тогда
			МассивЗапрещенныхДействийПриРедактировании.Добавить("Цена");
			МассивЗапрещенныхДействийПриРедактировании.Добавить("Количество");
			
			ТекущийКлючСвязи = ДанныеСтрокиТовары.КлючСвязиСерийныхНомеров;
			
			ПараметрыФормыУказанияСертификатов = Новый Структура;
			ПараметрыФормыУказанияСертификатов.Вставить("МассивСерийныхНомеров"    , ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(ТекущийКлючСвязи, Объект.СерийныеНомера));
			ПараметрыФормыУказанияСертификатов.Вставить("Номенклатура"             , ДанныеСтрокиТовары.Номенклатура);
			ПараметрыФормыУказанияСертификатов.Вставить("ПредставлениеНоменклатуры", Строка(ДанныеСтрокиТовары.Номенклатура));
			ПараметрыФормыУказанияСертификатов.Вставить("ТекущийКлючСвязи"         , ТекущийКлючСвязи);
			
			ПараметрыФормы.Вставить("ПараметрыФормыУказанияСертификатов", ПараметрыФормыУказанияСертификатов);
			ПараметрыФормы.Вставить("ТекущийКлючСвязи", ТекущийКлючСвязи);
		Иначе
			МассивЗапрещенныхДействийПриРедактировании.Добавить("Сертификаты");
		КонецЕсли;
	Иначе
		МассивЗапрещенныхДействийПриРедактировании.Добавить("Количество");
		МассивЗапрещенныхДействийПриРедактировании.Добавить("Сертификаты");
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		ПараметрыФормы.Вставить("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("МассивЗапрещенныхДействий", МассивЗапрещенныхДействийПриРедактировании);
	
	Если НаборПравИНастроек.ВыборУпаковкиПриПродаже Тогда 
		Если ЗначениеЗаполнено(ДанныеСтрокиТовары.Упаковка) Тогда 
			ПараметрыФормы.Вставить("Упаковка", ДанныеСтрокиТовары.Упаковка);
		КонецЕсли;
		
		НаборУпаковок = ОбщегоНазначенияРТВызовСервера.ЗначениеРеквизитаОбъекта(ДанныеСтрокиТовары.Номенклатура, "НаборУпаковок");
		Если ЗначениеЗаполнено(НаборУпаковок) Тогда 
			ПараметрыФормы.Вставить("Номенклатура", ДанныеСтрокиТовары.Номенклатура);	
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ТекущиеДанныеИдентификатор);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуРедактированияСтроки", ЭтотОбъект, ДополнительныеПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаРедактированияСтроки", ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры // ОбработатьРедактированиеСтроки()

&НаКлиенте
Процедура РедактированиеСтрокиКлиент()
	
	ДанныеСтрокиТовары = Элементы.Товары.ТекущиеДанные;
	
	Если ДанныеСтрокиТовары <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ДанныеСтрокиТовары.ДоговорПлатежногоАгента)
			И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			СтруктураПараметровКлиента = Новый Структура;
			
			СтруктураПараметровКлиента.Вставить("УчетХарактеристик", Ложь);
			СтруктураПараметровКлиента.Вставить("ПересчиталиЦену", Истина);
			СтруктураПараметровКлиента.Вставить("НеУдалятьСтроку", Истина);
			СтруктураПараметровКлиента.Вставить("ПредупреждениеНулевойЦены", НСтр("ru = 'Введите сумму платежа.'"));
			СтруктураПараметровКлиента.Вставить("ОткрытаБлокирующаяФорма", Истина);
			СтруктураПараметровКлиента.Вставить("ИдентификаторСтроки", ДанныеСтрокиТовары.ПолучитьИдентификатор());
			СтруктураПараметровКлиента.Вставить("ПрекратитьДействия", Ложь);
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрДействия", СтруктураПараметровКлиента);
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаЧислаТоварыПриИзмененииНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
			ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите сумму платежа.'"), 0, 0, Ложь, Ложь, ОбработчикОповещения);
		ИначеЕсли ДанныеСтрокиТовары.НеобходимостьВводаАкцизнойМарки
			ИЛИ ДанныеСтрокиТовары.НеобходимостьВводаКодаМаркировки Тогда
				ИдентификаторСтроки = ДанныеСтрокиТовары.ПолучитьИдентификатор();
				
				СтруктураПараметровКлиента = Новый Структура;
				СтруктураПараметровКлиента.Вставить("ОткрытаБлокирующаяФорма", Истина);
				СтруктураПараметровКлиента.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
				СтруктураПараметровКлиента.Вставить("ПрекратитьДействия", Ложь);
				
				ВвестиАкцизнуюМарку(
					ДанныеСтрокиТовары,
					"КоличествоУпаковок",
					СтруктураПараметровКлиента);
			
		Иначе
			
			Если НЕ ДанныеСтрокиТовары.НомерСтроки = Объект.Товары.Количество()
				И НЕ НаборПравИНастроек.РазрешитьРедактироватьНабранныйЧек 
				И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
				Возврат;
			КонецЕсли;
			
			ОбработатьРедактированиеСтроки(ДанныеСтрокиТовары, "");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовок()
	
	СтрокаЗаголовок = "";
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		Если Объект.ОперацияСДенежнымиСредствами Тогда
			СтрокаЗаголовок = НСтр("ru = 'Возврат денежных средств без передачи товаров'");
		Иначе
			СтрокаЗаголовок = НСтр("ru = 'Возврат'") 
		КонецЕсли;
		Элементы.КартинкаЧО04Возврат.Заголовок                = НСтр("ru = 'Продажа (F5)'");
		Элементы.КартинкаЧО04Возврат.ТекстНевыбраннойКартинки = НСтр("ru = 'Продажа (F5)'");
		Элементы.КартинкаЧО04Возврат.ЦветТекста               = WebЦвета.Красный;
		Элементы.КартинкаЧО09ОперацияДС.Заголовок                = НСтр("ru = 'Без передачи товаров(Shift + F10)'");
		Элементы.КартинкаЧО09ОперацияДС.ТекстНевыбраннойКартинки = НСтр("ru = 'Без передачи товаров(Shift + F10)'");
	Иначе
		Если Объект.ОперацияСДенежнымиСредствами Тогда
			СтрокаЗаголовок = НСтр("ru = 'Прием денежных средств без передачи товаров'");
		Иначе
			СтрокаЗаголовок = НСтр("ru = 'Продажа'");
		КонецЕсли;
		Элементы.КартинкаЧО04Возврат.Заголовок                = НСтр("ru = 'Возврат (F5)'");
		Элементы.КартинкаЧО04Возврат.ТекстНевыбраннойКартинки = НСтр("ru = 'Возврат (F5)'");
		Элементы.КартинкаЧО04Возврат.ЦветТекста               = ЦветПродажи;
		Элементы.КартинкаЧО09ОперацияДС.Заголовок                = НСтр("ru = 'Без передачи товаров(Shift + F10)'");
		Элементы.КартинкаЧО09ОперацияДС.ТекстНевыбраннойКартинки = НСтр("ru = 'Без передачи товаров(Shift + F10)'");
	КонецЕсли;
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда
		Элементы.КартинкаЧО09ОперацияДС.ЦветТекста = WebЦвета.Синий;
	Иначе
		Элементы.КартинкаЧО09ОперацияДС.ЦветТекста = ЦветПродажи;
	КонецЕсли;
	
	Если Объект.ПродажаПоЗаказу Тогда
		СтрокаЗаголовок = СтрокаЗаголовок + НСтр("ru = ' по заказу №'") + НомерЗаказа;
	ИначеЕсли ЗначениеЗаполнено(Объект.ДокументРасчета)
		И ЭтоЗачетАванса Тогда
		СтрокаЗаголовок = СтрокаЗаголовок + НСтр("ru = ' Зачет аванса '") + Формат(СуммаОстаткаДокументаРасчета, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧГ=3,0");
	ИначеЕсли ЗначениеЗаполнено(Объект.ДокументРасчета)
		И ЭтоОплатаРассрочки Тогда
		СтрокаЗаголовок = СтрокаЗаголовок + НСтр("ru = ' Остаток рассрочки '") + Формат(СуммаОстаткаДокументаРасчета, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧГ=3,0");
	КонецЕсли;
	
	Пользователь = глЗначениеПеременной("ПользовательИзмененныхПрав");
	
	Если Пользователь = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Элементы.НадписьЗаголовок.ЦветТекста = WebЦвета.Зеленый;
	Иначе
		СтрокаЗаголовок = "" + Пользователь + " - " + СтрокаЗаголовок;
		Элементы.НадписьЗаголовок.ЦветТекста = WebЦвета.Красный;
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Объект.Продавец) Тогда
		СтрокаЗаголовок = СтрокаЗаголовок + " - "+ Объект.Продавец
	КонецЕсли;
	
	НадписьЗаголовок = СтрокаЗаголовок;
	
	УстановитьРеверсныеИменаКнопокНижнейПанели();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветРеверснойКнопки(ИмяЭлемента, ПоложительныйРеверс)
	
	Если ПроверитьНаличиеЭлементаФормыКлиент(ИмяЭлемента) Тогда
		Если ПоложительныйРеверс Тогда
			Элементы[ИмяЭлемента].ЦветТекста = WebЦвета.Синий;
			Элементы[ИмяЭлемента].ЦветТекстаЗаголовка = WebЦвета.Синий;
		Иначе
			Элементы[ИмяЭлемента].ЦветТекста = ЦветПродажи;
			Элементы[ИмяЭлемента].ЦветТекстаЗаголовка = ЦветПродажи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветаКнопок()
	
	ЦветРеверснойКнопки("КартинкаПО27ПродажаПоЗаказу", ЗначениеЗаполнено(Объект.ЗаказПокупателя));
	ЦветРеверснойКнопки("ПрограммноКартинкаПО27ПродажаПоЗаказу", ЗначениеЗаполнено(Объект.ЗаказПокупателя));
	ЦветРеверснойКнопки("КартинкаПО31ПолучитьДокументРасчета", ЗначениеЗаполнено(Объект.ДокументРасчета));
	ЦветРеверснойКнопки("ПрограммноКартинкаПО31ПолучитьДокументРасчета", ЗначениеЗаполнено(Объект.ДокументРасчета));
	ЦветРеверснойКнопки("КартинкаПО14Продавец", ЗначениеЗаполнено(Объект.Продавец));
	ЦветРеверснойКнопки("ПрограммноКартинкаПО14Продавец", ЗначениеЗаполнено(Объект.Продавец));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБыстрыйТовар(ИдентификаторБыстрогоТовара)
	
	МассивСтрок = ТаблицаБыстрыхТоваров.НайтиСтроки(Новый Структура("ИдентификаторБыстрогоТовара", ИдентификаторБыстрогоТовара));
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		СтрокаБыстрыхТоваров = МассивСтрок[0];
		Если СтрокаБыстрыхТоваров.ЭтоСтраница Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ПалитраБыстрыхТоваров", ПалитраБыстрыхТоваров);
			ПараметрыФормы.Вставить("НомерСтраницы", СтрокаБыстрыхТоваров.НомерСтраницы);
			ПараметрыФормы.Вставить("ЗакрыватьБыстрыеТоварыПриВыбореТовара", НаборПравИНастроек.ЗакрыватьБыстрыеТоварыПриВыбореТовара);
			
			Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
			ОткрытьФорму("Справочник.ПалитраБыстрыхТоваров.Форма.ФормаСтраницыБыстрыхТоваров", ПараметрыФормы, ЭтотОбъект,,,,,Режим);
		Иначе
			ДобавитьНоменклатуруВТабЧасть(СтрокаБыстрыхТоваров.Номенклатура, СтрокаБыстрыхТоваров.Характеристика, Неопределено, 1, Истина);
			
			Если НаборПравИНастроек.ЗакрыватьБыстрыеТоварыПриВыбореТовара Тогда
				Элементы.ГруппаБыстрыхТоваров.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбраннаяКассаККМ(ОбработчикОповещения)

	Если ТаблицаКассККМОрганизаций.Количество() > 1 Тогда
		
		// &ЗамерПроизводительности
		ОценкаПроизводительностиРТКлиент.НачатьЗамер(
							Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораКассыККМ.Открытие");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КассыККМ"   , МассивКассККМКлиент);
		ПараметрыФормы.Вставить("Организации", МассивОрганизацийКлиент);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораКассыККМ", ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим); 
		
		Возврат ПредопределенноеЗначение("Справочник.КассыККМ.ПустаяСсылка");
	Иначе
		ЗначениеВыбораКасса = МассивКассККМКлиент[0];
	КонецЕсли;
	
	Возврат ЗначениеВыбораКасса

КонецФункции

&НаКлиенте
Процедура ЗавершитьВыбораКассыВвестиВыемкаДенег(ЗначениеВыбораКасса)
	Если НЕ ЗначениеЗаполнено(ЗначениеВыбораКасса) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначениеВыбораКасса", ЗначениеВыбораКасса);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаЧислаВвестиВыемкаДенег", ЭтотОбъект, ДополнительныеПараметры);
	ПолучитьИнтерактивноЧисло(НСтр("ru = 'Ввод суммы выемки.'"), 0, 0, Ложь, Ложь, ОбработчикОповещения, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВыбораКассыПриОткрытииДенежногоЯщика(ЗначениеВыбораКасса)
	
	Если НЕ ЗначениеЗаполнено(ЗначениеВыбораКасса) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(ЗначениеВыбораКасса);
	ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если ИспользоватьПодключаемоеОборудование И НЕ ИспользоватьКассуККМБезПодключенияОборудования Тогда
		Оповещение = Новый ОписаниеОповещения("ЗавершитьВыбораКассыПриОткрытииДенежногоЯщикаЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьОткрытиеДенежногоЯщика(Оповещение, ЭтотОбъект, ИдентификаторУстройстваФР, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВыбораКассыПриОткрытииДенежногоЯщикаЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда  
		ЗаголовокИнформации = НСтр("ru = 'При открытии денежного ящика возникла ошибка.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДозаполнитьТаблицыОбъекта()
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьТипНоменклатурыВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьДоговорПлатежногоАгентаВТЧСервер(Объект.Товары);
	
	СтруктураПараметровЗаполненияОрганизации = Новый Структура("Магазин", Объект.Магазин);
	Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
		СтруктураПараметровЗаполненияОрганизации.Вставить("ОрганизацияПоУмолчанию", ТаблицаКассККМОрганизаций[0].Организация);
	КонецЕсли;
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьОрганизациюПродажиВТЧСервер(Объект.Товары, СтруктураПараметровЗаполненияОрганизации);
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьВидНалогаПродажиВТЧСервер(Объект.Товары, Новый Структура("Дата, Магазин", Объект.Дата, Объект.Магазин));
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьОрганизациюВСериях(Объект.Товары, Объект.Серии);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьИспользоватьСерийныеНомераВТЧСервер(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
	ЗаполнитьПредставлениеТаблоСервер();
	ЗаполнитьОстаткиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРеверсныеИменаКнопокНижнейПанели()
	
	Если РеверсКнопкиПродавец 
		И ЗначениеЗаполнено(ИмяКнопкиПродавец) Тогда
		ЗаголовокКнопки = Элементы[ИмяКнопкиПродавец].Заголовок;
		Если ЗначениеЗаполнено(Объект.Продавец) Тогда
			ЗаголовокКнопки = СтрЗаменить(ЗаголовокКнопки, НСтр("ru = 'Выбор продавца'"), НСтр("ru = 'Очистить продавца'"));
		Иначе
			ЗаголовокКнопки = СтрЗаменить(ЗаголовокКнопки, НСтр("ru = 'Очистить продавца'"), НСтр("ru = 'Выбор продавца'"));
		КонецЕсли;
		Элементы[ИмяКнопкиПродавец].Заголовок = ЗаголовокКнопки;
		Элементы[ИмяКнопкиПродавец].ТекстНевыбраннойКартинки = ЗаголовокКнопки;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Скидки

&НаКлиенте
Функция ОшибкаРасчетаСкидокПоЗаказуПокупателя()
	
	Если Объект.ПродажаПоЗаказу Тогда
		
		ЗаголовокИнформации = НСтр("ru = 'Ошибка расчета скидок.'");
		
		ТекстСообщения = НСтр("ru = 'Скидки рассчитывались в документе заказ покупателя'");
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ОшибкаРасчетаСкидокПоЗаказуПокупателя()

&НаКлиенте
Функция ОшибкаРасчетаСкидокПоДокументуРасчета()
	
	Если ЕстьТоварыВДокументеРасчета Тогда
		
		ЗаголовокИнформации = НСтр("ru = 'Ошибка расчета скидок.'");
		
		ТекстСообщения = НСтр("ru = 'Скидки рассчитывались в документе расчета'");
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ОшибкаРасчетаСкидокПоДокументуРасчета()

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидкиКлиент(ТолькоСообщенияПослеОформления = Ложь, НеВыводитьСообщения = Ложь, ПараметрыДляОплаты = Неопределено)
	
	Если НЕ ТолькоСообщенияПослеОформления 
		И (ОшибкаРасчетаСкидокПоЗаказуПокупателя()
			ИЛИ ЕстьТоварыВДокументеРасчета) Тогда
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.НазначитьАвтоматическиеСкидкиКлиент");
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                НЕ ТолькоСообщенияПослеОформления);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
	СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   ТолькоСообщенияПослеОформления);
	СтруктураПараметры.Вставить("ПорядковыйНомерПродажи",           ПорядковыйНомерПродажи);
	СтруктураПараметры.Вставить("НеВыводитьСообщения",   			НеВыводитьСообщения);
	
	Объект.Дата = ТекущаяДата();
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО.
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = "";
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	РассчитатьКонтролироватьОстаткиТоваровПриЗакрытииЧека();
	
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", КонтролироватьОстаткиТоваровПриЗакрытииЧека);
	Если ПараметрыДляОплаты <> Неопределено Тогда
		Если ПараметрыДляОплаты.Свойство("БудетОплатаБонусами") Тогда
			СтруктураПараметры.Вставить("БудетОплатаБонусами", ПараметрыДляОплаты.БудетОплатаБонусами);
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
	Если ВывестиСообщения И НЕ НеВыводитьСообщения Тогда
		Если ПараметрыДляОплаты = Неопределено Тогда
			ОписаниеОповещения = Неопределено;
		Иначе
			ПараметрыДляОплаты.Вставить("ВыведеныСообщения", Истина);
			Если ПараметрыДляОплаты.Свойство("ИмяОбработкиОповещения") Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения(ПараметрыДляОплаты.ИмяОбработкиОповещения, ЭтотОбъект, ПараметрыДляОплаты);
			Иначе
				ОписаниеОповещения = Неопределено;
			КонецЕсли;
		КонецЕсли;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресПримененныхСкидокВоВременномХранилище);
		ОткрытьФорму("ОбщаяФорма.ФормаВыводаСообщений", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
	Если ТолькоСообщенияПослеОформления Тогда
		ОбновитьФорму();
	Иначе
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		ОбновитьФорму();
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	ВывестиСообщения = Ложь;
	
	Если ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		УдалитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
	КонецЕсли;
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
	Если ПримененныеСкидки.ТаблицаСообщений.Количество() > 0 Тогда
		ВывестиСообщения = Истина;
	КонецЕсли;
	
	Если ПримененныеСкидки.Свойство("ТаблицаПодарковНаВыбор") Тогда
		ТаблицаПодарковНаВыбор = ПримененныеСкидки.ТаблицаПодарковНаВыбор;
		Если ТаблицаПодарковНаВыбор.Количество() > 0 Тогда
			ТаблицаПодарковНаВыбор.Свернуть("СкидкаНаценка, КлючСвязи, Склад");
			Для Каждого СтрокаПодарка Из ТаблицаПодарковНаВыбор Цикл
				НоваяСтрока = Объект.Подарки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодарка);
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = НЕ СтруктураПараметры.ТолькоСообщенияПослеОформления;
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийЧекККМ.Возврат
		И НЕ СтруктураПараметры.ТолькоСообщенияПослеОформления Тогда
		СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(Объект, "Товары", "СкидкиНаценки");
	КонецЕсли;
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
	
		Объект.СкидкиРассчитаны = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиСкидкиПодаркиВТоварыСервер()
	
	КоличествоТоваровДоПереноса = Объект.Товары.Количество();
	СкидкиНаценкиСерверПереопределяемый.ПеренестиСкидкиПодаркиВТовары(Объект, Объект.ЦенаВключаетНДС, Неопределено, 0, Ложь, Истина);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	Если КоличествоТоваровДоПереноса < Объект.Товары.Количество() Тогда
		ЗаполнитьОстаткиСервер();
	КонецЕсли;
	
	СтруктураПроверкиАМ = Новый Структура();
	СтруктураПроверкиАМ.Вставить("Магазин", Объект.Магазин);
	СтруктураПроверкиАМ.Вставить("Организация", Неопределено);
	СтруктураПроверкиАМ.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары, СтруктураПроверкиАМ);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаКодаМаркировки(Объект.Товары, СтруктураПроверкиАМ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Серии и подарочные сертификаты.

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ПараметрыСерийВходящие = Неопределено)
	
	Если ПараметрыСерийВходящие = Неопределено Тогда
		Результат = ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	Иначе
		Результат = ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(Объект, ПараметрыСерийВходящие, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	СуммаДоРасчета = Объект.Товары.Итог("Сумма");
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(ОБъект.Товары, Объект.ЦенаВключаетНДС);
	
	СуммаПослеРасчета = Объект.Товары.Итог("Сумма");
	УменьшениеСуммыЧекаККМ = СуммаДоРасчета - СуммаПослеРасчета;
	УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
	ЛогированиеВводаСерий(УменьшениеСуммыЧекаККМ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСерии()
	
	ВводСерийРазрешен = Истина;
	ТекстСообщения = "";
	ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий, ВводСерийРазрешен, ,Истина, ТекстСообщения);
	Если НЕ ВводСерийРазрешен Тогда
		ЗаголовокИнформации = НСтр("ru = 'Ввод серий'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	
	ОбработчикУказанияСерий = Новый ОписаниеОповещения("ОбработатьУказаниеСерий", ЭтотОбъект, ПараметрыФормыУказанияСерий);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы + "РМК", ПараметрыФормыУказанияСерий, ЭтотОбъект,,,, ОбработчикУказанияСерий, РежимБлокировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПодарочныеСертификаты(ИдентификаторСтроки, ТекущийКлючСвязи, Номенклатура, ОткрыватьРедактированиеСтроки = Ложь)
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ВводПодарочныхСертификатов");
	
	Если ПроверитьИспользованиеСерийныхНомеров(Номенклатура) Тогда

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МассивСерийныхНомеров",     ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьМассивСерийныхНомеровДляСтрокиТоваров(ТекущийКлючСвязи, Объект.СерийныеНомера));
		ПараметрыФормы.Вставить("Номенклатура"             , Номенклатура);
		ПараметрыФормы.Вставить("ПредставлениеНоменклатуры", Строка(Номенклатура));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
		ДополнительныеПараметры.Вставить("ТекущийКлючСвязи", ТекущийКлючСвязи);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаСерийныхНомеров", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВводаСерийныхНомеров", ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим); 
		ОткрыватьРедактированиеСтроки = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьИспользованиеСерийныхНомеров(Номенклатура)

	Результат          = Истина;
	ЗначениеРеквизитов = ОбщегоНазначенияРТВызовСервера.ПолучитьЗначенияРеквизитовОбъекта(Номенклатура,
			Новый Структура("ИспользоватьСерийныеНомера, ТипНоменклатуры, Представление"));

	ЗаголовокИнформации = НСтр("ru = 'Ошибка ввода номеров подарочных сертификатов'"); 
	
	Если НЕ ЗначениеРеквизитов.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат") Тогда
		Результат = Ложь;
		
		СтрокаСообщения = НСтр("ru = 'Номенклатура ""%1%"" не является подарочным сертификатом!'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ЗначениеРеквизитов.Представление);
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, СтрокаСообщения);
		
	ИначеЕсли Не ЗначениеРеквизитов.ИспользоватьСерийныеНомера Тогда
		Результат = Ложь;
		
		СтрокаСообщения = НСтр("ru = 'Для номенклатуры ""%1%"" не используются номера подарочных сертификатов!'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ЗначениеРеквизитов.Представление);
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, СтрокаСообщения);
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ДобавитьСерийныйНомер(СтрокаТЧ, ОткрыватьРедактированиеСтроки = Ложь)
	
	Если СтрокаТЧ = Неопределено Тогда
		ОткрыватьРедактированиеСтроки = Ложь;
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
		Возврат Ложь;
	ИначеЕсли НЕ СтрокаТЧ.ИспользоватьСерийныеНомера Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОткрыватьРедактированиеСтроки = Ложь;
	ДобавитьПодарочныеСертификатыВСтроку(СтрокаТЧ)
	
КонецФункции // ДобавитьСерийныйНомер()

&НаКлиенте
Процедура ДобавитьПодарочныеСертификатыВСтроку(СтрокаТЧ, ОткрыватьРедактированиеСтроки = Ложь)
	
	ИдентификаторСтроки = СтрокаТЧ.ПолучитьИдентификатор();
	
	ВвестиПодарочныеСертификаты(ИдентификаторСтроки, СтрокаТЧ.КлючСвязиСерийныхНомеров, СтрокаТЧ.Номенклатура, ОткрыватьРедактированиеСтроки);
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытьВводСерии(СтрокаТЧ, ОткрыватьРедактированиеСтроки = Ложь)

	Если СтрокаТЧ = Неопределено Тогда
		ОткрыватьРедактированиеСтроки = Ложь;
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
		Возврат Ложь;
	ИначеЕсли СтрокаТЧ.СтатусУказанияСерий = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОткрыватьРедактированиеСтроки = Ложь;
	ВвестиСерии();
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПодключаемоеОборудование

&НаКлиенте
Процедура ДобавитьНайденныеПозицииТоваровКлиент(СтруктураПараметров, Знач ОткрыватьРедактированиеСтроки = Ложь) 
	
	Если СтруктураПараметров.Свойство("Количество") Тогда 
		КоличествоУпаковок = СтруктураПараметров.Количество;
	Иначе
		КоличествоУпаковок = 1;
	КонецЕсли;
	
	ДобавитьНоменклатуруВТабЧасть(СтруктураПараметров.Номенклатура, 
								  СтруктураПараметров.Характеристика, 
								  СтруктураПараметров.Упаковка, 
								  КоличествоУпаковок, 
								  Истина,
								  ,
								  ОткрыватьРедактированиеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДисплеяПокупателяПриПростое();
	
	Если Не ЭтотОбъект.Открыта() Тогда
		Возврат;
	КонецЕсли;
		
	Если Объект.Товары.Количество() <= 0 Тогда
		ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДисплеяПокупателяОплата();
	
	Если Не ЭтотОбъект.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
	Иначе 
		ВывестиИнформациюНаДисплейПокупателя("НачалоРаботы");
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет информацию на дисплее покупателя.
//
&НаКлиенте
Процедура ОбновлениеДисплеяПокупателя(Команда, ТолькоИтоги = Ложь)
	
	Если Не ИспользоватьПодключаемоеОборудование Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Если Объект.Товары.Количество() > 0 Тогда
			ТекущаяСтрока = Объект.Товары[0];
		КонецЕсли;
	КонецЕсли;
	
	
	// Обновление информации по строке.
	Если ТекущаяСтрока = Неопределено Тогда
		СуммаТовара = 0;
	Иначе
		СуммаТовара = ТекущаяСтрока.Цена * ТекущаяСтрока.Количество;
		ИнформацияОТоваре = СокрЛП(ТекущаяСтрока.Номенклатура);
		                              
		Если НЕ ТолькоИтоги Тогда
			ДисплейПокупателяПараметры.ТоварНаименование = ИнформацияОТоваре;
			ДисплейПокупателяПараметры.ТоварЦена = Формат(ТекущаяСтрока.Цена, "ЧДЦ=2;ЧГ=;ЧН=0.00");
		КонецЕсли;
			
	КонецЕсли;
	
	// Обновление информации по суммам.
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ИспользуемоеКоличество = ?(ЗначениеЗаполнено(ТекущаяСтрока.Упаковка),ТекущаяСтрока.КоличествоУпаковок,ТекущаяСтрока.Количество);
		
		Скидка = ТекущаяСтрока.Цена * ИспользуемоеКоличество - ТекущаяСтрока.Сумма;
		
		Если (Скидка > 0.01 ИЛИ Скидка < -0.01) И Не(ТекущаяСтрока.Цена * ТекущаяСтрока.Количество = 0)Тогда
			ОбщийПроцентСкидки = Окр(100*Скидка / (ТекущаяСтрока.Цена * ИспользуемоеКоличество),2,1);
			
			ПредставлениеСкидки = ?(Скидка > 0," - " + ФорматСуммКлиент(Скидка, "","0,00")
									," + "+ ФорматСуммКлиент(-Скидка, "","0,00"));
			ПредставлениеСкидки = ПредставлениеСкидки + " ( "+Строка(ОбщийПроцентСкидки)+"% ) ";
		КонецЕсли;
		
		Если НЕ ТолькоИтоги Тогда
			ДисплейПокупателяПараметры.ТоварКоличество = ИспользуемоеКоличество;
			ДисплейПокупателяПараметры.ТоварСумма = Формат(ТекущаяСтрока.Сумма, "ЧДЦ=2;ЧГ=;ЧН=0.00");
			ДисплейПокупателяПараметры.ТоварСкидка = ПредставлениеСкидки;
		КонецЕсли;
	
	КонецЕсли;
	
	ДисплейПокупателяПараметры.СуммаВсего  = Формат(СуммаВсего, "ЧДЦ=2;ЧГ=;ЧН=0.00");
	ДисплейПокупателяПараметры.СуммаСкидки = Формат(СуммаСкидки, "ЧДЦ=2;ЧГ=");
	
	ВывестиИнформациюНаДисплейПокупателя(Команда);
	
КонецПроцедуры

// Процедура осуществляет вывод информации на дисплей покупателя по команде.
//
&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя(Команда)

	Если Не ИспользоватьПодключаемоеОборудование Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаборПравИНастроек.ШаблонРаботыДисплеяПокупателя) Тогда
		ВыводитьИтоги = Ложь;
		ТекстПриПростое = НСтр("ru = 'ДОБРО ПОЖАЛОВАТЬ!'");
		ТекстВНерабочемСостоянии = НСтр("ru = 'КАССА НЕ РАБОТАЕТ'");
	Иначе
		ВыводитьИтоги = НаборПравИНастроек.ВыводитьПромИтогНаДисплей;
		ТекстПриПростое = НаборПравИНастроек.ТекстПриПростое;
		ТекстВНерабочемСостоянии = НаборПравИНастроек.ТекстВНерабочемСостоянии;
	КонецЕсли;
	
	Строка1 = "";
	Строка2 = "";
	ВыровнятьВПраво = Ложь;
	
	Если Команда = "НачалоРаботы" Тогда
		Строка1 = ТекстПриПростое;
		
	ИначеЕсли Команда = "Оплата" Тогда
		Строка1 = НСтр("ru = 'ВНЕСЕНО:'") + " " + ДисплейПокупателяПараметры.Оплата;
		Строка2 = НСтр("ru = '  СДАЧА:'") + " " + ДисплейПокупателяПараметры.Сдача;
	ИначеЕсли Команда = "ОжиданиеОплаты" Тогда
		
		ДисплейПокупателяПараметры.СуммаВсего  = Формат(СуммаВсего, "ЧДЦ=2;ЧГ=;ЧН=0.00");
		ДисплейПокупателяПараметры.СуммаСкидки = Формат(СуммаСкидки, "ЧДЦ=2;ЧГ=");
		
		Если ПустаяСтрока(ДисплейПокупателяПараметры.СуммаСкидки) Тогда
			Строка1 = НСтр("ru = '  ИТОГО:'") + " " + ДисплейПокупателяПараметры.СуммаВсего;
		Иначе
			Строка1 = НСтр("ru = '  ИТОГО:'") + " " + ДисплейПокупателяПараметры.СуммаВсего;
			Строка2 = НСтр("ru = ' СКИДКА:'") + " " + ДисплейПокупателяПараметры.СуммаСкидки;
		КонецЕсли;
		
	ИначеЕсли Команда = "ОтменаОплаты" Тогда
		Строка1 = НСтр("ru = 'ОТМЕНА ОПЛАТЫ'");
		
	ИначеЕсли Команда = "ДобавлениеТовара" 
		ИЛИ Команда = "УдалениеТовара" 
		ИЛИ Команда = "ИзмененияКоличества" 
		ИЛИ Команда = "ИзмененияЦены" Тогда
		
		ИнформацияНаименование = ДисплейПокупателяПараметры.ТоварНаименование;
		
		Если ВыводитьИтоги Тогда
			
			Если Команда = "УдалениеТовара" Тогда
				Строка1 = НСтр("ru = 'СТОРНО:'") + " ";
			Иначе
				Строка1 = НСтр("ru = '  ЦЕНА:'") + " ";
			КонецЕсли;
			
			Если НЕ ДисплейПокупателяПараметры.ТоварКоличество = 1 ИЛИ  Команда = "ИзмененияКоличества" ИЛИ Команда = "УдалениеТовара" Тогда
				Строка1 =  Строка1 + Строка(ДисплейПокупателяПараметры.ТоварКоличество) + "x";
			КонецЕсли;
			
			Строка1 = Строка1 + Строка(ДисплейПокупателяПараметры.ТоварЦена);
			Строка2 = НСтр("ru = ' ИТОГО:'") + " " + ДисплейПокупателяПараметры.СуммаВсего;
			
		Иначе
			
			ВыровнятьВПраво = Истина;
			Строка1 = Строка(ДисплейПокупателяПараметры.ТоварНаименование);
			Строка2 = Строка(ДисплейПокупателяПараметры.ТоварЦена);
			Если Не ПустаяСтрока(Строка1) Тогда
				Если НЕ ДисплейПокупателяПараметры.ТоварКоличество = 1 ИЛИ Команда = "ИзмененияКоличества" ИЛИ Команда = "УдалениеТовара" Тогда
					Строка2 = Строка(ДисплейПокупателяПараметры.ТоварКоличество) + "x" + Строка2 +  "=" +  Строка(ДисплейПокупателяПараметры.ТоварСумма);
				КонецЕсли;
				Если Команда = "УдалениеТовара" Тогда
					Строка2 = "-" + Строка2;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Команда = "Аннулирование" Тогда
		Строка1 = НСтр("ru = 'ЧЕК АННУЛИРОВАН'");
		
	ИначеЕсли Команда = "ОтложитьЧек" Тогда
		Строка1 = НСтр("ru = 'ЧЕК ОТЛОЖЕН'");
	
	ИначеЕсли Команда = "ВозвратТовара" Тогда
		Строка1 = НСтр("ru = 'ВОЗВРАТ ТОВАРА'");
		 
	 ИначеЕсли Команда = "Сервис" Тогда
		Строка1 = ТекстВНерабочемСостоянии;
	
	КонецЕсли;
	
	Описание = Новый ОписаниеОповещения("ВывестиИнформациюНаДисплейПокупателяЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьВыводИнформацииНаДисплейПокупателя(Описание,,, Строка1 + Символы.ПС + Строка2);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателяЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ЗаголовокИнформации = НСтр("ru = 'При использовании дисплея покупателя произошла ошибка.'"); 
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры 

// Конец ПодключаемоеОборудование

////////////////////////////////////////////////////////////////////////////////////////
// Информационные карты

// Процедура осуществляет обработку считывания информационной карты.
//
&НаКлиенте
Процедура ДисконтнаяКартаПриИзменении()
	
	ТекстСообщенияСменыКарты = "";
	ПриИзмененииДисконтнаяКартаСервер(ТекстСообщенияСменыКарты);
	Если ПустаяСтрока(ТекстСообщенияСменыКарты) Тогда
		ПровестиОпрос();
	Иначе
		ЗаголовокИнформации = "";
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщенияСменыКарты);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДисконтнаяКартаСервер(ТекстСообщенияСменыКарты)
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат
		И ЗначениеЗаполнено(Объект.ЧекККМПродажа) Тогда
		
		ДисконтнаяКартаВозврата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЧекККМПродажа, "ДисконтнаяКарта"); 
		Если ДисконтнаяКартаВозврата <> Объект.ДисконтнаяКарта Тогда
			Объект.ДисконтнаяКарта = ДисконтнаяКартаВозврата;
			ТекстСообщенияСменыКарты = НСтр("ru = 'Изменение дисконтной карты при возврате не допускается'");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СменитьВладельцаКарты();
	
	ОтменитьСкидки();
	ОтменитьОплатуБонусами();
	ПродажиСервер.ЗаполнитьКонтрагентаПоДисконтнойКарте(Объект, Объект.ДисконтнаяКарта);
	
КонецПроцедуры

&НаСервере
Процедура СменитьВладельцаКарты()
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		ВладелецКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДисконтнаяКарта, "ВладелецКарты");
		Если Объект.ВладелецДисконтнойКарты <> ВладелецКарты Тогда
			Объект.ВладелецДисконтнойКарты = ВладелецКарты;
		КонецЕсли;
	Иначе
		Объект.ВладелецДисконтнойКарты = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиОпрос()
	
	Если ИспользоватьНастройкуРМК И НаборПравИНастроек.ПроводитьОпросВладельцаКарты Тогда
		ИнформационныеКартыКлиент.ПровестиОпросВладельца(Объект.ДисконтнаяКарта, ТекущаяДата());
	ИначеЕсли ИнформационныеКартыВызовСервера.НеобходимостьОпросаВладельца(Объект.ДисконтнаяКарта, ТекущаяДата()) Тогда
		
		ТекстСообщения = НСтр("ru = 'Необходимо выдать покупателю анкету владельца дисконтной карты'"); 
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ТекстСообщения);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПравСервер()
	
	Пользователь = ОбщегоНазначенияРТКлиентСервер.ПользовательСУчетомИзмененныхПрав();
	ПродавецПоУмолчанию = ЗначениеНастроекПовтИсп.ПолучитьПродавцаПользователяПоУмолчанию(Пользователь);
	Объект.Продавец = ПродавецПоУмолчанию;
	
	ЗаполнитьНаборПравИНастроек();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////
// Оплата, проверки, подарки

&НаСервере
Процедура ПроверитьКассовыеСмены(Отказ, ПараметрыИнформации)
	
	ДоступныеКассыККМ = ТаблицаКассККМОрганизаций.Выгрузить().ВыгрузитьКолонку("КассаККМ");
	
	Для каждого ПроверяемаяКасса Из ДоступныеКассыККМ Цикл
	
		СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(ПроверяемаяКасса);
		
		КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		
		ТекстОшибки = НСтр("ru='Кассовая смена не открыта!'");
		Если НЕ РозничныеПродажиСервер.СменаОткрыта(КассоваяСмена, ТекущаяДатаСеанса(), ТекстОшибки) Тогда
			
			ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
			
			ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Касса ККМ: %1 -'") + " ",
				ПроверяемаяКасса
			);
			
			ПараметрыИнформации.ЗаголовокИнформации = ТекстЗаголовка;
			ПараметрыИнформации.ТекстИнформации     = ТекстОшибки;
			Отказ = Истина;
			
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Предварительная проверка остатков товаров и серийных сертификатов.
//
// Параметры:
//  Отказ - Булево
//
&НаСервере
Процедура ПроверитьНаличииТоваровИСерийныхСертификатов(Отказ, ПараметрыИнформации)

	Если НЕ КонтролироватьОстаткиТоваровПриЗакрытииЧека Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка остатков товаров
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Резервировать КАК БУЛЕВО) КАК Резервировать,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Склад КАК Справочник.Склады) КАК Склад
	|ПОМЕСТИТЬ ДокТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаПодарки.СкидкаНаценка КАК Справочник.СкидкиНаценки) КАК СкидкаНаценка,
	|	ВЫРАЗИТЬ(ТаблицаПодарки.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаПодарки.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаПодарки.Количество КАК ЧИСЛО(15, 3)) КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаПодарки.Склад КАК Справочник.Склады) КАК Склад,
	|	ЛОЖЬ КАК Резервировать
	|ПОМЕСТИТЬ ДокПодарки
	|ИЗ
	|	&ТаблицаПодарки КАК ТаблицаПодарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокТовары.Номенклатура,
	|	ДокТовары.Характеристика,
	|	ДокТовары.Количество КАК Количество,
	|	ДокТовары.Склад,
	|	ДокТовары.Резервировать
	|ПОМЕСТИТЬ ДокТоварыПодарки
	|ИЗ
	|	ДокТовары КАК ДокТовары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокПодарки.Номенклатура,
	|	ДокПодарки.Характеристика,
	|	ДокПодарки.Количество,
	|	ДокПодарки.Склад,
	|	ДокПодарки.Резервировать
	|ИЗ
	|	ДокПодарки КАК ДокПодарки
	|ГДЕ
	|	НЕ ДокПодарки.СкидкаНаценка.ПодарокИзСписка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокТоварыПодарки.Номенклатура,
	|	ДокТоварыПодарки.Характеристика,
	|	СУММА(ДокТоварыПодарки.Количество) КАК Количество,
	|	ДокТоварыПодарки.Склад,
	|	ДокТоварыПодарки.Резервировать
	|ПОМЕСТИТЬ ДокТоварыБезЛишнего
	|ИЗ
	|	ДокТоварыПодарки КАК ДокТоварыПодарки
	|ГДЕ
	|	ДокТоварыПодарки.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И НЕ ДокТоварыПодарки.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И НЕ ДокТоварыПодарки.Номенклатура.ИспользоватьСерийныеНомера
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокТоварыПодарки.Номенклатура,
	|	ДокТоварыПодарки.Характеристика,
	|	ДокТоварыПодарки.Склад,
	|	ДокТоварыПодарки.Резервировать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыНаСкладахОстатки.Склад КАК Склад,
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ТоварыНаСкладахОстатки.РезервОстаток КАК РезервОстаток
	|ПОМЕСТИТЬ ТаблицаОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Склад) В
	|				(ВЫБРАТЬ
	|					ДокТоварыБезЛишнего.Номенклатура,
	|					ДокТоварыБезЛишнего.Характеристика,
	|					ДокТоварыБезЛишнего.Склад
	|				ИЗ
	|					ДокТоварыБезЛишнего КАК ДокТоварыБезЛишнего)) КАК ТоварыНаСкладахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокТоварыБезЛишнего.Номенклатура,
	|	ДокТоварыБезЛишнего.Характеристика,
	|	ДокТоварыБезЛишнего.Количество,
	|	ДокТоварыБезЛишнего.Склад,
	|	ЕСТЬNULL(ТаблицаОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ДокТоварыБезЛишнего.Количество - ВЫБОР
	|		КОГДА ДокТоварыБезЛишнего.Резервировать
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ * (ЕСТЬNULL(ТаблицаОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТаблицаОстатки.РезервОстаток, 0)) КАК НедостающееКоличество,
	|	ДокТоварыБезЛишнего.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	ДокТоварыБезЛишнего КАК ДокТоварыБезЛишнего
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатки КАК ТаблицаОстатки
	|		ПО ДокТоварыБезЛишнего.Номенклатура = ТаблицаОстатки.Номенклатура
	|			И ДокТоварыБезЛишнего.Характеристика = ТаблицаОстатки.Характеристика
	|			И ДокТоварыБезЛишнего.Склад = ТаблицаОстатки.Склад
	|ГДЕ
	|	ДокТоварыБезЛишнего.Количество > ЕСТЬNULL(ТаблицаОстатки.КоличествоОстаток, 0) - ВЫБОР
	|			КОГДА ДокТоварыБезЛишнего.Резервировать
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ * ЕСТЬNULL(ТаблицаОстатки.РезервОстаток, 0)";

	ТаблицаТоваров  = Объект.Товары.Выгрузить(, "Номенклатура, Характеристика, Количество, Склад, Резервировать");
	ТаблицаПодарков = Объект.Подарки.Выгрузить();
	
	Запрос.УстановитьПараметр("ТаблицаТовары" , ТаблицаТоваров);
	Запрос.УстановитьПараметр("ТаблицаПодарки", ТаблицаПодарков);
	
	ТаблицаПоОтрицательнымОстаткам = Запрос.Выполнить().Выгрузить();
	
	ТекстСообщения = "";
	
	ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Отрицательные остатки'");
	
	ШаблонСообщения = НСтр("ru = '%5 %1 
		|Превышен остаток на складе %2 на %3 %4'");
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРезервированиеПоЗаказамПокупателей") Тогда
		ШаблонСообщения = НСтр("ru = '%5 %1 
			|Превышен сводобный остаток на складе %2 на %3 %4'");
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаПоОтрицательнымОстаткам Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура"  , СтрокаТаблицы.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
		
		Если ТаблицаТоваров.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
			Если ТаблицаПодарков.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
				СтрокаПозиции = НСтр("ru = 'Номенклатура и подарок'");
			Иначе
				СтрокаПозиции = НСтр("ru = 'Номенклатура'");
			КонецЕсли;
		Иначе
			СтрокаПозиции = НСтр("ru = 'Подарок'");
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщения + ?(Отказ, Символы.ПС, "") + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ФормированиеПечатныхФормСервер.ПолучитьПредставлениеНоменклатурыДляПечати(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика),
			Строка(СтрокаТаблицы.Склад),
			Строка(СтрокаТаблицы.НедостающееКоличество),
			Строка(СтрокаТаблицы.ЕдиницаИзмерения),
			СтрокаПозиции);
		
		Отказ = Истина;
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПопыткиПродажПревышающихОстаток") 
		И ТаблицаПоОтрицательнымОстаткам.Количество() > 0 Тогда
		
		ДатаПродажи = ТекущаяДатаСеанса();
		
		ТаблицаПоОтрицательнымОстаткам.Колонки.Добавить("ДатаПродажи", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		ТаблицаПоОтрицательнымОстаткам.ЗаполнитьЗначения(НачалоДня(ДатаПродажи),"ДатаПродажи");
		
		ПродажиСервер.ОтразитьПопыткиПродаж(ТаблицаПоОтрицательнымОстаткам, ДатаПродажи);
		
	КонецЕсли;
	
	// Проверка остатка серийных номеров.
	
	МаркетинговыеАкцииСерверПривилегированный.ПроверитьОстаткиСерийныхНомеров(
		Объект.Товары.Выгрузить(, "Номенклатура, КлючСвязиСерийныхНомеров, Склад"), 
		Объект.СерийныеНомера.Выгрузить(),
		Отказ,
		ТекстСообщения);
	
	Если Объект.ПродажаПоЗаказу Тогда
	
		РозничныеПродажиСервер.ПроверитьОстаткиЗаказовПокупателей(
			Объект.Товары.Выгрузить(,"Номенклатура, Характеристика, Количество, ЗаказПокупателя, КодСтроки"), 
			Объект.ЗаказПокупателя,
			Отказ,
			ТекстСообщения);
	
	КонецЕсли;
	
	ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьПровестиОплатуПоВозвратуЧекККМСервер(Отказ, СтрокаОшибки)
	
	ПродажиСервер.ПроверитьВозможностьПровестиОплатуПоВозвратуЧекККМ(
			Объект,
			Отказ, 
			СтрокаОшибки,
			Истина
	);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеТабличнойЧасти(Отказ, ПараметрыИнформации, ОплатаТолькоНаличными)
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Количество,
	|	Товары.Сумма,
	|	Товары.НомерСтроки,
	|	Товары.Склад
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.НомерСтроки,
	|	ТаблицаВЗапросе.Номенклатура,
	|	ТаблицаВЗапросе.Характеристика,
	|	ТаблицаВЗапросе.Количество,
	|	ТаблицаВЗапросе.Сумма,
	|	ТаблицаВЗапросе.Склад,
	|	ВЫБОР
	|		КОГДА ТаблицаВЗапросе.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаНоменклатуры,
	|	ВЫБОР
	|		КОГДА (ТаблицаВЗапросе.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры)
	|				ИЛИ ТаблицаВЗапросе.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ОбщиеДляВидаНоменклатуры))
	|				И ТаблицаВЗапросе.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаХарактеристики,
	|	ВЫБОР
	|		КОГДА ТаблицаВЗапросе.Количество = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаКоличество,
	|	ВЫБОР
	|		КОГДА ТаблицаВЗапросе.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) И (ТаблицаВЗапросе.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаСклада
	|ПОМЕСТИТЬ ТаблицаСОшибками
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСОшибками.Номенклатура,
	|	ТаблицаСОшибками.Характеристика,
	|	ТаблицаСОшибками.Количество,
	|	ТаблицаСОшибками.Сумма,
	|	ТаблицаСОшибками.НомерСтроки,
	|	ТаблицаСОшибками.ОшибкаНоменклатуры,
	|	ТаблицаСОшибками.ОшибкаХарактеристики,
	|	ТаблицаСОшибками.ОшибкаКоличество,
	|	ТаблицаСОшибками.Склад,
	|	ТаблицаСОшибками.ОшибкаСклада
	|ИЗ
	|	ТаблицаСОшибками КАК ТаблицаСОшибками
	|ГДЕ
	|	(ТаблицаСОшибками.ОшибкаНоменклатуры
	|			ИЛИ ТаблицаСОшибками.ОшибкаХарактеристики
	|			ИЛИ ТаблицаСОшибками.ОшибкаКоличество
	|			ИЛИ ТаблицаСОшибками.ОшибкаСклада)";
	
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		Отказ = Истина;
		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Есть ошибки заполнения табличной части'");
		ПараметрыИнформации.ТекстИнформации     = "";
		Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
			
			Если СтрокаТаблицы.ОшибкаНоменклатуры Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В строке №%1 табличной части не заполнена номенклатура'"),
					СтрокаТаблицы.НомерСтроки
				);
				
				ПараметрыИнформации.ТекстИнформации = ПараметрыИнформации.ТекстИнформации + Символы.ПС + Текст;
			ИначеЕсли СтрокаТаблицы.ОшибкаХарактеристики Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В строке №%1 табличной части не заполнена характеристика'"),
					СтрокаТаблицы.НомерСтроки
				);
				
				ПараметрыИнформации.ТекстИнформации = ПараметрыИнформации.ТекстИнформации + Символы.ПС + Текст;
			ИначеЕсли СтрокаТаблицы.ОшибкаСклада Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В строке №%1 табличной части не смогли заполнить склад'"),
					СтрокаТаблицы.НомерСтроки
				);
				
				ПараметрыИнформации.ТекстИнформации = ПараметрыИнформации.ТекстИнформации + Символы.ПС + Текст;
			ИначеЕсли СтрокаТаблицы.ОшибкаКоличество Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В строке №%1 табличной части не заполнено количество'"),
					СтрокаТаблицы.НомерСтроки
				);
				
				ПараметрыИнформации.ТекстИнформации = ПараметрыИнформации.ТекстИнформации + Символы.ПС + Текст;
			КонецЕсли;
		КонецЦикла;
	Иначе
		
		СтрокаОшибки = "";
		
		МаркетинговыеАкцииСервер.ПроверитьЗаполнениеТабличнойЧастиСерийныеНомера(
			Объект,
			"Товары",
			"СерийныеНомера",
			Отказ,
			СтрокаОшибки,
			Истина
		);
		
		Если Отказ Тогда
			ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Есть ошибки заполнения табличной части'");
			ПараметрыИнформации.ТекстИнформации = СтрокаОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОшибки = "";
	
	ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(Объект.Организация, Объект.Магазин);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		МаркетинговыеАкцииСервер.ПроверитьЧтоНетПодарочныхСертификатов(
			Объект,
			"Товары",
			Отказ, 
			СтрокаОшибки,
			Истина
		);
		
		
		Если ЭтоВозвратДеньВДень() Тогда 
			ОтдельноПроверитьВозможностьОплатыТолькоНаличными = ОплатаТолькоНаличными;
			ОтдельноПроверитьВозможностьОплатыБанковскойКартой = НЕ ОплатаТолькоНаличными;
		Иначе
			ОтдельноПроверитьВозможностьОплатыТолькоНаличными = Ложь;
			ОтдельноПроверитьВозможностьОплатыБанковскойКартой = Ложь;
		КонецЕсли;
		
		ПродажиСервер.ПроверитьВозможностьВозвратаПоЧекуККМ(
			Объект,
			Отказ, 
			СтрокаОшибки,
			Истина,
			ОтдельноПроверитьВозможностьОплатыТолькоНаличными,
			ОтдельноПроверитьВозможностьОплатыБанковскойКартой,
			ИспользуетсяРегистрацияРозничныхПродажВЕГАИС
		);
			
		Если Отказ Тогда
			ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка возврат товара'");
			ПараметрыИнформации.ТекстИнформации = СтрокаОшибки;
			Возврат;
		КонецЕсли;
	Иначе
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		СтруктураДокумента = Новый Структура;
		СтруктураДокумента.Вставить("ДокументОбъект", Объект);
		СтруктураДокумента.Вставить("ЭтоДокумент", Ложь);
		СтруктураДокумента.Вставить("ЭтоНовый", Истина);
		СтруктураДокумента.Вставить("ИмяТабличнойЧасти", "Товары");
		СтруктураДокумента.Вставить("ТаблицаЗначений_Товары", Объект.Товары.Выгрузить());
		СтруктураДокумента.Вставить("ТаблицаЗначений_СерийныеНомера", Объект.СерийныеНомера.Выгрузить());
		
		Если НЕ Объект.ОперацияСДенежнымиСредствами Тогда
			МаркетинговыеАкцииСерверПривилегированный.ПроверитьДвиженияСерийныхНомеров(
				СтруктураДокумента,
				Отказ,
				СтрокаОшибки,
				ТекущаяДатаСеанса);
		КонецЕсли;
		
		МаркетинговыеАкцииСерверПривилегированный.ПроверитьОкончаниеАбсолютныхСроковДействияСертификатов(
			СтруктураДокумента,
			Отказ,
			СтрокаОшибки,
			ТекущаяДатаСеанса);
		
		Если Отказ Тогда
			ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибки подарочных сертификатов'");
			ПараметрыИнформации.ТекстИнформации = СтрокаОшибки;
			Возврат;
		КонецЕсли;
		
		Если НЕ Объект.ПродажаПоЗаказу Тогда
			АссортиментСервер.ПроверитьАссортиментТаблицыТоваровДокументаПродажи(
				Объект,
				Отказ,
				Ложь,
				СтрокаОшибки,
				ТекущаяДатаСеанса);
		КонецЕсли;
		
		СкидкиНаценкиСерверПереопределяемый.ПроверитьЗапретРозничнойПродажиТаблицыТоваров(
			Объект,
			"Товары",
			Отказ,
			СтрокаОшибки,
			ТекущаяДатаСеанса,
			Ложь
		);
		
		Если Объект.АкцизныеМарки.Количество() > 0 Тогда
			СтруктураДляПроверки = ПродажиСервер.СтруктураДляПроверкиАкцизныхМарок();
			СтруктураДляПроверки.Объект 			= Объект;
			СтруктураДляПроверки.ИмяТаблицыТоваров 	= "АкцизныеМарки";
			СтруктураДляПроверки.Отказ 				= Отказ;
			СтруктураДляПроверки.ИтоговоеСообщение 	= СтрокаОшибки;
			СтруктураДляПроверки.ДатаРасчета 		= ТекущаяДатаСеанса;
			СтруктураДляПроверки.Сообщать 			= Ложь;
			СтруктураДляПроверки.ОрганизацияЕГАИС 	= ЭтотОбъект.ОрганизацияЕГАИС;
			
			ПродажиСервер.ПроверитьАкцизныеМаркиПередЗаписьюЧека(СтруктураДляПроверки);
			
			Если СтруктураДляПроверки.Отказ Тогда 
				Отказ = Истина;
				СтрокаОшибки = СтруктураДляПроверки.ИтоговоеСообщение;
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибки проверки запрета продаж'");
			ПараметрыИнформации.ТекстИнформации = СтрокаОшибки;
			Возврат;
		КонецЕсли;
		
		// Проверка на остатки по товарам и сертификатам.
		ПроверитьНаличииТоваровИСерийныхСертификатов(Отказ, ПараметрыИнформации);
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ИспользуетсяТабачнаяМаркировка = ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиТабачнойПродукции");
		ИспользуетсяОбувнаяМаркировка  = ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиОбувнойПродукции");
		Если НЕ Объект.ОперацияСДенежнымиСредствами
			И (ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Или ИспользуетсяТабачнаяМаркировка Или ИспользуетсяОбувнаяМаркировка) Тогда
			ДанныеЕГАИСДостаточны = Истина;
			ТекстПолногоСообщения = "";
			ПродажиСервер.ПодготовкаДанныхДляПробитияЧекаККМ(Объект, ДанныеЕГАИСДостаточны, Истина, ТекстПолногоСообщения);
			Если НЕ ДанныеЕГАИСДостаточны Тогда
				Отказ = Истина;
				ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибки маркировки'");
				ПараметрыИнформации.ТекстИнформации = ТекстПолногоСообщения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		СтрокаОшибки = "";
		ОбработкаТабличнойЧастиТоварыСервер.ПроверитьЗаполнениеСерий(
			Объект,
			Документы.ЧекККМ.ПараметрыУказанияСерий(Объект),
			Отказ,
			,
			Ложь,
			СтрокаОшибки);
		
		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибки серий'");
		ПараметрыИнформации.ТекстИнформации = СтрокаОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВозможносьОперацииВыемкиДенежныхСредств(ПараметрыВыполнения, ПараметрыИнформации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДенежныеСредстваККМОстатки.КассаККМ КАК КассаККМ,
	|	ДенежныеСредстваККМОстатки.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	ДенежныеСредстваККМОстатки.СуммаОстаток - &ИзымаемаяСумма КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваККМ.Остатки(
	|			,
	|			КассаККМ = &КассаККМ
	|				И ДоговорПлатежногоАгента = &ДоговорПлатежногоАгента) КАК ДенежныеСредстваККМОстатки
	|ГДЕ
	|	ДенежныеСредстваККМОстатки.СуммаОстаток - &ИзымаемаяСумма < 0";
	
	Запрос.УстановитьПараметр("КассаККМ", ПараметрыВыполнения.КассаККМ);
	Запрос.УстановитьПараметр("ИзымаемаяСумма", ПараметрыВыполнения.ИзымаемаяСумма);
	Запрос.УстановитьПараметр("ДоговорПлатежногоАгента", ПараметрыВыполнения.ДополнительныеПараметры.ДоговорПлатежногоАгента);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ИспользоватьАгентскиеПлатежиИРазделениеВыручки Тогда
			ШаблонСообщения = НСтр("ru = 'Превышен на %1 руб. остаток денежных средств в кассе ККМ ""%2"" по типу выручки ""%3""'");
			ТипВыручки = Выборка.ДоговорПлатежногоАгента;
			Если ТипВыручки = Справочники.ДоговорыПлатежныхАгентов.ПустаяСсылка() Тогда
				ТипВыручки = НСтр("ru = 'Собственные средства'");
			КонецЕсли;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								- Выборка.СуммаОстаток,
								Выборка.КассаККМ,
								ТипВыручки);
		Иначе
			ШаблонСообщения = НСтр("ru = 'Превышен на %1 руб. остаток денежных средств в кассе ККМ ""%2""'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								- Выборка.СуммаОстаток,
								Выборка.КассаККМ);
		КонецЕсли;
		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка выемки денег'");
		ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Предварительное разбиваем набор товаров на чеки.
//
// Параметры;
//  Нет
//
&НаСервере
Процедура ЗаполнитьТаблицуЧеков()
	
	ТабличноеПолеЧеков.Очистить();
	
	Если ТаблицаКассККМОрганизаций.Количество() = 1
		И ТаблицаКассККМОрганизаций[0].ТипОборудования <> Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		
		СтрокаТаблицыЧеков = ТабличноеПолеЧеков.Добавить();
		СтрокаТаблицыЧеков.Организация = ТаблицаКассККМОрганизаций[0].Организация;
		СтрокаТаблицыЧеков.Сумма       = Объект.Товары.Итог("СуммаВсего");
		СтрокаТаблицыЧеков.КассаККМ    = ТаблицаКассККМОрганизаций[0].КассаККМ;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат И НЕ ЕстьПередачаОФД Тогда
		
		СтрокаТаблицыЧеков = ТабличноеПолеЧеков.Добавить();
		СтрокаТаблицыЧеков.Организация = Объект.Организация;
		СтрокаТаблицыЧеков.Сумма       = Объект.Товары.Итог("СуммаВсего");
		СтрокаТаблицыЧеков.ДоговорПлатежногоАгента = Объект.ДоговорПлатежногоАгента;
		СтрокаТаблицыЧеков.ВидНалога   = Объект.ВидНалога;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Организация", СтрокаТаблицыЧеков.Организация);
		
		СтрокиКассККМОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(СтруктураПоиска);
		Если СтрокиКассККМОрганизации.Количество() > 0  Тогда
			СтрокаТаблицыЧеков.КассаККМ = СтрокиКассККМОрганизации[0].КассаККМ;
		КонецЕсли;
		
	ИначеЕсли Объект.ОперацияСДенежнымиСредствами 
		И Объект.Товары.Количество() = 0 
		И Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		
		СтрокаТаблицыЧеков = ТабличноеПолеЧеков.Добавить();
		СтрокаТаблицыЧеков.Организация = ТаблицаКассККМОрганизаций[0].Организация;
		СтрокаТаблицыЧеков.Сумма       = СуммаОстаткаДокументаРасчета;
		СтрокаТаблицыЧеков.ДоговорПлатежногоАгента = Объект.ДоговорПлатежногоАгента;
		СтрокаТаблицыЧеков.ВидНалога   = Объект.ВидНалога;
		КассаККМСтрокиТаблицыЧеков     = ТаблицаКассККМОрганизаций[0].КассаККМ;
		
		СтрокаТаблицыЧеков.ВидНалога = ПодключаемоеОборудованиеРТ.ВидНалогаПоОрганизацииИСкладу(ТекущаяДатаСеанса(),
																								 СтрокаТаблицыЧеков.Организация,
																								  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КассаККМСтрокиТаблицыЧеков.Магазин, "СкладПродажи"));
		
		СтрокаТаблицыЧеков.КассаККМ = КассаККМСтрокиТаблицыЧеков;
		
		Объект.Организация = СтрокаТаблицыЧеков.Организация;
		
	ИначеЕсли Объект.ОперацияСДенежнымиСредствами 
			И Объект.Товары.Количество() = 0 
			И (НЕ ЗначениеЗаполнено(Объект.ДокументРасчета)
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат) Тогда
			
		СтрокаТаблицыЧеков = ТабличноеПолеЧеков.Добавить();
		СтрокаТаблицыЧеков.Организация = ТаблицаКассККМОрганизаций[0].Организация;
		СтрокаТаблицыЧеков.Сумма       = 0;
		СтрокаТаблицыЧеков.ДоговорПлатежногоАгента = Объект.ДоговорПлатежногоАгента;
		СтрокаТаблицыЧеков.ВидНалога   = Объект.ВидНалога;
		КассаККМСтрокиТаблицыЧеков = ТаблицаКассККМОрганизаций[0].КассаККМ;
		
		СтрокаТаблицыЧеков.ВидНалога = ПодключаемоеОборудованиеРТ.ВидНалогаПоОрганизацииИСкладу(ТекущаяДатаСеанса(),
																								 СтрокаТаблицыЧеков.Организация,
																								  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КассаККМСтрокиТаблицыЧеков.Магазин, "СкладПродажи"));
		
		СтрокаТаблицыЧеков.КассаККМ    = КассаККМСтрокиТаблицыЧеков;
		
		Объект.Организация = СтрокаТаблицыЧеков.Организация;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаКассККМОрганизаций.КассаККМ,
		|	ТаблицаКассККМОрганизаций.Организация,
		|	ТаблицаКассККМОрганизаций.ТипОборудования
		|ПОМЕСТИТЬ ТаблицаКассККМОрганизаций
		|ИЗ
		|	&ТаблицаКассККМОрганизаций КАК ТаблицаКассККМОрганизаций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыОсобыхНалогов.Организация КАК Организация,
		|	ВидыОсобыхНалогов.Склад КАК Склад,
		|	ВидыОсобыхНалогов.ВидНалога КАК ВидНалога
		|ПОМЕСТИТЬ ВидыОсобыхНалогов
		|ИЗ
		|	&ВидыОсобыхНалогов КАК ВидыОсобыхНалогов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыОсобыхНалогов.Организация КАК Организация,
		|	ВидыОсобыхНалогов.Склад КАК Склад,
		|	ВидыОсобыхНалогов.ВидНалога КАК ВидНалога
		|ПОМЕСТИТЬ ВидыОсобыхНалоговПоУмолчанию
		|ИЗ
		|	&ВидыОсобыхНалогов КАК ВидыОсобыхНалогов
		|ГДЕ
		|	ВидыОсобыхНалогов.Организация = ВЫРАЗИТЬ(&СкладПродажиПоУмолчанию КАК Справочник.Склады).Организация
		|	И ВидыОсобыхНалогов.Склад = &СкладПродажиПоУмолчанию
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыОсобыхНалоговУслуг.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|	ВидыОсобыхНалоговУслуг.ВидНалога КАК ВидНалога
		|ПОМЕСТИТЬ ВидыОсобыхНалоговУслуг
		|ИЗ
		|	&ВидыОсобыхНалоговУслуг КАК ВидыОсобыхНалоговУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.СуммаВсего,
		|	ВЫРАЗИТЬ(Товары.Организация КАК Справочник.Организации) КАК Организация,
		|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	Товары.Склад КАК Склад,
		|	Товары.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента
		|ПОМЕСТИТЬ ТаблицаВЗапросе
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВЗапросе.Организация КАК Организация,
		|	СУММА(ТаблицаВЗапросе.СуммаВсего) КАК Сумма,
		|	ТаблицаКассККМОрганизаций.КассаККМ КАК КассаККМ,
		|	ВЫБОР
		|		КОГДА ТаблицаКассККМОрганизаций.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККТ)
		|			ТОГДА ТаблицаВЗапросе.ДоговорПлатежногоАгента
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыПлатежныхАгентов.ПустаяСсылка)
		|	КОНЕЦ КАК ДоговорПлатежногоАгента,
		|	ВЫБОР
		|		КОГДА ТаблицаКассККМОрганизаций.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККТ)
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаВЗапросе.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|						ТОГДА ВЫБОР
		|								КОГДА ВидыОсобыхНалоговУслуг.ВидНалога ЕСТЬ NULL
		|									ТОГДА ВидыОсобыхНалоговУслугПоУмолчанию.ВидНалога
		|								ИНАЧЕ ВидыОсобыхНалоговУслуг.ВидНалога
		|							КОНЕЦ
		|					ИНАЧЕ ВидыОсобыхНалогов.ВидНалога
		|				КОНЕЦ
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыНалогов.ПустаяСсылка)
		|	КОНЕЦ КАК ВидНалога
		|ИЗ
		|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКассККМОрганизаций КАК ТаблицаКассККМОрганизаций
		|		ПО ТаблицаВЗапросе.Организация = ТаблицаКассККМОрганизаций.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыОсобыхНалогов КАК ВидыОсобыхНалогов
		|		ПО ТаблицаВЗапросе.Организация = ВидыОсобыхНалогов.Организация
		|			И ТаблицаВЗапросе.Склад = ВидыОсобыхНалогов.Склад
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыОсобыхНалоговУслуг КАК ВидыОсобыхНалоговУслуг
		|		ПО ТаблицаВЗапросе.Номенклатура.ТоварнаяГруппа = ВидыОсобыхНалоговУслуг.ТоварнаяГруппа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыОсобыхНалоговПоУмолчанию КАК ВидыОсобыхНалоговУслугПоУмолчанию
		|		ПО (ИСТИНА)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаВЗапросе.Организация,
		|	ТаблицаКассККМОрганизаций.КассаККМ,
		|	ВЫБОР
		|		КОГДА ТаблицаКассККМОрганизаций.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККТ)
		|			ТОГДА ТаблицаВЗапросе.ДоговорПлатежногоАгента
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыПлатежныхАгентов.ПустаяСсылка)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТаблицаКассККМОрганизаций.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККТ)
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаВЗапросе.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|						ТОГДА ВЫБОР
		|								КОГДА ВидыОсобыхНалоговУслуг.ВидНалога ЕСТЬ NULL
		|									ТОГДА ВидыОсобыхНалоговУслугПоУмолчанию.ВидНалога
		|								ИНАЧЕ ВидыОсобыхНалоговУслуг.ВидНалога
		|							КОНЕЦ
		|					ИНАЧЕ ВидыОсобыхНалогов.ВидНалога
		|				КОНЕЦ
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыНалогов.ПустаяСсылка)
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаКассККМОрганизаций.КассаККМ.Наименование, Организация";
		
		Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
		
		Запрос.УстановитьПараметр("ТаблицаКассККМОрганизаций", ТаблицаКассККМОрганизаций.Выгрузить());
		Запрос.УстановитьПараметр("ВидыОсобыхНалогов", ТаблицаВидыОсобыхНалоговОрганизаций.Выгрузить());
		Запрос.УстановитьПараметр("ВидыОсобыхНалоговУслуг", ТаблицаВидыОсобыхНалоговУслуг.Выгрузить());
		Запрос.УстановитьПараметр("СкладПродажиПоУмолчанию", СкладПродажиПоУмолчанию);
		Результат      = Запрос.Выполнить();
		ТаблицаЗапроса = Результат.Выгрузить();
		
		ТабличноеПолеЧеков.Загрузить(ТаблицаЗапроса);
		
		Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
			
			ОрганизацияДляЧеков = ТаблицаКассККМОрганизаций[0].Организация;
			КассаККМДляЧеков    = ТаблицаКассККМОрганизаций[0].КассаККМ;
			
			СтрокиТПЧековДляУдаления = Новый Массив();
			
			Для Каждого СтрокаТаблицыЧеков Из ТабличноеПолеЧеков Цикл
				
				Если СтрокаТаблицыЧеков.КассаККМ <> КассаККМДляЧеков ИЛИ СтрокаТаблицыЧеков.Организация <> ОрганизацияДляЧеков Тогда
					СтруктураПоискаТовары = Новый Структура();
					СтруктураПоискаТовары.Вставить("Организация", СтрокаТаблицыЧеков.Организация);
					СтрокиТовары = Объект.Товары.НайтиСтроки(СтруктураПоискаТовары);
					Для Каждого СтрокаТовары Из СтрокиТовары Цикл
						СтрокаТовары.Организация = ОрганизацияДляЧеков;
					КонецЦикла;
					СтрокиТПЧековДляУдаления.Добавить(СтрокаТаблицыЧеков);
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого СтрокаДляУдаления Из СтрокиТПЧековДляУдаления Цикл
				ТабличноеПолеЧеков.Удалить(СтрокаДляУдаления);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьОрганизациюВСериях(Объект.Товары, Объект.Серии);
	
	ТабличноеПолеЧековДляПередачиВФормуОплат = ТабличноеПолеЧеков.Выгрузить(Новый Массив());
	КЧ50 = Новый КвалификаторыЧисла(7, 0, ДопустимыйЗнак.Неотрицательный);
	ТабличноеПолеЧековДляПередачиВФормуОплат.Колонки.Добавить("КлючСвязиТПЧеков", Новый ОписаниеТипов("Число", КЧ50));
	
	Для Каждого СтрокаТП Из ТабличноеПолеЧеков Цикл
		НоваяСтрокаДляПередачи = ТабличноеПолеЧековДляПередачиВФормуОплат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДляПередачи, СтрокаТП);
		НоваяСтрокаДляПередачи.КлючСвязиТПЧеков = СтрокаТП.ПолучитьИдентификатор();
	КонецЦикла;
	
	АдресТаблицыЧеков = ПоместитьВоВременноеХранилище(ТабличноеПолеЧековДляПередачиВФормуОплат, УникальныйИдентификатор);
	
	Если Объект.Оплата.Количество() > 0 И ТабличноеПолеЧеков.Количество() > 0 Тогда
		// конечно же, вместо идентификаторов надо использовать ключ связи.
		// а также уметь сохранять или восстанавливать поле чеков.
		// но не в этом релизе.
		ПервыйИдентификатор = ТабличноеПолеЧеков[0].ПолучитьИдентификатор();
		Для Каждого СтрокаОплаты Из Объект.Оплата Цикл
			СтрокаОплаты.КлючСвязиТПЧеков = ПервыйИдентификатор;
			ПервыйИдентификатор = ПервыйИдентификатор + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Проверяем возможность печати по всем организациям.
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  АдресТаблицыЧеков
//
&НаКлиенте
Процедура ЗаполнитьТаблицуЧековИПроверитьСоответствиеОрганизаций(Отказ)
	
	ЗаполнитьТаблицуЧеков();
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибки распределения по организациям в номенклатуре:'");
	МассивОшибокПоОрганизациям = Новый Массив;
	Результат = Истина;
	
	Для Каждого СтрокаТПЧеков Из ТабличноеПолеЧеков Цикл
		Если Объект.ОперацияСДенежнымиСредствами
			И Объект.Товары.Количество() = 0
			И НЕ ЗначениеЗаполнено(Объект.ДокументРасчета) Тогда
			Возврат;
		ИначеЕсли МассивОрганизацийКлиент.Найти(СтрокаТПЧеков.Организация) = Неопределено Тогда
			МассивНоменклатур = Новый Массив;
			СтрокиСОрганизацией = Объект.Товары.НайтиСтроки(Новый Структура("Организация", СтрокаТПЧеков.Организация));
			
			Для каждого СтрокаСОрганизацией Из СтрокиСОрганизацией Цикл
				Если МассивНоменклатур.Найти(СтрокаСОрганизацией.Номенклатура) = Неопределено Тогда
				
					МассивНоменклатур.Добавить(СтрокаСОрганизацией.Номенклатура);
				
				КонецЕсли;
			КонецЦикла;
			
			ОрганизацияОшибки = ?(ЗначениеЗаполнено(СтрокаТПЧеков.Организация), СтрокаТПЧеков.Организация, НСтр("ru = '<Организация не заполнена>'"));
			
			СтруктураОшибки = Новый Структура("Организация, МассивНоменклатур", СтрокаТПЧеков.Организация, МассивНоменклатур);
			МассивОшибокПоОрганизациям.Добавить(СтруктураОшибки);
			
			Результат = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат Тогда
		
		Для каждого СтруктураОшибки Из МассивОшибокПоОрганизациям Цикл
		
			МассивНоменклатур = СтруктураОшибки.МассивНоменклатур;
			СтрокаОшибки = "" + СтруктураОшибки.Организация + ":";
			Для каждого НоменклатураОшибки Из МассивНоменклатур Цикл
				
				СтрокаОшибки = СтрокаОшибки + Символы.ПС + НоменклатураОшибки;
				
			КонецЦикла;
			
			СтрокаОшибки = СтрокаОшибки + Символы.ПС;
			
		КонецЦикла;
		
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокОшибки, СтрокаОшибки);
		
		Отказ = Истина
	ИначеЕсли ТабличноеПолеЧеков.Количество() = 0 Тогда
			
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Не правильно заполнены склады реализации'"));
		
		Отказ = Истина
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтруктураПолученияПодарковИзСкидки(СкидкаНаценка, КоличествоНаборов)
	
	ЕстьТаблицаПодарков = Ложь;
	Если ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		СкидкиВХранилище = ПолучитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
		Если СкидкиВХранилище <> Неопределено Тогда
			Если СкидкиВХранилище.Свойство("ТаблицаПодарков") Тогда
				ЕстьТаблицаПодарков = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьТаблицаПодарков Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("СкидкаНаценка", СкидкаНаценка);
		ТаблицаЗапроса = СкидкиВХранилище.ТаблицаПодарков.Скопировать(СтруктураОтбора);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкидкиНаценкиНаборПодарков.Ссылка,
		|	СкидкиНаценкиНаборПодарков.НомерСтроки,
		|	СкидкиНаценкиНаборПодарков.Номенклатура,
		|	СкидкиНаценкиНаборПодарков.Характеристика,
		|	СкидкиНаценкиНаборПодарков.Упаковка,
		|	СкидкиНаценкиНаборПодарков.КоличествоУпаковок * &КоличествоНаборов КАК КоличествоУпаковок,
		|	СкидкиНаценкиНаборПодарков.Количество * &КоличествоНаборов КАК Количество,
		|	СкидкиНаценкиНаборПодарков.Номенклатура.ТоварнаяГруппа КАК ТоварнаяГруппа
		|ПОМЕСТИТЬ ТаблицаПодарков
		|ИЗ
		|	Справочник.СкидкиНаценки.НаборПодарков КАК СкидкиНаценкиНаборПодарков
		|ГДЕ
		|	СкидкиНаценкиНаборПодарков.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаспределениеПродаж.Склад,
		|	ВЫБОР
		|		КОГДА НЕ РаспределениеПродаж.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА РаспределениеПродаж.РабочееМесто = &РабочееМесто
		|						ТОГДА 1
		|					ИНАЧЕ 2
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РаспределениеПродаж.РабочееМесто = &РабочееМесто
		|					ТОГДА 3
		|				ИНАЧЕ 4
		|			КОНЕЦ
		|	КОНЕЦ КАК ПолеУпорядочивания,
		|	РаспределениеПродаж.ТоварнаяГруппа
		|ПОМЕСТИТЬ ТаблицаСкладов
		|ИЗ
		|	РегистрСведений.РаспределениеПродаж КАК РаспределениеПродаж
		|ГДЕ
		|	РаспределениеПродаж.Магазин = &Магазин
		|	И (РаспределениеПродаж.ТоварнаяГруппа В
		|				(ВЫБРАТЬ
		|					ТаблицаПодарков.ТоварнаяГруппа
		|				ИЗ
		|					ТаблицаПодарков)
		|			ИЛИ РаспределениеПродаж.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка))
		|	И (РаспределениеПродаж.РабочееМесто = &РабочееМесто
		|			ИЛИ РаспределениеПродаж.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка,
		|	ВложенныйЗапрос.НомерСтроки,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Упаковка,
		|	ВложенныйЗапрос.КоличествоУпаковок,
		|	ВложенныйЗапрос.Количество,
		|	ВложенныйЗапрос.ТоварнаяГруппа,
		|	ВложенныйЗапрос.ПолеУпорядочивания,
		|	ЕСТЬNULL(ТаблицаСкладов.Склад, &ОсновнойСклад) КАК Склад
		|ПОМЕСТИТЬ ТаблицаПодарочковСоСкладами
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВложенныйЗапрос.Ссылка КАК Ссылка,
		|		ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
		|		ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|		ВложенныйЗапрос.Характеристика КАК Характеристика,
		|		ВложенныйЗапрос.Упаковка КАК Упаковка,
		|		ВложенныйЗапрос.КоличествоУпаковок КАК КоличествоУпаковок,
		|		ВложенныйЗапрос.Количество КАК Количество,
		|		ВложенныйЗапрос.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|		МИНИМУМ(ВложенныйЗапрос.ПолеУпорядочивания) КАК ПолеУпорядочивания
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ТаблицаПодарков.Ссылка КАК Ссылка,
		|			ТаблицаПодарков.НомерСтроки КАК НомерСтроки,
		|			ТаблицаПодарков.Номенклатура КАК Номенклатура,
		|			ТаблицаПодарков.Характеристика КАК Характеристика,
		|			ТаблицаПодарков.Упаковка КАК Упаковка,
		|			ТаблицаПодарков.КоличествоУпаковок КАК КоличествоУпаковок,
		|			ТаблицаПодарков.Количество КАК Количество,
		|			ТаблицаПодарков.ТоварнаяГруппа КАК ТоварнаяГруппа,
		|			ЕСТЬNULL(ТаблицаСкладов.ПолеУпорядочивания, 5) КАК ПолеУпорядочивания
		|		ИЗ
		|			ТаблицаПодарков КАК ТаблицаПодарков
		|				ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК ТаблицаСкладов
		|				ПО (ТаблицаПодарков.ТоварнаяГруппа = ТаблицаСкладов.ТоварнаяГруппа
		|						ИЛИ ТаблицаСкладов.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка))) КАК ВложенныйЗапрос
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВложенныйЗапрос.Ссылка,
		|		ВложенныйЗапрос.Номенклатура,
		|		ВложенныйЗапрос.Упаковка,
		|		ВложенныйЗапрос.Характеристика,
		|		ВложенныйЗапрос.ТоварнаяГруппа,
		|		ВложенныйЗапрос.НомерСтроки,
		|		ВложенныйЗапрос.КоличествоУпаковок,
		|		ВложенныйЗапрос.Количество) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК ТаблицаСкладов
		|		ПО ВложенныйЗапрос.ТоварнаяГруппа = ТаблицаСкладов.ТоварнаяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаПодарочковСоСкладами.Ссылка,
		|	ТаблицаПодарочковСоСкладами.НомерСтроки,
		|	ТаблицаПодарочковСоСкладами.Номенклатура,
		|	ТаблицаПодарочковСоСкладами.Характеристика,
		|	ТаблицаПодарочковСоСкладами.Упаковка,
		|	ТаблицаПодарочковСоСкладами.КоличествоУпаковок,
		|	ТаблицаПодарочковСоСкладами.Количество,
		|	ТаблицаПодарочковСоСкладами.ТоварнаяГруппа,
		|	ТаблицаПодарочковСоСкладами.ПолеУпорядочивания КАК ПолеУпорядочивания,
		|	ТаблицаПодарочковСоСкладами.Склад
		|ИЗ
		|	ТаблицаПодарочковСоСкладами КАК ТаблицаПодарочковСоСкладами
		|";
		
		
		// Получим количество товаров в таблице.
		Если КонтролироватьОстаткиТоваровПриЗакрытииЧека Тогда
			Запрос.Текст = Запрос.Текст + "
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
			|		ПО ТаблицаПодарочковСоСкладами.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
			|			И ТаблицаПодарочковСоСкладами.Характеристика = ТоварыНаСкладахОстатки.Характеристика
			|			И ТаблицаПодарочковСоСкладами.Склад = ТоварыНаСкладахОстатки.Склад
			|ГДЕ
			|	ТаблицаПодарочковСоСкладами.Количество <= ТоварыНаСкладахОстатки.КоличествоОстаток";
			
			
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолеУпорядочивания";
		
		Запрос.УстановитьПараметр("Магазин"          , Объект.Магазин);
		Запрос.УстановитьПараметр("РабочееМесто"     , Объект.РабочееМесто);
		Запрос.УстановитьПараметр("ОсновнойСклад"    , СкладПродажиПоУмолчанию);
		Запрос.УстановитьПараметр("Ссылка"           , СкидкаНаценка);
		Запрос.УстановитьПараметр("КоличествоНаборов", КоличествоНаборов);
		
		Результат = Запрос.Выполнить();
		ТаблицаЗапроса = Результат.Выгрузить();
	КонецЕсли;
		
	СтруктураОтвета = Новый Структура;
	
	Если ТаблицаЗапроса.Количество() = 1 Тогда
		
		СтруктураОтвета.Вставить("Действие", "ПоследующийВыбор");
		
		СтруктураВыборки = ОбщегоНазначенияРТ.СоздатьСтруктуруПоСтрокеВыборки(ТаблицаЗапроса, ТаблицаЗапроса[0]);
		СтруктураВыборки.Вставить("Получен", Ложь);
		
		СтруктураОтвета.Вставить("СтруктураВыборки", СтруктураВыборки);
		
	ИначеЕсли ТаблицаЗапроса.Количество() = 0 Тогда
		
		СтруктураОтвета.Вставить("Действие", "УдалениеСтрокиЧека");
	Иначе
		
		СтруктураОтвета.Вставить("Действие", "ВыборИзСписка");
		
		АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаЗапроса, УникальныйИдентификатор);
		
		СтруктураОтвета.Вставить("АдресТаблицы", АдресТаблицы);
		
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаСервере
Функция СтруктураПолученияПодарков()
	
	СтруктураОтвета = Новый Структура;
	Если Объект.Подарки.Количество() = 0 Тогда
		СтруктураОтвета.Вставить("Действие", "ПрекратитьВыдачуПодарков");
	Иначе
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Подарки, Объект.Подарки[0], "КлючСвязи");	
		
		ТаблицаПодарков = Объект.Подарки.Выгрузить();
		МассивУдаляемых = Новый Массив;
		
		ЕстьПодаркиКВыдаче = Ложь;
		
		Для Каждого СтрокаПодарка Из ТаблицаПодарков Цикл
			
			Если СтрокаПодарка.Получен Тогда
				МассивУдаляемых.Добавить(СтрокаПодарка);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого УдаляемаяСтрока Из МассивУдаляемых Цикл
			ТаблицаПодарков.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		Если ТаблицаПодарков.Количество() = 0 Тогда
			
			СтруктураОтвета.Вставить("Действие", "ПрекратитьВыдачуПодарков");

		Иначе
			
			СтруктураОтвета.Вставить("Действие", "ВыдатьПодарки");
			АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаПодарков, УникальныйИдентификатор);
			СтруктураОтвета.Вставить("АдресТаблицы", АдресТаблицы);
			
			ТаблицаСерий = Объект.СерииПодарков.Выгрузить();
			АдресТаблицыСерий = ПоместитьВоВременноеХранилище(ТаблицаСерий, Новый УникальныйИдентификатор);
			СтруктураОтвета.Вставить("АдресТаблицыСерий", АдресТаблицыСерий);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаКлиенте
Процедура ВыдатьПодарки(Отказ, ПараметрДействия)

	Если Объект.Подарки.Количество()= 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрДействия.Вставить("МассивНеНужныхСтрок", Новый Массив);
	
	Для каждого СтрокаПодарки Из Объект.Подарки Цикл
		СтрокаПодарки.Получен = Ложь;
	КонецЦикла;
	
	ВыдатьПодаркиИзСпискаВЦикле(Отказ, ПараметрДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыдатьПодаркиИзСпискаВЦикле(Отказ, ПараметрДействия, ТекущаяВыданнаяСкидка = Неопределено)
	
	Для Каждого СтрокаПодарки Из Объект.Подарки Цикл
		
		Если ЗначениеЗаполнено(СтрокаПодарки.Номенклатура) ИЛИ СтрокаПодарки.Получен Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПолученияПодарковИзСкидки = СтруктураПолученияПодарковИзСкидки(СтрокаПодарки.СкидкаНаценка, 1);
		
		Если СтруктураПолученияПодарковИзСкидки.Действие = "УдалениеСтрокиЧека" Тогда
			СтрокаПодарки.Получен = Истина;
			ПараметрДействия.МассивНеНужныхСтрок.Добавить(СтрокаПодарки);
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяВыданнаяСкидка)
			И ТекущаяВыданнаяСкидка = СтрокаПодарки.СкидкаНаценка Тогда
			ПараметрДействия.МассивНеНужныхСтрок.Добавить(СтрокаПодарки);
			Продолжить;
		КонецЕсли;
		
		Если СтруктураПолученияПодарковИзСкидки.Действие = "ВыборИзСписка" Тогда
			
			// &ЗамерПроизводительности
			ОценкаПроизводительностиРТКлиент.НачатьЗамер(
							Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораПодаркаИзСписка.Открытие");
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("АдресТаблицы" , СтруктураПолученияПодарковИзСкидки.АдресТаблицы);
			ПараметрыФормы.Вставить("СкидкаНаценка", СтрокаПодарки.СкидкаНаценка);
			ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
				ПараметрыФормы.Вставить("ЭтоВозврат", Истина);
			КонецЕсли;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрДействия", ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрДействия));
			ДополнительныеПараметры.Вставить("ИдентификаторСтрокиПодарки", СтрокаПодарки.ПолучитьИдентификатор());
			
			ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораПодаркаИзСписка", ЭтотОбъект, ДополнительныеПараметры);
			Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
			ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораПодаркаИзСписка", ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим); 
			Прервать;
		Иначе
			СтруктураОтвета = СтруктураПолученияПодарковИзСкидки.СтруктураВыборки;
			
			Если ЗначениеЗаполнено(СтруктураОтвета) Тогда
				ЗаполнитьСтрокуПодаркаПриВыборе(СтрокаПодарки, СтруктураОтвета);
			Иначе
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПараметрДействия.ОткрытаБлокирующаяФорма Тогда
		Для Каждого СтрокаПодарки Из ПараметрДействия.МассивНеНужныхСтрок Цикл
			Объект.Подарки.Удалить(СтрокаПодарки);
		КонецЦикла;
		
		ВыдатьПодаркиПослеВыдачиИзСписка(ПараметрДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуПодаркаПриВыборе(СтрокаПодарки, СтруктураЗаполнения)
	ЗаполнитьЗначенияСвойств(СтрокаПодарки, СтруктураЗаполнения);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСкладПродажи", Новый Структура("Магазин, РабочееМесто", Объект.Магазин, Объект.РабочееМесто));
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина, Ложь));
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	Иначе
		СтруктураДействий.Вставить("ПересчитатьСуммуВозвратСУчетомОснования", Новый Структура("Основание", Объект.ЧекККМПродажа));
	КонецЕсли;
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Подарки, СтрокаПодарки, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	СтрокаПодарки.Получен = СтруктураЗаполнения.Получен;
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьКлючСвязи(Объект.Подарки, СтрокаПодарки, "КлючСвязи");

	Если СтруктураЗаполнения.Свойство("АдресСерийВХранилище")
		И ЗначениеЗаполнено(СтруктураЗаполнения.АдресСерийВХранилище) Тогда
		ИдентификаторСтроки = СтрокаПодарки.ПолучитьИдентификатор();
		ДополнитьСерииПодаркаИзСписка(ИдентификаторСтроки, СтруктураЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыдатьПодаркиПослеВыдачиИзСписка(ПараметрДействия)
	СтруктураПолученияПодарков = СтруктураПолученияПодарков();
	
	Если СтруктураПолученияПодарков.Действие = "ВыдатьПодарки" Тогда
		
		// &ЗамерПроизводительности
		ОценкаПроизводительностиРТКлиент.НачатьЗамер(
						Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаВыдачиПодарков.Открытие");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресТаблицы" , СтруктураПолученияПодарков.АдресТаблицы);
		ПараметрыФормы.Вставить("АдресТаблицыСерий" , СтруктураПолученияПодарков.АдресТаблицыСерий);
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
			ПараметрыФормы.Вставить("ЭтоВозврат");
		КонецЕсли;
		ПараметрыФормы.Вставить("Магазин" , Объект.Магазин);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрДействия", ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрДействия));
		
		ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыдачиПодарков", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыдачиПодарков", ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим); 
	Иначе
		ЗавершитьДействияПослеВыдачиПодарков(ПараметрДействия)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДействияПослеВыдачиПодарков(ПараметрДействия)
	
	Если ПараметрДействия.Свойство("ОплатитьТоварыОткрытиеФормОплат") Тогда
		ОплатитьТоварыОткрытиеФормОплат(ПараметрДействия)
	КонецЕсли;
	
	Если ПараметрДействия.Свойство("ОткрытьФормуОплатыБонусами") Тогда
		ОткрытьФормуОплатыБонусами(ПараметрДействия)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОтменуОплаты()

	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		Возврат
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ПродажаПодарка", Истина);
	
	СтрокиТовары = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиТовары.Количество() > 0 Тогда // Есть подарки учитываемые как продажа.
		
		СкидкиНаценкиСерверПереопределяемый.ОчиститьТоварыОтПодарков(Объект);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкидкиНаценки.НомерСтроки,
		|	СкидкиНаценки.КлючСвязи,
		|	СкидкиНаценки.Сумма,
		|	ВЫРАЗИТЬ(СкидкиНаценки.СкидкаНаценка КАК Справочник.СкидкиНаценки) КАК СкидкаНаценка
		|ПОМЕСТИТЬ ТаблицаВЗапросе
		|ИЗ
		|	&СкидкиНаценки КАК СкидкиНаценки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекККМТовары.НомерСтроки,
		|	ЧекККМТовары.КлючСвязи
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&Товары КАК ЧекККМТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВЗапросе.НомерСтроки,
		|	ТаблицаВЗапросе.КлючСвязи,
		|	ТаблицаВЗапросе.Сумма,
		|	ТаблицаВЗапросе.СкидкаНаценка,
		|	ТаблицаТоваров.НомерСтроки КАК НомерСтрокиТовары
		|ИЗ
		|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
		|		ПО ТаблицаВЗапросе.КлючСвязи = ТаблицаТоваров.КлючСвязи
		|ГДЕ
		|	ТаблицаВЗапросе.СкидкаНаценка.УчитыватьПодарокКакПродажу
		|	И ТаблицаВЗапросе.СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Подарок)";
		
		Запрос.УстановитьПараметр("СкидкиНаценки", Объект.СкидкиНаценки.Выгрузить());
		Запрос.УстановитьПараметр("Товары"       , Объект.Товары.Выгрузить());
		
		Результат = Запрос.Выполнить();
		ТаблицаЗапроса = Результат.Выгрузить();
		
		МассивУдаляемыхСтрок = Новый Массив;
		
		ЕстьИзмененияТоваров = Ложь;
		Для Каждого СтрокаСкидки Из ТаблицаЗапроса Цикл
			
			СтрокаТовары = Объект.Товары[СтрокаСкидки.НомерСтрокиТовары - 1];
			
			СтрокаТовары.СуммаАвтоматическойСкидки = СтрокаТовары.СуммаАвтоматическойСкидки - СтрокаСкидки.Сумма;
			СтрокаТовары.Сумма = СтрокаТовары.Сумма + СтрокаСкидки.Сумма;
			
			ТекПроцентНДС = ОбработкаТабличнойЧастиТоварыКлиентСерверПовтИсп.ПолучитьСтавкуНДСЧислом(СтрокаТовары.СтавкаНДС);
			СтрокаТовары.СуммаНДС = ОбработкаТабличнойЧастиТоварыСервер.РассчитатьСуммуНДС(СтрокаТовары.Сумма, СтрокаТовары.СтавкаНДС, Объект.ЦенаВключаетНДС);
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(СтрокаТовары, Объект.ЦенаВключаетНДС);
			Объект.СкидкиРассчитаны = Ложь;
			
			МассивУдаляемыхСтрок.Добавить(Объект.СкидкиНаценки[СтрокаСкидки.НомерСтроки - 1]);
			
		КонецЦикла;
		
		Для каждого ЭлементМассива Из МассивУдаляемыхСтрок Цикл
			
			Объект.СкидкиНаценки.Удалить(ЭлементМассива);
			
		КонецЦикла;
		
		
	КонецЕсли;
	
КонецПроцедуры

// При обнаружении потери покупателя нужно получить его согласие.
//
&НаСервере
Функция ПроверкаСогласияПокупателяНаПотерюСуммыПоПодарочнымСертификатам(ПроверкаВРазрезеОрганизаций, ПараметрыИнформации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПодключаемоеОборудованиеРТ.ТекстЗапросаПоВнереализациннойПрибыли();
	
	Запрос.УстановитьПараметр("ПроверкаВРазрезеОрганизаций", ПроверкаВРазрезеОрганизаций);
	Запрос.УстановитьПараметр("ПогашениеПодарочныхСертификатов", Объект.ПогашениеПодарочныхСертификатов.Выгрузить());
	Запрос.УстановитьПараметр("Оплата", Объект.Оплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
	
		Возврат Истина
	
	КонецЕсли;
	
	ТаблицаЗапроса = Результат.Выгрузить();
	
	ПотериПокупателя = ТаблицаЗапроса.Итог("Разница");
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Потери покупателя от недобора товара составляют - %1 руб.'"),
		Формат(ПотериПокупателя, "ЧЦ=15; ЧДЦ=2; ЧГ=3,0")
	);
	
	ПараметрыИнформации.ЗаголовокИнформации = Текст;
	ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'Покупатель согласен?'");
	
	Возврат Ложь
	
КонецФункции // ПроверкаСогласияПокупателяНаПотерюСуммыПоПодарочнымСертификатам()

&НаСервере
Процедура ДобавитьТаблицуОплат(РезультатОткрытияФормы, Организация = Неопределено, КлючСвязиТПЧеков = Неопределено)
	
	Если РезультатОткрытияФормы.Свойство("Телефон") Тогда
		Объект.Телефон = РезультатОткрытияФормы.Телефон;
	КонецЕсли;
	
	Если РезультатОткрытияФормы.Свойство("Email") Тогда
		Объект.АдресЭП = РезультатОткрытияФормы.Email;
	КонецЕсли;
	
	Если РезультатОткрытияФормы.Свойство("Контрагент") Тогда
		Объект.Контрагент = РезультатОткрытияФормы.Контрагент;
	КонецЕсли;
	
	Если РезультатОткрытияФормы.Свойство("СохранятьТелефонEmail") Тогда
		Если ЗначениеЗаполнено(Объект.Телефон) Тогда
			ПодключаемоеОборудованиеРТ.ЗаписатьТелефонВИнформационнуюКарту(Объект.ДисконтнаяКарта, Объект.Телефон);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.АдресЭП) Тогда
			ПодключаемоеОборудованиеРТ.ЗаписатьEmailВИнформационнуюКарту(Объект.ДисконтнаяКарта, Объект.АдресЭП);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.Телефон) Тогда
			ПодключаемоеОборудованиеРТ.УдалитьТелефонИзИнформационнойКарты(Объект.ДисконтнаяКарта, Объект.Телефон);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.АдресЭП) Тогда
			ПодключаемоеОборудованиеРТ.УдалитьEmailИзИнформационнойКарты(Объект.ДисконтнаяКарта, Объект.АдресЭП);
		КонецЕсли;
	КонецЕсли;
	
	АдресТаблицы = РезультатОткрытияФормы.АдресТаблицыОплата;
	
	Если КлючСвязиТПЧеков = Неопределено Тогда
		Объект.Оплата.Очистить();
	Иначе
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиТПЧеков", КлючСвязиТПЧеков);
		
		СтрокиОплаты = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаОплаты Из СтрокиОплаты Цикл
			
			Объект.Оплата.Удалить(СтрокаОплаты);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаОплаты = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	Для Каждого СтрокаОплаты Из ТаблицаОплаты Цикл
		
		НоваяСтрокаОплата = Объект.Оплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОплата, СтрокаОплаты);
		Если не КлючСвязиТПЧеков = Неопределено Тогда
			НоваяСтрокаОплата.КлючСвязиТПЧеков = КлючСвязиТПЧеков;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТаблицуПогашениеПодарочныхСертификатов(АдресТаблицы, Организация = Неопределено, КлючСвязиТПЧеков = Неопределено)
	
	Если КлючСвязиТПЧеков = Неопределено Тогда
		Объект.ПогашениеПодарочныхСертификатов.Очистить();
	Иначе
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязиТПЧеков", КлючСвязиТПЧеков);
		
		СтрокиОплаты = Объект.ПогашениеПодарочныхСертификатов.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаОплаты Из СтрокиОплаты Цикл
			
			Объект.ПогашениеПодарочныхСертификатов.Удалить(СтрокаОплаты);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаОплаты = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	Для Каждого СтрокаОплаты Из ТаблицаОплаты Цикл
		
		НоваяСтрокаОплата = Объект.ПогашениеПодарочныхСертификатов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОплата, СтрокаОплаты);
		Если не КлючСвязиТПЧеков = Неопределено Тогда
			НоваяСтрокаОплата.КлючСвязиТПЧеков = КлючСвязиТПЧеков;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция АдресВХранилище(ИмяТаблицы = "")
	
	//Если ИмяТаблицы = "Оплата" Тогда
	//	Если ЗначениеЗаполнено(АдресТаблицыОплат) Тогда
	//		УдалитьИзВременногоХранилища(АдресТаблицыОплат);
	//	КонецЕсли;
	//ИначеЕсли ИмяТаблицы = "ПогашениеПодарочныхСертификатов" Тогда
	//	Если ЗначениеЗаполнено(АдресТаблицыПогашениеПодарочныхСертификатов) Тогда
	//		УдалитьИзВременногоХранилища(АдресТаблицыПогашениеПодарочныхСертификатов);
	//	КонецЕсли;
	//КонецЕсли;
	
	ВозвращаемыйАдрес = "";
	
	Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
		ВозвращаемыйАдрес = ПоместитьВоВременноеХранилище(Объект[ИмяТаблицы].Выгрузить(), УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат ВозвращаемыйАдрес;

КонецФункции

// Оплата чека
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>.
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>.
//
&НаКлиенте
Процедура ОплатитьТовары(ИмяФормыОплаты, ОплатаПлатежнойКартой = Неопределено, Печать = Ложь)
	
	Перем Отказ;
	Перем ПараметрыИнформации;
	
	Отказ = Ложь;
	ОплатаТолькоНаличными = ИмяФормыОплаты = "ФормаПростойОплаты";
	
	Если Объект.Товары.Количество() = 0 
		И НЕ Объект.ОперацияСДенежнымиСредствами Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьКассовыеСмены(Отказ, ПараметрыИнформации);
	
	Если Отказ Тогда
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности  
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ПодготовкаОплатыРМК");
	
	// Скидки
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("Отказ", Отказ);
	ПараметрыДействия.Вставить("ПараметрыИнформации"         , ПараметрыИнформации);
	ПараметрыДействия.Вставить("ИмяФормыОплаты"              , ИмяФормыОплаты);
	ПараметрыДействия.Вставить("ОплатаПлатежнойКартой"       , ОплатаПлатежнойКартой);
	ПараметрыДействия.Вставить("ОплатаТолькоНаличными"       , ОплатаТолькоНаличными);
	ПараметрыДействия.Вставить("Печать"                      , Печать);
	ПараметрыДействия.Вставить("ИмяОбработкиОповещения"      , "ОплатитьТоварыПослеВыводаСообщений");
	ПараметрыДействия.Вставить("НадписьЗаголовок"            , НадписьЗаголовок);
	ПараметрыДействия.Вставить("ЦветТекстаЗаголока"          , Элементы.НадписьЗаголовок.ЦветТекста);
	ПараметрыДействия.Вставить("Контрагент"                  , Объект.Контрагент);
	ПараметрыДействия.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
	ПараметрыДействия.Вставить("СуммаОстаткаДокументаРасчета", СуммаОстаткаДокументаРасчета);
	ПараметрыДействия.Вставить("ЭтоЗачетАванса"              , ЭтоЗачетАванса);
	ПараметрыДействия.Вставить("ЭтоВозвратАванса"            , ЭтоВозвратАванса);
	ПараметрыДействия.Вставить("ЭтоОплатаРассрочки"          , ЭтоОплатаРассрочки);
	ПараметрыДействия.Вставить("ИзменятьКонтрагента"         , НЕ ЗначениеЗаполнено(Объект.ДокументРасчета) И НЕ ЗначениеЗаполнено(Объект.ЗаказПокупателя));
	
	ЭтоАвансБезРасшифровкиПоТоварам = Объект.ОперацияСДенежнымиСредствами 
									  И (Объект.Товары.Количество() = 0)
									  И НЕ ЗначениеЗаполнено(Объект.ДокументРасчета);
	ЭтоАванс = Объект.ОперацияСДенежнымиСредствами 
			   И НЕ ЗначениеЗаполнено(Объект.ДокументРасчета);
	ПараметрыДействия.Вставить("ЭтоАвансБезРасшифровкиПоТоварам" , ЭтоАвансБезРасшифровкиПоТоварам);
	ПараметрыДействия.Вставить("ЭтоАванс" , ЭтоАванс);
	
	Если НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") 
		И НЕ Объект.СкидкиРассчитаны
		И НЕ Объект.ПродажаПоЗаказу Тогда
		НазначитьАвтоматическиеСкидкиКлиент( , , ПараметрыДействия);
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		ПодготовитьОплатуБонусамиКСторнированию();
	КонецЕсли;
	
	Если ПараметрыДействия.Свойство("ВыведеныСообщения") Тогда
		Возврат;
	Иначе
		ОплатитьТоварыПослеВыводаСообщений(Неопределено, ПараметрыДействия);
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьТоварыОткрытиеФормОплат(ПараметрДействия)
	
	Отказ = Ложь;
	
	Если НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		ПеренестиСкидкиПодаркиВТоварыСервер();
	КонецЕсли;
	
	ОбновитьФорму();
	
	ЗаполнитьТаблицуЧековИПроверитьСоответствиеОрганизаций(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ПередаватьТаблицуОплат Тогда 
		АдресТаблицыОплат = АдресВХранилище("Оплата");
		АдресТаблицыПогашениеПодарочныхСертификатов = АдресВХранилище("ПогашениеПодарочныхСертификатов");
	Иначе
		АдресТаблицыОплат = "";
		АдресТаблицыПогашениеПодарочныхСертификатов = "";
	КонецЕсли;
	
	Объект.Оплата.Очистить();
	Объект.ПогашениеПодарочныхСертификатов.Очистить();
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
		
	КонецЕсли;
	
	ИмяФормыОплаты = ПараметрДействия.ИмяФормыОплаты;
	Если ПараметрДействия.ОплатаТолькоНаличными Тогда
		
		СуммаКОплатеИтоговая = Объект.Товары.Итог("СуммаВсего");
		
		ПараметрыФормы = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрДействия);
		ПараметрыФормы.Вставить("ИтогПоЧеку"       , СуммаКОплатеИтоговая);
		ПараметрыФормы.Вставить("АдресТаблицыЧеков", АдресТаблицыЧеков);
		ПараметрыФормы.Вставить("ДисконтнаяКарта"  , Объект.ДисконтнаяКарта);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Печать", ПараметрДействия.Печать);

		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуОплатыНаличными", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма." + ИмяФормыОплаты, ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
		
	Иначе
		
		НесколькоОрганизаций = ТабличноеПолеЧеков.Количество() > 1;
		Если НесколькоОрганизаций Тогда
			Элементы.СтраницыИнформации.ТекущаяСтраница = Элементы.СтраницаЧеков;
			
			ВыведеныЧеки = Истина;
			СнятьОтборТоваров();
		КонецЕсли;
		
		ПараметрДействияСложнойФормыОплаты = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрДействия);
		ПараметрДействияСложнойФормыОплаты.Вставить("НесколькоОрганизаций", НесколькоОрганизаций);
		
		Если ЗначениеЗаполнено(АдресТаблицыОплат) Тогда 
			ПараметрДействияСложнойФормыОплаты.Вставить("ТаблицаОплат", АдресТаблицыОплат);
			Если ЗначениеЗаполнено(АдресТаблицыПогашениеПодарочныхСертификатов) Тогда 
				ПараметрДействияСложнойФормыОплаты.Вставить("АдресТаблицыПогашениеПодарочныхСертификатов", АдресТаблицыПогашениеПодарочныхСертификатов);
			КонецЕсли;
		КонецЕсли;
		ОплатитьТоварыСложнаяФормаОплаты(ПараметрДействияСложнойФормыОплаты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьТоварыСложнаяФормаОплаты(ПараметрДействия)
	
	ВсеСтрокиОбработаныРанее = Истина;
	Если ТабличноеПолеЧеков.Количество() = 0 Тогда
		Если Объект.ОперацияСДенежнымиСредствами Тогда
			
			Для каждого СтрокаОрганизация Из ТаблицаКассККМОрганизаций Цикл
				Если СтрокаОрганизация.СтрокаОбработана Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыФормы = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрДействия);
				ПараметрыФормы.Вставить("ИтогПоОрганизации", 0);
				ПараметрыФормы.Вставить("ВидОперации"      , Объект.ВидОперации);
				ПараметрыФормы.Вставить("Организация"      , СтрокаОрганизация.Организация);
				ПараметрыФормы.Вставить("Магазин"          , Объект.Магазин);
				ПараметрыФормы.Вставить("КассаККМ"         , СтрокаОрганизация.КассаККМ);
				ПараметрыФормы.Вставить("ЧекККМПродажа"    , Объект.ЧекККМПродажа);
				ПараметрыФормы.Вставить("ДисконтнаяКарта"  , Объект.ДисконтнаяКарта);
				
				ПараметрыФормы.Вставить("ОплатаПлатежнойКартой", ПараметрДействия.ОплатаПлатежнойКартой);
				
				ПараметрДействия.Вставить("КлючСвязиТПЧеков" , СтрокаОрганизация.ПолучитьИдентификатор());
				ПараметрыФормы.Вставить("КлючСвязиТПЧеков" , СтрокаОрганизация.ПолучитьИдентификатор());
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
				
				Если НЕ ПараметрыФормы.ИтогПоОрганизации = 0 ИЛИ ПараметрыФормы.ОперацияСДенежнымиСредствами Тогда
					ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуСложнойОплаты", ЭтотОбъект, ДополнительныеПараметры);
					Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
					ИмяФормыОплаты = ПараметрДействия.ИмяФормыОплаты;
					РезультатОткрытияФормы = ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма." + ИмяФормыОплаты, ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим); 
					Если РезультатОткрытияФормы = Неопределено Тогда
						ОбработатьОтказОтОплаты();
					КонецЕсли;
				Иначе
					ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
					ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка сложной оплаты'");
					ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'Не задана сумма по чеку'");
					ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
					ОбработатьОтказОтОплаты();
				КонецЕсли;
				
				СтрокаОрганизация.СтрокаОбработана = Истина;
				Прервать;
			КонецЦикла;
			
		КонецЕсли;
	Иначе
		Для Каждого СтрокаЧека Из ТабличноеПолеЧеков Цикл
			
			Если СтрокаЧека.СтрокаОбработана Тогда
				Продолжить;
			КонецЕсли;
			
			ВсеСтрокиОбработаныРанее = Ложь;
			
			ПараметрыФормы = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрДействия);
			ПараметрыФормы.Вставить("ИтогПоОрганизации", СтрокаЧека.Сумма);
			ПараметрыФормы.Вставить("ВидОперации"      , Объект.ВидОперации);
			ПараметрыФормы.Вставить("Организация"      , СтрокаЧека.Организация);
			ПараметрыФормы.Вставить("Магазин"          , Объект.Магазин);
			ПараметрыФормы.Вставить("КассаККМ"         , СтрокаЧека.КассаККМ);
			ПараметрыФормы.Вставить("ЧекККМПродажа"    , Объект.ЧекККМПродажа);
			ПараметрыФормы.Вставить("ДисконтнаяКарта"  , Объект.ДисконтнаяКарта);
			
			ПараметрыФормы.Вставить("ОплатаПлатежнойКартой", ПараметрДействия.ОплатаПлатежнойКартой);
			
			Если ПараметрДействия.НесколькоОрганизаций Тогда
				ПараметрыФормы.Вставить("АдресТаблицыПогашениеПодарочныхСертификатов", АдресВХранилище("ПогашениеПодарочныхСертификатов"));
				ПараметрДействия.Вставить("ОрганизацияДляДобавленияВТаблицы", СтрокаЧека.Организация);
				Элементы.ТабличноеПолеЧеков.ТекущаяСтрока = СтрокаЧека.ПолучитьИдентификатор();
				УстановитьОтборТоваров(СтрокаЧека);
			Иначе
				ПараметрДействия.Вставить("ОрганизацияДляДобавленияВТаблицы", Неопределено)
			КонецЕсли;
			
			ПараметрДействия.Вставить("КлючСвязиТПЧеков" , СтрокаЧека.ПолучитьИдентификатор());
			ПараметрыФормы.Вставить("КлючСвязиТПЧеков" , СтрокаЧека.ПолучитьИдентификатор());
			
			//Если ИспользоватьБонусы Тогда
			//	ПараметрыФормы.Вставить("АдресТаблицыТоваров", АдресВХранилище("Товары"));
			//КонецЕсли;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
			
			Если ПараметрыФормы.ИтогПоОрганизации <> 0 ИЛИ ПараметрыФормы.ОперацияСДенежнымиСредствами Тогда
				ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуСложнойОплаты", ЭтотОбъект, ДополнительныеПараметры);
				Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
				ИмяФормыОплаты = ПараметрДействия.ИмяФормыОплаты;
				РезультатОткрытияФормы = ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма." + ИмяФормыОплаты, ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим); 
				Если РезультатОткрытияФормы = Неопределено Тогда
					ОбработатьОтказОтОплаты();
				КонецЕсли;
			Иначе
				ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
				ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка сложной оплаты'");
				ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'Не задана сумма по чеку'");
				ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
				ОбработатьОтказОтОплаты();
			КонецЕсли;
			
			СтрокаЧека.СтрокаОбработана = Истина;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Если ВсеСтрокиОбработаныРанее Тогда
		ВыведеныЧеки = Ложь;
		ЗавершитьОплатуТоваров(ПараметрДействия.Печать);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтказОтОплаты()
	
	ЭтотОбъект.Доступность = Истина;
	ВыведеныЧеки = Ложь;
	ОбработатьОтменуОплаты();
	СнятьОтборТоваров();
	ОбновитьФорму();
	ВывестиИнформациюНаДисплейПокупателя("ОтменаОплаты");
	ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяОплата", 5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОплатуТоваров(Печать, ЗадатьВопросОПотереСуммыПоПодарочнымСертификатам = Истина)
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	Отказ = Ложь;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		СтрокаОшибки = "";
		
		Если ЭтоВозвратДеньВДень() Тогда
			ПроверитьВозможностьПровестиОплатуПоВозвратуЧекККМСервер(Отказ, СтрокаОшибки);
		КонецЕсли;
		
		Если Отказ Тогда
			ОбработатьОтказОтОплаты();
			ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка оплаты возврата товара'");
			ПараметрыИнформации.ТекстИнформации = СтрокаОшибки;
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ЗадатьВопросОПотереСуммыПоПодарочнымСертификатам Тогда
		ПроверкаВРазрезеОрганизаций = ТабличноеПолеЧеков.Количество() > 1;
		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
		
		Если НЕ ПроверкаСогласияПокупателяНаПотерюСуммыПоПодарочнымСертификатам(ПроверкаВРазрезеОрганизаций, ПараметрыИнформации) Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Печать", Печать);
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаОПотереСуммыПоПодарочнымСертификатам", ЭтотОбъект, ДополнительныеПараметры);
			
			ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(ПараметрыИнформации.ЗаголовокИнформации, ПараметрыИнформации.ТекстИнформации, "Нет", ОбработчикОповещения);
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		ОбработатьОтказОтОплаты();
		Возврат;
	КонецЕсли;
	
	Если Объект.ОперацияСДенежнымиСредствами И Объект.Товары.Итог("СуммаВсего") = 0  Тогда
		Сдача = 0;
	Иначе
		Сдача = Макс(Объект.Оплата.Итог("Сумма") - Объект.Товары.Итог("СуммаВсего"),0);
	КонецЕсли; 
	
	Если ИспользоватьПодключаемоеОборудование Тогда
	
		ДисплейПокупателяПараметры.Сдача = Формат(Сдача, "ЧДЦ=2;ЧГ=;ЧН=0.00");
		ДисплейПокупателяПараметры.СуммаВсего = Формат(СуммаВсего, "ЧДЦ=2;ЧГ=;ЧН=0.00");
		ДисплейПокупателяПараметры.Оплата = Формат(Объект.Оплата.Итог("Сумма"), "ЧДЦ=2;ЧГ=;ЧН=0.00");
		ВывестиИнформациюНаДисплейПокупателя("Оплата");
		
	КонецЕсли;
	
	Если Сдача = 0 Тогда
		НадписьСуммаСдачи = "0,00";
	Иначе
		НадписьСуммаСдачи = Формат(Сдача, "ЧЦ=15; ЧДЦ=2; ЧГ=3,0");
	КонецЕсли;
	
	ВыведенаСдача = Истина;
	ОставлятьФлагТаблоСдачи = Истина;
	Элементы.СтраницыИнформации.ТекущаяСтраница = Элементы.СтраницаСдача;
	
	ПечатьПослеПробитияЧека = Печать;
	
	ПодключитьОбработчикОжидания("ЗавершитьОплатуТоваровПослеВыводаСдачи", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОплатуТоваровПослеВыводаСдачи()
	
	Попытка
		// &ЗамерПроизводительности
		Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ЗавершениеОплатыИСозданиеЧековРМК");
		
		НазначитьАвтоматическиеСкидкиКлиент(Истина);
		
		Отказ = Ложь;
		СнятьОтборТоваров();
		СоздатьЧеки(Отказ, ПечатьПослеПробитияЧека);
		
		Если НЕ ЭтотОбъект.Доступность Тогда
			ЭтотОбъект.Доступность = Истина;
		КонецЕсли;
		ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	Исключение
		Если НЕ ЭтотОбъект.Доступность Тогда
			ЭтотОбъект.Доступность = Истина;
		КонецЕсли;
		СтрокаОшибки = ОписаниеОшибки();
		ЗаголовокИнформации = НСтр("ru = 'Не удалось создать чеки'"); 
		ТекстИнформации = НСтр("ru = 'Не удалось создать чеки по причине:'") + Символы.ПС + СтрокаОшибки; 
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, );
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборТоваров(СтрокаТПЧеков)
	
	Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура(
		"Организация, ДоговорПлатежногоАгента, ВидНалога",
		СтрокаТПЧеков.Организация, СтрокаТПЧеков.ДоговорПлатежногоАгента, СтрокаТПЧеков.ВидНалога);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтборТоваров()
	
	Элементы.Товары.ОтборСтрок = Неопределено;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивКлючей(ИмяРеквизитаКлюча, СтруктураПоиска)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТовары." + ИмяРеквизитаКлюча + " КАК РеквизитКлюча
	|	&ДополнительныеПоляВыборки
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.РеквизитКлюча
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|ГДЕ
	|	&ФразаГде";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", Объект.Товары.Выгрузить());
	
	ФразаГде = "";
	ДополнительныеПоляВыборки = "";
	Для Каждого ПолеПоиска Из СтруктураПоиска Цикл
		
		ДополнительныеПоляВыборки = ДополнительныеПоляВыборки + ", ТаблицаТовары." + ПолеПоиска.Ключ;
		
		Если не ФразаГде = "" Тогда
			ФразаГде = ФразаГде + " и ";
		КонецЕсли;
		
		ФразаГде = ФразаГде + "ТаблицаВЗапросе." + ПолеПоиска.Ключ + " = &Параметр" + ПолеПоиска.Ключ;
		
		Запрос.УстановитьПараметр("Параметр" + ПолеПоиска.Ключ, ПолеПоиска.Значение);
		
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФразаГде", ФразаГде);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеПоляВыборки", ДополнительныеПоляВыборки);
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	Возврат ТаблицаЗапроса.ВыгрузитьКолонку("РеквизитКлюча");

КонецФункции

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, ИмяТабличнойЧасти, ИмяРеквизитаКлюча, МассивКлючей, ВключаяПустойКлюч = Ложь, ОчищатьПриемник = Ложь)
	
	Если ОчищатьПриемник Тогда
		ОбъектЧекККМ[ИмяТабличнойЧасти].Очистить();
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		
		Если МассивКлючей = Неопределено Тогда
			Если ВключаяПустойКлюч Тогда
				СтрокаДокумента = ОбъектЧекККМ[ИмяТабличнойЧасти].Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТабличнойЧасти);
			КонецЕсли;
		Иначе
			Если МассивКлючей.Найти(СтрокаТабличнойЧасти[ИмяРеквизитаКлюча]) <> Неопределено
			 	ИЛИ (ВключаяПустойКлюч И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяРеквизитаКлюча])) Тогда
				СтрокаДокумента = ОбъектЧекККМ[ИмяТабличнойЧасти].Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТабличнойЧасти);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполнение табличную часть по номенклатуре и характеристике.
//
// Параметры:
//  ОбъектЧекККМ      - Чек ККМ
//  ИмяТабличнойЧасти - Строка
//  Организация       - Организация
//
&НаСервере
Процедура ЗаполнитьТабличнуюЧастьПоНоменклатуреХарактеристике(ОбъектЧекККМ, ИмяТабличнойЧасти, ТаблицаНоменклатураХарактеристика, ОчищатьПриемник = Ложь)
	
	Если ОчищатьПриемник Тогда
		ОбъектЧекККМ[ИмяТабличнойЧасти].Очистить();
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
	
	Для каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТабличнойЧасти);
		
		Если не ТаблицаНоменклатураХарактеристика.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			СтрокаДокумента = ОбъектЧекККМ[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТабличнойЧасти);
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоНоменклатуреХарактеристике()

// Определяет была ли оплата картой.
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Булево
//
&НаСервере
Функция ЕстьОплатаПлатежнойКартой(ОбъектЧекККМ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Оплата.ВидОплаты КАК Справочник.ВидыОплатЧекаККМ) КАК ВидОплаты,
	|	ВЫРАЗИТЬ(Оплата.Сумма КАК ЧИСЛО) КАК Сумма
	|ПОМЕСТИТЬ ТаблицаОплаты
	|ИЗ
	|	&Оплата КАК Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплаты.ВидОплаты,
	|	ТаблицаОплаты.Сумма
	|ИЗ
	|	ТаблицаОплаты КАК ТаблицаОплаты
	|ГДЕ
	|	ТаблицаОплаты.ВидОплаты.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта)
	|	И ТаблицаОплаты.Сумма > 0";
	
	Запрос.УстановитьПараметр("Оплата", ОбъектЧекККМ.Оплата.Выгрузить());
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой()

КонецФункции

&НаСервере
Процедура ВыполнитьОбменДаннымиПоРабочемуМесту()

		Если ОбменДаннымиВызовСервера.ОбменДаннымиВключен("ПоРабочемуМесту", ПланыОбмена.ПоРабочемуМесту.ЭтотУзел())
			И ЭтоРабочееМестоOffLine Тогда
			
			ВыборкаУзлов = ПланыОбмена.ПоРабочемуМесту.Выбрать();
			ЭтотУзелОбмена = ПланыОбмена.ПоРабочемуМесту.ЭтотУзел();
			Пока ВыборкаУзлов.Следующий() Цикл
				Если ВыборкаУзлов.Ссылка <> ЭтотУзелОбмена
					И ЭтотУзелОбмена.ПередаватьДанныеПослеКаждогоПробитогоЧека
				Тогда
					ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(ВыборкаУзлов.Ссылка, ОбменДаннымиСервер.ПараметрыОбмена() ,Ложь);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
КонецПроцедуры

// Общая процедура проверки реализации и погашения серийных номеров.
//
// Параметры:
//  ДокументОбъект - объект проводимого документа документа.
//  РежимПроведения - режим проведения документа.
//  Отказ - Переменная отвечающая за прерывание проведения.
//  Заголовок - Заголовок при ошибке.
//
&НаСервере
Процедура ПроверитьДвиженияСерийныхНомеровДляПогашения(
	Отказ,
	ТекстОшибки = "",
	Дата = Неопределено
	) 
	
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("ДокументОбъект", Объект);
	СтруктураДокумента.Вставить("ЭтоДокумент", Ложь);
	СтруктураДокумента.Вставить("ЭтоНовый", Истина);
	СтруктураДокумента.Вставить("ТабличнаяЧасть", Объект.ПогашениеПодарочныхСертификатов.Выгрузить());
	СтруктураДокумента.Вставить("ТабличнаяЧасть_ПогашениеПодарочныхСертификатов", Объект.ПогашениеПодарочныхСертификатов.Выгрузить());
		
	МаркетинговыеАкцииСерверПривилегированный.ПроверитьДвиженияСерийныхНомеровДляПогашения(
		СтруктураДокумента,
		Отказ,
		ТекстОшибки,
		Дата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЧтоНетОплатыПодарочнымСертификатом(
	ИмяТабличнойЧасти, 
	Отказ,
	ТекстОшибки = "",
	ОсобыйВыводСообщения = Ложь
	) 
	
	МаркетинговыеАкцииСервер.ПроверитьЧтоНетОплатыПодарочнымСертификатом(
		Объект,
		ИмяТабличнойЧасти,
		Отказ, 
		ТекстОшибки,
		ОсобыйВыводСообщения
	);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьЧекККМПоОрганизации(ИдентификаторСтрокиТПЧеков, ПерваяОрганизация, ПараметрыОперации, ПараметрыИнформации)
	
	СтрокаТПЧеков = ТабличноеПолеЧеков.НайтиПоИдентификатору(ИдентификаторСтрокиТПЧеков);
	
	Если ЗначениеЗаполнено(ЧекККМВОбработке) Тогда
		ОбъектЧекККМ = ЧекККМВОбработке.ПолучитьОбъект();
		Дата = ТекущаяДатаСеанса();
		ОбъектЧекККМ.Дата = Дата;
	//ИначеЕсли ЗначениеЗаполнено(СтрокаТПЧеков.ЧекККМСсылка) Тогда
	// Нельзя перезаписывать существующий чек, т.к. он может быть уже давно пробит.
	//	ОбъектЧекККМ = СтрокаТПЧеков.ЧекККМСсылка.ПолучитьОбъект();
	//	Дата = ТекущаяДатаСеанса();
	//	ОбъектЧекККМ.Дата = Дата;
	Иначе
		ОбъектЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
		ОбъектЧекККМ.Дата = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ОбъектЧекККМ.РежимРМК = Истина;
	
	ЗаполнитьЗначенияСвойств(ОбъектЧекККМ, Объект, ,"Ссылка, Дата");
	ЗаполнитьЗначенияСвойств(ОбъектЧекККМ, СтрокаТПЧеков, "ДоговорПлатежногоАгента, ВидНалога");
	
	ОбъектЧекККМ.Организация = СтрокаТПЧеков.Организация;
	
	СтруктураПоискаКассыККМ = Новый Структура;
	СтруктураПоискаКассыККМ.Вставить("Организация", СтрокаТПЧеков.Организация);
	
	СтрокиКассККМОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(СтруктураПоискаКассыККМ);
	Если СтрокиКассККМОрганизации.Количество() > 0  Тогда
		ОбъектЧекККМ.КассаККМ = СтрокиКассККМОрганизации[0].КассаККМ;
	КонецЕсли;
	
	СтруктураПоискаТоваров = Новый Структура();
	СтруктураПоискаТоваров.Вставить("Организация", СтрокаТПЧеков.Организация);
	Если СтрокиКассККМОрганизации[0].ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		СтруктураПоискаТоваров.Вставить("ДоговорПлатежногоАгента", СтрокаТПЧеков.ДоговорПлатежногоАгента);
		СтруктураПоискаТоваров.Вставить("ВидНалога", СтрокаТПЧеков.ВидНалога);
	КонецЕсли;
	
	МассивКлючей = ПолучитьМассивКлючей("КлючСвязи", СтруктураПоискаТоваров);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "Товары"                  , "КлючСвязи", МассивКлючей, , Истина);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "СкидкиНаценки"           , "КлючСвязи", МассивКлючей, , Истина);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "Подарки"                 , "КлючСвязи", Неопределено, ПерваяОрганизация, Истина);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "СерииПодарков"           , "КлючСвязи", Неопределено, ПерваяОрганизация, Истина);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "БонусныеБаллыКНачислению", "КлючСвязи", МассивКлючей, ПерваяОрганизация, Истина);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "АкцизныеМарки"           , "КлючСвязи", МассивКлючей, , Истина);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "КодыМаркировки"          , "КлючСвязи", МассивКлючей, , Истина);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "ПредъявленныеКодыОднократныхСкидок", "КлючСвязи", Неопределено, ПерваяОрганизация, Истина);
	
	МассивКлючей = ПолучитьМассивКлючей("КлючСвязиСерийныхНомеров", СтруктураПоискаТоваров);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "СерийныеНомера", "КлючСвязиСерийныхНомеров", МассивКлючей, , Истина);
	
	МассивКлючейСвязиТПЧеков = Новый Массив();
	МассивКлючейСвязиТПЧеков.Добавить(ИдентификаторСтрокиТПЧеков);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "Оплата"			        , "КлючСвязиТПЧеков", МассивКлючейСвязиТПЧеков, , Истина);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "ПогашениеПодарочныхСертификатов", "КлючСвязиТПЧеков", МассивКлючейСвязиТПЧеков, , Истина);
	
	ЗаполнитьТабличнуюЧастьПоНоменклатуреХарактеристике(ОбъектЧекККМ, "Серии"             , ОбъектЧекККМ.Товары, Истина);
	
	ЗаполнитьУправляемыеСкидки(ОбъектЧекККМ);
	
	ДобавитьОплатуБонусамиВЧек(ОбъектЧекККМ, Истина);
	
	ОбъектЧекККМ.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(ОбъектЧекККМ.Товары, Объект.ЦенаВключаетНДС);
	
	ПровестиЧекККМПередПробитием(ОбъектЧекККМ, ПараметрыОперации, ПараметрыИнформации);
	
	Если ПерваяОрганизация И ЗначениеЗаполнено(ОбъектЧекККМ.Ссылка) Тогда
		ЗаполнитьПредварительныйЛог(ОбъектЧекККМ.Ссылка);
	КонецЕсли;
	
	СтрокаТПЧеков.ЧекККМСсылка = ОбъектЧекККМ.Ссылка;
	
	Возврат ОбъектЧекККМ.Ссылка;
	
КонецФункции

&НаСервере
Функция ЗаписатьЧекККМПоВсемДанным(Организация, ПараметрыОперации, ПараметрыИнформации)
	
	Если ЗначениеЗаполнено(ЧекККМВОбработке) Тогда
		ОбъектЧекККМ = ЧекККМВОбработке.ПолучитьОбъект();
		
		Дата = ТекущаяДатаСеанса();
		ОбъектЧекККМ.Дата = Дата;
	Иначе
		ОбъектЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
		ОбъектЧекККМ.Дата = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ОбъектЧекККМ.РежимРМК = Истина;
	
	ЗаполнитьЧекПоВсемДанным(ОбъектЧекККМ);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Организация", Организация);
	
	СтрокиКассККМОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(СтруктураПоиска);
	Если СтрокиКассККМОрганизации.Количество() > 0  Тогда
		ОбъектЧекККМ.КассаККМ = СтрокиКассККМОрганизации[0].КассаККМ;
	КонецЕсли;
	ОбъектЧекККМ.Организация = Организация;
	
	ОбъектЧекККМ.СуммаДокумента = ОбработкаТабличнойЧастиТоварыКлиентСервер.ПолучитьСуммуДокумента(ОбъектЧекККМ.Товары, Объект.ЦенаВключаетНДС);
	
	ПровестиЧекККМПередПробитием(ОбъектЧекККМ, ПараметрыОперации, ПараметрыИнформации);
	
	Если ЗначениеЗаполнено(ОбъектЧекККМ.Ссылка) Тогда
		ЗаполнитьПредварительныйЛог(ОбъектЧекККМ.Ссылка);
	КонецЕсли;
	
	Возврат ОбъектЧекККМ.Ссылка;
	
КонецФункции

&НаСервере
Процедура ПровестиЧекККМПередПробитием(ОбъектЧекККМ, ПараметрыОперации, ПараметрыИнформации)
	
	Попытка
		ОбъектЧекККМ.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Доступность = Истина;
		ЗаголовокИнформации = НСтр("ru = 'Запись чека не выполнена.'");
		ПараметрыИнформации.ЗаголовокИнформации = ЗаголовокИнформации;
		ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'Запись чека не выполнена по причине:'") + Символы.ПС + ОписаниеОшибки;
		ПараметрыОперации.Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	Попытка
		//ВызватьИсключение "Все равно тут будет конфликт блокировок при выполнении транзакции";
		Если НачалоДня(ОбъектЧекККМ.Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
			ОбъектЧекККМ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Иначе
			ОбъектЧекККМ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.НеОперативный);
		КонецЕсли;
		ЛогированиеПоЧеку("ЧекПроведен", ОбъектЧекККМ.Ссылка);
	Исключение
		ОписаниеОшибкиПроведения = ОписаниеОшибки();
		Доступность = Истина;
		ЗаголовокИнформации = НСтр("ru = 'Проведение не выполнено.'");
		ПараметрыИнформации.ЗаголовокИнформации = ЗаголовокИнформации;
		ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'Проведение чека не выполнено по причине:'") + Символы.ПС + ОписаниеОшибкиПроведения;
		ПараметрыОперации.Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЧекККМ(ЧекККМСсылка, ПараметрыЗаполненияЧекаККМ, МассивСсылокЧеков, ВывестиДополнительноеСообщение, ПараметрыИнформации, СтатусПробитВККТ)

	ОбъектЧекККМ = ЧекККМСсылка.ПолучитьОбъект();
	
	ОбъектЧекККМ.РежимРМК = Истина;
	
	ЗаполнитьЗначенияСвойств(ОбъектЧекККМ, ПараметрыЗаполненияЧекаККМ);
	
	СтатусПробитВККТ = ОбъектЧекККМ.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый;
	
	ТекстДопИнформации = "";
	Попытка
		ОбъектЧекККМ.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Доступность = Истина;
		ТекстДопИнформации = НСтр("ru = 'Запись чека не выполнена по причине:'") + Символы.ПС + ОписаниеОшибки;
	КонецПопытки;
	
	МассивСсылокЧеков.Добавить(ЧекККМСсылка);
	
	СтатусЗаписанногоЧека = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЧекККМСсылка, "СтатусЧекаККМ");
	ЧекПробит = СтатусЗаписанногоЧека = Перечисления.СтатусыЧековККМ.Пробитый;
	
	Если ЧекПробит Тогда
		РезультатОбработкиНакоплений = СкидкиНаценкиВызовСервера.РезультатОбработкиНакопленийВДисконтномСервере(ЧекККМСсылка);
		Если РезультатОбработкиНакоплений.Свойство("СообщениеПользователю") Тогда
			ВывестиДополнительноеСообщение = Истина;
			ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка обновления накоплений в дисконтном сервере.'");
			ПараметрыИнформации.ТекстИнформации = НСтр("ru = 'При обновлении накоплений в дисконтном сервере возникли ошибки (см. журнал регистрации). Обратитесь к администратору'");
		КонецЕсли;
	Иначе
		ВывестиДополнительноеСообщение = Истина;
		ЕстьКарта = ЕстьОплатаПлатежнойКартой(ОбъектЧекККМ);
		Если ПараметрыЗаполненияЧекаККМ.Свойство("СтатусЧекаККМ")
			И ПараметрыЗаполненияЧекаККМ.СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Пробитый Тогда
			// Чек был пробит на ККТ, но не записан в системе
			Если ЕстьКарта Тогда
				ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Чек пробит, но не обновлен в базе. Была оплата платежной картой'");
			Иначе
				ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Чек пробит, но не обновлен в базе'");
			КонецЕсли;
			ПараметрыИнформации.ТекстИнформации = СокрЛП(НСтр("ru = 'Чеку нужно установить отметку о пробитии при закрытии смены.'") + Символы.ПС + ТекстДопИнформации);
		Иначе
			Если ЕстьКарта Тогда
				ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Чек не пробит. Была оплата платежной картой'");
			Иначе
				ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Чек не пробит.'");
			КонецЕсли;
			ПараметрыИнформации.ТекстИнформации = СокрЛП(НСтр("ru = 'Чек нужно пробить позднее или аннулировать при закрытии смены.'") + Символы.ПС + ТекстДопИнформации);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОперацииАннулированияЧекаККМ()
	
	// Подготовка таблицы общих параметров.
	ТипЧека = ?(Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат,
					Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств,
					Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);

	ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОперацииАннулированияЧека();
	ПараметрыОперации.ТипРасчета = ТипЧека;
	
	Возврат ПараметрыОперации;
	
КонецФункции

&НаКлиенте
Процедура ПробитьЧекККМЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	ПараметрыЗаполнения = ПараметрыОперации.ПараметрыЗаполнения;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		ПараметрыЗаполнения.Вставить("СтатусЧекаККМ", ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый"));
		ПараметрыЗаполнения.Вставить("Дата", ТекущаяДата());
		ПараметрыЗаполнения.Вставить("НомерСменыККМ", РезультатВыполнения.ВыходныеПараметры[0]);
		ПараметрыЗаполнения.Вставить("НомерЧекаККМ" , РезультатВыполнения.ВыходныеПараметры[1]);
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЗаполнения.НомерЧекаККМ) Тогда
			Если НомерДокументаКассыККМ[ПараметрыОперации.КассаККМ] <> Неопределено Тогда
				НомерЧекаККМ  = НомерДокументаКассыККМ[ПараметрыОперации.КассаККМ];
			Иначе
				НомерЧекаККМ  = ПорядковыйНомерПродажи;
			КонецЕсли;
			
			ПараметрыЗаполнения.Вставить("НомерЧекаККМ", НомерЧекаККМ);
		КонецЕсли;
		
	Иначе
		ЗаголовокИнформации = НСтр("ru = 'При печати чека произошла ошибка.'");
		ТекстСообщения = НСтр("ru = 'Чек не напечатан на устройстве для печати чеков.
		                            |Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
		
	КонецЕсли;
	
	//ПроверитьКорректностьПробитияЧека(РезультатВыполнения.Результат);
	
	ПараметрыЗаполнения.ЧекПробит = РезультатВыполнения.Результат;
	
	ВыполнитьОбработкуОповещения(ПараметрыОперации.ОповещениеПриЗавершении, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	
	НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
	Если НомерСмены = 0 Тогда
		НомерСмены = 1;
	КонецЕсли;
	
	НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
	Если НомерЧека = 0 Тогда
		НомерЧека = 1;
	КонецЕсли;
		
	ШапкаЧека.НомерСмены = НомерСмены;
	ШапкаЧека.НомерЧека = НомерЧека;
	
	Если ПараметрыВыполнения.Свойство("ЗаводскойНомерФН") И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
		ШапкаЧека.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
	
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НомерСмены"   , НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека"    , НомерЧека);
		ПараметрыОперации.Вставить("СерийныйНомер", ШапкаЧека.СерийныйНомер);
		
		ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(
			ДополнительныеПараметры.ЧекККМСсылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные"),
			ПараметрыОперации,
			Новый ОписаниеОповещения("ПослеПередачиЧекаЕГАИС", ЭтотОбъект, ПараметрыВыполнения));
		
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	Если НЕ Объект.ОперацияСДенежнымиСредствами Тогда
		Попытка
			ДеактивироватьСкидкиПоИдентификаторуЧека(ПараметрыВыполнения.ВходныеПараметры.ДокументОснование);
		Исключение
			СтрокаОшибки = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ЧекККМСсылка")
		И ЗначениеЗаполнено(ДополнительныеПараметры.ЧекККМСсылка) Тогда
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
	
		НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
		Если НомерСмены = 0 Тогда
			НомерСмены = 1;
		КонецЕсли;
		
		НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
		Если НомерЧека = 0 Тогда
			НомерЧека = 1;
		КонецЕсли;
		
		НомерЧека = НомерЧека + 1000000;
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НомерСмены"   , НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека"    , НомерЧека);
		ПараметрыОперации.Вставить("СерийныйНомер", Неопределено);
		
		Если ПараметрыВыполнения.Свойство("ЗаводскойНомерФН") И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
			ПараметрыОперации.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
		КонецЕсли;
		
		ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(
			ДополнительныеПараметры.ЧекККМСсылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию"),
			ПараметрыОперации,
			Неопределено);
			
	КонецЕсли;
	
	Если ДанныеОтправленыВБанк Тогда 
		ОбработатьОшибочноеПробитиеЧека();
	КонецЕсли;
	
КонецПроцедуры

// Процедура печати чека на фискальном регистраторе.
//
&НаКлиенте
Процедура ПробитьЧекККМ(ОповещениеПриЗавершении, ЧекККМСсылка, КассаККМ, ПараметрыЗаполнения)
	
	ПараметрыЗаполнения.Вставить("СтатусЧекаККМ", ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка"));
	ПараметрыЗаполнения.Вставить("ЧекПробит", Ложь);
	
	ПараметрыКассыККМ         = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ИспользоватьКассуККМБезПодключенияОборудования Тогда
		ПогаситьОднократныеСкидки();
		Если НомерДокументаКассыККМ[КассаККМ] <> Неопределено Тогда
			НомерЧекаККМ  = НомерДокументаКассыККМ[КассаККМ];
		Иначе
			НомерЧекаККМ  = ПорядковыйНомерПродажи;
		КонецЕсли;
		ПараметрыЗаполнения.Вставить("СтатусЧекаККМ", ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый"));
		ПараметрыЗаполнения.Вставить("Дата"         , ТекущаяДата());
		ПараметрыЗаполнения.Вставить("НомерЧекаККМ" , ПорядковыйНомерПродажи);
		ПараметрыЗаполнения.ЧекПробит = Истина;
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ПараметрыЗаполнения);
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторУстройстваФР = Неопределено Тогда
		ЗаголовокИнформации = НСтр("ru = 'Не выбрано устройство для печати чеков.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ПараметрыЗаполнения);
		Возврат;
		
	Иначе
		// Готовим данные
		Контекст = Новый Структура;
		Контекст.Вставить("ЧекККМСсылка"       , ЧекККМСсылка);
		Контекст.Вставить("КассаККМ"           , КассаККМ);
		Контекст.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
		Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		
		ЕстьАлкогольнаяПродукцияЕГАИС = Ложь;
		ТранспортныйМодуль = Неопределено;
		ДанныеЕГАИСДостаточны = Истина;
		ТекстСообщенияЕГАИС = "";
		
		НомерЧека = НомерДокументаКассыККМ[КассаККМ] + 1;
		ОбщиеПараметры  = ПодготовитьДанныеДляПробитияЧека(ЧекККМСсылка, 
									ТранспортныйМодуль, 
									ДанныеЕГАИСДостаточны, 
									НомерЧека,
									ТекстСообщенияЕГАИС, 
									ЕстьАлкогольнаяПродукцияЕГАИС);
		
		Контекст.Вставить("ЕстьАлкогольнаяПродукцияЕГАИС", ЕстьАлкогольнаяПродукцияЕГАИС);
		
		Если НЕ ДанныеЕГАИСДостаточны Тогда
			ЗаголовокИнформации = НСтр("ru = 'Не достаточно данных для передачи в ЕГАИС.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщенияЕГАИС);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ПараметрыЗаполнения);
			Возврат;
		КонецЕсли;
			
		Если ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		
			Контекст.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
			
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекККМЗавершение", ЭтотОбъект, Контекст);
		ПослеОткрытияЧека     = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека", ЭтотОбъект, Контекст);
		ПослеОшибкиПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОшибкиПечатиЧека", ЭтотОбъект, Контекст);
		
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(Оповещение, 
										УникальныйИдентификатор, 
										ОбщиеПараметры, 
										ИдентификаторУстройстваФР,
										,
										ПослеОткрытияЧека,
										ПослеОшибкиПечатиЧека);
		
	КонецЕсли;
	
КонецПроцедуры 

// Процедура аннулирования чека на фискальном регистраторе.
//
&НаКлиенте
Процедура НачатьАннулироватьЧекККМ(ОповещениеПриЗавершении, КассаККМ, ПараметрыЗаполнения)
	
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ИспользоватьКассуККМБезПодключенияОборудования Тогда
		
		ПараметрыЗаполнения.Вставить("НомерЧекаККМ", ПорядковыйНомерПродажи);
		ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		
		РезультатОперации = Новый Структура;
		РезультатОперации.Вставить("ЧекАннулирован", Истина);
		РезультатОперации.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, РезультатОперации);
		
	Иначе
	
		ПараметрыОперацииАннулирования = ПараметрыОперацииАннулированияЧекаККМ();
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("ЧекАннулирован", Ложь);
		ПараметрыОперации.Вставить("КассаККМ", КассаККМ);
		ПараметрыОперации.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
		ПараметрыОперации.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
		Оповещение = Новый ОписаниеОповещения("НачатьАннулироватьЧекККМЗавершение", ЭтотОбъект, ПараметрыОперации);
		МенеджерОборудованияКлиент.НачатьАннулированиеЧекаНаФискальномУстройстве(Оповещение, 
									УникальныйИдентификатор, 
									ПараметрыОперацииАннулирования, 
									ИдентификаторУстройстваФР);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьАннулироватьЧекККМЗавершение(РезультатВыполнения, ПараметрыОперации) Экспорт
	
	Если РезультатВыполнения.Результат Тогда  
		НомерСменыККМ = РезультатВыполнения.ВыходныеПараметры[0];
		НомерЧекаККМ  = РезультатВыполнения.ВыходныеПараметры[1]; 
		// Установить полученное значение номера чека реквизиту документа.
		ПараметрыОперации.ПараметрыЗаполнения.Вставить("НомерСменыККМ", НомерСменыККМ);
		ПараметрыОперации.ПараметрыЗаполнения.Вставить("НомерЧекаККМ",  НомерЧекаККМ);
		Если Не ЗначениеЗаполнено(ПараметрыОперации.ПараметрыЗаполнения.НомерЧекаККМ) Тогда
			ПараметрыОперации.ПараметрыЗаполнения.Вставить("НомерЧекаККМ", ПорядковыйНомерПродажи);
		КонецЕсли;
	Иначе
		ЗаголовокИнформации = НСтр("ru = 'При аннулировании чека произошла ошибка.'");
		ТекстСообщения = НСтр("ru = 'Чек не аннулирован на устройстве для печати чеков.
								|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
	КонецЕсли;
	
	ПараметрыОперации.ЧекАннулирован = РезультатВыполнения.Результат;
	ВыполнитьОбработкуОповещения(ПараметрыОперации.ОповещениеПриЗавершении, ПараметрыОперации);
	
	ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
	
КонецПроцедуры

// Создаем чеки из набора
//
// Параметры;
//  Отказ - Булево;
//
&НаКлиенте
Процедура СоздатьЧеки(Отказ, Печать = Ложь)

	Перем Ответ;
	
	Ответ = "";
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		ПроверитьЧтоНетОплатыПодарочнымСертификатом("Оплата", Отказ, Ответ, Истина);
		Если Отказ Тогда
			ОбработатьОтказОтОплаты();
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Ошибка возврат товара'"), Ответ);
			Возврат;
		КонецЕсли;
	Иначе
		ПроверитьДвиженияСерийныхНомеровДляПогашения(Отказ, Ответ, ТекущаяДата());
		Если Отказ Тогда
			ОбработатьОтказОтОплаты();
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Ошибки погашения подарочных сертификатов'"), Ответ);
			Если ДанныеОтправленыВБанк Тогда 
				ОбработатьОшибочноеПробитиеЧека();
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПечатьПакетаДокументовВозврат = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")
									И ИспользоватьНастройкуРМК И НаборПравИНастроек.ПриВозвратеРаспечатыватьПакетДокументов);
	
	МассивСсылокЧеков = Новый Массив;
	
	Если ТабличноеПолеЧеков.Количество() > 1 Тогда
		
		ПараметрыОперации = Новый Структура();
		ПараметрыОперации.Вставить("ПечатьПакетаДокументовВозврат", ПечатьПакетаДокументовВозврат);
		ПараметрыОперации.Вставить("Отказ", Отказ);
		ПараметрыОперации.Вставить("Печать", Печать);
		ПараметрыОперации.Вставить("МассивСсылокЧеков", МассивСсылокЧеков); 
		ПараметрыОперации.Вставить("ПерваяОрганизация", Истина); 
		ПараметрыОперации.Вставить("ЧекККМСсылка"     , Неопределено);
		ПараметрыОперации.Вставить("ТабличноеПолеЧеков", ТабличноеПолеЧеков); 
		ПараметрыОперации.Вставить("КоличествоЧеков"   , ТабличноеПолеЧеков.Количество()); 
		ПараметрыОперации.Вставить("ТекущийЧек"        , 0); 
		
		ЭтотОбъект.Доступность = Ложь;
		ПробитьЧекККМСложныйСлучайЗавершение(Неопределено, ПараметрыОперации);
		
	Иначе
		// Простой случай
		ПараметрыОперации = Новый Структура();
		ПараметрыОперации.Вставить("ПечатьПакетаДокументовВозврат", ПечатьПакетаДокументовВозврат);
		ПараметрыОперации.Вставить("Отказ", Отказ);
		ПараметрыОперации.Вставить("Печать", Печать);
		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
		
		ЧекККМСсылка = ЗаписатьЧекККМПоВсемДанным(ТабличноеПолеЧеков[0].Организация, ПараметрыОперации, ПараметрыИнформации);
		ТабличноеПолеЧеков[0].ЧекККМСсылка = ЧекККМСсылка;
		Если ПараметрыОперации.Отказ Тогда
			Отказ = ПараметрыОперации.Отказ;
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
			Если ДанныеОтправленыВБанк Тогда 
				ОбработатьОшибочноеПробитиеЧека();
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		СтатусЧекаККМ = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка");
		
		ПараметрыЗаполненияЧекаККМ = Новый Структура;
		
		ПараметрыОперации.Вставить("ЧекККМСсылка", ЧекККМСсылка);
		ПараметрыОперации.Вставить("МассивСсылокЧеков", МассивСсылокЧеков); 
		
		ЭтотОбъект.Доступность = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекККМПростойСлучайЗавершение", ЭтотОбъект, ПараметрыОперации);
		ПробитьЧекККМ(Оповещение, ЧекККМСсылка, ТабличноеПолеЧеков[0].КассаККМ, ПараметрыЗаполненияЧекаККМ);
		
	КонецЕсли;
	
	Отказ = ПараметрыОперации.Отказ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекККМСложныйСлучайЗавершение(РезультатОперации, ПараметрыОперации) Экспорт; 
	
	Если РезультатОперации <> Неопределено Тогда
		
		Если НЕ РезультатОперации.ЧекПробит Тогда
			ПараметрыОперации.Отказ = Истина;
		КонецЕсли;
		
		Если ПараметрыОперации.Отказ Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ЧекККМСсылка", ПараметрыОперации.ЧекККМСсылка);
			СтрокиЧека = ТабличноеПолеЧеков.НайтиСтроки(СтруктураПоиска);
			Если СтрокиЧека.Количество() > 0 Тогда
				Для Каждого СтрокаТаблицы Из СтрокиЧека Цикл
					СтрокаТаблицы.Пробит = Ложь;
				КонецЦикла;
			КонецЕсли;
			УдалитьПробитыеЧекиИзНабораИОтменитьНеПробитые(Истина);
			ОбработатьОшибочноеПробитиеЧека();
			Возврат;
		Иначе
			ЧекККМВОбработке = ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка");
		КонецЕсли;
		
		ЛогированиеПоЧеку("ЧекПробит", ПараметрыОперации.ЧекККМСсылка);
		ЛогированиеЧастичнойОплаты(ПараметрыОперации.ЧекККМСсылка);
		
		ВывестиДополнительноеСообщение = Ложь;
		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
		
		СтатусПробитВККТ = Ложь;
		ЗаписатьЧекККМ(ПараметрыОперации.ЧекККМСсылка, РезультатОперации, ПараметрыОперации.МассивСсылокЧеков, ВывестиДополнительноеСообщение, ПараметрыИнформации, СтатусПробитВККТ);
		
		Если ВывестиДополнительноеСообщение Тогда
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
		КонецЕсли;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ЧекККМСсылка", ПараметрыОперации.ЧекККМСсылка);
		СтрокиЧека = ТабличноеПолеЧеков.НайтиСтроки(СтруктураПоиска);
		Если СтрокиЧека.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из СтрокиЧека Цикл
				СтрокаТаблицы.Пробит = СтатусПробитВККТ;
			КонецЦикла;
		КонецЕсли;
		// Здесь проблема, как и в простом случае, в том, что чек уже успешно пробит
		// И нельзя делать проверку отказа для отката банковской транзакции
		// Потому что чек уже успешно отправлен в ОФД, но его статус не обновлен в БД
		// Такие чеки нужно отдельно помечать как пробитые при закрытии смены
		//Если ПараметрыОперации.Отказ И ДанныеОтправленыВБанк Тогда 
		//	ОбработатьОшибочноеПробитиеЧека();
		//КонецЕсли;
	
	КонецЕсли;
	
	Если ПараметрыОперации.ТекущийЧек < ПараметрыОперации.КоличествоЧеков Тогда
		
		СтрокаТабличногоПоляЧеков = ТабличноеПолеЧеков.Получить(ПараметрыОперации.ТекущийЧек);
		
		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
		
		ЧекККМСсылка = ЗаписатьЧекККМПоОрганизации(СтрокаТабличногоПоляЧеков.ПолучитьИдентификатор(), 
												   ПараметрыОперации.ПерваяОрганизация,
												   ПараметрыОперации,
												   ПараметрыИнформации);
		
		Если ПараметрыОперации.Отказ Тогда
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
			Если ДанныеОтправленыВБанк Тогда 
				ОбработатьОшибочноеПробитиеЧека();
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		ПараметрыОперации.ТекущийЧек = ПараметрыОперации.ТекущийЧек + 1;
		ПараметрыОперации.ПерваяОрганизация = Ложь;
		ПараметрыОперации.ЧекККМСсылка = ЧекККМСсылка;
		
		ПараметрыЗаполненияЧекаККМ = Новый Структура;
		
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекККМСложныйСлучайЗавершение", ЭтотОбъект, ПараметрыОперации);
		ПробитьЧекККМ(Оповещение, ЧекККМСсылка, СтрокаТабличногоПоляЧеков.КассаККМ, ПараметрыЗаполненияЧекаККМ);
		
	Иначе
		Если НЕ ЭтотОбъект.Доступность Тогда
			ЭтотОбъект.Доступность = Истина;
		КонецЕсли;
		СоздатьЧекиЗавершение(ПараметрыОперации.Отказ, ПараметрыОперации.ПечатьПакетаДокументовВозврат, ПараметрыОперации.МассивСсылокЧеков, ПараметрыОперации.Печать);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекККМПростойСлучайЗавершение(РезультатОперации, ПараметрыОперации) Экспорт; 
	
	ЭтотОбъект.Доступность = Истина;
		
	Если НЕ РезультатОперации.ЧекПробит Тогда
		ПараметрыОперации.Отказ = Истина;
	КонецЕсли;
		
	Если ПараметрыОперации.Отказ Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ЧекККМСсылка", ПараметрыОперации.ЧекККМСсылка);
		СтрокиЧека = ТабличноеПолеЧеков.НайтиСтроки(СтруктураПоиска);
		Если СтрокиЧека.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из СтрокиЧека Цикл
				СтрокаТаблицы.Пробит = Ложь;
			КонецЦикла;
		КонецЕсли;
		УдалитьПробитыеЧекиИзНабораИОтменитьНеПробитые(Истина);
		ОбработатьОшибочноеПробитиеЧека();
		Возврат;
	Иначе
		ЧекККМВОбработке = ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка");
	КонецЕсли;
	
	ЛогированиеПоЧеку("ЧекПробит", ПараметрыОперации.ЧекККМСсылка);
	ЛогированиеЧастичнойОплаты(ПараметрыОперации.ЧекККМСсылка);
	
	ВывестиДополнительноеСообщение = Ложь;
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	
	СтатусПробитВККТ = Ложь;
	ЗаписатьЧекККМ(ПараметрыОперации.ЧекККМСсылка, РезультатОперации, ПараметрыОперации.МассивСсылокЧеков, ВывестиДополнительноеСообщение, ПараметрыИнформации, СтатусПробитВККТ);
	
	Если ВывестиДополнительноеСообщение Тогда
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЧекККМСсылка", ПараметрыОперации.ЧекККМСсылка);
	СтрокиЧека = ТабличноеПолеЧеков.НайтиСтроки(СтруктураПоиска);
	Если СтрокиЧека.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из СтрокиЧека Цикл
			СтрокаТаблицы.Пробит = СтатусПробитВККТ;
		КонецЦикла;
	КонецЕсли;
	
	// Здесь проблема в том, что чек уже успешно пробит
	// И нельзя делать проверку отказа для отката банковской транзакции
	// Потому что чек уже успешно отправлен в ОФД, но его статус не обновлен в БД
	// Такие чеки нужно отдельно помечать как пробитые при закрытии смены
	//Если ПараметрыОперации.Отказ И ДанныеОтправленыВБанк Тогда 
	//	ОбработатьОшибочноеПробитиеЧека();
	//КонецЕсли;
	
	Если НЕ ЭтотОбъект.Доступность Тогда
		ЭтотОбъект.Доступность = Истина;
	КонецЕсли;
	СоздатьЧекиЗавершение(ПараметрыОперации.Отказ, ПараметрыОперации.ПечатьПакетаДокументовВозврат, ПараметрыОперации.МассивСсылокЧеков, ПараметрыОперации.Печать);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьПробитыеЧекиИзНабораИОтменитьНеПробитые(СоздаватьНовыйНабор)
	
	Если Объект.Товары.Количество() = 0 Тогда
		Если СоздаватьНовыйНабор Тогда
			СоздатьНовыйНаборКлиент();
		КонецЕсли;
	Иначе
		МассивОшибок = Новый Массив;
		Если ТабличноеПолеЧеков.Количество() > 0 Тогда
			УдалитьПробитыеЧекиИзНабораИОтменитьНеПробитыеСервер(МассивОшибок);
			СнятьОтборТоваров();
			Если Объект.Товары.Количество() = 0 Тогда
				Если СоздаватьНовыйНабор Тогда
					СоздатьНовыйНаборКлиент();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЭтотОбъект.Доступность Тогда
		ЭтотОбъект.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПробитыеЧекиИзНабораИОтменитьНеПробитыеСервер(МассивОшибок)
	
	УстановитьПривилегированныйРежим(Истина);
	ПерваяОрганизация = Истина;
	ФормироватьАдресОплаты = Ложь;
	Для Каждого СтрокаПоля Из ТабличноеПолеЧеков Цикл
		
		Если ЗначениеЗаполнено(СтрокаПоля.ЧекККМСсылка) Тогда
			УдалятьИзНабора = Ложь;
			Если СтрокаПоля.Пробит Тогда
				УдалятьИзНабора = Истина;
			Иначе
				ФискальнаяОперация = МенеджерОборудованияВызовСервера.ДанныеФискальнойОперации(СтрокаПоля.ЧекККМСсылка, , Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек); 
				Если ФискальнаяОперация <> Неопределено Тогда
					УдалятьИзНабора = Истина;
				КонецЕсли;
			КонецЕсли;
			Если НЕ УдалятьИзНабора Тогда
				Попытка
					СтруктураЧека = Новый Структура("СтатусЧекаККМ, Проведен");
					РеквизитыЧека = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаПоля.ЧекККМСсылка, СтруктураЧека);
					Если РеквизитыЧека.Проведен = Истина Тогда
						Если РеквизитыЧека.СтатусЧекаККМ <> Перечисления.СтатусыЧековККМ.Пробитый
							И РеквизитыЧека.СтатусЧекаККМ <> Перечисления.СтатусыЧековККМ.Архивный Тогда
							ЧекККМОбъект = СтрокаПоля.ЧекККМСсылка.ПолучитьОбъект();
							ЧекККМОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							СтрокаПоля.ЧекККМСсылка = Документы.ЧекККМ.ПустаяСсылка();
						Иначе
							УдалятьИзНабора = Истина;
						КонецЕсли;
					КонецЕсли;
				Исключение
					ОписаниеОшибки = ОписаниеОшибки();
					УдалятьИзНабора = Истина;
					СтруктураОшибки = Новый Структура("ЗаголовокИнформации, ТекстИнформации");
					ЗаголовокИнформации = НСтр("ru = 'Отмена проведения непробитого чека не выполнена.'");
					ТекстИнформации = НСтр("ru = 'Чек перенесен в список чеков. Отмена проведения не выполнена по причине:'") + Символы.ПС + ОписаниеОшибки;
					МассивОшибок.Добавить(СтруктураОшибки);
				КонецПопытки;
			КонецЕсли;
			Если УдалятьИзНабора Тогда
				ФормироватьАдресОплаты = Истина;
				ОрганизацияПоиска = СтрокаПоля.Организация;
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Организация", СтрокаПоля.Организация);
				
				СтрокиКассККМОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(СтруктураПоиска);
				
				Если СтрокиКассККМОрганизации.Количество() > 0  Тогда
					ТипОборудования = СтрокиКассККМОрганизации[0].ТипОборудования;
				Иначе
					ТипОборудования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПоля.КассаККМ, "ТипОборудования");
				КонецЕсли;
				Если ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
					СтруктураПоиска.Вставить("ДоговорПлатежногоАгента", СтрокаПоля.ДоговорПлатежногоАгента);
					СтруктураПоиска.Вставить("ВидНалога", СтрокаПоля.ВидНалога);
				КонецЕсли;
				
				МассивКлючей = ПолучитьМассивКлючей("КлючСвязи", СтруктураПоиска);
				МассивКлючейСерийных = ПолучитьМассивКлючей("КлючСвязиСерийныхНомеров", СтруктураПоиска);
				МассивКлючейСвязиТПЧеков = Новый Массив;
				МассивКлючейСвязиТПЧеков.Добавить(СтрокаПоля.ПолучитьИдентификатор());
				
				УдалитьСтрокиИзТабличнойЧастиПоКлючам("Товары"                            , "КлючСвязи", МассивКлючей);
				УдалитьСтрокиИзТабличнойЧастиПоКлючам("СкидкиНаценки"                     , "КлючСвязи", МассивКлючей);
				УдалитьСтрокиИзТабличнойЧастиПоКлючам("Подарки"                           , "КлючСвязи", Неопределено, ПерваяОрганизация);
				УдалитьСтрокиИзТабличнойЧастиПоКлючам("СерииПодарков"                     , "КлючСвязи", Неопределено, ПерваяОрганизация);
				УдалитьСтрокиИзТабличнойЧастиПоКлючам("БонусныеБаллыКНачислению"          , "КлючСвязи", МассивКлючей, ПерваяОрганизация);
				УдалитьСтрокиИзТабличнойЧастиПоКлючам("АкцизныеМарки"                     , "КлючСвязи", МассивКлючей);
				УдалитьСтрокиИзТабличнойЧастиПоКлючам("КодыМаркировки"                    , "КлючСвязи", МассивКлючей);
				УдалитьСтрокиИзТабличнойЧастиПоКлючам("ПредъявленныеКодыОднократныхСкидок", "КлючСвязи", Неопределено, ПерваяОрганизация);
				
				УдалитьСтрокиИзТабличнойЧастиПоКлючам("СерийныеНомера"                    , "КлючСвязиСерийныхНомеров", МассивКлючейСерийных);
				
				УдалитьСтрокиИзТабличнойЧастиПоКлючам("Оплата"                            , "КлючСвязиТПЧеков", МассивКлючейСвязиТПЧеков);
				УдалитьСтрокиИзТабличнойЧастиПоКлючам("ПогашениеПодарочныхСертификатов"   , "КлючСвязиТПЧеков", МассивКлючейСвязиТПЧеков);
				
				// удаляются серии по организации
				МассивУдаляемыхСтрок = Новый Массив;
				Для Каждого СтрокаСерии Из Объект.Серии Цикл
					Если СтрокаПоля.Организация = СтрокаСерии.Организация Тогда
						МассивУдаляемыхСтрок.Добавить(СтрокаСерии);
					КонецЕсли;
				КонецЦикла;
				Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
					Объект.Серии.Удалить(УдаляемаяСтрока);
				КонецЦикла;
				
				// удаляются бонусы по организации
				МассивУдаляемыхСтрок = Новый Массив;
				Для Каждого СтрокаОплатыБонусами Из Объект.ОплатаБонуснымиБаллами Цикл
					Если СтрокаПоля.Организация = СтрокаОплатыБонусами.Организация Тогда
						МассивУдаляемыхСтрок.Добавить(СтрокаОплатыБонусами);
					КонецЕсли;
				КонецЦикла;
				Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
					Объект.ОплатаБонуснымиБаллами.Удалить(УдаляемаяСтрока);
				КонецЦикла;
				
				Объект.УправляемыеСкидки.Очистить();
				СтрокаПоля.ЧекККМСсылка = Документы.ЧекККМ.ПустаяСсылка();
			КонецЕсли;
		//Иначе
		// По идее дальше чеков быть не должно.
		//	Прервать;
		// Но есть один нюанс...
		КонецЕсли;
		ПерваяОрганизация = Ложь;
	КонецЦикла;
	
	Если ДанныеОтправленыВБанк И ФормироватьАдресОплаты Тогда
		Если Объект.Оплата.Количество() > 0 Тогда 
			//АдресТаблицыОплат = АдресВХранилище("Оплата");
			//АдресТаблицыПогашениеПодарочныхСертификатов = АдресВХранилище("ПогашениеПодарочныхСертификатов");
			ПередаватьТаблицуОплат = Истина;
		Иначе
			//АдресТаблицыПогашениеПодарочныхСертификатов = "";
			//АдресТаблицыОплат = "";
			ПередаватьТаблицуОплат = Ложь;
			ОтменитьОплатуПК = Ложь;
			ДанныеОтправленыВБанк = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиИзТабличнойЧастиПоКлючам(ИмяТабличнойЧасти, ИмяРеквизитаКлюча, МассивКлючей = Неопределено, ВключаяПустойКлюч = Ложь)
	
	МассивУдаляемыхСтрок = Новый Массив;
	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		Если МассивКлючей = Неопределено Тогда
			Если ВключаяПустойКлюч Тогда
				Если СтрокаТабличнойЧасти[ИмяРеквизитаКлюча] = 0 Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТабличнойЧасти);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли МассивКлючей.Найти(СтрокаТабличнойЧасти[ИмяРеквизитаКлюча]) <> Неопределено
			ИЛИ (ВключаяПустойКлюч И СтрокаТабличнойЧасти[ИмяРеквизитаКлюча] = 0) Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаТабличнойЧасти);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		//Если ИмяТабличнойЧасти = "Товары" Тогда
		//	СтруктураПоискаСерий = Новый Структура;
		//	СтруктураПоискаСерий.Вставить("Номенклатура", УдаляемаяСтрока.Номенклатура);
		//	СтруктураПоискаСерий.Вставить("Характеристика", УдаляемаяСтрока.Характеристика);
		//КонецЕсли;
		Объект[ИмяТабличнойЧасти].Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЧекиЗавершение(Отказ, ПечатьПакетаДокументовВозврат, МассивСсылокЧеков, Печать = Ложь)
	
	Если НЕ Отказ Тогда 
		ОбработатьУспешноеПробитиеЧека();
		Если ПечатьПакетаДокументовВозврат Тогда
			ИмяМакета = "КМ3";
			ПолноеИмяОбъектаМетаданных = "Документ.ЧекККМ";
			
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ПолноеИмяОбъектаМетаданных,
					ИмяМакета,
					МассивСсылокЧеков,
					ЭтотОбъект,
					Неопределено);
		КонецЕсли;
		
		Если Печать Тогда
			НапечататьЧекиККМ(МассивСсылокЧеков)
		КонецЕсли;
		
		Для Каждого СсылкаНаЧек Из МассивСсылокЧеков Цикл
			КассаККМСсылка = КассаККМизЧекаСервер(СсылкаНаЧек);
			НомерДокументаКассыККМ[КассаККМСсылка] = НомерДокументаКассыККМ[КассаККМСсылка] + 1;
		КонецЦикла;
		ПорядковыйНомерПродажи = ПорядковыйНомерПродажи + 1;
		ВыполнитьОбменДаннымиПоРабочемуМесту();
	КонецЕсли;
	
	ЗавершитьОплатуТоваровПослеСозданияЧеков(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОплатуТоваровПослеСозданияЧеков(Отказ)
	
	ПечатьПослеПробитияЧека = Ложь;
	
	СнятьОтборТоваров();
	
	Если Отказ Тогда
		
		ВыведенаСдача = Ложь;
		Элементы.СтраницыИнформации.ТекущаяСтраница = Элементы.СтраницаИнформации;
		
	Иначе
		ПогаситьОднократныеСкидки();
		ВыведенаСдача = Истина;
		Элементы.СтраницыИнформации.ТекущаяСтраница = Элементы.СтраницаСдача;
		
		СоздатьНовыйНаборКлиент();
		
		ДисконтнаяКартаДляЗамены = Объект.ДисконтнаяКарта;
		
		ПодключитьОбработчикОжидания("Подключаемый_ДисплеяПокупателяПриПростое", 20, Истина);
		
	КонецЕсли;
	ОставлятьФлагТаблоСдачи = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресТаблицыПечатныхФорм(МассивСсылокЧеков)
	
	ТаблицаПечатныхФорм = УправлениеПечатью.КомандыПечатиФормы("Документ.ЧекККМ.Форма.ФормаДокумента");
	
	Если ЗначениеЗаполнено(АдресТаблицыПечатныхФорм) Тогда
		УдалитьИзВременногоХранилища(АдресТаблицыПечатныхФорм);
	КонецЕсли;
	
	ЕстьВозврат = Ложь;
	Если НЕ НаборПравИНастроек.ПриВозвратеРаспечатыватьПакетДокументов Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЧекККМ.Ссылка
		|ИЗ
		|	Документ.ЧекККМ КАК ЧекККМ
		|ГДЕ
		|	ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
		|	И ЧекККМ.Ссылка В(&МассивСсылокЧеков)";
		
		Запрос.УстановитьПараметр("МассивСсылокЧеков", МассивСсылокЧеков);
		Результат = Запрос.Выполнить();
		ЕстьВозврат = НЕ Результат.Пустой();
	КонецЕсли;
	
	ЕстьСерии = Ложь;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЧекККМСерии.Ссылка,
		|	ЧекККМСерии.Серия
		|ИЗ
		|	Документ.ЧекККМ.Серии КАК ЧекККМСерии
		|ГДЕ
		|	ЧекККМСерии.Ссылка В(&МассивСсылокЧеков)
		|	И ЧекККМСерии.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара)
		|	И ЧекККМСерии.Номенклатура.ВидНоменклатуры.СрокГарантии > 0";
		
		Запрос.УстановитьПараметр("МассивСсылокЧеков", МассивСсылокЧеков);
		Результат = Запрос.Выполнить();
		ЕстьСерии = НЕ Результат.Пустой();
		
	КонецЕсли;
	
	Если НЕ ЕстьВозврат Тогда
		УдалитьСтрокуВТаблицеПечатныхФорм(ТаблицаПечатныхФорм, "КМ3", "Идентификатор")
	КонецЕсли;
	
	Если НЕ ЕстьСерии Тогда
		УдалитьСтрокуВТаблицеПечатныхФорм(ТаблицаПечатныхФорм, "ГарантийныйТалон", "Идентификатор")
	КонецЕсли;
	
	Если Объект.ОперацияСДенежнымиСредствами Тогда 
		УдалитьСтрокуВТаблицеПечатныхФорм(ТаблицаПечатныхФорм, "ТоварныйЧек", "Идентификатор");
		УдалитьСтрокуВТаблицеПечатныхФорм(ТаблицаПечатныхФорм, "ТоварныйЧекДляПД", "Идентификатор");
		УдалитьСтрокуВТаблицеПечатныхФорм(ТаблицаПечатныхФорм, "ТоварныйЧекДляФР", "Идентификатор");
	КонецЕсли;
	
	АдресТаблицыПечатныхФорм = ПоместитьВоВременноеХранилище(ТаблицаПечатныхФорм, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуВТаблицеПечатныхФорм(ТаблицаПечатныхФорм, ЗначениеКолонки, ИмяКолонки)
	Если ТаблицаПечатныхФорм.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаПечатныхФорм.Найти(ЗначениеКолонки, ИмяКолонки);
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		ТаблицаПечатныхФорм.Удалить(СтрокаТаблицы)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекиККМ(МассивСсылокЧеков)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
					Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораПечатныхФорм.Открытие");
	
	ЗаполнитьАдресТаблицыПечатныхФорм(МассивСсылокЧеков);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресТаблицыПечатныхФорм", АдресТаблицыПечатныхФорм);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивСсылокЧеков", МассивСсылокЧеков);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораПечатныхФорм", ЭтотОбъект, ДополнительныеПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораПечатныхФорм", ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаСервере
Функция СтруктураКомандыПечати(Идентификатор)
	
	ТаблицаПечатныхФорм = ПолучитьИзВременногоХранилища(АдресТаблицыПечатныхФорм);
	
	Если ТаблицаПечатныхФорм.Колонки.Найти("Идентификатор") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаПечатныхФорм.Найти(Идентификатор, "Идентификатор");
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура НапечататьОтчетБезГашения(КассаККМ)

	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.НапечататьОтчетБезГашения");
	
	ПараметрыКассыККМ       = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройства = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
	ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка печати отчета без гашения'");
	
	Если ИспользоватьПодключаемоеОборудование И НЕ ИспользоватьКассуККМБезПодключенияОборудования Тогда
		
		ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		ФИОКассира = ОбщегоНазначенияРТВызовСервера.ФИОФизЛицаПользователяСУчетомИзмененныхПрав();
		Если Не ФИОКассира = "" Тогда
			ПараметрыОперации.Кассир = ФИОКассира;
		Иначе
			ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
		КонецЕсли;
		
		ПараметрыОперации = МенеджерОборудованияКлиентСервер.ПараметрыОткрытияЗакрытияСмены();
		ФИОКассира = ОбщегоНазначенияРТВызовСервера.ФИОФизЛицаПользователяСУчетомИзмененныхПрав();
		Если Не ФИОКассира = "" Тогда
			ПараметрыОперации.Кассир = ФИОКассира;
		Иначе
			ПараметрыОперации.Кассир = НСтр("ru='Администратор'");
		КонецЕсли;
		
		ЭтотОбъект.Доступность = Ложь;
		Оповещение = Новый ОписаниеОповещения("НапечататьОтчетБезГашенияЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьФормированиеОтчетаБезГашения(Оповещение, УникальныйИдентификатор, ПараметрыОперации, ИдентификаторУстройства);
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьОтчетБезГашенияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда 
		
		ТекстСообщения = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.
						|%ОписаниеОшибки%
						|Отчет на фискальном регистраторе не сформирован.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		
		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ПолучитьСтруктуруВыводимойВРМКИнформации();
		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка печати отчета без гашения'");
		ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
		
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// Ручные скидки

// Проверяет возможность работы с ручными скидками в строке.
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Булево
//
&НаКлиенте
Функция ВозможностьРаботыСРучнымиСкидкамиВСтроке()
	
	Если ОшибкаРасчетаСкидокПоЗаказуПокупателя() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОшибкаРасчетаСкидокПоДокументуРасчета() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НЕ СтрокаТабличнойЧасти.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат");
	
КонецФункции // ВозможностьРаботыСРучнымиСкидкамиВСтроке()

// Проверяет возможность работы с ручными скидками в строке.
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Булево
//
&НаКлиенте
Функция ВозможностьРаботыСРучнымиСкидкамиВЧеке()
	
	Если ОшибкаРасчетаСкидокПоЗаказуПокупателя() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОшибкаРасчетаСкидокПоДокументуРасчета() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"));
	
	СтрокиПодарочныхСертификатов = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиПодарочныхСертификатов.Количество() = Объект.Товары.Количество() Тогда
		Возврат Ложь; // Только подарочные сертификаты.
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ВозможностьРаботыСРучнымиСкидкамиВСтроке()

&НаСервере
Процедура НазначитьРучнуюСкидку(СуммаСкидкиНаценки)
	
	Если СуммаСкидкиНаценки <> 0 Тогда
		СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, Истина, Истина);
	Иначе
		СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры // НазначитьРучнуюСкидкуНаСервере()

// Очищает ручные скидки в табличной части Товары.
//
&НаСервере
Процедура ОтменитьРучныеСкидки()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	ЛогированиеВводаРучнойСкидки(НСтр("ru = 'Отмена ручной скидки в чеке'") , 0, 0);
	
КонецПроцедуры // ОтменитьРучныеСкидки()

// Запрашивает ввод ручной скидки (наценки) процентом в строке.
//
// Параметры:
//  ЭтоНаценка - Булево, Если Истина то обрабатывается наценка.
//
&НаКлиенте
Процедура ИзменитьПроцентРучнойСкидкиНаценкиВСтроке(ЭтоНаценка = Ложь)

	Если ВозможностьРаботыСРучнымиСкидкамиВСтроке() Тогда
		
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		
		Знак = ?(ЭтоНаценка, -1, 1);
		ЧислоВвода = Знак * СтрокаТабличнойЧасти.ПроцентРучнойСкидки;
		ЧислоВвода = ?(ЧислоВвода > 0, ЧислоВвода, 0);
		
		ЗаголовокФормы = ?(ЭтоНаценка, 
						НСтр("ru = 'Ручная наценка процентом в строке'"),
						НСтр("ru = 'Ручная скидка процентом в строке'"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
		ДополнительныеПараметры.Вставить("Знак"                , Знак);
		ДополнительныеПараметры.Вставить("ЗаголовокФормы"      , ЗаголовокФормы);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаЧислаИзменитьПроцентРучнойСкидкиНаценкиВСтроке", ЭтотОбъект, ДополнительныеПараметры);
		
		ПолучитьИнтерактивноЧисло(ЗаголовокФормы, 
									ЧислоВвода, 
									100,
									ЭтоНаценка,
									Ложь,
									ОбработчикОповещения)
			
	КонецЕсли;

КонецПроцедуры // ИзменитьПроцентРучнойСкидкиВСтроке()

// Запрашивает ввод ручной скидки (наценки) процентом в строке.
//
// Параметры:
//  ЭтоНаценка - Булево, Если Истина то обрабатывается наценка.
//
&НаКлиенте
Процедура ИзменитьСуммуРучнойСкидкиНаценкиВСтроке(ЭтоНаценка = Ложь)

	Если ВозможностьРаботыСРучнымиСкидкамиВСтроке() Тогда
		
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		
		Знак = ?(ЭтоНаценка, -1, 1);
		ЧислоВвода = Знак * СтрокаТабличнойЧасти.СуммаРучнойСкидки;
		ЧислоВвода = ?(ЧислоВвода > 0, ЧислоВвода, 0);
		МаксимальноеЗначение = ?(ЭтоНаценка, 0, СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаРучнойСкидки);
		
		ЗаголовокФормы = ?(ЭтоНаценка, 
						НСтр("ru = 'Ручная наценка суммой в строке'"),
						НСтр("ru = 'Ручная скидка суммой в строке'"));
						
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
		ДополнительныеПараметры.Вставить("Знак"                , Знак);
		ДополнительныеПараметры.Вставить("ЗаголовокФормы"      , ЗаголовокФормы);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаЧислаИзменитьСуммуРучнойСкидкиНаценкиВСтроке", ЭтотОбъект, ДополнительныеПараметры);
		
		ПолучитьИнтерактивноЧисло(ЗаголовокФормы, 
									ЧислоВвода, 
									МаксимальноеЗначение,
									ЭтоНаценка,
									Ложь,
									ОбработчикОповещения);
		
	КонецЕсли;

КонецПроцедуры // ИзменитьПроцентРучнойСкидкиВСтроке()

// Запрашивает ввод ручной скидки (наценки) процентом в строке.
//
// Параметры:
//  ЭтоНаценка - Булево, Если Истина то обрабатывается наценка.
//
&НаКлиенте
Процедура ИзменитьСуммуРучнойСкидкиНаценкиВЧеке(ЭтоНаценка = Ложь)

	Если ВозможностьРаботыСРучнымиСкидкамиВЧеке() Тогда
		
		СуммаБезАвтоматическойСкидки =ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСуммуДокументаБезПодарочныхСертификатов(Объект) + Объект.Товары.Итог("СуммаРучнойСкидки");
		СуммаРучнойСкидкиНаценки     = Объект.Товары.Итог("СуммаРучнойСкидки");
		
		Знак = ?(ЭтоНаценка, -1, 1);
		ЧислоВвода = Знак * СуммаРучнойСкидкиНаценки;
		ЧислоВвода = ?(ЧислоВвода > 0, ЧислоВвода, 0);
		
		ЗаголовокФормы = ?(ЭтоНаценка, 
						НСтр("ru = 'Ручная наценка суммой в чеке'"),
						НСтр("ru = 'Ручная скидка суммой в чеке'"));
		
		МаксимальнаяСуммаСкидки = ?(ЭтоНаценка, 0, СуммаБезАвтоматическойСкидки);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Знак"                , Знак);
		ДополнительныеПараметры.Вставить("ЗаголовокФормы"      , ЗаголовокФормы);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаЧислаИзменитьСуммуРучнойСкидкиНаценкиВЧеке", ЭтотОбъект, ДополнительныеПараметры);
		
		ПолучитьИнтерактивноЧисло(ЗаголовокФормы, 
									ЧислоВвода, 
									МаксимальнаяСуммаСкидки,
									ЭтоНаценка,
									Ложь,
									ОбработчикОповещения);
			
		
	КонецЕсли;

КонецПроцедуры

// Запрашивает ввод ручной скидки (наценки) процентом в строке.
//
// Параметры:
//  ЭтоНаценка - Булево, Если Истина то обрабатывается наценка.
//
&НаКлиенте
Процедура ИзменитьПроцентРучнойСкидкиНаценкиВЧеке(ЭтоНаценка = Ложь)

	Если ВозможностьРаботыСРучнымиСкидкамиВЧеке() Тогда
		
		СуммаРучнойСкидкиНаценки     = Объект.Товары.Итог("СуммаРучнойСкидки");
		СуммаБезАвтоматическойСкидки = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСуммуДокументаБезПодарочныхСертификатов(Объект)
									 	+ Объект.Товары.Итог("СуммаСкидкиОплатыБонусом")
										+ СуммаРучнойСкидкиНаценки;
		СуммаБезСкидок               = ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСуммуДокументаБезПодарочныхСертификатов(Объект) 
									 	+ Объект.Товары.Итог("СуммаАвтоматическойСкидки")
									 	+ Объект.Товары.Итог("СуммаСкидкиОплатыБонусом")
									 	+ СуммаРучнойСкидкиНаценки;
		
		ПроцентРучнойСкидкиНаценки = 0;
		
		Если СуммаБезСкидок > 0 Тогда
			ПроцентРучнойСкидкиНаценки = СуммаРучнойСкидкиНаценки * 100 / СуммаБезСкидок;
		КонецЕсли;
		
		Знак = ?(ЭтоНаценка, -1, 1);
		ЧислоВвода = Знак * ПроцентРучнойСкидкиНаценки;
		ЧислоВвода = ?(ЧислоВвода > 0, ЧислоВвода, 0);
		
		ЗаголовокФормы = ?(ЭтоНаценка, 
						НСтр("ru = 'Ручная наценка процентом в чеке'"),
						НСтр("ru = 'Ручная скидка процентом в чеке'"));
		
		
		МаксимальнаяСуммаСкидки = ?(ЭтоНаценка, 0, СуммаБезАвтоматическойСкидки);
		МаксимальныйПроцентСкидки = 0;
		
		Если СуммаБезСкидок > 0 Тогда
			МаксимальныйПроцентСкидки = МаксимальнаяСуммаСкидки * 100 / СуммаБезСкидок;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Знак"                , Знак);
		ДополнительныеПараметры.Вставить("ЗаголовокФормы"      , ЗаголовокФормы);
		ДополнительныеПараметры.Вставить("СуммаБезСкидок"      , СуммаБезСкидок);
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаЧислаИзменитьПроцентРучнойСкидкиНаценкиВЧеке", ЭтотОбъект, ДополнительныеПараметры);
		
		ПолучитьИнтерактивноЧисло(ЗаголовокФормы, 
									ЧислоВвода, 
									МаксимальныйПроцентСкидки,
									ЭтоНаценка,
									Ложь,
									ОбработчикОповещения);
			
	КонецЕсли;

КонецПроцедуры // ИзменитьПроцентРучнойСкидкиВСтроке()

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиСкидкаПроцентВЧеке()
	
	ИзменитьПроцентРучнойСкидкиНаценкиВЧеке();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиНаценкаПроцентВЧеке()
	
	ИзменитьПроцентРучнойСкидкиНаценкиВЧеке(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиСкидкаСуммаВЧеке()
	
	ИзменитьСуммуРучнойСкидкиНаценкиВЧеке();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиНаценкаСуммаВЧеке()
	
	ИзменитьСуммуРучнойСкидкиНаценкиВЧеке(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиСкидкаПроцентВСтроке()
	
	ИзменитьПроцентРучнойСкидкиНаценкиВСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиНаценкаПроцентВСтроке()
	
	ИзменитьПроцентРучнойСкидкиНаценкиВСтроке(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиСкидкаСуммаВСтроке()
	
	ИзменитьСуммуРучнойСкидкиНаценкиВСтроке();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиНаценкаСуммаВСтроке()
	
	ИзменитьСуммуРучнойСкидкиНаценкиВСтроке(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиОтменаСкидокВЧеке()
	
	Если ВозможностьРаботыСРучнымиСкидкамиВЧеке() Тогда
		
		ОтменитьРучныеСкидки();
		
		ОбновитьФорму();
		
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиОтменаСкидокВСтроке()
	
	Если ВозможностьРаботыСРучнымиСкидкамиВСтроке() Тогда
		
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		
		СтрокаТабличнойЧасти.СуммаРучнойСкидки = 0;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуСкидки", Ложь, Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		
		ОбновитьФорму();
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
		
		ЛогированиеВводаРучнойСкидки(НСтр("ru = 'Отмена ручной скидки в строке'") , 0, 0);
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция НельзяПродавать(Номенклатура, ТекстСообщения)
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		ДатаСеанса = ТекущаяДатаСеанса();
		Если ИспользоватьАссортимент Тогда
			СтруктураСостоянияАссортимента = АссортиментСервер.СтруктураСостоянияАссортиментаТовараВФормате(Номенклатура,
																											ФорматМагазина,
																											ДатаСеанса);
			Если НЕ СтруктураСостоянияАссортимента.РазрешеныПродажи Тогда
				ТекстСообщения = НСтр("ru = 'Номенклатура ""%1"" не включена в ассортимент или запрещена к продаже.'"); 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Номенклатура);
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если СкидкиНаценкиСерверПереопределяемый.ЗапрещенаПродажаТовара(Номенклатура,
																		Объект.Магазин,
																		ДатаСеанса) Тогда
			ТекстСообщения = НСтр("ru = 'Номенклатура ""%1"" запрещена к продаже.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Номенклатура);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере(ПорядковыйНомерПродажи)
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	СтруктураПараметры.Вставить("ПорядковыйНомерПродажи",           ПорядковыйНомерПродажи);
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	СведенияДокумента = Новый Структура;
	СегментИсключаемойНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "СегментИсключаемойНоменклатуры");
	СведенияДокумента.Вставить("СегментИсключаемойНоменклатуры", СегментИсключаемойНоменклатуры);
	СведенияДокумента.Вставить("Товары", Объект.Товары);
	СтруктураПараметры.Вставить("СведенияДокумента", СведенияДокумента);
	
	СтруктураПараметры.Вставить("КонтролироватьОстаткиТоваров", КонтролироватьОстаткиТоваровПриЗакрытииЧека);
	
	ДеревоСкидок = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	Возврат ПоместитьВоВременноеХранилище(ДеревоСкидок, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьУправляемыеСкидки(ОбъектЧекККМ)

	ОбъектЧекККМ.УправляемыеСкидки.Очистить();
	
	Для каждого ЭлементСписка Из УправляемыеСкидки Цикл
		СкидкаНаценка = УправляемыеСкидки[0].Значение;
		СтрокаТаблица = ОбъектЧекККМ.УправляемыеСкидки.Добавить();
		СтрокаТаблица.СкидкаНаценка = СкидкаНаценка;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ВозможнаОплатаБонусами(ДополнительныеПараметры)
	Результат = Ложь;
	ЗаголовокИнформации = "";
	ТекстИнформации = "";
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		
		Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
			БонуснаяПрограммаЛояльности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДисконтнаяКарта, "БонуснаяПрограммаЛояльности");
			Если ЗначениеЗаполнено(БонуснаяПрограммаЛояльности) Тогда
				УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					БонуснаяПрограммаЛояльности,
					"УменьшатьСуммуЧекаДляСкидок");
					Если УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Null
						ИЛИ УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Неопределено Тогда
					УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Ложь;
				КонецЕсли;
			Иначе
				УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Ложь;
			КонецЕсли;
		Иначе
			УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов = Ложь;
		КонецЕсли;
		ДополнительныеПараметры.Вставить("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов", УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов);
		
		Если Объект.ОплатаБонуснымиБаллами.Количество() > 0 Тогда
			ЗаголовокИнформации = НСтр("ru = 'Повторная оплата бонусами не возможна.'");
			ТекстИнформации = НСтр("ru = 'Оплата бонусами уже выбрана. Для изменения оплаты бонусами сначала ее следует отменить.'");
		Иначе
			Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
				БонуснаяПрограммаЛояльности = БонуснаяПрограммаКарты(Объект.ДисконтнаяКарта);
				Если ЗначениеЗаполнено(БонуснаяПрограммаЛояльности) Тогда
					ДополнительныеПараметры.Вставить("БонуснаяПрограммаЛояльности", БонуснаяПрограммаЛояльности);
					Результат = Истина;
				Иначе
					ЗаголовокИнформации = НСтр("ru = 'Оплата бонусами не возможна.'");
					ТекстИнформации = НСтр("ru = 'Дисконтная карта не участвует в бонусных программах.'");
				КонецЕсли;
			Иначе
				ЗаголовокИнформации = НСтр("ru = 'Оплата бонусами не возможна.'");
				ТекстИнформации = НСтр("ru = 'Не выбрана дисконтная карта.'");
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗаголовокИнформации = НСтр("ru = 'Оплата бонусами не возможна.'");
		ТекстИнформации = НСтр("ru = 'При возврате бонусные баллы сторнируются автоматически.'");
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ЗаголовокИнформации", ЗаголовокИнформации);
	ДополнительныеПараметры.Вставить("ТекстИнформации", ТекстИнформации);
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция БонуснаяПрограммаКарты(ДисконтнаяКарта)
	
	БонуснаяПрограмма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДисконтнаяКарта, "БонуснаяПрограммаЛояльности");
	
	Возврат БонуснаяПрограмма;
	
КонецФункции

&НаСервере
Процедура ОбработатьОплатуБонусами(Параметр)
	
	Объект.ЕстьОплатаБонусами = Истина;
	
	ТаблицаРаспределения = ПолучитьИзВременногоХранилища(Параметр.АдресВоВременномХранилище);
	ВидОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметр.БонуснаяПрограмма, "ВидОплаты");
	
	ТаблицаОрганизаций = ТаблицаРаспределения.Скопировать();
	ТаблицаОрганизаций.Свернуть("Организация", "КоличествоБонусовОплачено, СуммаОплачено");
	
	Для Каждого СтрокаОрганизации Из ТаблицаОрганизаций Цикл
		НоваяСтрока = Объект.ОплатаБонуснымиБаллами.Добавить();
		НоваяСтрока.Организация = СтрокаОрганизации.Организация;
		НоваяСтрока.БонуснаяПрограммаЛояльности = Параметр.БонуснаяПрограмма;
		НоваяСтрока.ВидОплаты = ВидОплаты;
		
		Если НоваяСтрока.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой Тогда
			НоваяСтрока.КоличествоБонусовВСкидках = СтрокаОрганизации.КоличествоБонусовОплачено;
			НоваяСтрока.СуммаБонусовВСкидках = СтрокаОрганизации.СуммаОплачено;
		Иначе
			НоваяСтрока.КоличествоБонусов = СтрокаОрганизации.КоличествоБонусовОплачено;
			НоваяСтрока.Сумма = СтрокаОрганизации.СуммаОплачено;
		КонецЕсли;
	КонецЦикла;
	
	Если ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой Тогда
		Для Каждого СтрокаРаспределения Из ТаблицаРаспределения Цикл
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("НомерСтроки", СтрокаРаспределения.НомерСтроки);
			СтрокиТоваров = Объект.Товары.НайтиСтроки(СтруктураПоиска);
			Если СтрокиТоваров.Количество() > 0 Тогда
				СтрокаТоваров = СтрокиТоваров[0];
				СтрокаТоваров.СуммаСкидкиОплатыБонусом = СтрокаРаспределения.СуммаОплачено;
				СтрокаТоваров.Сумма = СтрокаТоваров.Сумма - СтрокаТоваров.СуммаСкидкиОплатыБонусом;
				СтрокаТоваров.СуммаНДС = ОбработкаТабличнойЧастиТоварыСервер.РассчитатьСуммуНДС(
											СтрокаТоваров.Сумма,
											СтрокаТоваров.СтавкаНДС,
											Объект.ЦенаВключаетНДС);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийЧекККМ.Возврат
		И НЕ Объект.ПродажаПоЗаказу Тогда
		СкидкиНаценкиСервер.ОкруглитьЧекВПользуПокупателя(Объект, "Товары", "СкидкиНаценки");
	КонецЕсли;
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОплатуБонусамиВЧек(ОбъектЧекККМ, ОтбиратьПоОрганизации)
	
	Для Каждого СтрокаОплаты Из Объект.ОплатаБонуснымиБаллами Цикл
		Если ОтбиратьПоОрганизации И ОбъектЧекККМ.Организация <> СтрокаОплаты.Организация Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ОбъектЧекККМ.Оплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьОплатуБонусами()
	Если Объект.ЕстьОплатаБонусами Тогда
		БонусныеБаллыСервер.ОчиститьОплатуБонусамиВТоварах(Объект);
		Объект.ОплатаБонуснымиБаллами.Очистить();
		Объект.ЕстьОплатаБонусами = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РаспределитьОплатуБонусамиПоОрганизациямПриВосстановлении(ЧекККМВОбработке)
	СтруктураИменРеквизитовКарты = Новый Структура;
	СтруктураИменРеквизитовКарты.Вставить("БонуснаяПрограммаЛояльности", "БонуснаяПрограммаЛояльности");
	СтруктураИменРеквизитовКарты.Вставить("ВидОплаты", "БонуснаяПрограммаЛояльности.ВидОплаты");
	ЗначенияРеквизитовКарты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДисконтнаяКарта, СтруктураИменРеквизитовКарты);
	
	ТаблицаОрганизаций = Объект.Товары.Выгрузить();
	ТаблицаОрганизаций.Свернуть("Организация", "СуммаСкидкиОплатыБонусом");
	Для Каждого СтрокаОплаты Из ЧекККМВОбработке.Оплата Цикл
		НоваяСтрока = Объект.ОплатаБонуснымиБаллами.Добавить();
		НоваяСтрока.БонуснаяПрограммаЛояльности = ЗначенияРеквизитовКарты.БонуснаяПрограммаЛояльности;
		НоваяСтрока.ВидОплаты = СтрокаОплаты.ВидОплаты;
		
		НоваяСтрока.КоличествоБонусовВСкидках = СтрокаОплаты.КоличествоБонусовВСкидках;
		НоваяСтрока.СуммаБонусовВСкидках = СтрокаОплаты.СуммаБонусовВСкидках;
		НоваяСтрока.КоличествоБонусов = СтрокаОплаты.КоличествоБонусов;
		НоваяСтрока.СуммаБонусов = СтрокаОплаты.Сумма;
		
		СтрокаОрганизации = Неопределено;
		Если НоваяСтрока.ВидОплаты = Справочники.ВидыОплатЧекаККМ.ОплатаБонусамиКакСкидкой Тогда
			СтрокаОрганизации = ТаблицаОрганизаций.Найти(СтрокаОплаты.СуммаБонусовВСкидках, "СуммаСкидкиОплатыБонусом");
		Иначе
			СтрокаОрганизации = ТаблицаОрганизаций.Найти(СтрокаОплаты.Сумма, "СуммаСкидкиОплатыБонусом");
		КонецЕсли;
		Если СтрокаОрганизации = Неопределено Тогда
			НоваяСтрока.Организация = Объект.Организация;
		Иначе
			НоваяСтрока.Организация = СтрокаОрганизации.Организация;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьОплатуБонусамиКСторнированию()
	
	СкидкиНаценкиСерверПереопределяемый.ПодготовитьСкидкиИОплатуБонусамиКСторнированиюПриВозврате(Объект, Истина);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьСкидки()
	
	Если НЕ Объект.ПродажаПоЗаказу Тогда
		Если Объект.СкидкиРассчитаны Тогда
			СкидкиНаценкиСерверПереопределяемый.ОчиститьТоварыОтПодарков(Объект);
			СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "Товары", "СуммаСкидкиОплатыБонусом");
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
			Объект.Подарки.Очистить();
			Объект.СерииПодарков.Очистить();
			Объект.БонусныеБаллыКНачислению.Очистить();
			Объект.СкидкиРассчитаны = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДокументаОснования()
	
	УстановитьДоступностьОтдельныхЭлементовФормы("КомандаЧО09ОперацияДС", ДоступностьПриемаДС());
	Элементы.СтраницыИнформации.ТекущаяСтраница = Элементы.СтраницаИнформации;
	ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
	ЗаполнитьНеобходимостьВводаАкцизнойМарки();
	ЗаполнитьНеобходимостьВводаКодаМаркировки();
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьНеобходимостьВводаАкцизнойМарки()
	СтруктураПроверкиАМ = Новый Структура();
	СтруктураПроверкиАМ.Вставить("Магазин", Объект.Магазин);
	СтруктураПроверкиАМ.Вставить("Организация", Неопределено);
	СтруктураПроверкиАМ.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаАкцизнойМарки", СтруктураПроверкиАМ);
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтруктураПолейТЧ", ПолучитьСтруктуруПолейТЧ(СтруктураДействий));
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		СтруктураТЧ.Вставить("ТекущаяСтрока" , ПолучитьДанныеТекущейСтроки(ТекущаяСтрока, СтруктураТЧ.СтруктураПолейТЧ));
		СтруктураДействий.ПроверитьНеобходимостьВводаАкцизнойМарки.Организация = ТекущаяСтрока.Организация;
		
		КэшированныеЗначения = Неопределено;
		ОбработкаТабличнойЧастиТоварыВызовСервера.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, КэшированныеЗначения);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураТЧ.ТекущаяСтрока);
		
		// Интерфейс ЕГАИС
		ИнтеграцияЕГАИСРТКлиентСервер.УстановитьЗначениеСтатусАкцизныхМарокВСтроке(ТекущаяСтрока);
	КонецЦикла;
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьНеобходимостьВводаКодаМаркировки()
	
	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьНеобходимостьВводаКодаМаркировки", СтруктураПроверки);
	
	СтруктураТЧ = Новый Структура;
	СтруктураТЧ.Вставить("СтруктураПолейТЧ", ПолучитьСтруктуруПолейТЧ(СтруктураДействий));
	
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		СтруктураТЧ.Вставить("ТекущаяСтрока" , ПолучитьДанныеТекущейСтроки(ТекущаяСтрока, СтруктураТЧ.СтруктураПолейТЧ));
		
		КэшированныеЗначения = Неопределено;
		ОбработкаТабличнойЧастиТоварыВызовСервера.ПриИзмененииРеквизитовВТЧСервер(СтруктураТЧ, СтруктураДействий, КэшированныеЗначения);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураТЧ.ТекущаяСтрока);
		
		Если НЕ ТекущаяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
			Если ТекущаяСтрока.НеобходимостьВводаКодаМаркировки Тогда
				
				Если ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоКодовМаркировки
					И ТекущаяСтрока.КоличествоУпаковок <> 0 Тогда
					// А статус ставится для акцизных марок, т.к. используется одна колонка.
					ТекущаяСтрока.СтатусУказанияАкцизныхМарок = 1;
				Иначе
					Если Объект.ОперацияСДенежнымиСредствами Тогда 
						ТекущаяСтрока.СтатусУказанияАкцизныхМарок = 0;
					Иначе 
						ТекущаяСтрока.СтатусУказанияАкцизныхМарок = 2;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.СтатусУказанияАкцизныхМарок = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоследнееРедактируемыеЗначения(СтрокаТабличнойЧасти)
	
	Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда
		ПоследняяРедактируемаяНоменклатура = СтрокаТабличнойЧасти.Номенклатура;
		ПоследнееРедактированиеКоличество  = СтрокаТабличнойЧасти.КоличествоУпаковок;
		ПоследняяРедактируемаяСумма        = СтрокаТабличнойЧасти.Сумма;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСерийныйНомерИОткрытьВводСерии(СтрокаТабличнойЧасти, СерийныйНомер = Неопределено, ОткрыватьРедактированиеСтроки = Ложь, ОткрытаБлокирующаяФорма = Ложь)
	
	Если ЗначениеЗаполнено(СерийныйНомер) Тогда
		
		Если СтрокаТабличнойЧасти.КлючСвязиСерийныхНомеров = 0 Тогда
			ВремКлючСвязи = 0;
			Для Каждого СтрокаТЧ Из Объект.СерийныеНомера Цикл
				Если ВремКлючСвязи < СтрокаТЧ.КлючСвязиСерийныхНомеров Тогда
					ВремКлючСвязи = СтрокаТЧ.КлючСвязиСерийныхНомеров;
				КонецЕсли;
			КонецЦикла;
			СтрокаТабличнойЧасти.КлючСвязиСерийныхНомеров = ВремКлючСвязи + 1;
		КонецЕсли;
		
		СтрокаСерийныхНомеров = Объект.СерийныеНомера.Добавить();
		СтрокаСерийныхНомеров.СерийныйНомер = СерийныйНомер;
		СтрокаСерийныхНомеров.КлючСвязиСерийныхНомеров = СтрокаТабличнойЧасти.КлючСвязиСерийныхНомеров;
		ДобавленСерийныйНомер = Истина;
		ОткрыватьРедактированиеСтроки = Ложь;
	Иначе
		
		ДобавленСерийныйНомер = ДобавитьСерийныйНомер(СтрокаТабличнойЧасти, ОткрыватьРедактированиеСтроки);
		ОткрытьВводСерии(СтрокаТабличнойЧасти, ОткрыватьРедактированиеСтроки);
		ОткрытаБлокирующаяФорма = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеДисплеяПокупателяДобавлениеТовара(СтрокаТабличнойЧасти)
	
	ЭтотОбъект.ТекущийЭлемент       = Элементы.Товары;
	Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
		ОбновлениеДисплеяПокупателя("ДобавлениеТовара");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПредупреждениеОЗакрытииКассы()
	
	ЗаголовокИнформации = НСтр("ru = 'Закрытие кассы:'");
	ТекстИнформации     = НСтр("ru = 'Кассовая смена должна быть закрыта %1'");
	
	ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИнформации,
							Формат(РасчетноеВремяЗакрытияКассы, "ДЛФ=DDT"));
	ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
	
	ЭтотОбъект.Заголовок = ТекстИнформации;
КонецПроцедуры

#Область ЛогированиеСобытий

&НаСервере 
Процедура ЗаписатьЛогОперации(ВидДействияКассираВРМК, СтруктураЛога, ПредварительнаяЗапись = Ложь)
	
	Если НЕ НаборПравИНастроек.ЛогироватьДействияКассира Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ НаборПравИНастроек.ЛогируемыеДействия.Свойство(ВидДействияКассираВРМК) Тогда
		Возврат;
	КонецЕсли;
	
	НомерОперацииЛогирования = НомерОперацииЛогирования + 1;
	СтруктураЛога.Вставить("НомерОперации", НомерОперацииЛогирования);
	СтруктураЛога.Вставить("ДатаОперации" , ТекущаяДатаСеанса());
	СтруктураЛога.Вставить("Магазин"      , Объект.Магазин);
	
	Пользователь        = ОбщегоНазначенияРТКлиентСервер.ПользовательСУчетомИзмененныхПрав();
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	СтруктураЛога.Вставить("Пользователь", Пользователь);
	Если НЕ Пользователь = ТекущийПользователь Тогда
		СтруктураЛога.Вставить("ЗамещаемыйПользователь", ТекущийПользователь);
	КонецЕсли;
	
	Если ПредварительнаяЗапись Тогда
		СтруктураЛога.Вставить("ИдентификаторФормыПредварительныхДанных" , ИдентификаторФормыПредварительныхДанных);
	КонецЕсли;
	
	ЛогированиеДействийКассира.ЗаписатьЛогОперации(ВидДействияКассираВРМК, СтруктураЛога);
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьПредварительныйЛог(ЧекККМ)
	
	Если НЕ НаборПравИНастроек.ЛогироватьДействияКассира Тогда
		Возврат;
	КонецЕсли;
	
	ЛогированиеДействийКассира.ЗаполнитьПредварительныйЛог(ИдентификаторФормыПредварительныхДанных, ЧекККМ);
	
КонецПроцедуры

&НаСервере
Процедура ЛогированиеБезДополнительныхДанных(ВидДействияКассираВРМК, ВходящиеДанные = Неопределено, ИсходящиеДанные = Неопределено, УменьшениеСуммыЧекаККМ = 0)
	
	СтруктураЛога = Новый Структура;
	
	Если НЕ ВходящиеДанные = Неопределено Тогда
		СтруктураЛога.Вставить("ВходящиеДанные", ВходящиеДанные);
	КонецЕсли;
	
	Если НЕ ИсходящиеДанные = Неопределено Тогда
		СтруктураЛога.Вставить("ИсходящиеДанные", ИсходящиеДанные);
	КонецЕсли;
	
	Если НЕ УменьшениеСуммыЧекаККМ = 0 Тогда
		СтруктураЛога.Вставить("УменьшениеСуммыЧекаККМ", УменьшениеСуммыЧекаККМ);
	КонецЕсли;
	ЗаписатьЛогОперации(ВидДействияКассираВРМК, СтруктураЛога, Истина);
	ИсполняемаяОперацияЛогирования = "";
	
КонецПроцедуры

&НаСервере
Процедура ЛогированиеЗаписиИЗакрытияЧекаПоСтатусу(СтатусЧекаККМ, ЧекККМ)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ЧекККМ", ЧекККМ);
	
	Если СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Аннулированный Тогда
		ЗаписатьЛогОперации("ЧекАннулирован", СтруктураЛога)
	ИначеЕсли СтатусЧекаККМ = Перечисления.СтатусыЧековККМ.Отложенный Тогда
		ЗаписатьЛогОперации("ЧекОтложен", СтруктураЛога)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЛогированиеПоЧеку(ВидДействияКассираВРМК, ЧекККМ, ВходящиеДанные = Неопределено)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ЧекККМ", ЧекККМ);
	
	Если НЕ ВходящиеДанные = Неопределено Тогда
		СтруктураЛога.Вставить("ВходящиеДанные", ВходящиеДанные);
	КонецЕсли;
	
	ЗаписатьЛогОперации(ВидДействияКассираВРМК, СтруктураЛога)
	
КонецПроцедуры

&НаСервере
Процедура ЛогированиеНеизвестныхДанныхПО(ДанныеПО)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ВходящиеДанные", ДанныеПО);
	ЗаписатьВЛог = Ложь;
	Если ИсполняемаяОперацияЛогирования = "ВведенШтрихкод" Тогда
		ВидДействияКассираВРМК = "ВведенНеизвестныйШтрихкод";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "ВведенНомерКарты" Тогда
		ВидДействияКассираВРМК = "ВведенКодНеизвестнойКарты";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "СчитанШтрихкод" Тогда
		ВидДействияКассираВРМК = "СчитанНеизвестныйШтрихкод";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "СчитанаКарта" Тогда
		ВидДействияКассираВРМК = "СчитанКодНеизвестнойКарты";
		ЗаписатьВЛог = Истина;
	КонецЕсли;
	
	Если ЗаписатьВЛог Тогда
		ЗаписатьЛогОперации(ВидДействияКассираВРМК, СтруктураЛога, Истина);
		ИсполняемаяОперацияЛогирования = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЛогированиеРегистрацииНовойКарты(ДанныеПО, ИнформационнаяКарта)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ВходящиеДанные" , ДанныеПО);
	СтруктураЛога.Вставить("ИсходящиеДанные", ИнформационнаяКарта);
	ЗаписатьЛогОперации("РегистрацияНовойКарты", СтруктураЛога, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЛогированиеВводаДисконтнойКарты(ДанныеПО, ИнформационнаяКарта)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ВходящиеДанные" , ДанныеПО);
	СтруктураЛога.Вставить("ИсходящиеДанные", ИнформационнаяКарта);
	ЗаписатьВЛог = Ложь;
	Если ИсполняемаяОперацияЛогирования = "ВведенШтрихкод" Тогда
		ВидДействияКассираВРМК = "ВведенШтрихкодДисконтнойКарты";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "ВведенНомерКарты" Тогда
		ВидДействияКассираВРМК = "ВведенКодДисконтнойКарты";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "СчитанШтрихкод" Тогда
		ВидДействияКассираВРМК = "СчитанШтрихкодДисконтнойКарты";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "СчитанМагнитныйКод"
		ИЛИ ИсполняемаяОперацияЛогирования = "СчитанаКарта" Тогда
		ВидДействияКассираВРМК = "СчитанКодДисконтнойКарты";
		ЗаписатьВЛог = Истина;
	КонецЕсли;
	
	Если ЗаписатьВЛог Тогда
		ЗаписатьЛогОперации(ВидДействияКассираВРМК, СтруктураЛога, Истина);
		ИсполняемаяОперацияЛогирования = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЛогированиеВводаПродавца(ДанныеПО, ИнформационнаяКарта, Продавец)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ВходящиеДанные"               , ДанныеПО);
	СтруктураЛога.Вставить("ИсходящиеДанные"              , Продавец);
	СтруктураЛога.Вставить("ДополнительныеИсходящиеДанные", ИнформационнаяКарта);
	ЗаписатьВЛог = Ложь;
	Если ИсполняемаяОперацияЛогирования = "ВведенШтрихкод" Тогда
		ВидДействияКассираВРМК = "ВведенШтрихкодДисконтнойКарты";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "ВведенНомерКарты" Тогда
		ВидДействияКассираВРМК = "ВведенКодКартыПродавца";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "ВыбранПродавец" Тогда
		ВидДействияКассираВРМК = "ВыбранПродавец";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "СчитанШтрихкод" Тогда
		ВидДействияКассираВРМК = "СчитанШтрихкодКартыПродавца";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "СчитанаКарта" Тогда
		ВидДействияКассираВРМК = "СчитанКодКартыПродавца";
		ЗаписатьВЛог = Истина;
	КонецЕсли;
	
	Если ЗаписатьВЛог Тогда
		ЗаписатьЛогОперации(ВидДействияКассираВРМК, СтруктураЛога, Истина);
		ИсполняемаяОперацияЛогирования = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЛогированиеВводаНоменклатурыИХарактеристики(ДанныеПО, Номенклатура, Характеристика)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ВходящиеДанные"               , ДанныеПО);
	СтруктураЛога.Вставить("ИсходящиеДанные"              , Номенклатура);
	СтруктураЛога.Вставить("ДополнительныеИсходящиеДанные", Характеристика);
	
	ЗаписатьВЛог = Ложь;
	Если ИсполняемаяОперацияЛогирования = "ВведенШтрихкод" Тогда
		Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
			ВидДействияКассираВРМК = "ВведенШтрихкодНоменклатуры";
		Иначе
			ВидДействияКассираВРМК = "ВведенШтрихкодХарактеристики";
		КонецЕсли; 
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "СчитанШтрихкод" Тогда
		Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
			ВидДействияКассираВРМК = "СчитанШтрихкодНоменклатуры";
		Иначе
			ВидДействияКассираВРМК = "СчитанШтрихкодХарактеристики";
		КонецЕсли; 
		ЗаписатьВЛог = Истина;
	КонецЕсли;
	
	Если ЗаписатьВЛог Тогда
		ЗаписатьЛогОперации(ВидДействияКассираВРМК, СтруктураЛога, Истина);
		ИсполняемаяОперацияЛогирования = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЛогированиеВводаПодарочногоСертификата(ДанныеПО, Номенклатура, ПодарочногоСертификат)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ВходящиеДанные"               , ДанныеПО);
	СтруктураЛога.Вставить("ИсходящиеДанные"              , Номенклатура);
	СтруктураЛога.Вставить("ДополнительныеИсходящиеДанные", ПодарочногоСертификат);
	ЗаписатьВЛог = Ложь;
	Если ИсполняемаяОперацияЛогирования = "ВведенШтрихкод" Тогда
		ВидДействияКассираВРМК = "ВведенШтрихкодПодарочногоСертификата";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "ВведенНомерКарты" Тогда
		ВидДействияКассираВРМК = "ВведенКодКартыПодарочногоСертификата";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "СчитанШтрихкод" Тогда
		ВидДействияКассираВРМК = "СчитанШтрихкодПодарочногоСертификата";
		ЗаписатьВЛог = Истина;
	ИначеЕсли ИсполняемаяОперацияЛогирования = "СчитанаКарта" Тогда
		ВидДействияКассираВРМК = "СчитанКодКартыПодарочногоСертификата";
		ЗаписатьВЛог = Истина;
	КонецЕсли;
	
	Если ЗаписатьВЛог Тогда
		ЗаписатьЛогОперации(ВидДействияКассираВРМК, СтруктураЛога, Истина);
		ИсполняемаяОперацияЛогирования = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЛогированиеВводаРучнойСкидки(ТипСкидки, ЗначениеСкидки, УменьшениеСуммыЧекаККМ)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ИсходящиеДанные"              , ТипСкидки);
	СтруктураЛога.Вставить("ДополнительныеИсходящиеДанные", ЗначениеСкидки);
	СтруктураЛога.Вставить("УменьшениеСуммыЧекаККМ"       , УменьшениеСуммыЧекаККМ);
	ЗаписатьЛогОперации("ВводРучнойСкидки", СтруктураЛога, Истина);
	ИсполняемаяОперацияЛогирования = "";
	
КонецПроцедуры

&НаСервере
Процедура ЛогированиеВводаСерий(УменьшениеСуммыЧекаККМ)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("УменьшениеСуммыЧекаККМ", УменьшениеСуммыЧекаККМ);
	ЗаписатьЛогОперации("ВыбранаСерия", СтруктураЛога, Истина);
	ИсполняемаяОперацияЛогирования = "";
	
КонецПроцедуры

&НаСервере
Процедура ЛогированиеВводаЦены(Цена)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ИсходящиеДанные"       , Цена);
	ЗаписатьЛогОперации("ВводЦеныТоварамСНулевойЦеной", СтруктураЛога, Истина);
	ИсполняемаяОперацияЛогирования = "";
	
КонецПроцедуры

&НаСервере
Процедура ЛогированиеИзмененийСтроки(ВидДействияКассираВРМК, ВходящиеДанные, ВходящаяНоменклатура, ВходящаяХарактеристика, ИсходящиеДанные, ДополнительныеИсходящиеДанные, УменьшениеСуммыЧекаККМ)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ВходящиеДанные"               , ВходящиеДанные);
	СтруктураЛога.Вставить("ВходящаяНоменклатура"         , ВходящаяНоменклатура);
	СтруктураЛога.Вставить("ВходящаяХарактеристика"       , ВходящаяХарактеристика);
	СтруктураЛога.Вставить("ИсходящиеДанные"              , ИсходящиеДанные);
	СтруктураЛога.Вставить("ДополнительныеИсходящиеДанные", ДополнительныеИсходящиеДанные);
	СтруктураЛога.Вставить("УменьшениеСуммыЧекаККМ"       , УменьшениеСуммыЧекаККМ);
	
	ЗаписатьЛогОперации(ВидДействияКассираВРМК, СтруктураЛога, Истина);
	ИсполняемаяОперацияЛогирования = "";
	
КонецПроцедуры

&НаСервере
Процедура ЛогированиеУдаленияСтроки(Номенклатура, Характеристика, УменьшениеСуммыЧекаККМ)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ВходящаяНоменклатура"  , Номенклатура);
	СтруктураЛога.Вставить("ВходящаяХарактеристика", Характеристика);
	СтруктураЛога.Вставить("УменьшениеСуммыЧекаККМ", УменьшениеСуммыЧекаККМ);
	
	ЗаписатьЛогОперации("УдалениеСтрокиЧека", СтруктураЛога, Истина);
	ИсполняемаяОперацияЛогирования = "";
КонецПроцедуры

&НаСервере
Процедура ЛогированиеПоискИПодборНоменклатуры(Номенклатура, Характеристика)
	
	СтруктураЛога = Новый Структура;
	СтруктураЛога.Вставить("ИсходящиеДанные"              , Номенклатура);
	СтруктураЛога.Вставить("ДополнительныеИсходящиеДанные", Характеристика);
	
	ЗаписатьЛогОперации("ПоискИПодборНоменклатуры", СтруктураЛога, Истина);
	ИсполняемаяОперацияЛогирования = "";
КонецПроцедуры

&НаСервере
Процедура ЛогированиеЧастичнойОплаты(ЧекККМ)
	
	Если ЧекККМ.ОперацияСДенежнымиСредствами Тогда 
		ЛогированиеПоЧеку("ФискализацияЧастичнойОплаты", ЧекККМ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Автосохранение

&НаСервере
Процедура ОпределитьИмяФайлаБэкапа()
	
	РабочийКаталог = КаталогВременныхФайлов();
	
	// Так как при различных указаниях рабочего каталога возможно наличие или отсутствие
	// последнего слеша, приведем строку каталога к унифицированному виду - без слеша на конце.
	Если (Прав(РабочийКаталог, 1) = "\") ИЛИ (Прав(РабочийКаталог, 1) = "/") Тогда
		РабочийКаталог = Лев(РабочийКаталог, СтрДлина(РабочийКаталог) - 1);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.РабочееМесто)  Тогда
		РабочийКаталог = РабочийКаталог + "\" + Объект.РабочееМесто.Код;
	КонецЕсли;
	
	КаталогНаДиске = Новый Файл(РабочийКаталог);
	Если НЕ КаталогНаДиске.Существует() Тогда
		СоздатьКаталог(РабочийКаталог);
	КонецЕсли;
	
	ИмяФайлаБэкапа = РабочийКаталог + "\OrdrBack.xml";
КонецПроцедуры

&НаКлиенте
Процедура АвтосохранениеДанныхКлиент()
	
	АвтосохранениеДанных();
	
КонецПроцедуры


&НаСервере
// Процедура проверяет условия автосохранения документа
// при необходимости сохраняет его.
Процедура АвтосохранениеДанных()

	СохраненноеЗначение = ПолучитьАвтосохраненныеДанные();
	ТекущееЗначение     = ПолучитьТекущиеДанныеДляСохранения();
	
	Если ПолучитьХМLПредставление(СохраненноеЗначение) = ПолучитьХМLПредставление(ТекущееЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	// XML сериализация текущего объекта.
	Попытка
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайлаБэкапа, "UTF-16");
		ЗаписатьXML(ЗаписьXML, ТекущееЗначение);
		ЗаписьXML.Закрыть();
	Исключение
		ОчиститьАвтосохраненныеДанные();
	КонецПопытки;

КонецПроцедуры

&НаСервере
// Процедура анализирует необходимость восстановления
// работы с чеком.
Процедура ВосстановитьДанные()
	
	ОбъектЧекККМ = ПолучитьАвтосохраненныеДанные();
	
	Если ОбъектЧекККМ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Отказ = Ложь;
		
		ЗаполнитьДаннымиПоЧекуККМ(ОбъектЧекККМ, Отказ);
		
	Исключение
		СтрокаОшибки = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Процедура удаляет объект с диска.
//
Процедура ОчиститьАвтосохраненныеДанные()
	
	ФайлНаДиске = Новый Файл(ИмяФайлаБэкапа);

	Если ФайлНаДиске.Существует() Тогда
		УдалитьФайлы(ИмяФайлаБэкапа);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура получает объект с диска.
//
Функция ПолучитьАвтосохраненныеДанные()
	
	Результат = Неопределено;
	
	ФайлНаДиске = Новый Файл(ИмяФайлаБэкапа);
	Попытка
		Если ФайлНаДиске.Существует() Тогда
			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьФайл(ИмяФайлаБэкапа);
			Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
					И ЧтениеXML.Имя    = "DocumentObject.ЧекККМ" Тогда
					Попытка
						Результат = ПрочитатьXML(ЧтениеXML);
					Исключение
						Результат = Неопределено;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			ЧтениеXML.Закрыть();
			
		КонецЕсли;
	Исключение
		ОчиститьАвтосохраненныеДанные()
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьТекущиеДанныеДляСохранения()
	
	ОбъектЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
	
	ЗаполнитьЧекПоВсемДанным(ОбъектЧекККМ);
	ОбъектЧекККМ.Дата = Дата('00010101');
	
	Возврат ОбъектЧекККМ;
КонецФункции

&НаСервере
// Процедура считывает текстовое представление
// сериализованного файла и сравнивает его с текстовым представлением
// текущего объекта.
Функция ПолучитьХМLПредставление(ОбъектПредставления)
	
	Результат = "";
	
	// Сериализует текущий объект
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-16");
	ЗаписатьXML(ЗаписьXML, ОбъектПредставления);
	Результат = ЗаписьXML.Закрыть();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ОчиститьДанныеПередЗакрытием()
	
	ОчиститьАвтосохраненныеДанные();
	
	Если ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		УдалитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
		АдресПримененныхСкидокВоВременномХранилище = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруПолейТЧ(СтруктураДействий)

	Перем СтруктураПараметровДействия;

	СтруктураПолейТЧ = Новый Структура;

	Если СтруктураДействий.Свойство("ОбработатьШтрихкоды", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьСерийныеНомераПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КлючСтроки");
		СтруктураПолейТЧ.Вставить("КлючСвязиСерийныхНомеров");
		СтруктураПолейТЧ.Вставить("ИспользоватьСерийныеНомера");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;

	ИмяРеквизитаЦены = "";
	Если СтруктураДействий.Свойство("ОбнулитьЦену", ИмяРеквизитаЦены) Тогда
		Если НЕ ЗначениеЗаполнено(ИмяРеквизитаЦены)  Тогда
			ИмяРеквизитаЦены = "Цена";
		КонецЕсли;
		СтруктураПолейТЧ.Вставить(ИмяРеквизитаЦены, 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи") Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ШтрихКод");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПоВидуЦен") Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ШтрихКод");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПрошлойЗакупки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ЦенаПрошлойЗакупки", 0);
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДСПоСуммеСНДС") Тогда
		СтруктураПолейТЧ.Вставить("СуммаВсего", 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС"  , 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС" , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСумму") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"             , 0);
		СтруктураПолейТЧ.Вставить("Цена"              , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"              , 0);
		СтруктураПолейТЧ.Вставить("Количество"         , 0);
		СтруктураПолейТЧ.Вставить("Цена      "         , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
	КонецЕсли;
	
	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуФакт", ИмяКоличества) Тогда
		             	
		Если Не ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "Факт";
		КонецЕсли;
				
		СтруктураПолейТЧ.Вставить("СуммаФакт"                         , 0);
		СтруктураПолейТЧ.Вставить("Цена"                              , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок" + ИмяКоличества, 0);
				
	КонецЕсли;
    	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуВозвратСУчетомОснования") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Коэффициент"         , 1);
		СтруктураПолейТЧ.Вставить("ПроцентСкидкиНаценки", 1);
		СтруктураПолейТЧ.Вставить("Сумма"               , 0);
		СтруктураПолейТЧ.Вставить("Цена"                , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"  , 0);
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("Цена"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок", ИмяКоличества) Тогда
		
		СтруктураПолейТЧ.Вставить("Упаковка");
		Если ЗначениеЗаполнено(ИмяКоличества) Тогда
			СтруктураПолейТЧ.Вставить("КоличествоУпаковок" + ИмяКоличества, 0);
			СтруктураПолейТЧ.Вставить("Количество" + ИмяКоличества, 0);
		Иначе
			СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
			СтруктураПолейТЧ.Вставить("Количество" , 0);
		КонецЕсли;	
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницПлан") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПлан", 0);
		СтруктураПолейТЧ.Вставить("КоличествоПлан"        , 0);
	КонецЕсли;
	
	ИмяФакта = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницФакт",ИмяФакта) Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+ИмяФакта, 0);
		СтруктураПолейТЧ.Вставить("Количество"+ИмяФакта    , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьКоличествоУчет") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("Количество");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокФакт",ИмяФакта) Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+ИмяФакта, 0);
		СтруктураПолейТЧ.Вставить("Количество"+ИмяФакта    , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре") Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЭтоУслуга");
		СтруктураПолейТЧ.Вставить("ЭтоПодарочныйСертификат");
		СтруктураПолейТЧ.Вставить("ШтрихКод");

	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьТипНоменклатуры") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьДоговорПлатежногоАгента") Тогда
		СтруктураПолейТЧ.Вставить("ДоговорПлатежногоАгента");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьФлагРезервирования") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Резервировать");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьСкладПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВидНалога") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("ВидНалога");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОрганизациюПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("Организация");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССкладВСтроке") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССкладВШапке") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроставитьПродавца") Тогда
		СтруктураПолейТЧ.Вставить("Продавец");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДанныеПоДокументуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ДокументПродажи");
		СтруктураПолейТЧ.Вставить("ЧекККМ");
		СтруктураПолейТЧ.Вставить("Продавец");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена");
		СтруктураПолейТЧ.Вставить("Сумма");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("Количество");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПоСуммеВЗакупках") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("Цена");
		СтруктураПолейТЧ.Вставить("СуммаВсего");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПоСуммеСНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьАссортиментСтроки") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗапретРозничнойПродажи") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ШтрихКод");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьДанныеПоЗаказу") Тогда
		СтруктураПолейТЧ.Вставить("КодСтроки");
		СтруктураПолейТЧ.Вставить("ЗаказПокупателя");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПредставлениеТабло") Тогда
		СтруктураПолейТЧ.Вставить("ПредставлениеТабло");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьВводаАкцизнойМарки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("НеобходимостьВводаАкцизнойМарки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьВводаКодаМаркировки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("НеобходимостьВводаКодаМаркировки");
	КонецЕсли;
	
	Возврат СтруктураПолейТЧ;

КонецФункции

&НаСервере
Функция ПолучитьДанныеТекущейСтроки(ТекущаяСтрока, СтруктураПолейТЧ)

	ДанныеТекущейСтроки = Новый Структура;
	ОбщегоНазначенияРТКлиентСервер.ДобавитьВСтруктуру(ДанныеТекущейСтроки, СтруктураПолейТЧ);
	ЗаполнитьЗначенияСвойств(ДанныеТекущейСтроки, ТекущаяСтрока);

	Возврат ДанныеТекущейСтроки;

КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВидовВыручки(КассаККМ)
	
	ФинансыСервер.ЗаполнитьСписокВидовВыручки(СписокВидовВыручки, КассаККМ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	Если Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
		ОбновлениеДисплеяПокупателяДобавлениеТовара(Элементы.Товары.ТекущиеДанные);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
	КонецЕсли;
	ПересчитатьИлиОтменитьСкидкиИОплатуБонусами(Истина);
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИлиОтменитьСкидкиИОплатуБонусами(ТолькоПересчет = Ложь)
	
	Если АвтоматическийРасчетСкидок И Объект.Товары.Количество() > 0 Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
			ПодготовитьОплатуБонусамиКСторнированию();
		Иначе
			НазначитьАвтоматическиеСкидкиКлиент(Ложь, Ложь);
		КонецЕсли;
	Иначе
		Если (НЕ ТолькоПересчет) Тогда
			ОтменитьСкидкиИОплатуБонусамиСервер();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьСкидкиИОплатуБонусамиСервер()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа 
		И НЕ ЭтоЗачетАванса 
		И НЕ ЭтоОплатаРассрочки Тогда
		ОтменитьСкидки();
		ОтменитьОплатуБонусами();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНесвязанныеСерийныеНомера()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеСерийныеНомера(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНесвязанныеАкцизы()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеАкцизы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНесвязанныеКодыМаркировки()
	
	ОбработкаТабличнойЧастиТоварыСервер.УдалитьНесвязанныеКодыМаркировки(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСерийныеНомераВСтроке(ИдентификаторСтроки)
	
	Если Объект.СерийныеНомера.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязиСерийныхНомеров", СтрокаТабличнойЧасти.КлючСвязиСерийныхНомеров);

	МассивЭлементов = Объект.СерийныеНомера.НайтиСтроки(СтруктураПоиска);
	Если МассивЭлементов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	КоличествоОсталось = 0;
	Для Каждого СтрокаМассива Из МассивЭлементов Цикл
		ВладелецНомера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаМассива.СерийныйНомер, "Владелец");
		Если СтрокаТабличнойЧасти.Номенклатура = ВладелецНомера Тогда
			КоличествоОсталось = КоличествоОсталось + 1;
		Иначе
			Объект.СерийныеНомера.Удалить(СтрокаМассива);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаТабличнойЧасти.КоличествоУпаковок = КоличествоОсталось;

КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияСервер()
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", УдаляемыйКлючСвязи);
	
	ЕстьУдаляемыеСтроки = УдаляемыйКлючСвязи > 0;
	
	Если Объект.ПродажаПоЗаказу Тогда
		Если ЕстьУдаляемыеСтроки Тогда
			
			СтрокиСкидкиНаценки = Объект.СкидкиНаценки.НайтиСтроки(СтруктураПоиска);

			Для каждого СтрокаСкидкиНаценки Из СтрокиСкидкиНаценки Цикл

				Объект.СкидкиНаценки.Удалить(СтрокаСкидкиНаценки);

			КонецЦикла;
			УдаляемыйКлючСвязи = 0;
		КонецЕсли;
	КонецЕсли;
	
	УдалитьНесвязанныеСерийныеНомера();
	УдалитьНесвязанныеАкцизы();
	УдалитьНесвязанныеКодыМаркировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзмененииУпаковки(СтрокаТабличнойЧасти)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи" ,ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруЗаполненияЦеныПродажиВСтрокеТЧ(Объект, Истина));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиТоварыКлиент.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(Объект.Товары, ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	
	Если ОбработкаТабличнойЧастиТоварыКлиент.НеобходимоОбновитьСтатусыСерий(
		Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбновитьФорму();
	ОбновлениеДисплеяПокупателя("ИзмененияКоличества");
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиИУстановитьКарту(РезультатОткрытияФормы, ДополнительныеПараметры)
	
	РезультатыПоиска = НайтиКарту(РезультатОткрытияФормы, ДополнительныеПараметры);
	Если РезультатыПоиска.Количество() = 0 Тогда
		СтрокаСообщения = НСтр("ru = 'Дисконтная карта для ""%1"" не найдена'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, РезультатОткрытияФормы.ВведенноеЧисло);
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("", СтрокаСообщения);
	ИначеЕсли РезультатыПоиска.Количество() = 1 Тогда
		ДисконтнаяКарта = РезультатыПоиска[0];
		ОповещениеУстановкиКарты(ДисконтнаяКарта, Неопределено);
	Иначе
		
		// &ЗамерПроизводительности
		ОценкаПроизводительностиРТКлиент.НачатьЗамер(
						Истина, "ОбщаяФорма.ВыборИнформационнойКарты.Открытие");
		
		ОповещениеВыбораКарты = Новый ОписаниеОповещения("ОповещениеУстановкиКарты", ЭтотОбъект);
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("МассивПоискаКарт", РезультатыПоиска);
		ОткрытьФорму(
			"ОбщаяФорма.ВыборИнформационнойКарты",
			ПараметрыОткрытия,
			ЭтотОбъект,
			,
			,
			,
			ОповещениеВыбораКарты,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НайтиКарту(РезультатОткрытияФормы, ДополнительныеПараметры)
	
	РезультатыПоиска = Новый Массив;
	
	ЗапросПоиска = Новый Запрос;
	Если РезультатОткрытияФормы.РежимПоискаКарты = "НомерТелефона" Тогда
		
		ЗапросПоиска.Текст = ИнформационныеКартыВызовСервера.ТекстЗапросаПоискаКарты(1);
		ЗапросПоиска.УстановитьПараметр("ВведенноеЧисло", РезультатОткрытияФормы.ВведенноеЧисло);
		ЗапросПоиска.УстановитьПараметр("ВведенноеЧислоСВосьмеркой", "8" + Сред(РезультатОткрытияФормы.ВведенноеЧисло, 2));
		
	ИначеЕсли РезультатОткрытияФормы.РежимПоискаКарты = "ФИО" Тогда
		
		ЗапросПоиска.Текст = ИнформационныеКартыВызовСервера.ТекстЗапросаПоискаКарты(2);
		ЗапросПоиска.УстановитьПараметр("Наименование", "%" + РезультатОткрытияФормы.ВведенноеЧисло + "%");
		
		ТипыИнформации = Новый Массив;
		ТипыИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		ТипыИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		ЗапросПоиска.УстановитьПараметр("ТипыИнформации", ТипыИнформации);
		
	ИначеЕсли РезультатОткрытияФормы.РежимПоискаКарты = "Email" Тогда
		
		ЗапросПоиска.Текст = ИнформационныеКартыВызовСервера.ТекстЗапросаПоискаКарты(3);
		ЗапросПоиска.УстановитьПараметр("АдресЭП", "%" + РезультатОткрытияФормы.ВведенноеЧисло + "%");
		
	Иначе
		Возврат РезультатыПоиска;
	КонецЕсли;
	ЗапросПоиска.УстановитьПараметр("ТипКарты", Перечисления.ТипыИнформационныхКарт.Дисконтная);
	ЗапросПоиска.УстановитьПараметр("ПустойВладелец", Справочники.ФизическиеЛица.ПустаяСсылка());
	
	Выборка = ЗапросПоиска.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("Ссылка", Выборка.Ссылка);
		СтруктураСтроки.Вставить("ВладелецКарты", Выборка.ВладелецКарты);
		СтруктураСтроки.Вставить("НомерТелефона", Выборка.НомерТелефона);
		СтруктураСтроки.Вставить("АдресЭП"      , Выборка.АдресЭП);
		РезультатыПоиска.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат РезультатыПоиска;
	
КонецФункции

&НаСервере
Функция ОтправитьСообщениеСКодом(КодПроверкиСМС, НомерТелефона)
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатОтправки = Новый Структура;
	РезультатОтправки.Вставить("Результат", Ложь);
	РезультатОтправки.Вставить("ОписаниеОшибки", "");
	РезультатОтправки.Вставить("НомерТелефона", "");
	Если ЗначениеЗаполнено(НомерТелефона) Тогда
		ТекстСообщения = НСтр("ru = 'Код подтверждения для выбора дисконтной карты %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КодПроверкиСМС);
		МассивНомеров = Новый Массив;
		МассивНомеров.Добавить(НомерТелефона);
		РезультатОтправкиБСП = ОтправкаSMS.ОтправитьSMS(МассивНомеров, ТекстСообщения, Неопределено, Ложь);
		Если РезультатОтправкиБСП.ОтправленныеСообщения.Количество() = 0 Тогда
			Если РезультатОтправкиБСП.Свойство("ОписаниеОшибки") Тогда
				РезультатОтправки.ОписаниеОшибки = РезультатОтправкиБСП.ОписаниеОшибки;
			КонецЕсли;
		Иначе
			РезультатОтправки.Результат = Истина;
		КонецЕсли;
	Иначе
		РезультатОтправки.ОписаниеОшибки = НСтр("ru = 'Для владельца карты не задан номер телефона. Выслать код подтверждения не удалось'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	Возврат РезультатОтправки;
	
КонецФункции

Функция ОтправитьEmailСКодом(КодПроверки, АдресЭП)
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатОтправки = Новый Структура;
	РезультатОтправки.Вставить("Результат", Ложь);
	РезультатОтправки.Вставить("ОписаниеОшибки", "");
	РезультатОтправки.Вставить("АдресЭП", "");
	Если ЗначениеЗаполнено(АдресЭП) Тогда
		ТекстСообщения = НСтр("ru = 'Код подтверждения для выбора дисконтной карты %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КодПроверки);
		
		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить("Кому", АдресЭП);
		ПараметрыПисьма.Вставить("Тема", КодПроверки);
		ПараметрыПисьма.Вставить("Тело", ТекстСообщения);
		
		РезультатОтправкиБСП = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(
									РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(),
									ПараметрыПисьма);
		
		Если ЗначениеЗаполнено(РезультатОтправкиБСП)  Тогда
			РезультатОтправки.Результат = Истина;
		Иначе
			РезультатОтправки.ОписаниеОшибки = НСтр("ru = 'Нет возможности отправить E-mail'") ;
		КонецЕсли;
	Иначе
		РезультатОтправки.ОписаниеОшибки = НСтр("ru = 'Для владельца карты не задан E-mail. Выслать код подтверждения не удалось'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	Возврат РезультатОтправки;
	
КонецФункции

&НаКлиенте
Процедура УстановкаКартыЗавершение(ДисконтнаяКарта)
	
	ЛогированиеБезДополнительныхДанных("ВыбранаДисконтнаяКарта", ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка"), Объект.ДисконтнаяКарта);
	Объект.ДисконтнаяКарта = ДисконтнаяКарта;
	Модифицированность = Истина;
	ТекстСообщенияСменыКарты = "";
	ПриИзмененииДисконтнаяКартаСервер(ТекстСообщенияСменыКарты);
	Если ПустаяСтрока(ТекстСообщенияСменыКарты) Тогда
		ПровестиОпрос();
		ОбновитьФорму();
	Иначе
		ЗаголовокИнформации = "";
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщенияСменыКарты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОплатыБонусами(ВходящиеПараметры)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
					Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаОплатыБонуснымиБаллами.Открытие");
	
	БонуснаяПрограммаЛояльности = ВходящиеПараметры.БонуснаяПрограммаЛояльности;
	ПараметрыОткрытия = Новый Структура;
	Если ВходящиеПараметры.Свойство("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов")
		И ВходящиеПараметры.УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов Тогда
		ПараметрыОткрытия.Вставить("УменьшатьСуммуЧекаДляСкидокНаСуммуБонусов", Истина);
	Иначе
		ПеренестиСкидкиПодаркиВТоварыСервер();
		ОтменитьОплатуБонусами();
		ОбновитьФорму();
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("Магазин", Объект.Магазин);
	ПараметрыОткрытия.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	АдресТоваров = АдресВХранилище("Товары");
	ПараметрыОткрытия.Вставить("АдресТабличнойЧастиТовары", АдресТоваров);
	ПараметрыОткрытия.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("БонуснаяПрограммаЛояльности", БонуснаяПрограммаЛояльности);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОповещениеОткрытьФормуОплатыБонуснымиБаллами", ЭтотОбъект, ПараметрыОткрытия);
	
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаОплатыБонуснымиБаллами",
					ПараметрыОткрытия,
					ЭтотОбъект,
					,
					,
					,
					ОповещениеОЗакрытии,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоследнийПробитыйЧекПродажи(МассивКассККМ)
	ПоследнийЧек = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.Дата КАК Дата
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.СтатусЧекаККМ = &Пробитый
	|	И ЧекККМ.ВидОперации  = &Продажа
	|	И ЧекККМ.КассаККМ В(&МассивКассККМ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	Ссылка УБЫВ";
	Запрос.УстановитьПараметр("Пробитый", Перечисления.СтатусыЧековККМ.Пробитый);
	Запрос.УстановитьПараметр("Продажа", Перечисления.ВидыОперацийЧекККМ.Продажа);
	Запрос.УстановитьПараметр("МассивКассККМ", МассивКассККМ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПоследнийЧек = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ПоследнийЧек;
КонецФункции

&НаСервере
Процедура ДополнитьСерииПодаркаИзСписка(ИдентификаторСтроки, СтруктураЗаполнения)
	
	СтрокаПодарка = Объект.Подарки.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаПодарка <> Неопределено Тогда
		СерииВХранилище = ПолучитьИзВременногоХранилища(СтруктураЗаполнения.АдресСерийВХранилище);
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", СтрокаПодарка.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", СтрокаПодарка.Характеристика);
		СтрокиСерий = СерииВХранилище.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаСерии Из СтрокиСерий Цикл
			НоваяСтрока = Объект.СерииПодарков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерии);
			НоваяСтрока.КлючСвязи = СтрокаПодарка.КлючСвязи;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоВозвратДеньВДень()
	
	Возврат НЕ ЗначениеЗаполнено(Объект.ЧекККМПродажа.ОтчетОРозничныхПродажах);
	
КонецФункции

&НаКлиенте
Функция ДоступностьПриемаДС()
	
	Возврат НЕ ЗначениеЗаполнено(Объект.ДокументРасчета) И НЕ ЗначениеЗаполнено(Объект.ЧекККМПродажа) 
	
КонецФункции // ДоступностьПриемаДС()

&НаСервере
Процедура ОперацияСДенежнымиСредствамиПриИзмененииСервер()
	
	СтруктураПроверкиАМ = Новый Структура();
	СтруктураПроверкиАМ.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Объект.Товары, СтруктураПроверкиАМ);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьНеобходимостьВводаКодаМаркировки(Объект.Товары, СтруктураПроверкиАМ);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьКонтролироватьОстаткиТоваровПриЗакрытииЧека()
	
	КонтролироватьОстаткиТоваровПриЗакрытииЧека = ИспользоватьНастройкуРМК 
												И НаборПравИНастроек.КонтролироватьОстаткиТоваровПриЗакрытииЧека 
												И НЕ ЭтоРабочееМестоOffLine
												И НЕ Объект.ОперацияСДенежнымиСредствами;
	
КонецПроцедуры

&НаСервере
Процедура ПродолженииЧекаСервера(ЧекККМВОбработке, Отказ)
	
	ДокументРасчета = Объект.ДокументРасчета;
	ОперацияСДенежнымиСредствами = Объект.ОперацияСДенежнымиСредствами;
	ЭтоЗачетАвансаБыло = ЭтоЗачетАванса;
	
	ЗаполнитьДаннымиПоЧекуККМ(ЧекККМВОбработке, Отказ);
	Если ЗначениеЗаполнено(ЧекККМВОбработке.ДокументРасчета) Тогда
		Объект.ДокументРасчета = ЧекККМВОбработке.ДокументРасчета;
		Объект.ОперацияСДенежнымиСредствами = ЧекККМВОбработке.ОперацияСДенежнымиСредствами;
	ИначеЕсли НЕ ЭтоЗачетАвансаБыло ИЛИ НЕ ЗначениеЗаполнено(ДокументРасчета) Тогда
		Объект.ДокументРасчета = ЧекККМВОбработке.ДокументРасчета;
		Объект.ОперацияСДенежнымиСредствами = ЧекККМВОбработке.ОперацияСДенежнымиСредствами;
	Иначе
		Объект.ДокументРасчета = ДокументРасчета;
		Объект.ОперацияСДенежнымиСредствами = ОперацияСДенежнымиСредствами;
	КонецЕсли;
	
КонецПроцедуры

#Область ЕГАИС

&НаКлиенте
Процедура ВвестиАкцизнуюМарку(СтрокаТовара, ТекущееПоле = "КоличествоУпаковок", СтруктураПараметровКлиента = Неопределено)
	
	ПараметрыСканированияАкцизнойМарки = ИнтеграцияЕГАИСРТКлиентСервер.ПараметрыСканированияАкцизнойМарки();
	ПараметрыСканированияАкцизнойМарки.ТекущееПоле                     = ТекущееПоле;
	Если СтрокаТовара.НеобходимостьВводаКодаМаркировки Тогда
		ПараметрыСканированияАкцизнойМарки.Вставить("КодыМаркировки", Истина);
		ИмяТаблицы = "КодыМаркировки";
		ПараметрыСканированияАкцизнойМарки.ОткрытьФормуМножественногоВвода = Ложь;
	Иначе
		ИмяТаблицы = "АкцизныеМарки";
		ПараметрыСканированияАкцизнойМарки.ОткрытьФормуМножественногоВвода = НаборПравИНастроек.ВсегдаОткрыватьФормуМножественногоВводаАкцизныхМарок;
	КонецЕсли;
	
	ПараметрыСканированияАкцизнойМарки.АдресВХранилище = АдресМарокВХранилище(СтрокаТовара.КлючСвязи, ИмяТаблицы);
	ПараметрыСканированияАкцизнойМарки.ЗапретитьУдалениеМарки = НЕ НаборПравИНастроек.РазрешитьСторнированиеТовара;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		ПараметрыСканированияАкцизнойМарки.Операция = "Возврат";
	КонецЕсли;
	
	Если СтруктураПараметровКлиента = Неопределено Тогда
		СтруктураПараметровКлиента = Новый Структура;
	КонецЕсли;
	
	СтруктураПараметровКлиента.Вставить("ПродолжитьДействияТоварыПриИзмененииНоменклатуры");
	СтруктураПараметровКлиента.Вставить("ЗавершитьДействияТоварыПриИзмененииНоменклатуры");
	
	ИнтеграцияЕГАИСРТКлиент.ВвестиАкцизнуюМарку(ЭтотОбъект, СтрокаТовара, ПараметрыСканированияАкцизнойМарки, СтруктураПараметровКлиента);
	
КонецПроцедуры

&НаСервере
Функция АдресМарокВХранилище(КлючСвязи, ИмяТаблицы)
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", КлючСвязи);
	СтрокиМарок = Объект[ИмяТаблицы].НайтиСтроки(СтруктураОтбора);
	АдресМарок = ПоместитьВоВременноеХранилище(СтрокиМарок, УникальныйИдентификатор);
	Возврат АдресМарок;
КонецФункции

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(ЧекККМСсылка, ТранспортныйМодуль, ДанныеЕГАИСДостаточны, НомерЧека, ТекстСообщения, ЕстьАлкогольнаяПродукцияЕГАИС = Ложь)
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа И НЕ Объект.ОперацияСДенежнымиСредствами Тогда
		СкидкиНаценкиСерверПереопределяемый.АктивироватьСкидкиПоИдентификаторуЧека(ЧекККМСсылка, Объект.Магазин, Объект.Дата);
	КонецЕсли;
	
	ЧекККМОбъект = ЧекККМСсылка.ПолучитьОбъект();
	
	ОбщиеПараметры  = Документы.ЧекККМ.ПодготовитьДанныеДляПробитияЧека(ЧекККМОбъект, ЧекККМСсылка, ТранспортныйМодуль, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС, НомерЧека, Истина, ТекстСообщения);
	
	Возврат ОбщиеПараметры;
	
КонецФункции

&НаСервере
Функция ЗаполнитьМаркиНаСервере(АдресВХранилище, ДополнительныеПараметры, Организация, Номенклатура, Характеристика)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", ДополнительныеПараметры.ТекущийКлючСвязи);

	МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);

	Для Каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
		Объект.АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
	КонецЦикла;
	
	КоличествоУпаковок = 0;
	ТаблицаМарок = ПолучитьИзВременногоХранилища(АдресВХранилище);
	Для Каждого СтрокаМарки Из ТаблицаМарок Цикл
		ДанныеШтрихкодаУпаковки = ПолучитьДанныеШтрихкодаУпаковки(Организация, 
																	Объект.Магазин, 
																	СтрокаМарки.КодАкцизнойМарки,
																	ДополнительныеПараметры.ТекущийКлючСвязи,
																	Номенклатура,
																	Характеристика); 
		СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаАкцизнаяМарка, ДанныеШтрихкодаУпаковки);
		КоличествоУпаковок = КоличествоУпаковок + 1;
	КонецЦикла;
	
	Возврат КоличествоУпаковок;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеШтрихкодаУпаковки(Организация, Магазин, Штрихкод, КлючСвязи, Номенклатура, Характеристика)
	
	Возврат ИнтеграцияЕГАИСРТ.СформироватьДанныеПоАкцизнымМаркам(Организация, Магазин, Штрихкод, КлючСвязи, Номенклатура, Характеристика);
		
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция КассаККМизЧекаСервер(ЧекККМСсылка)
	Возврат ЧекККМСсылка.КассаККМ;
КонецФункции

&НаКлиенте
Процедура ПослеПередачиЧекаЕГАИС(Изменения, ПараметрыВыполнения) Экспорт
	
	ЕстьОшибки = (Изменения.Количество() <> 1);
	
	Ошибки = Новый Массив;
	Для Каждого ЭлементДанных Из Изменения Цикл
		Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Ошибки.Добавить(ЭлементДанных.ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	Если Ошибки.Количество() > 0 Тогда
		Ошибки.Вставить(0, НСтр("В процессе передачи данных в ЕГАИС возникли ошибки:"));
	КонецЕсли;
	ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	ПараметрыВыполнения.ПродолжитьПечать = Не ЕстьОшибки;
	ПараметрыВыполнения.ОписаниеОшибки   = ОписаниеОшибки;
	
	Если НЕ ЕстьОшибки Тогда
		ПараметрыВыполнения.Вставить("АдресЧека",   Изменения[0].ИдентификаторЗапроса);
		ПараметрыВыполнения.Вставить("ПодписьЧека", Изменения[0].Подпись);
		
		ИННОрганизации = "";
		КППОрганизации = "";
		НаименованиеОрганизации = "";
		
		Если ЗначениеЗаполнено(Изменения[0].ОрганизацияЕГАИС) Тогда
			РеквизитыОрганизацииЕГАИС = ИнтеграцияЕГАИСРТВызовСервера.ЗначенияРеквизитовОбъекта(Изменения[0].ОрганизацияЕГАИС, "ИНН, КПП, Наименование");
			
			ИННОрганизации = РеквизитыОрганизацииЕГАИС.ИНН;
			КППОрганизации = РеквизитыОрганизацииЕГАИС.КПП;
			
			НаименованиеОрганизации = СокрЛП(РеквизитыОрганизацииЕГАИС.Наименование);
			Если ПустаяСтрока(НаименованиеОрганизации) Тогда
				НаименованиеОрганизации = ПараметрыВыполнения.ВходныеПараметры.ОрганизацияНазвание;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыВыполнения.Вставить("ИНН", ИННОрганизации);
		ПараметрыВыполнения.Вставить("КПП", КППОрганизации);
		ПараметрыВыполнения.Вставить("НаименованиеОрганизации", НаименованиеОрганизации);
	КонецЕсли;

	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения)
	
	Для Каждого СтрокаОплаты Из Объект.Оплата Цикл 
		Если СтрокаОплаты.ДанныеПереданыВБанк Тогда
			
			ПараметрДействия = Новый Структура;
			ПараметрДействия.Вставить("ОткрытаБлокирующаяФорма"     		, Ложь);
			ПараметрДействия.Вставить("ОбработчикОповещенияПриЗавершении" 	, ОбработчикОповещения);
			ПараметрДействия.Вставить("ИдентификаторВыбраннойСтроки"		, СтрокаОплаты.ПолучитьИдентификатор());
			ПараметрДействия.Вставить("ЗавершитьУдалениеСтроки");
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрДействия", ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрДействия));
			
			ОбработчикОповещенияОбОтменеОплаты = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаОбОтменеОперацииУдалениеСтроки", 
																			ЭтотОбъект, 
																			ДополнительныеПараметры);
																			
			ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;																			
															
			ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(НСтр("ru = 'Данные об оплате отправлены в банк.'"), 
																	НСтр("ru = 'Необходимо выполнить сторно произведенных операций.'")
																	,
																	,ОбработчикОповещенияОбОтменеОплаты);	
			
		КонецЕсли;
	КонецЦикла;

	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьУдалениеСтроки(ПараметрДействия)
	
	ТекущаяСтрокаОплаты = Объект.Оплата.НайтиПоИдентификатору(ПараметрДействия.ИдентификаторВыбраннойСтроки);
	
	Если ТекущаяСтрокаОплаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Оплата.Удалить(ТекущаяСтрокаОплаты);
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура СторноОплатыПлатежнойКартойЧерезЭквайринговыйТерминал(ОповещениеПриЗавершении, ВыбраннаяСтрока, ПараметрДействия)
	
	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	ОписаниеОшибки            = "";
	КонечныйРезультат         = Ложь;
	
	СуммаОперации       = ВыбраннаяСтрока.Сумма;
	НомерКарты          = ВыбраннаяСтрока.НомерПлатежнойКарты;
	НомерСсылкиОперации = ВыбраннаяСтрока.СсылочныйНомер;
	НомерЧекаЭТ         = ВыбраннаяСтрока.НомерЧекаЭТ;
	СтрокаСлипЧека      = "";
	ТекстОписаниеОшибки = "";
	
	// Выбор устройства ФР
	
	СтруктураОтбора = Новый Структура("Организация", ВыбраннаяСтрока.Организация);
	МассивСтрок = ТаблицаКассККМОрганизаций.НайтиСтроки(СтруктураОтбора);
	
	ПараметрыКассыККМ = ЗначениеНастроекВызовСервера.ПолучитьПараметрыКассыККМ(МассивСтрок[0].КассаККМ);
	ИдентификаторУстройстваФР      = ПараметрыКассыККМ.ИдентификаторУстройства;
	СтруктураЭквайринговыйТерминал = РозничныеПродажиВызовСервера.СтруктураДанныхЭТ(ВыбраннаяСтрока.ЭквайринговыйТерминал);
	ИдентификаторУстройстваЭТ = СтруктураЭквайринговыйТерминал.ПодключаемоеОборудование;
	
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда
		ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования = Истина;
		СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования = Истина;
	КонецЕсли;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	
	ПараметрДействия.Вставить("ИспользоватьКассуККМБезПодключенияОборудования", ИспользоватьКассуККМБезПодключенияОборудования);
	ПараметрДействия.Вставить("ИдентификаторУстройстваФР"     , ИдентификаторУстройстваФР);
	ПараметрДействия.Вставить("ИдентификаторУстройстваЭТ"     , ИдентификаторУстройстваЭТ);
	ПараметрДействия.Вставить("СуммаОперации"                 , СуммаОперации);
	ПараметрДействия.Вставить("НомерСсылкиОперации"           , НомерСсылкиОперации);
	ПараметрДействия.Вставить("НомерЧекаЭТ"                   , НомерЧекаЭТ);
	ПараметрДействия.Вставить("ОповещениеПриЗавершении"       , ОповещениеПриЗавершении);  
	ПараметрДействия.Вставить("Результат"                     , Ложь);
	ПараметрДействия.Вставить("ТекстОписаниеОшибки"           , "");       

	Если НЕ СтруктураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
		
		ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = "AuthorizeVoid";
		ПараметрыОперации.СуммаОперации  = СуммаОперации;
		ПараметрыОперации.НомерЧекаЭТ    = НомерЧекаЭТ;
		ПараметрыОперации.СсылочныйНомер = НомерСсылкиОперации;
		
		ЭтаФорма.Доступность = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("СторноОплатыПлатежнойКартойЧерезЭквайринговыйТерминалЗавершение", ЭтотОбъект, ПараметрДействия);
		МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение, УникальныйИдентификатор, 
			ПараметрДействия.ИдентификаторУстройстваЭТ, ПараметрДействия.ИдентификаторУстройстваФР, ПараметрыОперации);
			
	Иначе
		
		ПараметрДействия.Вставить("ТекстОписаниеОшибки", ТекстОписаниеОшибки);
		ПараметрДействия.Вставить("СтрокаСлипЧека"     , СтрокаСлипЧека);
		
		ТекстИнформации = НСтр("ru = 'Требуется выполнить операцию отмены оплаты на эквайринговом терминале.'") + Символы.ПС;
		ТекстИнформации = ТекстИнформации + НСтр("ru = 'Сумма операции:'")        + " "+ СуммаОперации         + Символы.ПС;
		ТекстИнформации = ТекстИнформации + НСтр("ru = 'Номер карты:'")           + " "+ НомерКарты            + Символы.ПС;
		ТекстИнформации = ТекстИнформации + НСтр("ru = 'Ссылочный номер:'")       + " "+ НомерСсылкиОперации   + Символы.ПС;
		ТекстИнформации = ТекстИнформации + НСтр("ru = 'Номер чека:'")            + " "+ НомерЧекаЭТ           + Символы.ПС;
		ЗаголовокИнформации = НСтр("ru = 'Операция отмены оплаты на терминале прошла успешно?'");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрДействия", ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрДействия));
		
		ПараметрДействия.ОткрытаБлокирующаяФорма = Истина;
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВопросаПодтвержденияОбОтменеОплаты", ЭтотОбъект, ДополнительныеПараметры);
		ОтветПользователя = ОбщегоНазначенияРТКлиент.ВывестиВопросДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации,,ОбработчикОповещения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЗначенияСуммДляПодарочныхСертификатов()

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВидОплаты", ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.Наличные"));
	
	СтрокиТекущейТаблицаОплат = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	СуммаОплатыНаличными = 0;
	Для каждого СтрокаТекущейТаблицаОплат Из СтрокиТекущейТаблицаОплат Цикл
		СуммаОплатыНаличными = СуммаОплатыНаличными + СтрокаТекущейТаблицаОплат.Сумма;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ВидОплаты", ПредопределенноеЗначение("Справочник.ВидыОплатЧекаККМ.ОплатаПодарочнымСертификатом"));
	
	СтрокиТекущейТаблицаОплат = Объект.Оплата.НайтиСтроки(СтруктураПоиска);
	СуммаОплатыПодарочнымиСертификатами = 0;
	Для каждого СтрокаТекущейТаблицаОплат Из СтрокиТекущейТаблицаОплат Цикл
		СуммаОплатыПодарочнымиСертификатами = СуммаОплатыПодарочнымиСертификатами + СтрокаТекущейТаблицаОплат.Сумма;
	КонецЦикла;
	
	СуммаПрочихОплат = Объект.Оплата.Итог("Сумма") - СуммаОплатыПодарочнымиСертификатами - СуммаОплатыНаличными;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработкуВыбораПлатежнойКарты(ПараметрДействия)
	
	ВыбраннаяСтрока = Объект.Оплата.НайтиПоИдентификатору(ПараметрДействия.ИдентификаторВыбраннойСтроки);
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОплаты = Объект.Оплата.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаОплаты, ВыбраннаяСтрока);
	
	СтрокаОплаты.ЗапретРедактирования = Истина;
	СтрокаОплаты.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатЧекаККМ.ПлатежнаяКарта");
	
	СтрокаОплаты.Организация             = ВыбраннаяСтрока.Организация;
	СтрокаОплаты.ПредставлениеВидаОплаты = СтрокаОплаты.ВидОплаты;
	СтрокаОплаты.ПредставлениеСуммы      = СтрокаОплаты.Сумма;
	СтрокаОплаты.ДанныеПереданыВБанк     = Истина;
	
	ПервыйВвод = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибочноеПробитиеЧека()
	
	Если ДанныеОтправленыВБанк Тогда
		ПередаватьТаблицуОплат = Истина;
		ОтменитьОплатуПК = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУспешноеПробитиеЧека()
	
	//АдресТаблицыОплат = "";
	ПередаватьТаблицуОплат = Ложь;
	ОтменитьОплатуПК = Ложь;
	ДанныеОтправленыВБанк = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ПрисутствуютДанныеПереданныеВБанк()
	
	ПараметрыОтбора = Новый Структура("ДанныеПереданыВБанк", Истина);
	МассивСтрок = Объект.Оплата.НайтиСтроки(ПараметрыОтбора);
	
	Если МассивСтрок.Количество() > 0 Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ДеактивироватьСкидкиПоИдентификаторуЧека(ДокументСсылка)
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		СкидкиНаценкиСерверПереопределяемый.ДеактивироватьСкидкиПоИдентификаторуЧека(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПогаситьОднократныеСкидки()
	
	СкидкиНаценкиСерверПереопределяемый.ПогаситьОднократныеСкидки(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКнопкиВерхнейПанели()
	
	Если ИспользоватьНастройкуРМК Тогда 
		
		Для Каждого КнопкаВрехнейПанели Из НастройкаРМК.КнопкиВерхнейПанели Цикл
			Если Не КнопкаВрехнейПанели.ДоступнаКнопка Тогда 
				Элементы[КнопкаВрехнейПанели.ИмяКнопки].Видимость = Ложь;
			КонецЕсли;
			Если Не КнопкаВрехнейПанели.ДоступнаКоманда Тогда 
				Элементы[КнопкаВрехнейПанели.ИмяКоманды].Видимость = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(КнопкаВрехнейПанели.Шрифт) Тогда 
				Элементы[КнопкаВрехнейПанели.ИмяКнопки].Шрифт = ОбщегоНазначения.ЗначениеИзСтрокиXML(КнопкаВрехнейПанели.Шрифт);
			КонецЕсли;
			Если ЗначениеЗаполнено(КнопкаВрехнейПанели.Цвет) Тогда 
				Цвет = ОбщегоНазначения.ЗначениеИзСтрокиXML(КнопкаВрехнейПанели.Цвет);
				Элементы[КнопкаВрехнейПанели.ИмяКнопки].ЦветРамки = Цвет;
				Элементы[КнопкаВрехнейПанели.ИмяКнопки].ЦветТекста = Цвет;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НужноСворачиватьПоСтрокеПоиска(Номенклатура)
	СворачиватьПоСтрокеПоиска = Истина;
	СтруктураМаркировки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ТабачнаяПродукция, ОбувнаяПродукция");
	Если СтруктураМаркировки.ТабачнаяПродукция Или СтруктураМаркировки.ОбувнаяПродукция Тогда
		СворачиватьПоСтрокеПоиска = Ложь;
	КонецЕсли;
	Возврат СворачиватьПоСтрокеПоиска;
КонецФункции

&НаСервере
Функция КодСоответствуетНоменклатуреИУпаковке(КодМаркировки, ДополнительныеПараметры)
	
	Возврат РозничныеПродажиСервер.КодСоответствуетНоменклатуреИУпаковке(ЭтотОбъект, КодМаркировки, ДополнительныеПараметры, Истина);
	
КонецФункции

&НаСервере
Функция ПродолжитьОбработкуШтрихкодаНаСервере(Результат, Штрихкод)
	
	ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка();
	ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
						Результат.Организация, Результат.Касса.Магазин);
	Возврат ПолученШтрихкодИзСШК(Штрихкод);
	
КонецФункции

#КонецОбласти
