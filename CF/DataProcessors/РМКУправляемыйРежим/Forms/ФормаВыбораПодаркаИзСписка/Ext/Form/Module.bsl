#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ЗаголовокИнформации = НСтр("ru = 'При подключении оборудования произошла ошибка:'");
		ТекстИнформации     = РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиСертификатов(СтруктураРезультат, СтрокаРезультата);
		
	Иначе
		
		ЭтотОбъект.ТекущийЭлемент = Элементы.Список;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаРезультата.Номенклатура);
		СтрокиНоменклатуры = Список.НайтиСтроки(СтруктураПоиска);
		Если СтрокиНоменклатуры.Количество() > 0 Тогда
			Элементы.Список.ТекущаяСтрока = СтрокиНоменклатуры[0].ПолучитьИдентификатор();
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Номенклатура %1 не найдена в списке подарков'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтрокаРезультата.Номенклатура);
			СтрокаРезультата.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКодуРМК(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("СкидкаНаценка") Тогда
		Элементы.ДекорацияСкидка.Заголовок = Параметры.СкидкаНаценка;
	КонецЕсли;
	
	СтруктураОбъект = Новый Структура;
	Если Параметры.Свойство("ЭтоВозврат") Тогда
		Заголовок = НСтр("ru = 'Возврат подарков'");
		СтруктураОбъект.Вставить("ВидОперации", Перечисления.ВидыОперацийЧекККМ.Возврат);
	Иначе
		Заголовок = НСтр("ru = 'Выдача подарков'");
		СтруктураОбъект.Вставить("ВидОперации", Перечисления.ВидыОперацийЧекККМ.Продажа);
	КонецЕсли;
	
	ПараметрыУказанияСерий = Документы.ЧекККМ.ПараметрыУказанияСерий(СтруктураОбъект);
	ПараметрыУказанияСерий.Вставить("ИмяТЧТовары", "Список");
	
	Если Параметры.Свойство("АдресТаблицы") Тогда
		ЗаполнитьСписокВыбора();
	КонецЕсли;
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	Если Список.Количество() = 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("Магазин") Тогда
		Магазин = Параметры.Магазин;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Список);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ОповещенияПриПодключении, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудованияРМК(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗафиксироватьВыборСтроки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВниз(Команда)
	
	ПередвинутьПозицию(1)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВверх(Команда)
	
	ПередвинутьПозицию(-1)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбрать(Команда)
	
	ЗафиксироватьВыборСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		ВводСерийРазрешен = Истина;
		ТекстСообщения = "";
		ОбработкаТабличнойЧастиТоварыКлиент.ПроверитьВозможностьУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий, ВводСерийРазрешен, ,Истина, ТекстСообщения);
		Если НЕ ВводСерийРазрешен Тогда
			ЗаголовокИнформации = НСтр("ru = 'Ввод серий'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ТекущиеДанныеИдентификатор = Элементы.Список.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ОбработчикУказанияСерий = Новый ОписаниеОповещения("ОбработатьУказаниеСерий", ЭтотОбъект, ПараметрыФормыУказанияСерий);
		РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы + "РМК", ПараметрыФормыУказанияСерий, ЭтотОбъект,,,, ОбработчикУказанияСерий, РежимБлокировки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Передвинуть позицию в списке.
//
// Параметры:
// Движение = 1 (вниз) или -1 (вверх).
// 
&НаКлиенте
Процедура ПередвинутьПозицию(Движение)
	// Вставить содержимое обработчика.
	Если Список.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено  Тогда
		ИндексСтроки = 0;
	Иначе
		ИндексСтроки = Список.Индекс(ТекущиеДанные);
	КонецЕсли;
	
	ИндексСтроки = ИндексСтроки + Движение;
	
	Если ИндексСтроки > (Список.Количество() - 1) Тогда
		ИндексСтроки = 0;
	ИначеЕсли ИндексСтроки < 0 Тогда
		ИндексСтроки = Список.Количество() - 1;
	КонецЕсли;
	
	ТекущиеДанные = Список[ИндексСтроки];
	Элементы.Список.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьВыборСтроки()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Закрыть();
	Иначе
		ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
		СтруктураРезультат = ПроверитьЗаполнениеСерий(ИдентификаторСтроки);
		Если СтруктураРезультат.Отказ Тогда
			ЗаголовокИнформации = НСтр("ru = 'Не указаны серии'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, СтруктураРезультат.ТекстСообщения);
			Возврат;
		КонецЕсли;
	
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("Номенклатура"      , ТекущиеДанные.Номенклатура);
		СтруктураОтвета.Вставить("Характеристика"    , ТекущиеДанные.Характеристика);
		СтруктураОтвета.Вставить("Упаковка"          , ТекущиеДанные.Упаковка);
		СтруктураОтвета.Вставить("КоличествоУпаковок", ТекущиеДанные.КоличествоУпаковок);
		СтруктураОтвета.Вставить("Количество"        , ТекущиеДанные.Количество);
		СтруктураОтвета.Вставить("Получен", Истина);
		Если ТекущиеДанные.СтатусУказанияСерий > 0 Тогда 
			АдресСерий = ПоместитьСерииВХранилище();
			СтруктураОтвета.Вставить("АдресСерийВХранилище", АдресСерий);
		КонецЕсли;
		
		Закрыть(СтруктураОтвета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбора()
	
	ТаблицаЗапроса = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицы);
	
	Список.Загрузить(ТаблицаЗапроса);
	НомерСтроки = 0;
	Для Каждого СтрокаСписка Из Список Цикл
		НомерСтроки = НомерСтроки + 1;
		СтрокаСписка.НомерСтроки = НомерСтроки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат ОбработкаТабличнойЧастиТоварыСервер.ПоместитьСерииВХранилище(ЭтотОбъект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьУказаниеСерий(ЗначениеВозврата, ПараметрыФормыУказанияСерий) Экспорт
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ОбновитьСтатусыСерийИПодарочныхСертификатов(Список);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Ложь);
	
	ОбработкаТабличнойЧастиТоварыСервер.ОбработатьУказаниеСерий(ЭтотОбъект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьСерииВХранилище()
	
	АдресСерий = ПоместитьВоВременноеХранилище(Серии.Выгрузить(), Новый УникальныйИдентификатор);
	
	Возврат АдресСерий;
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполнениеСерий(ИдентификаторСтроки)
	
	Отказ = Ложь;
	ТекстСообщения = "";
	ТекущаяСтрока = Список.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ТекущаяСтрока <> Неопределено Тогда
		Если ТекущаяСтрока.СтатусУказанияСерий = 1
			ИЛИ ТекущаяСтрока.СтатусУказанияСерий = 3 Тогда 
			
			ТекстСообщения = НСтр("ru = 'Для подарка ""%1"" необходимо указать серии'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ТекстСообщения,
								ОбщегоНазначенияРТ.ПолучитьПредставлениеНоменклатуры(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика));
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Отказ", Отказ);
	СтруктураРезультат.Вставить("ТекстСообщения", ТекстСообщения);
	
	Возврат СтруктураРезультат;
	
КонецФункции

#КонецОбласти