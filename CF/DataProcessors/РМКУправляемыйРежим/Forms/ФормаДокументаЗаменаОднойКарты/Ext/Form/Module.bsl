
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ЗаголовокИнформации = НСтр("ru = 'При подключении оборудования произошла ошибка:'");
		ТекстИнформации     = РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
			ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		Иначе
			ОбработатьСчитываниеИнформационнойКарты(СтрокаРезультата.Карта);
		КонецЕсли;
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиСертификатов(СтруктураРезультат, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("ШтрихкодУпаковкиЕГАИС")
		И ЗначениеЗаполнено(СтрокаРезультата.ШтрихкодУпаковкиЕГАИС) Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиАкцизныхМарок(СтруктураРезультат, СтрокаРезультата);
		
	Иначе
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиНоменклатуры(СтруктураРезультат, СтрокаРезультата);
		
	КонецЕсли;
	
	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКодуРМК(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	ОбновитьФорму();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	ПараметрыСобытийПО = Новый Структура;
	ПараметрыСобытийПО.Вставить("РегистрацияНовойКарты", Истина);
	
	Параметры.Свойство("Магазин", Магазин);
	Параметры.Свойство("КартаИсточник", КартаИсточник);
	Параметры.Свойство("КопироватьПараметрыБонусовПриЗаменеКарты", КопироватьПараметрыБонусовПриЗаменеКарты);
	
	Если НЕ ЗначениеЗаполнено(Магазин) Тогда
		Магазин = ПараметрыСеанса.ТекущийМагазин;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	
	// ПодключаемоеОборудование
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ОповещенияПриПодключении, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудованияРМК(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КартаИсточникПриИзменении(Элемент)
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура КартаПриемникПриИзменении(Элемент)
	
	ОбновитьФорму();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОчиститьКарты(Команда)
	
	КартаИсточник = ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка");
	КартаПриемник = ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка");
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбор(Команда)
	
	Если НЕ ЗначениеЗаполнено(КартаИсточник) ИЛИ НЕ ЗначениеЗаполнено(КартаПриемник) Тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Заполните обе дисконтные карты.'"));
		Возврат;
	КонецЕсли;
	
	Если КартаИсточник = КартаПриемник Тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Выбрана одинаковая карта!'"));
		Возврат;
	КонецЕсли;
	
	ЗаписатьИзмененияКарты();
	
	Закрыть(КартаПриемник);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет реквизиты выбранной картой.
//
// Параметры:
//  Карта, считанная карта
//
&НаСервере
Процедура ОбработатьСчитываниеИнформационнойКарты(Карта)

	Если НЕ ЗначениеЗаполнено(КартаИсточник) Тогда
		КартаИсточник = Карта;
	ИначеЕсли НЕ ЗначениеЗаполнено(КартаПриемник) Тогда
		Если НЕ Карта = КартаИсточник Тогда
			КартаПриемник = Карта;
		КонецЕсли;
	Иначе
		КартаИсточник = Карта;
		КартаПриемник = Справочники.ИнформационныеКарты.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму()
	
	ДоступностьКнопкиОК = Ложь;
	
	Если НЕ ЗначениеЗаполнено(КартаИсточник) Тогда
		Элементы.ДекорацияЗаголовок.Заголовок = НСтр("ru = 'Считайте ""старую"" карту'");
		ЭтотОбъект.ТекущийЭлемент = Элементы.КартаИсточник;
	ИначеЕсли НЕ ЗначениеЗаполнено(КартаПриемник) Тогда
		Элементы.ДекорацияЗаголовок.Заголовок = НСтр("ru = 'Считайте ""новую"" карту'");
		ЭтотОбъект.ТекущийЭлемент = Элементы.КартаПриемник;
	Иначе
		Элементы.ДекорацияЗаголовок.Заголовок = НСтр("ru = 'Замена карты'");
		ЭтотОбъект.ТекущийЭлемент = Элементы.КомандаВыбор;
		
		ДоступностьКнопкиОК = Истина;
	КонецЕсли;
	
	Элементы.КомандаВыбор.Доступность = ДоступностьКнопкиОК;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияКарты()
	
	ДокументОбъект = Документы.ЗаменаДисконтныхКарт.СоздатьДокумент();
	ДокументОбъект.Магазин       = Магазин;
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	ДокументОбъект.Дата          = ТекущаяДатаСеанса();
	
	СтрокаДокумента = ДокументОбъект.КартыПокупателей.Добавить();
	СтрокаДокумента.КартаИсточник = КартаИсточник;
	СтрокаДокумента.КартаПриемник = КартаПриемник;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	КартаПриемникОбъект = КартаПриемник.ПолучитьОбъект();
	
	Если КопироватьПараметрыБонусовПриЗаменеКарты Тогда
		РеквизитыИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КартаИсточник, "ВладелецКарты, БонуснаяПрограммаЛояльности, КартаДляНакоплений");
	Иначе
		РеквизитыИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КартаИсточник, "ВладелецКарты");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(КартаПриемникОбъект, РеквизитыИсточника);
	КартаПриемникОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти