#Область ОбработчикиСобытийФормы

&НаКлиенте
Перем ОбновитьИнтерфейс;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Значения реквизитов формы
	РежимРаботы = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	// Настройки видимости при запуске.
	
	РегламентноеЗадание = РегламентныеЗаданияНайтиПредопределенное("РассылкаЭлектронныхЧеков");
	ВидимостьРасписания = (РегламентноеЗадание <> Неопределено);
	Если ВидимостьРасписания Тогда
		РассылкаЭлектронныхЧековИдентификатор = РегламентноеЗадание.УникальныйИдентификатор;
		РассылкаЭлектронныхЧековРасписание    = РегламентноеЗадание.Расписание;
	КонецЕсли;
	Элементы.РассылкаЭлектронныхЧековНастроитьРасписание.Видимость     = ВидимостьРасписания;
	Элементы.РассылкаЭлектронныхЧековПредставлениеРасписания.Видимость = ВидимостьРасписания;
	
	ОтправкаЭлектронныхЧековПослеПробитияЧека = Константы.ОтправкаЭлектронныхЧековПослеПробитияЧека.Получить();
	ОтправкаЭлектронныхЧеков = Число(ОтправкаЭлектронныхЧековПослеПробитияЧека);
	РассылкаЭлектронныхЧековИспользование = НЕ ОтправкаЭлектронныхЧековПослеПробитияЧека;
	
	// Обновление состояния элементов.
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбработчикОповещений(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьОплатуПлатежнымиКартамиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРасчетыСКлиентамиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОплатуБанковскимиКредитамиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ФиксироватьПопыткиПродажПревышающихОстатокПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентРозничныйПокупательПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаказыПокупателейПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.ИспользоватьЗаказыПокупателей 
		И НаборКонстант.ИспользоватьРезервированиеПоЗаказамПокупателей Тогда
		
		НаборКонстант.ИспользоватьРезервированиеПоЗаказамПокупателей = Ложь;
		Результат = ПриИзмененииРеквизитаСервер("ИспользоватьРезервированиеПоЗаказамПокупателей");
		
	КонецЕсли;
	
	Если НЕ НаборКонстант.ИспользоватьЗаказыПокупателей 
		И НаборКонстант.ИспользоватьПричиныОтменыЗаказовПокупателей Тогда
		
		НаборКонстант.ИспользоватьПричиныОтменыЗаказовПокупателей = Ложь;
		Результат = ПриИзмененииРеквизитаСервер("ИспользоватьПричиныОтменыЗаказовПокупателей");
		
	КонецЕсли;
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРезервированиеПоЗаказамПокупателейПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПричиныОтменыЗаказовПокупателейПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЛогированиеДействийКассираВРМКПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РассылкаЭлектронныхЧековИспользованиеПриИзменении(Элемент)
	РассылкаЭлектронныхЧековИспользованиеСервер();
	РегламентныеЗаданияИспользованиеПриИзменении("РассылкаЭлектронныхЧеков");
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДнейХраненияОтложенныхЧековПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьЭквайринговыеТерминалы(Команда)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Справочник.ЭквайринговыеТерминалы.Форма.ФормаСписка.Открытие");

	ОткрытьФорму("Справочник.ЭквайринговыеТерминалы.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПричиныОтменыЗаказовПокупателей(Команда)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Справочник.ПричиныОтменыЗаказовПокупателей.Форма.ФормаСписка.Открытие");
	
	ОткрытьФорму("Справочник.ПричиныОтменыЗаказовПокупателей.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЛогированияПоВидамДействийКассираВРМК(Команда)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "РегистрСведений.НастройкиЛогированияПоВидамДействийКассираВРМК.Форма.ФормаСписка.Открытие");
            
    ОткрытьФорму("РегистрСведений.НастройкиЛогированияПоВидамДействийКассираВРМК.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РассылкаЭлектронныхЧековНастроитьРасписание(Команда)
	РегламентныеЗаданияГиперссылкаНажатие("РассылкаЭлектронныхЧеков");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОчередьЭлектронныхЧеков(Команда)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		     Истина, "Справочник.ОчередьЭлектронныхЧековКОтправке.Форма.ФормаСписка.Открытие");

	ОткрытьФорму("Справочник.ОчередьЭлектронныхЧековКОтправке.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		#Если НЕ ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		ОбновитьИнтерфейс = Истина;
		#КонецЕсли
	КонецЕсли;
	
	Если Результат <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	#Если НЕ ВебКлиент Тогда
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеЗаданияГиперссылкаНажатие(ПрефиксРеквизитов)
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Идентификатор", ЭтотОбъект[ПрефиксРеквизитов + "Идентификатор"]);
	ПараметрыВыполнения.Вставить("ИмяРеквизитаРасписание", ПрефиксРеквизитов + "Расписание");
	
	РегламентныеЗаданияИзменитьРасписание(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеЗаданияИзменитьРасписание(ПараметрыВыполнения)
	Обработчик = Новый ОписаниеОповещения("РегламентныеЗаданияПослеИзмененияРасписания", ЭтотОбъект, ПараметрыВыполнения);
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ЭтотОбъект[ПараметрыВыполнения.ИмяРеквизитаРасписание]);
	Диалог.Показать(Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеЗаданияПослеИзмененияРасписания(Расписание, ПараметрыВыполнения) Экспорт
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект[ПараметрыВыполнения.ИмяРеквизитаРасписание] = Расписание;
	
	Изменения = Новый Структура("Расписание", Расписание);
	Если ПараметрыВыполнения.Свойство("ИмяРеквизитаИспользование") Тогда
		ЭтотОбъект[ПараметрыВыполнения.ИмяРеквизитаИспользование] = Истина;
		Изменения.Вставить("Использование", Истина);
	КонецЕсли;
	РегламентныеЗаданияСохранить(ПараметрыВыполнения.Идентификатор, Изменения, ПараметрыВыполнения.ИмяРеквизитаРасписание);
КонецПроцедуры

// Обработка оповещений от других открытых форм.
//
// Пример:
//   Если ИмяСобытия = "НаборКонстант.ПрефиксУзлаРаспределеннойИнформационнойБазы" Тогда
//     НаборКонстант.ПрефиксУзлаРаспределеннойИнформационнойБазы = Параметр;
//   КонецЕсли;
//
&НаКлиенте
Процедура ОбработчикОповещений(ИмяСобытия, Параметр, Источник)
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеЗаданияИспользованиеПриИзменении(ПрефиксРеквизитов)
	ИмяРеквизитаИспользование = ПрефиксРеквизитов + "Использование";
	Идентификатор = ЭтотОбъект[ПрефиксРеквизитов + "Идентификатор"];
	Если ЭтотОбъект[ИмяРеквизитаИспользование] Тогда
		ЭлементПредставление = Элементы.Найти(ПрефиксРеквизитов + "ПредставлениеРасписания");
		Если ЭлементПредставление = Неопределено Или ЭлементПредставление.Видимость Тогда
			ПараметрыВыполнения = Новый Структура;
			ПараметрыВыполнения.Вставить("Идентификатор", Идентификатор);
			ПараметрыВыполнения.Вставить("ИмяРеквизитаРасписание", ПрефиксРеквизитов + "Расписание");
			ПараметрыВыполнения.Вставить("ИмяРеквизитаИспользование", ИмяРеквизитаИспользование);
			РегламентныеЗаданияИзменитьРасписание(ПараметрыВыполнения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Изменения = Новый Структура("Использование", ЭтотОбъект[ИмяРеквизитаИспользование]);
	РегламентныеЗаданияСохранить(Идентификатор, Изменения, ИмяРеквизитаИспользование);
КонецПроцедуры

#КонецОбласти

#Область ВызовСервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	Результат = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Сервер

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Определение имени константы.
	КонстантаИмя = "";
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат КонстантаИмя;
	КонецЕсли;
	
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	ИспользоватьСинхронизациюДанных = Константы.ИспользоватьСинхронизациюДанных.Получить();
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьОплатуПлатежнымиКартами" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ОткрытьЭквайринговыеТерминалы.Доступность = НаборКонстант.ИспользоватьОплатуПлатежнымиКартами;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьЛогированиеДействийКассираВРМК" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ОткрытьНастройкиЛогированияПоВидамДействийКассираВРМК.Доступность = НаборКонстант.ИспользоватьЛогированиеДействийКассираВРМК;
	КонецЕсли;
	
	Элементы.ИспользоватьРезервированиеПоЗаказамПокупателей.Доступность = НаборКонстант.ИспользоватьЗаказыПокупателей;
	Элементы.ИспользоватьПричиныОтменыЗаказовПокупателей.Доступность    = НаборКонстант.ИспользоватьЗаказыПокупателей;
	Элементы.ПричиныОтменыЗаказовПокупателей.Доступность                = НаборКонстант.ИспользоватьПричиныОтменыЗаказовПокупателей;
	
	Если РеквизитПутьКДанным = "" Тогда
		
		Если ИспользоватьСинхронизациюДанных Тогда
			Если ПараметрыСеанса.ИспользуемыеПланыОбмена.Найти("ПоМагазину") <> Неопределено
				И ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
				
				Элементы.ИспользоватьОплатуПлатежнымиКартами.ТолькоПросмотр 	= Истина;
				Элементы.ИспользоватьОплатуБанковскимиКредитами.ТолькоПросмотр 	= Истина;
				
			ИначеЕсли ПараметрыСеанса.ИспользуемыеПланыОбмена.Найти("ПоРабочемуМесту") <> Неопределено
				И ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
				
				Элементы.ИспользоватьОплатуПлатежнымиКартами.ТолькоПросмотр 	= Истина;
				Элементы.ИспользоватьОплатуБанковскимиКредитами.ТолькоПросмотр 	= Истина;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РассылкаЭлектронныхЧековИспользование Тогда
		РасписаниеПредставление = Строка(РассылкаЭлектронныхЧековРасписание);
		Представление = ВРег(Лев(РасписаниеПредставление, 1)) + Сред(РасписаниеПредставление, 2);
	Иначе
		Представление = НСтр("ru = '<Отключено>'");
	КонецЕсли;
	Элементы.РассылкаЭлектронныхЧековПредставлениеРасписания.Заголовок = Представление;
	Элементы.РассылкаЭлектронныхЧековНастроитьРасписание.Доступность = РассылкаЭлектронныхЧековИспользование;
	
КонецПроцедуры

&НаСервере
Функция РегламентныеЗаданияНайтиПредопределенное(ИмяПредопределенного)
	Фильтр = Новый Структура("Метаданные", ИмяПредопределенного);
	Найденные = РегламентныеЗаданияСервер.НайтиЗадания(Фильтр);
	Задание = ?(Найденные.Количество() = 0, Неопределено, Найденные[0]);
	Возврат Задание;
КонецФункции

&НаСервере
Процедура РегламентныеЗаданияСохранить(УникальныйИдентификатор, Изменения, РеквизитПутьКДанным)
	РегламентныеЗаданияСервер.ИзменитьЗадание(УникальныйИдентификатор, Изменения);
	Если РеквизитПутьКДанным <> Неопределено Тогда
		УстановитьДоступность(РеквизитПутьКДанным);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РассылкаЭлектронныхЧековИспользованиеСервер()
	
	ОтправкаЭлектронныхЧековПослеПробитияЧека = НЕ РассылкаЭлектронныхЧековИспользование;
	Константы.ОтправкаЭлектронныхЧековПослеПробитияЧека.Установить(ОтправкаЭлектронныхЧековПослеПробитияЧека);
	Элементы.РассылкаЭлектронныхЧековНастроитьРасписание.Доступность = РассылкаЭлектронныхЧековИспользование;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти









