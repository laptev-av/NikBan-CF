&НаКлиенте
Перем ОбновитьИнтерфейс;

#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбработкаВопросаОбОчисткеПримененияЦен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ОчиститьПримененияЦенВМагазинах(ДополнительныеПараметры.СписокМагазинов);
		НаборКонстант.ИспользоватьПрименениеЦен = Ложь;
		Подключаемый_ПриИзмененииРеквизита(Элементы.ИспользоватьПрименениеЦен);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНастройкиПодключенияКДисконтномуСерверу(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьДоступность("НаборКонстант.ИспользоватьДисконтныйСервер");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Значения реквизитов формы
	РежимРаботы = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	// Настройки видимости при запуске.
	
	// Обновление состояния элементов.
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбработчикОповещений(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеКонстант(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьЦеновыеГруппыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПрименениеЦенПриИзменении(Элемент)
	Если НЕ НаборКонстант.ИспользоватьПрименениеЦен Тогда
		СписокМагазинов = Новый СписокЗначений;
		ПроверитьИспользованиеПримененияЦенВМагазинах(СписокМагазинов);
		
		Если СписокМагазинов.Количество() = 0 Тогда
			Подключаемый_ПриИзмененииРеквизита(Элемент);
		Иначе
			ТекстВопроса = НСтр("ru = 'При прекращении использования механизма применения цен необходимо очистить признак использования применения цен в магазинах.
										|Выполнить очистку?'");
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("СписокМагазинов", СписокМагазинов);
			ОбработчикОповещения = Новый ОписаниеОповещения("ОбработкаВопросаОбОчисткеПримененияЦен", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
			НаборКонстант.ИспользоватьПрименениеЦен = Истина;
		КонецЕсли;
	Иначе
		Подключаемый_ПриИзмененииРеквизита(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРучныеСкидкиВПродажахПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическиеСкидкиВПродажахПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАссортиментПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗапретРозничнойПродажиАлкоголяПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНеуникальныеКодыИнформационныхКартПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДисконтныйСерверПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОчередьДляПередачиДокументовДисконтномуСерверуПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьБонусныеПрограммыЛояльностиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьТоварныеКатегорииИКвотыАссортиментаПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура УстанавливатьВидыЦенВАссортиментеПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКомментарийНажатие(Элемент)
	
	ТекстСообщения = Элемент.Подсказка;
	ПоказатьПредупреждение(, ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкиУправленияАссортиментом(Команда)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Обработка.ПомощникНачалаУправленияАссортиментом.Форма.Форма.Открытие");

	ОткрытьФорму("Обработка.ПомощникНачалаУправленияАссортиментом.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколПередачиПродажДисконтномуСерверу(Команда)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "РегистрСведений.ПротоколПередачиДокументовДисконтномуСерверу.Форма.ФормаСписка.Открытие");
             
	ОткрытьФорму("РегистрСведений.ПротоколПередачиДокументовДисконтномуСерверу.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПодключенияКДисконтномуСерверу(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ОбработкаОповещения = Новый ОписаниеОповещения(
		"ОбработкаНастройкиПодключенияКДисконтномуСерверу",
		ЭтотОбъект,
		ДополнительныеПараметры);
        
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Истина, "ОбщаяФорма.НастройкаПодключенияКДисконтномуСерверу.Открытие");
        
	ОткрытьФорму(
		"ОбщаяФорма.НастройкаПодключенияКДисконтномуСерверу",
		,
		ЭтаФорма,
		,
		,
		,
		ОбработкаОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		#Если НЕ ВебКлиент Тогда
			ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
			ОбновитьИнтерфейс = Истина;
		#КонецЕсли
	КонецЕсли;
	
	Если Результат <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	#Если НЕ ВебКлиент Тогда
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

// Обработка оповещений от других открытых форм.
//
// Пример:
//   Если ИмяСобытия = "НаборКонстант.ПрефиксУзлаРаспределеннойИнформационнойБазы" Тогда
//     НаборКонстант.ПрефиксУзлаРаспределеннойИнформационнойБазы = Параметр;
//   КонецЕсли;
//
&НаКлиенте
Процедура ОбработчикОповещений(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		УстановитьДоступность();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	Результат = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Определение имени константы.
	КонстантаИмя = "";
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат КонстантаИмя;
	КонецЕсли;
	
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	ИспользоватьСинхронизациюДанных = Константы.ИспользоватьСинхронизациюДанных.Получить();
	ДоступностьДисконтногоСервера = НЕ Элементы.ИспользоватьДисконтныйСервер.ТолькоПросмотр;
	ДоступностьНастройкиДисконтногоСервера = Элементы.ГруппаНастройкиДисконтногоСервера.Доступность;
	БлокироватьАвтоматическиеСкидки = Элементы.ИспользоватьАвтоматическиеСкидкиВПродажах.ТолькоПросмотр;
	БлокироватьАссортимент = Элементы.ИспользоватьАссортимент.ТолькоПросмотр;
	
	ДоступностьЗапретаПродаж = Истина;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьАссортимент" Тогда
		
		Элементы.ГруппаУправлениеАссортиментомПомощник.Доступность = НаборКонстант.ИспользоватьАссортимент;
		Элементы.ГруппаУправлениеАссортиментомДополнительно.Доступность = НаборКонстант.ИспользоватьАссортимент;
		
	ИначеЕсли РеквизитПутьКДанным = "НаборКонстант.ИспользоватьДисконтныйСервер" Тогда
		
		ДоступностьДисконтногоСервера = НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах
											И ИспользоватьСинхронизациюДанных;
		ДоступностьНастройкиДисконтногоСервера = НаборКонстант.ИспользоватьДисконтныйСервер
													И ИспользоватьСинхронизациюДанных;
		Элементы.ГруппаНастройкиДисконтногоСервера.Доступность = ДоступностьНастройкиДисконтногоСервера;
		Элементы.ГруппаВключенияОчередиДисконтногоСервера.Доступность = ДоступностьНастройкиДисконтногоСервера;
		
		БлокироватьАвтоматическиеСкидки = НаборКонстант.ИспользоватьДисконтныйСервер
											ИЛИ НаборКонстант.ИспользоватьБонусныеПрограммыЛояльности
											ИЛИ НаборКонстант.ИспользоватьЗапретРозничнойПродажиАлкоголя;
		
	ИначеЕсли РеквизитПутьКДанным = "НаборКонстант.ИспользоватьБонусныеПрограммыЛояльности" Тогда
		
		ДоступностьДисконтногоСервера = НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах
											И ИспользоватьСинхронизациюДанных;
		ДоступностьНастройкиДисконтногоСервера = НаборКонстант.ИспользоватьДисконтныйСервер
													И НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах
													И ИспользоватьСинхронизациюДанных;
		
		БлокироватьАвтоматическиеСкидки = НаборКонстант.ИспользоватьДисконтныйСервер
											ИЛИ НаборКонстант.ИспользоватьБонусныеПрограммыЛояльности
											ИЛИ НаборКонстант.ИспользоватьЗапретРозничнойПродажиАлкоголя;
		
	ИначеЕсли РеквизитПутьКДанным = "НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах" Тогда
		
		ДоступностьДисконтногоСервера = НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах
											И ИспользоватьСинхронизациюДанных;
		ДоступностьНастройкиДисконтногоСервера = НаборКонстант.ИспользоватьДисконтныйСервер
													И НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах
													И ИспользоватьСинхронизациюДанных;
		
		Элементы.ИспользоватьБонусныеПрограммыЛояльности.ТолькоПросмотр = НЕ НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах;
		
		Если НЕ НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
			ДоступностьЗапретаПродаж = Ложь;
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "НаборКонстант.ИспользоватьТоварныеКатегорииИКвотыАссортимента" Тогда
		БлокироватьАссортимент = НаборКонстант.ИспользоватьТоварныеКатегорииИКвотыАссортимента
									ИЛИ НаборКонстант.УстанавливатьВидыЦенВАссортименте;
									
	ИначеЕсли РеквизитПутьКДанным = "НаборКонстант.УстанавливатьВидыЦенВАссортименте" Тогда
		БлокироватьАссортимент = НаборКонстант.ИспользоватьТоварныеКатегорииИКвотыАссортимента
									ИЛИ НаборКонстант.УстанавливатьВидыЦенВАссортименте;
									
	ИначеЕсли РеквизитПутьКДанным = "" Тогда
		
		Элементы.НастройкиУправленияАссортиментом.Доступность = НаборКонстант.ИспользоватьАссортимент;
		ДоступностьДисконтногоСервера = НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах
											И ИспользоватьСинхронизациюДанных;
		ДоступностьНастройкиДисконтногоСервера = НаборКонстант.ИспользоватьДисконтныйСервер
													И НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах
													И ИспользоватьСинхронизациюДанных;
		
		БлокироватьАвтоматическиеСкидки = НаборКонстант.ИспользоватьДисконтныйСервер
											ИЛИ НаборКонстант.ИспользоватьБонусныеПрограммыЛояльности
											ИЛИ НаборКонстант.ИспользоватьЗапретРозничнойПродажиАлкоголя;
											
		БлокироватьАссортимент = НаборКонстант.ИспользоватьТоварныеКатегорииИКвотыАссортимента
									ИЛИ НаборКонстант.УстанавливатьВидыЦенВАссортименте;
									
		Элементы.ИспользоватьБонусныеПрограммыЛояльности.ТолькоПросмотр = НЕ НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах;
		
		Если НЕ НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
			ДоступностьЗапретаПродаж = Ложь;
		КонецЕсли;
		
		Элементы.ГруппаУправлениеАссортиментомПомощник.Доступность = НаборКонстант.ИспользоватьАссортимент;
		Элементы.ГруппаУправлениеАссортиментомДополнительно.Доступность = НаборКонстант.ИспользоватьАссортимент;
		
	КонецЕсли;
	
	Элементы.ИспользоватьДисконтныйСервер.ТолькоПросмотр = НЕ ДоступностьДисконтногоСервера;
	
	Элементы.ДекорацияКомментарийДисконтныйСервер.Видимость = ?(ДоступностьДисконтногоСервера, Ложь, Истина);
	
	Если НЕ ДоступностьДисконтногоСервера Тогда
		Если НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
			ТекстПодсказки = НСтр("ru = 'Невозможно использовать дисконтный сервер, потому что'")
				+ Символы.ПС + НСтр("ru = 'выключена синхронизация данных в разделе «Синхронизация данных».'");
		ИначеЕсли Константы.ИспользоватьСинхронизациюДанных.Получить() Тогда
			ТекстПодсказки = НСтр("ru = 'Невозможно использовать дисконтный сервер, потому'")
				+ Символы.ПС + НСтр("ru = 'что выключены скидки, наценки и ограничения продаж'");
		Иначе
			ТекстПодсказки = НСтр("ru = 'Невозможно использовать дисконтный сервер, потому'")
				+ Символы.ПС + НСтр("ru = 'что выключены скидки, наценки и ограничения продаж'")
				+ Символы.ПС + НСтр("ru = 'и синхронизация данных в разделе «Синхронизация данных».'");
		КонецЕсли;
		Элементы.ДекорацияКомментарийДисконтныйСервер.Подсказка = ТекстПодсказки;
	КонецЕсли;
	
	Элементы.ГруппаНастройкиДисконтногоСервера.Доступность = ДоступностьНастройкиДисконтногоСервера;
	Элементы.ГруппаВключенияОчередиДисконтногоСервера.Доступность = ДоступностьНастройкиДисконтногоСервера;
	Если ДоступностьНастройкиДисконтногоСервера Тогда
		Если ЗначениеЗаполнено(Константы.АдресДисконтногоСервера.Получить()) Тогда
			Элементы.НастройкаПодключенияКДисконтномуСерверу.ЦветТекста =  Новый Цвет();
		Иначе
			Элементы.НастройкаПодключенияКДисконтномуСерверу.ЦветТекста = Новый Цвет(255, 0, 0);
		КонецЕсли;
	Иначе
		Элементы.НастройкаПодключенияКДисконтномуСерверу.ЦветТекста = Новый Цвет();
	КонецЕсли;
	
	// Скидки.
	Если БлокироватьАвтоматическиеСкидки Тогда
		
		Элементы.ДекорацияКомментарийАвтоматическиеСкидкиВПродажах.Видимость = Истина;
		
		ТекстПодсказки =  НСтр("ru = 'Невозможно отключить скидки (наценки, ограничения), потому'");
		СчетчикУсловийБлокировки = 0;
		Если НаборКонстант.ИспользоватьБонусныеПрограммыЛояльности Тогда
			ТекстПодсказки = ТекстПодсказки + Символы.ПС
				+ НСтр("ru = 'что включены бонусные программы лояльности'");
			СчетчикУсловийБлокировки = СчетчикУсловийБлокировки + 1;
		КонецЕсли;
		
		Если НаборКонстант.ИспользоватьДисконтныйСервер Тогда
			Если СчетчикУсловийБлокировки = 0 Тогда
				ТекстПодсказки = ТекстПодсказки + Символы.ПС
					+ НСтр("ru = 'что включено подключение к дисконтному серверу'");
			Иначе
				ТекстПодсказки = ТекстПодсказки + Символы.ПС
					+ НСтр("ru = 'и подключение к дисконтному серверу'");
			КонецЕсли;
			СчетчикУсловийБлокировки = СчетчикУсловийБлокировки + 1;
		КонецЕсли;
		
		Если НаборКонстант.ИспользоватьЗапретРозничнойПродажиАлкоголя Тогда
			Если СчетчикУсловийБлокировки = 0 Тогда
				ТекстПодсказки = ТекстПодсказки + Символы.ПС
					+ НСтр("ru = 'что включен запрет розничной продажи'");
			Иначе
				ТекстПодсказки = ТекстПодсказки + Символы.ПС
					+ НСтр("ru = 'и запрет розничной продажи'");
			КонецЕсли;
			СчетчикУсловийБлокировки = СчетчикУсловийБлокировки + 1;
		КонецЕсли;
		Элементы.ДекорацияКомментарийАвтоматическиеСкидкиВПродажах.Подсказка = ТекстПодсказки;
		
	Иначе
		Элементы.ДекорацияКомментарийАвтоматическиеСкидкиВПродажах.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ИспользоватьАвтоматическиеСкидкиВПродажах.ТолькоПросмотр = БлокироватьАвтоматическиеСкидки;
	
	Элементы.ДекорацияКомментарийБонусныеПрограммыЛояльности.Видимость = ?(НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах, Ложь, Истина);
	
	Если ДоступностьЗапретаПродаж Тогда
		
		Элементы.ИспользоватьЗапретРозничнойПродажиАлкоголя.ТолькоПросмотр = Ложь;
		Элементы.ДекорацияКомментарийЗапретРозничнойПродажиАлкоголя.Видимость = Ложь;
		
	Иначе
		ТекстПодсказки =  НСтр("ru = 'Невозможно включить запрет розничной продажи,'");
		ТекстПодсказки = ТекстПодсказки + Символы.ПС
				+ НСтр("ru = 'потому что выключены ""Скидки, наценки и ограничения продаж""'");
		Элементы.ДекорацияКомментарийЗапретРозничнойПродажиАлкоголя.Подсказка = ТекстПодсказки;
		
		Элементы.ИспользоватьЗапретРозничнойПродажиАлкоголя.ТолькоПросмотр = Истина;
				
		Элементы.ДекорацияКомментарийЗапретРозничнойПродажиАлкоголя.Видимость = Истина;

	КонецЕсли;
	
	// Ассортимент.
	Если БлокироватьАссортимент Тогда
		ТекстПодсказки =  НСтр("ru = 'Невозможно отключить управление ассортиментом, потому'");
		СчетчикУсловийБлокировки = 0;
		Если НаборКонстант.ИспользоватьТоварныеКатегорииИКвотыАссортимента Тогда
			ТекстПодсказки = ТекстПодсказки + Символы.ПС
				+ НСтр("ru = 'что включены товарные категории и квоты ассортимента'");
			СчетчикУсловийБлокировки = СчетчикУсловийБлокировки + 1;
		КонецЕсли;
		
		Если НаборКонстант.УстанавливатьВидыЦенВАссортименте Тогда
			Если СчетчикУсловийБлокировки = 0 Тогда
				ТекстПодсказки = ТекстПодсказки + Символы.ПС
					+ НСтр("ru = 'что включена установка видов цен в ассортименте'");
			Иначе
				ТекстПодсказки = ТекстПодсказки + "," + Символы.ПС
					+ НСтр("ru = 'а также установка видов цен в ассортименте'");
			КонецЕсли;
			СчетчикУсловийБлокировки = СчетчикУсловийБлокировки + 1;
		КонецЕсли;
		
		Элементы.ДекорацияКомментарийАссортимент.Подсказка = ТекстПодсказки;
		Элементы.ДекорацияКомментарийАссортимент.Видимость = Истина;
	Иначе
		
		Элементы.ДекорацияКомментарийАссортимент.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ИспользоватьАссортимент.ТолькоПросмотр = БлокироватьАссортимент;
	
	Если РеквизитПутьКДанным = "" Тогда
		
		Если ИспользоватьСинхронизациюДанных Тогда
			Если ПараметрыСеанса.ИспользуемыеПланыОбмена.Найти("ПоМагазину") <> Неопределено
				И ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
				
				Элементы.ИспользоватьЦеновыеГруппы.ТолькоПросмотр 					= Истина;
				Элементы.ИспользоватьПрименениеЦен.ТолькоПросмотр 					= Истина;
				Элементы.ИспользоватьРучныеСкидкиВПродажах.ТолькоПросмотр 			= Истина;
				Элементы.ИспользоватьАвтоматическиеСкидкиВПродажах.ТолькоПросмотр 	= Истина;
				Элементы.ИспользоватьБонусныеПрограммыЛояльности.ТолькоПросмотр 	= Истина;
				Элементы.ИспользоватьАссортимент.ТолькоПросмотр 					= Истина;
				Элементы.НастройкиУправленияАссортиментом.Доступность 				= Ложь;
				Элементы.ГруппаУправлениеАссортиментомДополнительно.Доступность 	= Ложь;
				Элементы.ИспользоватьЗапретРозничнойПродажиАлкоголя.ТолькоПросмотр  = Истина;
				Элементы.ИспользоватьНеуникальныеКодыИнформационныхКарт.ТолькоПросмотр = Истина;
				
			ИначеЕсли ПараметрыСеанса.ИспользуемыеПланыОбмена.Найти("ПоРабочемуМесту") <> Неопределено
				И ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
				
				Элементы.ИспользоватьРучныеСкидкиВПродажах.ТолькоПросмотр 			= Истина;
				Элементы.ИспользоватьАвтоматическиеСкидкиВПродажах.ТолькоПросмотр 	= Истина;
				Элементы.ИспользоватьБонусныеПрограммыЛояльности.ТолькоПросмотр 	= Истина;
				Элементы.ИспользоватьЦеновыеГруппы.ТолькоПросмотр 					= Истина;
				Элементы.ИспользоватьПрименениеЦен.ТолькоПросмотр 					= Истина;
				Элементы.ИспользоватьАссортимент.ТолькоПросмотр 					= Истина;
				Элементы.НастройкиУправленияАссортиментом.Доступность 				= Ложь;
				Элементы.ГруппаУправлениеАссортиментомДополнительно.Доступность 	= Ложь;
				Элементы.ИспользоватьЗапретРозничнойПродажиАлкоголя.ТолькоПросмотр  = Истина;
				Элементы.ИспользоватьНеуникальныеКодыИнформационныхКарт.ТолькоПросмотр = Истина;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИспользованиеПримененияЦенВМагазинах(СписокМагазинов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Магазины.Ссылка КАК Магазин
	|ИЗ
	|	Справочник.Магазины КАК Магазины
	|ГДЕ
	|	Магазины.ИспользоватьПрименениеЦен
	|	И НЕ Магазины.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СписокМагазинов.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Магазин"));
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПримененияЦенВМагазинах(СписокМагазинов)
	
	НачатьТранзакцию();
	
	Для Каждого Магазин Из СписокМагазинов Цикл
		МагазинОбъект = Магазин.Значение.ПолучитьОбъект();
		МагазинОбъект.ИспользоватьПрименениеЦен = Ложь;
		МагазинОбъект.Записать();
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеКонстант(Отказ)
	
	Если Константы.ИспользоватьДисконтныйСервер.Получить()
		И НЕ ЗначениеЗаполнено(Константы.АдресДисконтногоСервера.Получить()) Тогда
		СтрокаСобщения = НСтр("ru = 'Не заполнен адрес дисконтного сервера'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСобщения, , "НастройкаПодключенияКДисконтномуСерверу");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
