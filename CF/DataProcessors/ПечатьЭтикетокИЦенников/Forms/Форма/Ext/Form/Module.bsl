
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	ИдентификаторСтроки = ОбработатьСтрокуДанныхПоКодуСервер(СтрокаРезультата, СтруктураРезультат.ДанныеПО);
	
	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("АктивизироватьСтроку", ИдентификаторСтроки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
	Если НЕ ОткрытаБлокирующаяФорма Тогда
		ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	МассивДанных = СтруктураПараметров.ЗначенияПоиска;
	ОбновитьКоличество = СтруктураПараметров.ОбновитьКоличество;
	
	Для Каждого СтрокаМассива Из МассивДанных Цикл
		
		ОбработатьСтрокуДанныхПоКодуСервер(СтрокаМассива, СтрокаМассива.Штрихкод);
		
		Если СтрокаМассива.Свойство("ТекстПредупреждения") Тогда
			Если СтруктураПараметров.Свойство("ТекстПредупреждения") Тогда
				СтруктураПараметров.ТекстПредупреждения.Добавить(СтрокаМассива.ТекстПредупреждения);
			Иначе
				МассивПредупреждений = Новый Массив;
				МассивПредупреждений.Добавить(СтрокаМассива.ТекстПредупреждения);
				СтруктураПараметров.Вставить("ТекстПредупреждения", МассивПредупреждений);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеПозицииТоваров(СтруктураПараметров) Экспорт 
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", СтруктураПараметров.Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", СтруктураПараметров.Характеристика);
	СтруктураПоиска.Вставить("Упаковка", СтруктураПараметров.Упаковка);
	МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	ИдентификаторСтроки = Неопределено;
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		ТекущаяСтрока = МассивСтрок[0];
		ИдентификаторСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	Иначе
		ТаблицаТоваров = ПолучитьПустуюТаблицуТоваров();
		
		ТекущаяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураПараметров);
		ИдентификаторСтроки = Неопределено;
		ДобавитьТовары(ТаблицаТоваров, ИдентификаторСтроки);
		ТекстСобытия = "";
		ТекстОповещения = "";
		ПересчитатьЦеныСервер(ТекстСобытия, ТекстОповещения);
		ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденныеСерийныеНомера(СтруктураНомера) Экспорт
	
	Если ИмяТаблицыВыборки = "Товары" Тогда
		ИдентификаторСтроки = ПодключаемоеОборудованиеРТВызовСервера.ДобавитьНоменклатуруПоСерийномуНомеру(ЭтотОбъект, СтруктураНомера);
	Иначе
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерСертификата", СтруктураНомера.СерийныйНомер);
		МассивСтрок = Объект.ПодарочныеСертификаты.НайтиСтроки(СтруктураПоиска);
		ИдентификаторСтроки = Неопределено;
		Если МассивСтрок.Количество() > 0 Тогда
			ТекущаяСтрока = МассивСтрок[0];
			ИдентификаторСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
		Иначе
			Сертификат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураНомера.СерийныйНомер, "Владелец");
			НоваяСтрока = Объект.ПодарочныеСертификаты.Добавить();
			НоваяСтрока.Сертификат = Сертификат;
			НоваяСтрока.НомерСертификата = СтруктураНомера.СерийныйНомер;		
			ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
			ПодарочныеСертификатыСертификатПриИзмененииНаСервере(, НоваяСтрока);
			Если ЗначениеЗаполнено(СтруктураНомера.Штрихкод) Тогда
				НоваяСтрока.Штрихкод = СтруктураНомера.Штрихкод;
				ПодарочныеСертификатыНомерСертификатаПриИзмененииНаСервере(, НоваяСтрока);
			Иначе
				ПодарочныеСертификатыНомерСертификатаПриИзмененииНаСервере(, НоваяСтрока, Истина);
			КонецЕсли;
			НоваяСтрока.Выбран = ПроверитьВозможностьВыбораСертификата(НоваяСтрока);
		КонецЕсли;
		Модифицированность = Истина;
	
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденнуюКарту(СтруктураПараметров) Экспорт
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Карта", СтруктураПараметров.Карта);
	МассивСтрок = Объект[ИмяТаблицыВыборки].НайтиСтроки(СтруктураПоиска);
	ИдентификаторСтроки = Неопределено;
	Если МассивСтрок.Количество() > 0 Тогда
		ТекущаяСтрока = МассивСтрок[0];
		ИдентификаторСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	Иначе
		НоваяСтрока = Объект[ИмяТаблицыВыборки].Добавить();
		НоваяСтрока.Карта = СтруктураПараметров.Карта;
		Если ЗначениеЗаполнено(СтруктураПараметров.Штрихкод) Тогда
			НоваяСтрока.Штрихкод = СтруктураПараметров.Штрихкод;
			Если ИмяТаблицыВыборки = "ДисконтныеКарты" Тогда
				ДисконтныеКартыКартаПриИзмененииНаСервере(, НоваяСтрока);
			Иначе
				РегистрационныеКартыКартаПриИзмененииНаСервере(, НоваяСтрока);
			КонецЕсли;
		Иначе
			Если ИмяТаблицыВыборки = "ДисконтныеКарты" Тогда
				ДисконтныеКартыКартаПриИзмененииНаСервере(, НоваяСтрока, Истина);
			Иначе
				РегистрационныеКартыКартаПриИзмененииНаСервере(, НоваяСтрока, Истина);
			КонецЕсли;
		КонецЕсли;
		Если ИмяТаблицыВыборки = "ДисконтныеКарты" Тогда
			НоваяСтрока.Выбран = ПроверитьВозможностьВыбораДисконтнойКарты(НоваяСтрока);
		Иначе
			НоваяСтрока.Выбран = ПроверитьВозможностьВыбораРегистрационнойКарты(НоваяСтрока);
		КонецЕсли;
		ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	Модифицированность = Истина;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОбработатьСозданиеИВыборНовойХарактеристики(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикУстановкиШаблонаЦенников(ВыбранноеЗначение, Параметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Количество = 0;
		
		МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.ШаблонЦенника  = ВыбранноеЗначение;
			СтрокаТЧ.Выбран         = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
			
			Если СтрокаТЧ.Выбран Тогда
				Количество = Количество + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		КоличествоВсего = МассивСтрок.Количество();
		
		Текст = НСтр("ru = 'Установлен шаблон ""%Шаблон%"".'");
		Текст = СтрЗаменить(Текст, "%Шаблон%", ВыбранноеЗначение);
		
		ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего);
		
		ОбновитьТипыПринтеров(МассивСтрок, "Ценник");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикУстановкиШаблонаЭтикеток(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Количество = 0;
		
		Если ДополнительныеПараметры.ТекущаяСтраница = "СтраницаТовары" Тогда
			МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
			Для Каждого НомерСтроки Из МассивСтрок Цикл
				СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
				СтрокаТЧ.ШаблонЭтикетки = ВыбранноеЗначение;
				СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
				
				Если СтрокаТЧ.Выбран Тогда
					Количество = Количество + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			ОбновитьТипыПринтеров(МассивСтрок, "Этикетка");
			
		ИначеЕсли ДополнительныеПараметры.ТекущаяСтраница = "СтраницаПодарочныеСертификаты" Тогда
			
			МассивСтрок = Элементы.ПодарочныеСертификаты.ВыделенныеСтроки;
			Для Каждого НомерСтроки Из МассивСтрок Цикл
				СтрокаТЧ = Объект.ПодарочныеСертификаты.НайтиПоИдентификатору(НомерСтроки);
				СтрокаТЧ.ШаблонЭтикетки = ВыбранноеЗначение;
				СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораСертификата(СтрокаТЧ);
				Если СтрокаТЧ.Выбран Тогда
					Количество = Количество + 1;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ДополнительныеПараметры.ТекущаяСтраница = "СтраницаДисконтныеКарты" Тогда
			
			МассивСтрок = Элементы.ДисконтныеКарты.ВыделенныеСтроки;
			Для Каждого НомерСтроки Из МассивСтрок Цикл
				СтрокаТЧ = Объект.ДисконтныеКарты.НайтиПоИдентификатору(НомерСтроки);
				СтрокаТЧ.ШаблонЭтикетки = ВыбранноеЗначение;
				СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораДисконтнойКарты(СтрокаТЧ);
				Если СтрокаТЧ.Выбран Тогда
					Количество = Количество + 1;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ДополнительныеПараметры.ТекущаяСтраница = "СтраницаРегистрационныеКарты" Тогда
			
			МассивСтрок = Элементы.РегистрационныеКарты.ВыделенныеСтроки;
			Для Каждого НомерСтроки Из МассивСтрок Цикл
				СтрокаТЧ = Объект.РегистрационныеКарты.НайтиПоИдентификатору(НомерСтроки);
				СтрокаТЧ.ШаблонЭтикетки = ВыбранноеЗначение;
				СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораРегистрационнойКарты(СтрокаТЧ);
				Если СтрокаТЧ.Выбран Тогда
					Количество = Количество + 1;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		КоличествоВсего = МассивСтрок.Количество();
		
		Текст = НСтр("ru = 'Установлен шаблон ""%Шаблон%"".'");
		Текст = СтрЗаменить(Текст, "%Шаблон%", ВыбранноеЗначение);
		
		ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполнитьТаблицуТоваров(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТаблицуТоваровНаСервере(Истина);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьТаблицуТоваровНаСервере(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполнитьТаблицуДисконтныхКарт(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТаблицуДисконтныхКартНаСервере(Истина);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьТаблицуДисконтныхКартНаСервере(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполнитьТаблицуРегистрационныхКарт(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТаблицуРегистрационныхКартНаСервере(Истина);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьТаблицуРегистрационныхКартНаСервере(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеУстановитьКоличествоЦенников(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		
		Количество = 0;
		
		МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.КоличествоЦенников  = ВыбранноеЗначение;
			СтрокаТЧ.Выбран              = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
			
			Если СтрокаТЧ.Выбран Тогда
				Количество = Количество + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		КоличествоВсего = МассивСтрок.Количество();
		
		Текст = НСтр("ru = 'Установлено количество ценников %Количество%.'");
		Текст = СтрЗаменить(Текст, "%Количество%", ВыбранноеЗначение);
		
		ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеУстановитьКоличествоЭтикеток(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		
		Количество = 0;
		Если ДополнительныеПараметры.ТекущаяСтраница = "СтраницаТовары" Тогда
			
			МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
			Для Каждого НомерСтроки Из МассивСтрок Цикл
				СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
				СтрокаТЧ.КоличествоЭтикеток  = ВыбранноеЗначение;
				СтрокаТЧ.Выбран              = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
				
				Если СтрокаТЧ.Выбран Тогда
					Количество = Количество + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			
		ИначеЕсли ДополнительныеПараметры.ТекущаяСтраница = "СтраницаПодарочныеСертификаты" Тогда
			
			МассивСтрок = Элементы.ПодарочныеСертификаты.ВыделенныеСтроки;
			Для Каждого НомерСтроки Из МассивСтрок Цикл
				СтрокаТЧ = Объект.ПодарочныеСертификаты.НайтиПоИдентификатору(НомерСтроки);
				СтрокаТЧ.КоличествоЭтикеток = ВыбранноеЗначение;
				СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораСертификата(СтрокаТЧ);
				Если СтрокаТЧ.Выбран Тогда
					Количество = Количество + 1;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ДополнительныеПараметры.ТекущаяСтраница = "СтраницаДисконтныеКарты" Тогда
			
			МассивСтрок = Элементы.ДисконтныеКарты.ВыделенныеСтроки;
			Для Каждого НомерСтроки Из МассивСтрок Цикл
				СтрокаТЧ = Объект.ДисконтныеКарты.НайтиПоИдентификатору(НомерСтроки);
				СтрокаТЧ.КоличествоЭтикеток = ВыбранноеЗначение;
				СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораДисконтнойКарты(СтрокаТЧ);
				Если СтрокаТЧ.Выбран Тогда
					Количество = Количество + 1;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ДополнительныеПараметры.ТекущаяСтраница = "СтраницаРегистрационныеКарты" Тогда
			
			МассивСтрок = Элементы.РегистрационныеКарты.ВыделенныеСтроки;
			Для Каждого НомерСтроки Из МассивСтрок Цикл
				СтрокаТЧ = Объект.РегистрационныеКарты.НайтиПоИдентификатору(НомерСтроки);
				СтрокаТЧ.КоличествоЭтикеток = ВыбранноеЗначение;
				СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораРегистрационнойКарты(СтрокаТЧ);
				Если СтрокаТЧ.Выбран Тогда
					Количество = Количество + 1;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		КоличествоВсего = МассивСтрок.Количество();
		Текст = НСтр("ru = 'Установлено количество этикеток %Количество%.'");
		Текст = СтрЗаменить(Текст, "%Количество%", ВыбранноеЗначение);
		
		ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПодбораПодарочныхСертификатов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено 
		И Результат.Количество() > 0 Тогда
		ОповещениеПодбораПодарочныхСертификатовНаСервере(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеКолонкиНоменклатуры = ЗначениеНастроекПовтИсп.ПолучитьЗначениеКонстанты("ДополнительнаяКолонкаПриОтображенииНоменклатуры");
	
	ИспользоватьПрименениеЦен = ПолучитьФункциональнуюОпцию("ИспользоватьПрименениеЦен");
	
	ИспользоватьОбменСПодключаемымОборудованием = ПолучитьФункциональнуюОпцию("ИспользоватьОбменСПодключаемымОборудованием");
	
	ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	ЗагрузитьНастройкиОтбораПоУмолчанию(
		КомпоновщикНастроек,
		"ПоляШаблона");
	ЗагрузитьНастройкиОтбораПоУмолчанию(
		КомпоновщикНастроекДисконтныхКарт,
		"ПоляШаблонаДисконтнаяКарта");
	ЗагрузитьНастройкиОтбораПоУмолчанию(
		КомпоновщикНастроекРегистрационныхКарт,
		"ПоляШаблонаРегистрационнаяКарта");
	
	СтруктураДанных = Новый Структура;
	
	Если ЗначениеЗаполнено(Параметры.АдресВХранилище) Тогда
		
		СтруктураДанных = ПолучитьИзВременногоХранилища(Параметры.АдресВХранилище);
		
		Если СтруктураДанных.Свойство("Товары") Тогда
			Объект.ИсходныеДанные.Загрузить(СтруктураДанных.Товары);
			СтраницаПриОткрытии = "СтраницаТовары";
		ИначеЕсли СтруктураДанных.Свойство("ПодарочныеСертификаты") Тогда
			Объект.ПодарочныеСертификаты.Загрузить(СтруктураДанных.ПодарочныеСертификаты);
			СтраницаПриОткрытии = "СтраницаПодарочныеСертификаты";
			ЭтаФорма.АвтоЗаголовок = Ложь;
			ЭтаФорма.Заголовок = НСтр("ru = 'Печать этикеток подарочных сертификатов'");
		ИначеЕсли СтруктураДанных.Свойство("ДисконтныеКарты") Тогда
			Объект.ДисконтныеКарты.Загрузить(СтруктураДанных.ДисконтныеКарты);
			СтраницаПриОткрытии = "СтраницаДисконтныеКарты";
			ЭтаФорма.АвтоЗаголовок = Ложь;
			ЭтаФорма.Заголовок = НСтр("ru = 'Печать этикеток дисконтных карт'");
		ИначеЕсли СтруктураДанных.Свойство("РегистрационныеКарты") Тогда
			Объект.РегистрационныеКарты.Загрузить(СтруктураДанных.РегистрационныеКарты);
			СтраницаПриОткрытии = "СтраницаРегистрационныеКарты";
			ЭтаФорма.АвтоЗаголовок = Ложь;
			ЭтаФорма.Заголовок = НСтр("ru = 'Печать этикеток регистрационных карт'");
		ИначеЕсли СтруктураДанных.Свойство("Справки2ЕГАИС") Тогда
			Объект.ИсходныеДанные.Загрузить(СтруктураДанных.Справки2ЕГАИС);
			СтраницаПриОткрытии = "СтраницаТовары";
			ЭтаФорма.АвтоЗаголовок = Ложь;
			ЭтаФорма.Заголовок = НСтр("ru = 'Печать этикеток Справок 2 ЕГАИС'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДанных.СтруктураДействий) Тогда
			
			ПараметрДействия = Неопределено;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("УстановитьРежим", ПараметрДействия) Тогда
				УстановитьРежим(ПараметрДействия);
			Иначе
				УстановитьРежим("ПечатьЭтикеток");
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ИспользоватьСправкиБ", ПараметрДействия) Тогда
				Объект.ИспользоватьСправкиБ = ПараметрДействия;
				Элементы.ТоварыСправка2.Видимость = ПараметрДействия;
				Элементы.ТоварыШтрихСправкиБ.Видимость = ПараметрДействия;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьСклад", ПараметрДействия) Тогда
				УстановитьЭлементОтбораСКД(КомпоновщикНастроек, "Склад", ПараметрДействия, Истина);
			КонецЕсли;
			
			СтруктураДанных.СтруктураДействий.Свойство("РежимПечатиИзОбработки", ПараметрДействия);
			Объект.ПечатьИзОбработки = ПараметрДействия;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьМагазин", ПараметрДействия) Тогда
				
				Объект.Магазин = ПараметрДействия;
				МагазинПриИзмененииСервер();
				
			КонецЕсли;

			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьПравилоЦенообразования", ПараметрДействия) Тогда
				Объект.ПравилоЦенообразования = ПараметрДействия;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьВидЦены", ПараметрДействия) Тогда
				Объект.ВидЦены = ПараметрДействия;
			КонецЕсли;

			Если СтруктураДанных.СтруктураДействий.Свойство("УстановитьСпособПолученияЦен", ПараметрДействия) Тогда
				Объект.ЦеныПоВидуЦены = ПараметрДействия;
				ЦеныПоВидуЦены = Число(Объект.ЦеныПоВидуЦены);
			Иначе
				ЦеныПоВидуЦены = 0;
			КонецЕсли;

			Если СтруктураДанных.СтруктураДействий.Свойство("УстановитьСостояниеЦен", ПараметрДействия) Тогда
				Объект.ЦеныНазначенныеДействующие = ПараметрДействия;
				ЦеныНазначенныеДействующие = Число(Объект.ЦеныНазначенныеДействующие);
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("УстановитьДатуПолученияЦен", ПараметрДействия) Тогда
				
				Объект.ЦеныНаДату = ПараметрДействия;
				
			Иначе
				
				Объект.ЦеныНаДату = ТекущаяДатаСеанса();
				
			КонецЕсли;

			Если СтруктураДанных.СтруктураДействий.Свойство("ПоказыватьКолонкуКоличествоВДокументе", ПараметрДействия) Тогда
				Элементы.ТоварыКоличествоВДокументе.Видимость = ПараметрДействия;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("УстановитьРежимПечатиИзДокумента", ПараметрДействия) Тогда
				Объект.ПечатьИзДокумента = Истина;
			КонецЕсли;
			
			ЗаполнитьКоличествоЭтикетокПоДокументу        = СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьКоличествоЭтикетокПоДокументу", ПараметрДействия);
			
			Если СтруктураДанных.СтруктураДействий.Свойство("СкрыватьКомандуЗаполненияПоДокументу", ПараметрДействия) Тогда
				Элементы.ЗаполнитьКоличествоЭтикетокПоДокументу.Видимость = Ложь;
				СкрыватьКомандуЗаполненияПоДокументу = Истина;
			КонецЕсли;
			
			Если СтруктураДанных.СтруктураДействий.Свойство("ЗаполнитьТаблицуТоваров", ПараметрДействия) Тогда
				ЗаполнитьТаблицуТоваровНаСервере();
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.ПечатьИзДокумента Тогда
			МассивДокументов = Новый Массив;
			СтруктураДанных.Свойство("МассивДокументов", МассивДокументов);
			СписокДокументов.ЗагрузитьЗначения(МассивДокументов);
		КонецЕсли;
		
	Иначе
		// Вызов обработки из интерфейса.
		
		ВосстановитьНастройкиНаСервере();
		Объект.Магазин = ОбщегоНазначенияРТ.ОпределитьТекущийМагазин();
		МагазинПриИзмененииСервер();
		Объект.ЦеныНаДату = ТекущаяДатаСеанса();
		ЗаполнитьКоличествоЭтикетокПоДокументу = Ложь;
		Если НЕ ЗначениеЗаполнено(Объект.Режим) Тогда
			УстановитьРежимПечатьЦенниковИЭтикетокНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
	ИспользуетсяТСД = Ложь;
	Попытка
		ТипыИспользуемогоОборудования = МенеджерОборудованияВызовСервера.ТипыИспользуемогоОборудованияТекущегоРабочегоМеста();
		Если ТипыИспользуемогоОборудования <> Неопределено 
			И ТипЗнч(ТипыИспользуемогоОборудования) = Тип("Массив") Тогда
			Если ТипыИспользуемогоОборудования.Найти(Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных) <> Неопределено Тогда
				ИспользуетсяТСД = Истина;
			КонецЕсли;
		КонецЕсли;
	Исключение
		СтрокаОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Элементы.ПодарочныеСертификатыЗагрузитьДанныеИзТСД.Видимость = ИспользуетсяТСД;
	Элементы.ДисконтныеКартыЗагрузитьДанныеИзТСД.Видимость = ИспользуетсяТСД;
	Элементы.РегистрационныеКартыЗагрузитьДанныеИзТСД.Видимость = ИспользуетсяТСД;
	
	УстановитьВидимостьЭлементов();
	ИзменитьДоступностьЭлементовПриИзмененииЦеныПоВидуЦены();
	ОбновитьВидимостьЭлементов();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	
	ИмяТаблицыВыборки = ИмяТаблицыВыборки(Элементы.СтраницыТиповПечати.ТекущаяСтраница.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(СтраницаПриОткрытии) Тогда
		Элементы.СтраницыТиповПечати.ТекущаяСтраница = Элементы[СтраницаПриОткрытии];
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование
	
	УстановитьКнопкуПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваров.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		ПересчитатьЦены(Неопределено);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		
		Окно.Активизировать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если (НЕ Объект.ПечатьИзДокумента)
		И (НЕ Объект.ПечатьИзОбработки) Тогда
		СохранитьНастройкиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен()
		И ЗначениеЗаполнено(ИмяТаблицыВыборки) Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЦеныПоВидуЦеныПриИзменении(Элемент)
	
	ЦеныПоВидуЦеныПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура Гиперссылка1Нажатие(Элемент)
	ПоказатьЗначение(,СписокДокументов.Получить(0).Значение);
КонецПроцедуры

&НаКлиенте
Процедура Гиперссылка2Нажатие(Элемент)
	ПоказатьЗначение(,СписокДокументов.Получить(1).Значение);
КонецПроцедуры

&НаКлиенте
Процедура Гиперссылка3Нажатие(Элемент)
	ПоказатьЗначение(,СписокДокументов.Получить(2).Значение);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеДокументыНажатие(Элемент)
	ПоказатьЗначение(,СписокДокументов);
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	ТекущаяСтраница = Элементы.СтраницыТиповПечати.ТекущаяСтраница.Имя;
	Если Элементы.СтраницыТиповПечати.ТекущаяСтраница = Элементы.СтраницаТовары Тогда
		МагазинПриИзмененииСервер();
		ПересчитатьЦены(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПриИзменении(Элемент)
	
	ПересчитатьЦены(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныНаДатуПриИзменении(Элемент)
	
	ПересчитатьЦены(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныНазначенныеДействующиеПриИзменении(Элемент)
	
	ПересчитатьЦены(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоЭтикетокПоДокументуПриИзменении(Элемент)
	
	ЗаполнитьКоличествоЦенниковИЭтикетокПоДокументуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыТиповПечатиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьКнопкуПоУмолчанию();
	ИмяТаблицыВыборки = ИмяТаблицыВыборки(Элементы.СтраницыТиповПечати.ТекущаяСтраница.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ОбработкаТабличнойЧастиТоварыКлиент.СоздатьХарактеристикуНоменклатуры(ЭтотОбъект, Элемент, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоЦенниковПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Выбран = ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Объект.Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоЭтикетокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Выбран = ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Объект.Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонЦенникаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Выбран = ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Объект.Режим);
	
	ОбновитьТипШаблона(ТекущиеДанные.ПолучитьИдентификатор(), "Ценник");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонЭтикеткиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.Выбран = ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Объект.Режим);
	
	ОбновитьТипШаблона(ТекущиеДанные.ПолучитьИдентификатор(), "Этикетка");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока = ТекущиеДанные.НомерСтроки - 1;
	
	Если НЕ ТекущиеДанные.Выбран Тогда
		
	Иначе
		
		ОчиститьСообщения();
		
		ТекущиеДанные.Выбран = Истина;
		
		Если Объект.Режим = "ПечатьЦенниковИЭтикеток" Тогда
			
			Если (       ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					И ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					И ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
					
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество ценников'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЦенников";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И    ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
					
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не выбран шаблон ценника'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].ШаблонЦенника";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
					
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество этикеток'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЭтикеток";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
					
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не выбран шаблон этикетки'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].ШаблонЭтикетки";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (   ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И    ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
					
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество ценников и(или) этикеток'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЦенников";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И    ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И    ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не выбраны шаблоны ценников и(или) этикеток'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].ШаблонЦенника";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			ИначеЕсли (НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЦенников)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)
					 И НЕ ЗначениеЗаполнено(ТекущиеДанные.КоличествоЭтикеток)) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество ценников и(или) этикеток'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЦенников";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли Объект.Режим = "ПечатьЭтикеток" Тогда
			
			Если ТекущиеДанные.КоличествоЭтикеток = 0 Тогда
			
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество этикеток'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЭтикеток";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не выбран шаблон этикетки'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].ШаблонЭтикетки";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли Объект.Режим = "ПечатьЦенников" Тогда
			
			Если ТекущиеДанные.КоличествоЦенников = 0 Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено количество ценников'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].КоличествоЦенников";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не выбран шаблон ценника'");
				Сообщение.Поле = "Объект.Товары["+ТекущаяСтрока+"].ШаблонЦенника";
				Сообщение.Сообщить();
				
				ТекущиеДанные.Выбран = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонЦенникаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		         Истина, "Справочник.ХранилищеШаблонов.Форма.ФормаВыбора.Открытие");

	ОбработчикОповещения = Новый ОписаниеОповещения("ТоварыШаблонЦенникаНачалоВыбораЗавершение", ЭтаФорма);
	
	ПараметрыОткрытия = Новый Структура();
	
	ТипыШаблонов = Новый Массив;
	ТипыШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаЦенник"));
	ТипыШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток"));
	
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ТипШаблона", ТипыШаблонов));
	
	ОткрытьФорму("Справочник.ХранилищеШаблонов.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма,,,, ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонЭтикеткиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		         Истина, "Справочник.ХранилищеШаблонов.Форма.ФормаВыбора.Открытие");

	ОбработчикОповещения = Новый ОписаниеОповещения("ТоварыШаблонЭтикеткиНачалоВыбораЗавершение", ЭтаФорма);
	
	ПараметрыОткрытия = Новый Структура();
	
	ТипыШаблонов = Новый Массив;
	ТипыШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаЦенник"));
	ТипыШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток"));
	
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ТипШаблона", ТипыШаблонов));
	
	ОткрытьФорму("Справочник.ХранилищеШаблонов.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма,,,, ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонЦенникаОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.ТипШаблонаЦенника = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонЭтикеткиОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.ТипШаблонаЭтикетки = 0;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодарочныеСертификаты

&НаКлиенте
Процедура ПодарочныеСертификатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСтрока = Элементы.ПодарочныеСертификаты.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		Если Элемент.ТекущийЭлемент = Элементы.ПодарочныеСертификатыВыбран Тогда
			Если ТекущаяСтрока.Выбран Тогда
				ТекущаяСтрока.Выбран = ПроверитьВозможностьВыбораСертификата(ТекущаяСтрока);
				Если НЕ ТекущаяСтрока.Выбран Тогда
					ПоказатьОповещениеПользователюОВозможнойОшибке("", 0, 1);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ТекущаяСтрока <> Неопределено Тогда
				ТекущаяСтрока.Выбран = ПроверитьВозможностьВыбораСертификата(ТекущаяСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодарочныеСертификатыСертификатПриИзменении(Элемент)
	
	ИдентификаторСтроки = Элементы.ПодарочныеСертификаты.ТекущиеДанные.ПолучитьИдентификатор();
	ПодарочныеСертификатыСертификатПриИзмененииНаСервере(ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодарочныеСертификатыНомерСертификатаПриИзменении(Элемент)
	ИдентификаторСтроки = Элементы.ПодарочныеСертификаты.ТекущиеДанные.ПолучитьИдентификатор();
	ПодарочныеСертификатыНомерСертификатаПриИзмененииНаСервере(ИдентификаторСтроки, ,  Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДисконтныеКарты

&НаКлиенте
Процедура ДисконтныеКартыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСтрока = Элементы.ДисконтныеКарты.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		Если Элемент.ТекущийЭлемент = Элементы.ДисконтныеКартыВыбран Тогда
			Если ТекущаяСтрока.Выбран Тогда
				ТекущаяСтрока.Выбран = ПроверитьВозможностьВыбораДисконтнойКарты(ТекущаяСтрока);
				Если НЕ ТекущаяСтрока.Выбран Тогда
					ПоказатьОповещениеПользователюОВозможнойОшибке("", 0, 1);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ТекущаяСтрока <> Неопределено Тогда
				ТекущаяСтрока.Выбран = ПроверитьВозможностьВыбораДисконтнойКарты(ТекущаяСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДисконтныеКартыКартаПриИзменении(Элемент)
	
	ИдентификаторСтроки = Элементы.ДисконтныеКарты.ТекущиеДанные.ПолучитьИдентификатор();
	ДисконтныеКартыКартаПриИзмененииНаСервере(ИдентификаторСтроки, , Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРегистрационныеКарты

&НаКлиенте
Процедура РегистрационныеКартыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСтрока = Элементы.РегистрационныеКарты.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		Если Элемент.ТекущийЭлемент = Элементы.РегистрационныеКартыВыбран Тогда
			Если ТекущаяСтрока.Выбран Тогда
				ТекущаяСтрока.Выбран = ПроверитьВозможностьВыбораРегистрационнойКарты(ТекущаяСтрока);
				Если НЕ ТекущаяСтрока.Выбран Тогда
					ПоказатьОповещениеПользователюОВозможнойОшибке("", 0, 1);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ТекущаяСтрока <> Неопределено Тогда
				ТекущаяСтрока.Выбран = ПроверитьВозможностьВыбораРегистрационнойКарты(ТекущаяСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрационныеКартыКартаПриИзменении(Элемент)
	
	ИдентификаторСтроки = Элементы.РегистрационныеКарты.ТекущиеДанные.ПолучитьИдентификатор();
	РегистрационныеКартыКартаПриИзмененииНаСервере(ИдентификаторСтроки, , Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	Если ИмяТаблицыВыборки = "Товары" Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("АдресТоваровВХранилище", ПоместитьВоВременноеХранилищеСервер());
		ДополнительныеПараметры.Вставить("ЭтоСсылочныйОбъект", Ложь);
		ПодключаемоеОборудованиеРТКлиент.ВыгрузитьДокументВТСД(ЭтотОбъект, Истина, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	Если ЗначениеЗаполнено(ИмяТаблицыВыборки) Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяТаблицыВыборки", ИмяТаблицыВыборки);
		ДополнительныеПараметры.Вставить("ЕстьКоличество", Ложь);
		ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	Если ЗначениеЗаполнено(ИмяТаблицыВыборки) Тогда
		ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	Если ЗначениеЗаполнено(ИмяТаблицыВыборки) Тогда
		ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Процедура вызывается при нажатии на кнопку "Выбрать выделенные платежи".
//
&НаКлиенте
Процедура ВыбратьВыделенныеСтроки(Команда)
	
	Количество = 0;
	ТекущаяСтраница = Элементы.СтраницыТиповПечати.ТекущаяСтраница.Имя;
	Если ТекущаяСтраница = "СтраницаТовары" Тогда
		
		МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
			
			Если СтрокаТЧ.Выбран Тогда
				Количество = Количество + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТекущаяСтраница = "СтраницаПодарочныеСертификаты" Тогда
		
		МассивСтрок = Элементы.ПодарочныеСертификаты.ВыделенныеСтроки;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			
			СтрокаТЧ = Объект.ПодарочныеСертификаты.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораСертификата(СтрокаТЧ);
			
			Если СтрокаТЧ.Выбран Тогда
				Количество = Количество + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТекущаяСтраница = "СтраницаДисконтныеКарты" Тогда
		
		МассивСтрок = Элементы.ДисконтныеКарты.ВыделенныеСтроки;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			
			СтрокаТЧ = Объект.ДисконтныеКарты.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораДисконтнойКарты(СтрокаТЧ);
			
			Если СтрокаТЧ.Выбран Тогда
				Количество = Количество + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТекущаяСтраница = "СтраницаРегистрационныеКарты" Тогда
		
		МассивСтрок = Элементы.РегистрационныеКарты.ВыделенныеСтроки;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			
			СтрокаТЧ = Объект.РегистрационныеКарты.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораРегистрационнойКарты(СтрокаТЧ);
			
			Если СтрокаТЧ.Выбран Тогда
				Количество = Количество + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	КоличествоВсего = МассивСтрок.Количество();
	ПоказатьОповещениеПользователюОВозможнойОшибке("", Количество, КоличествоВсего);
	
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку "Исключить выделенные платежи".
//
&НаКлиенте
Процедура ИсключитьВыделенныеСтроки(Команда)
	
	ТекущаяСтраница = Элементы.СтраницыТиповПечати.ТекущаяСтраница.Имя;
	Если ТекущаяСтраница = "СтраницаТовары" Тогда
		
		МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.Выбран = Ложь;
		КонецЦикла;
		
	ИначеЕсли ТекущаяСтраница = "СтраницаПодарочныеСертификаты" Тогда
		
		МассивСтрок = Элементы.ПодарочныеСертификаты.ВыделенныеСтроки;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТЧ = Объект.ПодарочныеСертификаты.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.Выбран = Ложь;
		КонецЦикла;
		
	ИначеЕсли ТекущаяСтраница = "СтраницаДисконтныеКарты" Тогда
		
		МассивСтрок = Элементы.ДисконтныеКарты.ВыделенныеСтроки;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТЧ = Объект.ДисконтныеКарты.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.Выбран = Ложь;
		КонецЦикла;
		
	ИначеЕсли ТекущаяСтраница = "СтраницаРегистрационныеКарты" Тогда
		
		МассивСтрок = Элементы.РегистрационныеКарты.ВыделенныеСтроки;
		Для Каждого НомерСтроки Из МассивСтрок Цикл
			СтрокаТЧ = Объект.РегистрационныеКарты.НайтиПоИдентификатору(НомерСтроки);
			СтрокаТЧ.Выбран = Ложь;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоПоУмолчанию(Команда)
	
	Количество = 0;
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
		
		Если Объект.Режим = "ПечатьЭтикеток" ИЛИ Объект.Режим = "ПечатьЦенниковИЭтикеток" Тогда
			
			Если ЗаполнитьКоличествоЭтикетокПоДокументу Тогда
				СтрокаТЧ.КоличествоЭтикеток = СтрокаТЧ.КоличествоВДокументе;
			Иначе
				СтрокаТЧ.КоличествоЭтикеток = ?(СтрокаТЧ.ОстатокНаСкладе > 0, СтрокаТЧ.ОстатокНаСкладе, 0);
			КонецЕсли;
			
		КонецЕсли;
		
		// Расчет количества Ценников.
		Если Объект.Режим = "ПечатьЦенников" ИЛИ Объект.Режим = "ПечатьЦенниковИЭтикеток" Тогда
			
			СтрокаТЧ.КоличествоЦенников = 1;
			
		КонецЕсли;
		
		СтрокаТЧ.Выбран              = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
		
		Количество = Количество + 1;
		
	КонецЦикла;
	
	КоличествоВсего = МассивСтрок.Количество();
	
	Текст = НСтр("ru = 'Установлено количество по умолчанию для  %Количество% строк.'");
	Текст = СтрЗаменить(Текст, "%Количество%", КоличествоВсего);
	
	ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего);
		
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ОчиститьСообщения();
	Объект.НажатаПечать = Истина;
	
	РежимПечати = "Ценники,Этикетки";
	Если Элементы.СтраницыТиповПечати.ТекущаяСтраница = Элементы.СтраницаТовары Тогда
		Если Объект.Товары.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одного товара'"));
			Возврат;
		КонецЕсли;
		Если Объект.Режим = "ПечатьЦенников" Тогда
			РежимПечати = "Ценники";
		ИначеЕсли Объект.Режим = "ПечатьЭтикеток" Тогда
			РежимПечати = "Этикетки";
		КонецЕсли;
		Объект.СтраницаПечати = "СтраницаТовары";
		
	ИначеЕсли Элементы.СтраницыТиповПечати.ТекущаяСтраница = Элементы.СтраницаПодарочныеСертификаты Тогда
		Если Объект.ПодарочныеСертификаты.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одного подарочного сертификата'"));
			Возврат;
		КонецЕсли;
		РежимПечати = "ПодарочныеСертификаты";
		Объект.СтраницаПечати = "СтраницаПодарочныеСертификаты";
		
	ИначеЕсли Элементы.СтраницыТиповПечати.ТекущаяСтраница = Элементы.СтраницаДисконтныеКарты Тогда
		Если Объект.ДисконтныеКарты.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одной дисконтной карты'"));
			Возврат;
		КонецЕсли;
		РежимПечати = "ДисконтныеКарты";
		Объект.СтраницаПечати = "СтраницаДисконтныеКарты";
		
	ИначеЕсли Элементы.СтраницыТиповПечати.ТекущаяСтраница = Элементы.СтраницаРегистрационныеКарты Тогда
		Если Объект.РегистрационныеКарты.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одной регистрационной карты'"));
			Возврат;
		КонецЕсли;
		РежимПечати = "РегистрационныеКарты";
		Объект.СтраницаПечати = "СтраницаРегистрационныеКарты";
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.ПроверитьЗаполнение() Тогда
		
		
		ПараметрКоманды = Новый Массив;   // Добавим объект обработки печати ценников и этикеток в массив параметров печати.
		ПараметрКоманды.Добавить(Объект); // В дальнейшем будем обращаться к объекту через ПараметрКоманды[0].
		

		Если Элементы.СтраницыТиповПечати.ТекущаяСтраница = Элементы.СтраницаТовары Тогда

			Если ПроверитьТипШаблоновЭтикеток() Тогда
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
				"Обработка.ПечатьЭтикетокИЦенников", // Для вызова метода менеджера обработки "Печать".
				РежимПечати,
				ПараметрКоманды,
				ЭтаФорма, // Форма владелец
				Новый Структура("Режим, РежимПечати", Объект.Режим, РежимПечати));
			КонецЕсли;
            
            // &ЗамерПроизводительности
            ОценкаПроизводительностиРТКлиент.НачатьЗамер(
                     Истина, "Обработка.ПечатьЭтикетокИЦенников.Форма.ФормаПечать.Открытие");

			ПараметрыОткрытия = Новый Структура();
			
			ПараметрыПечати = Новый Структура;
			ПараметрыПечати.Вставить("РежимПечати", РежимПечати);
			
			ПараметрКоманды = Новый Массив;
			ПараметрКоманды.Добавить(Объект);
			
			ПараметрыПечати.Вставить("ПараметрКоманды", ПараметрКоманды);
			ПараметрыПечати.Вставить("Форма", Объект);
			ПараметрыПечати.Вставить("ПараметрыПечати", Новый Структура("Режим, РежимПечати", Объект.Режим, РежимПечати));
			ПараметрыПечати.Вставить("ИспользоватьСправкиБ", Объект.ИспользоватьСправкиБ);
			ПараметрыОткрытия.Вставить("ПараметрыПечати", ПараметрыПечати);
			
			ПараметрыПечатиДляПринтераЭтикеток = Новый Структура;
			
			ОбъектыПечати = Новый Массив;
			ОбъектыПечати.Добавить(Объект);
			
			ПараметрыПечатиДляПринтераЭтикеток.Вставить("ОбъектыПечати", ОбъектыПечати);
			ПараметрыПечатиДляПринтераЭтикеток.Вставить("МенеджерПечати", "Обработка.ПечатьЭтикетокИЦенников");
			ПараметрыПечатиДляПринтераЭтикеток.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
			ПараметрыОткрытия.Вставить("ПараметрыПечатиДляПринтераЭтикеток", ПараметрыПечатиДляПринтераЭтикеток);
			
			Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ОткрытьФорму("Обработка.ПечатьЭтикетокИЦенников.Форма.ФормаПечать", ПараметрыОткрытия, ЭтаФорма,,,,, Режим);

		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
				"Обработка.ПечатьЭтикетокИЦенников", // Для вызова метода менеджера обработки "Печать".
				РежимПечати,
				ПараметрКоманды,
				ЭтаФорма, // Форма владелец
				Новый Структура("Режим, РежимПечати", Объект.Режим, РежимПечати));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОчиститьРаспечатанныеЦенники();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОтбор(Команда)
	
	ТекущаяСтраница = Элементы.СтраницыТиповПечати.ТекущаяСтраница.Имя;
	Если ТекущаяСтраница = "СтраницаТовары" Тогда
		ВидимостьОтбора = НЕ ВидимостьОтбора;
		Элементы.ГруппаОтбор.Видимость = ВидимостьОтбора;
		Элементы.Отбор.Заголовок = ?(ВидимостьОтбора,
										НСтр("ru = 'Скрыть отбор'"),
										НСтр("ru = 'Показать отбор'"));
	
	ИначеЕсли ТекущаяСтраница = "СтраницаДисконтныеКарты" Тогда
		
		ВидимостьОтбораДисконтныхКарт = НЕ ВидимостьОтбораДисконтныхКарт;
		Элементы.ГруппаОтборДисконтныхКарт.Видимость = ВидимостьОтбораДисконтныхКарт;
		Элементы.ДисконтныеКартыПоказатьСкрытьОтбор.Заголовок = ?(ВидимостьОтбораДисконтныхКарт,
																	НСтр("ru = 'Скрыть отбор'"),
																	НСтр("ru = 'Показать отбор'"));
		
	ИначеЕсли ТекущаяСтраница = "СтраницаРегистрационныеКарты" Тогда
		
		ВидимостьОтбораРегистрационныхКарт = НЕ ВидимостьОтбораРегистрационныхКарт;
		Элементы.ГруппаОтборРегистрационныхКарт.Видимость = ВидимостьОтбораРегистрационныхКарт;
		Элементы.РегистрационныеКартыПоказатьСкрытьОтбор.Заголовок = ?(ВидимостьОтбораРегистрационныхКарт,
																		НСтр("ru = 'Скрыть отбор'"),
																		НСтр("ru = 'Показать отбор'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоЦенников(Команда)
	
	ВыбранноеЗначение = Неопределено;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеУстановитьКоличествоЦенников", ЭтотОбъект);
	ПоказатьВводЧисла(ОписаниеОповещения,ВыбранноеЗначение, НСтр("ru = 'Введите количество ценников'"), 10, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоЭтикеток(Команда)
	
	ВыбранноеЗначение = Неопределено;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтраница", Элементы.СтраницыТиповПечати.ТекущаяСтраница.Имя);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеУстановитьКоличествоЭтикеток", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВводЧисла(ОписаниеОповещения, ВыбранноеЗначение, НСтр("ru = 'Введите количество этикеток'"), 10, 0);
	
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШаблонЦенников(Команда)
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		         Истина, "Справочник.ХранилищеШаблонов.Форма.ФормаВыбора.Открытие");

	ВыбранноеЗначение = Неопределено;
	ПараметрыОткрытия = Новый Структура();
	
	МассивТиповШаблонов = Новый Массив;
	МассивТиповШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаЦенник"));
	МассивТиповШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток"));
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ТипШаблона", МассивТиповШаблонов));
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработчикУстановкиШаблонаЦенников", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ХранилищеШаблонов.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШаблонЭтикеток(Команда)
	
	ВыбранноеЗначение = Неопределено;
	ПараметрыОткрытия = Новый Структура();
	ТекущаяСтраница = Элементы.СтраницыТиповПечати.ТекущаяСтраница.Имя;
	Если ТекущаяСтраница = "СтраницаПодарочныеСертификаты" Тогда
		ТипыШаблонов = ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ПодарочныйСертификат");
	ИначеЕсли ТекущаяСтраница = "СтраницаДисконтныеКарты" Тогда
		ТипыШаблонов = ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ДисконтнаяКарта");
	ИначеЕсли ТекущаяСтраница = "СтраницаРегистрационныеКарты" Тогда
		ТипыШаблонов = ПредопределенноеЗначение("Перечисление.ТипыШаблонов.РегистрационнаяКарта");
	Иначе
		ТипыШаблонов = Новый Массив;
		ТипыШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаЦенник"));
		ТипыШаблонов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток"));
	КонецЕсли;
    
    // &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		         Истина, "Справочник.ХранилищеШаблонов.Форма.ФормаВыбора.Открытие");

    ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ТипШаблона", ТипыШаблонов));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтраница", ТекущаяСтраница);
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработчикУстановкиШаблонаЭтикеток", ЭтотОбъект, ДополнительныеПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ХранилищеШаблонов.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПечатьЦенников(Команда)
	
	УстановитьРежимПечатьЦенниковНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПечатьЦенниковИЭтикеток(Команда)
	
	УстановитьРежимПечатьЦенниковИЭтикетокНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПечатьЭтикеток(Команда)
	
	УстановитьРежимПечатьЭтикетокНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОтбору(Команда)
	
	ОчиститьСообщения();
	Объект.НажатаПечать = Ложь;
	
	ТекущаяСтраница = Элементы.СтраницыТиповПечати.ТекущаяСтраница.Имя;
	Если ТекущаяСтраница = "СтраницаТовары" Тогда
		
		Если Объект.Товары.Количество() = 0 Тогда
			ЗаполнитьТаблицуТоваровНаСервере(Ложь);
		Иначе
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеЗаполнитьТаблицуТоваров", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Сохранить данные о количестве, шаблонах в табличной части при перезаполнении?'"), РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Да);
			
		КонецЕсли;
	
	ИначеЕсли ТекущаяСтраница = "СтраницаДисконтныеКарты" Тогда
		
		Если Объект.ДисконтныеКарты.Количество() = 0 Тогда
			ЗаполнитьТаблицуДисконтныхКартНаСервере(Ложь);
		Иначе
			ДополнительныеПараметры = Новый Структура;
			ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеЗаполнитьТаблицуДисконтныхКарт", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(
				ОписаниеОповещения,
				НСтр("ru = 'Очистить таблицу дисконтных карт перед заполнением?'"),
				РежимДиалогаВопрос.ДаНетОтмена,
				,
				КодВозвратаДиалога.Да);
			
		КонецЕсли;
	
	ИначеЕсли ТекущаяСтраница = "СтраницаРегистрационныеКарты" Тогда
		
		Если Объект.РегистрационныеКарты.Количество() = 0 Тогда
			ЗаполнитьТаблицуРегистрационныхКартНаСервере(Ложь);
		Иначе
			ДополнительныеПараметры = Новый Структура;
			ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеЗаполнитьТаблицуРегистрационныхКарт", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(
				ОписаниеОповещения,
				НСтр("ru = 'Очистить таблицу регистрационных карт перед заполнением?'"),
				РежимДиалогаВопрос.ДаНетОтмена,
				,
				КодВозвратаДиалога.Да);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	ОчиститьСообщения();
	Объект.НажатаПечать = Ложь;
	
	ПодобратьТоварыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦены(Команда)
	ТекстСобытия = "";
	ТекстОповещения = "";
	ПересчитатьЦеныСервер(ТекстСобытия, ТекстОповещения);
	Если НЕ ПустаяСтрока(ТекстСобытия) Тогда
		ПоказатьОповещениеПользователя(ТекстСобытия, , ТекстОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСертификаты(Команда)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Обработка.ПодборСерийныхНомеровПодарочныхСертификатов.Форма.ФормаВводаСерийныхНомеров.Открытие");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивСерийныхНомеров", Новый Массив);
	
	ДополнительныеПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОповещениеПодбораПодарочныхСертификатов", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ПодборСерийныхНомеровПодарочныхСертификатов.Форма.ФормаВводаСерийныхНомеров",
					ПараметрыФормы,
					ЭтаФорма,
					,
					,
					,
					ОписаниеОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

				КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзДанныхМобильногоПриложения(Команда)
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Обработка.ПечатьЭтикетокИЦенников.Форма.ФормаПечатьИзРегистра.Открытие");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	ОбработчикЗаполненияТабличнойЧасти = Новый ОписаниеОповещения("ЗаполнитьПоПакетамЦенников", ЭтотОбъект);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("Обработка.ПечатьЭтикетокИЦенников.Форма.ФормаПечатьИзРегистра",, ЭтотОбъект,,,, ОбработчикЗаполненияТабличнойЧасти, РежимБлокировки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСохраненияИВосстановленияНастроек

&НаСервере
Процедура СохранитьНастройкиНаСервере()
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ВидимостьРежимаЗаполнения", ВидимостьРежимаЗаполнения);
	ПараметрыЗакрытия.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу", ЗаполнитьКоличествоЭтикетокПоДокументу);
	ПараметрыЗакрытия.Вставить("СкрыватьКомандуЗаполненияПоДокументу", СкрыватьКомандуЗаполненияПоДокументу);
	ПараметрыЗакрытия.Вставить("ЦеныПоВидуЦены", ЦеныПоВидуЦены);
	ПараметрыЗакрытия.Вставить("ВидЦены", Объект.ВидЦены);
	ПараметрыЗакрытия.Вставить("ЦеныНазначенныеДействующие", Объект.ЦеныНазначенныеДействующие);
	ПараметрыЗакрытия.Вставить("Режим", Объект.Режим);
	ПараметрыЗакрытия.Вставить("НастройкиОтбора", Новый ХранилищеЗначения(КомпоновщикНастроек.Настройки));
	ПараметрыЗакрытия.Вставить("НастройкиОтбораДисконтныхКарт", Новый ХранилищеЗначения(КомпоновщикНастроекДисконтныхКарт.Настройки));
	ПараметрыЗакрытия.Вставить("НастройкиОтбораРегистрационныхКарт", Новый ХранилищеЗначения(КомпоновщикНастроекРегистрационныхКарт.Настройки));
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПечатьЭтикетокИЦенниковНастройкиФормы", "", ПараметрыЗакрытия);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиНаСервере()
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПечатьЭтикетокИЦенниковНастройкиФормы", "");
	Если Настройки <> Неопределено Тогда
		ЗначениеСохраненнойНастройки = Неопределено;
		Если Настройки.Свойство("ВидимостьРежимаЗаполнения", ЗначениеСохраненнойНастройки) Тогда
			ВидимостьРежимаЗаполнения = ЗначениеСохраненнойНастройки;
		КонецЕсли;
		Если Настройки.Свойство("ЗаполнитьКоличествоЭтикетокПоДокументу", ЗначениеСохраненнойНастройки) Тогда
			ЗаполнитьКоличествоЭтикетокПоДокументу = ЗначениеСохраненнойНастройки;
		КонецЕсли;
		Если Настройки.Свойство("СкрыватьКомандуЗаполненияПоДокументу", ЗначениеСохраненнойНастройки) Тогда
			СкрыватьКомандуЗаполненияПоДокументу = ЗначениеСохраненнойНастройки;
		КонецЕсли;
		Если Настройки.Свойство("ЦеныПоВидуЦены", ЗначениеСохраненнойНастройки) Тогда
			ЦеныПоВидуЦены = ЗначениеСохраненнойНастройки;
		КонецЕсли;
		Если Настройки.Свойство("ВидЦены", ЗначениеСохраненнойНастройки) Тогда
			Объект.ВидЦены = ЗначениеСохраненнойНастройки;
		КонецЕсли;
		Если Настройки.Свойство("ЦеныНазначенныеДействующие", ЗначениеСохраненнойНастройки) Тогда
			Объект.ЦеныНазначенныеДействующие = ЗначениеСохраненнойНастройки;
		КонецЕсли;
		Если Настройки.Свойство("Режим", ЗначениеСохраненнойНастройки) Тогда
			Если ЗначениеЗаполнено(ЗначениеСохраненнойНастройки) Тогда
				Объект.Режим = ЗначениеСохраненнойНастройки;
				УстановитьРежим(Объект.Режим);
			КонецЕсли;
		КонецЕсли;
		Если Настройки.Свойство("НастройкиОтбора", ЗначениеСохраненнойНастройки) Тогда
			Если ЗначениеСохраненнойНастройки <> Неопределено Тогда
				КомпоновщикНастроек.ЗагрузитьНастройки(ЗначениеСохраненнойНастройки.Получить());
				УдалитьНепроверяемыеОтборыКомпоновщика(КомпоновщикНастроек);
			Иначе
				ЗагрузитьНастройкиОтбораПоУмолчанию(
					КомпоновщикНастроек,
					"ПоляШаблона");
			КонецЕсли;
		КонецЕсли;
		Если Настройки.Свойство("НастройкиОтбораДисконтныхКарт", ЗначениеСохраненнойНастройки) Тогда
			Если ЗначениеСохраненнойНастройки <> Неопределено Тогда
				КомпоновщикНастроекДисконтныхКарт.ЗагрузитьНастройки(ЗначениеСохраненнойНастройки.Получить());
				УдалитьНепроверяемыеОтборыКомпоновщика(КомпоновщикНастроекДисконтныхКарт);
			Иначе
				ЗагрузитьНастройкиОтбораПоУмолчанию(
					КомпоновщикНастроекДисконтныхКарт,
					"ПоляШаблонаДисконтнаяКарта");
			КонецЕсли;
		КонецЕсли;
		Если Настройки.Свойство("НастройкиОтбораРегистрационныхКарт", ЗначениеСохраненнойНастройки) Тогда
			Если ЗначениеСохраненнойНастройки <> Неопределено Тогда
				КомпоновщикНастроекРегистрационныхКарт.ЗагрузитьНастройки(ЗначениеСохраненнойНастройки.Получить());
				УдалитьНепроверяемыеОтборыКомпоновщика(КомпоновщикНастроекРегистрационныхКарт);
			Иначе
				ЗагрузитьНастройкиОтбораПоУмолчанию(
					КомпоновщикНастроекРегистрационныхКарт,
					"ПоляШаблонаРегистрационнаяКарта");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УдалитьНепроверяемыеОтборыВГруппе(КоллекцияЭлементов, Компоновщик)
	
	Количество = КоллекцияЭлементов.Количество();
	
	Для Индекс = 1 По Количество Цикл
		
		ЭлементОтбора = КоллекцияЭлементов[Количество - Индекс];
		
		Если ТипЗнч(ЭлементОтбора)=Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
			
			Если Компоновщик.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
				КоллекцияЭлементов.Удалить(ЭлементОтбора);
			КонецЕсли;
			
		Иначе
			УдалитьНепроверяемыеОтборыВГруппе(ЭлементОтбора.Элементы, Компоновщик);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНепроверяемыеОтборыКомпоновщика(Компоновщик)

	Количество = Компоновщик.Настройки.Отбор.Элементы.Количество();
	
	Для Индекс = 1 По Количество Цикл
		
		ЭлементОтбора = Компоновщик.Настройки.Отбор.Элементы[Количество - Индекс];
		
		Если ТипЗнч(ЭлементОтбора)=Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
			
			Если Компоновщик.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
				Компоновщик.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
			КонецЕсли;
			
		Иначе
			УдалитьНепроверяемыеОтборыВГруппе(ЭлементОтбора.Элементы, Компоновщик);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Процедура выполняет загрузку настроек отбора из настроек по умолчанию.
//
&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию(Компоновщик, ИмяМакета)
	
	// Отбор для товаров
	СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет(ИмяМакета);
	АдресСКД = ПоместитьВоВременноеХранилище(
					СхемаКомпоновкиДанных,
					ЭтаФорма.УникальныйИдентификатор);
	Источник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
	Компоновщик.Инициализировать(Источник);
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	УдалитьНепроверяемыеОтборыКомпоновщика(Компоновщик);
	
КонецПроцедуры

&НаСервере
Функция УстановитьЭлементОтбораСКД(Компоновщик, ИмяПараметра, ЗначениеПараметра, Использование = Истина)

	НайденныйЭлемент = Неопределено;
	
	Поле = Новый ПолеКомпоновкиДанных(ИмяПараметра);
	
	Отбор = Компоновщик.Настройки.Отбор;
	Для каждого ЭлементОтбора Из Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
			НайденныйЭлемент = ЭлементОтбора;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденныйЭлемент = Неопределено Тогда
		НайденныйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
		НайденныйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.ЗагрузитьЗначения(ЗначениеПараметра);
		ПравоеЗначение = СписокЗначений;
	Иначе
		НайденныйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ПравоеЗначение = ЗначениеПараметра;
	КонецЕсли;
	
	НайденныйЭлемент.Использование  = Использование;
	НайденныйЭлемент.ЛевоеЗначение  = Поле;
	НайденныйЭлемент.ПравоеЗначение = ПравоеЗначение;
	
	Возврат НайденныйЭлемент;

КонецФункции

&НаКлиенте
Функция ПоказатьОповещениеПользователюОВозможнойОшибке(Текст, Количество, КоличествоВсего)
	
	Если Количество < КоличествоВсего Тогда
		
		Текст = Текст
		        + ?(Текст <> "", Символы.ПС, "")
		        + НСтр("ru = 'Отметка выбора установлена для %КоличествоВыбранных% строк из %КоличествоВсего%.'");
	
		Текст = Текст
		        + Символы.ПС
		        + НСтр("ru = 'Проверьте, заполнены ли все обязательные реквизиты.'");
	
		Текст = СтрЗаменить(Текст, "%КоличествоВыбранных%", Количество);
		Текст = СтрЗаменить(Текст, "%КоличествоВсего%", КоличествоВсего);
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Операция выполнена'"), , Текст);
	
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьПравилоЦенообразования()
	
	Если ЗначениеЗаполнено(Объект.Магазин) Тогда
		
		СтруктураНеобходимыхРеквизитов = Новый Структура;
		СтруктураНеобходимыхРеквизитов.Вставить("ПравилоЦенообразования", "ПравилоЦенообразования");
		СтруктураНеобходимыхРеквизитов.Вставить("ИспользоватьПрименениеЦен", "ИспользоватьПрименениеЦен");
		
		СтруктураМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Магазин, СтруктураНеобходимыхРеквизитов);
		Объект.ПравилоЦенообразования = СтруктураМагазина.ПравилоЦенообразования;
		
		Если СтруктураМагазина.ИспользоватьПрименениеЦен  И ИспользоватьПрименениеЦен Тогда
			
			Элементы.ЦеныНазначенныеДействующие.ТолькоПросмотр = Ложь;
			
		Иначе
			
			Элементы.ЦеныНазначенныеДействующие.ТолькоПросмотр = Истина;
			Если Объект.ЦеныНазначенныеДействующие Тогда
				Объект.ЦеныНазначенныеДействующие = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Объект.ПравилоЦенообразования = Справочники.ПравилаЦенообразования.ПустаяСсылка();
		Элементы.ЦеныНазначенныеДействующие.ТолькоПросмотр = Истина;
		Если Объект.ЦеныНазначенныеДействующие Тогда
			Объект.ЦеныНазначенныеДействующие = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(СтрокаТЧ)
	
	// Расчет количества Этикеток.
	Если Объект.Режим = "ПечатьЭтикеток" ИЛИ Объект.Режим = "ПечатьЦенниковИЭтикеток" Тогда
		
		Если ЗаполнитьКоличествоЭтикетокПоДокументу Тогда
			СтрокаТЧ.КоличествоЭтикеток = СтрокаТЧ.КоличествоВДокументе;
		Иначе
			СтрокаТЧ.КоличествоЭтикеток = ?(СтрокаТЧ.ОстатокНаСкладе > 0, СтрокаТЧ.ОстатокНаСкладе, 0);
		КонецЕсли;
		
	КонецЕсли;
	
	// Расчет количества Ценников.
	Если Объект.Режим = "ПечатьЦенников" ИЛИ Объект.Режим = "ПечатьЦенниковИЭтикеток" Тогда
		
		СтрокаТЧ.КоличествоЦенников = 1;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТоваровНаСервере(Сохранять = Истина)
	
	// Сохранение выбранных позиций для их последующего восстановления.
	Если Сохранять Тогда
		ТаблицаВыбранныеПозиции = Объект.Товары.Выгрузить();
	КонецЕсли;
	
	// Поля необходимые для вывода в таблицу товаров на форме.
	СтруктураНастроек = Обработки.ПечатьЭтикетокИЦенников.ПолучитьПустуюСтруктуруНастроек();
	
	СтруктураНастроек.ОбязательныеПоля.Добавить("Цена");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Штрихкод");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Количество");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
	СтруктураНастроек.ОбязательныеПоля.Добавить("НаименованиеПолное");
	Если Объект.ИспользоватьСправкиБ Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Справка2");
		СтруктураНастроек.ОбязательныеПоля.Добавить("ШтрихСправкиБ");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Упаковка");
	КонецЕсли;
	Если ИспользоватьОбменСПодключаемымОборудованием Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("SKU");
	КонецЕсли;
	СтруктураНастроек.ОбязательныеПоля.Добавить("ОстатокНаСкладе");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Организация");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ШтрихАвтопроверки");
	
	// Шаблоны этикеток и ценников.
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура.ВидНоменклатуры.ШаблонЭтикетки");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура.ВидНоменклатуры.ШаблонЦенника");
	
	СтруктураНастроек.ПараметрыДанных.Вставить("Магазин", Объект.Магазин);
	СтруктураНастроек.ПараметрыДанных.Вставить("ВидЦены"    , Объект.ВидЦены);
	СтруктураНастроек.ПараметрыДанных.Вставить("МагазинДляЦен"    , Объект.Магазин);
	СтруктураНастроек.ПараметрыДанных.Вставить("ПравилоЦенообразования" , Объект.ПравилоЦенообразования);
	СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныПоВидуЦены" , Объект.ЦеныПоВидуЦены);	
	СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныНаДату" , Объект.ЦеныНаДату);
	СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныНазначенныеДействующие" , Объект.ЦеныНазначенныеДействующие);
	СтруктураНастроек.ПараметрыДанных.Вставить("ВидМинимальныхЦенПродажи", Объект.ВидМинимальныхЦенПродажи);
	СтруктураНастроек.ПараметрыДанных.Вставить("ЦеныМинимальные", Объект.УчитыватьЦеныМинимальные);
	
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("УстанавливатьВидыЦенВАссортименте")
								И АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	СтруктураНастроек.ПараметрыДанных.Вставить("ИспользоватьАссортимент", ИспользоватьАссортимент);
	Если ИспользоватьАссортимент Тогда
		ФорматМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "ФорматМагазина");
		СтруктураНастроек.ПараметрыДанных.Вставить("ФорматМагазина", ФорматМагазина);
	КонецЕсли;
	СтруктураНастроек.ПараметрыДанных.Вставить("ИспользоватьСправкиБ", Объект.ИспользоватьСправкиБ);
	
	СтруктураНастроек.КомпоновщикНастроек = КомпоновщикНастроек;
	Если Объект.ИсходныеДанные.Количество() > 0 ИЛИ Объект.ПечатьИзДокумента Тогда
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблона";
		СтруктураНастроек.ИсходныеДанные = Объект.ИсходныеДанные.Выгрузить();
	Иначе
		СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаБД";
	КонецЕсли;
	
	Объект.Товары.Очистить();
	
	// Загрузка сформированного списка товаров.
	СтруктураРезультата = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьСтруктуруДанных(СтруктураНастроек);
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	ДобавитьСкладИОрганизациюПродажи(
		СтруктураРезультата.ТаблицаТоваров,
		Объект.Магазин,
		МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	
	Для Каждого СтрокаТЧ Из СтруктураРезультата.ТаблицаТоваров Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;
		
		Если Объект.ИспользоватьСправкиБ Тогда
			НоваяСтрока.Справка2         = СтрокаТЧ.Справка2;
		КонецЕсли;
		
		Если ИспользоватьХарактеристикиНоменклатуры Тогда
			НоваяСтрока.Характеристика       = СтрокаТЧ.Характеристика;
		КонецЕсли;
		
		НоваяСтрока.НаименованиеПолное = СтрокаТЧ.НаименованиеПолное;
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			НоваяСтрока.Упаковка             = СтрокаТЧ.Упаковка;
		КонецЕсли;
		
		НоваяСтрока.Штрихкод             = СтрокаТЧ.Штрихкод;
		НоваяСтрока.Цена                 = СтрокаТЧ.Цена;
		Если Объект.ИспользоватьСправкиБ Тогда
			НоваяСтрока.ШтрихСправкиБ             = СтрокаТЧ.ШтрихСправкиБ;
		КонецЕсли;
		НоваяСтрока.ШаблонЦенника        = СтрокаТЧ[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить("Номенклатура.ВидНоменклатуры.ШаблонЦенника")];
		
		Если ЗначениеЗаполнено(НоваяСтрока.ШаблонЦенника) Тогда
			Если НоваяСтрока.ШаблонЦенника.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
				НоваяСтрока.ТипШаблонаЦенника = 1;
			Иначе
				НоваяСтрока.ТипШаблонаЦенника = 2;
			КонецЕсли;
		Иначе
			НоваяСтрока.ТипШаблонаЦенника = 0;
		КонецЕсли;
		
		НоваяСтрока.ШаблонЭтикетки       = СтрокаТЧ[СтруктураРезультата.СоответствиеПолейСКДКолонкамТаблицыТоваров.Получить("Номенклатура.ВидНоменклатуры.ШаблонЭтикетки")];
		
		Если ЗначениеЗаполнено(НоваяСтрока.ШаблонЭтикетки) Тогда
			Если НоваяСтрока.ШаблонЭтикетки.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
				НоваяСтрока.ТипШаблонаЭтикетки = 1;
			Иначе
				НоваяСтрока.ТипШаблонаЭтикетки = 2;
			КонецЕсли;
		Иначе
			НоваяСтрока.ТипШаблонаЭтикетки = 0;
		КонецЕсли;
		
		НоваяСтрока.ОстатокНаСкладе      = СтрокаТЧ.ОстатокНаСкладе;
		НоваяСтрока.КоличествоВДокументе = СтрокаТЧ.Количество;
		
		Если ИспользоватьОбменСПодключаемымОборудованием Тогда
			НоваяСтрока.SKU              = СтрокаТЧ.SKU;
			Если СтрокаТЧ.ШтрихАвтопроверки = "" Тогда
				НоваяСтрока.ШтрихАвтопроверки = СформироватьСобственныйШтрихкод(СтрокаТЧ);
			КонецЕсли;
		Иначе
			НоваяСтрока.ШтрихАвтопроверки = СтрокаТЧ.ШтрихАвтопроверки;
		КонецЕсли;
		
		НоваяСтрока.Склад = СтрокаТЧ.СкладПродажи;
		НоваяСтрока.Организация = СтрокаТЧ.ОрганизацияПродажи;
		
		УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(НоваяСтрока);
		
		// Восстановление позиций, сохраненных перед заполнением ТЧ. 
		Если Сохранять Тогда
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
			Если Объект.ИспользоватьСправкиБ Тогда
				ПараметрыОтбора.Вставить("Справка2", НоваяСтрока.Номенклатура);
			КонецЕсли;
			Если ИспользоватьХарактеристикиНоменклатуры Тогда
				ПараметрыОтбора.Вставить("Характеристика", НоваяСтрока.Характеристика);
			КонецЕсли;
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				ПараметрыОтбора.Вставить("Упаковка", НоваяСтрока.Упаковка);
			КонецЕсли;
			НайденныеСтроки = ТаблицаВыбранныеПозиции.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСтроки[0],"ШаблонЦенника, ШаблонЭтикетки, КоличествоЦенников, КоличествоЭтикеток");
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока.Выбран = ПроверитьВозможностьВыбораТовара(НоваяСтрока, Объект.Режим);
		
	КонецЦикла;
	
	Элементы.Товары.Обновить();
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуДисконтныхКартНаСервере(ОчищатьТаблицу)
	
	Если ОчищатьТаблицу Тогда
		Объект.ДисконтныеКарты.Очистить();
	КонецЕсли;
	
	СтруктураНастроек = Обработки.ПечатьЭтикетокИЦенников.ПолучитьПустуюСтруктуруНастроек();
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаДисконтнаяКарта";
	
	СтруктураНастроек.ОбязательныеПоля.Добавить("Карта");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Организация");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Штрихкод");
	СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоЭтикетокДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЭтикеткиДляПечати");
	
	СтруктураНастроек.ПараметрыДанных.Вставить("Магазин", Объект.Магазин);
	
	СтруктураНастроек.КомпоновщикНастроек = КомпоновщикНастроекДисконтныхКарт;
	
	СтруктураНастроек.Вставить("ТекстЗаменяемойТаблицы", "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсходныеДанные.Карта КАК Карта,
	|	""КоличествоЭтикеток"" КАК КоличествоЭтикетокДляПечати,
	|	""ШаблонЭтикетки"" КАК ШаблонЭтикеткиДляПечати,
	|	""Штрихкод"" КАК Штрихкод,
	|	ИсходныеДанные.Организация КАК Организация
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Справочник.ИнформационныеКарты.ПустаяСсылка) КАК Карта,
	|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация) КАК ИсходныеДанные");
	
	СтруктураНастроек.Вставить("ТекстТаблицыДляЗамены", "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсходныеДанные.Ссылка КАК Карта,
	|	""КоличествоЭтикеток"" КАК КоличествоЭтикетокДляПечати,
	|	""ШаблонЭтикетки"" КАК ШаблонЭтикеткиДляПечати,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Штрихкод,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИсходныеДанные
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|	ПО ИсходныеДанные.Ссылка = Штрихкоды.Владелец
	|ГДЕ
	|	ИсходныеДанные.ТипКарты = ЗНАЧЕНИЕ(Перечисление.ТипыИнформационныхКарт.Дисконтная)");
	
	СтруктураРезультата = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьСтруктуруДанных(СтруктураНастроек);
	
	Для Каждого СтрокаТЧ Из СтруктураРезультата.ТаблицаТоваров Цикл
		
		НоваяСтрока = Объект.ДисконтныеКарты.Добавить();
		НоваяСтрока.Карта = СтрокаТЧ.Карта;
		ДисконтныеКартыКартаПриИзмененииНаСервере(, НоваяСтрока, Истина);
		НоваяСтрока.Выбран = ПроверитьВозможностьВыбораДисконтнойКарты(НоваяСтрока);
		
	КонецЦикла;
	
	Элементы.ДисконтныеКарты.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРегистрационныхКартНаСервере(ОчищатьТаблицу)
	
	Если ОчищатьТаблицу Тогда
		Объект.РегистрационныеКарты.Очистить();
	КонецЕсли;
	
	СтруктураНастроек = Обработки.ПечатьЭтикетокИЦенников.ПолучитьПустуюСтруктуруНастроек();
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаРегистрационнаяКарта";
	
	СтруктураНастроек.ОбязательныеПоля.Добавить("Карта");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Организация");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Штрихкод");
	СтруктураНастроек.ОбязательныеПоля.Добавить("КоличествоЭтикетокДляПечати");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ШаблонЭтикеткиДляПечати");
	
	СтруктураНастроек.ПараметрыДанных.Вставить("Магазин", Объект.Магазин);
	
	СтруктураНастроек.КомпоновщикНастроек = КомпоновщикНастроекРегистрационныхКарт;
	
	СтруктураНастроек.Вставить("ТекстЗаменяемойТаблицы", "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсходныеДанные.Карта КАК Карта,
	|	""КоличествоЭтикеток"" КАК КоличествоЭтикетокДляПечати,
	|	""ШаблонЭтикетки"" КАК ШаблонЭтикеткиДляПечати,
	|	""Штрихкод"" КАК Штрихкод,
	|	ИсходныеДанные.Организация КАК Организация
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Справочник.ИнформационныеКарты.ПустаяСсылка) КАК Карта,
	|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация) КАК ИсходныеДанные");
	
	СтруктураНастроек.Вставить("ТекстТаблицыДляЗамены", "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсходныеДанные.Ссылка КАК Карта,
	|	""КоличествоЭтикеток"" КАК КоличествоЭтикетокДляПечати,
	|	""ШаблонЭтикетки"" КАК ШаблонЭтикеткиДляПечати,
	|	ЕСТЬNULL(Штрихкоды.Штрихкод, """") КАК Штрихкод,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	Справочник.ИнформационныеКарты КАК ИсходныеДанные
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|	ПО ИсходныеДанные.Ссылка = Штрихкоды.Владелец
	|ГДЕ
	|	ИсходныеДанные.ТипКарты = ЗНАЧЕНИЕ(Перечисление.ТипыИнформационныхКарт.Регистрационная)");
	
	СтруктураРезультата = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьСтруктуруДанных(СтруктураНастроек);
	
	Для Каждого СтрокаТЧ Из СтруктураРезультата.ТаблицаТоваров Цикл
		
		НоваяСтрока = Объект.РегистрационныеКарты.Добавить();
		НоваяСтрока.Карта = СтрокаТЧ.Карта;
		РегистрационныеКартыКартаПриИзмененииНаСервере(, НоваяСтрока, Истина);
		НоваяСтрока.Выбран = ПроверитьВозможностьВыбораРегистрационнойКарты(НоваяСтрока);
		
	КонецЦикла;
	
	Элементы.РегистрационныеКарты.Обновить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьВозможностьВыбораТовара(ТекущиеДанные, Режим)
	
	Если Режим = "ПечатьЦенниковИЭтикеток" Тогда
	
		Если (ТекущиеДанные.КоличествоЦенников = 0)
			И ТекущиеДанные.КоличествоЭтикеток = 0 Тогда
			
			Возврат Ложь;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
			И НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки) Тогда
			
			Возврат Ложь;
			
		ИначеЕсли (ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
			      И НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)) Тогда

			Возврат Ложь;
			
		ИначеЕсли (НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника)
			      И ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки)) Тогда
			
			Возврат Ложь;
			
		Иначе
			
			Возврат Истина;
			
		КонецЕсли;
	
	ИначеЕсли Режим = "ПечатьЭтикеток" Тогда
		
		Если ТекущиеДанные.КоличествоЭтикеток = 0 ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЭтикетки) Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли Режим = "ПечатьЦенников" Тогда
		
		Если ТекущиеДанные.КоличествоЦенников = 0 ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ШаблонЦенника) Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьВозможностьВыбораСертификата(ТекущаяСтрока)
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Сертификат)
		И ЗначениеЗаполнено(ТекущаяСтрока.НомерСертификата)
		И ЗначениеЗаполнено(ТекущаяСтрока.ШаблонЭтикетки)
		И ЗначениеЗаполнено(ТекущаяСтрока.КоличествоЭтикеток)
		И ЗначениеЗаполнено(ТекущаяСтрока.Организация) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьВозможностьВыбораДисконтнойКарты(ТекущаяСтрока)
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Карта)
		И ЗначениеЗаполнено(ТекущаяСтрока.ШаблонЭтикетки)
		И ЗначениеЗаполнено(ТекущаяСтрока.КоличествоЭтикеток)
		И ЗначениеЗаполнено(ТекущаяСтрока.Организация) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьВозможностьВыбораРегистрационнойКарты(ТекущаяСтрока)
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Карта)
		И ЗначениеЗаполнено(ТекущаяСтрока.ШаблонЭтикетки)
		И ЗначениеЗаполнено(ТекущаяСтрока.КоличествоЭтикеток)
		И ЗначениеЗаполнено(ТекущаяСтрока.Организация) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Процедура устанавливает видимость элементов в зависимости от настройки параметров формы.
//
&НаСервере
Процедура ОбновитьВидимостьЭлементов()
	
	ВидимостьЭтикетки = Ложь;
	ВидимостьЦенники  = Ложь;
	ДоступностьРежимЗаполнения = Истина;
	
	Если Объект.Режим = "ПечатьЦенниковИЭтикеток" Тогда
		ВидимостьЭтикетки = Истина;
		ВидимостьЦенники  = Истина;
	ИначеЕсли Объект.Режим = "ПечатьЦенников" Тогда
		ВидимостьЭтикетки = Ложь;
		ВидимостьЦенники  = Истина;
		ДоступностьРежимЗаполнения = Ложь;
	ИначеЕсли Объект.Режим = "ПечатьЭтикеток" Тогда
		ВидимостьЭтикетки = Истина;
		ВидимостьЦенники  = Ложь;
	КонецЕсли;
	
	Элементы.ТоварыКоличествоЭтикеток.Видимость               = ВидимостьЭтикетки;
	Элементы.ТоварыШаблонЭтикетки.Видимость                   = ВидимостьЭтикетки;
	Элементы.ТоварыТипШаблонаЭтикетки.Видимость               = ВидимостьЭтикетки;
	Элементы.ТоварыУстановитьШаблонЭтикеток.Видимость         = ВидимостьЭтикетки;
	Элементы.ТоварыУстановитьКоличествоЭтикеток.Видимость     = ВидимостьЭтикетки;
	Элементы.ЗаполнитьКоличествоЭтикетокПоДокументу.Видимость = ВидимостьЭтикетки И Объект.ПечатьИзДокумента И НЕ СкрыватьКомандуЗаполненияПоДокументу;
	
	Элементы.ТоварыКоличествоЦенников.Видимость               = ВидимостьЦенники;
	Элементы.ТоварыШаблонЦенника.Видимость                    = ВидимостьЦенники;
	Элементы.ТоварыТипШаблонаЦенника.Видимость                = ВидимостьЦенники;
	Элементы.ТоварыУстановитьШаблонЦенников.Видимость         = ВидимостьЦенники;
	Элементы.ТоварыУстановитьКоличествоЦенников.Видимость     = ВидимостьЦенники;
	
	Если Объект.ПечатьИзДокумента
		ИЛИ Объект.ПечатьИзОбработки Тогда
		Элементы.СтраницаПодарочныеСертификаты.Видимость = Ложь;
		Элементы.СтраницаДисконтныеКарты.Видимость = Ложь;
		Элементы.СтраницаРегистрационныеКарты.Видимость = Ложь;
		Элементы.СтраницыТиповПечати.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Если ЗначениеЗаполнено(СтраницаПриОткрытии) Тогда
			Элементы.СтраницаТовары.Видимость = Элементы.СтраницаТовары.Имя = СтраницаПриОткрытии;
			Элементы.СтраницаПодарочныеСертификаты.Видимость = Элементы.СтраницаПодарочныеСертификаты.Имя = СтраницаПриОткрытии;
			Элементы.СтраницаДисконтныеКарты.Видимость = Элементы.СтраницаДисконтныеКарты.Имя = СтраницаПриОткрытии;
			Элементы.СтраницаРегистрационныеКарты.Видимость = Элементы.СтраницаРегистрационныеКарты.Имя = СтраницаПриОткрытии;
			Элементы.СтраницыТиповПечати.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Иначе
			Элементы.СтраницаПодарочныеСертификаты.Видимость = Истина;
			Элементы.СтраницаДисконтныеКарты.Видимость = Истина;
			Элементы.СтраницаРегистрационныеКарты.Видимость = Истина;
			Элементы.СтраницыТиповПечати.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПечатьЦенниковНаСервере()
	
	ПереключениеРежима = ?(Объект.Режим <> "ПечатьЦенников", Истина, Ложь);
	Объект.Режим = "ПечатьЦенников";
	
	Элементы.УстановитьРежимПечатьЦенниковИЭтикеток.Пометка = Ложь;
	Элементы.УстановитьРежимПечатьЦенников.Пометка = Истина;
	Элементы.УстановитьРежимПечатьЭтикеток.Пометка = Ложь;
	
	ОбновитьВидимостьЭлементов();
	Если ПереключениеРежима Тогда
		ПроверитьВыборСтрокПриПереключенииРежимаПечати();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПечатьЦенниковИЭтикетокНаСервере()
	
	ПереключениеРежима = ?(Объект.Режим <> "ПечатьЦенниковИЭтикеток", Истина, Ложь);
	Объект.Режим = "ПечатьЦенниковИЭтикеток";
	
	Элементы.УстановитьРежимПечатьЦенниковИЭтикеток.Пометка = Истина;
	Элементы.УстановитьРежимПечатьЦенников.Пометка = Ложь;
	Элементы.УстановитьРежимПечатьЭтикеток.Пометка = Ложь;
	
	ОбновитьВидимостьЭлементов();
	Если ПереключениеРежима Тогда
		ПроверитьВыборСтрокПриПереключенииРежимаПечати();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПечатьЭтикетокНаСервере()
	
	ПереключениеРежима = ?(Объект.Режим <> "ПечатьЭтикеток", Истина, Ложь);
	Объект.Режим = "ПечатьЭтикеток";
	
	Элементы.УстановитьРежимПечатьЦенниковИЭтикеток.Пометка = Ложь;
	Элементы.УстановитьРежимПечатьЦенников.Пометка = Ложь;
	Элементы.УстановитьРежимПечатьЭтикеток.Пометка = Истина;
	
	ОбновитьВидимостьЭлементов();
	Если ПереключениеРежима Тогда
		ПроверитьВыборСтрокПриПереключенииРежимаПечати();
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет установку выбранного режима печати.
//
&НаСервере
Процедура УстановитьРежим(ПараметрРежим)
	
	Если ПараметрРежим = "ПечатьЦенниковИЭтикеток" Тогда
		УстановитьРежимПечатьЦенниковИЭтикетокНаСервере();
	ИначеЕсли ПараметрРежим = "ПечатьЦенников" Тогда
		УстановитьРежимПечатьЦенниковНаСервере();
	ИначеЕсли ПараметрРежим = "ПечатьЭтикеток" Тогда
		УстановитьРежимПечатьЭтикетокНаСервере();
	Иначе
		ВызватьИсключение НСтр("ru = 'Установленный режим печати не поддерживается'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЦеныПоВидуЦеныПриИзмененииСервер()
	
	ИзменитьДоступностьЭлементовПриИзмененииЦеныПоВидуЦены();
	ТекстСобытия = "";
	ТекстОповещения = "";
	ПересчитатьЦеныСервер(ТекстСобытия, ТекстОповещения);

КонецПроцедуры

&НаСервере
Процедура ИзменитьДоступностьЭлементовПриИзмененииЦеныПоВидуЦены()
	
	Элементы.ВидЦены.Доступность = ЦеныПоВидуЦены = 1;
	Элементы.ВидЦены.АвтоОтметкаНезаполненного = ЦеныПоВидуЦены = 1;
	Элементы.ВидЦены.ОтметкаНезаполненного = ЦеныПоВидуЦены = 1;
	Объект.ЦеныПоВидуЦены = ЦеныПоВидуЦены = 1;
	
	Если ЦеныПоВидуЦены = 0  Тогда
		
		УстановитьДоступностьРеквизитаДействующихЦен();
		
		Элементы.ЦеныНазначенныеДействующие.Видимость = Истина;
		Элементы.ВидЦены.Видимость = Ложь;
		
	Иначе
		
		Элементы.ЦеныНазначенныеДействующие.Видимость = Ложь;
		Элементы.ВидЦены.Видимость = Истина;
		
	КонецЕсли;
	
	Если Объект.ПечатьИзОбработки Тогда
		Элементы.ЦеныПоВидуЦены.Видимость                  = Ложь;
		Элементы.ВидЦены.Видимость                         = Ложь;
		Элементы.ЦеныНазначенныеДействующие.ТолькоПросмотр = Истина;
		Объект.ЦеныНазначенныеДействующие                  = Ложь;
		ЦеныПоВидуЦены = 0;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.ГруппаПечатьИзДокумента.Видимость = Объект.ПечатьИзДокумента;
		
	Если Объект.ПечатьИзДокумента Тогда 
		Элементы.Гиперссылка1.Видимость = Ложь;
		Элементы.Гиперссылка2.Видимость = Ложь;
		Элементы.Гиперссылка3.Видимость = Ложь;
		
		КоличествоДокументов = СписокДокументов.Количество();
		МаксимальныйИндекс = Мин(2, КоличествоДокументов - 1);
		Индекс = 0;
		
		Пока Индекс <= МаксимальныйИндекс Цикл
			
			Гиперссылка = "Гиперссылка" + Строка(Индекс+1);
			Элементы[Гиперссылка].Заголовок = СписокДокументов.Получить(Индекс);
			Элементы[Гиперссылка].Видимость = Истина;
			
			Индекс = Индекс + 1;
		КонецЦикла;
		
		Если КоличествоДокументов > 1 Тогда
			Элементы.ГруппаПечатьИзДокумента.Заголовок =  НСтр("ru = 'Печать из документов'");
		КонецЕсли;
		
		Если КоличествоДокументов > 3 Тогда
			Элементы.ГиперссылкиНиз.Видимость = Истина;
			
			ЗаголовокДекорацияЕщеДокументов = НСтр("ru = '(еще %КолДок% док.)'");
			ЗаголовокДекорацияЕщеДокументов = СтрЗаменить(ЗаголовокДекорацияЕщеДокументов, "%КолДок%", КоличествоДокументов - (МаксимальныйИндекс + 1));
			Элементы.ДекорацияЕщеДокументов.Заголовок = ЗаголовокДекорацияЕщеДокументов;
			
		Иначе
			Элементы.ГиперссылкиНиз.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьСтраниц();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраниц()
	
	// Установка видимости страницы регистрационных карт.
	Элементы.СтраницаРегистрационныеКарты.Видимость = Пользователи.РолиДоступны("ПолныеПрава");
	
	// Установка видимости страницы подарочных сертификатов.
	Элементы.СтраницаПодарочныеСертификаты.Видимость = Пользователи.РолиДоступны("ПолныеПрава,ДобавлениеИзменениеНоменклатуры");
	
	// Установка видимости страницы дисконтных сертификатов.
	Элементы.СтраницаДисконтныеКарты.Видимость = Пользователи.РолиДоступны("ПолныеПрава,ДобавлениеИзменениеИнформационныхКарт");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКнопкуПоУмолчанию()
	
	Если Элементы.СтраницыТиповПечати.ТекущаяСтраница = Элементы.СтраницаТовары Тогда
		
		Элементы.Печать.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли Элементы.СтраницыТиповПечати.ТекущаяСтраница = Элементы.СтраницаПодарочныеСертификаты Тогда
		
		Элементы.ПечатьСертификаты.КнопкаПоУмолчанию = Истина;
	
	ИначеЕсли Элементы.СтраницыТиповПечати.ТекущаяСтраница = Элементы.СтраницаДисконтныеКарты Тогда
		
		Элементы.ПечатьДисконтныеКарты.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли Элементы.СтраницыТиповПечати.ТекущаяСтраница = Элементы.СтраницаРегистрационныеКарты Тогда
		
		Элементы.ПечатьРегистрационныеКарты.КнопкаПоУмолчанию = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТоварыНаКлиенте()
    
    // &ЗамерПроизводительности
    ОценкаПроизводительностиРТКлиент.НачатьЗамер(
             Истина, "Обработка.ПодборТоваров.Форма.Форма.Открытие");

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Магазин",    Объект.Магазин);
	ПараметрыФормы.Вставить("Дата", ОбщегоНазначенияКлиент.ДатаСеанса());
	ПараметрыФормы.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуЗапрашиватьКоличество", Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуВвестиСерийныеНомера", Истина);
	ПараметрыФормы.Вставить("ЗапрашиватьКоличество", Ложь);
	ПараметрыФормы.Вставить("ПечатьЦенниковИЭтикеток", Истина);
	
	ОткрытьФорму("Обработка.ПодборТоваров.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	ТаблицаТоваров.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"),"Организация");
	ТаблицаТоваров.Колонки.Добавить("Справка2", Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"),"Справка 2");
	КвалификаторыСтроки = Новый КвалификаторыСтроки(200);
	ТаблицаТоваров.Колонки.Добавить("ШтрихАвтопроверки", Новый ОписаниеТипов("Строка",,,,КвалификаторыСтроки), "ШтрихАвтопроверки");
	ДобавитьТовары(ТаблицаТоваров);
	ОбработкаТабличнойЧастиТоварыСервер.ЗаполнитьПризнакИспользованияХарактеристик(Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТовары(Таблица, ИдентификаторСтроки = Неопределено)
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	СтруктураНастроек = Обработки.ПечатьЭтикетокИЦенников.ПолучитьПустуюСтруктуруНастроек();
	
	СтруктураНастроек.ОбязательныеПоля.Добавить("Цена");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Штрихкод");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Количество");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
	СтруктураНастроек.ОбязательныеПоля.Добавить("НаименованиеПолное");
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Упаковка");
	КонецЕсли;
	Если ИспользоватьОбменСПодключаемымОборудованием Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("SKU");
	КонецЕсли;
	СтруктураНастроек.ОбязательныеПоля.Добавить("ШтрихАвтопроверки");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ОстатокНаСкладе");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Организация");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Справка2");
	
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("УстанавливатьВидыЦенВАссортименте")
								И АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин);
	ОкончаниеИмениМакетаСхемыКомпоновкиДанных="";
	Если ИспользоватьАссортимент Тогда
		СтруктураНастроек.ПараметрыДанных.Вставить("ФорматМагазина", Объект.Магазин.ФорматМагазина);
		ОкончаниеИмениМакетаСхемыКомпоновкиДанных="Ассортимент";
	КонецЕсли;
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблона" + ОкончаниеИмениМакетаСхемыКомпоновкиДанных;
	СтруктураНастроек.ИсходныеДанные = Таблица;
	
	СтруктураРезультата = Обработки.ПечатьЭтикетокИЦенников.ПодготовитьСтруктуруДанных(СтруктураНастроек);
	
	ДобавитьСкладИОрганизациюПродажи(
		СтруктураРезультата.ТаблицаТоваров,
		Объект.Магазин,
		МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	
	Для Каждого СтрокаТЧ Из СтруктураРезультата.ТаблицаТоваров Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;
		НоваяСтрока.НаименованиеПолное   = СтрокаТЧ.НаименованиеПолное;
		НоваяСтрока.Цена                 = СтрокаТЧ.Цена;
		НоваяСтрока.Штрихкод             = СтрокаТЧ.Штрихкод;
		НоваяСтрока.ОстатокНаСкладе      = СтрокаТЧ.ОстатокНаСкладе;
		
		Если ИспользоватьХарактеристикиНоменклатуры Тогда
			НоваяСтрока.Характеристика   = СтрокаТЧ.Характеристика;
		КонецЕсли;
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			НоваяСтрока.Упаковка         = СтрокаТЧ.Упаковка;
		КонецЕсли;
		
		Если ИспользоватьОбменСПодключаемымОборудованием Тогда
			НоваяСтрока.SKU              = СтрокаТЧ.SKU;
			Если СтрокаТЧ.ШтрихАвтопроверки = "" Тогда
				НоваяСтрока.ШтрихАвтопроверки = СформироватьСобственныйШтрихкод(СтрокаТЧ);
			Иначе
				НоваяСтрока.ШтрихАвтопроверки = СтрокаТЧ.ШтрихАвтопроверки;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Склад = СтрокаТЧ.СкладПродажи;
		НоваяСтрока.Организация = СтрокаТЧ.ОрганизацияПродажи;
		
		УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(НоваяСтрока);
		ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВыборСтрокПриПереключенииРежимаПечати()
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если СтрокаТЧ.Выбран Тогда
			
			СтрокаТЧ.Выбран = ПроверитьВозможностьВыбораТовара(СтрокаТЧ, Объект.Режим);
			
		КонецЕсли
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоличествоЦенниковИЭтикетокПоДокументуНаСервере()
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		УстановитьКоличествоПоУмолчаниюВСтрокеТЧНаСервере(СтрокаТЧ)
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура МагазинПриИзмененииСервер()
	
	УстановитьПравилоЦенообразования();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Магазины.ПравилоЦенообразования.ВидЦен КАК ВидЦен,
	               |	Магазины.ВидМинимальныхЦенПродажи КАК ВидМинимальныхЦенПродажи
	               |ИЗ
	               |	Справочник.Магазины КАК Магазины
	               |ГДЕ
	               |	Магазины.Ссылка = &Магазин";
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.ВидЦены = Выборка.ВидЦен;
		Объект.ВидМинимальныхЦенПродажи = Выборка.ВидМинимальныхЦенПродажи;
		Объект.УчитыватьЦеныМинимальные = ЗначениеЗаполнено(Выборка.ВидМинимальныхЦенПродажи) И НЕ Объект.ЦеныПоВидуЦены;
		УстановитьДоступностьРеквизитаДействующихЦен();
		ИзменитьДоступностьЭлементовПриИзмененииЦеныПоВидуЦены();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныСервер(ТекстСобытия, ТекстОповещения)
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Период", Объект.ЦеныНаДату);
	Запрос.УстановитьПараметр("ВидЦены", Объект.ВидЦены);
	
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	
	Запрос.УстановитьПараметр("ВидМинимальныхЦенПродажи", Объект.ВидМинимальныхЦенПродажи);
	Запрос.УстановитьПараметр("ЦеныМинимальные", Объект.УчитыватьЦеныМинимальные);
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ПравилоЦенообразования", "ПравилоЦенообразования");
	СтруктураРеквизитов.Вставить("ВидЦенМагазина", "ПравилоЦенообразования.ВидЦен");
	СтруктураРеквизитов.Вставить("ВидМинимальныхЦенПродажи", "ВидМинимальныхЦенПродажи");
	СтруктураРеквизитов.Вставить("ФорматМагазина", "ФорматМагазина");
	СтруктураМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Магазин, СтруктураРеквизитов);
	
	СтруктураМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Магазин, СтруктураРеквизитов);
	Запрос.УстановитьПараметр("ПравилоЦенообразования", СтруктураМагазина.ПравилоЦенообразования);
	Запрос.УстановитьПараметр("ФорматМагазина", СтруктураМагазина.ФорматМагазина);
	Запрос.УстановитьПараметр("ВидМинимальныхЦенПродажи", СтруктураМагазина.ВидМинимальныхЦенПродажи);
	Запрос.УстановитьПараметр("ВидЦенМагазина", СтруктураМагазина.ВидЦенМагазина);
	
	РежимПолученияЦен = "Назначеные";
	Если ЦеныПоВидуЦены > 0 Тогда
		РежимПолученияЦен = "ПоВидуЦен";
	ИначеЕсли Объект.ЦеныНазначенныеДействующие Тогда
		РежимПолученияЦен = "Действующие";
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент")
		И АссортиментСервер.ПолучитьФункциональнуюОпциюКонтроляАссортимента(Объект.Магазин) Тогда
		РежимПолученияЦен = "ВАссортименте";
	КонецЕсли;
	
	Запрос.Текст = ЗапасыСервер.ТекстЗапросаПересчетаЦен(РежимПолученияЦен, ЗначениеЗаполнено(СтруктураМагазина.ВидМинимальныхЦенПродажи));
	
	Выборка = Запрос.Выполнить().Выбрать();
	ОбработаноСтрок = 0;
	Пока Выборка.Следующий() Цикл
		ОбработаноСтрок = ОбработаноСтрок + 1;
		СтрокаТовары = Объект.Товары[Выборка.НомерСтроки - 1];
		СтрокаТовары.Цена = Выборка.Цена;
		СтрокаТовары.ШтрихАвтопроверки = СформироватьСобственныйШтрихкод(СтрокаТовары);
	КонецЦикла;
	ТекстСобытия = НСтр("ru = 'Пересчитаны цены'");
	ТекстОповещения = НСтр("ru = 'Обработано строк %1'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОповещения, ОбработаноСтрок);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРеквизитаДействующихЦен()
	
	Если ЦеныПоВидуЦены = 0 Тогда
		ИспользоватьПрименениеЦенВМагазине = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "ИспользоватьПрименениеЦен");
		Если ЗначениеЗаполнено(Объект.Магазин) И ИспользоватьПрименениеЦен
			И ИспользоватьПрименениеЦенВМагазине Тогда
			
			Элементы.ЦеныНазначенныеДействующие.ТолькоПросмотр = Ложь;
			Объект.ЦеныНазначенныеДействующие = Истина;
			
		Иначе
			
			Элементы.ЦеныНазначенныеДействующие.ТолькоПросмотр = Истина;
			Если Объект.ЦеныНазначенныеДействующие Тогда
				Объект.ЦеныНазначенныеДействующие = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПустуюТаблицуТоваров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"),"Организация");
	ТаблицаТоваров.Колонки.Добавить("Количество", ОбщегоНазначенияРТКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	КвалификаторыСтроки = Новый КвалификаторыСтроки(200);
	ТаблицаТоваров.Колонки.Добавить("ШтрихАвтопроверки", Новый ОписаниеТипов("Строка",,,,КвалификаторыСтроки), "ШтрихАвтопроверки");
	
	Возврат ТаблицаТоваров;
	
КонецФункции

&НаСервере
Процедура ПодарочныеСертификатыСертификатПриИзмененииНаСервере(
	ИдентификаторСтроки = Неопределено,
	ТекущаяСтрока = Неопределено)
	
	РедактируемаяСтрока = ТекущаяСтрока;
	Если РедактируемаяСтрока = Неопределено
		И ИдентификаторСтроки <> Неопределено Тогда
		РедактируемаяСтрока = Объект.ПодарочныеСертификаты.НайтиПоИдентификатору(ИдентификаторСтроки);
	КонецЕсли;
	
	Если РедактируемаяСтрока <> Неопределено Тогда
		РедактируемаяСтрока.КоличествоЭтикеток = 1;
		РедактируемаяСтрока.ШаблонЭтикетки = ШаблонЭтикеткиПоУмолчанию(Перечисления.ТипыШаблонов.ПодарочныйСертификат);
		РедактируемаяСтрока.Штрихкод = "";
		РедактируемаяСтрока.Организация = ОрганизацияПродажСертификата(РедактируемаяСтрока.Сертификат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодарочныеСертификатыНомерСертификатаПриИзмененииНаСервере(
	ИдентификаторСтроки = Неопределено,
	ТекущаяСтрока = Неопределено,
	ОбновитьШтрихКод = Ложь)
			
	РедактируемаяСтрока = ТекущаяСтрока;
	Если РедактируемаяСтрока = Неопределено 
		И ИдентификаторСтроки <> Неопределено Тогда
		РедактируемаяСтрока = Объект.ПодарочныеСертификаты.НайтиПоИдентификатору(ИдентификаторСтроки);
	КонецЕсли;
																	 
	Если РедактируемаяСтрока <> Неопределено Тогда
		Если ОбновитьШтрихКод Тогда
			РедактируемаяСтрока.Штрихкод = ШтрихКодЭлемента(РедактируемаяСтрока.НомерСертификата); 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДисконтныеКартыКартаПриИзмененииНаСервере(
	ИдентификаторСтроки = Неопределено,
	ТекущаяСтрока = Неопределено,
	ОбновитьШтрихКод = Ложь)
	
	РедактируемаяСтрока = ТекущаяСтрока;
	Если РедактируемаяСтрока = Неопределено 
		И ИдентификаторСтроки <> Неопределено Тогда
		РедактируемаяСтрока = Объект.ДисконтныеКарты.НайтиПоИдентификатору(ИдентификаторСтроки);
	КонецЕсли;
	Если РедактируемаяСтрока <> Неопределено Тогда
		РедактируемаяСтрока.КоличествоЭтикеток = 1;
		РедактируемаяСтрока.ШаблонЭтикетки = ШаблонЭтикеткиПоУмолчанию(Перечисления.ТипыШаблонов.ДисконтнаяКарта);
		РедактируемаяСтрока.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "СкладПродажи.Организация");
		Если ОбновитьШтрихКод Тогда
			РедактируемаяСтрока.Штрихкод = ШтрихКодЭлемента(РедактируемаяСтрока.Карта); 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РегистрационныеКартыКартаПриИзмененииНаСервере(
	ИдентификаторСтроки = Неопределено,
	ТекущаяСтрока = Неопределено,
	ОбновитьШтрихКод = Ложь)
	
	РедактируемаяСтрока = ТекущаяСтрока;
	Если РедактируемаяСтрока = Неопределено 
		И ИдентификаторСтроки <> Неопределено Тогда
		РедактируемаяСтрока = Объект.РегистрационныеКарты.НайтиПоИдентификатору(ИдентификаторСтроки);
	КонецЕсли;
	Если РедактируемаяСтрока <> Неопределено Тогда
		РедактируемаяСтрока.КоличествоЭтикеток = 1;
		РедактируемаяСтрока.ШаблонЭтикетки = ШаблонЭтикеткиПоУмолчанию(Перечисления.ТипыШаблонов.РегистрационнаяКарта);
		РедактируемаяСтрока.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "СкладПродажи.Организация");
		Если ОбновитьШтрихКод Тогда
			РедактируемаяСтрока.Штрихкод = ШтрихКодЭлемента(РедактируемаяСтрока.Карта); 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ШтрихКодЭлемента(Владелец)
	
	Штрихкод = "";
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Штрихкоды.Штрихкод КАК Штрихкод
	               |ИЗ
	               |	РегистрСведений.Штрихкоды КАК Штрихкоды
	               |ГДЕ
	               |	Штрихкоды.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Штрихкод = Выборка.Штрихкод;
	КонецЦикла;
	
	Возврат Штрихкод;
	
КонецФункции

&НаСервере
Функция ОрганизацияПродажСертификата(Сертификат)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	РаспределениеПродаж.Склад.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА РаспределениеПродаж.ТоварнаяГруппа = &ТоварнаяГруппа
	|			ТОГДА ВЫБОР
	|					КОГДА РаспределениеПродаж.РабочееМесто = &РабочееМесто
	|						ТОГДА 1
	|					ИНАЧЕ 2
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РаспределениеПродаж.РабочееМесто = &РабочееМесто
	|					ТОГДА 3
	|				ИНАЧЕ 4
	|			КОНЕЦ
	|	КОНЕЦ КАК ПолеУпорядочивания
	|ИЗ
	|	РегистрСведений.РаспределениеПродаж КАК РаспределениеПродаж
	|ГДЕ
	|	РаспределениеПродаж.Магазин = &Магазин
	|	И (РаспределениеПродаж.ТоварнаяГруппа = &ТоварнаяГруппа
	|			ИЛИ РаспределениеПродаж.ТоварнаяГруппа = ЗНАЧЕНИЕ(Справочник.ТоварныеГруппы.ПустаяСсылка))
	|	И (РаспределениеПродаж.РабочееМесто = &РабочееМесто
	|			ИЛИ РаспределениеПродаж.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеУпорядочивания");
	
	ТоварнаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сертификат, "ТоварнаяГруппа");
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	Запрос.УстановитьПараметр("Магазин", Объект.Магазин);
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("ТоварнаяГруппа", ТоварнаяГруппа);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Организация = Выборка.Организация;
	Иначе
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Магазин, "СкладПродажи.Организация");
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

&НаСервере
Процедура ОповещениеПодбораПодарочныхСертификатовНаСервере(Результат, ДополнительныеПараметры)
	
	Сертификат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат[0], "Владелец");
	Организация = ОрганизацияПродажСертификата(Сертификат);
	ШаблонЭтикетки = ШаблонЭтикеткиПоУмолчанию(Перечисления.ТипыШаблонов.ПодарочныйСертификат);
	
	Для Каждого НомерСертификата Из Результат Цикл
		
		НоваяСтрока = Объект.ПодарочныеСертификаты.Добавить();
		НоваяСтрока.Сертификат = Сертификат;
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.КоличествоЭтикеток = 1;
		НоваяСтрока.ШаблонЭтикетки = ШаблонЭтикетки;
		
		НоваяСтрока.НомерСертификата = НомерСертификата;
		ПодарочныеСертификатыНомерСертификатаПриИзмененииНаСервере(, НоваяСтрока, Истина);
		
		НоваяСтрока.Выбран = ПроверитьВозможностьВыбораСертификата(НоваяСтрока);
		ПерваяСтрока = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ШаблонЭтикеткиПоУмолчанию(ТипШаблона)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 2
	|	Шаблоны.Ссылка КАК Шаблон
	|ИЗ
	|	Справочник.ХранилищеШаблонов КАК Шаблоны
	|ГДЕ
	|	Шаблоны.ТипШаблона = &ТипШаблона
	|	И (НЕ Шаблоны.ЭтоГруппа)
	|	И (НЕ Шаблоны.ПометкаУдаления)";
	Запрос.УстановитьПараметр("ТипШаблона", ТипШаблона);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
		Шаблон = Выборка.Шаблон;
	Иначе
		Шаблон = Справочники.ХранилищеШаблонов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Шаблон;
	
КонецФункции

&НаКлиенте
Процедура ТоварыШаблонЦенникаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Результат<>Неопределено Тогда
		ТекущиеДанные.ШаблонЦенника = Результат;
	КонецЕсли;
	
	ОбновитьТипШаблона(ТекущиеДанные.ПолучитьИдентификатор(), "Ценник");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонЭтикеткиНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Результат<>Неопределено Тогда
		ТекущиеДанные.ШаблонЭтикетки = Результат;
	КонецЕсли;
	
	ОбновитьТипШаблона(ТекущиеДанные.ПолучитьИдентификатор(), "Этикетка");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТипыПринтеров(СтрокиТовары, Назначение)
	
	Для Каждого ТекСтрока Из СтрокиТовары Цикл
		
		ОбновитьТипШаблона(ТекСтрока, Назначение)
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТипШаблона(ТоварыИдентификатор, Назначение)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ТоварыИдентификатор);
	
	Если Назначение = "Ценник" Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ШаблонЦенника) Тогда
			
			Если ТекущаяСтрока.ШаблонЦенника.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
				ТекущаяСтрока.ТипШаблонаЦенника = 1;
			Иначе
				ТекущаяСтрока.ТипШаблонаЦенника = 2;
			КонецЕсли;
			
		Иначе
			ТекущаяСтрока.ТипШаблонаЦенника = 0;
		КонецЕсли;
		
	ИначеЕсли Назначение = "Этикетка" Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ШаблонЭтикетки) Тогда
			
			Если ТекущаяСтрока.ШаблонЭтикетки.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
				ТекущаяСтрока.ТипШаблонаЭтикетки = 1;
			Иначе
				ТекущаяСтрока.ТипШаблонаЭтикетки = 2;
			КонецЕсли;
			
		Иначе
			ТекущаяСтрока.ТипШаблонаЭтикетки = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьСтрокуДанныхПоКодуСервер(СтрокаРезультата, ДанныеПО)
	
	ИдентификаторСтроки = Неопределено;
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		Если ИмяТаблицыВыборки = "ДисконтныеКарты" Тогда
			Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
				ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена регистрационная карта. Обработка регистрационная карт в таблице ""%2"" не предусмотрена'");
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ДанныеПО, ИмяТаблицыВыборки);
				СтрокаРезультата.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			Иначе
				ИдентификаторСтроки = ДобавитьНайденнуюКарту(СтрокаРезультата);
			КонецЕсли;
		ИначеЕсли ИмяТаблицыВыборки = "РегистрационныеКарты" Тогда
			Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
				ИдентификаторСтроки = ДобавитьНайденнуюКарту(СтрокаРезультата);
			Иначе
				ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена дисконтная карта. Обработка дисконтных карт в таблице ""%2"" не предусмотрена'");
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ДанныеПО, ИмяТаблицыВыборки);
				СтрокаРезультата.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			КонецЕсли;
		Иначе
			Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
				ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена регистрационная карта. Обработка регистрационная карт в таблице ""%2"" не предусмотрена'");
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ДанныеПО, ИмяТаблицыВыборки);
				СтрокаРезультата.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			Иначе
				ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена дисконтная карта. Обработка дисконтных карт в таблице ""%2"" не предусмотрена'");
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ДанныеПО, ИмяТаблицыВыборки);
				СтрокаРезультата.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		Если ИмяТаблицыВыборки = "Товары"
			ИЛИ ИмяТаблицыВыборки = "ПодарочныеСертификаты" Тогда
			ИдентификаторСтроки = ДобавитьНайденныеСерийныеНомера(СтрокаРезультата);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найден номер подарочного сертификата. Обработка сертификатов в таблице ""%2"" не предусмотрена'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ДанныеПО, ИмяТаблицыВыборки);
			СтрокаРезультата.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		КонецЕсли;
		
	Иначе // Номенклатура.
		
		Если ИмяТаблицыВыборки = "Товары" Тогда
			ИдентификаторСтроки = ДобавитьНайденныеПозицииТоваров(СтрокаРезультата);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'По коду ""%1"" найдена номенклатура. Обработка номенклатуры в таблице ""%2"" не предусмотрена'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, ДанныеПО, ИмяТаблицыВыборки);
			СтрокаРезультата.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьОбработкуДанныхПоКодуКлиент(СтруктураПараметровКлиента)
	
	ИдентификаторСтроки = ПодключаемоеОборудованиеРТКлиент.ЗавершитьОбработкуДанныхПоКодуКлиент(ЭтотОбъект, СтруктураПараметровКлиента, ИмяТаблицыВыборки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТаблицыВыборки(ИмяСтраницы)
	
	ИмяТаблицыВыборки = "";
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить("СтраницаТовары");
	МассивСтраниц.Добавить("СтраницаПодарочныеСертификаты");
	МассивСтраниц.Добавить("СтраницаДисконтныеКарты");
	МассивСтраниц.Добавить("СтраницаРегистрационныеКарты");
	Если МассивСтраниц.Найти(ИмяСтраницы) <> Неопределено Тогда
		ИмяТаблицыВыборки = СтрЗаменить(ИмяСтраницы, "Страница", "");
	КонецЕсли;

	Возврат ИмяТаблицыВыборки;
	
КонецФункции

&НаСервере
Функция ПоместитьВоВременноеХранилищеСервер()
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	Возврат АдресВХранилище;
	
КонецФункции

&НаСервере
Функция ПроверитьТипШаблоновЭтикеток()
	
	// Если в таблице товаров только шаблоны с типом "Этикетка (ценник) принтера этикеток",
	// то отправлять на печать не надо.
	
	Для Каждого СтрокаТоваров Из Объект.Товары Цикл
		
		Если Объект.Режим = "ПечатьЦенниковИЭтикеток" ИЛИ Объект.Режим = "ПечатьЦенников" Тогда
			
			Если ЗначениеЗаполнено(СтрокаТоваров.ШаблонЦенника) И НЕ СтрокаТоваров.ШаблонЦенника.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
				Возврат Истина;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.Режим = "ПечатьЦенниковИЭтикеток" ИЛИ Объект.Режим = "ПечатьЭтикеток" Тогда
			
			Если ЗначениеЗаполнено(СтрокаТоваров.ШаблонЭтикетки) И НЕ СтрокаТоваров.ШаблонЭтикетки.ТипШаблона = Перечисления.ТипыШаблонов.ЭтикеткаЦенникПринтераЭтикеток Тогда
				Возврат Истина;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоПакетамЦенников(СтруктураТоваров, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(СтруктураТоваров) Тогда
		
		ЗаполнитьОбработкуПоПакетамЦенников(СтруктураТоваров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбработкуПоПакетамЦенников(ТаблицаТоваров)
	
	СтруктураТоваров = Новый ТаблицаЗначений;
	СтруктураТоваров.Колонки.Добавить("Номенклатура",         Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	СтруктураТоваров.Колонки.Добавить("Характеристика",       Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	СтруктураТоваров.Колонки.Добавить("Упаковка",             Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	СтруктураТоваров.Колонки.Добавить("КоличествоЦенников",   Новый ОписаниеТипов("Число"));
	СтруктураТоваров.Колонки.Добавить("ШтрихАвтопроверки",    Новый ОписаниеТипов("Строка"));
	
	Для Каждого Строка Из ТаблицаТоваров Цикл
		
		Товар = СтруктураТоваров.Добавить();
		Товар.Номенклатура       = Строка.Номенклатура;
		Товар.Характеристика     = Строка.Характеристика;
		Товар.Упаковка           = Строка.УпаковкиНоменклатуры;
		Товар.КоличествоЦенников = Строка.Количество;
		Товар.ШтрихАвтопроверки  = Строка.ШтрихАвтопроверки;
		
	КонецЦикла;
	
	УстановитьРежимПечатьЦенниковНаСервере();
	Объект.Товары.Загрузить(СтруктураТоваров);
	Объект.ИсходныеДанные.Загрузить(СтруктураТоваров);
	
	ЗаполнитьТаблицуТоваровНаСервере();
	Объект.ИсходныеДанные.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРаспечатанныеЦенники()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЦенникиКПечати.Номенклатура,
	|	ЦенникиКПечати.Характеристика,
	|	ЦенникиКПечати.Упаковка,
	|	ЦенникиКПечати.ИДЦенника
	|ИЗ
	|	РегистрСведений.ЦенникиКПечати КАК ЦенникиКПечати
	|ГДЕ
	|	ЦенникиКПечати.КУдалению");
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.ЦенникиКПечати.СоздатьМенеджерЗаписи();
			Запись.Номенклатура = Выборка.Номенклатура;
			Запись.Характеристика = Выборка.Характеристика;
			Запись.Упаковка = Выборка.Упаковка;
			Запись.ИДЦенника = Выборка.ИДЦенника;
			Запись.Прочитать();
			Запись.Удалить();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСкладИОрганизациюПродажи(ТаблицаТоваров, Магазин, РабочееМесто)
	
	КоличествоКолонок = ТаблицаТоваров.Колонки.Количество();
	ТекстКолонок = "";
	НачальныйСимвол = "";
	Для Каждого Колонка Из ТаблицаТоваров.Колонки Цикл
		ТекстКолонок = ТекстКолонок + НачальныйСимвол + "ТаблицаТоваров." + Колонка.Имя;
		НачальныйСимвол =  "," + Символы.ПС + Символы.Таб;
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	&ТекстКолонок
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|	ВЫБРАТЬ
	|	Подзапрос.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(Подзапрос.Склад) КАК Склад,
	|	МАКСИМУМ(Подзапрос.СкладБезМеста) КАК СкладБезМеста
	|ПОМЕСТИТЬ СкладыПродаж
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|		РаспределениеПродаж.Склад КАК Склад,
	|		NULL КАК СкладБезМеста
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеПродаж КАК РаспределениеПродаж
	|			ПО РаспределениеПродаж.Магазин = &Магазин
	|				И РаспределениеПродаж.ТоварнаяГруппа = ТаблицаТоваров.Номенклатура.ТоварнаяГруппа
	|				И РаспределениеПродаж.РабочееМесто = &РабочееМесто
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Номенклатура,
	|		NULL,
	|		РаспределениеПродаж.Склад
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеПродаж КАК РаспределениеПродаж
	|			ПО РаспределениеПродаж.Магазин = &Магазин
	|				И РаспределениеПродаж.ТоварнаяГруппа = ТаблицаТоваров.Номенклатура.ТоварнаяГруппа
	|				И РаспределениеПродаж.РабочееМесто = &ПустоеМесто) КАК Подзапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	Подзапрос.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	РаспределениеПродаж.Организация КАК Организация
	|ПОМЕСТИТЬ ОрганизацииУслуг
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеПродажУслугПоОрганизациям КАК РаспределениеПродаж
	|		ПО (РаспределениеПродаж.Магазин = &Магазин)
	|			И (РаспределениеПродаж.ТоварнаяГруппа = ТаблицаТоваров.Номенклатура.ТоварнаяГруппа)
	|ГДЕ
	|	ТаблицаТоваров.Номенклатура.ТипНоменклатуры = &Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	&ТекстКолонок,
	|	ВЫБОР
	|		КОГДА СкладыПродаж.Склад ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА СкладыПродаж.СкладБезМеста ЕСТЬ NULL
	|						ТОГДА &СкладМагазина
	|					ИНАЧЕ СкладыПродаж.СкладБезМеста
	|				КОНЕЦ
	|		ИНАЧЕ СкладыПродаж.Склад
	|	КОНЕЦ КАК СкладПродажи,
	|	ВЫБОР КОГДА ТаблицаТоваров.Номенклатура.ТипНоменклатуры = &Услуга ТОГДА
	|		ЕСТЬNULL(ОрганизацииУслуг.Организация, &ОрганизацияМагазина)
	|	ИНАЧЕ
	|		ВЫБОР
	|			КОГДА СкладыПродаж.Склад ЕСТЬ NULL
	|				ТОГДА ВЫБОР
	|						КОГДА СкладыПродаж.СкладБезМеста ЕСТЬ NULL
	|							ТОГДА &ОрганизацияМагазина
	|						ИНАЧЕ СкладыПродаж.СкладБезМеста.Организация
	|					КОНЕЦ
	|			ИНАЧЕ СкладыПродаж.Склад.Организация
	|		КОНЕЦ
	|	КОНЕЦ КАК ОрганизацияПродажи
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ СкладыПродаж КАК СкладыПродаж
	|		ПО ТаблицаТоваров.Номенклатура = СкладыПродаж.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОрганизацииУслуг КАК ОрганизацииУслуг
	|		ПО ТаблицаТоваров.Номенклатура = ОрганизацииУслуг.Номенклатура
	|";
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ТекстКолонок", ТекстКолонок);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("Магазин", Магазин);
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Запрос.УстановитьПараметр("ПустоеМесто", Справочники.РабочиеМеста.ПустаяСсылка());
	Запрос.УстановитьПараметр("Услуга", Перечисления.ТипыНоменклатуры.Услуга);
	
	СтруктураМагазина = Новый Структура;
	СтруктураМагазина.Вставить("СкладМагазина", "СкладПродажи");
	СтруктураМагазина.Вставить("ОрганизацияМагазина", "СкладПродажи.Организация");
	РеквизитыМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Магазин, СтруктураМагазина);
	Запрос.УстановитьПараметр("СкладМагазина", РеквизитыМагазина.СкладМагазина);
	Запрос.УстановитьПараметр("ОрганизацияМагазина", РеквизитыМагазина.ОрганизацияМагазина);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

&НаСервере
Функция СформироватьСобственныйШтрихкод(Товар)
	
	Штрихкод = "";
	
	Если ЗначениеЗаполнено(Товар.SKU) Тогда
		КодИдентификатораSKUТовара = "99";
		КодSKUТовара = ПриведенноеКДлинеЗначение(Товар.SKU, 9);
		Штрихкод = КодИдентификатораSKUТовара + КодSKUТовара;
	КонецЕсли;
	
	КодИдентификатораЦены = "392N";
	Если ЗначениеЗаполнено(Товар.Цена) Тогда
		Если Товар.Цена = Цел(Товар.Цена) Тогда
			ЦенаТовара = ПриведенноеКДлинеЗначение(Товар.Цена, 9);
			ЦенаТовара = ЦенаТовара + "00";
		Иначе
			ЦенаТовара = ПриведенноеКДлинеЗначение(Товар.Цена, 12);
			ЦенаТовара = СтрЗаменить(ЦенаТовара, ",", "");
		КонецЕсли;
		Если НЕ Штрихкод = "" Тогда
			Штрихкод = Штрихкод + КодИдентификатораЦены + ЦенаТовара;
		КонецЕсли;
	Иначе
		Если НЕ Штрихкод = "" Тогда
			ЦенаТовара = ПриведенноеКДлинеЗначение(0, 12);
			Штрихкод = Штрихкод + КодИдентификатораЦены + ЦенаТовара;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

Функция ПриведенноеКДлинеЗначение(Знач ИсходнаяСтрока, Длина)
	Если ТипЗнч(ИсходнаяСтрока) = Тип("Число") Тогда
		Строка = Формат(ИсходнаяСтрока, "ЧН=0; ЧГ=0");
	Иначе
		Строка = СокрЛП(ИсходнаяСтрока);
	КонецЕсли;
	ТекущаяДлина = СтрДлина(Строка);
	Пока ТекущаяДлина < Длина Цикл
		Строка = "0" + Строка;
		ТекущаяДлина = ТекущаяДлина + 1;
	КонецЦикла;
	
	Возврат Строка;
КонецФункции

#КонецОбласти
