
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьНастройкиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыполнитьОбработчикАвтообновления(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда 
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ВыполнитьОбработчикАвтообновления(Истина);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ВыполнитьОбработчикАвтообновления(Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура Настроить(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокОтчетов", 				АдресСпискаОтчетов());
	ПараметрыФормы.Вставить("КратностьЧисел", 				КратностьЧисел);
	ПараметрыФормы.Вставить("РазрезАналитики", 				РазрезАналитики);
	ПараметрыФормы.Вставить("ТочностьРасчетаДробнойЧасти", 	ТочностьРасчетаДробнойЧасти);
	ПараметрыФормы.Вставить("КоличествоКолонок", 			КоличествоКолонок);
	ПараметрыФормы.Вставить("ПериодАвтообновления",			ПериодАвтообновления);
	ПараметрыФормы.Вставить("Период",						Период);
	ПараметрыФормы.Вставить("СписокФорматовМагазина",		СписокФорматовМагазина.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("СписокМагазинов",				СписокМагазинов.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("Периодичность",				Периодичность);
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("НастроитьЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Отчет.МониторПоказателей.Форма.ФормаНастроекМонитора", 
		ПараметрыФормы, 
		ЭтаФорма, 
		ЭтаФорма,
		,
		,
		ОбработкаЗавершения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыполнитьОбработчикАвтообновления(ВыполнитьСразу = Неопределено)
	
	Если Период.ДатаОкончания < Период.ДатаНачала Тогда 
		ТекстОшибки = НСтр("ru = 'Конец периода должен быть больше начала'");
		ПутьКДанным = Период;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ПутьКДанным);
		Возврат;
	КонецЕсли;
	
	Если Не ВыполнитьСразу = Неопределено Тогда
		ВыполнитьНачальноеЗаполнениеОтчета();
	КонецЕсли;
	
	ПериодАвтообновленияСекунд = ПериодАвтообновления * 60;
	
	ОтключитьОбработчикОжидания("ОбработчикОжидания_ВывестиДанныеОтчета");
	ПодключитьОбработчикОжидания("ОбработчикОжидания_ВывестиДанныеОтчета", ПериодАвтообновленияСекунд);	
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаОтчетов()
	
	Возврат ПоместитьВоВременноеХранилище(СписокОтчетов.Выгрузить(), Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура НастроитьЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
	Если Не РезультатЗакрытия = Истина Тогда
		Возврат;
	КонецЕсли;
		
	ЗагрузитьНастройкиФормы();
	ВыполнитьОбработчикАвтообновления(Истина);
		
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиФормы()
	
	СтандартныеНастройки = МониторПоказателей.НастройкиПоУмолчанию();
	
	ОтчетыМонитораПоказателей = ХранилищеОбщихНастроек.Загрузить("МониторПоказателейМагазина", "СписокОтчетов");
	
	Если ОтчетыМонитораПоказателей = Неопределено Тогда
		ТаблицаРазделов = ПолучитьИзВременногоХранилища(СтандартныеНастройки.ТаблицаРазделов);
	Иначе
		ТаблицаРазделов = ОтчетыМонитораПоказателей;
	КонецЕсли;
	
	СписокОтчетов.Очистить();
	СписокОтчетов.Загрузить(ТаблицаРазделов);
	
	НастройкаКратностьЧисел = ХранилищеОбщихНастроек.Загрузить("МониторПоказателейМагазина", "КратностьЧисел");
	Если НастройкаКратностьЧисел = Неопределено Тогда
		КратностьЧисел = СтандартныеНастройки.КратностьЧисел;
	Иначе
		КратностьЧисел = НастройкаКратностьЧисел;
	КонецЕсли;
	
	НастройкаРазрезАналитики = ХранилищеОбщихНастроек.Загрузить("МониторПоказателейМагазина", "РазрезАналитики");
	Если НастройкаРазрезАналитики = Неопределено Тогда
		РазрезАналитики = СтандартныеНастройки.РазрезАналитики;
	Иначе
		РазрезАналитики = НастройкаРазрезАналитики;
	КонецЕсли;
	
	НастройкаТочностьРасчетаДробнойЧасти = ХранилищеОбщихНастроек.Загрузить("МониторПоказателейМагазина", "ТочностьРасчетаДробнойЧасти");
	Если НастройкаТочностьРасчетаДробнойЧасти = Неопределено Тогда
		ТочностьРасчетаДробнойЧасти = СтандартныеНастройки.ТочностьРасчетаДробнойЧасти;
	Иначе
		ТочностьРасчетаДробнойЧасти = НастройкаТочностьРасчетаДробнойЧасти;
	КонецЕсли;
	
	НастройкаКоличествоКолонок = ХранилищеОбщихНастроек.Загрузить("МониторПоказателейМагазина", "КоличествоКолонок");
	Если НастройкаКоличествоКолонок = Неопределено Тогда
		КоличествоКолонок = СтандартныеНастройки.КоличествоКолонок;
	Иначе
		КоличествоКолонок = НастройкаКоличествоКолонок;
	КонецЕсли;
	
	НастройкаПериодАвтообновления = ХранилищеОбщихНастроек.Загрузить("МониторПоказателейМагазина", "ПериодАвтообновления");
	Если НастройкаПериодАвтообновления = Неопределено Тогда
		ПериодАвтообновления = СтандартныеНастройки.ПериодАвтообновления;
	Иначе
		ПериодАвтообновления = НастройкаПериодАвтообновления;
	КонецЕсли;

	НастройкаПериода = ХранилищеОбщихНастроек.Загрузить("МониторПоказателейМагазина", "Период");
	Если НастройкаПериода = Неопределено Тогда
		Период = СтандартныеНастройки.Период;
	Иначе                                       
		Период = НастройкаПериода;
	КонецЕсли;
	
	МассивФорматовМагазина = ХранилищеОбщихНастроек.Загрузить("МониторПоказателейМагазина", "СписокФорматовМагазина");
	Если Не МассивФорматовМагазина = Неопределено Тогда 
		СписокФорматовМагазина.ЗагрузитьЗначения(МассивФорматовМагазина);
	КонецЕсли;
	
	МассивМагазинов = ХранилищеОбщихНастроек.Загрузить("МониторПоказателейМагазина", "СписокМагазинов");
	Если Не МассивМагазинов = Неопределено Тогда 
		СписокМагазинов.ЗагрузитьЗначения(МассивМагазинов);
	КонецЕсли;
	
	НастройкаПериодичности = ХранилищеОбщихНастроек.Загрузить("МониторПоказателейМагазина", "Периодичность");
	Если НастройкаПериодичности = Неопределено Тогда
		Периодичность = СтандартныеНастройки.Периодичность;
	Иначе
		Периодичность = НастройкаПериодичности;
	КонецЕсли;
	
	ЗаполнитьВыбранныеОтчеты();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВыбранныеОтчеты()
	
	ВыбранныеОтчеты.Очистить();
	Для Каждого Строка Из СписокОтчетов Цикл 
		Если Строка.Доступность Тогда 
			НовыйВыбранныйОтчет = ВыбранныеОтчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйВыбранныйОтчет, Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуОтчета()
	
	//Удаление созданных ранее групп.
	ГруппыМонитора = Элементы.Найти("ГруппаМониторПоказателей");
	Если Не ГруппыМонитора = Неопределено Тогда 
		Элементы.Удалить(ГруппыМонитора);	
	КонецЕсли;
	
	//Удаление созданных ранее реквизитов.
	МассихВсехРеквизитов = ПолучитьРеквизиты();
	МассивНеудаляемыхРеквизитов = ПолучитьНеудаляемыеРеквизиты();
	ОбновитьМассивВсехРеквизитов(МассихВсехРеквизитов, МассивНеудаляемыхРеквизитов);	
	
	Если МассихВсехРеквизитов.Количество() > 0 Тогда
		МассивУдаляемыхРеквизитов = Новый Массив;
		Для Каждого СуществующийРеквизит Из МассихВсехРеквизитов Цикл 
			МассивУдаляемыхРеквизитов.Добавить(СуществующийРеквизит.Имя);
		КонецЦикла;
		ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
	КонецЕсли;
	
	//Создание родительской группы.
	ГруппаМониторПоказателей = ВертикальнаяГруппа("ГруппаМониторПоказателей", НСтр("ГруппаМониторПоказателей"));
	
	//Создание колонок
	КоличествоСтрок = Цел(ВыбранныеОтчеты.Количество() / КоличествоКолонок) + 1;
	Для Строка = 1 По КоличествоСтрок Цикл 
		
		ГоризонтальнаяГруппа = ГоризонтальнаяГруппа("ГоризонтальнаяГруппа" + Строка, 
													НСтр("ru='Строка №'") + Строка, 
													ГруппаМониторПоказателей);
		
		Для Колонка = 1 По КоличествоКолонок Цикл 
			ВертикальнаяГруппа = ВертикальнаяГруппа("ВертикальнаяГруппа" + Строка + Колонка, 
													НСтр("ru='Колонка №'") + Строка + Колонка, 
													ГоризонтальнаяГруппа);	
		КонецЦикла;
		
	КонецЦикла;
	
	ТекущаяКолонка 	= 1;
	ТекущаяСтрока	= 1;
	
КонецПроцедуры

&НаСервере
Функция ВертикальнаяГруппа(Имя, Заголовок, Родитель = Неопределено)
	
	ВертикальнаяГруппа = Элементы.Добавить(Имя, Тип("ГруппаФормы"), Родитель);
	ВертикальнаяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ВертикальнаяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ВертикальнаяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	ВертикальнаяГруппа.Заголовок = Заголовок;
	ВертикальнаяГруппа.РазрешитьИзменениеСостава = Ложь;
	ВертикальнаяГруппа.ОтображатьЗаголовок = Ложь;
	
	Возврат ВертикальнаяГруппа;
	
КонецФункции

&НаСервере
Функция ГоризонтальнаяГруппа(Имя, Заголовок, Родитель = Неопределено)
	
	ГоризонтальнаяГруппа = Элементы.Добавить(Имя, Тип("ГруппаФормы"), Родитель);
	ГоризонтальнаяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГоризонтальнаяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГоризонтальнаяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГоризонтальнаяГруппа.Заголовок = Заголовок;
	ГоризонтальнаяГруппа.ОтображатьЗаголовок = Ложь;
	
	Возврат ГоризонтальнаяГруппа;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьМассивВсехРеквизитов(МассихВсехРеквизитов, МассивНеудаляемыхРеквизитов)
	
	Для Каждого НеудаляемыйРеквизит Из МассивНеудаляемыхРеквизитов Цикл 
		Для Каждого СуществующийРеквизит Из МассихВсехРеквизитов Цикл 
			Если СуществующийРеквизит.Имя = НеудаляемыйРеквизит Тогда
				Индекс = МассихВсехРеквизитов.Найти(СуществующийРеквизит);
				Прервать;
			Иначе
				Индекс = Неопределено;
			КонецЕсли;
		КонецЦикла;
		Если Индекс <> Неопределено Тогда
			МассихВсехРеквизитов.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНеудаляемыеРеквизиты()
	
	МассивНеудаляемыхРеквизитов = Новый Массив;
	МассивНеудаляемыхРеквизитов.Добавить("Отчет");
	МассивНеудаляемыхРеквизитов.Добавить("ВыбранныеОтчеты");
	МассивНеудаляемыхРеквизитов.Добавить("КратностьЧисел");
	МассивНеудаляемыхРеквизитов.Добавить("Период");
	МассивНеудаляемыхРеквизитов.Добавить("РазрезАналитики");
	МассивНеудаляемыхРеквизитов.Добавить("СписокОтчетов");
	МассивНеудаляемыхРеквизитов.Добавить("ТочностьРасчетаДробнойЧасти");
	МассивНеудаляемыхРеквизитов.Добавить("КоличествоКолонок");
	МассивНеудаляемыхРеквизитов.Добавить("ТекущаяСтрока");
	МассивНеудаляемыхРеквизитов.Добавить("ТекущаяКолонка");
	МассивНеудаляемыхРеквизитов.Добавить("ПериодАвтообновления");
	МассивНеудаляемыхРеквизитов.Добавить("СписокФорматовМагазина");
	МассивНеудаляемыхРеквизитов.Добавить("СписокМагазинов");
	МассивНеудаляемыхРеквизитов.Добавить("Периодичность");
	
	Возврат МассивНеудаляемыхРеквизитов;
	
КонецФункции

#Область ФормированиеДанныхДляОтчета

&НаКлиенте
Процедура ОбработчикОжидания_ВывестиДанныеОтчета()
	
	ВывестиДанныеОтчетаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеОтчетаНаСервере()
	
	Если Не ЗначениеЗаполнено(Период) Тогда 
		Период.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;	
	КонецЕсли;
	
	//Удаляем ранее программно созданные элементы.
	ОбновитьФормуОтчета();
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыЗадания = Новый Структура();
	
	//Параметры для выполнения отчетов.
	ПараметрыЗадания.Вставить("РазрезАналитики", 		РазрезАналитики);
	ПараметрыЗадания.Вставить("Период", 				Период);
	ПараметрыЗадания.Вставить("ВыбранныеОтчеты", 		Новый ХранилищеЗначения(ВыбранныеОтчеты.Выгрузить()));
	ПараметрыЗадания.Вставить("СписокМагазинов", 		СписокМагазинов.ВыгрузитьЗначения());
	ПараметрыЗадания.Вставить("СписокФорматовМагазина", СписокФорматовМагазина.ВыгрузитьЗначения());
	ПараметрыЗадания.Вставить("Периодичность",			Периодичность);

	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		МониторПоказателей.СформироватьДанныеОтчетаВФоне(ПараметрыЗадания, АдресВХранилище);
		ОтобразитьДанные(АдресВХранилище);
	Иначе
		ПараметрыЗаполнения = Новый Массив;
		ПараметрыЗаполнения.Добавить(ПараметрыЗадания);
		ПараметрыЗаполнения.Добавить(АдресВХранилище);
		
		НаименованиеЗадания = НСтр("ru = 'Монитор показателей магазина фоновые действия'");
		Задание = ФоновыеЗадания.Выполнить("МониторПоказателей.СформироватьДанныеОтчетаВФоне", ПараметрыЗаполнения, , НаименованиеЗадания);
		
		Попытка
			Задание.ОжидатьЗавершения();
		Исключение  
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение отчета ""Монитор показателей магазина""'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		ИдентификаторЗадания = Задание.УникальныйИдентификатор;
		
		Если ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ОтобразитьДанные(АдресВХранилище);
		КонецЕсли;
		
	КонецЕсли;
		
	//Сделаем так, чтобы все области графиков были одинакового размера.
	ЗаполнитьПустыеОбласти();
	
	Элементы.ГруппаОжидание.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОтображениеДанных

&НаСервере
Процедура ОтобразитьДанные(АдресВХранилище)
	
	МассивРезультат = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	Для Каждого ЭлементМассива Из МассивРезультат Цикл 
		
		НарисоватьГрафик(ЭлементМассива);
			
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура НарисоватьГрафик(СтруктураПараметров)
	
	ФорматСуммы 			= "Л=ru_RU; ЧДЦ=2; ЧРД=,; ЧН=0,00";
	ПараметрыОтчета 		= СтруктураПараметров.ПараметрыОтчета;
	ИмяОтчета 				= СтруктураПараметров.ИмяОтчета;
	ЗаголовокДиаграммы 		= СтруктураПараметров.Заголовок;
	Данные 					= СтруктураПараметров.Данные;
	МассивРеквизитов 		= Новый Массив;
	
	//Создание группы для диаграммы.
	РодительскаяГруппа 		= Элементы.Найти("ВертикальнаяГруппа" + ТекущаяСтрока + ТекущаяКолонка);
	ИмяГруппы 				= ИмяОтчета + "ВертикальнаяГруппа" + ТекущаяСтрока + ТекущаяКолонка;
	ГруппаДляГрафика 		= ГоризонтальнаяГруппа(ИмяГруппы, ЗаголовокДиаграммы, РодительскаяГруппа);
	ГруппаДляГрафика.Ширина = 15;
	
	ВычислитьТекущиуюКолонкуИСтроку();
	
	Если Данные.Количество() = 0 Тогда 
		
		ГруппаДляГрафика.ОтображатьЗаголовок 		= Истина;
		ГруппаДляГрафика.ШрифтЗаголовка 			= ШрифтыСтиля.КрупныйШрифтТекста;
		ГруппаДляГрафика.ЦветТекстаЗаголовка 		= ЦветаСтиля.ЦветТекстаФормы;
		ГруппаДляГрафика.РастягиватьПоВертикали 	= Истина;
		ГруппаДляГрафика.РастягиватьПоГоризонтали 	= Истина;
		
		ПолеКартинки = Элементы.Вставить("Декорация" + ИмяОтчета, Тип("ДекорацияФормы"), ГруппаДляГрафика);
		ПолеКартинки.Вид = ВидДекорацииФормы.Картинка;
		ПолеКартинки.ТекстНевыбраннойКартинки 	= "Нет данных для заполнения отчета";
		ПолеКартинки.РастягиватьПоГоризонтали 	= Истина;
		ПолеКартинки.РастягиватьПоВертикали 	= Истина;

		Возврат;
		
	КонецЕсли;
	
	//Создание реквизита формы.
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Диаграмма"));
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	ТекстЗаголовка = СформироватьТекстЗаголовка(ЗаголовокДиаграммы, КратностьЧисел);	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("График" + ИмяОтчета, ОписаниеТипов, "", ТекстЗаголовка));	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	//Создание элемента формы.
	ЭлементФормы = Элементы.Вставить("ЭлементФормы" + ИмяОтчета, Тип("ПолеФормы"), ГруппаДляГрафика);
	ЭлементФормы.ПутьКДанным = "График" + ИмяОтчета;
	ЭлементФормы.ШрифтЗаголовка = ШрифтыСтиля.КрупныйШрифтТекста;
	
	График = ЭтаФорма["График" + ИмяОтчета];
	График.ТипДиаграммы = Перечисления.ВидыДиаграмм.ПолучитьТипДиаграммы(ПараметрыОтчета.ВидОтображения);
	
	//Заполнение диаграммы данными.
	Если График.ТипДиаграммы = ТипДиаграммы.Круговая Или 
		График.ТипДиаграммы = ТипДиаграммы.КруговаяОбъемная Тогда
		
		ТаблицаДляГрафика = СформироватьТаблицуДляКруговойДиаграммы(Данные);
		
		Точка = График.УстановитьТочку(0);
		
		Для Каждого СтрокаДанных из ТаблицаДляГрафика Цикл
			
			ЗначениеТочки 	= ПолучитьЗначениеСУчетомКратности(СтрокаДанных.Значение, КратностьЧисел);
			Серия 			= График.УстановитьСерию(СтрокаДанных.Аналитика);
			Подсказка 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = '%1 (%2): %3'"),
											Формат(ЗаголовокДиаграммы),
											Формат(СтрокаДанных.Аналитика),
											Формат(СтрокаДанных.Значение, ФорматСуммы),
											);
											
			График.УстановитьЗначение(Точка, Серия, ЗначениеТочки,, Подсказка);

		КонецЦикла;
		График.ВидПодписей = ВидПодписейКДиаграмме.Процент;
		
	ИначеЕсли График.ТипДиаграммы = ТипДиаграммы.Измерительная Тогда
		
		ТаблицаДляГрафика = СформироватьТаблицуДляКруговойДиаграммы(Данные);
		
		Точка = График.УстановитьТочку(0);
		
		Для Каждого СтрокаДанных из ТаблицаДляГрафика Цикл
			
			ЗначениеТочки 	= ПолучитьЗначениеСУчетомКратности(СтрокаДанных.Значение, КратностьЧисел);
			Серия 			= График.УстановитьСерию(СтрокаДанных.Аналитика);
			Подсказка 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = '%1: %2'"),
								Формат(ЗаголовокДиаграммы), 
								Формат(СтрокаДанных.Значение, ФорматСуммы),
								);

			График.УстановитьЗначение(Точка, Серия, ЗначениеТочки,, Подсказка);
			
		КонецЦикла;
		
		График.ВидПодписей = ВидПодписейКДиаграмме.Процент;
		
	Иначе
		
		Для Каждого СтрокаДанных из Данные Цикл
			
			ЗначениеТочки 			= ПолучитьЗначениеСУчетомКратности(СтрокаДанных.Значение, КратностьЧисел);
			ПредставлениеПериода 	= СформироватьПредставлениеПериода(СтрокаДанных.Период, Периодичность);
			Серия 					= График.УстановитьСерию(СтрокаДанных.Аналитика);
			Точка 					= График.УстановитьТочку(ПредставлениеПериода);
			Подсказка 				= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = '%1 (%2): %3 на %4'"),
											Формат(ЗаголовокДиаграммы),
											Формат(СтрокаДанных.Аналитика),
											Формат(СтрокаДанных.Значение, ФорматСуммы),
											ПредставлениеПериода
											);
			
			График.УстановитьЗначение(Точка, Серия, ЗначениеТочки,,Подсказка);
			
			//Добавление линии тренда.
			Если ПараметрыОтчета.ЛинияТренда Тогда 
				НоваяЛинияТренда = Серия.ЛинииТренда.Добавить();
				НоваяЛинияТренда.ТипАппроксимации = ТипАппроксимацииЛинииТрендаДиаграммы.Линейный;
				НоваяЛинияТренда.Линия = Новый Линия(ТипЛинииДиаграммы.ПунктирТочка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//Ограничение на максимальное количество серий.
	График.МаксимумСерий = МаксимумСерий.Ограничено;
	График.МаксимумСерийКоличество = 6;
	
	//Установка режима сглаживания графика.
	График.РежимСглаживания = РежимСглаживанияДиаграммы.ГладкаяКривая;
	
	//Заполнение палитры цветов.
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.ПалитраЦветов) Тогда 
		График.ПалитраЦветов = ПалитраЦветовДиаграммы.Авто;
	Иначе 
		График.ПалитраЦветов = ПалитраЦветовДиаграммы[ПараметрыОтчета.ПалитраЦветов];
	КонецЕсли;
	
	//Настроить кратность чисел и количество знаков после запятой.
	График.ОбластьПостроения.ФорматШкалыЗначений = "ЧЦ=10; ЧДЦ=" + ТочностьРасчетаДробнойЧасти + """";
	
	График.Градиент = Истина;
	
	График.АвтоТранспонирование = Истина;
	График.Обновление = Истина;
		
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ВычислитьТекущиуюКолонкуИСтроку()
	
	Если КоличествоКолонок = ТекущаяКолонка Тогда 
		ТекущаяКолонка 	= 1;
		ТекущаяСтрока 	= ТекущаяСтрока + 1;
	Иначе 
		ТекущаяКолонка 	= ТекущаяКолонка + 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеОбласти()
	
	ВсегоОтчетов 		= ВыбранныеОтчеты.Количество();
	Отношение 			= ВсегоОтчетов / КоличествоКолонок;
	ДополнитьОбласти 	= ?(Отношение - Цел(Отношение) = 0, Ложь, Истина);
	
	Если ДополнитьОбласти Тогда 
		
		Пока ТекущаяКолонка < КоличествоКолонок + 1 Цикл
			
			МассивРеквизитов = Новый Массив;
			
			//Создание реквизита формы.
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Диаграмма"));
			ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ПустаяДиаграмма" + ТекущаяСтрока + ТекущаяКолонка, ОписаниеТипов, "", ""));	
			ИзменитьРеквизиты(МассивРеквизитов);
			
			//Создание группы для диаграммы.
			РодительскаяГруппа 	= Элементы.Найти("ВертикальнаяГруппа" + ТекущаяСтрока + ТекущаяКолонка);
			ИмяГруппы 			= "ПустаяВертикальнаяГруппа" + ТекущаяСтрока + ТекущаяКолонка;
			ГруппаДляДиаграммы 	= ГоризонтальнаяГруппа(ИмяГруппы, "Пустая вертикальная группа" + ТекущаяСтрока + ТекущаяКолонка, РодительскаяГруппа);
			ГруппаДляДиаграммы.Ширина = 15;
			
			//Создание элемента формы.	
			ПустоеПоле = Элементы.Вставить("ЭлементФормы" + ИмяГруппы, Тип("ПолеФормы"), ГруппаДляДиаграммы);
			ПустоеПоле.ПутьКДанным = "ПустаяДиаграмма" + ТекущаяСтрока + ТекущаяКолонка;
			ПустоеПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПустаяДиаграмма = ЭтаФорма["ПустаяДиаграмма" + ТекущаяСтрока + ТекущаяКолонка];
			ПустаяДиаграмма.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
			
			ТекущаяКолонка = ТекущаяКолонка + 1;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	ХранилищеОбщихНастроек.Сохранить("МониторПоказателейМагазина", "Период", Период);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНачальноеЗаполнениеОтчета()
	
	ПодключитьОбработчикОжидания("ОбработчикОжидания_ВыполнитьНачальноеЗаполнениеОтчета", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжидания_ВыполнитьНачальноеЗаполнениеОтчета()
	
	ВывестиДанныеОтчетаНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеСУчетомКратности(Значение, Кратность)
	
	Если Кратность = Перечисления.ВидыПредставленияЧисел.ВМиллионах Тогда 
		Значение = Значение / 1000000;
	ИначеЕсли Кратность = Перечисления.ВидыПредставленияЧисел.ВТысячах Тогда 
		Значение = Значение / 1000;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьТаблицуДляКруговойДиаграммы(ТаблицаДанные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗ.Значение КАК Значение,
	|	ТЗ.Аналитика КАК Аналитика
	|ПОМЕСТИТЬ ВремТаблица
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВремТаблица.Значение) КАК Значение,
	|	ВремТаблица.Аналитика КАК Аналитика
	|ИЗ
	|	ВремТаблица КАК ВремТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ВремТаблица.Аналитика";
	
	Запрос.УстановитьПараметр("ТЗ", ТаблицаДанные);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьТекстЗаголовка(ЗаголовокДиаграммы, КратностьЧисел)
	
	КратностьЗначения 	= "";
	ЕдиницаИзмерения	= "";
	
	Если ЗаголовокДиаграммы = СокрЛП("Количество чеков") Тогда 
		ЕдиницаИзмерения = "шт.";
	Иначе 
		ЕдиницаИзмерения = "руб.";
	КонецЕсли;
	
	Если КратностьЧисел = Перечисления.ВидыПредставленияЧисел.ВТысячах Тогда 
		КратностьЗначения = "тыс." + ЕдиницаИзмерения;
	ИначеЕсли КратностьЧисел = Перечисления.ВидыПредставленияЧисел.ВМиллионах Тогда 
		КратностьЗначения = "млн." + ЕдиницаИзмерения;
	Иначе 
		КратностьЗначения = ЕдиницаИзмерения;
	КонецЕсли;
	
	ЗаголовокСтрокой = ЗаголовокДиаграммы + " (" + КратностьЗначения + ")";
	
	Возврат ЗаголовокСтрокой;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьПредставлениеПериода(Дата, Периодичность)
	
	ФорматДаты = "";
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда 
		ФорматДаты = Формат(Дата, "Л=ru_RU; ДФ=гггг");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда 
		ФорматДаты = Формат(Дата, "Л=ru_RU; ДФ='к ""кв"" гг ""'");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда 
		ФорматДаты = Формат(Дата, "Л=ru_RU; ДФ='МММ """"гг ""'");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда 
		ФорматДаты = Формат(Дата, "Л=ru_RU; ДФ='dd МММ """"гг ""'");
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда 
		ФорматДаты = Формат(Дата, "Л=ru_RU; ДФ='dd МММ """"гг ""'");
	КонецЕсли;
	
	Возврат ФорматДаты;	
	
КонецФункции

#КонецОбласти
