
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодключаемогоОборудования

&НаКлиенте
Процедура ОповещениеПоискаПоШтрихкоду(Штрихкод, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Штрихкод) Тогда
		СтруктураПараметровКлиента = ПолученШтрихкодИзСШК(Штрихкод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоискаПоМагнитномуКоду(ТекКод, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(ТекКод) Тогда
		СтруктураПараметровКлиента = ПолученМагнитныйКод(ТекКод);
		ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораДанныхПоиска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработатьДанныеПоКодуСервер(Результат);
		ОбработатьДанныеПоКодуКлиент(Результат)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолученМагнитныйКод(МагнитныйКод) Экспорт 
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученМагнитныйКод(МагнитныйКод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция ПолученШтрихкодИзСШК(Штрихкод) Экспорт
	
	СтруктураРезультат = ПодключаемоеОборудованиеРТВызовСервера.ПолученШтрихкодИзСШК(Штрихкод, ЭтотОбъект);
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ОбработатьДанныеПоКодуСервер(СтруктураРезультат) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	СтрокаРезультата = СтруктураРезультат.ЗначенияПоиска[0];
	
	Если СтрокаРезультата.Свойство("Карта") Тогда
		
		Если СтрокаРезультата.ЭтоРегистрационнаяКарта Тогда
			ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиКарт(СтруктураРезультат, СтрокаРезультата);
		Иначе
			ИдентификаторСтроки = ДобавитьНайденнуюКарту(СтрокаРезультата);
		КонецЕсли;
		
	ИначеЕсли СтрокаРезультата.Свойство("СерийныйНомер") Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиСертификатов(СтруктураРезультат, СтрокаРезультата);
		
	ИначеЕсли СтрокаРезультата.Свойство("ШтрихкодУпаковкиЕГАИС")
		И ЗначениеЗаполнено(СтрокаРезультата.ШтрихкодУпаковкиЕГАИС) Тогда
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиАкцизныхМарок(СтруктураРезультат, СтрокаРезультата);
		
	Иначе // Номенклатура.
		
		ПодключаемоеОборудованиеРТВызовСервера.ВставитьПредупреждениеОНевозможностиОбработкиНоменклатуры(СтруктураРезультат, СтрокаРезультата);
		
	КонецЕсли;

	Если СтрокаРезультата.Свойство("ТекстПредупреждения") Тогда
		СтруктураРезультат.Вставить("ТекстПредупреждения", СтрокаРезультата.ТекстПредупреждения);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтруктураРезультат.Вставить("СкомпоноватьРезультат", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПоКодуКлиент(СтруктураПараметровКлиента) Экспорт
	
	ОткрытаБлокирующаяФорма = Ложь;
	
	Если СтруктураПараметровКлиента.Свойство("СкомпоноватьРезультат") Тогда
		СкомпоноватьРезультат();
	КонецЕсли;
	
	ПодключаемоеОборудованиеРТКлиент.ОбработатьДанныеПоКоду(ЭтотОбъект, СтруктураПараметровКлиента, ОткрытаБлокирующаяФорма);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеИзТСДСервер(СтруктураПараметров) Экспорт
	
	Результат = ПодключаемоеОборудованиеРТВызовСервера.ОбработатьДанныеПоДисконтнымКартамИзТСДСервер(ЭтотОбъект, СтруктураПараметров);
	СкомпоноватьРезультат();
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьНайденнуюКарту(СтрокаМассива) Экспорт
	
	ИдентификаторСтроки = Неопределено;
	
	Если ЗначениеЗаполнено(СтрокаМассива.ВладелецКарты) Тогда
		МожноДобавлять = Истина;
		Если ТипЗнч(СтрокаМассива.ВладелецКарты) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Если ТипПолучателей = Перечисления.ТипыПолучателейСкидок.Контрагенты Тогда
				МожноДобавлять = Ложь;
				ТекстПредупреждения = НСтр("ru = 'Карта %1 принадлежит физическому лицу. В группу можно добавлять только контрагентов.'");
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтрокаМассива.Карта);
				СтрокаМассива.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаМассива.ВладелецКарты) = Тип("СправочникСсылка.Контрагенты") Тогда
			Если ТипПолучателей = Перечисления.ТипыПолучателейСкидок.ФизическиеЛица Тогда
				МожноДобавлять = Ложь;
				ТекстПредупреждения = НСтр("ru = 'Карта %1 принадлежит контрагенту. В группу можно добавлять только физических лиц.'");
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтрокаМассива.Карта);
				СтрокаМассива.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			КонецЕсли;
		Иначе
			МожноДобавлять = Ложь;
			ТекстПредупреждения = НСтр("ru = 'Карта %1 не принадлежит контрагенту или физическому лицу.'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтрокаМассива.Карта);
			СтрокаМассива.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		КонецЕсли;
		
		Если МожноДобавлять Тогда
			Запись = РегистрыСведений.СоставГруппПолучателейСкидки.СоздатьМенеджерЗаписи();
			Запись.ГруппаПолучателейСкидки = ГруппаПолучателей;
			Запись.Получатель = СтрокаМассива.ВладелецКарты;
			Запись.Прочитать();
			
			Если Запись.Выбран() Тогда
				ТекстПредупреждения = НСтр("ru = 'Элемент %1 уже включен в группу получателей.'");
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтрокаМассива.ВладелецКарты);
				СтрокаМассива.Вставить("ТекстПредупреждения", ТекстПредупреждения);
			Иначе
				Запись.ГруппаПолучателейСкидки = ГруппаПолучателей;
				Запись.Получатель = СтрокаМассива.ВладелецКарты;
				Запись.Записать();
				ИдентификаторСтроки = 0;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстПредупреждения = НСтр("ru = 'У карты %1 не указан владелец.'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, СтрокаМассива.Карта);
		СтрокаМассива.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ДобавитьВГруппуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ДобавитьЭлемент(Результат, Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВГруппуВыборЭлемента(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения("ДобавитьВГруппуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Если ВыбранныйЭлемент.Значение = НСтр("ru = 'Физические лица'") Тогда
			ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", , ЭтаФорма, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли ВыбранныйЭлемент.Значение = НСтр("ru = 'Контрагенты'") Тогда
			ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", , ЭтаФорма, , , , ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаПолучателей = Параметры.ГруппаПолучателей;
	Если НЕ ЗначениеЗаполнено(ГруппаПолучателей) Тогда
		ВызватьИсключение НСтр("ru = 'Открытие отчета не возможно: не выбрана группа получателей скидки'");
	КонецЕсли;
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЭтоГруппа", "ЭтоГруппа");
	СтруктураРеквизитов.Вставить("СпособФормирования", "СпособФормирования");
	СтруктураРеквизитов.Вставить("ТипПолучателей", "ТипПолучателей");
	РеквизитыГруппы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ГруппаПолучателей, СтруктураРеквизитов);
	Если РеквизитыГруппы.ЭтоГруппа Тогда
		ТекстОшибки = НСтр("ru = 'Выберите элемент, а не группу'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ВозможенРучнойВвод = РеквизитыГруппы.СпособФормирования = Перечисления.СпособыФормированияСегментов.ФормироватьВручную;
	Если ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.СоставГруппПолучателейСкидки) Тогда
		Элементы.ДобавитьВГруппу.Видимость = ВозможенРучнойВвод;
		Элементы.УдалитьИзГруппы.Видимость = ВозможенРучнойВвод;
	Иначе
		Элементы.ДобавитьВГруппу.Видимость = Ложь;
		Элементы.УдалитьИзГруппы.Видимость = Ложь;
		Элементы.СформироватьГруппу.Видимость = Ложь;
	КонецЕсли;
	Элементы.ФормаЗагрузитьДанныеИзТСД.Видимость = ВозможенРучнойВвод;
	Элементы.ФормаПоискПоМагнитномуКоду.Видимость = ВозможенРучнойВвод;
	Элементы.ФормаПоискПоШтрихкоду.Видимость = ВозможенРучнойВвод;
	ТипПолучателей = РеквизитыГруппы.ТипПолучателей;
	
	Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Вставить("ГруппаПолучателей", ГруппаПолучателей);
	
	Если ВозможенРучнойВвод Тогда
		// ПодключаемоеОборудование
		МассивКомандПО = Новый Массив;
		МассивКомандПО.Добавить("ФормаЗагрузитьДанныеИзТСД");
		ПодключаемоеОборудованиеРТВызовСервера.НастроитьПодключаемоеОборудование(ЭтотОбъект, МассивКомандПО);
		ПараметрыСобытийПО = Новый Структура;
		ПараметрыСобытийПО.Вставить("ЕстьКоличество", Ложь);
		// Конец ПодключаемоеОборудование
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	ВариантыОтчетов.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВозможенРучнойВвод Тогда
		// ПодключаемоеОборудование
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода, СчитывательМагнитныхКарт");
		// Конец ПодключаемоеОборудование
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ВозможенРучнойВвод Тогда
		// ПодключаемоеОборудование
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
		// Конец ПодключаемоеОборудование
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() И ВозможенРучнойВвод Тогда
		ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	Элемент = РасшифроватьЭлемент(Расшифровка);
	Если ЗначениеЗаполнено(Элемент) Тогда
		ПоказатьЗначение(, Элемент);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьВГруппу(Команда)
	
	СписокВыбораТипа = СписокТиповПолучателей();
	ДополнительныеПараметры = Новый Структура;
	
	Если СписокВыбораТипа.Количество() = 1 Тогда
		ВыбранныйТип = СписокВыбораТипа[0];
		ДобавитьВГруппуВыборЭлемента(ВыбранныйТип, ДополнительныеПараметры);
	Иначе
		ОбработчикОповещения = Новый ОписаниеОповещения("ДобавитьВГруппуВыборЭлемента", ЭтотОбъект, ДополнительныеПараметры);
		СписокВыбораТипа.ПоказатьВыборЭлемента(ОбработчикОповещения, НСтр("ru = 'Выберите тип значения'"));
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиКомандПодключаемогоОборудования

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеРТКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоМагнитномуКоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиМагнитныйКод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОбработкаТабличнойЧастиТоварыКлиент.ВвестиШтрихкод(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура УдалитьИзГруппы(Команда)
	
	мРасшифровки = Новый Массив();
	Области = Результат.ВыделенныеОбласти;
	
	Для Каждого Область Из Области Цикл
		Для Строка = Область.Верх По Область.Низ Цикл
			Для Столбец = 1 По 200 Цикл
				Расшифровка = Результат.Область("R" + Формат(Строка, "ЧГ=0") + "C" + Столбец).Расшифровка;
				Если ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
					мРасшифровки.Добавить(Расшифровка);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	УдалитьЭлементы(мРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьГруппу(Команда)

	СегментыВызовСервера.СформироватьГруппуПолучателейСкидки(ГруппаПолучателей);
	СкомпоноватьРезультат();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Удаляет выбранные элементы из состава сегмента.
&НаСервере
Процедура УдалитьЭлементы(Расшифровки)

	ДанныеРасшифровкиОтчета = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	
	Для Каждого Расшифровка Из Расшифровки Цикл
		ЭлементРасшифровки = ДанныеРасшифровкиОтчета.Элементы[Расшифровка];
		Для Каждого ЗначениеПоляРасшифровки Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			Значение = ЗначениеПоляРасшифровки.Значение;
			Если (ТипЗнч(Значение) = Тип("СправочникСсылка.ФизическиеЛица") ИЛИ ТипЗнч(Значение) = Тип("СправочникСсылка.Контрагенты"))
				И ЗначениеЗаполнено(Значение) Тогда
				НаборЗаписей = РегистрыСведений.СоставГруппПолучателейСкидки.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ГруппаПолучателейСкидки.Установить(ГруппаПолучателей);
				НаборЗаписей.Отбор.Получатель.Установить(Значение);
				НаборЗаписей.Записать(); 
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	СкомпоноватьРезультат();

КонецПроцедуры

// Возвращает возможный для просмотра элемент.
&НаСервере
Функция РасшифроватьЭлемент(Расшифровка)

	ДанныеРасшифровкиОтчета = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	ЭлементРасшифровки = ДанныеРасшифровкиОтчета.Элементы[Расшифровка];

	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для Каждого ЗначениеПоляРасшифровки Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			Значение = ЗначениеПоляРасшифровки.Значение;
			Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение))
			 ИЛИ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
				Возврат Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

// Добавляет элемент в состав сегмента.
&НаСервере
Процедура ДобавитьЭлемент(Элемент, СкомпоноватьРезультат = Ложь, ВыводитьСообщения = Ложь)
	
	Если ТипЗнч(Элемент) = Тип("Массив") Тогда
		Для каждого ЭлементМассива Из Элемент Цикл
			ДобавитьЭлемент(ЭлементМассива, СкомпоноватьРезультат, ВыводитьСообщения);
		КонецЦикла;
		Возврат;
	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.ФизическиеЛица") 
		ИЛИ ТипЗнч(Элемент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Получатель = Элемент;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Получатель.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запись = РегистрыСведений.СоставГруппПолучателейСкидки.СоздатьМенеджерЗаписи();
	Запись.ГруппаПолучателейСкидки = ГруппаПолучателей;
	Запись.Получатель = Получатель;
	Запись.Прочитать();
	
	Если Запись.Выбран() Тогда
		Если ВыводитьСообщения Тогда
			ТекстСообщения = НСтр("ru='Элемент %1 уже включен в группу получателей.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Получатель);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	Иначе
		Запись.ГруппаПолучателейСкидки = ГруппаПолучателей;
		Запись.Получатель = Получатель;
		Запись.Записать();
		Если СкомпоноватьРезультат Тогда
			СкомпоноватьРезультат();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СписокТиповПолучателей()
	
	СписокРезультат = Новый СписокЗначений;
	
	Если ТипПолучателей = ПредопределенноеЗначение("Перечисление.ТипыПолучателейСкидок.ФизическиеЛица") Тогда
		СписокРезультат.Добавить("Физические лица");
	ИначеЕсли ТипПолучателей = ПредопределенноеЗначение("Перечисление.ТипыПолучателейСкидок.Контрагенты") Тогда
		СписокРезультат.Добавить("Контрагенты");
	Иначе
		СписокРезультат.Добавить("Физические лица");
		СписокРезультат.Добавить("Контрагенты");
	КонецЕсли;
	
	Возврат СписокРезультат;
	
КонецФункции

#КонецОбласти
