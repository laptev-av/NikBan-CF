&НаСервере
Процедура РасчитатьАналитикуНачисленияБонусов()
	СтруктураДанных = nb_ПрограммаЛояльностиДружбаСервер.ПолучитьАналитикуНачисленияБонусов(Объект.Дата);
	ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных);
КонецПроцедуры // ()


&НаСервере
Процедура nb_nb_РассчитатьФинРезультатПослеНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧекККМ.ВидОперации КАК ВидОперации,
		|	NULL КАК ВидОплаты,
		|	ЧекККМТовары.Номенклатура КАК Номенклатура,
		|	ЧекККМТовары.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
		|			ТОГДА ЧекККМТовары.КоличествоУпаковок * -1
		|		ИНАЧЕ ЧекККМТовары.КоличествоУпаковок
		|	КОНЕЦ КАК КоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
		|			ТОГДА ЧекККМТовары.Сумма * -1
		|		ИНАЧЕ ЧекККМТовары.Сумма
		|	КОНЕЦ КАК СуммаПродажи,
		|	0 КАК СуммаКомиссии,
		|	0 КАК СуммаБезналичный,
		|	ВЫБОР
		|		КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
		|			ТОГДА ЧекККМТовары.Сумма * -1
		|		ИНАЧЕ ЧекККМТовары.Сумма
		|	КОНЕЦ КАК СуммаНаличные
		|ПОМЕСТИТЬ ВТ_ДанныеПоЧекам
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ЧекККМ
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК КассоваяСмена
		|			ПО (КассоваяСмена.НомерСменыККТ = ЧекККМ.НомерСменыККМ)
		|		ПО ЧекККМТовары.Ссылка = ЧекККМ.Ссылка
		|ГДЕ
		|	КассоваяСмена.Ссылка В(&КассоваяСмена)
		|	И (ЧекККМ.СтатусЧекаККМ = &СтатусЧекаККМ_Архивный
		|			ИЛИ ЧекККМ.СтатусЧекаККМ = &СтатусЧекаККМ_Пробит)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекККМ.ВидОперации,
		|	ЧекККМОплата.ВидОплаты,
		|	NULL,
		|	NULL,
		|	0,
		|	0,
		|	ЧекККМОплата.СуммаКомиссии,
		|	ВЫБОР
		|		КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
		|			ТОГДА ЧекККМОплата.Сумма * -1
		|		ИНАЧЕ ЧекККМОплата.Сумма
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
		|			ТОГДА ЧекККМОплата.Сумма * -1
		|		ИНАЧЕ ЧекККМОплата.Сумма
		|	КОНЕЦ * -1
		|ИЗ
		|	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ КАК ЧекККМ
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК КассоваяСмена
		|			ПО (КассоваяСмена.НомерСменыККТ = ЧекККМ.НомерСменыККМ)
		|		ПО ЧекККМОплата.Ссылка = ЧекККМ.Ссылка
		|ГДЕ
		|	КассоваяСмена.Ссылка В(&КассоваяСмена)
		|	И (ЧекККМ.СтатусЧекаККМ = &СтатусЧекаККМ_Архивный
		|			ИЛИ ЧекККМ.СтатусЧекаККМ = &СтатусЧекаККМ_Пробит)
		|	И ЧекККМОплата.ВидОплаты = &ВидОплатыБезналичный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеПоЧекам.ВидОперации КАК ВидОперации,
		|	ВТ_ДанныеПоЧекам.Номенклатура КАК Номенклатура,
		|	ВТ_ДанныеПоЧекам.Характеристика КАК Характеристика,
		|	СУММА(ВТ_ДанныеПоЧекам.СуммаКомиссии) КАК СуммаКомиссии,
		|	СУММА(ВТ_ДанныеПоЧекам.СуммаПродажи) КАК СуммаПродажи,
		|	СУММА(ВТ_ДанныеПоЧекам.СуммаБезналичный) КАК СуммаБезналичный,
		|	СУММА(ВТ_ДанныеПоЧекам.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ВТ_ДанныеПоЧекам.СуммаНаличные) КАК СуммаНаличные
		|ПОМЕСТИТЬ ВТ_Исходная
		|ИЗ
		|	ВТ_ДанныеПоЧекам КАК ВТ_ДанныеПоЧекам
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДанныеПоЧекам.ВидОперации,
		|	ВТ_ДанныеПоЧекам.Номенклатура,
		|	ВТ_ДанныеПоЧекам.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Исходная.ВидОперации КАК ВидОперации,
		|	ВТ_Исходная.Номенклатура КАК Номенклатура,
		|	ВТ_Исходная.Характеристика КАК Характеристика,
		|	ВТ_Исходная.СуммаКомиссии КАК СуммаКомиссии,
		|	ВТ_Исходная.СуммаПродажи КАК Сумма,
		|	ВТ_Исходная.СуммаБезналичный КАК СуммаБезналичный,
		|	ВТ_Исходная.КоличествоУпаковок КАК Количество,
		|	ВТ_Исходная.СуммаНаличные КАК СуммаНаличные
		|ИЗ
		|	ВТ_Исходная КАК ВТ_Исходная
		|ИТОГИ
		|	СУММА(СуммаКомиссии),
		|	СУММА(Сумма),
		|	СУММА(СуммаБезналичный),
		|	СУММА(Количество),
		|	СУММА(СуммаНаличные)
		|ПО
		|	ОБЩИЕ";
	
	Запрос.УстановитьПараметр("ВидОплатыБезналичный", 	Справочники.ВидыОплатЧекаККМ.НайтиПоКоду("0Р-000006"));
	Запрос.УстановитьПараметр("КассоваяСмена", Объект.Ссылка);
	Запрос.УстановитьПараметр("СтатусЧекаККМ_Архивный", Перечисления.СтатусыЧековККМ.Архивный);
	Запрос.УстановитьПараметр("СтатусЧекаККМ_Пробит", Перечисления.СтатусыЧековККМ.Пробитый);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Объект.nb_СуммаВыручки = ВыборкаДетальныеЗаписи.Сумма;
		Объект.nb_СуммаВыручкиБезНаличная = ВыборкаДетальныеЗаписи.СуммаБезналичный;
		Объект.nb_СуммаВыручкиНаличная = ВыборкаДетальныеЗаписи.СуммаНаличные;
		
		Объект.nb_СуммаВКассеНаКонецСмены = Объект.nb_СуммаВКассеНаНачалоСмены + Объект.nb_СуммаВыручки - Объект.nb_СуммаРасходы - Объект.nb_СуммаВыручкиБезНаличная - Объект.nb_СуммаКорректировки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура nb_nb_РассчитатьФинРезультатПосле(Команда)
	nb_nb_РассчитатьФинРезультатПослеНаСервере();
	РасчитатьАналитикуНачисленияБонусов();
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура nb_nb_ОткрытьСводныеОтчетПослеНаСервере()

	
КонецПроцедуры

&НаКлиенте
Процедура nb_nb_ОткрытьСводныеОтчетПосле(Команда)
	ПараметрыОтчета = Новый Структура("КассоваяСмена", Объект.Ссылка);
	ОткрытьФорму("Отчет.nb_СводныйОтчетПоСмене_01.Форма.ФормаОтчета", ПараметрыОтчета, ЭтаФорма);
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресФайлаОтчетаВХранилище()
	ОтчетОбъект = Отчеты.nb_СводныйОтчетПоСмене_01.Создать();
	ОтчетОбъект.КассоваяСмена = Объект.Ссылка;
	ТабДок = Новый ТабличныйДокумент;
	ОтчетОбъект.ЗаполнитьТабличныйДокументРезультатаОтчета(ТабДок);
	
	tmpФайл = ПолучитьИмяВременногоФайла();
    ТабДок.Записать(tmpФайл,ТипФайлаТабличногоДокумента.XLS);
	ДвоичныеДанные = Новый ДвоичныеДанные(tmpФайл);
	
	АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	Возврат АдресФайлаВХранилище
КонецФункции	

&НаСервере
Процедура nb_nb_ОтправитьОтчетEMail()
	
	АдресФайлаОтчета = ПолучитьАдресФайлаОтчетаВХранилище();
	ИмяФайлаОтчета = "Report_"+Формат(Объект.Дата,"ДФ=ггггммддччммсс")+".xls";
	Вложение = Новый Структура("Представление, АдресВоВременномХранилище", ИмяФайлаОтчета, АдресФайлаОтчета);
	Вложения = Новый Массив;
	Вложения.Добавить(Вложение);
	

	ТекстТемы = "Николаевские бани. Отчет по смене №"+ СокрЛП(Объект.Номер) + " от "+Формат(Объект.Дата, "ДФ=dd.MM.yyyy");
	ТекстСообщения = НСтр("ru = 'Отчет во вложении'");
	
	АдресаПолучателя = Новый Массив;
	АдресПолучателя = Новый Структура("Адрес, Представление","banya.office@gmail.com","Николаевские бани");
	АдресаПолучателя.Добавить(АдресПолучателя);
	АдресПолучателя = Новый Структура("Адрес, Представление","alaptev@mail.ru","alaptev");
	АдресаПолучателя.Добавить(АдресПолучателя);
	АдресПолучателя = Новый Структура("Адрес, Представление","tkachevlv@inbox.ru","tkachev");
	АдресаПолучателя.Добавить(АдресПолучателя);
	
	АдресОтвета = Новый Массив;
	АдресОтвета.Добавить(Новый Структура("Адрес, Представление","","Николаевские бани"));
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Кому", АдресаПолучателя);
	ПараметрыПисьма.Вставить("Тема", ТекстТемы);
	ПараметрыПисьма.Вставить("Тело", ТекстСообщения);
	ПараметрыПисьма.Вставить("Вложения", Вложения);
	ПараметрыПисьма.Вставить("АдресОтвета", АдресОтвета);
	
	РезультатОтправки = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(
								РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(),
								ПараметрыПисьма);
	
	
	Объект.nb_ОтчетОтправлен = ТекущаяДата();
КонецПроцедуры

&НаСервере
Процедура nb_nb_ОтправитьОтчетSMS()
	ШаблонСтроки = "Отчет № [Номер] от [Дата]
					|Начало смены: [nb_СуммаВКассеНаНачалоСмены]
					|Выручки (ВСЕГО): [nb_СуммаВыручки]
					|В том числе(нал.): [nb_СуммаВыручкиНаличная]
					|В том числе(без. нал.): [nb_СуммаВыручкиБезНаличная]
					|Расходы (наличные): [nb_СуммаРасходы]
					|Корректировки: [nb_СуммаКорректировки]
					|Конец смены: [nb_СуммаВКассеНаКонецСмены]
					|[НачалоКассовойСмены] - [ОкончаниеКассовойСмены] [Статус]";
						
	СтруктураДанных = Новый Структура("Номер,Дата,НачалоКассовойСмены, ОкончаниеКассовойСмены, Статус, nb_СуммаВКассеНаНачалоСмены,nb_СуммаВыручки,nb_СуммаВыручкиНаличная,nb_СуммаВыручкиБезНаличная,nb_СуммаРасходы,nb_СуммаКорректировки,nb_СуммаВКассеНаКонецСмены");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, Объект);
	СтруктураДанных.Дата = Формат(Объект.Дата, "ДФ=dd.MM.yyyy");
	
	ТекстSMS = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСтроки, СтруктураДанных);
	НомераПолучателей = Новый Массив;
//	НомераПолучателей.Добавить("+79138314190");
	НомераПолучателей.Добавить("+79039210813");
	НомераПолучателей.Добавить("+79135400760");
	ИмяОтправителя = "Николаевские бани";
	
	ОтправкаSMS.ОтправитьSMS(НомераПолучателей,ТекстSMS, ИмяОтправителя);
	
КонецПроцедуры


&НаКлиенте
Процедура nb_nb_ОтправитьОтчетПосле(Команда)
	nb_nb_ОтправитьОтчетEMail();
	nb_nb_ОтправитьОтчетSMS();	
	Сообщить("Отчет отправлен!");
КонецПроцедуры

&НаКлиенте
Процедура nb_nb_ЗакрытьДокументПосле(Команда)
	ЭтаФорма.Закрыть()	
КонецПроцедуры

&НаКлиенте
Процедура nb_ЗакрытьСменуВместо(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры
