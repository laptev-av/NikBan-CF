
Функция УстановитьЗначениеПараметраСКД(ОтчетКомпоновщикНастроек, ИмяПараметра, ЗначениеПараметра, ИспользоватьНеЗаполненный = Истина)
	
	ПараметрУстановлен = Ложь;
	
	ПараметрВидЦены = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ЗначениеПараметраВидЦены = ОтчетКомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрВидЦены);
	Если ЗначениеПараметраВидЦены <> Неопределено Тогда
		
		ЗначениеПараметраВидЦены.Значение = ЗначениеПараметра;
		ЗначениеПараметраВидЦены.Использование = ?(ИспользоватьНеЗаполненный, Истина, ЗначениеЗаполнено(ЗначениеПараметраВидЦены.Значение));
		
		ПараметрУстановлен = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрУстановлен;
	
КонецФункции


Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	//УстановитьПараметрыСКД(КомпоновщикНастроек);
	
	СтандартнаяОбработка = Ложь;
	ЗаполнитьТабличныйДокументРезультатаОтчета(ДокументРезультат)

КонецПроцедуры


Функция ПолучитьСтруктуруПараметровОтчета()
	СтруктураПараметровОтчета = Новый Структура("КассоваяСмена, АдминистраторКассир, НомерСменыККТ, НачалоКассовойСмены, ОкончаниеКассовойСмены");
	
	СтруктураПараметровОтчета.Вставить("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Свойство"));
	СтруктураПараметровОтчета.Вставить("Группа_Номера", Справочники.Номенклатура.НайтиПоНаименованию("Банные классы",Истина));
	СтруктураПараметровОтчета.Вставить("Группа_ОбщееОтделение", Справочники.Номенклатура.НайтиПоНаименованию("Общее отделение",Истина));
	СтруктураПараметровОтчета.Вставить("Группа_Веники", Справочники.Номенклатура.НайтиПоНаименованию("Веники",Истина));
	СтруктураПараметровОтчета.Вставить("Группа_Прачечная", Справочники.Номенклатура.НайтиПоНаименованию("Прачечная",Истина));
	СтруктураПараметровОтчета.Вставить("Группа_Товары", Справочники.Номенклатура.НайтиПоНаименованию("Товары",Истина));
	СтруктураПараметровОтчета.Вставить("Группа_Услуги", Справочники.Номенклатура.НайтиПоНаименованию("Услуги",Истина));
	СтруктураПараметровОтчета.Вставить("Группа_Прокат", Справочники.Номенклатура.НайтиПоНаименованию("Прокат",Истина));
	СтруктураПараметровОтчета.Вставить("Группа_МКресло", Справочники.Номенклатура.НайтиПоНаименованию("Массажное кресло",Истина));
	СтруктураПараметровОтчета.Вставить("ВидОплатыБезналичный", Справочники.ВидыОплатЧекаККМ.НайтиПоКоду("0Р-000006"));
	СтруктураПараметровОтчета.Вставить("Хар_ДопГость", Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Доп. гость"));
	Хар_08_17 = Новый Массив();
	Хар_08_17.Добавить(Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("1.Будни с 08:00 до 17:00"));
	Хар_08_17.Добавить(Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("2.Скидка 20% с 08:00 до 17:00"));
	Хар_08_17.Добавить(Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("3.Душ (без парильни) за 30 минут"));
	Хар_08_17.Добавить(Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("4.Душ (с парильней) за 30 минут"));
	
	СтруктураПараметровОтчета.Вставить("Хар_08_17", Хар_08_17);
	
	Возврат СтруктураПараметровОтчета	
КонецФункции	

Процедура УстановитьПараметрыКассовойСмены(СтруктураПараметровОтчета)

	Если ЗначениеЗаполнено(КассоваяСмена) Тогда
		СтруктураПараметровОтчета.КассоваяСмена 			= КассоваяСмена; 
		//СтруктураПараметровОтчета.АдминистраторКассир 		= КассоваяСмена.АдминистраторКассир;
		//СтруктураПараметровОтчета.НомерСменыККТ 			= КассоваяСмена.НомерСменыККТ;
		//СтруктураПараметровОтчета.НачалоКассовойСмены 		= Формат(КассоваяСмена.НачалоКассовойСмены,"");
		//СтруктураПараметровОтчета.ОкончаниеКассовойСмены 	= Формат(КассоваяСмена.ОкончаниеКассовойСмены,"");
	КонецЕсли;
	

КонецПроцедуры

Процедура УстановитьПараметрыСКД(ОтчетКомпоновщикНастроек) Экспорт
	
	СтруктураПараметровОтчета = ПолучитьСтруктуруПараметровОтчета();
	УстановитьПараметрыКассовойСмены(СтруктураПараметровОтчета);
	
	Для Каждого ПараметрОтчета Из СтруктураПараметровОтчета Цикл
		
		УстановитьЗначениеПараметраСКД(ОтчетКомпоновщикНастроек,ПараметрОтчета.Ключ, ПараметрОтчета.Значение);
		
	КонецЦикла;	
	
КонецПроцедуры	


Функция ЗаполнитьТабличныйДокументРезультатаОтчета(ТабДок) Экспорт
	
	
	// Заполнить шапку отчета
	Макет = ЭтотОбъект.ПолучитьМакет("Макет_СоставСмены");

	//получим область "Заголовок" как новый табличный документ (!)
	Область = Макет.ПолучитьОбласть("ОбластьШапка");

	//укажем параметры области
	Область.Параметры.Заполнить(КассоваяСмена);
	Область.Параметры.Дата = Формат(КассоваяСмена.Дата, "ДФ=dd.MM.yyyy");
	Область.Параметры.ДеньНедели = ВРег(Формат(КассоваяСмена.Дата, "ДФ=дддд"));

	//выведем заполненную область "Заголовок" в табличный документ
	ТабДок.Вывести(Область);	
	
	
    СКД=ЭтотОбъект.ПолучитьМакет("Макет");
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить();
	
	//Настройки = КомпоновщикНастроек.Настройки;	
	//УстановитьПараметрыСКД(КомпоновщикНастроек);
	УстановитьПараметрыСКД(КомпоновщикНастроек);
	                                
	//Магазин=Настройки.ПараметрыДанных.Элементы.Найти("Магазин");
	//Магазин.Значение=Справочники.Магазины.НайтиПоНаименованию("Вологда Торговля");
 
    Расшифровка = Новый ДанныеРасшифровкиКомпоновкиДанных;
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;    
     
    //Передаем в макет компоновки схему, настройки и данные расшифровки
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, КомпоновщикНастроек.Настройки, Расшифровка);    
    ВнешниеПараметры = Новый Структура;    
     
    //Выполним компоновку с помощью процессора компоновки
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеПараметры, Расшифровка);    
     
    //Выводим результат в табличный документ
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ТабДок);    
    //ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);      
	
	ПроцессорВывода.НачатьВывод();

	ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
	Пока ЭлементРезультата <> Неопределено Цикл
	    Если ЭлементРезультата.ЗначенияПараметров.Количество()=1 Тогда
	            Если ЭлементРезультата.ЗначенияПараметров[0].Значение = "Разорвать" Тогда
	            ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	        КонецЕсли;
	    КонецЕсли;
	    ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
	    ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
	КонецЦикла;
	ПроцессорВывода.ЗакончитьВывод();	
	
	
	Возврат ТабДок
КонецФункции	